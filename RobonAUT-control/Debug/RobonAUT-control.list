
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b294  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800b468  0800b468  0001b468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bad8  0800bad8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae0  0800bae0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001e8  0800bcd0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800bcd0  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136ef  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a1  00000000  00000000  00033907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  000362a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00037238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fcb  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ae7  00000000  00000000  0005d07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfeb0  00000000  00000000  00070b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  00150a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b44c 	.word	0x0800b44c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b44c 	.word	0x0800b44c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <F4_Basic_Init>:
#include <math.h>

// hadc2;huart

void F4_Basic_Init(UART_HandleTypeDef *huart,TIM_HandleTypeDef *htim,TIM_HandleTypeDef *htim3,TIM_HandleTypeDef *htim2)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
	uint8_t buf[30];
	LED_R(0);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa0:	4828      	ldr	r0, [pc, #160]	; (8001044 <F4_Basic_Init+0xb8>)
 8000fa2:	f003 f83f 	bl	8004024 <HAL_GPIO_WritePin>
	LED_B(0);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	4825      	ldr	r0, [pc, #148]	; (8001044 <F4_Basic_Init+0xb8>)
 8000fae:	f003 f839 	bl	8004024 <HAL_GPIO_WritePin>
	LED_G(0);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4823      	ldr	r0, [pc, #140]	; (8001044 <F4_Basic_Init+0xb8>)
 8000fb8:	f003 f834 	bl	8004024 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <F4_Basic_Init+0xb8>)
 8000fc4:	f003 f82e 	bl	8004024 <HAL_GPIO_WritePin>
	memset(buf,0,30); //a buf tömböt feltöltöm 0-kkal
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	221e      	movs	r2, #30
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 f901 	bl	80071d8 <memset>
	sprintf(buf,"RobonAUT 2022 Bit Bangers\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	491b      	ldr	r1, [pc, #108]	; (8001048 <F4_Basic_Init+0xbc>)
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f006 fd6d 	bl	8007abc <siprintf>
	HAL_UART_Transmit(huart, buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f912 	bl	8000210 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f107 0110 	add.w	r1, r7, #16
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f005 fcad 	bl	8006956 <HAL_UART_Transmit>
	HAL_TIM_Base_Start(htim);//heart beat timer tick start
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f003 fecd 	bl	8004d9c <HAL_TIM_Base_Start>

	//MotorEnable engedélyezése
	motorEnRemote=1;
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <F4_Basic_Init+0xc0>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
	motorEnBattOk=1;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <F4_Basic_Init+0xc4>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]

	//kezdeti pwm kitoltes megadasa->0 hiszen nem akarjuk h forogjon
	TIM3->CCR1=0;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <F4_Basic_Init+0xc8>)
 8001010:	2200      	movs	r2, #0
 8001012:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <F4_Basic_Init+0xc8>)
 8001016:	2200      	movs	r2, #0
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f003 ff75 	bl	8004f0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8001022:	2104      	movs	r1, #4
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f003 ff71 	bl	8004f0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 800102a:	2100      	movs	r1, #0
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f003 ff6d 	bl	8004f0c <HAL_TIM_PWM_Start>
	TIM2->CCR1=600;
 8001032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001036:	f44f 7216 	mov.w	r2, #600	; 0x258
 800103a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400
 8001048:	0800b468 	.word	0x0800b468
 800104c:	200005c4 	.word	0x200005c4
 8001050:	200005c5 	.word	0x200005c5
 8001054:	40000400 	.word	0x40000400

08001058 <Meas_Bat_Task>:


void Meas_Bat_Task(ADC_HandleTypeDef *hadc,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b090      	sub	sp, #64	; 0x40
 800105c:	af02      	add	r7, sp, #8
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
	float bat;
	char msg[30];
	static uint32_t meas_bat_tick=0;


	if(meas_bat_tick>tick) return;
 8001066:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <Meas_Bat_Task+0x138>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	f0c0 8085 	bcc.w	800117c <Meas_Bat_Task+0x124>
	meas_bat_tick= tick + period;
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a45      	ldr	r2, [pc, #276]	; (8001190 <Meas_Bat_Task+0x138>)
 800107a:	6013      	str	r3, [r2, #0]

	//get ADC value
	HAL_ADC_Start(hadc);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f001 fdd9 	bl	8002c34 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1);
 8001082:	2101      	movs	r1, #1
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f001 fea7 	bl	8002dd8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(hadc);
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f001 ff2f 	bl	8002eee <HAL_ADC_GetValue>
 8001090:	4603      	mov	r3, r0
 8001092:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Raw to Volt
	bat=(float)raw/2091*8.05;
 8001094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001194 <Meas_Bat_Task+0x13c>
 80010a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010a6:	ee16 0a90 	vmov	r0, s13
 80010aa:	f7ff fa6d 	bl	8000588 <__aeabi_f2d>
 80010ae:	a336      	add	r3, pc, #216	; (adr r3, 8001188 <Meas_Bat_Task+0x130>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fac0 	bl	8000638 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd92 	bl	8000be8 <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30

	//Print Value
	sprintf(msg,"NI-MH feszultsege: %3.2f [V] (%d)\r\n",bat,raw);
 80010c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010ca:	f7ff fa5d 	bl	8000588 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80010d4:	f107 0010 	add.w	r0, r7, #16
 80010d8:	9100      	str	r1, [sp, #0]
 80010da:	492f      	ldr	r1, [pc, #188]	; (8001198 <Meas_Bat_Task+0x140>)
 80010dc:	f006 fcee 	bl	8007abc <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg),10);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f893 	bl	8000210 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f107 0110 	add.w	r1, r7, #16
 80010f2:	230a      	movs	r3, #10
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f005 fc2e 	bl	8006956 <HAL_UART_Transmit>


	memset(msg,0,30);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	221e      	movs	r2, #30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 f868 	bl	80071d8 <memset>
	if (raw<1600 && EN_FB) //ha be van kapcolva a motorvezérlő és az akkuja feszültsége alacsony
 8001108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800110a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800110e:	d22b      	bcs.n	8001168 <Meas_Bat_Task+0x110>
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4822      	ldr	r0, [pc, #136]	; (800119c <Meas_Bat_Task+0x144>)
 8001114:	f002 ff6e 	bl	8003ff4 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d024      	beq.n	8001168 <Meas_Bat_Task+0x110>
	{
		meas_bat_tick= tick + period/10;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <Meas_Bat_Task+0x148>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <Meas_Bat_Task+0x138>)
 800112e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <Meas_Bat_Task+0x144>)
 8001136:	f002 ff8e 	bl	8004056 <HAL_GPIO_TogglePin>
		sprintf(msg,"Toltes szukseges\r\n");
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4919      	ldr	r1, [pc, #100]	; (80011a4 <Meas_Bat_Task+0x14c>)
 8001140:	4618      	mov	r0, r3
 8001142:	f006 fcbb 	bl	8007abc <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg),10);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f860 	bl	8000210 <strlen>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	f107 0110 	add.w	r1, r7, #16
 8001158:	230a      	movs	r3, #10
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f005 fbfb 	bl	8006956 <HAL_UART_Transmit>

		//MotorEnable kikapcsolása ha akksi fesz beesik.
		motorEnBattOk=0;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <Meas_Bat_Task+0x150>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	e00a      	b.n	800117e <Meas_Bat_Task+0x126>

	}
	else
	{
		LED_Y(0);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <Meas_Bat_Task+0x144>)
 8001170:	f002 ff58 	bl	8004024 <HAL_GPIO_WritePin>
		motorEnBattOk=1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <Meas_Bat_Task+0x150>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e000      	b.n	800117e <Meas_Bat_Task+0x126>
	if(meas_bat_tick>tick) return;
 800117c:	bf00      	nop
	}


}
 800117e:	3738      	adds	r7, #56	; 0x38
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	9999999a 	.word	0x9999999a
 800118c:	40201999 	.word	0x40201999
 8001190:	20000204 	.word	0x20000204
 8001194:	4502b000 	.word	0x4502b000
 8001198:	0800b484 	.word	0x0800b484
 800119c:	40020400 	.word	0x40020400
 80011a0:	cccccccd 	.word	0xcccccccd
 80011a4:	0800b4a8 	.word	0x0800b4a8
 80011a8:	200005c5 	.word	0x200005c5
 80011ac:	00000000 	.word	0x00000000

080011b0 <Read_G0_Task>:


void Read_G0_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debug, uint32_t tick, uint32_t period)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b09c      	sub	sp, #112	; 0x70
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]

#ifdef G0_DEBUG
	uint8_t str[30];
#endif
	uint8_t str[40];
	uint32_t dist=0;
 80011be:	2300      	movs	r3, #0
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t txBuf[]={CMD_READ};
 80011c2:	23ff      	movs	r3, #255	; 0xff
 80011c4:	773b      	strb	r3, [r7, #28]
	uint8_t rxBuf[]={0,0,0,0,0,0,0,0};
 80011c6:	4a7a      	ldr	r2, [pc, #488]	; (80013b0 <Read_G0_Task+0x200>)
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d0:	e883 0003 	stmia.w	r3, {r0, r1}
	static uint32_t read_g0_task_tick=0;
	float d=85;
 80011d4:	4b77      	ldr	r3, [pc, #476]	; (80013b4 <Read_G0_Task+0x204>)
 80011d6:	66bb      	str	r3, [r7, #104]	; 0x68
	float x_elso;
	float x_hatso;
	float p;
	float L_sensor=250;
 80011d8:	4b77      	ldr	r3, [pc, #476]	; (80013b8 <Read_G0_Task+0x208>)
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
	float L=272;
 80011dc:	4b77      	ldr	r3, [pc, #476]	; (80013bc <Read_G0_Task+0x20c>)
 80011de:	663b      	str	r3, [r7, #96]	; 0x60
	float delta;
	float gamma;



	if(read_g0_task_tick>tick) return;
 80011e0:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <Read_G0_Task+0x210>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	f0c0 80d8 	bcc.w	800139c <Read_G0_Task+0x1ec>
	read_g0_task_tick = tick + period;
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <Read_G0_Task+0x210>)
 80011f4:	6013      	str	r3, [r2, #0]


	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 80011f6:	f107 011c 	add.w	r1, r7, #28
 80011fa:	2301      	movs	r3, #1
 80011fc:	2201      	movs	r2, #1
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f005 fba9 	bl	8006956 <HAL_UART_Transmit>
	HAL_UART_Receive(huart_stm, rxBuf, 8, 2);
 8001204:	f107 0114 	add.w	r1, r7, #20
 8001208:	2302      	movs	r3, #2
 800120a:	2208      	movs	r2, #8
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f005 fc34 	bl	8006a7a <HAL_UART_Receive>
	if((rxBuf[0]==START_BYTE && rxBuf[7]==STOP_BYTE)) //jöt adat a G0 tól és a keret is megfelelő
 8001212:	7d3b      	ldrb	r3, [r7, #20]
 8001214:	2b17      	cmp	r3, #23
 8001216:	f040 80bb 	bne.w	8001390 <Read_G0_Task+0x1e0>
 800121a:	7efb      	ldrb	r3, [r7, #27]
 800121c:	2b12      	cmp	r3, #18
 800121e:	f040 80b7 	bne.w	8001390 <Read_G0_Task+0x1e0>
	{
		LED_G(1);
 8001222:	2200      	movs	r2, #0
 8001224:	2102      	movs	r1, #2
 8001226:	4867      	ldr	r0, [pc, #412]	; (80013c4 <Read_G0_Task+0x214>)
 8001228:	f002 fefc 	bl	8004024 <HAL_GPIO_WritePin>
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 800122c:	7e7b      	ldrb	r3, [r7, #25]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	7eba      	ldrb	r2, [r7, #26]
 8001232:	4313      	orrs	r3, r2
 8001234:	66fb      	str	r3, [r7, #108]	; 0x6c
		/*if (rxBuf[1]<1)
		{
			motorEnLineOk=0;
		}
		else*/
		motorEnLineOk=1;
 8001236:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <Read_G0_Task+0x218>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]

		x_elso=(rxBuf[2]-126)*194/235;
 800123c:	7dbb      	ldrb	r3, [r7, #22]
 800123e:	3b7e      	subs	r3, #126	; 0x7e
 8001240:	22c2      	movs	r2, #194	; 0xc2
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	4a61      	ldr	r2, [pc, #388]	; (80013cc <Read_G0_Task+0x21c>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	441a      	add	r2, r3
 800124e:	11d2      	asrs	r2, r2, #7
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		x_hatso=(rxBuf[3]-124)*194/234;
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	3b7c      	subs	r3, #124	; 0x7c
 8001264:	22c2      	movs	r2, #194	; 0xc2
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	4a59      	ldr	r2, [pc, #356]	; (80013d0 <Read_G0_Task+0x220>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	441a      	add	r2, r3
 8001272:	11d2      	asrs	r2, r2, #7
 8001274:	17db      	asrs	r3, r3, #31
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001280:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		p=x_elso;
 8001284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001286:	657b      	str	r3, [r7, #84]	; 0x54

		delta=atan((float)(x_elso-x_hatso)/L_sensor);
 8001288:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800128c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001290:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001294:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001298:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800129c:	ee16 0a90 	vmov	r0, s13
 80012a0:	f7ff f972 	bl	8000588 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	ec43 2b10 	vmov	d0, r2, r3
 80012ac:	f008 fe80 	bl	8009fb0 <atan>
 80012b0:	ec53 2b10 	vmov	r2, r3, d0
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc96 	bl	8000be8 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	653b      	str	r3, [r7, #80]	; 0x50
		gamma = -k_p*p -k_delta*delta;
 80012c0:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <Read_G0_Task+0x224>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb1 7a67 	vneg.f32	s14, s15
 80012ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <Read_G0_Task+0x228>)
 80012d4:	edd3 6a00 	vldr	s13, [r3]
 80012d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

		PHI=atan(((float)L/(L+d))*tan(gamma))*180.0/3.1415;
 80012e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80012ec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80012f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012fc:	ee16 0a90 	vmov	r0, s13
 8001300:	f7ff f942 	bl	8000588 <__aeabi_f2d>
 8001304:	4604      	mov	r4, r0
 8001306:	460d      	mov	r5, r1
 8001308:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800130a:	f7ff f93d 	bl	8000588 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ec43 2b10 	vmov	d0, r2, r3
 8001316:	f008 fff7 	bl	800a308 <tan>
 800131a:	ec53 2b10 	vmov	r2, r3, d0
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7ff f989 	bl	8000638 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	ec43 2b17 	vmov	d7, r2, r3
 800132e:	eeb0 0a47 	vmov.f32	s0, s14
 8001332:	eef0 0a67 	vmov.f32	s1, s15
 8001336:	f008 fe3b 	bl	8009fb0 <atan>
 800133a:	ec51 0b10 	vmov	r0, r1, d0
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <Read_G0_Task+0x22c>)
 8001344:	f7ff f978 	bl	8000638 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	a315      	add	r3, pc, #84	; (adr r3, 80013a8 <Read_G0_Task+0x1f8>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff fa99 	bl	800088c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc41 	bl	8000be8 <__aeabi_d2f>
 8001366:	4603      	mov	r3, r0
 8001368:	64bb      	str	r3, [r7, #72]	; 0x48

		TIM2->CCR1= (uint16_t)(-25 * PHI + 630);
 800136a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800136e:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 8001372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001376:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80013e0 <Read_G0_Task+0x230>
 800137a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	b29a      	uxth	r2, r3
 8001388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	e006      	b.n	800139e <Read_G0_Task+0x1ee>
*/
	/**/
	}
	else
	{
		LED_G(0);
 8001390:	2201      	movs	r2, #1
 8001392:	2102      	movs	r1, #2
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <Read_G0_Task+0x214>)
 8001396:	f002 fe45 	bl	8004024 <HAL_GPIO_WritePin>
 800139a:	e000      	b.n	800139e <Read_G0_Task+0x1ee>
	if(read_g0_task_tick>tick) return;
 800139c:	bf00      	nop
	}




}
 800139e:	3770      	adds	r7, #112	; 0x70
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	c083126f 	.word	0xc083126f
 80013ac:	400921ca 	.word	0x400921ca
 80013b0:	0800b4bc 	.word	0x0800b4bc
 80013b4:	42aa0000 	.word	0x42aa0000
 80013b8:	437a0000 	.word	0x437a0000
 80013bc:	43880000 	.word	0x43880000
 80013c0:	20000208 	.word	0x20000208
 80013c4:	40020400 	.word	0x40020400
 80013c8:	200005c6 	.word	0x200005c6
 80013cc:	8b70344b 	.word	0x8b70344b
 80013d0:	8c08c08d 	.word	0x8c08c08d
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004
 80013dc:	40668000 	.word	0x40668000
 80013e0:	441d8000 	.word	0x441d8000

080013e4 <Motor_Drive_Task>:
int32_t motorDuty=150;//(-1000)-től (1000)-ig változhasson elméletben (gykorlatban -950 től 950 ig és a [-50,50] sáv is tiltott)
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Motor_Drive_Task(TIM_HandleTypeDef *htim, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
	static uint32_t motorDutyPrev=0;
	static uint32_t motor_drive_task_tick=0;
	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <Motor_Drive_Task+0x98>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d33b      	bcc.n	8001474 <Motor_Drive_Task+0x90>
	motor_drive_task_tick= tick + period;
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <Motor_Drive_Task+0x98>)
 8001404:	6013      	str	r3, [r2, #0]
	sprintf(buf,"Kitoltesi tenyezo: %d \r\n",DUTY);
	HAL_UART_Transmit(huart, buf, strlen(buf), 10);
	motor_drive_task_tick= tick + 2000;
#endif

	if(motorEnBattOk &&motorEnRemote &&motorEnLineOk) MOTOR_EN(1);//ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <Motor_Drive_Task+0x9c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00d      	beq.n	800142a <Motor_Drive_Task+0x46>
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <Motor_Drive_Task+0xa0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d009      	beq.n	800142a <Motor_Drive_Task+0x46>
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <Motor_Drive_Task+0xa4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <Motor_Drive_Task+0x46>
 800141e:	2201      	movs	r2, #1
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	481a      	ldr	r0, [pc, #104]	; (800148c <Motor_Drive_Task+0xa8>)
 8001424:	f002 fdfe 	bl	8004024 <HAL_GPIO_WritePin>
 8001428:	e004      	b.n	8001434 <Motor_Drive_Task+0x50>
	else MOTOR_EN(0); //amugy stop
 800142a:	2200      	movs	r2, #0
 800142c:	2140      	movs	r1, #64	; 0x40
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <Motor_Drive_Task+0xa8>)
 8001430:	f002 fdf8 	bl	8004024 <HAL_GPIO_WritePin>
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <Motor_Drive_Task+0xac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a16      	ldr	r2, [pc, #88]	; (8001494 <Motor_Drive_Task+0xb0>)
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <Motor_Drive_Task+0x84>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <Motor_Drive_Task+0xac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001448:	0fda      	lsrs	r2, r3, #31
 800144a:	4413      	add	r3, r2
 800144c:	105b      	asrs	r3, r3, #1
 800144e:	3b01      	subs	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
		ccr1= 1000-ccr2-2;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8001458:	3302      	adds	r3, #2
 800145a:	613b      	str	r3, [r7, #16]
		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <Motor_Drive_Task+0xb4>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <Motor_Drive_Task+0xb4>)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <Motor_Drive_Task+0xac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <Motor_Drive_Task+0xb0>)
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e000      	b.n	8001476 <Motor_Drive_Task+0x92>
	if(motor_drive_task_tick>tick) return;
 8001474:	bf00      	nop


}
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000020c 	.word	0x2000020c
 8001480:	200005c5 	.word	0x200005c5
 8001484:	200005c4 	.word	0x200005c4
 8001488:	200005c6 	.word	0x200005c6
 800148c:	40020400 	.word	0x40020400
 8001490:	20000008 	.word	0x20000008
 8001494:	20000210 	.word	0x20000210
 8001498:	40000400 	.word	0x40000400

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a2:	f001 fb11 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a6:	f000 f859 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014aa:	f000 fcd1 	bl	8001e50 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ae:	f000 fcaf 	bl	8001e10 <MX_DMA_Init>
  MX_TIM2_Init();
 80014b2:	f000 f9eb 	bl	800188c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80014b6:	f000 fc2d 	bl	8001d14 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80014ba:	f000 fadf 	bl	8001a7c <MX_TIM4_Init>
  MX_ADC2_Init();
 80014be:	f000 f911 	bl	80016e4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80014c2:	f000 fa59 	bl	8001978 <MX_TIM3_Init>
  MX_UART5_Init();
 80014c6:	f000 fbfb 	bl	8001cc0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80014ca:	f000 fc4d 	bl	8001d68 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80014ce:	f000 fb9f 	bl	8001c10 <MX_TIM8_Init>
  MX_ADC1_Init();
 80014d2:	f000 f8b5 	bl	8001640 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80014d6:	f000 fc71 	bl	8001dbc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80014da:	f000 fb4b 	bl	8001b74 <MX_TIM5_Init>
  MX_TIM1_Init();
 80014de:	f000 f953 	bl	8001788 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart2, &htim5,&htim3,&htim2);
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <main+0xa4>)
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <main+0xa8>)
 80014e6:	4918      	ldr	r1, [pc, #96]	; (8001548 <main+0xac>)
 80014e8:	4818      	ldr	r0, [pc, #96]	; (800154c <main+0xb0>)
 80014ea:	f7ff fd4f 	bl	8000f8c <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3); //inicializálunk a megfelelő perifériákkal
 80014ee:	2108      	movs	r1, #8
 80014f0:	4817      	ldr	r0, [pc, #92]	; (8001550 <main+0xb4>)
 80014f2:	f000 fd7d 	bl	8001ff0 <Remote_Control_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart2, TICK, 20);
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <main+0xac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	2214      	movs	r2, #20
 80014fe:	9200      	str	r2, [sp, #0]
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <main+0xb0>)
 8001502:	2108      	movs	r1, #8
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <main+0xb4>)
 8001506:	f000 fd8d 	bl	8002024 <Remote_Control_Task>
	  Meas_Bat_Task(&hadc2, &huart2, TICK, 10000);
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <main+0xac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001510:	f242 7310 	movw	r3, #10000	; 0x2710
 8001514:	490d      	ldr	r1, [pc, #52]	; (800154c <main+0xb0>)
 8001516:	480f      	ldr	r0, [pc, #60]	; (8001554 <main+0xb8>)
 8001518:	f7ff fd9e 	bl	8001058 <Meas_Bat_Task>
	  Motor_Drive_Task(&htim3, &huart2, TICK, 13);
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <main+0xac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	230d      	movs	r3, #13
 8001524:	4909      	ldr	r1, [pc, #36]	; (800154c <main+0xb0>)
 8001526:	4807      	ldr	r0, [pc, #28]	; (8001544 <main+0xa8>)
 8001528:	f7ff ff5c 	bl	80013e4 <Motor_Drive_Task>
	  Read_G0_Task(&huart5, &huart2, TICK, 50);
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <main+0xac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001532:	2332      	movs	r3, #50	; 0x32
 8001534:	4905      	ldr	r1, [pc, #20]	; (800154c <main+0xb0>)
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <main+0xbc>)
 8001538:	f7ff fe3a 	bl	80011b0 <Read_G0_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart2, TICK, 20);
 800153c:	e7db      	b.n	80014f6 <main+0x5a>
 800153e:	bf00      	nop
 8001540:	200002ec 	.word	0x200002ec
 8001544:	20000334 	.word	0x20000334
 8001548:	200003c4 	.word	0x200003c4
 800154c:	2000053c 	.word	0x2000053c
 8001550:	2000037c 	.word	0x2000037c
 8001554:	2000025c 	.word	0x2000025c
 8001558:	200004b4 	.word	0x200004b4

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	2234      	movs	r2, #52	; 0x34
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fe34 	bl	80071d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <SystemClock_Config+0xdc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a2b      	ldr	r2, [pc, #172]	; (8001638 <SystemClock_Config+0xdc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <SystemClock_Config+0xdc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <SystemClock_Config+0xe0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a25      	ldr	r2, [pc, #148]	; (800163c <SystemClock_Config+0xe0>)
 80015a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <SystemClock_Config+0xe0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015d0:	23b4      	movs	r3, #180	; 0xb4
 80015d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015dc:	2302      	movs	r3, #2
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 f8eb 	bl	80047c0 <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015f0:	f000 fcf8 	bl	8001fe4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015f4:	f002 fd4a 	bl	800408c <HAL_PWREx_EnableOverDrive>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015fe:	f000 fcf1 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2302      	movs	r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800160e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	2105      	movs	r1, #5
 8001620:	4618      	mov	r0, r3
 8001622:	f002 fd83 	bl	800412c <HAL_RCC_ClockConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800162c:	f000 fcda 	bl	8001fe4 <Error_Handler>
  }
}
 8001630:	bf00      	nop
 8001632:	3750      	adds	r7, #80	; 0x50
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001646:	463b      	mov	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_ADC1_Init+0x98>)
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <MX_ADC1_Init+0x9c>)
 8001656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_ADC1_Init+0x98>)
 800165a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800165e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_ADC1_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_ADC1_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_ADC1_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_ADC1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_ADC1_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_ADC1_Init+0x98>)
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <MX_ADC1_Init+0xa0>)
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_ADC1_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_ADC1_Init+0x98>)
 800168e:	2201      	movs	r2, #1
 8001690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_ADC1_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_ADC1_Init+0x98>)
 800169c:	2201      	movs	r2, #1
 800169e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_ADC1_Init+0x98>)
 80016a2:	f001 fa83 	bl	8002bac <HAL_ADC_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016ac:	f000 fc9a 	bl	8001fe4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016b0:	2308      	movs	r3, #8
 80016b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016bc:	463b      	mov	r3, r7
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_ADC1_Init+0x98>)
 80016c2:	f001 fc21 	bl	8002f08 <HAL_ADC_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016cc:	f000 fc8a 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000214 	.word	0x20000214
 80016dc:	40012000 	.word	0x40012000
 80016e0:	0f000001 	.word	0x0f000001

080016e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_ADC2_Init+0x98>)
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <MX_ADC2_Init+0x9c>)
 80016fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_ADC2_Init+0x98>)
 80016fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001702:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_ADC2_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_ADC2_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_ADC2_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_ADC2_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_ADC2_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_ADC2_Init+0x98>)
 8001726:	4a17      	ldr	r2, [pc, #92]	; (8001784 <MX_ADC2_Init+0xa0>)
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_ADC2_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_ADC2_Init+0x98>)
 8001732:	2201      	movs	r2, #1
 8001734:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_ADC2_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_ADC2_Init+0x98>)
 8001740:	2201      	movs	r2, #1
 8001742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_ADC2_Init+0x98>)
 8001746:	f001 fa31 	bl	8002bac <HAL_ADC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001750:	f000 fc48 	bl	8001fe4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001754:	230c      	movs	r3, #12
 8001756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_ADC2_Init+0x98>)
 8001766:	f001 fbcf 	bl	8002f08 <HAL_ADC_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001770:	f000 fc38 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000025c 	.word	0x2000025c
 8001780:	40012100 	.word	0x40012100
 8001784:	0f000001 	.word	0x0f000001

08001788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b092      	sub	sp, #72	; 0x48
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2220      	movs	r2, #32
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 fd10 	bl	80071d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <MX_TIM1_Init+0x100>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017e4:	4827      	ldr	r0, [pc, #156]	; (8001884 <MX_TIM1_Init+0xfc>)
 80017e6:	f003 fb41 	bl	8004e6c <HAL_TIM_PWM_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80017f0:	f000 fbf8 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001800:	4619      	mov	r1, r3
 8001802:	4820      	ldr	r0, [pc, #128]	; (8001884 <MX_TIM1_Init+0xfc>)
 8001804:	f004 ff78 	bl	80066f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800180e:	f000 fbe9 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001812:	2360      	movs	r3, #96	; 0x60
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	220c      	movs	r2, #12
 8001830:	4619      	mov	r1, r3
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <MX_TIM1_Init+0xfc>)
 8001834:	f004 f880 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800183e:	f000 fbd1 	bl	8001fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_TIM1_Init+0xfc>)
 8001866:	f004 ffc3 	bl	80067f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001870:	f000 fbb8 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_TIM1_Init+0xfc>)
 8001876:	f000 fe59 	bl	800252c <HAL_TIM_MspPostInit>

}
 800187a:	bf00      	nop
 800187c:	3748      	adds	r7, #72	; 0x48
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002a4 	.word	0x200002a4
 8001888:	40010000 	.word	0x40010000

0800188c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <MX_TIM2_Init+0xe8>)
 80018be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <MX_TIM2_Init+0xe8>)
 80018c6:	2259      	movs	r2, #89	; 0x59
 80018c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <MX_TIM2_Init+0xe8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <MX_TIM2_Init+0xe8>)
 80018d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80018d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <MX_TIM2_Init+0xe8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <MX_TIM2_Init+0xe8>)
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <MX_TIM2_Init+0xe8>)
 80018e6:	f003 fa09 	bl	8004cfc <HAL_TIM_Base_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018f0:	f000 fb78 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	4619      	mov	r1, r3
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <MX_TIM2_Init+0xe8>)
 8001902:	f004 f8db 	bl	8005abc <HAL_TIM_ConfigClockSource>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800190c:	f000 fb6a 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001910:	4818      	ldr	r0, [pc, #96]	; (8001974 <MX_TIM2_Init+0xe8>)
 8001912:	f003 faab 	bl	8004e6c <HAL_TIM_PWM_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800191c:	f000 fb62 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4619      	mov	r1, r3
 800192e:	4811      	ldr	r0, [pc, #68]	; (8001974 <MX_TIM2_Init+0xe8>)
 8001930:	f004 fee2 	bl	80066f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800193a:	f000 fb53 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193e:	2360      	movs	r3, #96	; 0x60
 8001940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8001942:	f240 23ed 	movw	r3, #749	; 0x2ed
 8001946:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM2_Init+0xe8>)
 8001958:	f003 ffee 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001962:	f000 fb3f 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM2_Init+0xe8>)
 8001968:	f000 fde0 	bl	800252c <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3738      	adds	r7, #56	; 0x38
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200002ec 	.word	0x200002ec

08001978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	; 0x38
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019aa:	4a33      	ldr	r2, [pc, #204]	; (8001a78 <MX_TIM3_Init+0x100>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019b6:	2260      	movs	r2, #96	; 0x60
 80019b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ce:	4829      	ldr	r0, [pc, #164]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019d0:	f003 f994 	bl	8004cfc <HAL_TIM_Base_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019da:	f000 fb03 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4822      	ldr	r0, [pc, #136]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019ec:	f004 f866 	bl	8005abc <HAL_TIM_ConfigClockSource>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019f6:	f000 faf5 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019fa:	481e      	ldr	r0, [pc, #120]	; (8001a74 <MX_TIM3_Init+0xfc>)
 80019fc:	f003 fa36 	bl	8004e6c <HAL_TIM_PWM_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a06:	f000 faed 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	4619      	mov	r1, r3
 8001a18:	4816      	ldr	r0, [pc, #88]	; (8001a74 <MX_TIM3_Init+0xfc>)
 8001a1a:	f004 fe6d 	bl	80066f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a24:	f000 fade 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a28:	2360      	movs	r3, #96	; 0x60
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_TIM3_Init+0xfc>)
 8001a40:	f003 ff7a 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a4a:	f000 facb 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2204      	movs	r2, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <MX_TIM3_Init+0xfc>)
 8001a56:	f003 ff6f 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001a60:	f000 fac0 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <MX_TIM3_Init+0xfc>)
 8001a66:	f000 fd61 	bl	800252c <HAL_TIM_MspPostInit>

}
 8001a6a:	bf00      	nop
 8001a6c:	3738      	adds	r7, #56	; 0x38
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000334 	.word	0x20000334
 8001a78:	40000400 	.word	0x40000400

08001a7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001aa8:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <MX_TIM4_Init+0xf4>)
 8001aaa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8001aac:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001aae:	f240 321f 	movw	r2, #799	; 0x31f
 8001ab2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ace:	4827      	ldr	r0, [pc, #156]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001ad0:	f003 f914 	bl	8004cfc <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001ada:	f000 fa83 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4820      	ldr	r0, [pc, #128]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001aec:	f003 ffe6 	bl	8005abc <HAL_TIM_ConfigClockSource>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001af6:	f000 fa75 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001afa:	481c      	ldr	r0, [pc, #112]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001afc:	f003 face 	bl	800509c <HAL_TIM_IC_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001b06:	f000 fa6d 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	4814      	ldr	r0, [pc, #80]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001b1a:	f004 fded 	bl	80066f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001b24:	f000 fa5e 	bl	8001fe4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b28:	230a      	movs	r3, #10
 8001b2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480b      	ldr	r0, [pc, #44]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001b40:	f003 fe5e 	bl	8005800 <HAL_TIM_IC_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001b4a:	f000 fa4b 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	220c      	movs	r2, #12
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_TIM4_Init+0xf0>)
 8001b56:	f003 fe53 	bl	8005800 <HAL_TIM_IC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001b60:	f000 fa40 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000037c 	.word	0x2000037c
 8001b70:	40000800 	.word	0x40000800

08001b74 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <MX_TIM5_Init+0x98>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001b98:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001b9c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001bba:	f003 f89f 	bl	8004cfc <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f000 fa0e 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001bd6:	f003 ff71 	bl	8005abc <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 fa00 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM5_Init+0x94>)
 8001bf2:	f004 fd81 	bl	80066f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001bfc:	f000 f9f2 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200003c4 	.word	0x200003c4
 8001c0c:	40000c00 	.word	0x40000c00

08001c10 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	; 0x30
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fada 	bl	80071d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c2e:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <MX_TIM8_Init+0xac>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001c84:	f003 fc0e 	bl	80054a4 <HAL_TIM_Encoder_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001c8e:	f000 f9a9 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM8_Init+0xa8>)
 8001ca0:	f004 fd2a 	bl	80066f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001caa:	f000 f99b 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3730      	adds	r7, #48	; 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000040c 	.word	0x2000040c
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <MX_UART5_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001ccc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001cd0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_UART5_Init+0x4c>)
 8001cf8:	f004 fde0 	bl	80068bc <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001d02:	f000 f96f 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200004b4 	.word	0x200004b4
 8001d10:	40005000 	.word	0x40005000

08001d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART1_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d4c:	f004 fdb6 	bl	80068bc <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f000 f945 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200004f8 	.word	0x200004f8
 8001d64:	40011000 	.word	0x40011000

08001d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_USART2_UART_Init+0x50>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART2_UART_Init+0x4c>)
 8001da0:	f004 fd8c 	bl	80068bc <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001daa:	f000 f91b 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000053c 	.word	0x2000053c
 8001db8:	40004400 	.word	0x40004400

08001dbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <MX_USART3_UART_Init+0x50>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART3_UART_Init+0x4c>)
 8001df4:	f004 fd62 	bl	80068bc <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dfe:	f000 f8f1 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000580 	.word	0x20000580
 8001e0c:	40004800 	.word	0x40004800

08001e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_DMA_Init+0x3c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <MX_DMA_Init+0x3c>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_DMA_Init+0x3c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	202f      	movs	r0, #47	; 0x2f
 8001e38:	f001 fb93 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001e3c:	202f      	movs	r0, #47	; 0x2f
 8001e3e:	f001 fbac 	bl	800359a <HAL_NVIC_EnableIRQ>

}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a54      	ldr	r2, [pc, #336]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a4d      	ldr	r2, [pc, #308]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a38      	ldr	r2, [pc, #224]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <MX_GPIO_Init+0x170>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	4833      	ldr	r0, [pc, #204]	; (8001fc4 <MX_GPIO_Init+0x174>)
 8001ef8:	f002 f894 	bl	8004024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2122      	movs	r1, #34	; 0x22
 8001f00:	4831      	ldr	r0, [pc, #196]	; (8001fc8 <MX_GPIO_Init+0x178>)
 8001f02:	f002 f88f 	bl	8004024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001f06:	2200      	movs	r2, #0
 8001f08:	f24e 0142 	movw	r1, #57410	; 0xe042
 8001f0c:	482f      	ldr	r0, [pc, #188]	; (8001fcc <MX_GPIO_Init+0x17c>)
 8001f0e:	f002 f889 	bl	8004024 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4826      	ldr	r0, [pc, #152]	; (8001fc4 <MX_GPIO_Init+0x174>)
 8001f2a:	f001 fecf 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <MX_GPIO_Init+0x174>)
 8001f46:	f001 fec1 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8001f4a:	2322      	movs	r3, #34	; 0x22
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <MX_GPIO_Init+0x178>)
 8001f62:	f001 feb3 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001f66:	f24e 0342 	movw	r3, #57410	; 0xe042
 8001f6a:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4813      	ldr	r0, [pc, #76]	; (8001fcc <MX_GPIO_Init+0x17c>)
 8001f80:	f001 fea4 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B1B4_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B1B4_Pin|B2_Pin|Motor_Feedback_Pin;
 8001f84:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <MX_GPIO_Init+0x17c>)
 8001f9a:	f001 fe97 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_GPIO_Init+0x178>)
 8001fb4:	f001 fe8a 	bl	8003ccc <HAL_GPIO_Init>

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400

08001fd0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){};
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	tEdge[0] = 0;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <Remote_Control_Init+0x30>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
	tEdge[1] = 0;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <Remote_Control_Init+0x30>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <Remote_Control_Init+0x30>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 800200c:	2303      	movs	r3, #3
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <Remote_Control_Init+0x30>)
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f003 f89c 	bl	8005150 <HAL_TIM_IC_Start_DMA>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200005c8 	.word	0x200005c8

08002024 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
	static int32_t dt1=0;
	static int32_t dt2=0;
	static uint32_t tLow=0;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 8002032:	4b4f      	ldr	r3, [pc, #316]	; (8002170 <Remote_Control_Task+0x14c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	f0c0 8095 	bcc.w	8002168 <Remote_Control_Task+0x144>
	remote_control_tick = tick + period;
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4413      	add	r3, r2
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <Remote_Control_Task+0x14c>)
 8002046:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8002048:	201e      	movs	r0, #30
 800204a:	f001 fab4 	bl	80035b6 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 800204e:	4b49      	ldr	r3, [pc, #292]	; (8002174 <Remote_Control_Task+0x150>)
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4b48      	ldr	r3, [pc, #288]	; (8002174 <Remote_Control_Task+0x150>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	bfb8      	it	lt
 800205c:	425b      	neglt	r3, r3
 800205e:	4a46      	ldr	r2, [pc, #280]	; (8002178 <Remote_Control_Task+0x154>)
 8002060:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <Remote_Control_Task+0x150>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <Remote_Control_Task+0x150>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	bfb8      	it	lt
 8002070:	425b      	neglt	r3, r3
 8002072:	4a42      	ldr	r2, [pc, #264]	; (800217c <Remote_Control_Task+0x158>)
 8002074:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 8002076:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <Remote_Control_Task+0x150>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <Remote_Control_Task+0x150>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	bfb8      	it	lt
 8002084:	425b      	neglt	r3, r3
 8002086:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <Remote_Control_Task+0x15c>)
 8002088:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 800208a:	201e      	movs	r0, #30
 800208c:	f001 fa85 	bl	800359a <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <Remote_Control_Task+0x154>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	dd06      	ble.n	80020aa <Remote_Control_Task+0x86>
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <Remote_Control_Task+0x154>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80020a4:	33ff      	adds	r3, #255	; 0xff
 80020a6:	4a34      	ldr	r2, [pc, #208]	; (8002178 <Remote_Control_Task+0x154>)
 80020a8:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <Remote_Control_Task+0x158>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	dd06      	ble.n	80020c4 <Remote_Control_Task+0xa0>
 80020b6:	4b31      	ldr	r3, [pc, #196]	; (800217c <Remote_Control_Task+0x158>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80020be:	33ff      	adds	r3, #255	; 0xff
 80020c0:	4a2e      	ldr	r2, [pc, #184]	; (800217c <Remote_Control_Task+0x158>)
 80020c2:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <Remote_Control_Task+0x15c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	dd06      	ble.n	80020de <Remote_Control_Task+0xba>
 80020d0:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <Remote_Control_Task+0x15c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80020d8:	33ff      	adds	r3, #255	; 0xff
 80020da:	4a29      	ldr	r2, [pc, #164]	; (8002180 <Remote_Control_Task+0x15c>)
 80020dc:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <Remote_Control_Task+0x154>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <Remote_Control_Task+0x158>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	da0b      	bge.n	8002102 <Remote_Control_Task+0xde>
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <Remote_Control_Task+0x154>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <Remote_Control_Task+0x15c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	da05      	bge.n	8002102 <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <Remote_Control_Task+0x154>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <Remote_Control_Task+0x160>)
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e016      	b.n	8002130 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <Remote_Control_Task+0x158>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <Remote_Control_Task+0x154>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	da0b      	bge.n	8002126 <Remote_Control_Task+0x102>
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <Remote_Control_Task+0x158>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <Remote_Control_Task+0x15c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	da05      	bge.n	8002126 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <Remote_Control_Task+0x158>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <Remote_Control_Task+0x160>)
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e004      	b.n	8002130 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <Remote_Control_Task+0x15c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <Remote_Control_Task+0x160>)
 800212e:	601a      	str	r2, [r3, #0]
	}
/*
	sprintf(string,"%d\n\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 100);
*/
	if(tLow<70 || tLow>100)
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <Remote_Control_Task+0x160>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b45      	cmp	r3, #69	; 0x45
 8002136:	d903      	bls.n	8002140 <Remote_Control_Task+0x11c>
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <Remote_Control_Task+0x160>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d909      	bls.n	8002154 <Remote_Control_Task+0x130>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 8002140:	2200      	movs	r2, #0
 8002142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002146:	4810      	ldr	r0, [pc, #64]	; (8002188 <Remote_Control_Task+0x164>)
 8002148:	f001 ff6c 	bl	8004024 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <Remote_Control_Task+0x168>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e00a      	b.n	800216a <Remote_Control_Task+0x146>
	}
	else
	{
		LED_R(0);
 8002154:	2201      	movs	r2, #1
 8002156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215a:	480b      	ldr	r0, [pc, #44]	; (8002188 <Remote_Control_Task+0x164>)
 800215c:	f001 ff62 	bl	8004024 <HAL_GPIO_WritePin>
		motorEnRemote=1;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <Remote_Control_Task+0x168>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e000      	b.n	800216a <Remote_Control_Task+0x146>
	if(remote_control_tick>tick) return;
 8002168:	bf00      	nop
	}
}
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200005d4 	.word	0x200005d4
 8002174:	200005c8 	.word	0x200005c8
 8002178:	200005d8 	.word	0x200005d8
 800217c:	200005dc 	.word	0x200005dc
 8002180:	200005e0 	.word	0x200005e0
 8002184:	200005e4 	.word	0x200005e4
 8002188:	40020400 	.word	0x40020400
 800218c:	200005c4 	.word	0x200005c4

08002190 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <HAL_MspInit+0x4c>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_MspInit+0x4c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_MspInit+0x4c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_MspInit+0x4c>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ce:	2007      	movs	r0, #7
 80021d0:	f001 f9bc 	bl	800354c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <HAL_ADC_MspInit+0xd8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d128      	bne.n	8002254 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a2c      	ldr	r2, [pc, #176]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 800223a:	2301      	movs	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223e:	2303      	movs	r3, #3
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	481c      	ldr	r0, [pc, #112]	; (80022c0 <HAL_ADC_MspInit+0xe0>)
 800224e:	f001 fd3d 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002252:	e02c      	b.n	80022ae <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_ADC_MspInit+0xe4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d127      	bne.n	80022ae <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a15      	ldr	r2, [pc, #84]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_ADC_MspInit+0xdc>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Curr_Pin|Motor_Bat_Pin;
 8002296:	230c      	movs	r3, #12
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800229a:	2303      	movs	r3, #3
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <HAL_ADC_MspInit+0xe8>)
 80022aa:	f001 fd0f 	bl	8003ccc <HAL_GPIO_Init>
}
 80022ae:	bf00      	nop
 80022b0:	3730      	adds	r7, #48	; 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40012000 	.word	0x40012000
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40012100 	.word	0x40012100
 80022c8:	40020800 	.word	0x40020800

080022cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_TIM_PWM_MspInit+0x3c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10d      	bne.n	80022fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_TIM_PWM_MspInit+0x40>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_TIM_PWM_MspInit+0x40>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_TIM_PWM_MspInit+0x40>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d116      	bne.n	8002360 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	4b52      	ldr	r3, [pc, #328]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a51      	ldr	r2, [pc, #324]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	201c      	movs	r0, #28
 8002354:	f001 f905 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002358:	201c      	movs	r0, #28
 800235a:	f001 f91e 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800235e:	e08b      	b.n	8002478 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_TIM_Base_MspInit+0x174>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10e      	bne.n	8002388 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	4b44      	ldr	r3, [pc, #272]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a43      	ldr	r2, [pc, #268]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697b      	ldr	r3, [r7, #20]
}
 8002386:	e077      	b.n	8002478 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM4)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <HAL_TIM_Base_MspInit+0x178>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d15f      	bne.n	8002452 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a39      	ldr	r2, [pc, #228]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b37      	ldr	r3, [pc, #220]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 80023ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023dc:	2302      	movs	r3, #2
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4829      	ldr	r0, [pc, #164]	; (800248c <HAL_TIM_Base_MspInit+0x17c>)
 80023e8:	f001 fc70 	bl	8003ccc <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <HAL_TIM_Base_MspInit+0x184>)
 80023f0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80023f2:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 80023f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023f8:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240c:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002414:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241c:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002424:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002428:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800242c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002434:	4816      	ldr	r0, [pc, #88]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002436:	f001 f8d9 	bl	80035ec <HAL_DMA_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002440:	f7ff fdd0 	bl	8001fe4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_TIM_Base_MspInit+0x180>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002450:	e012      	b.n	8002478 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM5)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_TIM_Base_MspInit+0x188>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10d      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	4a06      	ldr	r2, [pc, #24]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 8002466:	f043 0308 	orr.w	r3, r3, #8
 800246a:	6413      	str	r3, [r2, #64]	; 0x40
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <HAL_TIM_Base_MspInit+0x170>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40020400 	.word	0x40020400
 8002490:	20000454 	.word	0x20000454
 8002494:	400260b8 	.word	0x400260b8
 8002498:	40000c00 	.word	0x40000c00

0800249c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_TIM_Encoder_MspInit+0x84>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12b      	bne.n	8002516 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_TIM_Encoder_MspInit+0x88>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_TIM_Encoder_MspInit+0x88>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_TIM_Encoder_MspInit+0x88>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_TIM_Encoder_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_TIM_Encoder_MspInit+0x88>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_TIM_Encoder_MspInit+0x88>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = Enkoder_A_Pin|Enkoder_B_Pin;
 80024f6:	23c0      	movs	r3, #192	; 0xc0
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002506:	2303      	movs	r3, #3
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002512:	f001 fbdb 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	; 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40010400 	.word	0x40010400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020800 	.word	0x40020800

0800252c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a37      	ldr	r2, [pc, #220]	; (8002628 <HAL_TIM_MspPostInit+0xfc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11f      	bne.n	800258e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a35      	ldr	r2, [pc, #212]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 800256a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800257c:	2301      	movs	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	4619      	mov	r1, r3
 8002586:	482a      	ldr	r0, [pc, #168]	; (8002630 <HAL_TIM_MspPostInit+0x104>)
 8002588:	f001 fba0 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800258c:	e047      	b.n	800261e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002596:	d11f      	bne.n	80025d8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6313      	str	r3, [r2, #48]	; 0x30
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 80025b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025c6:	2301      	movs	r3, #1
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4817      	ldr	r0, [pc, #92]	; (8002630 <HAL_TIM_MspPostInit+0x104>)
 80025d2:	f001 fb7b 	bl	8003ccc <HAL_GPIO_Init>
}
 80025d6:	e022      	b.n	800261e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_TIM_MspPostInit+0x108>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d11d      	bne.n	800261e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_TIM_MspPostInit+0x100>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 80025fe:	23c0      	movs	r3, #192	; 0xc0
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800260e:	2302      	movs	r3, #2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	; (8002630 <HAL_TIM_MspPostInit+0x104>)
 800261a:	f001 fb57 	bl	8003ccc <HAL_GPIO_Init>
}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	; 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40010000 	.word	0x40010000
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000
 8002634:	40000400 	.word	0x40000400

08002638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b090      	sub	sp, #64	; 0x40
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a74      	ldr	r2, [pc, #464]	; (8002828 <HAL_UART_MspInit+0x1f0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d14b      	bne.n	80026f2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
 800265e:	4b73      	ldr	r3, [pc, #460]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a72      	ldr	r2, [pc, #456]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b70      	ldr	r3, [pc, #448]	; (800282c <HAL_UART_MspInit+0x1f4>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	4b6c      	ldr	r3, [pc, #432]	; (800282c <HAL_UART_MspInit+0x1f4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a6b      	ldr	r2, [pc, #428]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b69      	ldr	r3, [pc, #420]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a64      	ldr	r2, [pc, #400]	; (800282c <HAL_UART_MspInit+0x1f4>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_UART_MspInit+0x1f4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 80026ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026c0:	2308      	movs	r3, #8
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c8:	4619      	mov	r1, r3
 80026ca:	4859      	ldr	r0, [pc, #356]	; (8002830 <HAL_UART_MspInit+0x1f8>)
 80026cc:	f001 fafe 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 80026d0:	2304      	movs	r3, #4
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026e0:	2308      	movs	r3, #8
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e8:	4619      	mov	r1, r3
 80026ea:	4852      	ldr	r0, [pc, #328]	; (8002834 <HAL_UART_MspInit+0x1fc>)
 80026ec:	f001 faee 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026f0:	e096      	b.n	8002820 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a50      	ldr	r2, [pc, #320]	; (8002838 <HAL_UART_MspInit+0x200>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d12d      	bne.n	8002758 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	4a49      	ldr	r2, [pc, #292]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	6453      	str	r3, [r2, #68]	; 0x44
 800270c:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_UART_MspInit+0x1f4>)
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_UART_MspInit+0x1f4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4a42      	ldr	r2, [pc, #264]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6313      	str	r3, [r2, #48]	; 0x30
 8002728:	4b40      	ldr	r3, [pc, #256]	; (800282c <HAL_UART_MspInit+0x1f4>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8002734:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002746:	2307      	movs	r3, #7
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800274e:	4619      	mov	r1, r3
 8002750:	483a      	ldr	r0, [pc, #232]	; (800283c <HAL_UART_MspInit+0x204>)
 8002752:	f001 fabb 	bl	8003ccc <HAL_GPIO_Init>
}
 8002756:	e063      	b.n	8002820 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <HAL_UART_MspInit+0x208>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d12c      	bne.n	80027bc <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	4b31      	ldr	r3, [pc, #196]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <HAL_UART_MspInit+0x1f4>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b2e      	ldr	r3, [pc, #184]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_UART_MspInit+0x1f4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800279a:	230c      	movs	r3, #12
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027aa:	2307      	movs	r3, #7
 80027ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b2:	4619      	mov	r1, r3
 80027b4:	4821      	ldr	r0, [pc, #132]	; (800283c <HAL_UART_MspInit+0x204>)
 80027b6:	f001 fa89 	bl	8003ccc <HAL_GPIO_Init>
}
 80027ba:	e031      	b.n	8002820 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_UART_MspInit+0x20c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12c      	bne.n	8002820 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_UART_MspInit+0x1f4>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_UART_MspInit+0x1f4>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_UART_MspInit+0x1f4>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_UART_MspInit+0x1f4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_UART_MspInit+0x1f4>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_UART_MspInit+0x1f4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 80027fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002810:	2307      	movs	r3, #7
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002818:	4619      	mov	r1, r3
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_UART_MspInit+0x1f8>)
 800281c:	f001 fa56 	bl	8003ccc <HAL_GPIO_Init>
}
 8002820:	bf00      	nop
 8002822:	3740      	adds	r7, #64	; 0x40
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40005000 	.word	0x40005000
 800282c:	40023800 	.word	0x40023800
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40011000 	.word	0x40011000
 800283c:	40020000 	.word	0x40020000
 8002840:	40004400 	.word	0x40004400
 8002844:	40004800 	.word	0x40004800

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800284c:	e7fe      	b.n	800284c <NMI_Handler+0x4>

0800284e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler+0x4>

08002854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <MemManage_Handler+0x4>

0800285a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <BusFault_Handler+0x4>

08002860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <UsageFault_Handler+0x4>

08002866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002894:	f000 f96a 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}

0800289c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <TIM2_IRQHandler+0x10>)
 80028a2:	f002 fea5 	bl	80055f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200002ec 	.word	0x200002ec

080028b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <DMA1_Stream7_IRQHandler+0x10>)
 80028b6:	f000 ff9f 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000454 	.word	0x20000454

080028c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_kill>:

int _kill(int pid, int sig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028de:	f004 fc51 	bl	8007184 <__errno>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2216      	movs	r2, #22
 80028e6:	601a      	str	r2, [r3, #0]
	return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_exit>:

void _exit (int status)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ffe7 	bl	80028d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002906:	e7fe      	b.n	8002906 <_exit+0x12>

08002908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
	}

return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e009      	b.n	8002968 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	60ba      	str	r2, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf1      	blt.n	8002954 <_write+0x12>
	}
	return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_close>:

int _close(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a2:	605a      	str	r2, [r3, #4]
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_isatty>:

int _isatty(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	return 1;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f004 fbb6 	bl	8007184 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20020000 	.word	0x20020000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	200005e8 	.word	0x200005e8
 8002a4c:	20000600 	.word	0x20000600

08002a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a78:	480d      	ldr	r0, [pc, #52]	; (8002ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a7a:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a80:	e002      	b.n	8002a88 <LoopCopyDataInit>

08002a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a86:	3304      	adds	r3, #4

08002a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a8c:	d3f9      	bcc.n	8002a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a90:	4c0b      	ldr	r4, [pc, #44]	; (8002ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a94:	e001      	b.n	8002a9a <LoopFillZerobss>

08002a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a98:	3204      	adds	r2, #4

08002a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a9c:	d3fb      	bcc.n	8002a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a9e:	f7ff ffd7 	bl	8002a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f004 fb75 	bl	8007190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa6:	f7fe fcf9 	bl	800149c <main>
  bx  lr    
 8002aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002ab8:	0800bae8 	.word	0x0800bae8
  ldr r2, =_sbss
 8002abc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002ac0:	20000600 	.word	0x20000600

08002ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_Init+0x40>)
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_Init+0x40>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_Init+0x40>)
 8002ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_Init+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_Init+0x40>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 fd2b 	bl	800354c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f000 f808 	bl	8002b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002afc:	f7ff fb48 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x54>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_InitTick+0x58>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fd51 	bl	80035d2 <HAL_SYSTICK_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00e      	b.n	8002b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d80a      	bhi.n	8002b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f000 fd0b 	bl	8003562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_InitTick+0x5c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2000000c 	.word	0x2000000c
 8002b64:	20000014 	.word	0x20000014
 8002b68:	20000010 	.word	0x20000010

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000014 	.word	0x20000014
 8002b90:	200005ec 	.word	0x200005ec

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200005ec 	.word	0x200005ec

08002bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e033      	b.n	8002c2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fb08 	bl	80021e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bf2:	f023 0302 	bic.w	r3, r3, #2
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fab4 	bl	800316c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
 8002c1a:	e001      	b.n	8002c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_Start+0x1a>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0b2      	b.n	8002db4 <HAL_ADC_Start+0x180>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d018      	beq.n	8002c96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c74:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <HAL_ADC_Start+0x18c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_ADC_Start+0x190>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	0c9a      	lsrs	r2, r3, #18
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c88:	e002      	b.n	8002c90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f9      	bne.n	8002c8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d17a      	bne.n	8002d9a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f023 0206 	bic.w	r2, r3, #6
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d00:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_ADC_Start+0x194>)
 8002d02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d12a      	bne.n	8002d70 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <HAL_ADC_Start+0x198>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d015      	beq.n	8002d50 <HAL_ADC_Start+0x11c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <HAL_ADC_Start+0x19c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d105      	bne.n	8002d3a <HAL_ADC_Start+0x106>
 8002d2e:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_ADC_Start+0x194>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <HAL_ADC_Start+0x1a0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d136      	bne.n	8002db2 <HAL_ADC_Start+0x17e>
 8002d44:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_ADC_Start+0x194>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d130      	bne.n	8002db2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d129      	bne.n	8002db2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	e020      	b.n	8002db2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_ADC_Start+0x198>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d11b      	bne.n	8002db2 <HAL_ADC_Start+0x17e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d114      	bne.n	8002db2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e00b      	b.n	8002db2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	2000000c 	.word	0x2000000c
 8002dc4:	431bde83 	.word	0x431bde83
 8002dc8:	40012300 	.word	0x40012300
 8002dcc:	40012000 	.word	0x40012000
 8002dd0:	40012100 	.word	0x40012100
 8002dd4:	40012200 	.word	0x40012200

08002dd8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df4:	d113      	bne.n	8002e1e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e04:	d10b      	bne.n	8002e1e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e063      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e1e:	f7ff feb9 	bl	8002b94 <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e24:	e021      	b.n	8002e6a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d01d      	beq.n	8002e6a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_ADC_PollForConversion+0x6c>
 8002e34:	f7ff feae 	bl	8002b94 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d212      	bcs.n	8002e6a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d00b      	beq.n	8002e6a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f043 0204 	orr.w	r2, r3, #4
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e03d      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d1d6      	bne.n	8002e26 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0212 	mvn.w	r2, #18
 8002e80:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d123      	bne.n	8002ee4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11f      	bne.n	8002ee4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e113      	b.n	800314c <HAL_ADC_ConfigChannel+0x244>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d925      	bls.n	8002f80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68d9      	ldr	r1, [r3, #12]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	3b1e      	subs	r3, #30
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43da      	mvns	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	400a      	ands	r2, r1
 8002f58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68d9      	ldr	r1, [r3, #12]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4403      	add	r3, r0
 8002f72:	3b1e      	subs	r3, #30
 8002f74:	409a      	lsls	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	e022      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	2207      	movs	r2, #7
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6919      	ldr	r1, [r3, #16]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4403      	add	r3, r0
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d824      	bhi.n	8003018 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b05      	subs	r3, #5
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	3b05      	subs	r3, #5
 800300a:	fa00 f203 	lsl.w	r2, r0, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	635a      	str	r2, [r3, #52]	; 0x34
 8003016:	e04c      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d824      	bhi.n	800306a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	3b23      	subs	r3, #35	; 0x23
 8003032:	221f      	movs	r2, #31
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43da      	mvns	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	400a      	ands	r2, r1
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	3b23      	subs	r3, #35	; 0x23
 800305c:	fa00 f203 	lsl.w	r2, r0, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
 8003068:	e023      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	3b41      	subs	r3, #65	; 0x41
 800307c:	221f      	movs	r2, #31
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b41      	subs	r3, #65	; 0x41
 80030a6:	fa00 f203 	lsl.w	r2, r0, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b2:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_ADC_ConfigChannel+0x250>)
 80030b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a28      	ldr	r2, [pc, #160]	; (800315c <HAL_ADC_ConfigChannel+0x254>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10f      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1d8>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	d10b      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_ADC_ConfigChannel+0x254>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d12b      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x23a>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_ADC_ConfigChannel+0x258>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x1f4>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b11      	cmp	r3, #17
 80030fa:	d122      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a11      	ldr	r2, [pc, #68]	; (8003160 <HAL_ADC_ConfigChannel+0x258>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d111      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_ADC_ConfigChannel+0x25c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_ADC_ConfigChannel+0x260>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	0c9a      	lsrs	r2, r3, #18
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003134:	e002      	b.n	800313c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3b01      	subs	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40012300 	.word	0x40012300
 800315c:	40012000 	.word	0x40012000
 8003160:	10000012 	.word	0x10000012
 8003164:	2000000c 	.word	0x2000000c
 8003168:	431bde83 	.word	0x431bde83

0800316c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003174:	4b79      	ldr	r3, [pc, #484]	; (800335c <ADC_Init+0x1f0>)
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	021a      	lsls	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	4a58      	ldr	r2, [pc, #352]	; (8003360 <ADC_Init+0x1f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d022      	beq.n	800324a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	e00f      	b.n	800326a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003268:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0202 	bic.w	r2, r2, #2
 8003278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7e1b      	ldrb	r3, [r3, #24]
 8003284:	005a      	lsls	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	3b01      	subs	r3, #1
 80032c4:	035a      	lsls	r2, r3, #13
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	e007      	b.n	80032e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	051a      	lsls	r2, r3, #20
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003322:	025a      	lsls	r2, r3, #9
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	029a      	lsls	r2, r3, #10
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40012300 	.word	0x40012300
 8003360:	0f000001 	.word	0x0f000001

08003364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800338c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003396:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	60d3      	str	r3, [r2, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <__NVIC_GetPriorityGrouping+0x18>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f003 0307 	and.w	r3, r3, #7
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	db0b      	blt.n	80033f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4907      	ldr	r1, [pc, #28]	; (8003400 <__NVIC_EnableIRQ+0x38>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	2001      	movs	r0, #1
 80033ea:	fa00 f202 	lsl.w	r2, r0, r2
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db12      	blt.n	800343c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	490a      	ldr	r1, [pc, #40]	; (8003448 <__NVIC_DisableIRQ+0x44>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	3320      	adds	r3, #32
 800342c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003430:	f3bf 8f4f 	dsb	sy
}
 8003434:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003436:	f3bf 8f6f 	isb	sy
}
 800343a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <__NVIC_SetPriority+0x50>)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
         );
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003518:	d301      	bcc.n	800351e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351a:	2301      	movs	r3, #1
 800351c:	e00f      	b.n	800353e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <SysTick_Config+0x40>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003526:	210f      	movs	r1, #15
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f7ff ff8e 	bl	800344c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SysTick_Config+0x40>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <SysTick_Config+0x40>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e010 	.word	0xe000e010

0800354c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff05 	bl	8003364 <__NVIC_SetPriorityGrouping>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003574:	f7ff ff1a 	bl	80033ac <__NVIC_GetPriorityGrouping>
 8003578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ff8e 	bl	80034a0 <NVIC_EncodePriority>
 8003584:	4602      	mov	r2, r0
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff5d 	bl	800344c <__NVIC_SetPriority>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff0d 	bl	80033c8 <__NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff1d 	bl	8003404 <__NVIC_DisableIRQ>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ff94 	bl	8003508 <SysTick_Config>
 80035e0:	4603      	mov	r3, r0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7ff facc 	bl	8002b94 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e099      	b.n	800373c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003628:	e00f      	b.n	800364a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800362a:	f7ff fab3 	bl	8002b94 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b05      	cmp	r3, #5
 8003636:	d908      	bls.n	800364a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2203      	movs	r2, #3
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e078      	b.n	800373c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e8      	bne.n	800362a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_DMA_Init+0x158>)
 8003664:	4013      	ands	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d107      	bne.n	80036b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4313      	orrs	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d117      	bne.n	800370e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fa6f 	bl	8003bd4 <DMA_CheckFifoParam>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2240      	movs	r2, #64	; 0x40
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800370a:	2301      	movs	r3, #1
 800370c:	e016      	b.n	800373c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa26 	bl	8003b68 <DMA_CalcBaseAndBitshift>
 800371c:	4603      	mov	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	223f      	movs	r2, #63	; 0x3f
 8003726:	409a      	lsls	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	f010803f 	.word	0xf010803f

08003748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_DMA_Start_IT+0x26>
 800376a:	2302      	movs	r3, #2
 800376c:	e040      	b.n	80037f0 <HAL_DMA_Start_IT+0xa8>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d12f      	bne.n	80037e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f9b8 	bl	8003b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	223f      	movs	r2, #63	; 0x3f
 80037a2:	409a      	lsls	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0216 	orr.w	r2, r2, #22
 80037b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0208 	orr.w	r2, r2, #8
 80037ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e005      	b.n	80037ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003804:	4b8e      	ldr	r3, [pc, #568]	; (8003a40 <HAL_DMA_IRQHandler+0x248>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a8e      	ldr	r2, [pc, #568]	; (8003a44 <HAL_DMA_IRQHandler+0x24c>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2208      	movs	r2, #8
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01a      	beq.n	8003864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0204 	bic.w	r2, r2, #4
 800384a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	2208      	movs	r2, #8
 8003852:	409a      	lsls	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	2201      	movs	r2, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2201      	movs	r2, #1
 8003888:	409a      	lsls	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2204      	movs	r2, #4
 80038a0:	409a      	lsls	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2204      	movs	r2, #4
 80038be:	409a      	lsls	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	2210      	movs	r2, #16
 80038d6:	409a      	lsls	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d043      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d03c      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	2210      	movs	r2, #16
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d018      	beq.n	800393a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d108      	bne.n	8003928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d024      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
 8003926:	e01f      	b.n	8003968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
 8003938:	e016      	b.n	8003968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0208 	bic.w	r2, r2, #8
 8003956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	2220      	movs	r2, #32
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 808f 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8087 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	2220      	movs	r2, #32
 8003990:	409a      	lsls	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d136      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0216 	bic.w	r2, r2, #22
 80039b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_DMA_IRQHandler+0x1da>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0208 	bic.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	223f      	movs	r2, #63	; 0x3f
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d07e      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
        }
        return;
 8003a0e:	e079      	b.n	8003b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01d      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10d      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e02c      	b.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
 8003a3e:	bf00      	nop
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d023      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
 8003a58:	e01e      	b.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10f      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d032      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d022      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2205      	movs	r2, #5
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d307      	bcc.n	8003ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f2      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x2cc>
 8003ade:	e000      	b.n	8003ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	e000      	b.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b04:	bf00      	nop
    }
  }
}
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d108      	bne.n	8003b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b4a:	e007      	b.n	8003b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	60da      	str	r2, [r3, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3b10      	subs	r3, #16
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <DMA_CalcBaseAndBitshift+0x64>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d909      	bls.n	8003baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ba8:	e007      	b.n	8003bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	aaaaaaab 	.word	0xaaaaaaab
 8003bd0:	0800b4dc 	.word	0x0800b4dc

08003bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11f      	bne.n	8003c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d856      	bhi.n	8003ca2 <DMA_CheckFifoParam+0xce>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <DMA_CheckFifoParam+0x28>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c1f 	.word	0x08003c1f
 8003c04:	08003c0d 	.word	0x08003c0d
 8003c08:	08003ca3 	.word	0x08003ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d046      	beq.n	8003ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e043      	b.n	8003ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c26:	d140      	bne.n	8003caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2c:	e03d      	b.n	8003caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	d121      	bne.n	8003c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d837      	bhi.n	8003cae <DMA_CheckFifoParam+0xda>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <DMA_CheckFifoParam+0x70>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c5b 	.word	0x08003c5b
 8003c4c:	08003c55 	.word	0x08003c55
 8003c50:	08003c6d 	.word	0x08003c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e030      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d025      	beq.n	8003cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6a:	e022      	b.n	8003cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c74:	d11f      	bne.n	8003cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c7a:	e01c      	b.n	8003cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d903      	bls.n	8003c8a <DMA_CheckFifoParam+0xb6>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d003      	beq.n	8003c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c88:	e018      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8e:	e015      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca0:	e00b      	b.n	8003cba <DMA_CheckFifoParam+0xe6>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e00a      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e008      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003caa:	bf00      	nop
 8003cac:	e006      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
    }
  } 
  
  return status; 
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop

08003ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e165      	b.n	8003fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 8154 	bne.w	8003fae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d005      	beq.n	8003d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d017      	beq.n	8003dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80ae 	beq.w	8003fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b5d      	ldr	r3, [pc, #372]	; (8003fcc <HAL_GPIO_Init+0x300>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4a5c      	ldr	r2, [pc, #368]	; (8003fcc <HAL_GPIO_Init+0x300>)
 8003e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	4b5a      	ldr	r3, [pc, #360]	; (8003fcc <HAL_GPIO_Init+0x300>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e6e:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <HAL_GPIO_Init+0x304>)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4f      	ldr	r2, [pc, #316]	; (8003fd4 <HAL_GPIO_Init+0x308>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d025      	beq.n	8003ee6 <HAL_GPIO_Init+0x21a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4e      	ldr	r2, [pc, #312]	; (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01f      	beq.n	8003ee2 <HAL_GPIO_Init+0x216>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4d      	ldr	r2, [pc, #308]	; (8003fdc <HAL_GPIO_Init+0x310>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d019      	beq.n	8003ede <HAL_GPIO_Init+0x212>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <HAL_GPIO_Init+0x314>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_GPIO_Init+0x20e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4b      	ldr	r2, [pc, #300]	; (8003fe4 <HAL_GPIO_Init+0x318>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_GPIO_Init+0x20a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4a      	ldr	r2, [pc, #296]	; (8003fe8 <HAL_GPIO_Init+0x31c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <HAL_GPIO_Init+0x206>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a49      	ldr	r2, [pc, #292]	; (8003fec <HAL_GPIO_Init+0x320>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <HAL_GPIO_Init+0x202>
 8003eca:	2306      	movs	r3, #6
 8003ecc:	e00c      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ece:	2307      	movs	r3, #7
 8003ed0:	e00a      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	e008      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e004      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_GPIO_Init+0x21c>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	f002 0203 	and.w	r2, r2, #3
 8003eee:	0092      	lsls	r2, r2, #2
 8003ef0:	4093      	lsls	r3, r2
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ef8:	4935      	ldr	r1, [pc, #212]	; (8003fd0 <HAL_GPIO_Init+0x304>)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	3302      	adds	r3, #2
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f06:	4b3a      	ldr	r3, [pc, #232]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f2a:	4a31      	ldr	r2, [pc, #196]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f30:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f54:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f5a:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa8:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	f67f ae96 	bls.w	8003ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	40020c00 	.word	0x40020c00
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40021400 	.word	0x40021400
 8003fec:	40021800 	.word	0x40021800
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e001      	b.n	8004016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	807b      	strh	r3, [r7, #2]
 8004030:	4613      	mov	r3, r2
 8004032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004034:	787b      	ldrb	r3, [r7, #1]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004040:	e003      	b.n	800404a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	041a      	lsls	r2, r3, #16
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	619a      	str	r2, [r3, #24]
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4013      	ands	r3, r2
 800406e:	041a      	lsls	r2, r3, #16
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	43d9      	mvns	r1, r3
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	400b      	ands	r3, r1
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	619a      	str	r2, [r3, #24]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <HAL_PWREx_EnableOverDrive+0x90>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_PWREx_EnableOverDrive+0x90>)
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_PWREx_EnableOverDrive+0x90>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_PWREx_EnableOverDrive+0x94>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b8:	f7fe fd6c 	bl	8002b94 <HAL_GetTick>
 80040bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040be:	e009      	b.n	80040d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040c0:	f7fe fd68 	bl	8002b94 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ce:	d901      	bls.n	80040d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e01f      	b.n	8004114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <HAL_PWREx_EnableOverDrive+0x98>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d1ee      	bne.n	80040c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7fe fd54 	bl	8002b94 <HAL_GetTick>
 80040ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040ee:	e009      	b.n	8004104 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040f0:	f7fe fd50 	bl	8002b94 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040fe:	d901      	bls.n	8004104 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e007      	b.n	8004114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_PWREx_EnableOverDrive+0x98>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004110:	d1ee      	bne.n	80040f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	420e0040 	.word	0x420e0040
 8004124:	40007000 	.word	0x40007000
 8004128:	420e0044 	.word	0x420e0044

0800412c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0cc      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b68      	ldr	r3, [pc, #416]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d90c      	bls.n	8004168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b65      	ldr	r3, [pc, #404]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b63      	ldr	r3, [pc, #396]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0b8      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004180:	4b59      	ldr	r3, [pc, #356]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4a58      	ldr	r2, [pc, #352]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a4:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	494d      	ldr	r1, [pc, #308]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d044      	beq.n	800424c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d119      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e07f      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e06f      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e067      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4934      	ldr	r1, [pc, #208]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800421c:	f7fe fcba 	bl	8002b94 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fe fcb6 	bl	8002b94 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e04f      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d20c      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e032      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4916      	ldr	r1, [pc, #88]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	490e      	ldr	r1, [pc, #56]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042b2:	f000 f855 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	490a      	ldr	r1, [pc, #40]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 80042c4:	5ccb      	ldrb	r3, [r1, r3]
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1c8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fc1a 	bl	8002b0c <HAL_InitTick>

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40023c00 	.word	0x40023c00
 80042e8:	40023800 	.word	0x40023800
 80042ec:	0800b4c4 	.word	0x0800b4c4
 80042f0:	2000000c 	.word	0x2000000c
 80042f4:	20000010 	.word	0x20000010

080042f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <HAL_RCC_GetHCLKFreq+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c

08004310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004314:	f7ff fff0 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4903      	ldr	r1, [pc, #12]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40023800 	.word	0x40023800
 8004334:	0800b4d4 	.word	0x0800b4d4

08004338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800433c:	f7ff ffdc 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	0b5b      	lsrs	r3, r3, #13
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4903      	ldr	r1, [pc, #12]	; (800435c <HAL_RCC_GetPCLK2Freq+0x24>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40023800 	.word	0x40023800
 800435c:	0800b4d4 	.word	0x0800b4d4

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b0ae      	sub	sp, #184	; 0xb8
 8004366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004386:	4bcb      	ldr	r3, [pc, #812]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b0c      	cmp	r3, #12
 8004390:	f200 8206 	bhi.w	80047a0 <HAL_RCC_GetSysClockFreq+0x440>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080047a1 	.word	0x080047a1
 80043a4:	080047a1 	.word	0x080047a1
 80043a8:	080047a1 	.word	0x080047a1
 80043ac:	080043d9 	.word	0x080043d9
 80043b0:	080047a1 	.word	0x080047a1
 80043b4:	080047a1 	.word	0x080047a1
 80043b8:	080047a1 	.word	0x080047a1
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080047a1 	.word	0x080047a1
 80043c4:	080047a1 	.word	0x080047a1
 80043c8:	080047a1 	.word	0x080047a1
 80043cc:	080045d1 	.word	0x080045d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d0:	4bb9      	ldr	r3, [pc, #740]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80043d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80043d6:	e1e7      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d8:	4bb8      	ldr	r3, [pc, #736]	; (80046bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80043da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043de:	e1e3      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e0:	4bb4      	ldr	r3, [pc, #720]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ec:	4bb1      	ldr	r3, [pc, #708]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d071      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f8:	4bae      	ldr	r3, [pc, #696]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004404:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800441a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	0159      	lsls	r1, r3, #5
 800442c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004430:	0150      	lsls	r0, r2, #5
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4621      	mov	r1, r4
 8004438:	1a51      	subs	r1, r2, r1
 800443a:	6439      	str	r1, [r7, #64]	; 0x40
 800443c:	4629      	mov	r1, r5
 800443e:	eb63 0301 	sbc.w	r3, r3, r1
 8004442:	647b      	str	r3, [r7, #68]	; 0x44
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004450:	4649      	mov	r1, r9
 8004452:	018b      	lsls	r3, r1, #6
 8004454:	4641      	mov	r1, r8
 8004456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800445a:	4641      	mov	r1, r8
 800445c:	018a      	lsls	r2, r1, #6
 800445e:	4641      	mov	r1, r8
 8004460:	1a51      	subs	r1, r2, r1
 8004462:	63b9      	str	r1, [r7, #56]	; 0x38
 8004464:	4649      	mov	r1, r9
 8004466:	eb63 0301 	sbc.w	r3, r3, r1
 800446a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004478:	4649      	mov	r1, r9
 800447a:	00cb      	lsls	r3, r1, #3
 800447c:	4641      	mov	r1, r8
 800447e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004482:	4641      	mov	r1, r8
 8004484:	00ca      	lsls	r2, r1, #3
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	4603      	mov	r3, r0
 800448c:	4622      	mov	r2, r4
 800448e:	189b      	adds	r3, r3, r2
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
 8004492:	462b      	mov	r3, r5
 8004494:	460a      	mov	r2, r1
 8004496:	eb42 0303 	adc.w	r3, r2, r3
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044a8:	4629      	mov	r1, r5
 80044aa:	024b      	lsls	r3, r1, #9
 80044ac:	4621      	mov	r1, r4
 80044ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044b2:	4621      	mov	r1, r4
 80044b4:	024a      	lsls	r2, r1, #9
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80044cc:	f7fc fbdc 	bl	8000c88 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4613      	mov	r3, r2
 80044d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044da:	e067      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044dc:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80044ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80044f6:	2300      	movs	r3, #0
 80044f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	0159      	lsls	r1, r3, #5
 800450c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004510:	0150      	lsls	r0, r2, #5
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4621      	mov	r1, r4
 8004518:	1a51      	subs	r1, r2, r1
 800451a:	62b9      	str	r1, [r7, #40]	; 0x28
 800451c:	4629      	mov	r1, r5
 800451e:	eb63 0301 	sbc.w	r3, r3, r1
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004530:	4649      	mov	r1, r9
 8004532:	018b      	lsls	r3, r1, #6
 8004534:	4641      	mov	r1, r8
 8004536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800453a:	4641      	mov	r1, r8
 800453c:	018a      	lsls	r2, r1, #6
 800453e:	4641      	mov	r1, r8
 8004540:	ebb2 0a01 	subs.w	sl, r2, r1
 8004544:	4649      	mov	r1, r9
 8004546:	eb63 0b01 	sbc.w	fp, r3, r1
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004556:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800455a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455e:	4692      	mov	sl, r2
 8004560:	469b      	mov	fp, r3
 8004562:	4623      	mov	r3, r4
 8004564:	eb1a 0303 	adds.w	r3, sl, r3
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	462b      	mov	r3, r5
 800456c:	eb4b 0303 	adc.w	r3, fp, r3
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800457e:	4629      	mov	r1, r5
 8004580:	028b      	lsls	r3, r1, #10
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004588:	4621      	mov	r1, r4
 800458a:	028a      	lsls	r2, r1, #10
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004594:	2200      	movs	r2, #0
 8004596:	673b      	str	r3, [r7, #112]	; 0x70
 8004598:	677a      	str	r2, [r7, #116]	; 0x74
 800459a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800459e:	f7fc fb73 	bl	8000c88 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4613      	mov	r3, r2
 80045a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045ac:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	3301      	adds	r3, #1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80045be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045ce:	e0eb      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d0:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045dc:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d06b      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e8:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	2200      	movs	r2, #0
 80045f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fa:	663b      	str	r3, [r7, #96]	; 0x60
 80045fc:	2300      	movs	r3, #0
 80045fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004600:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004604:	4622      	mov	r2, r4
 8004606:	462b      	mov	r3, r5
 8004608:	f04f 0000 	mov.w	r0, #0
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	0159      	lsls	r1, r3, #5
 8004612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004616:	0150      	lsls	r0, r2, #5
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4621      	mov	r1, r4
 800461e:	1a51      	subs	r1, r2, r1
 8004620:	61b9      	str	r1, [r7, #24]
 8004622:	4629      	mov	r1, r5
 8004624:	eb63 0301 	sbc.w	r3, r3, r1
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004636:	4659      	mov	r1, fp
 8004638:	018b      	lsls	r3, r1, #6
 800463a:	4651      	mov	r1, sl
 800463c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004640:	4651      	mov	r1, sl
 8004642:	018a      	lsls	r2, r1, #6
 8004644:	4651      	mov	r1, sl
 8004646:	ebb2 0801 	subs.w	r8, r2, r1
 800464a:	4659      	mov	r1, fp
 800464c:	eb63 0901 	sbc.w	r9, r3, r1
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004660:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004664:	4690      	mov	r8, r2
 8004666:	4699      	mov	r9, r3
 8004668:	4623      	mov	r3, r4
 800466a:	eb18 0303 	adds.w	r3, r8, r3
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	462b      	mov	r3, r5
 8004672:	eb49 0303 	adc.w	r3, r9, r3
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004684:	4629      	mov	r1, r5
 8004686:	024b      	lsls	r3, r1, #9
 8004688:	4621      	mov	r1, r4
 800468a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800468e:	4621      	mov	r1, r4
 8004690:	024a      	lsls	r2, r1, #9
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800469a:	2200      	movs	r2, #0
 800469c:	65bb      	str	r3, [r7, #88]	; 0x58
 800469e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80046a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046a4:	f7fc faf0 	bl	8000c88 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046b2:	e065      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x420>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c0:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	2200      	movs	r2, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	4611      	mov	r1, r2
 80046cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046d0:	653b      	str	r3, [r7, #80]	; 0x50
 80046d2:	2300      	movs	r3, #0
 80046d4:	657b      	str	r3, [r7, #84]	; 0x54
 80046d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	f04f 0000 	mov.w	r0, #0
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	0159      	lsls	r1, r3, #5
 80046e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ec:	0150      	lsls	r0, r2, #5
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4641      	mov	r1, r8
 80046f4:	1a51      	subs	r1, r2, r1
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	4649      	mov	r1, r9
 80046fa:	eb63 0301 	sbc.w	r3, r3, r1
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800470c:	4659      	mov	r1, fp
 800470e:	018b      	lsls	r3, r1, #6
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004716:	4651      	mov	r1, sl
 8004718:	018a      	lsls	r2, r1, #6
 800471a:	4651      	mov	r1, sl
 800471c:	1a54      	subs	r4, r2, r1
 800471e:	4659      	mov	r1, fp
 8004720:	eb63 0501 	sbc.w	r5, r3, r1
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	00eb      	lsls	r3, r5, #3
 800472e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004732:	00e2      	lsls	r2, r4, #3
 8004734:	4614      	mov	r4, r2
 8004736:	461d      	mov	r5, r3
 8004738:	4643      	mov	r3, r8
 800473a:	18e3      	adds	r3, r4, r3
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	464b      	mov	r3, r9
 8004740:	eb45 0303 	adc.w	r3, r5, r3
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004752:	4629      	mov	r1, r5
 8004754:	028b      	lsls	r3, r1, #10
 8004756:	4621      	mov	r1, r4
 8004758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800475c:	4621      	mov	r1, r4
 800475e:	028a      	lsls	r2, r1, #10
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004768:	2200      	movs	r2, #0
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
 800476c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800476e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004772:	f7fc fa89 	bl	8000c88 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4613      	mov	r3, r2
 800477c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	0f1b      	lsrs	r3, r3, #28
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800478e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800479e:	e003      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80047a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	37b8      	adds	r7, #184	; 0xb8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	00f42400 	.word	0x00f42400

080047c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e28d      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8083 	beq.w	80048e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047e0:	4b94      	ldr	r3, [pc, #592]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d019      	beq.n	8004820 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047ec:	4b91      	ldr	r3, [pc, #580]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d106      	bne.n	8004806 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047f8:	4b8e      	ldr	r3, [pc, #568]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004804:	d00c      	beq.n	8004820 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004806:	4b8b      	ldr	r3, [pc, #556]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d112      	bne.n	8004838 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004812:	4b88      	ldr	r3, [pc, #544]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481e:	d10b      	bne.n	8004838 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	4b84      	ldr	r3, [pc, #528]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05b      	beq.n	80048e4 <HAL_RCC_OscConfig+0x124>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d157      	bne.n	80048e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e25a      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d106      	bne.n	8004850 <HAL_RCC_OscConfig+0x90>
 8004842:	4b7c      	ldr	r3, [pc, #496]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a7b      	ldr	r2, [pc, #492]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0xcc>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0xb4>
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a75      	ldr	r2, [pc, #468]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b73      	ldr	r3, [pc, #460]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a72      	ldr	r2, [pc, #456]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0xcc>
 8004874:	4b6f      	ldr	r3, [pc, #444]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6e      	ldr	r2, [pc, #440]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a6b      	ldr	r2, [pc, #428]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d013      	beq.n	80048bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fe f97e 	bl	8002b94 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800489c:	f7fe f97a 	bl	8002b94 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e21f      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0xdc>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe f96a 	bl	8002b94 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fe f966 	bl	8002b94 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e20b      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	4b57      	ldr	r3, [pc, #348]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x104>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d06f      	beq.n	80049d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048f2:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d017      	beq.n	800492e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048fe:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004906:	2b08      	cmp	r3, #8
 8004908:	d105      	bne.n	8004916 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800490a:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d11c      	bne.n	800495c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004922:	4b44      	ldr	r3, [pc, #272]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x186>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e1d3      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4937      	ldr	r1, [pc, #220]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	e03a      	b.n	80049d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <HAL_RCC_OscConfig+0x278>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fe f913 	bl	8002b94 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004972:	f7fe f90f 	bl	8002b94 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e1b4      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4925      	ldr	r1, [pc, #148]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e015      	b.n	80049d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <HAL_RCC_OscConfig+0x278>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fe f8f2 	bl	8002b94 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fe f8ee 	bl	8002b94 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e193      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d036      	beq.n	8004a4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fe f8d2 	bl	8002b94 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fe f8ce 	bl	8002b94 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e173      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x234>
 8004a12:	e01b      	b.n	8004a4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1a:	f7fe f8bb 	bl	8002b94 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	e00e      	b.n	8004a40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a22:	f7fe f8b7 	bl	8002b94 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d907      	bls.n	8004a40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e15c      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
 8004a34:	40023800 	.word	0x40023800
 8004a38:	42470000 	.word	0x42470000
 8004a3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a40:	4b8a      	ldr	r3, [pc, #552]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ea      	bne.n	8004a22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8097 	beq.w	8004b88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5e:	4b83      	ldr	r3, [pc, #524]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	4b7f      	ldr	r3, [pc, #508]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	4a7e      	ldr	r2, [pc, #504]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7a:	4b7c      	ldr	r3, [pc, #496]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a86:	2301      	movs	r3, #1
 8004a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8a:	4b79      	ldr	r3, [pc, #484]	; (8004c70 <HAL_RCC_OscConfig+0x4b0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d118      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a96:	4b76      	ldr	r3, [pc, #472]	; (8004c70 <HAL_RCC_OscConfig+0x4b0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a75      	ldr	r2, [pc, #468]	; (8004c70 <HAL_RCC_OscConfig+0x4b0>)
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa2:	f7fe f877 	bl	8002b94 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aaa:	f7fe f873 	bl	8002b94 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e118      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	4b6c      	ldr	r3, [pc, #432]	; (8004c70 <HAL_RCC_OscConfig+0x4b0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x31e>
 8004ad0:	4b66      	ldr	r3, [pc, #408]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	4a65      	ldr	r2, [pc, #404]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6713      	str	r3, [r2, #112]	; 0x70
 8004adc:	e01c      	b.n	8004b18 <HAL_RCC_OscConfig+0x358>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x340>
 8004ae6:	4b61      	ldr	r3, [pc, #388]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a60      	ldr	r2, [pc, #384]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004aec:	f043 0304 	orr.w	r3, r3, #4
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
 8004af2:	4b5e      	ldr	r3, [pc, #376]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a5d      	ldr	r2, [pc, #372]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0x358>
 8004b00:	4b5a      	ldr	r3, [pc, #360]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a59      	ldr	r2, [pc, #356]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0c:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a56      	ldr	r2, [pc, #344]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b12:	f023 0304 	bic.w	r3, r3, #4
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fe f838 	bl	8002b94 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fe f834 	bl	8002b94 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0d7      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3e:	4b4b      	ldr	r3, [pc, #300]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ee      	beq.n	8004b28 <HAL_RCC_OscConfig+0x368>
 8004b4a:	e014      	b.n	8004b76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fe f822 	bl	8002b94 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fe f81e 	bl	8002b94 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e0c1      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6a:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ee      	bne.n	8004b54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b3b      	ldr	r3, [pc, #236]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	4a3a      	ldr	r2, [pc, #232]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80ad 	beq.w	8004cec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d060      	beq.n	8004c60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d145      	bne.n	8004c32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba6:	4b33      	ldr	r3, [pc, #204]	; (8004c74 <HAL_RCC_OscConfig+0x4b4>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fd fff2 	bl	8002b94 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7fd ffee 	bl	8002b94 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e093      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	019b      	lsls	r3, r3, #6
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	3b01      	subs	r3, #1
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	071b      	lsls	r3, r3, #28
 8004bfe:	491b      	ldr	r1, [pc, #108]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCC_OscConfig+0x4b4>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fd ffc3 	bl	8002b94 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c12:	f7fd ffbf 	bl	8002b94 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e064      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x452>
 8004c30:	e05c      	b.n	8004cec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <HAL_RCC_OscConfig+0x4b4>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fd ffac 	bl	8002b94 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd ffa8 	bl	8002b94 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e04d      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x480>
 8004c5e:	e045      	b.n	8004cec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e040      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40007000 	.word	0x40007000
 8004c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c78:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <HAL_RCC_OscConfig+0x538>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d030      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d129      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d122      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d119      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d10f      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800

08004cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e041      	b.n	8004d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fd faf4 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f001 f8a2 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d001      	beq.n	8004db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e046      	b.n	8004e42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <HAL_TIM_Base_Start+0xb4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d022      	beq.n	8004e0c <HAL_TIM_Base_Start+0x70>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d01d      	beq.n	8004e0c <HAL_TIM_Base_Start+0x70>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <HAL_TIM_Base_Start+0xb8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d018      	beq.n	8004e0c <HAL_TIM_Base_Start+0x70>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_TIM_Base_Start+0xbc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <HAL_TIM_Base_Start+0x70>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <HAL_TIM_Base_Start+0xc0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_TIM_Base_Start+0x70>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <HAL_TIM_Base_Start+0xc4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_TIM_Base_Start+0x70>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <HAL_TIM_Base_Start+0xc8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_TIM_Base_Start+0x70>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_TIM_Base_Start+0xcc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d111      	bne.n	8004e30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d010      	beq.n	8004e40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2e:	e007      	b.n	8004e40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40001800 	.word	0x40001800

08004e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e041      	b.n	8004f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fd fa1a 	bl	80022cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 ffea 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <HAL_TIM_PWM_Start+0x24>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	bf14      	ite	ne
 8004f28:	2301      	movne	r3, #1
 8004f2a:	2300      	moveq	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e022      	b.n	8004f76 <HAL_TIM_PWM_Start+0x6a>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d109      	bne.n	8004f4a <HAL_TIM_PWM_Start+0x3e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e015      	b.n	8004f76 <HAL_TIM_PWM_Start+0x6a>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d109      	bne.n	8004f64 <HAL_TIM_PWM_Start+0x58>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e008      	b.n	8004f76 <HAL_TIM_PWM_Start+0x6a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07c      	b.n	8005078 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x82>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f8c:	e013      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xaa>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0x92>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9c:	e00b      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xaa>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0xa2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	e003      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xaa>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 fb74 	bl	80066ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2d      	ldr	r2, [pc, #180]	; (8005080 <HAL_TIM_PWM_Start+0x174>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIM_PWM_Start+0xcc>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_TIM_PWM_Start+0x178>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_PWM_Start+0xd0>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_TIM_PWM_Start+0xd2>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a22      	ldr	r2, [pc, #136]	; (8005080 <HAL_TIM_PWM_Start+0x174>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d022      	beq.n	8005042 <HAL_TIM_PWM_Start+0x136>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d01d      	beq.n	8005042 <HAL_TIM_PWM_Start+0x136>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <HAL_TIM_PWM_Start+0x17c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_TIM_PWM_Start+0x136>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_TIM_PWM_Start+0x180>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_TIM_PWM_Start+0x136>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_TIM_PWM_Start+0x184>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_TIM_PWM_Start+0x136>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a16      	ldr	r2, [pc, #88]	; (8005084 <HAL_TIM_PWM_Start+0x178>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_TIM_PWM_Start+0x136>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a18      	ldr	r2, [pc, #96]	; (8005094 <HAL_TIM_PWM_Start+0x188>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_TIM_PWM_Start+0x136>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_TIM_PWM_Start+0x18c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d111      	bne.n	8005066 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b06      	cmp	r3, #6
 8005052:	d010      	beq.n	8005076 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	e007      	b.n	8005076 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40010000 	.word	0x40010000
 8005084:	40010400 	.word	0x40010400
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40014000 	.word	0x40014000
 8005098:	40001800 	.word	0x40001800

0800509c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e041      	b.n	8005132 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f839 	bl	800513a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 fed2 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <HAL_TIM_IC_Start_DMA+0x22>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e013      	b.n	800519a <HAL_TIM_IC_Start_DMA+0x4a>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d104      	bne.n	8005182 <HAL_TIM_IC_Start_DMA+0x32>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800517e:	b2db      	uxtb	r3, r3
 8005180:	e00b      	b.n	800519a <HAL_TIM_IC_Start_DMA+0x4a>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d104      	bne.n	8005192 <HAL_TIM_IC_Start_DMA+0x42>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e003      	b.n	800519a <HAL_TIM_IC_Start_DMA+0x4a>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005198:	b2db      	uxtb	r3, r3
 800519a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_TIM_IC_Start_DMA+0x5c>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e013      	b.n	80051d4 <HAL_TIM_IC_Start_DMA+0x84>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d104      	bne.n	80051bc <HAL_TIM_IC_Start_DMA+0x6c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e00b      	b.n	80051d4 <HAL_TIM_IC_Start_DMA+0x84>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d104      	bne.n	80051cc <HAL_TIM_IC_Start_DMA+0x7c>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e003      	b.n	80051d4 <HAL_TIM_IC_Start_DMA+0x84>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80051d6:	7dbb      	ldrb	r3, [r7, #22]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d002      	beq.n	80051e2 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80051dc:	7d7b      	ldrb	r3, [r7, #21]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
 80051e4:	e146      	b.n	8005474 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80051e6:	7dbb      	ldrb	r3, [r7, #22]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d143      	bne.n	8005274 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80051ec:	7d7b      	ldrb	r3, [r7, #21]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d140      	bne.n	8005274 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_IC_Start_DMA+0xb2>
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e138      	b.n	8005474 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <HAL_TIM_IC_Start_DMA+0xc2>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005210:	e013      	b.n	800523a <HAL_TIM_IC_Start_DMA+0xea>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d104      	bne.n	8005222 <HAL_TIM_IC_Start_DMA+0xd2>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005220:	e00b      	b.n	800523a <HAL_TIM_IC_Start_DMA+0xea>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d104      	bne.n	8005232 <HAL_TIM_IC_Start_DMA+0xe2>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005230:	e003      	b.n	800523a <HAL_TIM_IC_Start_DMA+0xea>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <HAL_TIM_IC_Start_DMA+0xfa>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8005248:	e016      	b.n	8005278 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d104      	bne.n	800525a <HAL_TIM_IC_Start_DMA+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8005258:	e00e      	b.n	8005278 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d104      	bne.n	800526a <HAL_TIM_IC_Start_DMA+0x11a>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8005268:	e006      	b.n	8005278 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8005272:	e001      	b.n	8005278 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0fd      	b.n	8005474 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2201      	movs	r2, #1
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f001 fa13 	bl	80066ac <TIM_CCxChannelCmd>

  switch (Channel)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	f200 80ad 	bhi.w	80053e8 <HAL_TIM_IC_Start_DMA+0x298>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_TIM_IC_Start_DMA+0x144>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052c9 	.word	0x080052c9
 8005298:	080053e9 	.word	0x080053e9
 800529c:	080053e9 	.word	0x080053e9
 80052a0:	080053e9 	.word	0x080053e9
 80052a4:	08005311 	.word	0x08005311
 80052a8:	080053e9 	.word	0x080053e9
 80052ac:	080053e9 	.word	0x080053e9
 80052b0:	080053e9 	.word	0x080053e9
 80052b4:	08005359 	.word	0x08005359
 80052b8:	080053e9 	.word	0x080053e9
 80052bc:	080053e9 	.word	0x080053e9
 80052c0:	080053e9 	.word	0x080053e9
 80052c4:	080053a1 	.word	0x080053a1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	4a6b      	ldr	r2, [pc, #428]	; (800547c <HAL_TIM_IC_Start_DMA+0x32c>)
 80052ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	4a6a      	ldr	r2, [pc, #424]	; (8005480 <HAL_TIM_IC_Start_DMA+0x330>)
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	4a69      	ldr	r2, [pc, #420]	; (8005484 <HAL_TIM_IC_Start_DMA+0x334>)
 80052de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3334      	adds	r3, #52	; 0x34
 80052ea:	4619      	mov	r1, r3
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	887b      	ldrh	r3, [r7, #2]
 80052f0:	f7fe fa2a 	bl	8003748 <HAL_DMA_Start_IT>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0ba      	b.n	8005474 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530c:	60da      	str	r2, [r3, #12]
      break;
 800530e:	e06e      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	4a59      	ldr	r2, [pc, #356]	; (800547c <HAL_TIM_IC_Start_DMA+0x32c>)
 8005316:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_TIM_IC_Start_DMA+0x330>)
 800531e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	4a57      	ldr	r2, [pc, #348]	; (8005484 <HAL_TIM_IC_Start_DMA+0x334>)
 8005326:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3338      	adds	r3, #56	; 0x38
 8005332:	4619      	mov	r1, r3
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	887b      	ldrh	r3, [r7, #2]
 8005338:	f7fe fa06 	bl	8003748 <HAL_DMA_Start_IT>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e096      	b.n	8005474 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005354:	60da      	str	r2, [r3, #12]
      break;
 8005356:	e04a      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4a47      	ldr	r2, [pc, #284]	; (800547c <HAL_TIM_IC_Start_DMA+0x32c>)
 800535e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	4a46      	ldr	r2, [pc, #280]	; (8005480 <HAL_TIM_IC_Start_DMA+0x330>)
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	4a45      	ldr	r2, [pc, #276]	; (8005484 <HAL_TIM_IC_Start_DMA+0x334>)
 800536e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	333c      	adds	r3, #60	; 0x3c
 800537a:	4619      	mov	r1, r3
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	887b      	ldrh	r3, [r7, #2]
 8005380:	f7fe f9e2 	bl	8003748 <HAL_DMA_Start_IT>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e072      	b.n	8005474 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539c:	60da      	str	r2, [r3, #12]
      break;
 800539e:	e026      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	4a35      	ldr	r2, [pc, #212]	; (800547c <HAL_TIM_IC_Start_DMA+0x32c>)
 80053a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	4a34      	ldr	r2, [pc, #208]	; (8005480 <HAL_TIM_IC_Start_DMA+0x330>)
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	4a33      	ldr	r2, [pc, #204]	; (8005484 <HAL_TIM_IC_Start_DMA+0x334>)
 80053b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3340      	adds	r3, #64	; 0x40
 80053c2:	4619      	mov	r1, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	887b      	ldrh	r3, [r7, #2]
 80053c8:	f7fe f9be 	bl	8003748 <HAL_DMA_Start_IT>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e04e      	b.n	8005474 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e4:	60da      	str	r2, [r3, #12]
      break;
 80053e6:	e002      	b.n	80053ee <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	75fb      	strb	r3, [r7, #23]
      break;
 80053ec:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a25      	ldr	r2, [pc, #148]	; (8005488 <HAL_TIM_IC_Start_DMA+0x338>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d022      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x2ee>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005400:	d01d      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a21      	ldr	r2, [pc, #132]	; (800548c <HAL_TIM_IC_Start_DMA+0x33c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d018      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x2ee>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <HAL_TIM_IC_Start_DMA+0x340>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <HAL_TIM_IC_Start_DMA+0x344>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <HAL_TIM_IC_Start_DMA+0x348>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x2ee>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1b      	ldr	r2, [pc, #108]	; (800549c <HAL_TIM_IC_Start_DMA+0x34c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <HAL_TIM_IC_Start_DMA+0x350>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d111      	bne.n	8005462 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b06      	cmp	r3, #6
 800544e:	d010      	beq.n	8005472 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005460:	e007      	b.n	8005472 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	08005d55 	.word	0x08005d55
 8005480:	08005e1d 	.word	0x08005e1d
 8005484:	08005cc3 	.word	0x08005cc3
 8005488:	40010000 	.word	0x40010000
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40010400 	.word	0x40010400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40001800 	.word	0x40001800

080054a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e097      	b.n	80055e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fc ffe5 	bl	800249c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e8:	f023 0307 	bic.w	r3, r3, #7
 80054ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 fcc3 	bl	8005e84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	4313      	orrs	r3, r2
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005544:	f023 030c 	bic.w	r3, r3, #12
 8005548:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	4313      	orrs	r3, r2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	011a      	lsls	r2, r3, #4
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	031b      	lsls	r3, r3, #12
 8005574:	4313      	orrs	r3, r2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4313      	orrs	r3, r2
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0202 	mvn.w	r2, #2
 800561c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fc fccc 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fb0f 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fb20 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b04      	cmp	r3, #4
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0204 	mvn.w	r2, #4
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2202      	movs	r2, #2
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc fca2 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fae5 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 faf6 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0208 	mvn.w	r2, #8
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2204      	movs	r2, #4
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fc fc78 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fabb 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 facc 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b10      	cmp	r3, #16
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0210 	mvn.w	r2, #16
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2208      	movs	r2, #8
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc fc4e 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa91 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 faa2 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0201 	mvn.w	r2, #1
 800576c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa6b 	bl	8005c4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 f884 	bl	80068a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa67 	bl	8005c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0220 	mvn.w	r2, #32
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 f84e 	bl	8006894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_TIM_IC_ConfigChannel+0x1e>
 800581a:	2302      	movs	r3, #2
 800581c:	e088      	b.n	8005930 <HAL_TIM_IC_ConfigChannel+0x130>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f000 fd72 	bl	8006324 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 020c 	bic.w	r2, r2, #12
 800584e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6999      	ldr	r1, [r3, #24]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	619a      	str	r2, [r3, #24]
 8005862:	e060      	b.n	8005926 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b04      	cmp	r3, #4
 8005868:	d11c      	bne.n	80058a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f000 fdf6 	bl	800646a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800588c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6999      	ldr	r1, [r3, #24]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	619a      	str	r2, [r3, #24]
 80058a2:	e040      	b.n	8005926 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d11b      	bne.n	80058e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f000 fe43 	bl	8006544 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 020c 	bic.w	r2, r2, #12
 80058cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69d9      	ldr	r1, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	61da      	str	r2, [r3, #28]
 80058e0:	e021      	b.n	8005926 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d11c      	bne.n	8005922 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f000 fe60 	bl	80065bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800590a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69d9      	ldr	r1, [r3, #28]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	021a      	lsls	r2, r3, #8
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	61da      	str	r2, [r3, #28]
 8005920:	e001      	b.n	8005926 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005952:	2302      	movs	r3, #2
 8005954:	e0ae      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	f200 809f 	bhi.w	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059a1 	.word	0x080059a1
 8005970:	08005aa5 	.word	0x08005aa5
 8005974:	08005aa5 	.word	0x08005aa5
 8005978:	08005aa5 	.word	0x08005aa5
 800597c:	080059e1 	.word	0x080059e1
 8005980:	08005aa5 	.word	0x08005aa5
 8005984:	08005aa5 	.word	0x08005aa5
 8005988:	08005aa5 	.word	0x08005aa5
 800598c:	08005a23 	.word	0x08005a23
 8005990:	08005aa5 	.word	0x08005aa5
 8005994:	08005aa5 	.word	0x08005aa5
 8005998:	08005aa5 	.word	0x08005aa5
 800599c:	08005a63 	.word	0x08005a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fb0c 	bl	8005fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0208 	orr.w	r2, r2, #8
 80059ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0204 	bic.w	r2, r2, #4
 80059ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	619a      	str	r2, [r3, #24]
      break;
 80059de:	e064      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fb5c 	bl	80060a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6999      	ldr	r1, [r3, #24]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	021a      	lsls	r2, r3, #8
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	619a      	str	r2, [r3, #24]
      break;
 8005a20:	e043      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fbb1 	bl	8006190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0208 	orr.w	r2, r2, #8
 8005a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0204 	bic.w	r2, r2, #4
 8005a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	61da      	str	r2, [r3, #28]
      break;
 8005a60:	e023      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fc05 	bl	8006278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69d9      	ldr	r1, [r3, #28]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	021a      	lsls	r2, r3, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	61da      	str	r2, [r3, #28]
      break;
 8005aa2:	e002      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e0b4      	b.n	8005c42 <HAL_TIM_ConfigClockSource+0x186>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b10:	d03e      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0xd4>
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	f200 8087 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	f000 8086 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x172>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d87f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b70      	cmp	r3, #112	; 0x70
 8005b2a:	d01a      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xa6>
 8005b2c:	2b70      	cmp	r3, #112	; 0x70
 8005b2e:	d87b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d050      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b34:	2b60      	cmp	r3, #96	; 0x60
 8005b36:	d877      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d03c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8005b3c:	2b50      	cmp	r3, #80	; 0x50
 8005b3e:	d873      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d058      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d86f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	d064      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d86b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d060      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d867      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05c      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d05a      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b60:	e062      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6899      	ldr	r1, [r3, #8]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f000 fd7b 	bl	800666c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	609a      	str	r2, [r3, #8]
      break;
 8005b8e:	e04f      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f000 fd64 	bl	800666c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb2:	609a      	str	r2, [r3, #8]
      break;
 8005bb4:	e03c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 fc22 	bl	800640c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2150      	movs	r1, #80	; 0x50
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fd31 	bl	8006636 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e02c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6859      	ldr	r1, [r3, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f000 fc7e 	bl	80064e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2160      	movs	r1, #96	; 0x60
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fd21 	bl	8006636 <TIM_ITRx_SetConfig>
      break;
 8005bf4:	e01c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f000 fc02 	bl	800640c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2140      	movs	r1, #64	; 0x40
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fd11 	bl	8006636 <TIM_ITRx_SetConfig>
      break;
 8005c14:	e00c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4610      	mov	r0, r2
 8005c22:	f000 fd08 	bl	8006636 <TIM_ITRx_SetConfig>
      break;
 8005c26:	e003      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e000      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d107      	bne.n	8005cea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce8:	e02a      	b.n	8005d40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d107      	bne.n	8005d04 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d02:	e01d      	b.n	8005d40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d107      	bne.n	8005d1e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2204      	movs	r2, #4
 8005d12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	e010      	b.n	8005d40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d107      	bne.n	8005d38 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d36:	e003      	b.n	8005d40 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff ffb4 	bl	8005cae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d10f      	bne.n	8005d8c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d146      	bne.n	8005e08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8a:	e03d      	b.n	8005e08 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d10f      	bne.n	8005db6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d131      	bne.n	8005e08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db4:	e028      	b.n	8005e08 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d10f      	bne.n	8005de0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d11c      	bne.n	8005e08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dde:	e013      	b.n	8005e08 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d10e      	bne.n	8005e08 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2208      	movs	r2, #8
 8005dee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d107      	bne.n	8005e08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7fc f8e1 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d103      	bne.n	8005e3c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	771a      	strb	r2, [r3, #28]
 8005e3a:	e019      	b.n	8005e70 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d103      	bne.n	8005e4e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	771a      	strb	r2, [r3, #28]
 8005e4c:	e010      	b.n	8005e70 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d103      	bne.n	8005e60 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	771a      	strb	r2, [r3, #28]
 8005e5e:	e007      	b.n	8005e70 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d102      	bne.n	8005e70 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7ff fefe 	bl	8005c72 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	771a      	strb	r2, [r3, #28]
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a40      	ldr	r2, [pc, #256]	; (8005f98 <TIM_Base_SetConfig+0x114>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a3d      	ldr	r2, [pc, #244]	; (8005f9c <TIM_Base_SetConfig+0x118>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a3c      	ldr	r2, [pc, #240]	; (8005fa0 <TIM_Base_SetConfig+0x11c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a3b      	ldr	r2, [pc, #236]	; (8005fa4 <TIM_Base_SetConfig+0x120>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a3a      	ldr	r2, [pc, #232]	; (8005fa8 <TIM_Base_SetConfig+0x124>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d108      	bne.n	8005ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a2f      	ldr	r2, [pc, #188]	; (8005f98 <TIM_Base_SetConfig+0x114>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02b      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee4:	d027      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2c      	ldr	r2, [pc, #176]	; (8005f9c <TIM_Base_SetConfig+0x118>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d023      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2b      	ldr	r2, [pc, #172]	; (8005fa0 <TIM_Base_SetConfig+0x11c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01f      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <TIM_Base_SetConfig+0x120>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01b      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a29      	ldr	r2, [pc, #164]	; (8005fa8 <TIM_Base_SetConfig+0x124>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d017      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a28      	ldr	r2, [pc, #160]	; (8005fac <TIM_Base_SetConfig+0x128>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a27      	ldr	r2, [pc, #156]	; (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a26      	ldr	r2, [pc, #152]	; (8005fb4 <TIM_Base_SetConfig+0x130>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00b      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a25      	ldr	r2, [pc, #148]	; (8005fb8 <TIM_Base_SetConfig+0x134>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a24      	ldr	r2, [pc, #144]	; (8005fbc <TIM_Base_SetConfig+0x138>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a23      	ldr	r2, [pc, #140]	; (8005fc0 <TIM_Base_SetConfig+0x13c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <TIM_Base_SetConfig+0x114>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_Base_SetConfig+0xf8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a0c      	ldr	r2, [pc, #48]	; (8005fa8 <TIM_Base_SetConfig+0x124>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d103      	bne.n	8005f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	615a      	str	r2, [r3, #20]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800
 8005fb8:	40001800 	.word	0x40001800
 8005fbc:	40001c00 	.word	0x40001c00
 8005fc0:	40002000 	.word	0x40002000

08005fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 0302 	bic.w	r3, r3, #2
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a20      	ldr	r2, [pc, #128]	; (800609c <TIM_OC1_SetConfig+0xd8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC1_SetConfig+0x64>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <TIM_OC1_SetConfig+0xdc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0308 	bic.w	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a15      	ldr	r2, [pc, #84]	; (800609c <TIM_OC1_SetConfig+0xd8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_OC1_SetConfig+0x8e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <TIM_OC1_SetConfig+0xdc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40010000 	.word	0x40010000
 80060a0:	40010400 	.word	0x40010400

080060a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0210 	bic.w	r2, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0320 	bic.w	r3, r3, #32
 80060ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a22      	ldr	r2, [pc, #136]	; (8006188 <TIM_OC2_SetConfig+0xe4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC2_SetConfig+0x68>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a21      	ldr	r2, [pc, #132]	; (800618c <TIM_OC2_SetConfig+0xe8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10d      	bne.n	8006128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a17      	ldr	r2, [pc, #92]	; (8006188 <TIM_OC2_SetConfig+0xe4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_OC2_SetConfig+0x94>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <TIM_OC2_SetConfig+0xe8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d113      	bne.n	8006160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800613e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40010400 	.word	0x40010400

08006190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0303 	bic.w	r3, r3, #3
 80061c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <TIM_OC3_SetConfig+0xe0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_OC3_SetConfig+0x66>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <TIM_OC3_SetConfig+0xe4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10d      	bne.n	8006212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a16      	ldr	r2, [pc, #88]	; (8006270 <TIM_OC3_SetConfig+0xe0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_OC3_SetConfig+0x92>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a15      	ldr	r2, [pc, #84]	; (8006274 <TIM_OC3_SetConfig+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d113      	bne.n	800624a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	40010000 	.word	0x40010000
 8006274:	40010400 	.word	0x40010400

08006278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a12      	ldr	r2, [pc, #72]	; (800631c <TIM_OC4_SetConfig+0xa4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_OC4_SetConfig+0x68>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a11      	ldr	r2, [pc, #68]	; (8006320 <TIM_OC4_SetConfig+0xa8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d109      	bne.n	80062f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	019b      	lsls	r3, r3, #6
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400

08006324 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <TIM_TI1_SetConfig+0xcc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01b      	beq.n	800638a <TIM_TI1_SetConfig+0x66>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006358:	d017      	beq.n	800638a <TIM_TI1_SetConfig+0x66>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a25      	ldr	r2, [pc, #148]	; (80063f4 <TIM_TI1_SetConfig+0xd0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <TIM_TI1_SetConfig+0x66>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a24      	ldr	r2, [pc, #144]	; (80063f8 <TIM_TI1_SetConfig+0xd4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00f      	beq.n	800638a <TIM_TI1_SetConfig+0x66>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4a23      	ldr	r2, [pc, #140]	; (80063fc <TIM_TI1_SetConfig+0xd8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00b      	beq.n	800638a <TIM_TI1_SetConfig+0x66>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4a22      	ldr	r2, [pc, #136]	; (8006400 <TIM_TI1_SetConfig+0xdc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <TIM_TI1_SetConfig+0x66>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a21      	ldr	r2, [pc, #132]	; (8006404 <TIM_TI1_SetConfig+0xe0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_TI1_SetConfig+0x66>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a20      	ldr	r2, [pc, #128]	; (8006408 <TIM_TI1_SetConfig+0xe4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d101      	bne.n	800638e <TIM_TI1_SetConfig+0x6a>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <TIM_TI1_SetConfig+0x6c>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e003      	b.n	80063ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f023 030a 	bic.w	r3, r3, #10
 80063c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f003 030a 	and.w	r3, r3, #10
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	621a      	str	r2, [r3, #32]
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40000c00 	.word	0x40000c00
 8006400:	40010400 	.word	0x40010400
 8006404:	40014000 	.word	0x40014000
 8006408:	40001800 	.word	0x40001800

0800640c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f023 0201 	bic.w	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f023 030a 	bic.w	r3, r3, #10
 8006448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800646a:	b480      	push	{r7}
 800646c:	b087      	sub	sp, #28
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	f023 0210 	bic.w	r2, r3, #16
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006496:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	621a      	str	r2, [r3, #32]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f023 0210 	bic.w	r2, r3, #16
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800650e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	031b      	lsls	r3, r3, #12
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f023 0303 	bic.w	r3, r3, #3
 8006570:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006580:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	b2db      	uxtb	r3, r3
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006594:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	031b      	lsls	r3, r3, #12
 8006600:	b29b      	uxth	r3, r3
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800660e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	031b      	lsls	r3, r3, #12
 8006614:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	f043 0307 	orr.w	r3, r3, #7
 8006658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	609a      	str	r2, [r3, #8]
}
 8006660:	bf00      	nop
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	021a      	lsls	r2, r3, #8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	431a      	orrs	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4313      	orrs	r3, r2
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	609a      	str	r2, [r3, #8]
}
 80066a0:	bf00      	nop
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	2201      	movs	r2, #1
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	43db      	mvns	r3, r3
 80066ce:	401a      	ands	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1a      	ldr	r2, [r3, #32]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800670c:	2302      	movs	r3, #2
 800670e:	e05a      	b.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d022      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675c:	d01d      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1d      	ldr	r2, [pc, #116]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d018      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1a      	ldr	r2, [pc, #104]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00e      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d009      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d004      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a15      	ldr	r2, [pc, #84]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d10c      	bne.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40010400 	.word	0x40010400
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40001800 	.word	0x40001800

080067f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006808:	2302      	movs	r3, #2
 800680a:	e03d      	b.n	8006888 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e03f      	b.n	800694e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fb fea8 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f9cb 	bl	8006c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695a      	ldr	r2, [r3, #20]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b08a      	sub	sp, #40	; 0x28
 800695a:	af02      	add	r7, sp, #8
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b20      	cmp	r3, #32
 8006974:	d17c      	bne.n	8006a70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_UART_Transmit+0x2c>
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e075      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UART_Transmit+0x3e>
 8006990:	2302      	movs	r3, #2
 8006992:	e06e      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2221      	movs	r2, #33	; 0x21
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069aa:	f7fc f8f3 	bl	8002b94 <HAL_GetTick>
 80069ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c4:	d108      	bne.n	80069d8 <HAL_UART_Transmit+0x82>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	e003      	b.n	80069e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069e8:	e02a      	b.n	8006a40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f8e2 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e036      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e007      	b.n	8006a32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1cf      	bne.n	80069ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2140      	movs	r1, #64	; 0x40
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f8b2 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e006      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e000      	b.n	8006a72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a70:	2302      	movs	r3, #2
  }
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08a      	sub	sp, #40	; 0x28
 8006a7e:	af02      	add	r7, sp, #8
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	f040 808c 	bne.w	8006bb4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_UART_Receive+0x2e>
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e084      	b.n	8006bb6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_UART_Receive+0x40>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e07d      	b.n	8006bb6 <HAL_UART_Receive+0x13c>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2222      	movs	r2, #34	; 0x22
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ad6:	f7fc f85d 	bl	8002b94 <HAL_GetTick>
 8006ada:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af0:	d108      	bne.n	8006b04 <HAL_UART_Receive+0x8a>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e003      	b.n	8006b0c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b14:	e043      	b.n	8006b9e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2120      	movs	r1, #32
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 f84c 	bl	8006bbe <UART_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e042      	b.n	8006bb6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10c      	bne.n	8006b50 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	e01f      	b.n	8006b90 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b58:	d007      	beq.n	8006b6a <HAL_UART_Receive+0xf0>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <HAL_UART_Receive+0xfe>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e008      	b.n	8006b8a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1b6      	bne.n	8006b16 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e000      	b.n	8006bb6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006bb4:	2302      	movs	r3, #2
  }
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3720      	adds	r7, #32
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b090      	sub	sp, #64	; 0x40
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bce:	e050      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d04c      	beq.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0x30>
 8006bde:	f7fb ffd9 	bl	8002b94 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d241      	bcs.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c0e:	637a      	str	r2, [r7, #52]	; 0x34
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	613b      	str	r3, [r7, #16]
   return(result);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c42:	623a      	str	r2, [r7, #32]
 8006c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	69f9      	ldr	r1, [r7, #28]
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e5      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	bf0c      	ite	eq
 8006c82:	2301      	moveq	r3, #1
 8006c84:	2300      	movne	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d09f      	beq.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3740      	adds	r7, #64	; 0x40
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca0:	b0c0      	sub	sp, #256	; 0x100
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	68d9      	ldr	r1, [r3, #12]
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	ea40 0301 	orr.w	r3, r0, r1
 8006cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cf4:	f021 010c 	bic.w	r1, r1, #12
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d02:	430b      	orrs	r3, r1
 8006d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d16:	6999      	ldr	r1, [r3, #24]
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	ea40 0301 	orr.w	r3, r0, r1
 8006d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b8f      	ldr	r3, [pc, #572]	; (8006f68 <UART_SetConfig+0x2cc>)
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d005      	beq.n	8006d3c <UART_SetConfig+0xa0>
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b8d      	ldr	r3, [pc, #564]	; (8006f6c <UART_SetConfig+0x2d0>)
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d104      	bne.n	8006d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d3c:	f7fd fafc 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 8006d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d44:	e003      	b.n	8006d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d46:	f7fd fae3 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 8006d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	f040 810c 	bne.w	8006f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	1891      	adds	r1, r2, r2
 8006d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d76:	415b      	adcs	r3, r3
 8006d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d7e:	4621      	mov	r1, r4
 8006d80:	eb12 0801 	adds.w	r8, r2, r1
 8006d84:	4629      	mov	r1, r5
 8006d86:	eb43 0901 	adc.w	r9, r3, r1
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d9e:	4690      	mov	r8, r2
 8006da0:	4699      	mov	r9, r3
 8006da2:	4623      	mov	r3, r4
 8006da4:	eb18 0303 	adds.w	r3, r8, r3
 8006da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dac:	462b      	mov	r3, r5
 8006dae:	eb49 0303 	adc.w	r3, r9, r3
 8006db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dca:	460b      	mov	r3, r1
 8006dcc:	18db      	adds	r3, r3, r3
 8006dce:	653b      	str	r3, [r7, #80]	; 0x50
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	eb42 0303 	adc.w	r3, r2, r3
 8006dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8006dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006de0:	f7f9 ff52 	bl	8000c88 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4b61      	ldr	r3, [pc, #388]	; (8006f70 <UART_SetConfig+0x2d4>)
 8006dea:	fba3 2302 	umull	r2, r3, r3, r2
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	011c      	lsls	r4, r3, #4
 8006df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	1891      	adds	r1, r2, r2
 8006e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e0c:	415b      	adcs	r3, r3
 8006e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e14:	4641      	mov	r1, r8
 8006e16:	eb12 0a01 	adds.w	sl, r2, r1
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e34:	4692      	mov	sl, r2
 8006e36:	469b      	mov	fp, r3
 8006e38:	4643      	mov	r3, r8
 8006e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8006e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e42:	464b      	mov	r3, r9
 8006e44:	eb4b 0303 	adc.w	r3, fp, r3
 8006e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e60:	460b      	mov	r3, r1
 8006e62:	18db      	adds	r3, r3, r3
 8006e64:	643b      	str	r3, [r7, #64]	; 0x40
 8006e66:	4613      	mov	r3, r2
 8006e68:	eb42 0303 	adc.w	r3, r2, r3
 8006e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e76:	f7f9 ff07 	bl	8000c88 <__aeabi_uldivmod>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4611      	mov	r1, r2
 8006e80:	4b3b      	ldr	r3, [pc, #236]	; (8006f70 <UART_SetConfig+0x2d4>)
 8006e82:	fba3 2301 	umull	r2, r3, r3, r1
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	2264      	movs	r2, #100	; 0x64
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
 8006e8e:	1acb      	subs	r3, r1, r3
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e96:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <UART_SetConfig+0x2d4>)
 8006e98:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ea4:	441c      	add	r4, r3
 8006ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006eb8:	4642      	mov	r2, r8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	1891      	adds	r1, r2, r2
 8006ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ec0:	415b      	adcs	r3, r3
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ec8:	4641      	mov	r1, r8
 8006eca:	1851      	adds	r1, r2, r1
 8006ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8006ece:	4649      	mov	r1, r9
 8006ed0:	414b      	adcs	r3, r1
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	00cb      	lsls	r3, r1, #3
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eea:	4651      	mov	r1, sl
 8006eec:	00ca      	lsls	r2, r1, #3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	189b      	adds	r3, r3, r2
 8006ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006efc:	464b      	mov	r3, r9
 8006efe:	460a      	mov	r2, r1
 8006f00:	eb42 0303 	adc.w	r3, r2, r3
 8006f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	18db      	adds	r3, r3, r3
 8006f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f22:	4613      	mov	r3, r2
 8006f24:	eb42 0303 	adc.w	r3, r2, r3
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f32:	f7f9 fea9 	bl	8000c88 <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <UART_SetConfig+0x2d4>)
 8006f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	2164      	movs	r1, #100	; 0x64
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	3332      	adds	r3, #50	; 0x32
 8006f4e:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <UART_SetConfig+0x2d4>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	f003 0207 	and.w	r2, r3, #7
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4422      	add	r2, r4
 8006f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f64:	e105      	b.n	8007172 <UART_SetConfig+0x4d6>
 8006f66:	bf00      	nop
 8006f68:	40011000 	.word	0x40011000
 8006f6c:	40011400 	.word	0x40011400
 8006f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f86:	4642      	mov	r2, r8
 8006f88:	464b      	mov	r3, r9
 8006f8a:	1891      	adds	r1, r2, r2
 8006f8c:	6239      	str	r1, [r7, #32]
 8006f8e:	415b      	adcs	r3, r3
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
 8006f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f96:	4641      	mov	r1, r8
 8006f98:	1854      	adds	r4, r2, r1
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	eb43 0501 	adc.w	r5, r3, r1
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	00eb      	lsls	r3, r5, #3
 8006faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fae:	00e2      	lsls	r2, r4, #3
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	4643      	mov	r3, r8
 8006fb6:	18e3      	adds	r3, r4, r3
 8006fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	eb45 0303 	adc.w	r3, r5, r3
 8006fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	008b      	lsls	r3, r1, #2
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fec:	4621      	mov	r1, r4
 8006fee:	008a      	lsls	r2, r1, #2
 8006ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ff4:	f7f9 fe48 	bl	8000c88 <__aeabi_uldivmod>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4b60      	ldr	r3, [pc, #384]	; (8007180 <UART_SetConfig+0x4e4>)
 8006ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	011c      	lsls	r4, r3, #4
 8007006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700a:	2200      	movs	r2, #0
 800700c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	1891      	adds	r1, r2, r2
 800701e:	61b9      	str	r1, [r7, #24]
 8007020:	415b      	adcs	r3, r3
 8007022:	61fb      	str	r3, [r7, #28]
 8007024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007028:	4641      	mov	r1, r8
 800702a:	1851      	adds	r1, r2, r1
 800702c:	6139      	str	r1, [r7, #16]
 800702e:	4649      	mov	r1, r9
 8007030:	414b      	adcs	r3, r1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007040:	4659      	mov	r1, fp
 8007042:	00cb      	lsls	r3, r1, #3
 8007044:	4651      	mov	r1, sl
 8007046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704a:	4651      	mov	r1, sl
 800704c:	00ca      	lsls	r2, r1, #3
 800704e:	4610      	mov	r0, r2
 8007050:	4619      	mov	r1, r3
 8007052:	4603      	mov	r3, r0
 8007054:	4642      	mov	r2, r8
 8007056:	189b      	adds	r3, r3, r2
 8007058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800705c:	464b      	mov	r3, r9
 800705e:	460a      	mov	r2, r1
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	67bb      	str	r3, [r7, #120]	; 0x78
 8007072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007080:	4649      	mov	r1, r9
 8007082:	008b      	lsls	r3, r1, #2
 8007084:	4641      	mov	r1, r8
 8007086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800708a:	4641      	mov	r1, r8
 800708c:	008a      	lsls	r2, r1, #2
 800708e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007092:	f7f9 fdf9 	bl	8000c88 <__aeabi_uldivmod>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4b39      	ldr	r3, [pc, #228]	; (8007180 <UART_SetConfig+0x4e4>)
 800709c:	fba3 1302 	umull	r1, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	2164      	movs	r1, #100	; 0x64
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	3332      	adds	r3, #50	; 0x32
 80070ae:	4a34      	ldr	r2, [pc, #208]	; (8007180 <UART_SetConfig+0x4e4>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ba:	441c      	add	r4, r3
 80070bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c0:	2200      	movs	r2, #0
 80070c2:	673b      	str	r3, [r7, #112]	; 0x70
 80070c4:	677a      	str	r2, [r7, #116]	; 0x74
 80070c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070ca:	4642      	mov	r2, r8
 80070cc:	464b      	mov	r3, r9
 80070ce:	1891      	adds	r1, r2, r2
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	415b      	adcs	r3, r3
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070da:	4641      	mov	r1, r8
 80070dc:	1851      	adds	r1, r2, r1
 80070de:	6039      	str	r1, [r7, #0]
 80070e0:	4649      	mov	r1, r9
 80070e2:	414b      	adcs	r3, r1
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070f2:	4659      	mov	r1, fp
 80070f4:	00cb      	lsls	r3, r1, #3
 80070f6:	4651      	mov	r1, sl
 80070f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fc:	4651      	mov	r1, sl
 80070fe:	00ca      	lsls	r2, r1, #3
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	4603      	mov	r3, r0
 8007106:	4642      	mov	r2, r8
 8007108:	189b      	adds	r3, r3, r2
 800710a:	66bb      	str	r3, [r7, #104]	; 0x68
 800710c:	464b      	mov	r3, r9
 800710e:	460a      	mov	r2, r1
 8007110:	eb42 0303 	adc.w	r3, r2, r3
 8007114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	663b      	str	r3, [r7, #96]	; 0x60
 8007120:	667a      	str	r2, [r7, #100]	; 0x64
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800712e:	4649      	mov	r1, r9
 8007130:	008b      	lsls	r3, r1, #2
 8007132:	4641      	mov	r1, r8
 8007134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007138:	4641      	mov	r1, r8
 800713a:	008a      	lsls	r2, r1, #2
 800713c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007140:	f7f9 fda2 	bl	8000c88 <__aeabi_uldivmod>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <UART_SetConfig+0x4e4>)
 800714a:	fba3 1302 	umull	r1, r3, r3, r2
 800714e:	095b      	lsrs	r3, r3, #5
 8007150:	2164      	movs	r1, #100	; 0x64
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	3332      	adds	r3, #50	; 0x32
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <UART_SetConfig+0x4e4>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	f003 020f 	and.w	r2, r3, #15
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4422      	add	r2, r4
 8007170:	609a      	str	r2, [r3, #8]
}
 8007172:	bf00      	nop
 8007174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007178:	46bd      	mov	sp, r7
 800717a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800717e:	bf00      	nop
 8007180:	51eb851f 	.word	0x51eb851f

08007184 <__errno>:
 8007184:	4b01      	ldr	r3, [pc, #4]	; (800718c <__errno+0x8>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000018 	.word	0x20000018

08007190 <__libc_init_array>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	4d0d      	ldr	r5, [pc, #52]	; (80071c8 <__libc_init_array+0x38>)
 8007194:	4c0d      	ldr	r4, [pc, #52]	; (80071cc <__libc_init_array+0x3c>)
 8007196:	1b64      	subs	r4, r4, r5
 8007198:	10a4      	asrs	r4, r4, #2
 800719a:	2600      	movs	r6, #0
 800719c:	42a6      	cmp	r6, r4
 800719e:	d109      	bne.n	80071b4 <__libc_init_array+0x24>
 80071a0:	4d0b      	ldr	r5, [pc, #44]	; (80071d0 <__libc_init_array+0x40>)
 80071a2:	4c0c      	ldr	r4, [pc, #48]	; (80071d4 <__libc_init_array+0x44>)
 80071a4:	f004 f952 	bl	800b44c <_init>
 80071a8:	1b64      	subs	r4, r4, r5
 80071aa:	10a4      	asrs	r4, r4, #2
 80071ac:	2600      	movs	r6, #0
 80071ae:	42a6      	cmp	r6, r4
 80071b0:	d105      	bne.n	80071be <__libc_init_array+0x2e>
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b8:	4798      	blx	r3
 80071ba:	3601      	adds	r6, #1
 80071bc:	e7ee      	b.n	800719c <__libc_init_array+0xc>
 80071be:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c2:	4798      	blx	r3
 80071c4:	3601      	adds	r6, #1
 80071c6:	e7f2      	b.n	80071ae <__libc_init_array+0x1e>
 80071c8:	0800bae0 	.word	0x0800bae0
 80071cc:	0800bae0 	.word	0x0800bae0
 80071d0:	0800bae0 	.word	0x0800bae0
 80071d4:	0800bae4 	.word	0x0800bae4

080071d8 <memset>:
 80071d8:	4402      	add	r2, r0
 80071da:	4603      	mov	r3, r0
 80071dc:	4293      	cmp	r3, r2
 80071de:	d100      	bne.n	80071e2 <memset+0xa>
 80071e0:	4770      	bx	lr
 80071e2:	f803 1b01 	strb.w	r1, [r3], #1
 80071e6:	e7f9      	b.n	80071dc <memset+0x4>

080071e8 <__cvt>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	ec55 4b10 	vmov	r4, r5, d0
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	460e      	mov	r6, r1
 80071f4:	4619      	mov	r1, r3
 80071f6:	462b      	mov	r3, r5
 80071f8:	bfbb      	ittet	lt
 80071fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071fe:	461d      	movlt	r5, r3
 8007200:	2300      	movge	r3, #0
 8007202:	232d      	movlt	r3, #45	; 0x2d
 8007204:	700b      	strb	r3, [r1, #0]
 8007206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007208:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800720c:	4691      	mov	r9, r2
 800720e:	f023 0820 	bic.w	r8, r3, #32
 8007212:	bfbc      	itt	lt
 8007214:	4622      	movlt	r2, r4
 8007216:	4614      	movlt	r4, r2
 8007218:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800721c:	d005      	beq.n	800722a <__cvt+0x42>
 800721e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007222:	d100      	bne.n	8007226 <__cvt+0x3e>
 8007224:	3601      	adds	r6, #1
 8007226:	2102      	movs	r1, #2
 8007228:	e000      	b.n	800722c <__cvt+0x44>
 800722a:	2103      	movs	r1, #3
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	ab02      	add	r3, sp, #8
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	ec45 4b10 	vmov	d0, r4, r5
 8007238:	4653      	mov	r3, sl
 800723a:	4632      	mov	r2, r6
 800723c:	f000 fcec 	bl	8007c18 <_dtoa_r>
 8007240:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007244:	4607      	mov	r7, r0
 8007246:	d102      	bne.n	800724e <__cvt+0x66>
 8007248:	f019 0f01 	tst.w	r9, #1
 800724c:	d022      	beq.n	8007294 <__cvt+0xac>
 800724e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007252:	eb07 0906 	add.w	r9, r7, r6
 8007256:	d110      	bne.n	800727a <__cvt+0x92>
 8007258:	783b      	ldrb	r3, [r7, #0]
 800725a:	2b30      	cmp	r3, #48	; 0x30
 800725c:	d10a      	bne.n	8007274 <__cvt+0x8c>
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	4620      	mov	r0, r4
 8007264:	4629      	mov	r1, r5
 8007266:	f7f9 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800726a:	b918      	cbnz	r0, 8007274 <__cvt+0x8c>
 800726c:	f1c6 0601 	rsb	r6, r6, #1
 8007270:	f8ca 6000 	str.w	r6, [sl]
 8007274:	f8da 3000 	ldr.w	r3, [sl]
 8007278:	4499      	add	r9, r3
 800727a:	2200      	movs	r2, #0
 800727c:	2300      	movs	r3, #0
 800727e:	4620      	mov	r0, r4
 8007280:	4629      	mov	r1, r5
 8007282:	f7f9 fc41 	bl	8000b08 <__aeabi_dcmpeq>
 8007286:	b108      	cbz	r0, 800728c <__cvt+0xa4>
 8007288:	f8cd 900c 	str.w	r9, [sp, #12]
 800728c:	2230      	movs	r2, #48	; 0x30
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	454b      	cmp	r3, r9
 8007292:	d307      	bcc.n	80072a4 <__cvt+0xbc>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007298:	1bdb      	subs	r3, r3, r7
 800729a:	4638      	mov	r0, r7
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	b004      	add	sp, #16
 80072a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a4:	1c59      	adds	r1, r3, #1
 80072a6:	9103      	str	r1, [sp, #12]
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e7f0      	b.n	800728e <__cvt+0xa6>

080072ac <__exponent>:
 80072ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ae:	4603      	mov	r3, r0
 80072b0:	2900      	cmp	r1, #0
 80072b2:	bfb8      	it	lt
 80072b4:	4249      	neglt	r1, r1
 80072b6:	f803 2b02 	strb.w	r2, [r3], #2
 80072ba:	bfb4      	ite	lt
 80072bc:	222d      	movlt	r2, #45	; 0x2d
 80072be:	222b      	movge	r2, #43	; 0x2b
 80072c0:	2909      	cmp	r1, #9
 80072c2:	7042      	strb	r2, [r0, #1]
 80072c4:	dd2a      	ble.n	800731c <__exponent+0x70>
 80072c6:	f10d 0407 	add.w	r4, sp, #7
 80072ca:	46a4      	mov	ip, r4
 80072cc:	270a      	movs	r7, #10
 80072ce:	46a6      	mov	lr, r4
 80072d0:	460a      	mov	r2, r1
 80072d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80072d6:	fb07 1516 	mls	r5, r7, r6, r1
 80072da:	3530      	adds	r5, #48	; 0x30
 80072dc:	2a63      	cmp	r2, #99	; 0x63
 80072de:	f104 34ff 	add.w	r4, r4, #4294967295
 80072e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072e6:	4631      	mov	r1, r6
 80072e8:	dcf1      	bgt.n	80072ce <__exponent+0x22>
 80072ea:	3130      	adds	r1, #48	; 0x30
 80072ec:	f1ae 0502 	sub.w	r5, lr, #2
 80072f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072f4:	1c44      	adds	r4, r0, #1
 80072f6:	4629      	mov	r1, r5
 80072f8:	4561      	cmp	r1, ip
 80072fa:	d30a      	bcc.n	8007312 <__exponent+0x66>
 80072fc:	f10d 0209 	add.w	r2, sp, #9
 8007300:	eba2 020e 	sub.w	r2, r2, lr
 8007304:	4565      	cmp	r5, ip
 8007306:	bf88      	it	hi
 8007308:	2200      	movhi	r2, #0
 800730a:	4413      	add	r3, r2
 800730c:	1a18      	subs	r0, r3, r0
 800730e:	b003      	add	sp, #12
 8007310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007316:	f804 2f01 	strb.w	r2, [r4, #1]!
 800731a:	e7ed      	b.n	80072f8 <__exponent+0x4c>
 800731c:	2330      	movs	r3, #48	; 0x30
 800731e:	3130      	adds	r1, #48	; 0x30
 8007320:	7083      	strb	r3, [r0, #2]
 8007322:	70c1      	strb	r1, [r0, #3]
 8007324:	1d03      	adds	r3, r0, #4
 8007326:	e7f1      	b.n	800730c <__exponent+0x60>

08007328 <_printf_float>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	ed2d 8b02 	vpush	{d8}
 8007330:	b08d      	sub	sp, #52	; 0x34
 8007332:	460c      	mov	r4, r1
 8007334:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007338:	4616      	mov	r6, r2
 800733a:	461f      	mov	r7, r3
 800733c:	4605      	mov	r5, r0
 800733e:	f001 fa59 	bl	80087f4 <_localeconv_r>
 8007342:	f8d0 a000 	ldr.w	sl, [r0]
 8007346:	4650      	mov	r0, sl
 8007348:	f7f8 ff62 	bl	8000210 <strlen>
 800734c:	2300      	movs	r3, #0
 800734e:	930a      	str	r3, [sp, #40]	; 0x28
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	f8d8 3000 	ldr.w	r3, [r8]
 8007358:	f894 b018 	ldrb.w	fp, [r4, #24]
 800735c:	3307      	adds	r3, #7
 800735e:	f023 0307 	bic.w	r3, r3, #7
 8007362:	f103 0208 	add.w	r2, r3, #8
 8007366:	f8c8 2000 	str.w	r2, [r8]
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007372:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007376:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007380:	ee08 0a10 	vmov	s16, r0
 8007384:	4b9f      	ldr	r3, [pc, #636]	; (8007604 <_printf_float+0x2dc>)
 8007386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	f7f9 fbed 	bl	8000b6c <__aeabi_dcmpun>
 8007392:	bb88      	cbnz	r0, 80073f8 <_printf_float+0xd0>
 8007394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007398:	4b9a      	ldr	r3, [pc, #616]	; (8007604 <_printf_float+0x2dc>)
 800739a:	f04f 32ff 	mov.w	r2, #4294967295
 800739e:	f7f9 fbc7 	bl	8000b30 <__aeabi_dcmple>
 80073a2:	bb48      	cbnz	r0, 80073f8 <_printf_float+0xd0>
 80073a4:	2200      	movs	r2, #0
 80073a6:	2300      	movs	r3, #0
 80073a8:	4640      	mov	r0, r8
 80073aa:	4649      	mov	r1, r9
 80073ac:	f7f9 fbb6 	bl	8000b1c <__aeabi_dcmplt>
 80073b0:	b110      	cbz	r0, 80073b8 <_printf_float+0x90>
 80073b2:	232d      	movs	r3, #45	; 0x2d
 80073b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b8:	4b93      	ldr	r3, [pc, #588]	; (8007608 <_printf_float+0x2e0>)
 80073ba:	4894      	ldr	r0, [pc, #592]	; (800760c <_printf_float+0x2e4>)
 80073bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073c0:	bf94      	ite	ls
 80073c2:	4698      	movls	r8, r3
 80073c4:	4680      	movhi	r8, r0
 80073c6:	2303      	movs	r3, #3
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	9b05      	ldr	r3, [sp, #20]
 80073cc:	f023 0204 	bic.w	r2, r3, #4
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	9700      	str	r7, [sp, #0]
 80073d8:	4633      	mov	r3, r6
 80073da:	aa0b      	add	r2, sp, #44	; 0x2c
 80073dc:	4621      	mov	r1, r4
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 f9d8 	bl	8007794 <_printf_common>
 80073e4:	3001      	adds	r0, #1
 80073e6:	f040 8090 	bne.w	800750a <_printf_float+0x1e2>
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	b00d      	add	sp, #52	; 0x34
 80073f0:	ecbd 8b02 	vpop	{d8}
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	4642      	mov	r2, r8
 80073fa:	464b      	mov	r3, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	4649      	mov	r1, r9
 8007400:	f7f9 fbb4 	bl	8000b6c <__aeabi_dcmpun>
 8007404:	b140      	cbz	r0, 8007418 <_printf_float+0xf0>
 8007406:	464b      	mov	r3, r9
 8007408:	2b00      	cmp	r3, #0
 800740a:	bfbc      	itt	lt
 800740c:	232d      	movlt	r3, #45	; 0x2d
 800740e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007412:	487f      	ldr	r0, [pc, #508]	; (8007610 <_printf_float+0x2e8>)
 8007414:	4b7f      	ldr	r3, [pc, #508]	; (8007614 <_printf_float+0x2ec>)
 8007416:	e7d1      	b.n	80073bc <_printf_float+0x94>
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800741e:	9206      	str	r2, [sp, #24]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	d13f      	bne.n	80074a4 <_printf_float+0x17c>
 8007424:	2306      	movs	r3, #6
 8007426:	6063      	str	r3, [r4, #4]
 8007428:	9b05      	ldr	r3, [sp, #20]
 800742a:	6861      	ldr	r1, [r4, #4]
 800742c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007430:	2300      	movs	r3, #0
 8007432:	9303      	str	r3, [sp, #12]
 8007434:	ab0a      	add	r3, sp, #40	; 0x28
 8007436:	e9cd b301 	strd	fp, r3, [sp, #4]
 800743a:	ab09      	add	r3, sp, #36	; 0x24
 800743c:	ec49 8b10 	vmov	d0, r8, r9
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	6022      	str	r2, [r4, #0]
 8007444:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007448:	4628      	mov	r0, r5
 800744a:	f7ff fecd 	bl	80071e8 <__cvt>
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007452:	2b47      	cmp	r3, #71	; 0x47
 8007454:	4680      	mov	r8, r0
 8007456:	d108      	bne.n	800746a <_printf_float+0x142>
 8007458:	1cc8      	adds	r0, r1, #3
 800745a:	db02      	blt.n	8007462 <_printf_float+0x13a>
 800745c:	6863      	ldr	r3, [r4, #4]
 800745e:	4299      	cmp	r1, r3
 8007460:	dd41      	ble.n	80074e6 <_printf_float+0x1be>
 8007462:	f1ab 0b02 	sub.w	fp, fp, #2
 8007466:	fa5f fb8b 	uxtb.w	fp, fp
 800746a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800746e:	d820      	bhi.n	80074b2 <_printf_float+0x18a>
 8007470:	3901      	subs	r1, #1
 8007472:	465a      	mov	r2, fp
 8007474:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007478:	9109      	str	r1, [sp, #36]	; 0x24
 800747a:	f7ff ff17 	bl	80072ac <__exponent>
 800747e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007480:	1813      	adds	r3, r2, r0
 8007482:	2a01      	cmp	r2, #1
 8007484:	4681      	mov	r9, r0
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	dc02      	bgt.n	8007490 <_printf_float+0x168>
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	07d2      	lsls	r2, r2, #31
 800748e:	d501      	bpl.n	8007494 <_printf_float+0x16c>
 8007490:	3301      	adds	r3, #1
 8007492:	6123      	str	r3, [r4, #16]
 8007494:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007498:	2b00      	cmp	r3, #0
 800749a:	d09c      	beq.n	80073d6 <_printf_float+0xae>
 800749c:	232d      	movs	r3, #45	; 0x2d
 800749e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a2:	e798      	b.n	80073d6 <_printf_float+0xae>
 80074a4:	9a06      	ldr	r2, [sp, #24]
 80074a6:	2a47      	cmp	r2, #71	; 0x47
 80074a8:	d1be      	bne.n	8007428 <_printf_float+0x100>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1bc      	bne.n	8007428 <_printf_float+0x100>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7b9      	b.n	8007426 <_printf_float+0xfe>
 80074b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074b6:	d118      	bne.n	80074ea <_printf_float+0x1c2>
 80074b8:	2900      	cmp	r1, #0
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	dd0b      	ble.n	80074d6 <_printf_float+0x1ae>
 80074be:	6121      	str	r1, [r4, #16]
 80074c0:	b913      	cbnz	r3, 80074c8 <_printf_float+0x1a0>
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	07d0      	lsls	r0, r2, #31
 80074c6:	d502      	bpl.n	80074ce <_printf_float+0x1a6>
 80074c8:	3301      	adds	r3, #1
 80074ca:	440b      	add	r3, r1
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80074d0:	f04f 0900 	mov.w	r9, #0
 80074d4:	e7de      	b.n	8007494 <_printf_float+0x16c>
 80074d6:	b913      	cbnz	r3, 80074de <_printf_float+0x1b6>
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	07d2      	lsls	r2, r2, #31
 80074dc:	d501      	bpl.n	80074e2 <_printf_float+0x1ba>
 80074de:	3302      	adds	r3, #2
 80074e0:	e7f4      	b.n	80074cc <_printf_float+0x1a4>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7f2      	b.n	80074cc <_printf_float+0x1a4>
 80074e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ec:	4299      	cmp	r1, r3
 80074ee:	db05      	blt.n	80074fc <_printf_float+0x1d4>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	6121      	str	r1, [r4, #16]
 80074f4:	07d8      	lsls	r0, r3, #31
 80074f6:	d5ea      	bpl.n	80074ce <_printf_float+0x1a6>
 80074f8:	1c4b      	adds	r3, r1, #1
 80074fa:	e7e7      	b.n	80074cc <_printf_float+0x1a4>
 80074fc:	2900      	cmp	r1, #0
 80074fe:	bfd4      	ite	le
 8007500:	f1c1 0202 	rsble	r2, r1, #2
 8007504:	2201      	movgt	r2, #1
 8007506:	4413      	add	r3, r2
 8007508:	e7e0      	b.n	80074cc <_printf_float+0x1a4>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	055a      	lsls	r2, r3, #21
 800750e:	d407      	bmi.n	8007520 <_printf_float+0x1f8>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	4642      	mov	r2, r8
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	d12c      	bne.n	8007578 <_printf_float+0x250>
 800751e:	e764      	b.n	80073ea <_printf_float+0xc2>
 8007520:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007524:	f240 80e0 	bls.w	80076e8 <_printf_float+0x3c0>
 8007528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800752c:	2200      	movs	r2, #0
 800752e:	2300      	movs	r3, #0
 8007530:	f7f9 faea 	bl	8000b08 <__aeabi_dcmpeq>
 8007534:	2800      	cmp	r0, #0
 8007536:	d034      	beq.n	80075a2 <_printf_float+0x27a>
 8007538:	4a37      	ldr	r2, [pc, #220]	; (8007618 <_printf_float+0x2f0>)
 800753a:	2301      	movs	r3, #1
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	f43f af51 	beq.w	80073ea <_printf_float+0xc2>
 8007548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800754c:	429a      	cmp	r2, r3
 800754e:	db02      	blt.n	8007556 <_printf_float+0x22e>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	07d8      	lsls	r0, r3, #31
 8007554:	d510      	bpl.n	8007578 <_printf_float+0x250>
 8007556:	ee18 3a10 	vmov	r3, s16
 800755a:	4652      	mov	r2, sl
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f af41 	beq.w	80073ea <_printf_float+0xc2>
 8007568:	f04f 0800 	mov.w	r8, #0
 800756c:	f104 091a 	add.w	r9, r4, #26
 8007570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007572:	3b01      	subs	r3, #1
 8007574:	4543      	cmp	r3, r8
 8007576:	dc09      	bgt.n	800758c <_printf_float+0x264>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	079b      	lsls	r3, r3, #30
 800757c:	f100 8105 	bmi.w	800778a <_printf_float+0x462>
 8007580:	68e0      	ldr	r0, [r4, #12]
 8007582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007584:	4298      	cmp	r0, r3
 8007586:	bfb8      	it	lt
 8007588:	4618      	movlt	r0, r3
 800758a:	e730      	b.n	80073ee <_printf_float+0xc6>
 800758c:	2301      	movs	r3, #1
 800758e:	464a      	mov	r2, r9
 8007590:	4631      	mov	r1, r6
 8007592:	4628      	mov	r0, r5
 8007594:	47b8      	blx	r7
 8007596:	3001      	adds	r0, #1
 8007598:	f43f af27 	beq.w	80073ea <_printf_float+0xc2>
 800759c:	f108 0801 	add.w	r8, r8, #1
 80075a0:	e7e6      	b.n	8007570 <_printf_float+0x248>
 80075a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dc39      	bgt.n	800761c <_printf_float+0x2f4>
 80075a8:	4a1b      	ldr	r2, [pc, #108]	; (8007618 <_printf_float+0x2f0>)
 80075aa:	2301      	movs	r3, #1
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f af19 	beq.w	80073ea <_printf_float+0xc2>
 80075b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075bc:	4313      	orrs	r3, r2
 80075be:	d102      	bne.n	80075c6 <_printf_float+0x29e>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	07d9      	lsls	r1, r3, #31
 80075c4:	d5d8      	bpl.n	8007578 <_printf_float+0x250>
 80075c6:	ee18 3a10 	vmov	r3, s16
 80075ca:	4652      	mov	r2, sl
 80075cc:	4631      	mov	r1, r6
 80075ce:	4628      	mov	r0, r5
 80075d0:	47b8      	blx	r7
 80075d2:	3001      	adds	r0, #1
 80075d4:	f43f af09 	beq.w	80073ea <_printf_float+0xc2>
 80075d8:	f04f 0900 	mov.w	r9, #0
 80075dc:	f104 0a1a 	add.w	sl, r4, #26
 80075e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e2:	425b      	negs	r3, r3
 80075e4:	454b      	cmp	r3, r9
 80075e6:	dc01      	bgt.n	80075ec <_printf_float+0x2c4>
 80075e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ea:	e792      	b.n	8007512 <_printf_float+0x1ea>
 80075ec:	2301      	movs	r3, #1
 80075ee:	4652      	mov	r2, sl
 80075f0:	4631      	mov	r1, r6
 80075f2:	4628      	mov	r0, r5
 80075f4:	47b8      	blx	r7
 80075f6:	3001      	adds	r0, #1
 80075f8:	f43f aef7 	beq.w	80073ea <_printf_float+0xc2>
 80075fc:	f109 0901 	add.w	r9, r9, #1
 8007600:	e7ee      	b.n	80075e0 <_printf_float+0x2b8>
 8007602:	bf00      	nop
 8007604:	7fefffff 	.word	0x7fefffff
 8007608:	0800b4e8 	.word	0x0800b4e8
 800760c:	0800b4ec 	.word	0x0800b4ec
 8007610:	0800b4f4 	.word	0x0800b4f4
 8007614:	0800b4f0 	.word	0x0800b4f0
 8007618:	0800b4f8 	.word	0x0800b4f8
 800761c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007620:	429a      	cmp	r2, r3
 8007622:	bfa8      	it	ge
 8007624:	461a      	movge	r2, r3
 8007626:	2a00      	cmp	r2, #0
 8007628:	4691      	mov	r9, r2
 800762a:	dc37      	bgt.n	800769c <_printf_float+0x374>
 800762c:	f04f 0b00 	mov.w	fp, #0
 8007630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007634:	f104 021a 	add.w	r2, r4, #26
 8007638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800763a:	9305      	str	r3, [sp, #20]
 800763c:	eba3 0309 	sub.w	r3, r3, r9
 8007640:	455b      	cmp	r3, fp
 8007642:	dc33      	bgt.n	80076ac <_printf_float+0x384>
 8007644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007648:	429a      	cmp	r2, r3
 800764a:	db3b      	blt.n	80076c4 <_printf_float+0x39c>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	07da      	lsls	r2, r3, #31
 8007650:	d438      	bmi.n	80076c4 <_printf_float+0x39c>
 8007652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007654:	9a05      	ldr	r2, [sp, #20]
 8007656:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007658:	1a9a      	subs	r2, r3, r2
 800765a:	eba3 0901 	sub.w	r9, r3, r1
 800765e:	4591      	cmp	r9, r2
 8007660:	bfa8      	it	ge
 8007662:	4691      	movge	r9, r2
 8007664:	f1b9 0f00 	cmp.w	r9, #0
 8007668:	dc35      	bgt.n	80076d6 <_printf_float+0x3ae>
 800766a:	f04f 0800 	mov.w	r8, #0
 800766e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007672:	f104 0a1a 	add.w	sl, r4, #26
 8007676:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	eba3 0309 	sub.w	r3, r3, r9
 8007680:	4543      	cmp	r3, r8
 8007682:	f77f af79 	ble.w	8007578 <_printf_float+0x250>
 8007686:	2301      	movs	r3, #1
 8007688:	4652      	mov	r2, sl
 800768a:	4631      	mov	r1, r6
 800768c:	4628      	mov	r0, r5
 800768e:	47b8      	blx	r7
 8007690:	3001      	adds	r0, #1
 8007692:	f43f aeaa 	beq.w	80073ea <_printf_float+0xc2>
 8007696:	f108 0801 	add.w	r8, r8, #1
 800769a:	e7ec      	b.n	8007676 <_printf_float+0x34e>
 800769c:	4613      	mov	r3, r2
 800769e:	4631      	mov	r1, r6
 80076a0:	4642      	mov	r2, r8
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	d1c0      	bne.n	800762c <_printf_float+0x304>
 80076aa:	e69e      	b.n	80073ea <_printf_float+0xc2>
 80076ac:	2301      	movs	r3, #1
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	9205      	str	r2, [sp, #20]
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	f43f ae97 	beq.w	80073ea <_printf_float+0xc2>
 80076bc:	9a05      	ldr	r2, [sp, #20]
 80076be:	f10b 0b01 	add.w	fp, fp, #1
 80076c2:	e7b9      	b.n	8007638 <_printf_float+0x310>
 80076c4:	ee18 3a10 	vmov	r3, s16
 80076c8:	4652      	mov	r2, sl
 80076ca:	4631      	mov	r1, r6
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b8      	blx	r7
 80076d0:	3001      	adds	r0, #1
 80076d2:	d1be      	bne.n	8007652 <_printf_float+0x32a>
 80076d4:	e689      	b.n	80073ea <_printf_float+0xc2>
 80076d6:	9a05      	ldr	r2, [sp, #20]
 80076d8:	464b      	mov	r3, r9
 80076da:	4442      	add	r2, r8
 80076dc:	4631      	mov	r1, r6
 80076de:	4628      	mov	r0, r5
 80076e0:	47b8      	blx	r7
 80076e2:	3001      	adds	r0, #1
 80076e4:	d1c1      	bne.n	800766a <_printf_float+0x342>
 80076e6:	e680      	b.n	80073ea <_printf_float+0xc2>
 80076e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ea:	2a01      	cmp	r2, #1
 80076ec:	dc01      	bgt.n	80076f2 <_printf_float+0x3ca>
 80076ee:	07db      	lsls	r3, r3, #31
 80076f0:	d538      	bpl.n	8007764 <_printf_float+0x43c>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4642      	mov	r2, r8
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f ae74 	beq.w	80073ea <_printf_float+0xc2>
 8007702:	ee18 3a10 	vmov	r3, s16
 8007706:	4652      	mov	r2, sl
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	f43f ae6b 	beq.w	80073ea <_printf_float+0xc2>
 8007714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007718:	2200      	movs	r2, #0
 800771a:	2300      	movs	r3, #0
 800771c:	f7f9 f9f4 	bl	8000b08 <__aeabi_dcmpeq>
 8007720:	b9d8      	cbnz	r0, 800775a <_printf_float+0x432>
 8007722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007724:	f108 0201 	add.w	r2, r8, #1
 8007728:	3b01      	subs	r3, #1
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	d10e      	bne.n	8007752 <_printf_float+0x42a>
 8007734:	e659      	b.n	80073ea <_printf_float+0xc2>
 8007736:	2301      	movs	r3, #1
 8007738:	4652      	mov	r2, sl
 800773a:	4631      	mov	r1, r6
 800773c:	4628      	mov	r0, r5
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	f43f ae52 	beq.w	80073ea <_printf_float+0xc2>
 8007746:	f108 0801 	add.w	r8, r8, #1
 800774a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774c:	3b01      	subs	r3, #1
 800774e:	4543      	cmp	r3, r8
 8007750:	dcf1      	bgt.n	8007736 <_printf_float+0x40e>
 8007752:	464b      	mov	r3, r9
 8007754:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007758:	e6dc      	b.n	8007514 <_printf_float+0x1ec>
 800775a:	f04f 0800 	mov.w	r8, #0
 800775e:	f104 0a1a 	add.w	sl, r4, #26
 8007762:	e7f2      	b.n	800774a <_printf_float+0x422>
 8007764:	2301      	movs	r3, #1
 8007766:	4642      	mov	r2, r8
 8007768:	e7df      	b.n	800772a <_printf_float+0x402>
 800776a:	2301      	movs	r3, #1
 800776c:	464a      	mov	r2, r9
 800776e:	4631      	mov	r1, r6
 8007770:	4628      	mov	r0, r5
 8007772:	47b8      	blx	r7
 8007774:	3001      	adds	r0, #1
 8007776:	f43f ae38 	beq.w	80073ea <_printf_float+0xc2>
 800777a:	f108 0801 	add.w	r8, r8, #1
 800777e:	68e3      	ldr	r3, [r4, #12]
 8007780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007782:	1a5b      	subs	r3, r3, r1
 8007784:	4543      	cmp	r3, r8
 8007786:	dcf0      	bgt.n	800776a <_printf_float+0x442>
 8007788:	e6fa      	b.n	8007580 <_printf_float+0x258>
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	f104 0919 	add.w	r9, r4, #25
 8007792:	e7f4      	b.n	800777e <_printf_float+0x456>

08007794 <_printf_common>:
 8007794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007798:	4616      	mov	r6, r2
 800779a:	4699      	mov	r9, r3
 800779c:	688a      	ldr	r2, [r1, #8]
 800779e:	690b      	ldr	r3, [r1, #16]
 80077a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	bfb8      	it	lt
 80077a8:	4613      	movlt	r3, r2
 80077aa:	6033      	str	r3, [r6, #0]
 80077ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077b0:	4607      	mov	r7, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	b10a      	cbz	r2, 80077ba <_printf_common+0x26>
 80077b6:	3301      	adds	r3, #1
 80077b8:	6033      	str	r3, [r6, #0]
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	0699      	lsls	r1, r3, #26
 80077be:	bf42      	ittt	mi
 80077c0:	6833      	ldrmi	r3, [r6, #0]
 80077c2:	3302      	addmi	r3, #2
 80077c4:	6033      	strmi	r3, [r6, #0]
 80077c6:	6825      	ldr	r5, [r4, #0]
 80077c8:	f015 0506 	ands.w	r5, r5, #6
 80077cc:	d106      	bne.n	80077dc <_printf_common+0x48>
 80077ce:	f104 0a19 	add.w	sl, r4, #25
 80077d2:	68e3      	ldr	r3, [r4, #12]
 80077d4:	6832      	ldr	r2, [r6, #0]
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	42ab      	cmp	r3, r5
 80077da:	dc26      	bgt.n	800782a <_printf_common+0x96>
 80077dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077e0:	1e13      	subs	r3, r2, #0
 80077e2:	6822      	ldr	r2, [r4, #0]
 80077e4:	bf18      	it	ne
 80077e6:	2301      	movne	r3, #1
 80077e8:	0692      	lsls	r2, r2, #26
 80077ea:	d42b      	bmi.n	8007844 <_printf_common+0xb0>
 80077ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077f0:	4649      	mov	r1, r9
 80077f2:	4638      	mov	r0, r7
 80077f4:	47c0      	blx	r8
 80077f6:	3001      	adds	r0, #1
 80077f8:	d01e      	beq.n	8007838 <_printf_common+0xa4>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	68e5      	ldr	r5, [r4, #12]
 80077fe:	6832      	ldr	r2, [r6, #0]
 8007800:	f003 0306 	and.w	r3, r3, #6
 8007804:	2b04      	cmp	r3, #4
 8007806:	bf08      	it	eq
 8007808:	1aad      	subeq	r5, r5, r2
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	6922      	ldr	r2, [r4, #16]
 800780e:	bf0c      	ite	eq
 8007810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007814:	2500      	movne	r5, #0
 8007816:	4293      	cmp	r3, r2
 8007818:	bfc4      	itt	gt
 800781a:	1a9b      	subgt	r3, r3, r2
 800781c:	18ed      	addgt	r5, r5, r3
 800781e:	2600      	movs	r6, #0
 8007820:	341a      	adds	r4, #26
 8007822:	42b5      	cmp	r5, r6
 8007824:	d11a      	bne.n	800785c <_printf_common+0xc8>
 8007826:	2000      	movs	r0, #0
 8007828:	e008      	b.n	800783c <_printf_common+0xa8>
 800782a:	2301      	movs	r3, #1
 800782c:	4652      	mov	r2, sl
 800782e:	4649      	mov	r1, r9
 8007830:	4638      	mov	r0, r7
 8007832:	47c0      	blx	r8
 8007834:	3001      	adds	r0, #1
 8007836:	d103      	bne.n	8007840 <_printf_common+0xac>
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007840:	3501      	adds	r5, #1
 8007842:	e7c6      	b.n	80077d2 <_printf_common+0x3e>
 8007844:	18e1      	adds	r1, r4, r3
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	2030      	movs	r0, #48	; 0x30
 800784a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800784e:	4422      	add	r2, r4
 8007850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007858:	3302      	adds	r3, #2
 800785a:	e7c7      	b.n	80077ec <_printf_common+0x58>
 800785c:	2301      	movs	r3, #1
 800785e:	4622      	mov	r2, r4
 8007860:	4649      	mov	r1, r9
 8007862:	4638      	mov	r0, r7
 8007864:	47c0      	blx	r8
 8007866:	3001      	adds	r0, #1
 8007868:	d0e6      	beq.n	8007838 <_printf_common+0xa4>
 800786a:	3601      	adds	r6, #1
 800786c:	e7d9      	b.n	8007822 <_printf_common+0x8e>
	...

08007870 <_printf_i>:
 8007870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	7e0f      	ldrb	r7, [r1, #24]
 8007876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007878:	2f78      	cmp	r7, #120	; 0x78
 800787a:	4691      	mov	r9, r2
 800787c:	4680      	mov	r8, r0
 800787e:	460c      	mov	r4, r1
 8007880:	469a      	mov	sl, r3
 8007882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007886:	d807      	bhi.n	8007898 <_printf_i+0x28>
 8007888:	2f62      	cmp	r7, #98	; 0x62
 800788a:	d80a      	bhi.n	80078a2 <_printf_i+0x32>
 800788c:	2f00      	cmp	r7, #0
 800788e:	f000 80d8 	beq.w	8007a42 <_printf_i+0x1d2>
 8007892:	2f58      	cmp	r7, #88	; 0x58
 8007894:	f000 80a3 	beq.w	80079de <_printf_i+0x16e>
 8007898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800789c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078a0:	e03a      	b.n	8007918 <_printf_i+0xa8>
 80078a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078a6:	2b15      	cmp	r3, #21
 80078a8:	d8f6      	bhi.n	8007898 <_printf_i+0x28>
 80078aa:	a101      	add	r1, pc, #4	; (adr r1, 80078b0 <_printf_i+0x40>)
 80078ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078b0:	08007909 	.word	0x08007909
 80078b4:	0800791d 	.word	0x0800791d
 80078b8:	08007899 	.word	0x08007899
 80078bc:	08007899 	.word	0x08007899
 80078c0:	08007899 	.word	0x08007899
 80078c4:	08007899 	.word	0x08007899
 80078c8:	0800791d 	.word	0x0800791d
 80078cc:	08007899 	.word	0x08007899
 80078d0:	08007899 	.word	0x08007899
 80078d4:	08007899 	.word	0x08007899
 80078d8:	08007899 	.word	0x08007899
 80078dc:	08007a29 	.word	0x08007a29
 80078e0:	0800794d 	.word	0x0800794d
 80078e4:	08007a0b 	.word	0x08007a0b
 80078e8:	08007899 	.word	0x08007899
 80078ec:	08007899 	.word	0x08007899
 80078f0:	08007a4b 	.word	0x08007a4b
 80078f4:	08007899 	.word	0x08007899
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	08007899 	.word	0x08007899
 8007900:	08007899 	.word	0x08007899
 8007904:	08007a13 	.word	0x08007a13
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	1d1a      	adds	r2, r3, #4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	602a      	str	r2, [r5, #0]
 8007910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007918:	2301      	movs	r3, #1
 800791a:	e0a3      	b.n	8007a64 <_printf_i+0x1f4>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	6829      	ldr	r1, [r5, #0]
 8007920:	0606      	lsls	r6, r0, #24
 8007922:	f101 0304 	add.w	r3, r1, #4
 8007926:	d50a      	bpl.n	800793e <_printf_i+0xce>
 8007928:	680e      	ldr	r6, [r1, #0]
 800792a:	602b      	str	r3, [r5, #0]
 800792c:	2e00      	cmp	r6, #0
 800792e:	da03      	bge.n	8007938 <_printf_i+0xc8>
 8007930:	232d      	movs	r3, #45	; 0x2d
 8007932:	4276      	negs	r6, r6
 8007934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007938:	485e      	ldr	r0, [pc, #376]	; (8007ab4 <_printf_i+0x244>)
 800793a:	230a      	movs	r3, #10
 800793c:	e019      	b.n	8007972 <_printf_i+0x102>
 800793e:	680e      	ldr	r6, [r1, #0]
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007946:	bf18      	it	ne
 8007948:	b236      	sxthne	r6, r6
 800794a:	e7ef      	b.n	800792c <_printf_i+0xbc>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	6820      	ldr	r0, [r4, #0]
 8007950:	1d19      	adds	r1, r3, #4
 8007952:	6029      	str	r1, [r5, #0]
 8007954:	0601      	lsls	r1, r0, #24
 8007956:	d501      	bpl.n	800795c <_printf_i+0xec>
 8007958:	681e      	ldr	r6, [r3, #0]
 800795a:	e002      	b.n	8007962 <_printf_i+0xf2>
 800795c:	0646      	lsls	r6, r0, #25
 800795e:	d5fb      	bpl.n	8007958 <_printf_i+0xe8>
 8007960:	881e      	ldrh	r6, [r3, #0]
 8007962:	4854      	ldr	r0, [pc, #336]	; (8007ab4 <_printf_i+0x244>)
 8007964:	2f6f      	cmp	r7, #111	; 0x6f
 8007966:	bf0c      	ite	eq
 8007968:	2308      	moveq	r3, #8
 800796a:	230a      	movne	r3, #10
 800796c:	2100      	movs	r1, #0
 800796e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007972:	6865      	ldr	r5, [r4, #4]
 8007974:	60a5      	str	r5, [r4, #8]
 8007976:	2d00      	cmp	r5, #0
 8007978:	bfa2      	ittt	ge
 800797a:	6821      	ldrge	r1, [r4, #0]
 800797c:	f021 0104 	bicge.w	r1, r1, #4
 8007980:	6021      	strge	r1, [r4, #0]
 8007982:	b90e      	cbnz	r6, 8007988 <_printf_i+0x118>
 8007984:	2d00      	cmp	r5, #0
 8007986:	d04d      	beq.n	8007a24 <_printf_i+0x1b4>
 8007988:	4615      	mov	r5, r2
 800798a:	fbb6 f1f3 	udiv	r1, r6, r3
 800798e:	fb03 6711 	mls	r7, r3, r1, r6
 8007992:	5dc7      	ldrb	r7, [r0, r7]
 8007994:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007998:	4637      	mov	r7, r6
 800799a:	42bb      	cmp	r3, r7
 800799c:	460e      	mov	r6, r1
 800799e:	d9f4      	bls.n	800798a <_printf_i+0x11a>
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d10b      	bne.n	80079bc <_printf_i+0x14c>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	07de      	lsls	r6, r3, #31
 80079a8:	d508      	bpl.n	80079bc <_printf_i+0x14c>
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	6861      	ldr	r1, [r4, #4]
 80079ae:	4299      	cmp	r1, r3
 80079b0:	bfde      	ittt	le
 80079b2:	2330      	movle	r3, #48	; 0x30
 80079b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079bc:	1b52      	subs	r2, r2, r5
 80079be:	6122      	str	r2, [r4, #16]
 80079c0:	f8cd a000 	str.w	sl, [sp]
 80079c4:	464b      	mov	r3, r9
 80079c6:	aa03      	add	r2, sp, #12
 80079c8:	4621      	mov	r1, r4
 80079ca:	4640      	mov	r0, r8
 80079cc:	f7ff fee2 	bl	8007794 <_printf_common>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d14c      	bne.n	8007a6e <_printf_i+0x1fe>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	b004      	add	sp, #16
 80079da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079de:	4835      	ldr	r0, [pc, #212]	; (8007ab4 <_printf_i+0x244>)
 80079e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079e4:	6829      	ldr	r1, [r5, #0]
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80079ec:	6029      	str	r1, [r5, #0]
 80079ee:	061d      	lsls	r5, r3, #24
 80079f0:	d514      	bpl.n	8007a1c <_printf_i+0x1ac>
 80079f2:	07df      	lsls	r7, r3, #31
 80079f4:	bf44      	itt	mi
 80079f6:	f043 0320 	orrmi.w	r3, r3, #32
 80079fa:	6023      	strmi	r3, [r4, #0]
 80079fc:	b91e      	cbnz	r6, 8007a06 <_printf_i+0x196>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	f023 0320 	bic.w	r3, r3, #32
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	2310      	movs	r3, #16
 8007a08:	e7b0      	b.n	800796c <_printf_i+0xfc>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	f043 0320 	orr.w	r3, r3, #32
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	2378      	movs	r3, #120	; 0x78
 8007a14:	4828      	ldr	r0, [pc, #160]	; (8007ab8 <_printf_i+0x248>)
 8007a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a1a:	e7e3      	b.n	80079e4 <_printf_i+0x174>
 8007a1c:	0659      	lsls	r1, r3, #25
 8007a1e:	bf48      	it	mi
 8007a20:	b2b6      	uxthmi	r6, r6
 8007a22:	e7e6      	b.n	80079f2 <_printf_i+0x182>
 8007a24:	4615      	mov	r5, r2
 8007a26:	e7bb      	b.n	80079a0 <_printf_i+0x130>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	6826      	ldr	r6, [r4, #0]
 8007a2c:	6961      	ldr	r1, [r4, #20]
 8007a2e:	1d18      	adds	r0, r3, #4
 8007a30:	6028      	str	r0, [r5, #0]
 8007a32:	0635      	lsls	r5, r6, #24
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	d501      	bpl.n	8007a3c <_printf_i+0x1cc>
 8007a38:	6019      	str	r1, [r3, #0]
 8007a3a:	e002      	b.n	8007a42 <_printf_i+0x1d2>
 8007a3c:	0670      	lsls	r0, r6, #25
 8007a3e:	d5fb      	bpl.n	8007a38 <_printf_i+0x1c8>
 8007a40:	8019      	strh	r1, [r3, #0]
 8007a42:	2300      	movs	r3, #0
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	4615      	mov	r5, r2
 8007a48:	e7ba      	b.n	80079c0 <_printf_i+0x150>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	1d1a      	adds	r2, r3, #4
 8007a4e:	602a      	str	r2, [r5, #0]
 8007a50:	681d      	ldr	r5, [r3, #0]
 8007a52:	6862      	ldr	r2, [r4, #4]
 8007a54:	2100      	movs	r1, #0
 8007a56:	4628      	mov	r0, r5
 8007a58:	f7f8 fbe2 	bl	8000220 <memchr>
 8007a5c:	b108      	cbz	r0, 8007a62 <_printf_i+0x1f2>
 8007a5e:	1b40      	subs	r0, r0, r5
 8007a60:	6060      	str	r0, [r4, #4]
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	6123      	str	r3, [r4, #16]
 8007a66:	2300      	movs	r3, #0
 8007a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a6c:	e7a8      	b.n	80079c0 <_printf_i+0x150>
 8007a6e:	6923      	ldr	r3, [r4, #16]
 8007a70:	462a      	mov	r2, r5
 8007a72:	4649      	mov	r1, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	47d0      	blx	sl
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d0ab      	beq.n	80079d4 <_printf_i+0x164>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	079b      	lsls	r3, r3, #30
 8007a80:	d413      	bmi.n	8007aaa <_printf_i+0x23a>
 8007a82:	68e0      	ldr	r0, [r4, #12]
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	4298      	cmp	r0, r3
 8007a88:	bfb8      	it	lt
 8007a8a:	4618      	movlt	r0, r3
 8007a8c:	e7a4      	b.n	80079d8 <_printf_i+0x168>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4632      	mov	r2, r6
 8007a92:	4649      	mov	r1, r9
 8007a94:	4640      	mov	r0, r8
 8007a96:	47d0      	blx	sl
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d09b      	beq.n	80079d4 <_printf_i+0x164>
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	68e3      	ldr	r3, [r4, #12]
 8007aa0:	9903      	ldr	r1, [sp, #12]
 8007aa2:	1a5b      	subs	r3, r3, r1
 8007aa4:	42ab      	cmp	r3, r5
 8007aa6:	dcf2      	bgt.n	8007a8e <_printf_i+0x21e>
 8007aa8:	e7eb      	b.n	8007a82 <_printf_i+0x212>
 8007aaa:	2500      	movs	r5, #0
 8007aac:	f104 0619 	add.w	r6, r4, #25
 8007ab0:	e7f5      	b.n	8007a9e <_printf_i+0x22e>
 8007ab2:	bf00      	nop
 8007ab4:	0800b4fa 	.word	0x0800b4fa
 8007ab8:	0800b50b 	.word	0x0800b50b

08007abc <siprintf>:
 8007abc:	b40e      	push	{r1, r2, r3}
 8007abe:	b500      	push	{lr}
 8007ac0:	b09c      	sub	sp, #112	; 0x70
 8007ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ac4:	9002      	str	r0, [sp, #8]
 8007ac6:	9006      	str	r0, [sp, #24]
 8007ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007acc:	4809      	ldr	r0, [pc, #36]	; (8007af4 <siprintf+0x38>)
 8007ace:	9107      	str	r1, [sp, #28]
 8007ad0:	9104      	str	r1, [sp, #16]
 8007ad2:	4909      	ldr	r1, [pc, #36]	; (8007af8 <siprintf+0x3c>)
 8007ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ad8:	9105      	str	r1, [sp, #20]
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	a902      	add	r1, sp, #8
 8007ae0:	f001 fb78 	bl	80091d4 <_svfiprintf_r>
 8007ae4:	9b02      	ldr	r3, [sp, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	b01c      	add	sp, #112	; 0x70
 8007aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8007af0:	b003      	add	sp, #12
 8007af2:	4770      	bx	lr
 8007af4:	20000018 	.word	0x20000018
 8007af8:	ffff0208 	.word	0xffff0208

08007afc <quorem>:
 8007afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b00:	6903      	ldr	r3, [r0, #16]
 8007b02:	690c      	ldr	r4, [r1, #16]
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	4607      	mov	r7, r0
 8007b08:	f2c0 8081 	blt.w	8007c0e <quorem+0x112>
 8007b0c:	3c01      	subs	r4, #1
 8007b0e:	f101 0814 	add.w	r8, r1, #20
 8007b12:	f100 0514 	add.w	r5, r0, #20
 8007b16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b24:	3301      	adds	r3, #1
 8007b26:	429a      	cmp	r2, r3
 8007b28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b30:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b34:	d331      	bcc.n	8007b9a <quorem+0x9e>
 8007b36:	f04f 0e00 	mov.w	lr, #0
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	46ac      	mov	ip, r5
 8007b3e:	46f2      	mov	sl, lr
 8007b40:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b44:	b293      	uxth	r3, r2
 8007b46:	fb06 e303 	mla	r3, r6, r3, lr
 8007b4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	ebaa 0303 	sub.w	r3, sl, r3
 8007b54:	f8dc a000 	ldr.w	sl, [ip]
 8007b58:	0c12      	lsrs	r2, r2, #16
 8007b5a:	fa13 f38a 	uxtah	r3, r3, sl
 8007b5e:	fb06 e202 	mla	r2, r6, r2, lr
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	9b00      	ldr	r3, [sp, #0]
 8007b66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b6a:	b292      	uxth	r2, r2
 8007b6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b74:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b78:	4581      	cmp	r9, r0
 8007b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b7e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b86:	d2db      	bcs.n	8007b40 <quorem+0x44>
 8007b88:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b8c:	b92b      	cbnz	r3, 8007b9a <quorem+0x9e>
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	3b04      	subs	r3, #4
 8007b92:	429d      	cmp	r5, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	d32e      	bcc.n	8007bf6 <quorem+0xfa>
 8007b98:	613c      	str	r4, [r7, #16]
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f001 f8c6 	bl	8008d2c <__mcmp>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	db24      	blt.n	8007bee <quorem+0xf2>
 8007ba4:	3601      	adds	r6, #1
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f04f 0c00 	mov.w	ip, #0
 8007bac:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bb0:	f8d0 e000 	ldr.w	lr, [r0]
 8007bb4:	b293      	uxth	r3, r2
 8007bb6:	ebac 0303 	sub.w	r3, ip, r3
 8007bba:	0c12      	lsrs	r2, r2, #16
 8007bbc:	fa13 f38e 	uxtah	r3, r3, lr
 8007bc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bce:	45c1      	cmp	r9, r8
 8007bd0:	f840 3b04 	str.w	r3, [r0], #4
 8007bd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bd8:	d2e8      	bcs.n	8007bac <quorem+0xb0>
 8007bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007be2:	b922      	cbnz	r2, 8007bee <quorem+0xf2>
 8007be4:	3b04      	subs	r3, #4
 8007be6:	429d      	cmp	r5, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	d30a      	bcc.n	8007c02 <quorem+0x106>
 8007bec:	613c      	str	r4, [r7, #16]
 8007bee:	4630      	mov	r0, r6
 8007bf0:	b003      	add	sp, #12
 8007bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	3b04      	subs	r3, #4
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	d1cc      	bne.n	8007b98 <quorem+0x9c>
 8007bfe:	3c01      	subs	r4, #1
 8007c00:	e7c7      	b.n	8007b92 <quorem+0x96>
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	3b04      	subs	r3, #4
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	d1f0      	bne.n	8007bec <quorem+0xf0>
 8007c0a:	3c01      	subs	r4, #1
 8007c0c:	e7eb      	b.n	8007be6 <quorem+0xea>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e7ee      	b.n	8007bf0 <quorem+0xf4>
 8007c12:	0000      	movs	r0, r0
 8007c14:	0000      	movs	r0, r0
	...

08007c18 <_dtoa_r>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	ed2d 8b04 	vpush	{d8-d9}
 8007c20:	ec57 6b10 	vmov	r6, r7, d0
 8007c24:	b093      	sub	sp, #76	; 0x4c
 8007c26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c2c:	9106      	str	r1, [sp, #24]
 8007c2e:	ee10 aa10 	vmov	sl, s0
 8007c32:	4604      	mov	r4, r0
 8007c34:	9209      	str	r2, [sp, #36]	; 0x24
 8007c36:	930c      	str	r3, [sp, #48]	; 0x30
 8007c38:	46bb      	mov	fp, r7
 8007c3a:	b975      	cbnz	r5, 8007c5a <_dtoa_r+0x42>
 8007c3c:	2010      	movs	r0, #16
 8007c3e:	f000 fddd 	bl	80087fc <malloc>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6260      	str	r0, [r4, #36]	; 0x24
 8007c46:	b920      	cbnz	r0, 8007c52 <_dtoa_r+0x3a>
 8007c48:	4ba7      	ldr	r3, [pc, #668]	; (8007ee8 <_dtoa_r+0x2d0>)
 8007c4a:	21ea      	movs	r1, #234	; 0xea
 8007c4c:	48a7      	ldr	r0, [pc, #668]	; (8007eec <_dtoa_r+0x2d4>)
 8007c4e:	f001 fbd1 	bl	80093f4 <__assert_func>
 8007c52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c56:	6005      	str	r5, [r0, #0]
 8007c58:	60c5      	str	r5, [r0, #12]
 8007c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	b151      	cbz	r1, 8007c76 <_dtoa_r+0x5e>
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	604a      	str	r2, [r1, #4]
 8007c64:	2301      	movs	r3, #1
 8007c66:	4093      	lsls	r3, r2
 8007c68:	608b      	str	r3, [r1, #8]
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 fe1c 	bl	80088a8 <_Bfree>
 8007c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	1e3b      	subs	r3, r7, #0
 8007c78:	bfaa      	itet	ge
 8007c7a:	2300      	movge	r3, #0
 8007c7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c80:	f8c8 3000 	strge.w	r3, [r8]
 8007c84:	4b9a      	ldr	r3, [pc, #616]	; (8007ef0 <_dtoa_r+0x2d8>)
 8007c86:	bfbc      	itt	lt
 8007c88:	2201      	movlt	r2, #1
 8007c8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c8e:	ea33 030b 	bics.w	r3, r3, fp
 8007c92:	d11b      	bne.n	8007ccc <_dtoa_r+0xb4>
 8007c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ca0:	4333      	orrs	r3, r6
 8007ca2:	f000 8592 	beq.w	80087ca <_dtoa_r+0xbb2>
 8007ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca8:	b963      	cbnz	r3, 8007cc4 <_dtoa_r+0xac>
 8007caa:	4b92      	ldr	r3, [pc, #584]	; (8007ef4 <_dtoa_r+0x2dc>)
 8007cac:	e022      	b.n	8007cf4 <_dtoa_r+0xdc>
 8007cae:	4b92      	ldr	r3, [pc, #584]	; (8007ef8 <_dtoa_r+0x2e0>)
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	9801      	ldr	r0, [sp, #4]
 8007cba:	b013      	add	sp, #76	; 0x4c
 8007cbc:	ecbd 8b04 	vpop	{d8-d9}
 8007cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc4:	4b8b      	ldr	r3, [pc, #556]	; (8007ef4 <_dtoa_r+0x2dc>)
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	3303      	adds	r3, #3
 8007cca:	e7f3      	b.n	8007cb4 <_dtoa_r+0x9c>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	f7f8 ff18 	bl	8000b08 <__aeabi_dcmpeq>
 8007cd8:	ec4b ab19 	vmov	d9, sl, fp
 8007cdc:	4680      	mov	r8, r0
 8007cde:	b158      	cbz	r0, 8007cf8 <_dtoa_r+0xe0>
 8007ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 856b 	beq.w	80087c4 <_dtoa_r+0xbac>
 8007cee:	4883      	ldr	r0, [pc, #524]	; (8007efc <_dtoa_r+0x2e4>)
 8007cf0:	6018      	str	r0, [r3, #0]
 8007cf2:	1e43      	subs	r3, r0, #1
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	e7df      	b.n	8007cb8 <_dtoa_r+0xa0>
 8007cf8:	ec4b ab10 	vmov	d0, sl, fp
 8007cfc:	aa10      	add	r2, sp, #64	; 0x40
 8007cfe:	a911      	add	r1, sp, #68	; 0x44
 8007d00:	4620      	mov	r0, r4
 8007d02:	f001 f8b9 	bl	8008e78 <__d2b>
 8007d06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d0a:	ee08 0a10 	vmov	s16, r0
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	f000 8084 	beq.w	8007e1c <_dtoa_r+0x204>
 8007d14:	ee19 3a90 	vmov	r3, s19
 8007d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d20:	4656      	mov	r6, sl
 8007d22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007d2e:	4b74      	ldr	r3, [pc, #464]	; (8007f00 <_dtoa_r+0x2e8>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 fac7 	bl	80002c8 <__aeabi_dsub>
 8007d3a:	a365      	add	r3, pc, #404	; (adr r3, 8007ed0 <_dtoa_r+0x2b8>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fc7a 	bl	8000638 <__aeabi_dmul>
 8007d44:	a364      	add	r3, pc, #400	; (adr r3, 8007ed8 <_dtoa_r+0x2c0>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fabf 	bl	80002cc <__adddf3>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	4628      	mov	r0, r5
 8007d52:	460f      	mov	r7, r1
 8007d54:	f7f8 fc06 	bl	8000564 <__aeabi_i2d>
 8007d58:	a361      	add	r3, pc, #388	; (adr r3, 8007ee0 <_dtoa_r+0x2c8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fc6b 	bl	8000638 <__aeabi_dmul>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4630      	mov	r0, r6
 8007d68:	4639      	mov	r1, r7
 8007d6a:	f7f8 faaf 	bl	80002cc <__adddf3>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460f      	mov	r7, r1
 8007d72:	f7f8 ff11 	bl	8000b98 <__aeabi_d2iz>
 8007d76:	2200      	movs	r2, #0
 8007d78:	9000      	str	r0, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 fecc 	bl	8000b1c <__aeabi_dcmplt>
 8007d84:	b150      	cbz	r0, 8007d9c <_dtoa_r+0x184>
 8007d86:	9800      	ldr	r0, [sp, #0]
 8007d88:	f7f8 fbec 	bl	8000564 <__aeabi_i2d>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	463b      	mov	r3, r7
 8007d90:	f7f8 feba 	bl	8000b08 <__aeabi_dcmpeq>
 8007d94:	b910      	cbnz	r0, 8007d9c <_dtoa_r+0x184>
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	9b00      	ldr	r3, [sp, #0]
 8007d9e:	2b16      	cmp	r3, #22
 8007da0:	d85a      	bhi.n	8007e58 <_dtoa_r+0x240>
 8007da2:	9a00      	ldr	r2, [sp, #0]
 8007da4:	4b57      	ldr	r3, [pc, #348]	; (8007f04 <_dtoa_r+0x2ec>)
 8007da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	ec51 0b19 	vmov	r0, r1, d9
 8007db2:	f7f8 feb3 	bl	8000b1c <__aeabi_dcmplt>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d050      	beq.n	8007e5c <_dtoa_r+0x244>
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dc6:	1b5d      	subs	r5, r3, r5
 8007dc8:	1e6b      	subs	r3, r5, #1
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	bf45      	ittet	mi
 8007dce:	f1c5 0301 	rsbmi	r3, r5, #1
 8007dd2:	9304      	strmi	r3, [sp, #16]
 8007dd4:	2300      	movpl	r3, #0
 8007dd6:	2300      	movmi	r3, #0
 8007dd8:	bf4c      	ite	mi
 8007dda:	9305      	strmi	r3, [sp, #20]
 8007ddc:	9304      	strpl	r3, [sp, #16]
 8007dde:	9b00      	ldr	r3, [sp, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db3d      	blt.n	8007e60 <_dtoa_r+0x248>
 8007de4:	9b05      	ldr	r3, [sp, #20]
 8007de6:	9a00      	ldr	r2, [sp, #0]
 8007de8:	920a      	str	r2, [sp, #40]	; 0x28
 8007dea:	4413      	add	r3, r2
 8007dec:	9305      	str	r3, [sp, #20]
 8007dee:	2300      	movs	r3, #0
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	9b06      	ldr	r3, [sp, #24]
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	f200 8089 	bhi.w	8007f0c <_dtoa_r+0x2f4>
 8007dfa:	2b05      	cmp	r3, #5
 8007dfc:	bfc4      	itt	gt
 8007dfe:	3b04      	subgt	r3, #4
 8007e00:	9306      	strgt	r3, [sp, #24]
 8007e02:	9b06      	ldr	r3, [sp, #24]
 8007e04:	f1a3 0302 	sub.w	r3, r3, #2
 8007e08:	bfcc      	ite	gt
 8007e0a:	2500      	movgt	r5, #0
 8007e0c:	2501      	movle	r5, #1
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	f200 8087 	bhi.w	8007f22 <_dtoa_r+0x30a>
 8007e14:	e8df f003 	tbb	[pc, r3]
 8007e18:	59383a2d 	.word	0x59383a2d
 8007e1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e20:	441d      	add	r5, r3
 8007e22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	bfc1      	itttt	gt
 8007e2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e32:	fa0b f303 	lslgt.w	r3, fp, r3
 8007e36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e3a:	bfda      	itte	le
 8007e3c:	f1c3 0320 	rsble	r3, r3, #32
 8007e40:	fa06 f003 	lslle.w	r0, r6, r3
 8007e44:	4318      	orrgt	r0, r3
 8007e46:	f7f8 fb7d 	bl	8000544 <__aeabi_ui2d>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e52:	3d01      	subs	r5, #1
 8007e54:	930e      	str	r3, [sp, #56]	; 0x38
 8007e56:	e76a      	b.n	8007d2e <_dtoa_r+0x116>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e7b2      	b.n	8007dc2 <_dtoa_r+0x1aa>
 8007e5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e5e:	e7b1      	b.n	8007dc4 <_dtoa_r+0x1ac>
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	9a00      	ldr	r2, [sp, #0]
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	4253      	negs	r3, r2
 8007e6a:	9307      	str	r3, [sp, #28]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e70:	e7bf      	b.n	8007df2 <_dtoa_r+0x1da>
 8007e72:	2300      	movs	r3, #0
 8007e74:	9308      	str	r3, [sp, #32]
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dc55      	bgt.n	8007f28 <_dtoa_r+0x310>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e82:	461a      	mov	r2, r3
 8007e84:	9209      	str	r2, [sp, #36]	; 0x24
 8007e86:	e00c      	b.n	8007ea2 <_dtoa_r+0x28a>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e7f3      	b.n	8007e74 <_dtoa_r+0x25c>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	9303      	str	r3, [sp, #12]
 8007e9e:	bfb8      	it	lt
 8007ea0:	2301      	movlt	r3, #1
 8007ea2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	6042      	str	r2, [r0, #4]
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	f102 0614 	add.w	r6, r2, #20
 8007eae:	429e      	cmp	r6, r3
 8007eb0:	6841      	ldr	r1, [r0, #4]
 8007eb2:	d93d      	bls.n	8007f30 <_dtoa_r+0x318>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 fcb7 	bl	8008828 <_Balloc>
 8007eba:	9001      	str	r0, [sp, #4]
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d13b      	bne.n	8007f38 <_dtoa_r+0x320>
 8007ec0:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <_dtoa_r+0x2f0>)
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ec8:	e6c0      	b.n	8007c4c <_dtoa_r+0x34>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e7df      	b.n	8007e8e <_dtoa_r+0x276>
 8007ece:	bf00      	nop
 8007ed0:	636f4361 	.word	0x636f4361
 8007ed4:	3fd287a7 	.word	0x3fd287a7
 8007ed8:	8b60c8b3 	.word	0x8b60c8b3
 8007edc:	3fc68a28 	.word	0x3fc68a28
 8007ee0:	509f79fb 	.word	0x509f79fb
 8007ee4:	3fd34413 	.word	0x3fd34413
 8007ee8:	0800b529 	.word	0x0800b529
 8007eec:	0800b540 	.word	0x0800b540
 8007ef0:	7ff00000 	.word	0x7ff00000
 8007ef4:	0800b525 	.word	0x0800b525
 8007ef8:	0800b51c 	.word	0x0800b51c
 8007efc:	0800b4f9 	.word	0x0800b4f9
 8007f00:	3ff80000 	.word	0x3ff80000
 8007f04:	0800b630 	.word	0x0800b630
 8007f08:	0800b59b 	.word	0x0800b59b
 8007f0c:	2501      	movs	r5, #1
 8007f0e:	2300      	movs	r3, #0
 8007f10:	9306      	str	r3, [sp, #24]
 8007f12:	9508      	str	r5, [sp, #32]
 8007f14:	f04f 33ff 	mov.w	r3, #4294967295
 8007f18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2312      	movs	r3, #18
 8007f20:	e7b0      	b.n	8007e84 <_dtoa_r+0x26c>
 8007f22:	2301      	movs	r3, #1
 8007f24:	9308      	str	r3, [sp, #32]
 8007f26:	e7f5      	b.n	8007f14 <_dtoa_r+0x2fc>
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f2e:	e7b8      	b.n	8007ea2 <_dtoa_r+0x28a>
 8007f30:	3101      	adds	r1, #1
 8007f32:	6041      	str	r1, [r0, #4]
 8007f34:	0052      	lsls	r2, r2, #1
 8007f36:	e7b8      	b.n	8007eaa <_dtoa_r+0x292>
 8007f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f3a:	9a01      	ldr	r2, [sp, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	2b0e      	cmp	r3, #14
 8007f42:	f200 809d 	bhi.w	8008080 <_dtoa_r+0x468>
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	f000 809a 	beq.w	8008080 <_dtoa_r+0x468>
 8007f4c:	9b00      	ldr	r3, [sp, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd32      	ble.n	8007fb8 <_dtoa_r+0x3a0>
 8007f52:	4ab7      	ldr	r2, [pc, #732]	; (8008230 <_dtoa_r+0x618>)
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f60:	9b00      	ldr	r3, [sp, #0]
 8007f62:	05d8      	lsls	r0, r3, #23
 8007f64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f68:	d516      	bpl.n	8007f98 <_dtoa_r+0x380>
 8007f6a:	4bb2      	ldr	r3, [pc, #712]	; (8008234 <_dtoa_r+0x61c>)
 8007f6c:	ec51 0b19 	vmov	r0, r1, d9
 8007f70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f74:	f7f8 fc8a 	bl	800088c <__aeabi_ddiv>
 8007f78:	f007 070f 	and.w	r7, r7, #15
 8007f7c:	4682      	mov	sl, r0
 8007f7e:	468b      	mov	fp, r1
 8007f80:	2503      	movs	r5, #3
 8007f82:	4eac      	ldr	r6, [pc, #688]	; (8008234 <_dtoa_r+0x61c>)
 8007f84:	b957      	cbnz	r7, 8007f9c <_dtoa_r+0x384>
 8007f86:	4642      	mov	r2, r8
 8007f88:	464b      	mov	r3, r9
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	f7f8 fc7d 	bl	800088c <__aeabi_ddiv>
 8007f92:	4682      	mov	sl, r0
 8007f94:	468b      	mov	fp, r1
 8007f96:	e028      	b.n	8007fea <_dtoa_r+0x3d2>
 8007f98:	2502      	movs	r5, #2
 8007f9a:	e7f2      	b.n	8007f82 <_dtoa_r+0x36a>
 8007f9c:	07f9      	lsls	r1, r7, #31
 8007f9e:	d508      	bpl.n	8007fb2 <_dtoa_r+0x39a>
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fa8:	f7f8 fb46 	bl	8000638 <__aeabi_dmul>
 8007fac:	3501      	adds	r5, #1
 8007fae:	4680      	mov	r8, r0
 8007fb0:	4689      	mov	r9, r1
 8007fb2:	107f      	asrs	r7, r7, #1
 8007fb4:	3608      	adds	r6, #8
 8007fb6:	e7e5      	b.n	8007f84 <_dtoa_r+0x36c>
 8007fb8:	f000 809b 	beq.w	80080f2 <_dtoa_r+0x4da>
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	4f9d      	ldr	r7, [pc, #628]	; (8008234 <_dtoa_r+0x61c>)
 8007fc0:	425e      	negs	r6, r3
 8007fc2:	4b9b      	ldr	r3, [pc, #620]	; (8008230 <_dtoa_r+0x618>)
 8007fc4:	f006 020f 	and.w	r2, r6, #15
 8007fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	ec51 0b19 	vmov	r0, r1, d9
 8007fd4:	f7f8 fb30 	bl	8000638 <__aeabi_dmul>
 8007fd8:	1136      	asrs	r6, r6, #4
 8007fda:	4682      	mov	sl, r0
 8007fdc:	468b      	mov	fp, r1
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2502      	movs	r5, #2
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	d17a      	bne.n	80080dc <_dtoa_r+0x4c4>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1d3      	bne.n	8007f92 <_dtoa_r+0x37a>
 8007fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8082 	beq.w	80080f6 <_dtoa_r+0x4de>
 8007ff2:	4b91      	ldr	r3, [pc, #580]	; (8008238 <_dtoa_r+0x620>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	f7f8 fd8f 	bl	8000b1c <__aeabi_dcmplt>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d079      	beq.n	80080f6 <_dtoa_r+0x4de>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d076      	beq.n	80080f6 <_dtoa_r+0x4de>
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd36      	ble.n	800807c <_dtoa_r+0x464>
 800800e:	9b00      	ldr	r3, [sp, #0]
 8008010:	4650      	mov	r0, sl
 8008012:	4659      	mov	r1, fp
 8008014:	1e5f      	subs	r7, r3, #1
 8008016:	2200      	movs	r2, #0
 8008018:	4b88      	ldr	r3, [pc, #544]	; (800823c <_dtoa_r+0x624>)
 800801a:	f7f8 fb0d 	bl	8000638 <__aeabi_dmul>
 800801e:	9e02      	ldr	r6, [sp, #8]
 8008020:	4682      	mov	sl, r0
 8008022:	468b      	mov	fp, r1
 8008024:	3501      	adds	r5, #1
 8008026:	4628      	mov	r0, r5
 8008028:	f7f8 fa9c 	bl	8000564 <__aeabi_i2d>
 800802c:	4652      	mov	r2, sl
 800802e:	465b      	mov	r3, fp
 8008030:	f7f8 fb02 	bl	8000638 <__aeabi_dmul>
 8008034:	4b82      	ldr	r3, [pc, #520]	; (8008240 <_dtoa_r+0x628>)
 8008036:	2200      	movs	r2, #0
 8008038:	f7f8 f948 	bl	80002cc <__adddf3>
 800803c:	46d0      	mov	r8, sl
 800803e:	46d9      	mov	r9, fp
 8008040:	4682      	mov	sl, r0
 8008042:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008046:	2e00      	cmp	r6, #0
 8008048:	d158      	bne.n	80080fc <_dtoa_r+0x4e4>
 800804a:	4b7e      	ldr	r3, [pc, #504]	; (8008244 <_dtoa_r+0x62c>)
 800804c:	2200      	movs	r2, #0
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	f7f8 f939 	bl	80002c8 <__aeabi_dsub>
 8008056:	4652      	mov	r2, sl
 8008058:	465b      	mov	r3, fp
 800805a:	4680      	mov	r8, r0
 800805c:	4689      	mov	r9, r1
 800805e:	f7f8 fd7b 	bl	8000b58 <__aeabi_dcmpgt>
 8008062:	2800      	cmp	r0, #0
 8008064:	f040 8295 	bne.w	8008592 <_dtoa_r+0x97a>
 8008068:	4652      	mov	r2, sl
 800806a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 fd53 	bl	8000b1c <__aeabi_dcmplt>
 8008076:	2800      	cmp	r0, #0
 8008078:	f040 8289 	bne.w	800858e <_dtoa_r+0x976>
 800807c:	ec5b ab19 	vmov	sl, fp, d9
 8008080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008082:	2b00      	cmp	r3, #0
 8008084:	f2c0 8148 	blt.w	8008318 <_dtoa_r+0x700>
 8008088:	9a00      	ldr	r2, [sp, #0]
 800808a:	2a0e      	cmp	r2, #14
 800808c:	f300 8144 	bgt.w	8008318 <_dtoa_r+0x700>
 8008090:	4b67      	ldr	r3, [pc, #412]	; (8008230 <_dtoa_r+0x618>)
 8008092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008096:	e9d3 8900 	ldrd	r8, r9, [r3]
 800809a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809c:	2b00      	cmp	r3, #0
 800809e:	f280 80d5 	bge.w	800824c <_dtoa_r+0x634>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f300 80d1 	bgt.w	800824c <_dtoa_r+0x634>
 80080aa:	f040 826f 	bne.w	800858c <_dtoa_r+0x974>
 80080ae:	4b65      	ldr	r3, [pc, #404]	; (8008244 <_dtoa_r+0x62c>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	4640      	mov	r0, r8
 80080b4:	4649      	mov	r1, r9
 80080b6:	f7f8 fabf 	bl	8000638 <__aeabi_dmul>
 80080ba:	4652      	mov	r2, sl
 80080bc:	465b      	mov	r3, fp
 80080be:	f7f8 fd41 	bl	8000b44 <__aeabi_dcmpge>
 80080c2:	9e03      	ldr	r6, [sp, #12]
 80080c4:	4637      	mov	r7, r6
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f040 8245 	bne.w	8008556 <_dtoa_r+0x93e>
 80080cc:	9d01      	ldr	r5, [sp, #4]
 80080ce:	2331      	movs	r3, #49	; 0x31
 80080d0:	f805 3b01 	strb.w	r3, [r5], #1
 80080d4:	9b00      	ldr	r3, [sp, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	e240      	b.n	800855e <_dtoa_r+0x946>
 80080dc:	07f2      	lsls	r2, r6, #31
 80080de:	d505      	bpl.n	80080ec <_dtoa_r+0x4d4>
 80080e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e4:	f7f8 faa8 	bl	8000638 <__aeabi_dmul>
 80080e8:	3501      	adds	r5, #1
 80080ea:	2301      	movs	r3, #1
 80080ec:	1076      	asrs	r6, r6, #1
 80080ee:	3708      	adds	r7, #8
 80080f0:	e777      	b.n	8007fe2 <_dtoa_r+0x3ca>
 80080f2:	2502      	movs	r5, #2
 80080f4:	e779      	b.n	8007fea <_dtoa_r+0x3d2>
 80080f6:	9f00      	ldr	r7, [sp, #0]
 80080f8:	9e03      	ldr	r6, [sp, #12]
 80080fa:	e794      	b.n	8008026 <_dtoa_r+0x40e>
 80080fc:	9901      	ldr	r1, [sp, #4]
 80080fe:	4b4c      	ldr	r3, [pc, #304]	; (8008230 <_dtoa_r+0x618>)
 8008100:	4431      	add	r1, r6
 8008102:	910d      	str	r1, [sp, #52]	; 0x34
 8008104:	9908      	ldr	r1, [sp, #32]
 8008106:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800810a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800810e:	2900      	cmp	r1, #0
 8008110:	d043      	beq.n	800819a <_dtoa_r+0x582>
 8008112:	494d      	ldr	r1, [pc, #308]	; (8008248 <_dtoa_r+0x630>)
 8008114:	2000      	movs	r0, #0
 8008116:	f7f8 fbb9 	bl	800088c <__aeabi_ddiv>
 800811a:	4652      	mov	r2, sl
 800811c:	465b      	mov	r3, fp
 800811e:	f7f8 f8d3 	bl	80002c8 <__aeabi_dsub>
 8008122:	9d01      	ldr	r5, [sp, #4]
 8008124:	4682      	mov	sl, r0
 8008126:	468b      	mov	fp, r1
 8008128:	4649      	mov	r1, r9
 800812a:	4640      	mov	r0, r8
 800812c:	f7f8 fd34 	bl	8000b98 <__aeabi_d2iz>
 8008130:	4606      	mov	r6, r0
 8008132:	f7f8 fa17 	bl	8000564 <__aeabi_i2d>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4640      	mov	r0, r8
 800813c:	4649      	mov	r1, r9
 800813e:	f7f8 f8c3 	bl	80002c8 <__aeabi_dsub>
 8008142:	3630      	adds	r6, #48	; 0x30
 8008144:	f805 6b01 	strb.w	r6, [r5], #1
 8008148:	4652      	mov	r2, sl
 800814a:	465b      	mov	r3, fp
 800814c:	4680      	mov	r8, r0
 800814e:	4689      	mov	r9, r1
 8008150:	f7f8 fce4 	bl	8000b1c <__aeabi_dcmplt>
 8008154:	2800      	cmp	r0, #0
 8008156:	d163      	bne.n	8008220 <_dtoa_r+0x608>
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	4936      	ldr	r1, [pc, #216]	; (8008238 <_dtoa_r+0x620>)
 800815e:	2000      	movs	r0, #0
 8008160:	f7f8 f8b2 	bl	80002c8 <__aeabi_dsub>
 8008164:	4652      	mov	r2, sl
 8008166:	465b      	mov	r3, fp
 8008168:	f7f8 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	f040 80b5 	bne.w	80082dc <_dtoa_r+0x6c4>
 8008172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008174:	429d      	cmp	r5, r3
 8008176:	d081      	beq.n	800807c <_dtoa_r+0x464>
 8008178:	4b30      	ldr	r3, [pc, #192]	; (800823c <_dtoa_r+0x624>)
 800817a:	2200      	movs	r2, #0
 800817c:	4650      	mov	r0, sl
 800817e:	4659      	mov	r1, fp
 8008180:	f7f8 fa5a 	bl	8000638 <__aeabi_dmul>
 8008184:	4b2d      	ldr	r3, [pc, #180]	; (800823c <_dtoa_r+0x624>)
 8008186:	4682      	mov	sl, r0
 8008188:	468b      	mov	fp, r1
 800818a:	4640      	mov	r0, r8
 800818c:	4649      	mov	r1, r9
 800818e:	2200      	movs	r2, #0
 8008190:	f7f8 fa52 	bl	8000638 <__aeabi_dmul>
 8008194:	4680      	mov	r8, r0
 8008196:	4689      	mov	r9, r1
 8008198:	e7c6      	b.n	8008128 <_dtoa_r+0x510>
 800819a:	4650      	mov	r0, sl
 800819c:	4659      	mov	r1, fp
 800819e:	f7f8 fa4b 	bl	8000638 <__aeabi_dmul>
 80081a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081a4:	9d01      	ldr	r5, [sp, #4]
 80081a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081a8:	4682      	mov	sl, r0
 80081aa:	468b      	mov	fp, r1
 80081ac:	4649      	mov	r1, r9
 80081ae:	4640      	mov	r0, r8
 80081b0:	f7f8 fcf2 	bl	8000b98 <__aeabi_d2iz>
 80081b4:	4606      	mov	r6, r0
 80081b6:	f7f8 f9d5 	bl	8000564 <__aeabi_i2d>
 80081ba:	3630      	adds	r6, #48	; 0x30
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4640      	mov	r0, r8
 80081c2:	4649      	mov	r1, r9
 80081c4:	f7f8 f880 	bl	80002c8 <__aeabi_dsub>
 80081c8:	f805 6b01 	strb.w	r6, [r5], #1
 80081cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ce:	429d      	cmp	r5, r3
 80081d0:	4680      	mov	r8, r0
 80081d2:	4689      	mov	r9, r1
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	d124      	bne.n	8008224 <_dtoa_r+0x60c>
 80081da:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <_dtoa_r+0x630>)
 80081dc:	4650      	mov	r0, sl
 80081de:	4659      	mov	r1, fp
 80081e0:	f7f8 f874 	bl	80002cc <__adddf3>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4640      	mov	r0, r8
 80081ea:	4649      	mov	r1, r9
 80081ec:	f7f8 fcb4 	bl	8000b58 <__aeabi_dcmpgt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d173      	bne.n	80082dc <_dtoa_r+0x6c4>
 80081f4:	4652      	mov	r2, sl
 80081f6:	465b      	mov	r3, fp
 80081f8:	4913      	ldr	r1, [pc, #76]	; (8008248 <_dtoa_r+0x630>)
 80081fa:	2000      	movs	r0, #0
 80081fc:	f7f8 f864 	bl	80002c8 <__aeabi_dsub>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f43f af35 	beq.w	800807c <_dtoa_r+0x464>
 8008212:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008214:	1e6b      	subs	r3, r5, #1
 8008216:	930f      	str	r3, [sp, #60]	; 0x3c
 8008218:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800821c:	2b30      	cmp	r3, #48	; 0x30
 800821e:	d0f8      	beq.n	8008212 <_dtoa_r+0x5fa>
 8008220:	9700      	str	r7, [sp, #0]
 8008222:	e049      	b.n	80082b8 <_dtoa_r+0x6a0>
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <_dtoa_r+0x624>)
 8008226:	f7f8 fa07 	bl	8000638 <__aeabi_dmul>
 800822a:	4680      	mov	r8, r0
 800822c:	4689      	mov	r9, r1
 800822e:	e7bd      	b.n	80081ac <_dtoa_r+0x594>
 8008230:	0800b630 	.word	0x0800b630
 8008234:	0800b608 	.word	0x0800b608
 8008238:	3ff00000 	.word	0x3ff00000
 800823c:	40240000 	.word	0x40240000
 8008240:	401c0000 	.word	0x401c0000
 8008244:	40140000 	.word	0x40140000
 8008248:	3fe00000 	.word	0x3fe00000
 800824c:	9d01      	ldr	r5, [sp, #4]
 800824e:	4656      	mov	r6, sl
 8008250:	465f      	mov	r7, fp
 8008252:	4642      	mov	r2, r8
 8008254:	464b      	mov	r3, r9
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 fb17 	bl	800088c <__aeabi_ddiv>
 800825e:	f7f8 fc9b 	bl	8000b98 <__aeabi_d2iz>
 8008262:	4682      	mov	sl, r0
 8008264:	f7f8 f97e 	bl	8000564 <__aeabi_i2d>
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	f7f8 f9e4 	bl	8000638 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800827c:	f7f8 f824 	bl	80002c8 <__aeabi_dsub>
 8008280:	f805 6b01 	strb.w	r6, [r5], #1
 8008284:	9e01      	ldr	r6, [sp, #4]
 8008286:	9f03      	ldr	r7, [sp, #12]
 8008288:	1bae      	subs	r6, r5, r6
 800828a:	42b7      	cmp	r7, r6
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	d135      	bne.n	80082fe <_dtoa_r+0x6e6>
 8008292:	f7f8 f81b 	bl	80002cc <__adddf3>
 8008296:	4642      	mov	r2, r8
 8008298:	464b      	mov	r3, r9
 800829a:	4606      	mov	r6, r0
 800829c:	460f      	mov	r7, r1
 800829e:	f7f8 fc5b 	bl	8000b58 <__aeabi_dcmpgt>
 80082a2:	b9d0      	cbnz	r0, 80082da <_dtoa_r+0x6c2>
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f8 fc2c 	bl	8000b08 <__aeabi_dcmpeq>
 80082b0:	b110      	cbz	r0, 80082b8 <_dtoa_r+0x6a0>
 80082b2:	f01a 0f01 	tst.w	sl, #1
 80082b6:	d110      	bne.n	80082da <_dtoa_r+0x6c2>
 80082b8:	4620      	mov	r0, r4
 80082ba:	ee18 1a10 	vmov	r1, s16
 80082be:	f000 faf3 	bl	80088a8 <_Bfree>
 80082c2:	2300      	movs	r3, #0
 80082c4:	9800      	ldr	r0, [sp, #0]
 80082c6:	702b      	strb	r3, [r5, #0]
 80082c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ca:	3001      	adds	r0, #1
 80082cc:	6018      	str	r0, [r3, #0]
 80082ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f43f acf1 	beq.w	8007cb8 <_dtoa_r+0xa0>
 80082d6:	601d      	str	r5, [r3, #0]
 80082d8:	e4ee      	b.n	8007cb8 <_dtoa_r+0xa0>
 80082da:	9f00      	ldr	r7, [sp, #0]
 80082dc:	462b      	mov	r3, r5
 80082de:	461d      	mov	r5, r3
 80082e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e4:	2a39      	cmp	r2, #57	; 0x39
 80082e6:	d106      	bne.n	80082f6 <_dtoa_r+0x6de>
 80082e8:	9a01      	ldr	r2, [sp, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d1f7      	bne.n	80082de <_dtoa_r+0x6c6>
 80082ee:	9901      	ldr	r1, [sp, #4]
 80082f0:	2230      	movs	r2, #48	; 0x30
 80082f2:	3701      	adds	r7, #1
 80082f4:	700a      	strb	r2, [r1, #0]
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	3201      	adds	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e790      	b.n	8008220 <_dtoa_r+0x608>
 80082fe:	4ba6      	ldr	r3, [pc, #664]	; (8008598 <_dtoa_r+0x980>)
 8008300:	2200      	movs	r2, #0
 8008302:	f7f8 f999 	bl	8000638 <__aeabi_dmul>
 8008306:	2200      	movs	r2, #0
 8008308:	2300      	movs	r3, #0
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	f7f8 fbfb 	bl	8000b08 <__aeabi_dcmpeq>
 8008312:	2800      	cmp	r0, #0
 8008314:	d09d      	beq.n	8008252 <_dtoa_r+0x63a>
 8008316:	e7cf      	b.n	80082b8 <_dtoa_r+0x6a0>
 8008318:	9a08      	ldr	r2, [sp, #32]
 800831a:	2a00      	cmp	r2, #0
 800831c:	f000 80d7 	beq.w	80084ce <_dtoa_r+0x8b6>
 8008320:	9a06      	ldr	r2, [sp, #24]
 8008322:	2a01      	cmp	r2, #1
 8008324:	f300 80ba 	bgt.w	800849c <_dtoa_r+0x884>
 8008328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800832a:	2a00      	cmp	r2, #0
 800832c:	f000 80b2 	beq.w	8008494 <_dtoa_r+0x87c>
 8008330:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008334:	9e07      	ldr	r6, [sp, #28]
 8008336:	9d04      	ldr	r5, [sp, #16]
 8008338:	9a04      	ldr	r2, [sp, #16]
 800833a:	441a      	add	r2, r3
 800833c:	9204      	str	r2, [sp, #16]
 800833e:	9a05      	ldr	r2, [sp, #20]
 8008340:	2101      	movs	r1, #1
 8008342:	441a      	add	r2, r3
 8008344:	4620      	mov	r0, r4
 8008346:	9205      	str	r2, [sp, #20]
 8008348:	f000 fb66 	bl	8008a18 <__i2b>
 800834c:	4607      	mov	r7, r0
 800834e:	2d00      	cmp	r5, #0
 8008350:	dd0c      	ble.n	800836c <_dtoa_r+0x754>
 8008352:	9b05      	ldr	r3, [sp, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd09      	ble.n	800836c <_dtoa_r+0x754>
 8008358:	42ab      	cmp	r3, r5
 800835a:	9a04      	ldr	r2, [sp, #16]
 800835c:	bfa8      	it	ge
 800835e:	462b      	movge	r3, r5
 8008360:	1ad2      	subs	r2, r2, r3
 8008362:	9204      	str	r2, [sp, #16]
 8008364:	9a05      	ldr	r2, [sp, #20]
 8008366:	1aed      	subs	r5, r5, r3
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	9305      	str	r3, [sp, #20]
 800836c:	9b07      	ldr	r3, [sp, #28]
 800836e:	b31b      	cbz	r3, 80083b8 <_dtoa_r+0x7a0>
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80af 	beq.w	80084d6 <_dtoa_r+0x8be>
 8008378:	2e00      	cmp	r6, #0
 800837a:	dd13      	ble.n	80083a4 <_dtoa_r+0x78c>
 800837c:	4639      	mov	r1, r7
 800837e:	4632      	mov	r2, r6
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fc09 	bl	8008b98 <__pow5mult>
 8008386:	ee18 2a10 	vmov	r2, s16
 800838a:	4601      	mov	r1, r0
 800838c:	4607      	mov	r7, r0
 800838e:	4620      	mov	r0, r4
 8008390:	f000 fb58 	bl	8008a44 <__multiply>
 8008394:	ee18 1a10 	vmov	r1, s16
 8008398:	4680      	mov	r8, r0
 800839a:	4620      	mov	r0, r4
 800839c:	f000 fa84 	bl	80088a8 <_Bfree>
 80083a0:	ee08 8a10 	vmov	s16, r8
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	1b9a      	subs	r2, r3, r6
 80083a8:	d006      	beq.n	80083b8 <_dtoa_r+0x7a0>
 80083aa:	ee18 1a10 	vmov	r1, s16
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 fbf2 	bl	8008b98 <__pow5mult>
 80083b4:	ee08 0a10 	vmov	s16, r0
 80083b8:	2101      	movs	r1, #1
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 fb2c 	bl	8008a18 <__i2b>
 80083c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	4606      	mov	r6, r0
 80083c6:	f340 8088 	ble.w	80084da <_dtoa_r+0x8c2>
 80083ca:	461a      	mov	r2, r3
 80083cc:	4601      	mov	r1, r0
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 fbe2 	bl	8008b98 <__pow5mult>
 80083d4:	9b06      	ldr	r3, [sp, #24]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	4606      	mov	r6, r0
 80083da:	f340 8081 	ble.w	80084e0 <_dtoa_r+0x8c8>
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	6933      	ldr	r3, [r6, #16]
 80083e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083e8:	6918      	ldr	r0, [r3, #16]
 80083ea:	f000 fac5 	bl	8008978 <__hi0bits>
 80083ee:	f1c0 0020 	rsb	r0, r0, #32
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	4418      	add	r0, r3
 80083f6:	f010 001f 	ands.w	r0, r0, #31
 80083fa:	f000 8092 	beq.w	8008522 <_dtoa_r+0x90a>
 80083fe:	f1c0 0320 	rsb	r3, r0, #32
 8008402:	2b04      	cmp	r3, #4
 8008404:	f340 808a 	ble.w	800851c <_dtoa_r+0x904>
 8008408:	f1c0 001c 	rsb	r0, r0, #28
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	4403      	add	r3, r0
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	9b05      	ldr	r3, [sp, #20]
 8008414:	4403      	add	r3, r0
 8008416:	4405      	add	r5, r0
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	9b04      	ldr	r3, [sp, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd07      	ble.n	8008430 <_dtoa_r+0x818>
 8008420:	ee18 1a10 	vmov	r1, s16
 8008424:	461a      	mov	r2, r3
 8008426:	4620      	mov	r0, r4
 8008428:	f000 fc10 	bl	8008c4c <__lshift>
 800842c:	ee08 0a10 	vmov	s16, r0
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	dd05      	ble.n	8008442 <_dtoa_r+0x82a>
 8008436:	4631      	mov	r1, r6
 8008438:	461a      	mov	r2, r3
 800843a:	4620      	mov	r0, r4
 800843c:	f000 fc06 	bl	8008c4c <__lshift>
 8008440:	4606      	mov	r6, r0
 8008442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d06e      	beq.n	8008526 <_dtoa_r+0x90e>
 8008448:	ee18 0a10 	vmov	r0, s16
 800844c:	4631      	mov	r1, r6
 800844e:	f000 fc6d 	bl	8008d2c <__mcmp>
 8008452:	2800      	cmp	r0, #0
 8008454:	da67      	bge.n	8008526 <_dtoa_r+0x90e>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	3b01      	subs	r3, #1
 800845a:	ee18 1a10 	vmov	r1, s16
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	220a      	movs	r2, #10
 8008462:	2300      	movs	r3, #0
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fa41 	bl	80088ec <__multadd>
 800846a:	9b08      	ldr	r3, [sp, #32]
 800846c:	ee08 0a10 	vmov	s16, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 81b1 	beq.w	80087d8 <_dtoa_r+0xbc0>
 8008476:	2300      	movs	r3, #0
 8008478:	4639      	mov	r1, r7
 800847a:	220a      	movs	r2, #10
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fa35 	bl	80088ec <__multadd>
 8008482:	9b02      	ldr	r3, [sp, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	4607      	mov	r7, r0
 8008488:	f300 808e 	bgt.w	80085a8 <_dtoa_r+0x990>
 800848c:	9b06      	ldr	r3, [sp, #24]
 800848e:	2b02      	cmp	r3, #2
 8008490:	dc51      	bgt.n	8008536 <_dtoa_r+0x91e>
 8008492:	e089      	b.n	80085a8 <_dtoa_r+0x990>
 8008494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800849a:	e74b      	b.n	8008334 <_dtoa_r+0x71c>
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	1e5e      	subs	r6, r3, #1
 80084a0:	9b07      	ldr	r3, [sp, #28]
 80084a2:	42b3      	cmp	r3, r6
 80084a4:	bfbf      	itttt	lt
 80084a6:	9b07      	ldrlt	r3, [sp, #28]
 80084a8:	9607      	strlt	r6, [sp, #28]
 80084aa:	1af2      	sublt	r2, r6, r3
 80084ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084ae:	bfb6      	itet	lt
 80084b0:	189b      	addlt	r3, r3, r2
 80084b2:	1b9e      	subge	r6, r3, r6
 80084b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	bfb8      	it	lt
 80084ba:	2600      	movlt	r6, #0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfb7      	itett	lt
 80084c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80084c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80084c8:	1a9d      	sublt	r5, r3, r2
 80084ca:	2300      	movlt	r3, #0
 80084cc:	e734      	b.n	8008338 <_dtoa_r+0x720>
 80084ce:	9e07      	ldr	r6, [sp, #28]
 80084d0:	9d04      	ldr	r5, [sp, #16]
 80084d2:	9f08      	ldr	r7, [sp, #32]
 80084d4:	e73b      	b.n	800834e <_dtoa_r+0x736>
 80084d6:	9a07      	ldr	r2, [sp, #28]
 80084d8:	e767      	b.n	80083aa <_dtoa_r+0x792>
 80084da:	9b06      	ldr	r3, [sp, #24]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	dc18      	bgt.n	8008512 <_dtoa_r+0x8fa>
 80084e0:	f1ba 0f00 	cmp.w	sl, #0
 80084e4:	d115      	bne.n	8008512 <_dtoa_r+0x8fa>
 80084e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084ea:	b993      	cbnz	r3, 8008512 <_dtoa_r+0x8fa>
 80084ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084f0:	0d1b      	lsrs	r3, r3, #20
 80084f2:	051b      	lsls	r3, r3, #20
 80084f4:	b183      	cbz	r3, 8008518 <_dtoa_r+0x900>
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	3301      	adds	r3, #1
 80084fa:	9304      	str	r3, [sp, #16]
 80084fc:	9b05      	ldr	r3, [sp, #20]
 80084fe:	3301      	adds	r3, #1
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	f04f 0801 	mov.w	r8, #1
 8008506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008508:	2b00      	cmp	r3, #0
 800850a:	f47f af6a 	bne.w	80083e2 <_dtoa_r+0x7ca>
 800850e:	2001      	movs	r0, #1
 8008510:	e76f      	b.n	80083f2 <_dtoa_r+0x7da>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	e7f6      	b.n	8008506 <_dtoa_r+0x8ee>
 8008518:	4698      	mov	r8, r3
 800851a:	e7f4      	b.n	8008506 <_dtoa_r+0x8ee>
 800851c:	f43f af7d 	beq.w	800841a <_dtoa_r+0x802>
 8008520:	4618      	mov	r0, r3
 8008522:	301c      	adds	r0, #28
 8008524:	e772      	b.n	800840c <_dtoa_r+0x7f4>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc37      	bgt.n	800859c <_dtoa_r+0x984>
 800852c:	9b06      	ldr	r3, [sp, #24]
 800852e:	2b02      	cmp	r3, #2
 8008530:	dd34      	ble.n	800859c <_dtoa_r+0x984>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	9302      	str	r3, [sp, #8]
 8008536:	9b02      	ldr	r3, [sp, #8]
 8008538:	b96b      	cbnz	r3, 8008556 <_dtoa_r+0x93e>
 800853a:	4631      	mov	r1, r6
 800853c:	2205      	movs	r2, #5
 800853e:	4620      	mov	r0, r4
 8008540:	f000 f9d4 	bl	80088ec <__multadd>
 8008544:	4601      	mov	r1, r0
 8008546:	4606      	mov	r6, r0
 8008548:	ee18 0a10 	vmov	r0, s16
 800854c:	f000 fbee 	bl	8008d2c <__mcmp>
 8008550:	2800      	cmp	r0, #0
 8008552:	f73f adbb 	bgt.w	80080cc <_dtoa_r+0x4b4>
 8008556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008558:	9d01      	ldr	r5, [sp, #4]
 800855a:	43db      	mvns	r3, r3
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	f04f 0800 	mov.w	r8, #0
 8008562:	4631      	mov	r1, r6
 8008564:	4620      	mov	r0, r4
 8008566:	f000 f99f 	bl	80088a8 <_Bfree>
 800856a:	2f00      	cmp	r7, #0
 800856c:	f43f aea4 	beq.w	80082b8 <_dtoa_r+0x6a0>
 8008570:	f1b8 0f00 	cmp.w	r8, #0
 8008574:	d005      	beq.n	8008582 <_dtoa_r+0x96a>
 8008576:	45b8      	cmp	r8, r7
 8008578:	d003      	beq.n	8008582 <_dtoa_r+0x96a>
 800857a:	4641      	mov	r1, r8
 800857c:	4620      	mov	r0, r4
 800857e:	f000 f993 	bl	80088a8 <_Bfree>
 8008582:	4639      	mov	r1, r7
 8008584:	4620      	mov	r0, r4
 8008586:	f000 f98f 	bl	80088a8 <_Bfree>
 800858a:	e695      	b.n	80082b8 <_dtoa_r+0x6a0>
 800858c:	2600      	movs	r6, #0
 800858e:	4637      	mov	r7, r6
 8008590:	e7e1      	b.n	8008556 <_dtoa_r+0x93e>
 8008592:	9700      	str	r7, [sp, #0]
 8008594:	4637      	mov	r7, r6
 8008596:	e599      	b.n	80080cc <_dtoa_r+0x4b4>
 8008598:	40240000 	.word	0x40240000
 800859c:	9b08      	ldr	r3, [sp, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 80ca 	beq.w	8008738 <_dtoa_r+0xb20>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	dd05      	ble.n	80085b8 <_dtoa_r+0x9a0>
 80085ac:	4639      	mov	r1, r7
 80085ae:	462a      	mov	r2, r5
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fb4b 	bl	8008c4c <__lshift>
 80085b6:	4607      	mov	r7, r0
 80085b8:	f1b8 0f00 	cmp.w	r8, #0
 80085bc:	d05b      	beq.n	8008676 <_dtoa_r+0xa5e>
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 f931 	bl	8008828 <_Balloc>
 80085c6:	4605      	mov	r5, r0
 80085c8:	b928      	cbnz	r0, 80085d6 <_dtoa_r+0x9be>
 80085ca:	4b87      	ldr	r3, [pc, #540]	; (80087e8 <_dtoa_r+0xbd0>)
 80085cc:	4602      	mov	r2, r0
 80085ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085d2:	f7ff bb3b 	b.w	8007c4c <_dtoa_r+0x34>
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	3202      	adds	r2, #2
 80085da:	0092      	lsls	r2, r2, #2
 80085dc:	f107 010c 	add.w	r1, r7, #12
 80085e0:	300c      	adds	r0, #12
 80085e2:	f000 f913 	bl	800880c <memcpy>
 80085e6:	2201      	movs	r2, #1
 80085e8:	4629      	mov	r1, r5
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fb2e 	bl	8008c4c <__lshift>
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	f103 0901 	add.w	r9, r3, #1
 80085f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80085fa:	4413      	add	r3, r2
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	f00a 0301 	and.w	r3, sl, #1
 8008602:	46b8      	mov	r8, r7
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	4607      	mov	r7, r0
 8008608:	4631      	mov	r1, r6
 800860a:	ee18 0a10 	vmov	r0, s16
 800860e:	f7ff fa75 	bl	8007afc <quorem>
 8008612:	4641      	mov	r1, r8
 8008614:	9002      	str	r0, [sp, #8]
 8008616:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800861a:	ee18 0a10 	vmov	r0, s16
 800861e:	f000 fb85 	bl	8008d2c <__mcmp>
 8008622:	463a      	mov	r2, r7
 8008624:	9003      	str	r0, [sp, #12]
 8008626:	4631      	mov	r1, r6
 8008628:	4620      	mov	r0, r4
 800862a:	f000 fb9b 	bl	8008d64 <__mdiff>
 800862e:	68c2      	ldr	r2, [r0, #12]
 8008630:	f109 3bff 	add.w	fp, r9, #4294967295
 8008634:	4605      	mov	r5, r0
 8008636:	bb02      	cbnz	r2, 800867a <_dtoa_r+0xa62>
 8008638:	4601      	mov	r1, r0
 800863a:	ee18 0a10 	vmov	r0, s16
 800863e:	f000 fb75 	bl	8008d2c <__mcmp>
 8008642:	4602      	mov	r2, r0
 8008644:	4629      	mov	r1, r5
 8008646:	4620      	mov	r0, r4
 8008648:	9207      	str	r2, [sp, #28]
 800864a:	f000 f92d 	bl	80088a8 <_Bfree>
 800864e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008652:	ea43 0102 	orr.w	r1, r3, r2
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	430b      	orrs	r3, r1
 800865a:	464d      	mov	r5, r9
 800865c:	d10f      	bne.n	800867e <_dtoa_r+0xa66>
 800865e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008662:	d02a      	beq.n	80086ba <_dtoa_r+0xaa2>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dd02      	ble.n	8008670 <_dtoa_r+0xa58>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008670:	f88b a000 	strb.w	sl, [fp]
 8008674:	e775      	b.n	8008562 <_dtoa_r+0x94a>
 8008676:	4638      	mov	r0, r7
 8008678:	e7ba      	b.n	80085f0 <_dtoa_r+0x9d8>
 800867a:	2201      	movs	r2, #1
 800867c:	e7e2      	b.n	8008644 <_dtoa_r+0xa2c>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	db04      	blt.n	800868e <_dtoa_r+0xa76>
 8008684:	9906      	ldr	r1, [sp, #24]
 8008686:	430b      	orrs	r3, r1
 8008688:	9904      	ldr	r1, [sp, #16]
 800868a:	430b      	orrs	r3, r1
 800868c:	d122      	bne.n	80086d4 <_dtoa_r+0xabc>
 800868e:	2a00      	cmp	r2, #0
 8008690:	ddee      	ble.n	8008670 <_dtoa_r+0xa58>
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	2201      	movs	r2, #1
 8008698:	4620      	mov	r0, r4
 800869a:	f000 fad7 	bl	8008c4c <__lshift>
 800869e:	4631      	mov	r1, r6
 80086a0:	ee08 0a10 	vmov	s16, r0
 80086a4:	f000 fb42 	bl	8008d2c <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	dc03      	bgt.n	80086b4 <_dtoa_r+0xa9c>
 80086ac:	d1e0      	bne.n	8008670 <_dtoa_r+0xa58>
 80086ae:	f01a 0f01 	tst.w	sl, #1
 80086b2:	d0dd      	beq.n	8008670 <_dtoa_r+0xa58>
 80086b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086b8:	d1d7      	bne.n	800866a <_dtoa_r+0xa52>
 80086ba:	2339      	movs	r3, #57	; 0x39
 80086bc:	f88b 3000 	strb.w	r3, [fp]
 80086c0:	462b      	mov	r3, r5
 80086c2:	461d      	mov	r5, r3
 80086c4:	3b01      	subs	r3, #1
 80086c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086ca:	2a39      	cmp	r2, #57	; 0x39
 80086cc:	d071      	beq.n	80087b2 <_dtoa_r+0xb9a>
 80086ce:	3201      	adds	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	e746      	b.n	8008562 <_dtoa_r+0x94a>
 80086d4:	2a00      	cmp	r2, #0
 80086d6:	dd07      	ble.n	80086e8 <_dtoa_r+0xad0>
 80086d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086dc:	d0ed      	beq.n	80086ba <_dtoa_r+0xaa2>
 80086de:	f10a 0301 	add.w	r3, sl, #1
 80086e2:	f88b 3000 	strb.w	r3, [fp]
 80086e6:	e73c      	b.n	8008562 <_dtoa_r+0x94a>
 80086e8:	9b05      	ldr	r3, [sp, #20]
 80086ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80086ee:	4599      	cmp	r9, r3
 80086f0:	d047      	beq.n	8008782 <_dtoa_r+0xb6a>
 80086f2:	ee18 1a10 	vmov	r1, s16
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f8f6 	bl	80088ec <__multadd>
 8008700:	45b8      	cmp	r8, r7
 8008702:	ee08 0a10 	vmov	s16, r0
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	f04f 020a 	mov.w	r2, #10
 800870e:	4641      	mov	r1, r8
 8008710:	4620      	mov	r0, r4
 8008712:	d106      	bne.n	8008722 <_dtoa_r+0xb0a>
 8008714:	f000 f8ea 	bl	80088ec <__multadd>
 8008718:	4680      	mov	r8, r0
 800871a:	4607      	mov	r7, r0
 800871c:	f109 0901 	add.w	r9, r9, #1
 8008720:	e772      	b.n	8008608 <_dtoa_r+0x9f0>
 8008722:	f000 f8e3 	bl	80088ec <__multadd>
 8008726:	4639      	mov	r1, r7
 8008728:	4680      	mov	r8, r0
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4620      	mov	r0, r4
 8008730:	f000 f8dc 	bl	80088ec <__multadd>
 8008734:	4607      	mov	r7, r0
 8008736:	e7f1      	b.n	800871c <_dtoa_r+0xb04>
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	9d01      	ldr	r5, [sp, #4]
 800873e:	ee18 0a10 	vmov	r0, s16
 8008742:	4631      	mov	r1, r6
 8008744:	f7ff f9da 	bl	8007afc <quorem>
 8008748:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800874c:	9b01      	ldr	r3, [sp, #4]
 800874e:	f805 ab01 	strb.w	sl, [r5], #1
 8008752:	1aea      	subs	r2, r5, r3
 8008754:	9b02      	ldr	r3, [sp, #8]
 8008756:	4293      	cmp	r3, r2
 8008758:	dd09      	ble.n	800876e <_dtoa_r+0xb56>
 800875a:	ee18 1a10 	vmov	r1, s16
 800875e:	2300      	movs	r3, #0
 8008760:	220a      	movs	r2, #10
 8008762:	4620      	mov	r0, r4
 8008764:	f000 f8c2 	bl	80088ec <__multadd>
 8008768:	ee08 0a10 	vmov	s16, r0
 800876c:	e7e7      	b.n	800873e <_dtoa_r+0xb26>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	bfc8      	it	gt
 8008774:	461d      	movgt	r5, r3
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	bfd8      	it	le
 800877a:	2501      	movle	r5, #1
 800877c:	441d      	add	r5, r3
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	ee18 1a10 	vmov	r1, s16
 8008786:	2201      	movs	r2, #1
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fa5f 	bl	8008c4c <__lshift>
 800878e:	4631      	mov	r1, r6
 8008790:	ee08 0a10 	vmov	s16, r0
 8008794:	f000 faca 	bl	8008d2c <__mcmp>
 8008798:	2800      	cmp	r0, #0
 800879a:	dc91      	bgt.n	80086c0 <_dtoa_r+0xaa8>
 800879c:	d102      	bne.n	80087a4 <_dtoa_r+0xb8c>
 800879e:	f01a 0f01 	tst.w	sl, #1
 80087a2:	d18d      	bne.n	80086c0 <_dtoa_r+0xaa8>
 80087a4:	462b      	mov	r3, r5
 80087a6:	461d      	mov	r5, r3
 80087a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ac:	2a30      	cmp	r2, #48	; 0x30
 80087ae:	d0fa      	beq.n	80087a6 <_dtoa_r+0xb8e>
 80087b0:	e6d7      	b.n	8008562 <_dtoa_r+0x94a>
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d184      	bne.n	80086c2 <_dtoa_r+0xaaa>
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	3301      	adds	r3, #1
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	2331      	movs	r3, #49	; 0x31
 80087c0:	7013      	strb	r3, [r2, #0]
 80087c2:	e6ce      	b.n	8008562 <_dtoa_r+0x94a>
 80087c4:	4b09      	ldr	r3, [pc, #36]	; (80087ec <_dtoa_r+0xbd4>)
 80087c6:	f7ff ba95 	b.w	8007cf4 <_dtoa_r+0xdc>
 80087ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f47f aa6e 	bne.w	8007cae <_dtoa_r+0x96>
 80087d2:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <_dtoa_r+0xbd8>)
 80087d4:	f7ff ba8e 	b.w	8007cf4 <_dtoa_r+0xdc>
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dcae      	bgt.n	800873c <_dtoa_r+0xb24>
 80087de:	9b06      	ldr	r3, [sp, #24]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	f73f aea8 	bgt.w	8008536 <_dtoa_r+0x91e>
 80087e6:	e7a9      	b.n	800873c <_dtoa_r+0xb24>
 80087e8:	0800b59b 	.word	0x0800b59b
 80087ec:	0800b4f8 	.word	0x0800b4f8
 80087f0:	0800b51c 	.word	0x0800b51c

080087f4 <_localeconv_r>:
 80087f4:	4800      	ldr	r0, [pc, #0]	; (80087f8 <_localeconv_r+0x4>)
 80087f6:	4770      	bx	lr
 80087f8:	2000016c 	.word	0x2000016c

080087fc <malloc>:
 80087fc:	4b02      	ldr	r3, [pc, #8]	; (8008808 <malloc+0xc>)
 80087fe:	4601      	mov	r1, r0
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f000 bc17 	b.w	8009034 <_malloc_r>
 8008806:	bf00      	nop
 8008808:	20000018 	.word	0x20000018

0800880c <memcpy>:
 800880c:	440a      	add	r2, r1
 800880e:	4291      	cmp	r1, r2
 8008810:	f100 33ff 	add.w	r3, r0, #4294967295
 8008814:	d100      	bne.n	8008818 <memcpy+0xc>
 8008816:	4770      	bx	lr
 8008818:	b510      	push	{r4, lr}
 800881a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008822:	4291      	cmp	r1, r2
 8008824:	d1f9      	bne.n	800881a <memcpy+0xe>
 8008826:	bd10      	pop	{r4, pc}

08008828 <_Balloc>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800882c:	4604      	mov	r4, r0
 800882e:	460d      	mov	r5, r1
 8008830:	b976      	cbnz	r6, 8008850 <_Balloc+0x28>
 8008832:	2010      	movs	r0, #16
 8008834:	f7ff ffe2 	bl	80087fc <malloc>
 8008838:	4602      	mov	r2, r0
 800883a:	6260      	str	r0, [r4, #36]	; 0x24
 800883c:	b920      	cbnz	r0, 8008848 <_Balloc+0x20>
 800883e:	4b18      	ldr	r3, [pc, #96]	; (80088a0 <_Balloc+0x78>)
 8008840:	4818      	ldr	r0, [pc, #96]	; (80088a4 <_Balloc+0x7c>)
 8008842:	2166      	movs	r1, #102	; 0x66
 8008844:	f000 fdd6 	bl	80093f4 <__assert_func>
 8008848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800884c:	6006      	str	r6, [r0, #0]
 800884e:	60c6      	str	r6, [r0, #12]
 8008850:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008852:	68f3      	ldr	r3, [r6, #12]
 8008854:	b183      	cbz	r3, 8008878 <_Balloc+0x50>
 8008856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800885e:	b9b8      	cbnz	r0, 8008890 <_Balloc+0x68>
 8008860:	2101      	movs	r1, #1
 8008862:	fa01 f605 	lsl.w	r6, r1, r5
 8008866:	1d72      	adds	r2, r6, #5
 8008868:	0092      	lsls	r2, r2, #2
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fb60 	bl	8008f30 <_calloc_r>
 8008870:	b160      	cbz	r0, 800888c <_Balloc+0x64>
 8008872:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008876:	e00e      	b.n	8008896 <_Balloc+0x6e>
 8008878:	2221      	movs	r2, #33	; 0x21
 800887a:	2104      	movs	r1, #4
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fb57 	bl	8008f30 <_calloc_r>
 8008882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008884:	60f0      	str	r0, [r6, #12]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e4      	bne.n	8008856 <_Balloc+0x2e>
 800888c:	2000      	movs	r0, #0
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	6802      	ldr	r2, [r0, #0]
 8008892:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008896:	2300      	movs	r3, #0
 8008898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800889c:	e7f7      	b.n	800888e <_Balloc+0x66>
 800889e:	bf00      	nop
 80088a0:	0800b529 	.word	0x0800b529
 80088a4:	0800b5ac 	.word	0x0800b5ac

080088a8 <_Bfree>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	b976      	cbnz	r6, 80088d0 <_Bfree+0x28>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7ff ffa2 	bl	80087fc <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6268      	str	r0, [r5, #36]	; 0x24
 80088bc:	b920      	cbnz	r0, 80088c8 <_Bfree+0x20>
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <_Bfree+0x3c>)
 80088c0:	4809      	ldr	r0, [pc, #36]	; (80088e8 <_Bfree+0x40>)
 80088c2:	218a      	movs	r1, #138	; 0x8a
 80088c4:	f000 fd96 	bl	80093f4 <__assert_func>
 80088c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088cc:	6006      	str	r6, [r0, #0]
 80088ce:	60c6      	str	r6, [r0, #12]
 80088d0:	b13c      	cbz	r4, 80088e2 <_Bfree+0x3a>
 80088d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088d4:	6862      	ldr	r2, [r4, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088dc:	6021      	str	r1, [r4, #0]
 80088de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	0800b529 	.word	0x0800b529
 80088e8:	0800b5ac 	.word	0x0800b5ac

080088ec <__multadd>:
 80088ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	690d      	ldr	r5, [r1, #16]
 80088f2:	4607      	mov	r7, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	461e      	mov	r6, r3
 80088f8:	f101 0c14 	add.w	ip, r1, #20
 80088fc:	2000      	movs	r0, #0
 80088fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008902:	b299      	uxth	r1, r3
 8008904:	fb02 6101 	mla	r1, r2, r1, r6
 8008908:	0c1e      	lsrs	r6, r3, #16
 800890a:	0c0b      	lsrs	r3, r1, #16
 800890c:	fb02 3306 	mla	r3, r2, r6, r3
 8008910:	b289      	uxth	r1, r1
 8008912:	3001      	adds	r0, #1
 8008914:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008918:	4285      	cmp	r5, r0
 800891a:	f84c 1b04 	str.w	r1, [ip], #4
 800891e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008922:	dcec      	bgt.n	80088fe <__multadd+0x12>
 8008924:	b30e      	cbz	r6, 800896a <__multadd+0x7e>
 8008926:	68a3      	ldr	r3, [r4, #8]
 8008928:	42ab      	cmp	r3, r5
 800892a:	dc19      	bgt.n	8008960 <__multadd+0x74>
 800892c:	6861      	ldr	r1, [r4, #4]
 800892e:	4638      	mov	r0, r7
 8008930:	3101      	adds	r1, #1
 8008932:	f7ff ff79 	bl	8008828 <_Balloc>
 8008936:	4680      	mov	r8, r0
 8008938:	b928      	cbnz	r0, 8008946 <__multadd+0x5a>
 800893a:	4602      	mov	r2, r0
 800893c:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <__multadd+0x84>)
 800893e:	480d      	ldr	r0, [pc, #52]	; (8008974 <__multadd+0x88>)
 8008940:	21b5      	movs	r1, #181	; 0xb5
 8008942:	f000 fd57 	bl	80093f4 <__assert_func>
 8008946:	6922      	ldr	r2, [r4, #16]
 8008948:	3202      	adds	r2, #2
 800894a:	f104 010c 	add.w	r1, r4, #12
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	300c      	adds	r0, #12
 8008952:	f7ff ff5b 	bl	800880c <memcpy>
 8008956:	4621      	mov	r1, r4
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ffa5 	bl	80088a8 <_Bfree>
 800895e:	4644      	mov	r4, r8
 8008960:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008964:	3501      	adds	r5, #1
 8008966:	615e      	str	r6, [r3, #20]
 8008968:	6125      	str	r5, [r4, #16]
 800896a:	4620      	mov	r0, r4
 800896c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008970:	0800b59b 	.word	0x0800b59b
 8008974:	0800b5ac 	.word	0x0800b5ac

08008978 <__hi0bits>:
 8008978:	0c03      	lsrs	r3, r0, #16
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	b9d3      	cbnz	r3, 80089b4 <__hi0bits+0x3c>
 800897e:	0400      	lsls	r0, r0, #16
 8008980:	2310      	movs	r3, #16
 8008982:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008986:	bf04      	itt	eq
 8008988:	0200      	lsleq	r0, r0, #8
 800898a:	3308      	addeq	r3, #8
 800898c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008990:	bf04      	itt	eq
 8008992:	0100      	lsleq	r0, r0, #4
 8008994:	3304      	addeq	r3, #4
 8008996:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800899a:	bf04      	itt	eq
 800899c:	0080      	lsleq	r0, r0, #2
 800899e:	3302      	addeq	r3, #2
 80089a0:	2800      	cmp	r0, #0
 80089a2:	db05      	blt.n	80089b0 <__hi0bits+0x38>
 80089a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089a8:	f103 0301 	add.w	r3, r3, #1
 80089ac:	bf08      	it	eq
 80089ae:	2320      	moveq	r3, #32
 80089b0:	4618      	mov	r0, r3
 80089b2:	4770      	bx	lr
 80089b4:	2300      	movs	r3, #0
 80089b6:	e7e4      	b.n	8008982 <__hi0bits+0xa>

080089b8 <__lo0bits>:
 80089b8:	6803      	ldr	r3, [r0, #0]
 80089ba:	f013 0207 	ands.w	r2, r3, #7
 80089be:	4601      	mov	r1, r0
 80089c0:	d00b      	beq.n	80089da <__lo0bits+0x22>
 80089c2:	07da      	lsls	r2, r3, #31
 80089c4:	d423      	bmi.n	8008a0e <__lo0bits+0x56>
 80089c6:	0798      	lsls	r0, r3, #30
 80089c8:	bf49      	itett	mi
 80089ca:	085b      	lsrmi	r3, r3, #1
 80089cc:	089b      	lsrpl	r3, r3, #2
 80089ce:	2001      	movmi	r0, #1
 80089d0:	600b      	strmi	r3, [r1, #0]
 80089d2:	bf5c      	itt	pl
 80089d4:	600b      	strpl	r3, [r1, #0]
 80089d6:	2002      	movpl	r0, #2
 80089d8:	4770      	bx	lr
 80089da:	b298      	uxth	r0, r3
 80089dc:	b9a8      	cbnz	r0, 8008a0a <__lo0bits+0x52>
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	2010      	movs	r0, #16
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	b90a      	cbnz	r2, 80089ea <__lo0bits+0x32>
 80089e6:	3008      	adds	r0, #8
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	071a      	lsls	r2, r3, #28
 80089ec:	bf04      	itt	eq
 80089ee:	091b      	lsreq	r3, r3, #4
 80089f0:	3004      	addeq	r0, #4
 80089f2:	079a      	lsls	r2, r3, #30
 80089f4:	bf04      	itt	eq
 80089f6:	089b      	lsreq	r3, r3, #2
 80089f8:	3002      	addeq	r0, #2
 80089fa:	07da      	lsls	r2, r3, #31
 80089fc:	d403      	bmi.n	8008a06 <__lo0bits+0x4e>
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	f100 0001 	add.w	r0, r0, #1
 8008a04:	d005      	beq.n	8008a12 <__lo0bits+0x5a>
 8008a06:	600b      	str	r3, [r1, #0]
 8008a08:	4770      	bx	lr
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	e7e9      	b.n	80089e2 <__lo0bits+0x2a>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	4770      	bx	lr
 8008a12:	2020      	movs	r0, #32
 8008a14:	4770      	bx	lr
	...

08008a18 <__i2b>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	f7ff ff03 	bl	8008828 <_Balloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	b928      	cbnz	r0, 8008a32 <__i2b+0x1a>
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <__i2b+0x24>)
 8008a28:	4805      	ldr	r0, [pc, #20]	; (8008a40 <__i2b+0x28>)
 8008a2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a2e:	f000 fce1 	bl	80093f4 <__assert_func>
 8008a32:	2301      	movs	r3, #1
 8008a34:	6144      	str	r4, [r0, #20]
 8008a36:	6103      	str	r3, [r0, #16]
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	bf00      	nop
 8008a3c:	0800b59b 	.word	0x0800b59b
 8008a40:	0800b5ac 	.word	0x0800b5ac

08008a44 <__multiply>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4691      	mov	r9, r2
 8008a4a:	690a      	ldr	r2, [r1, #16]
 8008a4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bfb8      	it	lt
 8008a54:	460b      	movlt	r3, r1
 8008a56:	460c      	mov	r4, r1
 8008a58:	bfbc      	itt	lt
 8008a5a:	464c      	movlt	r4, r9
 8008a5c:	4699      	movlt	r9, r3
 8008a5e:	6927      	ldr	r7, [r4, #16]
 8008a60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a64:	68a3      	ldr	r3, [r4, #8]
 8008a66:	6861      	ldr	r1, [r4, #4]
 8008a68:	eb07 060a 	add.w	r6, r7, sl
 8008a6c:	42b3      	cmp	r3, r6
 8008a6e:	b085      	sub	sp, #20
 8008a70:	bfb8      	it	lt
 8008a72:	3101      	addlt	r1, #1
 8008a74:	f7ff fed8 	bl	8008828 <_Balloc>
 8008a78:	b930      	cbnz	r0, 8008a88 <__multiply+0x44>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4b44      	ldr	r3, [pc, #272]	; (8008b90 <__multiply+0x14c>)
 8008a7e:	4845      	ldr	r0, [pc, #276]	; (8008b94 <__multiply+0x150>)
 8008a80:	f240 115d 	movw	r1, #349	; 0x15d
 8008a84:	f000 fcb6 	bl	80093f4 <__assert_func>
 8008a88:	f100 0514 	add.w	r5, r0, #20
 8008a8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a90:	462b      	mov	r3, r5
 8008a92:	2200      	movs	r2, #0
 8008a94:	4543      	cmp	r3, r8
 8008a96:	d321      	bcc.n	8008adc <__multiply+0x98>
 8008a98:	f104 0314 	add.w	r3, r4, #20
 8008a9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008aa0:	f109 0314 	add.w	r3, r9, #20
 8008aa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008aa8:	9202      	str	r2, [sp, #8]
 8008aaa:	1b3a      	subs	r2, r7, r4
 8008aac:	3a15      	subs	r2, #21
 8008aae:	f022 0203 	bic.w	r2, r2, #3
 8008ab2:	3204      	adds	r2, #4
 8008ab4:	f104 0115 	add.w	r1, r4, #21
 8008ab8:	428f      	cmp	r7, r1
 8008aba:	bf38      	it	cc
 8008abc:	2204      	movcc	r2, #4
 8008abe:	9201      	str	r2, [sp, #4]
 8008ac0:	9a02      	ldr	r2, [sp, #8]
 8008ac2:	9303      	str	r3, [sp, #12]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d80c      	bhi.n	8008ae2 <__multiply+0x9e>
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	dd03      	ble.n	8008ad4 <__multiply+0x90>
 8008acc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d05a      	beq.n	8008b8a <__multiply+0x146>
 8008ad4:	6106      	str	r6, [r0, #16]
 8008ad6:	b005      	add	sp, #20
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	f843 2b04 	str.w	r2, [r3], #4
 8008ae0:	e7d8      	b.n	8008a94 <__multiply+0x50>
 8008ae2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ae6:	f1ba 0f00 	cmp.w	sl, #0
 8008aea:	d024      	beq.n	8008b36 <__multiply+0xf2>
 8008aec:	f104 0e14 	add.w	lr, r4, #20
 8008af0:	46a9      	mov	r9, r5
 8008af2:	f04f 0c00 	mov.w	ip, #0
 8008af6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008afa:	f8d9 1000 	ldr.w	r1, [r9]
 8008afe:	fa1f fb82 	uxth.w	fp, r2
 8008b02:	b289      	uxth	r1, r1
 8008b04:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b0c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b10:	4461      	add	r1, ip
 8008b12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b16:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b1e:	b289      	uxth	r1, r1
 8008b20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b24:	4577      	cmp	r7, lr
 8008b26:	f849 1b04 	str.w	r1, [r9], #4
 8008b2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b2e:	d8e2      	bhi.n	8008af6 <__multiply+0xb2>
 8008b30:	9a01      	ldr	r2, [sp, #4]
 8008b32:	f845 c002 	str.w	ip, [r5, r2]
 8008b36:	9a03      	ldr	r2, [sp, #12]
 8008b38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	f1b9 0f00 	cmp.w	r9, #0
 8008b42:	d020      	beq.n	8008b86 <__multiply+0x142>
 8008b44:	6829      	ldr	r1, [r5, #0]
 8008b46:	f104 0c14 	add.w	ip, r4, #20
 8008b4a:	46ae      	mov	lr, r5
 8008b4c:	f04f 0a00 	mov.w	sl, #0
 8008b50:	f8bc b000 	ldrh.w	fp, [ip]
 8008b54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b58:	fb09 220b 	mla	r2, r9, fp, r2
 8008b5c:	4492      	add	sl, r2
 8008b5e:	b289      	uxth	r1, r1
 8008b60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b64:	f84e 1b04 	str.w	r1, [lr], #4
 8008b68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b6c:	f8be 1000 	ldrh.w	r1, [lr]
 8008b70:	0c12      	lsrs	r2, r2, #16
 8008b72:	fb09 1102 	mla	r1, r9, r2, r1
 8008b76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b7a:	4567      	cmp	r7, ip
 8008b7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b80:	d8e6      	bhi.n	8008b50 <__multiply+0x10c>
 8008b82:	9a01      	ldr	r2, [sp, #4]
 8008b84:	50a9      	str	r1, [r5, r2]
 8008b86:	3504      	adds	r5, #4
 8008b88:	e79a      	b.n	8008ac0 <__multiply+0x7c>
 8008b8a:	3e01      	subs	r6, #1
 8008b8c:	e79c      	b.n	8008ac8 <__multiply+0x84>
 8008b8e:	bf00      	nop
 8008b90:	0800b59b 	.word	0x0800b59b
 8008b94:	0800b5ac 	.word	0x0800b5ac

08008b98 <__pow5mult>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	4615      	mov	r5, r2
 8008b9e:	f012 0203 	ands.w	r2, r2, #3
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	d007      	beq.n	8008bb8 <__pow5mult+0x20>
 8008ba8:	4c25      	ldr	r4, [pc, #148]	; (8008c40 <__pow5mult+0xa8>)
 8008baa:	3a01      	subs	r2, #1
 8008bac:	2300      	movs	r3, #0
 8008bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bb2:	f7ff fe9b 	bl	80088ec <__multadd>
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	10ad      	asrs	r5, r5, #2
 8008bba:	d03d      	beq.n	8008c38 <__pow5mult+0xa0>
 8008bbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bbe:	b97c      	cbnz	r4, 8008be0 <__pow5mult+0x48>
 8008bc0:	2010      	movs	r0, #16
 8008bc2:	f7ff fe1b 	bl	80087fc <malloc>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	6270      	str	r0, [r6, #36]	; 0x24
 8008bca:	b928      	cbnz	r0, 8008bd8 <__pow5mult+0x40>
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <__pow5mult+0xac>)
 8008bce:	481e      	ldr	r0, [pc, #120]	; (8008c48 <__pow5mult+0xb0>)
 8008bd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bd4:	f000 fc0e 	bl	80093f4 <__assert_func>
 8008bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bdc:	6004      	str	r4, [r0, #0]
 8008bde:	60c4      	str	r4, [r0, #12]
 8008be0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be8:	b94c      	cbnz	r4, 8008bfe <__pow5mult+0x66>
 8008bea:	f240 2171 	movw	r1, #625	; 0x271
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ff12 	bl	8008a18 <__i2b>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	6003      	str	r3, [r0, #0]
 8008bfe:	f04f 0900 	mov.w	r9, #0
 8008c02:	07eb      	lsls	r3, r5, #31
 8008c04:	d50a      	bpl.n	8008c1c <__pow5mult+0x84>
 8008c06:	4639      	mov	r1, r7
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ff1a 	bl	8008a44 <__multiply>
 8008c10:	4639      	mov	r1, r7
 8008c12:	4680      	mov	r8, r0
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7ff fe47 	bl	80088a8 <_Bfree>
 8008c1a:	4647      	mov	r7, r8
 8008c1c:	106d      	asrs	r5, r5, #1
 8008c1e:	d00b      	beq.n	8008c38 <__pow5mult+0xa0>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	b938      	cbnz	r0, 8008c34 <__pow5mult+0x9c>
 8008c24:	4622      	mov	r2, r4
 8008c26:	4621      	mov	r1, r4
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff ff0b 	bl	8008a44 <__multiply>
 8008c2e:	6020      	str	r0, [r4, #0]
 8008c30:	f8c0 9000 	str.w	r9, [r0]
 8008c34:	4604      	mov	r4, r0
 8008c36:	e7e4      	b.n	8008c02 <__pow5mult+0x6a>
 8008c38:	4638      	mov	r0, r7
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	bf00      	nop
 8008c40:	0800b6f8 	.word	0x0800b6f8
 8008c44:	0800b529 	.word	0x0800b529
 8008c48:	0800b5ac 	.word	0x0800b5ac

08008c4c <__lshift>:
 8008c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c50:	460c      	mov	r4, r1
 8008c52:	6849      	ldr	r1, [r1, #4]
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	4691      	mov	r9, r2
 8008c60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c64:	f108 0601 	add.w	r6, r8, #1
 8008c68:	42b3      	cmp	r3, r6
 8008c6a:	db0b      	blt.n	8008c84 <__lshift+0x38>
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff fddb 	bl	8008828 <_Balloc>
 8008c72:	4605      	mov	r5, r0
 8008c74:	b948      	cbnz	r0, 8008c8a <__lshift+0x3e>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b2a      	ldr	r3, [pc, #168]	; (8008d24 <__lshift+0xd8>)
 8008c7a:	482b      	ldr	r0, [pc, #172]	; (8008d28 <__lshift+0xdc>)
 8008c7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c80:	f000 fbb8 	bl	80093f4 <__assert_func>
 8008c84:	3101      	adds	r1, #1
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	e7ee      	b.n	8008c68 <__lshift+0x1c>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f100 0114 	add.w	r1, r0, #20
 8008c90:	f100 0210 	add.w	r2, r0, #16
 8008c94:	4618      	mov	r0, r3
 8008c96:	4553      	cmp	r3, sl
 8008c98:	db37      	blt.n	8008d0a <__lshift+0xbe>
 8008c9a:	6920      	ldr	r0, [r4, #16]
 8008c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ca0:	f104 0314 	add.w	r3, r4, #20
 8008ca4:	f019 091f 	ands.w	r9, r9, #31
 8008ca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008cb0:	d02f      	beq.n	8008d12 <__lshift+0xc6>
 8008cb2:	f1c9 0e20 	rsb	lr, r9, #32
 8008cb6:	468a      	mov	sl, r1
 8008cb8:	f04f 0c00 	mov.w	ip, #0
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	fa02 f209 	lsl.w	r2, r2, r9
 8008cc2:	ea42 020c 	orr.w	r2, r2, ip
 8008cc6:	f84a 2b04 	str.w	r2, [sl], #4
 8008cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cce:	4298      	cmp	r0, r3
 8008cd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cd4:	d8f2      	bhi.n	8008cbc <__lshift+0x70>
 8008cd6:	1b03      	subs	r3, r0, r4
 8008cd8:	3b15      	subs	r3, #21
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	3304      	adds	r3, #4
 8008ce0:	f104 0215 	add.w	r2, r4, #21
 8008ce4:	4290      	cmp	r0, r2
 8008ce6:	bf38      	it	cc
 8008ce8:	2304      	movcc	r3, #4
 8008cea:	f841 c003 	str.w	ip, [r1, r3]
 8008cee:	f1bc 0f00 	cmp.w	ip, #0
 8008cf2:	d001      	beq.n	8008cf8 <__lshift+0xac>
 8008cf4:	f108 0602 	add.w	r6, r8, #2
 8008cf8:	3e01      	subs	r6, #1
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	612e      	str	r6, [r5, #16]
 8008cfe:	4621      	mov	r1, r4
 8008d00:	f7ff fdd2 	bl	80088a8 <_Bfree>
 8008d04:	4628      	mov	r0, r5
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d0e:	3301      	adds	r3, #1
 8008d10:	e7c1      	b.n	8008c96 <__lshift+0x4a>
 8008d12:	3904      	subs	r1, #4
 8008d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d1c:	4298      	cmp	r0, r3
 8008d1e:	d8f9      	bhi.n	8008d14 <__lshift+0xc8>
 8008d20:	e7ea      	b.n	8008cf8 <__lshift+0xac>
 8008d22:	bf00      	nop
 8008d24:	0800b59b 	.word	0x0800b59b
 8008d28:	0800b5ac 	.word	0x0800b5ac

08008d2c <__mcmp>:
 8008d2c:	b530      	push	{r4, r5, lr}
 8008d2e:	6902      	ldr	r2, [r0, #16]
 8008d30:	690c      	ldr	r4, [r1, #16]
 8008d32:	1b12      	subs	r2, r2, r4
 8008d34:	d10e      	bne.n	8008d54 <__mcmp+0x28>
 8008d36:	f100 0314 	add.w	r3, r0, #20
 8008d3a:	3114      	adds	r1, #20
 8008d3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d4c:	42a5      	cmp	r5, r4
 8008d4e:	d003      	beq.n	8008d58 <__mcmp+0x2c>
 8008d50:	d305      	bcc.n	8008d5e <__mcmp+0x32>
 8008d52:	2201      	movs	r2, #1
 8008d54:	4610      	mov	r0, r2
 8008d56:	bd30      	pop	{r4, r5, pc}
 8008d58:	4283      	cmp	r3, r0
 8008d5a:	d3f3      	bcc.n	8008d44 <__mcmp+0x18>
 8008d5c:	e7fa      	b.n	8008d54 <__mcmp+0x28>
 8008d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d62:	e7f7      	b.n	8008d54 <__mcmp+0x28>

08008d64 <__mdiff>:
 8008d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	460c      	mov	r4, r1
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4690      	mov	r8, r2
 8008d72:	f7ff ffdb 	bl	8008d2c <__mcmp>
 8008d76:	1e05      	subs	r5, r0, #0
 8008d78:	d110      	bne.n	8008d9c <__mdiff+0x38>
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7ff fd53 	bl	8008828 <_Balloc>
 8008d82:	b930      	cbnz	r0, 8008d92 <__mdiff+0x2e>
 8008d84:	4b3a      	ldr	r3, [pc, #232]	; (8008e70 <__mdiff+0x10c>)
 8008d86:	4602      	mov	r2, r0
 8008d88:	f240 2132 	movw	r1, #562	; 0x232
 8008d8c:	4839      	ldr	r0, [pc, #228]	; (8008e74 <__mdiff+0x110>)
 8008d8e:	f000 fb31 	bl	80093f4 <__assert_func>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	bfa4      	itt	ge
 8008d9e:	4643      	movge	r3, r8
 8008da0:	46a0      	movge	r8, r4
 8008da2:	4630      	mov	r0, r6
 8008da4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008da8:	bfa6      	itte	ge
 8008daa:	461c      	movge	r4, r3
 8008dac:	2500      	movge	r5, #0
 8008dae:	2501      	movlt	r5, #1
 8008db0:	f7ff fd3a 	bl	8008828 <_Balloc>
 8008db4:	b920      	cbnz	r0, 8008dc0 <__mdiff+0x5c>
 8008db6:	4b2e      	ldr	r3, [pc, #184]	; (8008e70 <__mdiff+0x10c>)
 8008db8:	4602      	mov	r2, r0
 8008dba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dbe:	e7e5      	b.n	8008d8c <__mdiff+0x28>
 8008dc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dc4:	6926      	ldr	r6, [r4, #16]
 8008dc6:	60c5      	str	r5, [r0, #12]
 8008dc8:	f104 0914 	add.w	r9, r4, #20
 8008dcc:	f108 0514 	add.w	r5, r8, #20
 8008dd0:	f100 0e14 	add.w	lr, r0, #20
 8008dd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ddc:	f108 0210 	add.w	r2, r8, #16
 8008de0:	46f2      	mov	sl, lr
 8008de2:	2100      	movs	r1, #0
 8008de4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008de8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dec:	fa1f f883 	uxth.w	r8, r3
 8008df0:	fa11 f18b 	uxtah	r1, r1, fp
 8008df4:	0c1b      	lsrs	r3, r3, #16
 8008df6:	eba1 0808 	sub.w	r8, r1, r8
 8008dfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e02:	fa1f f888 	uxth.w	r8, r8
 8008e06:	1419      	asrs	r1, r3, #16
 8008e08:	454e      	cmp	r6, r9
 8008e0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e0e:	f84a 3b04 	str.w	r3, [sl], #4
 8008e12:	d8e7      	bhi.n	8008de4 <__mdiff+0x80>
 8008e14:	1b33      	subs	r3, r6, r4
 8008e16:	3b15      	subs	r3, #21
 8008e18:	f023 0303 	bic.w	r3, r3, #3
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	3415      	adds	r4, #21
 8008e20:	42a6      	cmp	r6, r4
 8008e22:	bf38      	it	cc
 8008e24:	2304      	movcc	r3, #4
 8008e26:	441d      	add	r5, r3
 8008e28:	4473      	add	r3, lr
 8008e2a:	469e      	mov	lr, r3
 8008e2c:	462e      	mov	r6, r5
 8008e2e:	4566      	cmp	r6, ip
 8008e30:	d30e      	bcc.n	8008e50 <__mdiff+0xec>
 8008e32:	f10c 0203 	add.w	r2, ip, #3
 8008e36:	1b52      	subs	r2, r2, r5
 8008e38:	f022 0203 	bic.w	r2, r2, #3
 8008e3c:	3d03      	subs	r5, #3
 8008e3e:	45ac      	cmp	ip, r5
 8008e40:	bf38      	it	cc
 8008e42:	2200      	movcc	r2, #0
 8008e44:	441a      	add	r2, r3
 8008e46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e4a:	b17b      	cbz	r3, 8008e6c <__mdiff+0x108>
 8008e4c:	6107      	str	r7, [r0, #16]
 8008e4e:	e7a3      	b.n	8008d98 <__mdiff+0x34>
 8008e50:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e54:	fa11 f288 	uxtah	r2, r1, r8
 8008e58:	1414      	asrs	r4, r2, #16
 8008e5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e5e:	b292      	uxth	r2, r2
 8008e60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e64:	f84e 2b04 	str.w	r2, [lr], #4
 8008e68:	1421      	asrs	r1, r4, #16
 8008e6a:	e7e0      	b.n	8008e2e <__mdiff+0xca>
 8008e6c:	3f01      	subs	r7, #1
 8008e6e:	e7ea      	b.n	8008e46 <__mdiff+0xe2>
 8008e70:	0800b59b 	.word	0x0800b59b
 8008e74:	0800b5ac 	.word	0x0800b5ac

08008e78 <__d2b>:
 8008e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e7c:	4689      	mov	r9, r1
 8008e7e:	2101      	movs	r1, #1
 8008e80:	ec57 6b10 	vmov	r6, r7, d0
 8008e84:	4690      	mov	r8, r2
 8008e86:	f7ff fccf 	bl	8008828 <_Balloc>
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	b930      	cbnz	r0, 8008e9c <__d2b+0x24>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	4b25      	ldr	r3, [pc, #148]	; (8008f28 <__d2b+0xb0>)
 8008e92:	4826      	ldr	r0, [pc, #152]	; (8008f2c <__d2b+0xb4>)
 8008e94:	f240 310a 	movw	r1, #778	; 0x30a
 8008e98:	f000 faac 	bl	80093f4 <__assert_func>
 8008e9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ea4:	bb35      	cbnz	r5, 8008ef4 <__d2b+0x7c>
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	d028      	beq.n	8008efe <__d2b+0x86>
 8008eac:	4668      	mov	r0, sp
 8008eae:	9600      	str	r6, [sp, #0]
 8008eb0:	f7ff fd82 	bl	80089b8 <__lo0bits>
 8008eb4:	9900      	ldr	r1, [sp, #0]
 8008eb6:	b300      	cbz	r0, 8008efa <__d2b+0x82>
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	f1c0 0320 	rsb	r3, r0, #32
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	40c2      	lsrs	r2, r0
 8008ec6:	6163      	str	r3, [r4, #20]
 8008ec8:	9201      	str	r2, [sp, #4]
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	61a3      	str	r3, [r4, #24]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bf14      	ite	ne
 8008ed2:	2202      	movne	r2, #2
 8008ed4:	2201      	moveq	r2, #1
 8008ed6:	6122      	str	r2, [r4, #16]
 8008ed8:	b1d5      	cbz	r5, 8008f10 <__d2b+0x98>
 8008eda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ede:	4405      	add	r5, r0
 8008ee0:	f8c9 5000 	str.w	r5, [r9]
 8008ee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ee8:	f8c8 0000 	str.w	r0, [r8]
 8008eec:	4620      	mov	r0, r4
 8008eee:	b003      	add	sp, #12
 8008ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ef8:	e7d5      	b.n	8008ea6 <__d2b+0x2e>
 8008efa:	6161      	str	r1, [r4, #20]
 8008efc:	e7e5      	b.n	8008eca <__d2b+0x52>
 8008efe:	a801      	add	r0, sp, #4
 8008f00:	f7ff fd5a 	bl	80089b8 <__lo0bits>
 8008f04:	9b01      	ldr	r3, [sp, #4]
 8008f06:	6163      	str	r3, [r4, #20]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	6122      	str	r2, [r4, #16]
 8008f0c:	3020      	adds	r0, #32
 8008f0e:	e7e3      	b.n	8008ed8 <__d2b+0x60>
 8008f10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f18:	f8c9 0000 	str.w	r0, [r9]
 8008f1c:	6918      	ldr	r0, [r3, #16]
 8008f1e:	f7ff fd2b 	bl	8008978 <__hi0bits>
 8008f22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f26:	e7df      	b.n	8008ee8 <__d2b+0x70>
 8008f28:	0800b59b 	.word	0x0800b59b
 8008f2c:	0800b5ac 	.word	0x0800b5ac

08008f30 <_calloc_r>:
 8008f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f32:	fba1 2402 	umull	r2, r4, r1, r2
 8008f36:	b94c      	cbnz	r4, 8008f4c <_calloc_r+0x1c>
 8008f38:	4611      	mov	r1, r2
 8008f3a:	9201      	str	r2, [sp, #4]
 8008f3c:	f000 f87a 	bl	8009034 <_malloc_r>
 8008f40:	9a01      	ldr	r2, [sp, #4]
 8008f42:	4605      	mov	r5, r0
 8008f44:	b930      	cbnz	r0, 8008f54 <_calloc_r+0x24>
 8008f46:	4628      	mov	r0, r5
 8008f48:	b003      	add	sp, #12
 8008f4a:	bd30      	pop	{r4, r5, pc}
 8008f4c:	220c      	movs	r2, #12
 8008f4e:	6002      	str	r2, [r0, #0]
 8008f50:	2500      	movs	r5, #0
 8008f52:	e7f8      	b.n	8008f46 <_calloc_r+0x16>
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7fe f93f 	bl	80071d8 <memset>
 8008f5a:	e7f4      	b.n	8008f46 <_calloc_r+0x16>

08008f5c <_free_r>:
 8008f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	d044      	beq.n	8008fec <_free_r+0x90>
 8008f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f66:	9001      	str	r0, [sp, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f6e:	bfb8      	it	lt
 8008f70:	18e4      	addlt	r4, r4, r3
 8008f72:	f000 fa9b 	bl	80094ac <__malloc_lock>
 8008f76:	4a1e      	ldr	r2, [pc, #120]	; (8008ff0 <_free_r+0x94>)
 8008f78:	9801      	ldr	r0, [sp, #4]
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	b933      	cbnz	r3, 8008f8c <_free_r+0x30>
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	6014      	str	r4, [r2, #0]
 8008f82:	b003      	add	sp, #12
 8008f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f88:	f000 ba96 	b.w	80094b8 <__malloc_unlock>
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d908      	bls.n	8008fa2 <_free_r+0x46>
 8008f90:	6825      	ldr	r5, [r4, #0]
 8008f92:	1961      	adds	r1, r4, r5
 8008f94:	428b      	cmp	r3, r1
 8008f96:	bf01      	itttt	eq
 8008f98:	6819      	ldreq	r1, [r3, #0]
 8008f9a:	685b      	ldreq	r3, [r3, #4]
 8008f9c:	1949      	addeq	r1, r1, r5
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	e7ed      	b.n	8008f7e <_free_r+0x22>
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	b10b      	cbz	r3, 8008fac <_free_r+0x50>
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	d9fa      	bls.n	8008fa2 <_free_r+0x46>
 8008fac:	6811      	ldr	r1, [r2, #0]
 8008fae:	1855      	adds	r5, r2, r1
 8008fb0:	42a5      	cmp	r5, r4
 8008fb2:	d10b      	bne.n	8008fcc <_free_r+0x70>
 8008fb4:	6824      	ldr	r4, [r4, #0]
 8008fb6:	4421      	add	r1, r4
 8008fb8:	1854      	adds	r4, r2, r1
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	6011      	str	r1, [r2, #0]
 8008fbe:	d1e0      	bne.n	8008f82 <_free_r+0x26>
 8008fc0:	681c      	ldr	r4, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	6053      	str	r3, [r2, #4]
 8008fc6:	4421      	add	r1, r4
 8008fc8:	6011      	str	r1, [r2, #0]
 8008fca:	e7da      	b.n	8008f82 <_free_r+0x26>
 8008fcc:	d902      	bls.n	8008fd4 <_free_r+0x78>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	e7d6      	b.n	8008f82 <_free_r+0x26>
 8008fd4:	6825      	ldr	r5, [r4, #0]
 8008fd6:	1961      	adds	r1, r4, r5
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf04      	itt	eq
 8008fdc:	6819      	ldreq	r1, [r3, #0]
 8008fde:	685b      	ldreq	r3, [r3, #4]
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	bf04      	itt	eq
 8008fe4:	1949      	addeq	r1, r1, r5
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	6054      	str	r4, [r2, #4]
 8008fea:	e7ca      	b.n	8008f82 <_free_r+0x26>
 8008fec:	b003      	add	sp, #12
 8008fee:	bd30      	pop	{r4, r5, pc}
 8008ff0:	200005f0 	.word	0x200005f0

08008ff4 <sbrk_aligned>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4e0e      	ldr	r6, [pc, #56]	; (8009030 <sbrk_aligned+0x3c>)
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	6831      	ldr	r1, [r6, #0]
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	b911      	cbnz	r1, 8009006 <sbrk_aligned+0x12>
 8009000:	f000 f9e8 	bl	80093d4 <_sbrk_r>
 8009004:	6030      	str	r0, [r6, #0]
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f000 f9e3 	bl	80093d4 <_sbrk_r>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	d00a      	beq.n	8009028 <sbrk_aligned+0x34>
 8009012:	1cc4      	adds	r4, r0, #3
 8009014:	f024 0403 	bic.w	r4, r4, #3
 8009018:	42a0      	cmp	r0, r4
 800901a:	d007      	beq.n	800902c <sbrk_aligned+0x38>
 800901c:	1a21      	subs	r1, r4, r0
 800901e:	4628      	mov	r0, r5
 8009020:	f000 f9d8 	bl	80093d4 <_sbrk_r>
 8009024:	3001      	adds	r0, #1
 8009026:	d101      	bne.n	800902c <sbrk_aligned+0x38>
 8009028:	f04f 34ff 	mov.w	r4, #4294967295
 800902c:	4620      	mov	r0, r4
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	200005f4 	.word	0x200005f4

08009034 <_malloc_r>:
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	1ccd      	adds	r5, r1, #3
 800903a:	f025 0503 	bic.w	r5, r5, #3
 800903e:	3508      	adds	r5, #8
 8009040:	2d0c      	cmp	r5, #12
 8009042:	bf38      	it	cc
 8009044:	250c      	movcc	r5, #12
 8009046:	2d00      	cmp	r5, #0
 8009048:	4607      	mov	r7, r0
 800904a:	db01      	blt.n	8009050 <_malloc_r+0x1c>
 800904c:	42a9      	cmp	r1, r5
 800904e:	d905      	bls.n	800905c <_malloc_r+0x28>
 8009050:	230c      	movs	r3, #12
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	2600      	movs	r6, #0
 8009056:	4630      	mov	r0, r6
 8009058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905c:	4e2e      	ldr	r6, [pc, #184]	; (8009118 <_malloc_r+0xe4>)
 800905e:	f000 fa25 	bl	80094ac <__malloc_lock>
 8009062:	6833      	ldr	r3, [r6, #0]
 8009064:	461c      	mov	r4, r3
 8009066:	bb34      	cbnz	r4, 80090b6 <_malloc_r+0x82>
 8009068:	4629      	mov	r1, r5
 800906a:	4638      	mov	r0, r7
 800906c:	f7ff ffc2 	bl	8008ff4 <sbrk_aligned>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	4604      	mov	r4, r0
 8009074:	d14d      	bne.n	8009112 <_malloc_r+0xde>
 8009076:	6834      	ldr	r4, [r6, #0]
 8009078:	4626      	mov	r6, r4
 800907a:	2e00      	cmp	r6, #0
 800907c:	d140      	bne.n	8009100 <_malloc_r+0xcc>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	4631      	mov	r1, r6
 8009082:	4638      	mov	r0, r7
 8009084:	eb04 0803 	add.w	r8, r4, r3
 8009088:	f000 f9a4 	bl	80093d4 <_sbrk_r>
 800908c:	4580      	cmp	r8, r0
 800908e:	d13a      	bne.n	8009106 <_malloc_r+0xd2>
 8009090:	6821      	ldr	r1, [r4, #0]
 8009092:	3503      	adds	r5, #3
 8009094:	1a6d      	subs	r5, r5, r1
 8009096:	f025 0503 	bic.w	r5, r5, #3
 800909a:	3508      	adds	r5, #8
 800909c:	2d0c      	cmp	r5, #12
 800909e:	bf38      	it	cc
 80090a0:	250c      	movcc	r5, #12
 80090a2:	4629      	mov	r1, r5
 80090a4:	4638      	mov	r0, r7
 80090a6:	f7ff ffa5 	bl	8008ff4 <sbrk_aligned>
 80090aa:	3001      	adds	r0, #1
 80090ac:	d02b      	beq.n	8009106 <_malloc_r+0xd2>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	442b      	add	r3, r5
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	e00e      	b.n	80090d4 <_malloc_r+0xa0>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	1b52      	subs	r2, r2, r5
 80090ba:	d41e      	bmi.n	80090fa <_malloc_r+0xc6>
 80090bc:	2a0b      	cmp	r2, #11
 80090be:	d916      	bls.n	80090ee <_malloc_r+0xba>
 80090c0:	1961      	adds	r1, r4, r5
 80090c2:	42a3      	cmp	r3, r4
 80090c4:	6025      	str	r5, [r4, #0]
 80090c6:	bf18      	it	ne
 80090c8:	6059      	strne	r1, [r3, #4]
 80090ca:	6863      	ldr	r3, [r4, #4]
 80090cc:	bf08      	it	eq
 80090ce:	6031      	streq	r1, [r6, #0]
 80090d0:	5162      	str	r2, [r4, r5]
 80090d2:	604b      	str	r3, [r1, #4]
 80090d4:	4638      	mov	r0, r7
 80090d6:	f104 060b 	add.w	r6, r4, #11
 80090da:	f000 f9ed 	bl	80094b8 <__malloc_unlock>
 80090de:	f026 0607 	bic.w	r6, r6, #7
 80090e2:	1d23      	adds	r3, r4, #4
 80090e4:	1af2      	subs	r2, r6, r3
 80090e6:	d0b6      	beq.n	8009056 <_malloc_r+0x22>
 80090e8:	1b9b      	subs	r3, r3, r6
 80090ea:	50a3      	str	r3, [r4, r2]
 80090ec:	e7b3      	b.n	8009056 <_malloc_r+0x22>
 80090ee:	6862      	ldr	r2, [r4, #4]
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	bf0c      	ite	eq
 80090f4:	6032      	streq	r2, [r6, #0]
 80090f6:	605a      	strne	r2, [r3, #4]
 80090f8:	e7ec      	b.n	80090d4 <_malloc_r+0xa0>
 80090fa:	4623      	mov	r3, r4
 80090fc:	6864      	ldr	r4, [r4, #4]
 80090fe:	e7b2      	b.n	8009066 <_malloc_r+0x32>
 8009100:	4634      	mov	r4, r6
 8009102:	6876      	ldr	r6, [r6, #4]
 8009104:	e7b9      	b.n	800907a <_malloc_r+0x46>
 8009106:	230c      	movs	r3, #12
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	4638      	mov	r0, r7
 800910c:	f000 f9d4 	bl	80094b8 <__malloc_unlock>
 8009110:	e7a1      	b.n	8009056 <_malloc_r+0x22>
 8009112:	6025      	str	r5, [r4, #0]
 8009114:	e7de      	b.n	80090d4 <_malloc_r+0xa0>
 8009116:	bf00      	nop
 8009118:	200005f0 	.word	0x200005f0

0800911c <__ssputs_r>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	688e      	ldr	r6, [r1, #8]
 8009122:	429e      	cmp	r6, r3
 8009124:	4682      	mov	sl, r0
 8009126:	460c      	mov	r4, r1
 8009128:	4690      	mov	r8, r2
 800912a:	461f      	mov	r7, r3
 800912c:	d838      	bhi.n	80091a0 <__ssputs_r+0x84>
 800912e:	898a      	ldrh	r2, [r1, #12]
 8009130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009134:	d032      	beq.n	800919c <__ssputs_r+0x80>
 8009136:	6825      	ldr	r5, [r4, #0]
 8009138:	6909      	ldr	r1, [r1, #16]
 800913a:	eba5 0901 	sub.w	r9, r5, r1
 800913e:	6965      	ldr	r5, [r4, #20]
 8009140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009148:	3301      	adds	r3, #1
 800914a:	444b      	add	r3, r9
 800914c:	106d      	asrs	r5, r5, #1
 800914e:	429d      	cmp	r5, r3
 8009150:	bf38      	it	cc
 8009152:	461d      	movcc	r5, r3
 8009154:	0553      	lsls	r3, r2, #21
 8009156:	d531      	bpl.n	80091bc <__ssputs_r+0xa0>
 8009158:	4629      	mov	r1, r5
 800915a:	f7ff ff6b 	bl	8009034 <_malloc_r>
 800915e:	4606      	mov	r6, r0
 8009160:	b950      	cbnz	r0, 8009178 <__ssputs_r+0x5c>
 8009162:	230c      	movs	r3, #12
 8009164:	f8ca 3000 	str.w	r3, [sl]
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009178:	6921      	ldr	r1, [r4, #16]
 800917a:	464a      	mov	r2, r9
 800917c:	f7ff fb46 	bl	800880c <memcpy>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918a:	81a3      	strh	r3, [r4, #12]
 800918c:	6126      	str	r6, [r4, #16]
 800918e:	6165      	str	r5, [r4, #20]
 8009190:	444e      	add	r6, r9
 8009192:	eba5 0509 	sub.w	r5, r5, r9
 8009196:	6026      	str	r6, [r4, #0]
 8009198:	60a5      	str	r5, [r4, #8]
 800919a:	463e      	mov	r6, r7
 800919c:	42be      	cmp	r6, r7
 800919e:	d900      	bls.n	80091a2 <__ssputs_r+0x86>
 80091a0:	463e      	mov	r6, r7
 80091a2:	6820      	ldr	r0, [r4, #0]
 80091a4:	4632      	mov	r2, r6
 80091a6:	4641      	mov	r1, r8
 80091a8:	f000 f966 	bl	8009478 <memmove>
 80091ac:	68a3      	ldr	r3, [r4, #8]
 80091ae:	1b9b      	subs	r3, r3, r6
 80091b0:	60a3      	str	r3, [r4, #8]
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	4433      	add	r3, r6
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	2000      	movs	r0, #0
 80091ba:	e7db      	b.n	8009174 <__ssputs_r+0x58>
 80091bc:	462a      	mov	r2, r5
 80091be:	f000 f981 	bl	80094c4 <_realloc_r>
 80091c2:	4606      	mov	r6, r0
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d1e1      	bne.n	800918c <__ssputs_r+0x70>
 80091c8:	6921      	ldr	r1, [r4, #16]
 80091ca:	4650      	mov	r0, sl
 80091cc:	f7ff fec6 	bl	8008f5c <_free_r>
 80091d0:	e7c7      	b.n	8009162 <__ssputs_r+0x46>
	...

080091d4 <_svfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	4698      	mov	r8, r3
 80091da:	898b      	ldrh	r3, [r1, #12]
 80091dc:	061b      	lsls	r3, r3, #24
 80091de:	b09d      	sub	sp, #116	; 0x74
 80091e0:	4607      	mov	r7, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	4614      	mov	r4, r2
 80091e6:	d50e      	bpl.n	8009206 <_svfiprintf_r+0x32>
 80091e8:	690b      	ldr	r3, [r1, #16]
 80091ea:	b963      	cbnz	r3, 8009206 <_svfiprintf_r+0x32>
 80091ec:	2140      	movs	r1, #64	; 0x40
 80091ee:	f7ff ff21 	bl	8009034 <_malloc_r>
 80091f2:	6028      	str	r0, [r5, #0]
 80091f4:	6128      	str	r0, [r5, #16]
 80091f6:	b920      	cbnz	r0, 8009202 <_svfiprintf_r+0x2e>
 80091f8:	230c      	movs	r3, #12
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	e0d1      	b.n	80093a6 <_svfiprintf_r+0x1d2>
 8009202:	2340      	movs	r3, #64	; 0x40
 8009204:	616b      	str	r3, [r5, #20]
 8009206:	2300      	movs	r3, #0
 8009208:	9309      	str	r3, [sp, #36]	; 0x24
 800920a:	2320      	movs	r3, #32
 800920c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009210:	f8cd 800c 	str.w	r8, [sp, #12]
 8009214:	2330      	movs	r3, #48	; 0x30
 8009216:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093c0 <_svfiprintf_r+0x1ec>
 800921a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921e:	f04f 0901 	mov.w	r9, #1
 8009222:	4623      	mov	r3, r4
 8009224:	469a      	mov	sl, r3
 8009226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922a:	b10a      	cbz	r2, 8009230 <_svfiprintf_r+0x5c>
 800922c:	2a25      	cmp	r2, #37	; 0x25
 800922e:	d1f9      	bne.n	8009224 <_svfiprintf_r+0x50>
 8009230:	ebba 0b04 	subs.w	fp, sl, r4
 8009234:	d00b      	beq.n	800924e <_svfiprintf_r+0x7a>
 8009236:	465b      	mov	r3, fp
 8009238:	4622      	mov	r2, r4
 800923a:	4629      	mov	r1, r5
 800923c:	4638      	mov	r0, r7
 800923e:	f7ff ff6d 	bl	800911c <__ssputs_r>
 8009242:	3001      	adds	r0, #1
 8009244:	f000 80aa 	beq.w	800939c <_svfiprintf_r+0x1c8>
 8009248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800924a:	445a      	add	r2, fp
 800924c:	9209      	str	r2, [sp, #36]	; 0x24
 800924e:	f89a 3000 	ldrb.w	r3, [sl]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 80a2 	beq.w	800939c <_svfiprintf_r+0x1c8>
 8009258:	2300      	movs	r3, #0
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009262:	f10a 0a01 	add.w	sl, sl, #1
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800926e:	931a      	str	r3, [sp, #104]	; 0x68
 8009270:	4654      	mov	r4, sl
 8009272:	2205      	movs	r2, #5
 8009274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009278:	4851      	ldr	r0, [pc, #324]	; (80093c0 <_svfiprintf_r+0x1ec>)
 800927a:	f7f6 ffd1 	bl	8000220 <memchr>
 800927e:	9a04      	ldr	r2, [sp, #16]
 8009280:	b9d8      	cbnz	r0, 80092ba <_svfiprintf_r+0xe6>
 8009282:	06d0      	lsls	r0, r2, #27
 8009284:	bf44      	itt	mi
 8009286:	2320      	movmi	r3, #32
 8009288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800928c:	0711      	lsls	r1, r2, #28
 800928e:	bf44      	itt	mi
 8009290:	232b      	movmi	r3, #43	; 0x2b
 8009292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009296:	f89a 3000 	ldrb.w	r3, [sl]
 800929a:	2b2a      	cmp	r3, #42	; 0x2a
 800929c:	d015      	beq.n	80092ca <_svfiprintf_r+0xf6>
 800929e:	9a07      	ldr	r2, [sp, #28]
 80092a0:	4654      	mov	r4, sl
 80092a2:	2000      	movs	r0, #0
 80092a4:	f04f 0c0a 	mov.w	ip, #10
 80092a8:	4621      	mov	r1, r4
 80092aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ae:	3b30      	subs	r3, #48	; 0x30
 80092b0:	2b09      	cmp	r3, #9
 80092b2:	d94e      	bls.n	8009352 <_svfiprintf_r+0x17e>
 80092b4:	b1b0      	cbz	r0, 80092e4 <_svfiprintf_r+0x110>
 80092b6:	9207      	str	r2, [sp, #28]
 80092b8:	e014      	b.n	80092e4 <_svfiprintf_r+0x110>
 80092ba:	eba0 0308 	sub.w	r3, r0, r8
 80092be:	fa09 f303 	lsl.w	r3, r9, r3
 80092c2:	4313      	orrs	r3, r2
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	46a2      	mov	sl, r4
 80092c8:	e7d2      	b.n	8009270 <_svfiprintf_r+0x9c>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	1d19      	adds	r1, r3, #4
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	9103      	str	r1, [sp, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfbb      	ittet	lt
 80092d6:	425b      	neglt	r3, r3
 80092d8:	f042 0202 	orrlt.w	r2, r2, #2
 80092dc:	9307      	strge	r3, [sp, #28]
 80092de:	9307      	strlt	r3, [sp, #28]
 80092e0:	bfb8      	it	lt
 80092e2:	9204      	strlt	r2, [sp, #16]
 80092e4:	7823      	ldrb	r3, [r4, #0]
 80092e6:	2b2e      	cmp	r3, #46	; 0x2e
 80092e8:	d10c      	bne.n	8009304 <_svfiprintf_r+0x130>
 80092ea:	7863      	ldrb	r3, [r4, #1]
 80092ec:	2b2a      	cmp	r3, #42	; 0x2a
 80092ee:	d135      	bne.n	800935c <_svfiprintf_r+0x188>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	1d1a      	adds	r2, r3, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	9203      	str	r2, [sp, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfb8      	it	lt
 80092fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009300:	3402      	adds	r4, #2
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093d0 <_svfiprintf_r+0x1fc>
 8009308:	7821      	ldrb	r1, [r4, #0]
 800930a:	2203      	movs	r2, #3
 800930c:	4650      	mov	r0, sl
 800930e:	f7f6 ff87 	bl	8000220 <memchr>
 8009312:	b140      	cbz	r0, 8009326 <_svfiprintf_r+0x152>
 8009314:	2340      	movs	r3, #64	; 0x40
 8009316:	eba0 000a 	sub.w	r0, r0, sl
 800931a:	fa03 f000 	lsl.w	r0, r3, r0
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	4303      	orrs	r3, r0
 8009322:	3401      	adds	r4, #1
 8009324:	9304      	str	r3, [sp, #16]
 8009326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932a:	4826      	ldr	r0, [pc, #152]	; (80093c4 <_svfiprintf_r+0x1f0>)
 800932c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009330:	2206      	movs	r2, #6
 8009332:	f7f6 ff75 	bl	8000220 <memchr>
 8009336:	2800      	cmp	r0, #0
 8009338:	d038      	beq.n	80093ac <_svfiprintf_r+0x1d8>
 800933a:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <_svfiprintf_r+0x1f4>)
 800933c:	bb1b      	cbnz	r3, 8009386 <_svfiprintf_r+0x1b2>
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	3307      	adds	r3, #7
 8009342:	f023 0307 	bic.w	r3, r3, #7
 8009346:	3308      	adds	r3, #8
 8009348:	9303      	str	r3, [sp, #12]
 800934a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934c:	4433      	add	r3, r6
 800934e:	9309      	str	r3, [sp, #36]	; 0x24
 8009350:	e767      	b.n	8009222 <_svfiprintf_r+0x4e>
 8009352:	fb0c 3202 	mla	r2, ip, r2, r3
 8009356:	460c      	mov	r4, r1
 8009358:	2001      	movs	r0, #1
 800935a:	e7a5      	b.n	80092a8 <_svfiprintf_r+0xd4>
 800935c:	2300      	movs	r3, #0
 800935e:	3401      	adds	r4, #1
 8009360:	9305      	str	r3, [sp, #20]
 8009362:	4619      	mov	r1, r3
 8009364:	f04f 0c0a 	mov.w	ip, #10
 8009368:	4620      	mov	r0, r4
 800936a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936e:	3a30      	subs	r2, #48	; 0x30
 8009370:	2a09      	cmp	r2, #9
 8009372:	d903      	bls.n	800937c <_svfiprintf_r+0x1a8>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0c5      	beq.n	8009304 <_svfiprintf_r+0x130>
 8009378:	9105      	str	r1, [sp, #20]
 800937a:	e7c3      	b.n	8009304 <_svfiprintf_r+0x130>
 800937c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009380:	4604      	mov	r4, r0
 8009382:	2301      	movs	r3, #1
 8009384:	e7f0      	b.n	8009368 <_svfiprintf_r+0x194>
 8009386:	ab03      	add	r3, sp, #12
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	462a      	mov	r2, r5
 800938c:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <_svfiprintf_r+0x1f8>)
 800938e:	a904      	add	r1, sp, #16
 8009390:	4638      	mov	r0, r7
 8009392:	f7fd ffc9 	bl	8007328 <_printf_float>
 8009396:	1c42      	adds	r2, r0, #1
 8009398:	4606      	mov	r6, r0
 800939a:	d1d6      	bne.n	800934a <_svfiprintf_r+0x176>
 800939c:	89ab      	ldrh	r3, [r5, #12]
 800939e:	065b      	lsls	r3, r3, #25
 80093a0:	f53f af2c 	bmi.w	80091fc <_svfiprintf_r+0x28>
 80093a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a6:	b01d      	add	sp, #116	; 0x74
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ac:	ab03      	add	r3, sp, #12
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	462a      	mov	r2, r5
 80093b2:	4b06      	ldr	r3, [pc, #24]	; (80093cc <_svfiprintf_r+0x1f8>)
 80093b4:	a904      	add	r1, sp, #16
 80093b6:	4638      	mov	r0, r7
 80093b8:	f7fe fa5a 	bl	8007870 <_printf_i>
 80093bc:	e7eb      	b.n	8009396 <_svfiprintf_r+0x1c2>
 80093be:	bf00      	nop
 80093c0:	0800b704 	.word	0x0800b704
 80093c4:	0800b70e 	.word	0x0800b70e
 80093c8:	08007329 	.word	0x08007329
 80093cc:	0800911d 	.word	0x0800911d
 80093d0:	0800b70a 	.word	0x0800b70a

080093d4 <_sbrk_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4d06      	ldr	r5, [pc, #24]	; (80093f0 <_sbrk_r+0x1c>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f9 fb00 	bl	80029e4 <_sbrk>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_sbrk_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_sbrk_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	200005f8 	.word	0x200005f8

080093f4 <__assert_func>:
 80093f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093f6:	4614      	mov	r4, r2
 80093f8:	461a      	mov	r2, r3
 80093fa:	4b09      	ldr	r3, [pc, #36]	; (8009420 <__assert_func+0x2c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4605      	mov	r5, r0
 8009400:	68d8      	ldr	r0, [r3, #12]
 8009402:	b14c      	cbz	r4, 8009418 <__assert_func+0x24>
 8009404:	4b07      	ldr	r3, [pc, #28]	; (8009424 <__assert_func+0x30>)
 8009406:	9100      	str	r1, [sp, #0]
 8009408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800940c:	4906      	ldr	r1, [pc, #24]	; (8009428 <__assert_func+0x34>)
 800940e:	462b      	mov	r3, r5
 8009410:	f000 f80e 	bl	8009430 <fiprintf>
 8009414:	f000 faac 	bl	8009970 <abort>
 8009418:	4b04      	ldr	r3, [pc, #16]	; (800942c <__assert_func+0x38>)
 800941a:	461c      	mov	r4, r3
 800941c:	e7f3      	b.n	8009406 <__assert_func+0x12>
 800941e:	bf00      	nop
 8009420:	20000018 	.word	0x20000018
 8009424:	0800b715 	.word	0x0800b715
 8009428:	0800b722 	.word	0x0800b722
 800942c:	0800b750 	.word	0x0800b750

08009430 <fiprintf>:
 8009430:	b40e      	push	{r1, r2, r3}
 8009432:	b503      	push	{r0, r1, lr}
 8009434:	4601      	mov	r1, r0
 8009436:	ab03      	add	r3, sp, #12
 8009438:	4805      	ldr	r0, [pc, #20]	; (8009450 <fiprintf+0x20>)
 800943a:	f853 2b04 	ldr.w	r2, [r3], #4
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	f000 f897 	bl	8009574 <_vfiprintf_r>
 8009446:	b002      	add	sp, #8
 8009448:	f85d eb04 	ldr.w	lr, [sp], #4
 800944c:	b003      	add	sp, #12
 800944e:	4770      	bx	lr
 8009450:	20000018 	.word	0x20000018

08009454 <__ascii_mbtowc>:
 8009454:	b082      	sub	sp, #8
 8009456:	b901      	cbnz	r1, 800945a <__ascii_mbtowc+0x6>
 8009458:	a901      	add	r1, sp, #4
 800945a:	b142      	cbz	r2, 800946e <__ascii_mbtowc+0x1a>
 800945c:	b14b      	cbz	r3, 8009472 <__ascii_mbtowc+0x1e>
 800945e:	7813      	ldrb	r3, [r2, #0]
 8009460:	600b      	str	r3, [r1, #0]
 8009462:	7812      	ldrb	r2, [r2, #0]
 8009464:	1e10      	subs	r0, r2, #0
 8009466:	bf18      	it	ne
 8009468:	2001      	movne	r0, #1
 800946a:	b002      	add	sp, #8
 800946c:	4770      	bx	lr
 800946e:	4610      	mov	r0, r2
 8009470:	e7fb      	b.n	800946a <__ascii_mbtowc+0x16>
 8009472:	f06f 0001 	mvn.w	r0, #1
 8009476:	e7f8      	b.n	800946a <__ascii_mbtowc+0x16>

08009478 <memmove>:
 8009478:	4288      	cmp	r0, r1
 800947a:	b510      	push	{r4, lr}
 800947c:	eb01 0402 	add.w	r4, r1, r2
 8009480:	d902      	bls.n	8009488 <memmove+0x10>
 8009482:	4284      	cmp	r4, r0
 8009484:	4623      	mov	r3, r4
 8009486:	d807      	bhi.n	8009498 <memmove+0x20>
 8009488:	1e43      	subs	r3, r0, #1
 800948a:	42a1      	cmp	r1, r4
 800948c:	d008      	beq.n	80094a0 <memmove+0x28>
 800948e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009496:	e7f8      	b.n	800948a <memmove+0x12>
 8009498:	4402      	add	r2, r0
 800949a:	4601      	mov	r1, r0
 800949c:	428a      	cmp	r2, r1
 800949e:	d100      	bne.n	80094a2 <memmove+0x2a>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094aa:	e7f7      	b.n	800949c <memmove+0x24>

080094ac <__malloc_lock>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__malloc_lock+0x8>)
 80094ae:	f000 bc1f 	b.w	8009cf0 <__retarget_lock_acquire_recursive>
 80094b2:	bf00      	nop
 80094b4:	200005fc 	.word	0x200005fc

080094b8 <__malloc_unlock>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__malloc_unlock+0x8>)
 80094ba:	f000 bc1a 	b.w	8009cf2 <__retarget_lock_release_recursive>
 80094be:	bf00      	nop
 80094c0:	200005fc 	.word	0x200005fc

080094c4 <_realloc_r>:
 80094c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c8:	4680      	mov	r8, r0
 80094ca:	4614      	mov	r4, r2
 80094cc:	460e      	mov	r6, r1
 80094ce:	b921      	cbnz	r1, 80094da <_realloc_r+0x16>
 80094d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	4611      	mov	r1, r2
 80094d6:	f7ff bdad 	b.w	8009034 <_malloc_r>
 80094da:	b92a      	cbnz	r2, 80094e8 <_realloc_r+0x24>
 80094dc:	f7ff fd3e 	bl	8008f5c <_free_r>
 80094e0:	4625      	mov	r5, r4
 80094e2:	4628      	mov	r0, r5
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	f000 fc6a 	bl	8009dc0 <_malloc_usable_size_r>
 80094ec:	4284      	cmp	r4, r0
 80094ee:	4607      	mov	r7, r0
 80094f0:	d802      	bhi.n	80094f8 <_realloc_r+0x34>
 80094f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094f6:	d812      	bhi.n	800951e <_realloc_r+0x5a>
 80094f8:	4621      	mov	r1, r4
 80094fa:	4640      	mov	r0, r8
 80094fc:	f7ff fd9a 	bl	8009034 <_malloc_r>
 8009500:	4605      	mov	r5, r0
 8009502:	2800      	cmp	r0, #0
 8009504:	d0ed      	beq.n	80094e2 <_realloc_r+0x1e>
 8009506:	42bc      	cmp	r4, r7
 8009508:	4622      	mov	r2, r4
 800950a:	4631      	mov	r1, r6
 800950c:	bf28      	it	cs
 800950e:	463a      	movcs	r2, r7
 8009510:	f7ff f97c 	bl	800880c <memcpy>
 8009514:	4631      	mov	r1, r6
 8009516:	4640      	mov	r0, r8
 8009518:	f7ff fd20 	bl	8008f5c <_free_r>
 800951c:	e7e1      	b.n	80094e2 <_realloc_r+0x1e>
 800951e:	4635      	mov	r5, r6
 8009520:	e7df      	b.n	80094e2 <_realloc_r+0x1e>

08009522 <__sfputc_r>:
 8009522:	6893      	ldr	r3, [r2, #8]
 8009524:	3b01      	subs	r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	b410      	push	{r4}
 800952a:	6093      	str	r3, [r2, #8]
 800952c:	da08      	bge.n	8009540 <__sfputc_r+0x1e>
 800952e:	6994      	ldr	r4, [r2, #24]
 8009530:	42a3      	cmp	r3, r4
 8009532:	db01      	blt.n	8009538 <__sfputc_r+0x16>
 8009534:	290a      	cmp	r1, #10
 8009536:	d103      	bne.n	8009540 <__sfputc_r+0x1e>
 8009538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953c:	f000 b94a 	b.w	80097d4 <__swbuf_r>
 8009540:	6813      	ldr	r3, [r2, #0]
 8009542:	1c58      	adds	r0, r3, #1
 8009544:	6010      	str	r0, [r2, #0]
 8009546:	7019      	strb	r1, [r3, #0]
 8009548:	4608      	mov	r0, r1
 800954a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800954e:	4770      	bx	lr

08009550 <__sfputs_r>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	4606      	mov	r6, r0
 8009554:	460f      	mov	r7, r1
 8009556:	4614      	mov	r4, r2
 8009558:	18d5      	adds	r5, r2, r3
 800955a:	42ac      	cmp	r4, r5
 800955c:	d101      	bne.n	8009562 <__sfputs_r+0x12>
 800955e:	2000      	movs	r0, #0
 8009560:	e007      	b.n	8009572 <__sfputs_r+0x22>
 8009562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009566:	463a      	mov	r2, r7
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ffda 	bl	8009522 <__sfputc_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d1f3      	bne.n	800955a <__sfputs_r+0xa>
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009574 <_vfiprintf_r>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	460d      	mov	r5, r1
 800957a:	b09d      	sub	sp, #116	; 0x74
 800957c:	4614      	mov	r4, r2
 800957e:	4698      	mov	r8, r3
 8009580:	4606      	mov	r6, r0
 8009582:	b118      	cbz	r0, 800958c <_vfiprintf_r+0x18>
 8009584:	6983      	ldr	r3, [r0, #24]
 8009586:	b90b      	cbnz	r3, 800958c <_vfiprintf_r+0x18>
 8009588:	f000 fb14 	bl	8009bb4 <__sinit>
 800958c:	4b89      	ldr	r3, [pc, #548]	; (80097b4 <_vfiprintf_r+0x240>)
 800958e:	429d      	cmp	r5, r3
 8009590:	d11b      	bne.n	80095ca <_vfiprintf_r+0x56>
 8009592:	6875      	ldr	r5, [r6, #4]
 8009594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009596:	07d9      	lsls	r1, r3, #31
 8009598:	d405      	bmi.n	80095a6 <_vfiprintf_r+0x32>
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	059a      	lsls	r2, r3, #22
 800959e:	d402      	bmi.n	80095a6 <_vfiprintf_r+0x32>
 80095a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095a2:	f000 fba5 	bl	8009cf0 <__retarget_lock_acquire_recursive>
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	071b      	lsls	r3, r3, #28
 80095aa:	d501      	bpl.n	80095b0 <_vfiprintf_r+0x3c>
 80095ac:	692b      	ldr	r3, [r5, #16]
 80095ae:	b9eb      	cbnz	r3, 80095ec <_vfiprintf_r+0x78>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4630      	mov	r0, r6
 80095b4:	f000 f96e 	bl	8009894 <__swsetup_r>
 80095b8:	b1c0      	cbz	r0, 80095ec <_vfiprintf_r+0x78>
 80095ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095bc:	07dc      	lsls	r4, r3, #31
 80095be:	d50e      	bpl.n	80095de <_vfiprintf_r+0x6a>
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	b01d      	add	sp, #116	; 0x74
 80095c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ca:	4b7b      	ldr	r3, [pc, #492]	; (80097b8 <_vfiprintf_r+0x244>)
 80095cc:	429d      	cmp	r5, r3
 80095ce:	d101      	bne.n	80095d4 <_vfiprintf_r+0x60>
 80095d0:	68b5      	ldr	r5, [r6, #8]
 80095d2:	e7df      	b.n	8009594 <_vfiprintf_r+0x20>
 80095d4:	4b79      	ldr	r3, [pc, #484]	; (80097bc <_vfiprintf_r+0x248>)
 80095d6:	429d      	cmp	r5, r3
 80095d8:	bf08      	it	eq
 80095da:	68f5      	ldreq	r5, [r6, #12]
 80095dc:	e7da      	b.n	8009594 <_vfiprintf_r+0x20>
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	0598      	lsls	r0, r3, #22
 80095e2:	d4ed      	bmi.n	80095c0 <_vfiprintf_r+0x4c>
 80095e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095e6:	f000 fb84 	bl	8009cf2 <__retarget_lock_release_recursive>
 80095ea:	e7e9      	b.n	80095c0 <_vfiprintf_r+0x4c>
 80095ec:	2300      	movs	r3, #0
 80095ee:	9309      	str	r3, [sp, #36]	; 0x24
 80095f0:	2320      	movs	r3, #32
 80095f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095fa:	2330      	movs	r3, #48	; 0x30
 80095fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097c0 <_vfiprintf_r+0x24c>
 8009600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009604:	f04f 0901 	mov.w	r9, #1
 8009608:	4623      	mov	r3, r4
 800960a:	469a      	mov	sl, r3
 800960c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009610:	b10a      	cbz	r2, 8009616 <_vfiprintf_r+0xa2>
 8009612:	2a25      	cmp	r2, #37	; 0x25
 8009614:	d1f9      	bne.n	800960a <_vfiprintf_r+0x96>
 8009616:	ebba 0b04 	subs.w	fp, sl, r4
 800961a:	d00b      	beq.n	8009634 <_vfiprintf_r+0xc0>
 800961c:	465b      	mov	r3, fp
 800961e:	4622      	mov	r2, r4
 8009620:	4629      	mov	r1, r5
 8009622:	4630      	mov	r0, r6
 8009624:	f7ff ff94 	bl	8009550 <__sfputs_r>
 8009628:	3001      	adds	r0, #1
 800962a:	f000 80aa 	beq.w	8009782 <_vfiprintf_r+0x20e>
 800962e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009630:	445a      	add	r2, fp
 8009632:	9209      	str	r2, [sp, #36]	; 0x24
 8009634:	f89a 3000 	ldrb.w	r3, [sl]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 80a2 	beq.w	8009782 <_vfiprintf_r+0x20e>
 800963e:	2300      	movs	r3, #0
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009648:	f10a 0a01 	add.w	sl, sl, #1
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009654:	931a      	str	r3, [sp, #104]	; 0x68
 8009656:	4654      	mov	r4, sl
 8009658:	2205      	movs	r2, #5
 800965a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965e:	4858      	ldr	r0, [pc, #352]	; (80097c0 <_vfiprintf_r+0x24c>)
 8009660:	f7f6 fdde 	bl	8000220 <memchr>
 8009664:	9a04      	ldr	r2, [sp, #16]
 8009666:	b9d8      	cbnz	r0, 80096a0 <_vfiprintf_r+0x12c>
 8009668:	06d1      	lsls	r1, r2, #27
 800966a:	bf44      	itt	mi
 800966c:	2320      	movmi	r3, #32
 800966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009672:	0713      	lsls	r3, r2, #28
 8009674:	bf44      	itt	mi
 8009676:	232b      	movmi	r3, #43	; 0x2b
 8009678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800967c:	f89a 3000 	ldrb.w	r3, [sl]
 8009680:	2b2a      	cmp	r3, #42	; 0x2a
 8009682:	d015      	beq.n	80096b0 <_vfiprintf_r+0x13c>
 8009684:	9a07      	ldr	r2, [sp, #28]
 8009686:	4654      	mov	r4, sl
 8009688:	2000      	movs	r0, #0
 800968a:	f04f 0c0a 	mov.w	ip, #10
 800968e:	4621      	mov	r1, r4
 8009690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009694:	3b30      	subs	r3, #48	; 0x30
 8009696:	2b09      	cmp	r3, #9
 8009698:	d94e      	bls.n	8009738 <_vfiprintf_r+0x1c4>
 800969a:	b1b0      	cbz	r0, 80096ca <_vfiprintf_r+0x156>
 800969c:	9207      	str	r2, [sp, #28]
 800969e:	e014      	b.n	80096ca <_vfiprintf_r+0x156>
 80096a0:	eba0 0308 	sub.w	r3, r0, r8
 80096a4:	fa09 f303 	lsl.w	r3, r9, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	9304      	str	r3, [sp, #16]
 80096ac:	46a2      	mov	sl, r4
 80096ae:	e7d2      	b.n	8009656 <_vfiprintf_r+0xe2>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	1d19      	adds	r1, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9103      	str	r1, [sp, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfbb      	ittet	lt
 80096bc:	425b      	neglt	r3, r3
 80096be:	f042 0202 	orrlt.w	r2, r2, #2
 80096c2:	9307      	strge	r3, [sp, #28]
 80096c4:	9307      	strlt	r3, [sp, #28]
 80096c6:	bfb8      	it	lt
 80096c8:	9204      	strlt	r2, [sp, #16]
 80096ca:	7823      	ldrb	r3, [r4, #0]
 80096cc:	2b2e      	cmp	r3, #46	; 0x2e
 80096ce:	d10c      	bne.n	80096ea <_vfiprintf_r+0x176>
 80096d0:	7863      	ldrb	r3, [r4, #1]
 80096d2:	2b2a      	cmp	r3, #42	; 0x2a
 80096d4:	d135      	bne.n	8009742 <_vfiprintf_r+0x1ce>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	9203      	str	r2, [sp, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	bfb8      	it	lt
 80096e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096e6:	3402      	adds	r4, #2
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097d0 <_vfiprintf_r+0x25c>
 80096ee:	7821      	ldrb	r1, [r4, #0]
 80096f0:	2203      	movs	r2, #3
 80096f2:	4650      	mov	r0, sl
 80096f4:	f7f6 fd94 	bl	8000220 <memchr>
 80096f8:	b140      	cbz	r0, 800970c <_vfiprintf_r+0x198>
 80096fa:	2340      	movs	r3, #64	; 0x40
 80096fc:	eba0 000a 	sub.w	r0, r0, sl
 8009700:	fa03 f000 	lsl.w	r0, r3, r0
 8009704:	9b04      	ldr	r3, [sp, #16]
 8009706:	4303      	orrs	r3, r0
 8009708:	3401      	adds	r4, #1
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009710:	482c      	ldr	r0, [pc, #176]	; (80097c4 <_vfiprintf_r+0x250>)
 8009712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009716:	2206      	movs	r2, #6
 8009718:	f7f6 fd82 	bl	8000220 <memchr>
 800971c:	2800      	cmp	r0, #0
 800971e:	d03f      	beq.n	80097a0 <_vfiprintf_r+0x22c>
 8009720:	4b29      	ldr	r3, [pc, #164]	; (80097c8 <_vfiprintf_r+0x254>)
 8009722:	bb1b      	cbnz	r3, 800976c <_vfiprintf_r+0x1f8>
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	3307      	adds	r3, #7
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	3308      	adds	r3, #8
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009732:	443b      	add	r3, r7
 8009734:	9309      	str	r3, [sp, #36]	; 0x24
 8009736:	e767      	b.n	8009608 <_vfiprintf_r+0x94>
 8009738:	fb0c 3202 	mla	r2, ip, r2, r3
 800973c:	460c      	mov	r4, r1
 800973e:	2001      	movs	r0, #1
 8009740:	e7a5      	b.n	800968e <_vfiprintf_r+0x11a>
 8009742:	2300      	movs	r3, #0
 8009744:	3401      	adds	r4, #1
 8009746:	9305      	str	r3, [sp, #20]
 8009748:	4619      	mov	r1, r3
 800974a:	f04f 0c0a 	mov.w	ip, #10
 800974e:	4620      	mov	r0, r4
 8009750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009754:	3a30      	subs	r2, #48	; 0x30
 8009756:	2a09      	cmp	r2, #9
 8009758:	d903      	bls.n	8009762 <_vfiprintf_r+0x1ee>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0c5      	beq.n	80096ea <_vfiprintf_r+0x176>
 800975e:	9105      	str	r1, [sp, #20]
 8009760:	e7c3      	b.n	80096ea <_vfiprintf_r+0x176>
 8009762:	fb0c 2101 	mla	r1, ip, r1, r2
 8009766:	4604      	mov	r4, r0
 8009768:	2301      	movs	r3, #1
 800976a:	e7f0      	b.n	800974e <_vfiprintf_r+0x1da>
 800976c:	ab03      	add	r3, sp, #12
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	462a      	mov	r2, r5
 8009772:	4b16      	ldr	r3, [pc, #88]	; (80097cc <_vfiprintf_r+0x258>)
 8009774:	a904      	add	r1, sp, #16
 8009776:	4630      	mov	r0, r6
 8009778:	f7fd fdd6 	bl	8007328 <_printf_float>
 800977c:	4607      	mov	r7, r0
 800977e:	1c78      	adds	r0, r7, #1
 8009780:	d1d6      	bne.n	8009730 <_vfiprintf_r+0x1bc>
 8009782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009784:	07d9      	lsls	r1, r3, #31
 8009786:	d405      	bmi.n	8009794 <_vfiprintf_r+0x220>
 8009788:	89ab      	ldrh	r3, [r5, #12]
 800978a:	059a      	lsls	r2, r3, #22
 800978c:	d402      	bmi.n	8009794 <_vfiprintf_r+0x220>
 800978e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009790:	f000 faaf 	bl	8009cf2 <__retarget_lock_release_recursive>
 8009794:	89ab      	ldrh	r3, [r5, #12]
 8009796:	065b      	lsls	r3, r3, #25
 8009798:	f53f af12 	bmi.w	80095c0 <_vfiprintf_r+0x4c>
 800979c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800979e:	e711      	b.n	80095c4 <_vfiprintf_r+0x50>
 80097a0:	ab03      	add	r3, sp, #12
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	462a      	mov	r2, r5
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <_vfiprintf_r+0x258>)
 80097a8:	a904      	add	r1, sp, #16
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7fe f860 	bl	8007870 <_printf_i>
 80097b0:	e7e4      	b.n	800977c <_vfiprintf_r+0x208>
 80097b2:	bf00      	nop
 80097b4:	0800b87c 	.word	0x0800b87c
 80097b8:	0800b89c 	.word	0x0800b89c
 80097bc:	0800b85c 	.word	0x0800b85c
 80097c0:	0800b704 	.word	0x0800b704
 80097c4:	0800b70e 	.word	0x0800b70e
 80097c8:	08007329 	.word	0x08007329
 80097cc:	08009551 	.word	0x08009551
 80097d0:	0800b70a 	.word	0x0800b70a

080097d4 <__swbuf_r>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	460e      	mov	r6, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	4605      	mov	r5, r0
 80097dc:	b118      	cbz	r0, 80097e6 <__swbuf_r+0x12>
 80097de:	6983      	ldr	r3, [r0, #24]
 80097e0:	b90b      	cbnz	r3, 80097e6 <__swbuf_r+0x12>
 80097e2:	f000 f9e7 	bl	8009bb4 <__sinit>
 80097e6:	4b21      	ldr	r3, [pc, #132]	; (800986c <__swbuf_r+0x98>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d12b      	bne.n	8009844 <__swbuf_r+0x70>
 80097ec:	686c      	ldr	r4, [r5, #4]
 80097ee:	69a3      	ldr	r3, [r4, #24]
 80097f0:	60a3      	str	r3, [r4, #8]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	071a      	lsls	r2, r3, #28
 80097f6:	d52f      	bpl.n	8009858 <__swbuf_r+0x84>
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	b36b      	cbz	r3, 8009858 <__swbuf_r+0x84>
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	6820      	ldr	r0, [r4, #0]
 8009800:	1ac0      	subs	r0, r0, r3
 8009802:	6963      	ldr	r3, [r4, #20]
 8009804:	b2f6      	uxtb	r6, r6
 8009806:	4283      	cmp	r3, r0
 8009808:	4637      	mov	r7, r6
 800980a:	dc04      	bgt.n	8009816 <__swbuf_r+0x42>
 800980c:	4621      	mov	r1, r4
 800980e:	4628      	mov	r0, r5
 8009810:	f000 f93c 	bl	8009a8c <_fflush_r>
 8009814:	bb30      	cbnz	r0, 8009864 <__swbuf_r+0x90>
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	3b01      	subs	r3, #1
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	6022      	str	r2, [r4, #0]
 8009822:	701e      	strb	r6, [r3, #0]
 8009824:	6963      	ldr	r3, [r4, #20]
 8009826:	3001      	adds	r0, #1
 8009828:	4283      	cmp	r3, r0
 800982a:	d004      	beq.n	8009836 <__swbuf_r+0x62>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	07db      	lsls	r3, r3, #31
 8009830:	d506      	bpl.n	8009840 <__swbuf_r+0x6c>
 8009832:	2e0a      	cmp	r6, #10
 8009834:	d104      	bne.n	8009840 <__swbuf_r+0x6c>
 8009836:	4621      	mov	r1, r4
 8009838:	4628      	mov	r0, r5
 800983a:	f000 f927 	bl	8009a8c <_fflush_r>
 800983e:	b988      	cbnz	r0, 8009864 <__swbuf_r+0x90>
 8009840:	4638      	mov	r0, r7
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <__swbuf_r+0x9c>)
 8009846:	429c      	cmp	r4, r3
 8009848:	d101      	bne.n	800984e <__swbuf_r+0x7a>
 800984a:	68ac      	ldr	r4, [r5, #8]
 800984c:	e7cf      	b.n	80097ee <__swbuf_r+0x1a>
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <__swbuf_r+0xa0>)
 8009850:	429c      	cmp	r4, r3
 8009852:	bf08      	it	eq
 8009854:	68ec      	ldreq	r4, [r5, #12]
 8009856:	e7ca      	b.n	80097ee <__swbuf_r+0x1a>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f81a 	bl	8009894 <__swsetup_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	d0cb      	beq.n	80097fc <__swbuf_r+0x28>
 8009864:	f04f 37ff 	mov.w	r7, #4294967295
 8009868:	e7ea      	b.n	8009840 <__swbuf_r+0x6c>
 800986a:	bf00      	nop
 800986c:	0800b87c 	.word	0x0800b87c
 8009870:	0800b89c 	.word	0x0800b89c
 8009874:	0800b85c 	.word	0x0800b85c

08009878 <__ascii_wctomb>:
 8009878:	b149      	cbz	r1, 800988e <__ascii_wctomb+0x16>
 800987a:	2aff      	cmp	r2, #255	; 0xff
 800987c:	bf85      	ittet	hi
 800987e:	238a      	movhi	r3, #138	; 0x8a
 8009880:	6003      	strhi	r3, [r0, #0]
 8009882:	700a      	strbls	r2, [r1, #0]
 8009884:	f04f 30ff 	movhi.w	r0, #4294967295
 8009888:	bf98      	it	ls
 800988a:	2001      	movls	r0, #1
 800988c:	4770      	bx	lr
 800988e:	4608      	mov	r0, r1
 8009890:	4770      	bx	lr
	...

08009894 <__swsetup_r>:
 8009894:	4b32      	ldr	r3, [pc, #200]	; (8009960 <__swsetup_r+0xcc>)
 8009896:	b570      	push	{r4, r5, r6, lr}
 8009898:	681d      	ldr	r5, [r3, #0]
 800989a:	4606      	mov	r6, r0
 800989c:	460c      	mov	r4, r1
 800989e:	b125      	cbz	r5, 80098aa <__swsetup_r+0x16>
 80098a0:	69ab      	ldr	r3, [r5, #24]
 80098a2:	b913      	cbnz	r3, 80098aa <__swsetup_r+0x16>
 80098a4:	4628      	mov	r0, r5
 80098a6:	f000 f985 	bl	8009bb4 <__sinit>
 80098aa:	4b2e      	ldr	r3, [pc, #184]	; (8009964 <__swsetup_r+0xd0>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d10f      	bne.n	80098d0 <__swsetup_r+0x3c>
 80098b0:	686c      	ldr	r4, [r5, #4]
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b8:	0719      	lsls	r1, r3, #28
 80098ba:	d42c      	bmi.n	8009916 <__swsetup_r+0x82>
 80098bc:	06dd      	lsls	r5, r3, #27
 80098be:	d411      	bmi.n	80098e4 <__swsetup_r+0x50>
 80098c0:	2309      	movs	r3, #9
 80098c2:	6033      	str	r3, [r6, #0]
 80098c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	f04f 30ff 	mov.w	r0, #4294967295
 80098ce:	e03e      	b.n	800994e <__swsetup_r+0xba>
 80098d0:	4b25      	ldr	r3, [pc, #148]	; (8009968 <__swsetup_r+0xd4>)
 80098d2:	429c      	cmp	r4, r3
 80098d4:	d101      	bne.n	80098da <__swsetup_r+0x46>
 80098d6:	68ac      	ldr	r4, [r5, #8]
 80098d8:	e7eb      	b.n	80098b2 <__swsetup_r+0x1e>
 80098da:	4b24      	ldr	r3, [pc, #144]	; (800996c <__swsetup_r+0xd8>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	bf08      	it	eq
 80098e0:	68ec      	ldreq	r4, [r5, #12]
 80098e2:	e7e6      	b.n	80098b2 <__swsetup_r+0x1e>
 80098e4:	0758      	lsls	r0, r3, #29
 80098e6:	d512      	bpl.n	800990e <__swsetup_r+0x7a>
 80098e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ea:	b141      	cbz	r1, 80098fe <__swsetup_r+0x6a>
 80098ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f0:	4299      	cmp	r1, r3
 80098f2:	d002      	beq.n	80098fa <__swsetup_r+0x66>
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff fb31 	bl	8008f5c <_free_r>
 80098fa:	2300      	movs	r3, #0
 80098fc:	6363      	str	r3, [r4, #52]	; 0x34
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009904:	81a3      	strh	r3, [r4, #12]
 8009906:	2300      	movs	r3, #0
 8009908:	6063      	str	r3, [r4, #4]
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	f043 0308 	orr.w	r3, r3, #8
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	b94b      	cbnz	r3, 800992e <__swsetup_r+0x9a>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009924:	d003      	beq.n	800992e <__swsetup_r+0x9a>
 8009926:	4621      	mov	r1, r4
 8009928:	4630      	mov	r0, r6
 800992a:	f000 fa09 	bl	8009d40 <__smakebuf_r>
 800992e:	89a0      	ldrh	r0, [r4, #12]
 8009930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009934:	f010 0301 	ands.w	r3, r0, #1
 8009938:	d00a      	beq.n	8009950 <__swsetup_r+0xbc>
 800993a:	2300      	movs	r3, #0
 800993c:	60a3      	str	r3, [r4, #8]
 800993e:	6963      	ldr	r3, [r4, #20]
 8009940:	425b      	negs	r3, r3
 8009942:	61a3      	str	r3, [r4, #24]
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	b943      	cbnz	r3, 800995a <__swsetup_r+0xc6>
 8009948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800994c:	d1ba      	bne.n	80098c4 <__swsetup_r+0x30>
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	0781      	lsls	r1, r0, #30
 8009952:	bf58      	it	pl
 8009954:	6963      	ldrpl	r3, [r4, #20]
 8009956:	60a3      	str	r3, [r4, #8]
 8009958:	e7f4      	b.n	8009944 <__swsetup_r+0xb0>
 800995a:	2000      	movs	r0, #0
 800995c:	e7f7      	b.n	800994e <__swsetup_r+0xba>
 800995e:	bf00      	nop
 8009960:	20000018 	.word	0x20000018
 8009964:	0800b87c 	.word	0x0800b87c
 8009968:	0800b89c 	.word	0x0800b89c
 800996c:	0800b85c 	.word	0x0800b85c

08009970 <abort>:
 8009970:	b508      	push	{r3, lr}
 8009972:	2006      	movs	r0, #6
 8009974:	f000 fa54 	bl	8009e20 <raise>
 8009978:	2001      	movs	r0, #1
 800997a:	f7f8 ffbb 	bl	80028f4 <_exit>
	...

08009980 <__sflush_r>:
 8009980:	898a      	ldrh	r2, [r1, #12]
 8009982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	4605      	mov	r5, r0
 8009988:	0710      	lsls	r0, r2, #28
 800998a:	460c      	mov	r4, r1
 800998c:	d458      	bmi.n	8009a40 <__sflush_r+0xc0>
 800998e:	684b      	ldr	r3, [r1, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	dc05      	bgt.n	80099a0 <__sflush_r+0x20>
 8009994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	dc02      	bgt.n	80099a0 <__sflush_r+0x20>
 800999a:	2000      	movs	r0, #0
 800999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d0f9      	beq.n	800999a <__sflush_r+0x1a>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099ac:	682f      	ldr	r7, [r5, #0]
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	d032      	beq.n	8009a18 <__sflush_r+0x98>
 80099b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	075a      	lsls	r2, r3, #29
 80099b8:	d505      	bpl.n	80099c6 <__sflush_r+0x46>
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	1ac0      	subs	r0, r0, r3
 80099be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099c0:	b10b      	cbz	r3, 80099c6 <__sflush_r+0x46>
 80099c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099c4:	1ac0      	subs	r0, r0, r3
 80099c6:	2300      	movs	r3, #0
 80099c8:	4602      	mov	r2, r0
 80099ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099cc:	6a21      	ldr	r1, [r4, #32]
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b0      	blx	r6
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	d106      	bne.n	80099e6 <__sflush_r+0x66>
 80099d8:	6829      	ldr	r1, [r5, #0]
 80099da:	291d      	cmp	r1, #29
 80099dc:	d82c      	bhi.n	8009a38 <__sflush_r+0xb8>
 80099de:	4a2a      	ldr	r2, [pc, #168]	; (8009a88 <__sflush_r+0x108>)
 80099e0:	40ca      	lsrs	r2, r1
 80099e2:	07d6      	lsls	r6, r2, #31
 80099e4:	d528      	bpl.n	8009a38 <__sflush_r+0xb8>
 80099e6:	2200      	movs	r2, #0
 80099e8:	6062      	str	r2, [r4, #4]
 80099ea:	04d9      	lsls	r1, r3, #19
 80099ec:	6922      	ldr	r2, [r4, #16]
 80099ee:	6022      	str	r2, [r4, #0]
 80099f0:	d504      	bpl.n	80099fc <__sflush_r+0x7c>
 80099f2:	1c42      	adds	r2, r0, #1
 80099f4:	d101      	bne.n	80099fa <__sflush_r+0x7a>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b903      	cbnz	r3, 80099fc <__sflush_r+0x7c>
 80099fa:	6560      	str	r0, [r4, #84]	; 0x54
 80099fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099fe:	602f      	str	r7, [r5, #0]
 8009a00:	2900      	cmp	r1, #0
 8009a02:	d0ca      	beq.n	800999a <__sflush_r+0x1a>
 8009a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d002      	beq.n	8009a12 <__sflush_r+0x92>
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f7ff faa5 	bl	8008f5c <_free_r>
 8009a12:	2000      	movs	r0, #0
 8009a14:	6360      	str	r0, [r4, #52]	; 0x34
 8009a16:	e7c1      	b.n	800999c <__sflush_r+0x1c>
 8009a18:	6a21      	ldr	r1, [r4, #32]
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b0      	blx	r6
 8009a20:	1c41      	adds	r1, r0, #1
 8009a22:	d1c7      	bne.n	80099b4 <__sflush_r+0x34>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0c4      	beq.n	80099b4 <__sflush_r+0x34>
 8009a2a:	2b1d      	cmp	r3, #29
 8009a2c:	d001      	beq.n	8009a32 <__sflush_r+0xb2>
 8009a2e:	2b16      	cmp	r3, #22
 8009a30:	d101      	bne.n	8009a36 <__sflush_r+0xb6>
 8009a32:	602f      	str	r7, [r5, #0]
 8009a34:	e7b1      	b.n	800999a <__sflush_r+0x1a>
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	e7ad      	b.n	800999c <__sflush_r+0x1c>
 8009a40:	690f      	ldr	r7, [r1, #16]
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	d0a9      	beq.n	800999a <__sflush_r+0x1a>
 8009a46:	0793      	lsls	r3, r2, #30
 8009a48:	680e      	ldr	r6, [r1, #0]
 8009a4a:	bf08      	it	eq
 8009a4c:	694b      	ldreq	r3, [r1, #20]
 8009a4e:	600f      	str	r7, [r1, #0]
 8009a50:	bf18      	it	ne
 8009a52:	2300      	movne	r3, #0
 8009a54:	eba6 0807 	sub.w	r8, r6, r7
 8009a58:	608b      	str	r3, [r1, #8]
 8009a5a:	f1b8 0f00 	cmp.w	r8, #0
 8009a5e:	dd9c      	ble.n	800999a <__sflush_r+0x1a>
 8009a60:	6a21      	ldr	r1, [r4, #32]
 8009a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a64:	4643      	mov	r3, r8
 8009a66:	463a      	mov	r2, r7
 8009a68:	4628      	mov	r0, r5
 8009a6a:	47b0      	blx	r6
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	dc06      	bgt.n	8009a7e <__sflush_r+0xfe>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	e78e      	b.n	800999c <__sflush_r+0x1c>
 8009a7e:	4407      	add	r7, r0
 8009a80:	eba8 0800 	sub.w	r8, r8, r0
 8009a84:	e7e9      	b.n	8009a5a <__sflush_r+0xda>
 8009a86:	bf00      	nop
 8009a88:	20400001 	.word	0x20400001

08009a8c <_fflush_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	690b      	ldr	r3, [r1, #16]
 8009a90:	4605      	mov	r5, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b913      	cbnz	r3, 8009a9c <_fflush_r+0x10>
 8009a96:	2500      	movs	r5, #0
 8009a98:	4628      	mov	r0, r5
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	b118      	cbz	r0, 8009aa6 <_fflush_r+0x1a>
 8009a9e:	6983      	ldr	r3, [r0, #24]
 8009aa0:	b90b      	cbnz	r3, 8009aa6 <_fflush_r+0x1a>
 8009aa2:	f000 f887 	bl	8009bb4 <__sinit>
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <_fflush_r+0x6c>)
 8009aa8:	429c      	cmp	r4, r3
 8009aaa:	d11b      	bne.n	8009ae4 <_fflush_r+0x58>
 8009aac:	686c      	ldr	r4, [r5, #4]
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0ef      	beq.n	8009a96 <_fflush_r+0xa>
 8009ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab8:	07d0      	lsls	r0, r2, #31
 8009aba:	d404      	bmi.n	8009ac6 <_fflush_r+0x3a>
 8009abc:	0599      	lsls	r1, r3, #22
 8009abe:	d402      	bmi.n	8009ac6 <_fflush_r+0x3a>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac2:	f000 f915 	bl	8009cf0 <__retarget_lock_acquire_recursive>
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	4621      	mov	r1, r4
 8009aca:	f7ff ff59 	bl	8009980 <__sflush_r>
 8009ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad0:	07da      	lsls	r2, r3, #31
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	d4e0      	bmi.n	8009a98 <_fflush_r+0xc>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	059b      	lsls	r3, r3, #22
 8009ada:	d4dd      	bmi.n	8009a98 <_fflush_r+0xc>
 8009adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ade:	f000 f908 	bl	8009cf2 <__retarget_lock_release_recursive>
 8009ae2:	e7d9      	b.n	8009a98 <_fflush_r+0xc>
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <_fflush_r+0x70>)
 8009ae6:	429c      	cmp	r4, r3
 8009ae8:	d101      	bne.n	8009aee <_fflush_r+0x62>
 8009aea:	68ac      	ldr	r4, [r5, #8]
 8009aec:	e7df      	b.n	8009aae <_fflush_r+0x22>
 8009aee:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <_fflush_r+0x74>)
 8009af0:	429c      	cmp	r4, r3
 8009af2:	bf08      	it	eq
 8009af4:	68ec      	ldreq	r4, [r5, #12]
 8009af6:	e7da      	b.n	8009aae <_fflush_r+0x22>
 8009af8:	0800b87c 	.word	0x0800b87c
 8009afc:	0800b89c 	.word	0x0800b89c
 8009b00:	0800b85c 	.word	0x0800b85c

08009b04 <std>:
 8009b04:	2300      	movs	r3, #0
 8009b06:	b510      	push	{r4, lr}
 8009b08:	4604      	mov	r4, r0
 8009b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b12:	6083      	str	r3, [r0, #8]
 8009b14:	8181      	strh	r1, [r0, #12]
 8009b16:	6643      	str	r3, [r0, #100]	; 0x64
 8009b18:	81c2      	strh	r2, [r0, #14]
 8009b1a:	6183      	str	r3, [r0, #24]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	2208      	movs	r2, #8
 8009b20:	305c      	adds	r0, #92	; 0x5c
 8009b22:	f7fd fb59 	bl	80071d8 <memset>
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x38>)
 8009b28:	6263      	str	r3, [r4, #36]	; 0x24
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <std+0x3c>)
 8009b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <std+0x40>)
 8009b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b32:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <std+0x44>)
 8009b34:	6224      	str	r4, [r4, #32]
 8009b36:	6323      	str	r3, [r4, #48]	; 0x30
 8009b38:	bd10      	pop	{r4, pc}
 8009b3a:	bf00      	nop
 8009b3c:	08009e59 	.word	0x08009e59
 8009b40:	08009e7b 	.word	0x08009e7b
 8009b44:	08009eb3 	.word	0x08009eb3
 8009b48:	08009ed7 	.word	0x08009ed7

08009b4c <_cleanup_r>:
 8009b4c:	4901      	ldr	r1, [pc, #4]	; (8009b54 <_cleanup_r+0x8>)
 8009b4e:	f000 b8af 	b.w	8009cb0 <_fwalk_reent>
 8009b52:	bf00      	nop
 8009b54:	08009a8d 	.word	0x08009a8d

08009b58 <__sfmoreglue>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	2268      	movs	r2, #104	; 0x68
 8009b5c:	1e4d      	subs	r5, r1, #1
 8009b5e:	4355      	muls	r5, r2
 8009b60:	460e      	mov	r6, r1
 8009b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b66:	f7ff fa65 	bl	8009034 <_malloc_r>
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	b140      	cbz	r0, 8009b80 <__sfmoreglue+0x28>
 8009b6e:	2100      	movs	r1, #0
 8009b70:	e9c0 1600 	strd	r1, r6, [r0]
 8009b74:	300c      	adds	r0, #12
 8009b76:	60a0      	str	r0, [r4, #8]
 8009b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b7c:	f7fd fb2c 	bl	80071d8 <memset>
 8009b80:	4620      	mov	r0, r4
 8009b82:	bd70      	pop	{r4, r5, r6, pc}

08009b84 <__sfp_lock_acquire>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__sfp_lock_acquire+0x8>)
 8009b86:	f000 b8b3 	b.w	8009cf0 <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	200005fd 	.word	0x200005fd

08009b90 <__sfp_lock_release>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__sfp_lock_release+0x8>)
 8009b92:	f000 b8ae 	b.w	8009cf2 <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	200005fd 	.word	0x200005fd

08009b9c <__sinit_lock_acquire>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	; (8009ba4 <__sinit_lock_acquire+0x8>)
 8009b9e:	f000 b8a7 	b.w	8009cf0 <__retarget_lock_acquire_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	200005fe 	.word	0x200005fe

08009ba8 <__sinit_lock_release>:
 8009ba8:	4801      	ldr	r0, [pc, #4]	; (8009bb0 <__sinit_lock_release+0x8>)
 8009baa:	f000 b8a2 	b.w	8009cf2 <__retarget_lock_release_recursive>
 8009bae:	bf00      	nop
 8009bb0:	200005fe 	.word	0x200005fe

08009bb4 <__sinit>:
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	f7ff fff0 	bl	8009b9c <__sinit_lock_acquire>
 8009bbc:	69a3      	ldr	r3, [r4, #24]
 8009bbe:	b11b      	cbz	r3, 8009bc8 <__sinit+0x14>
 8009bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc4:	f7ff bff0 	b.w	8009ba8 <__sinit_lock_release>
 8009bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <__sinit+0x68>)
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <__sinit+0x6c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bd6:	42a3      	cmp	r3, r4
 8009bd8:	bf04      	itt	eq
 8009bda:	2301      	moveq	r3, #1
 8009bdc:	61a3      	streq	r3, [r4, #24]
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 f820 	bl	8009c24 <__sfp>
 8009be4:	6060      	str	r0, [r4, #4]
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 f81c 	bl	8009c24 <__sfp>
 8009bec:	60a0      	str	r0, [r4, #8]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f818 	bl	8009c24 <__sfp>
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	60e0      	str	r0, [r4, #12]
 8009bf8:	2104      	movs	r1, #4
 8009bfa:	6860      	ldr	r0, [r4, #4]
 8009bfc:	f7ff ff82 	bl	8009b04 <std>
 8009c00:	68a0      	ldr	r0, [r4, #8]
 8009c02:	2201      	movs	r2, #1
 8009c04:	2109      	movs	r1, #9
 8009c06:	f7ff ff7d 	bl	8009b04 <std>
 8009c0a:	68e0      	ldr	r0, [r4, #12]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	2112      	movs	r1, #18
 8009c10:	f7ff ff78 	bl	8009b04 <std>
 8009c14:	2301      	movs	r3, #1
 8009c16:	61a3      	str	r3, [r4, #24]
 8009c18:	e7d2      	b.n	8009bc0 <__sinit+0xc>
 8009c1a:	bf00      	nop
 8009c1c:	0800b4e4 	.word	0x0800b4e4
 8009c20:	08009b4d 	.word	0x08009b4d

08009c24 <__sfp>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	4607      	mov	r7, r0
 8009c28:	f7ff ffac 	bl	8009b84 <__sfp_lock_acquire>
 8009c2c:	4b1e      	ldr	r3, [pc, #120]	; (8009ca8 <__sfp+0x84>)
 8009c2e:	681e      	ldr	r6, [r3, #0]
 8009c30:	69b3      	ldr	r3, [r6, #24]
 8009c32:	b913      	cbnz	r3, 8009c3a <__sfp+0x16>
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff ffbd 	bl	8009bb4 <__sinit>
 8009c3a:	3648      	adds	r6, #72	; 0x48
 8009c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	d503      	bpl.n	8009c4c <__sfp+0x28>
 8009c44:	6833      	ldr	r3, [r6, #0]
 8009c46:	b30b      	cbz	r3, 8009c8c <__sfp+0x68>
 8009c48:	6836      	ldr	r6, [r6, #0]
 8009c4a:	e7f7      	b.n	8009c3c <__sfp+0x18>
 8009c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c50:	b9d5      	cbnz	r5, 8009c88 <__sfp+0x64>
 8009c52:	4b16      	ldr	r3, [pc, #88]	; (8009cac <__sfp+0x88>)
 8009c54:	60e3      	str	r3, [r4, #12]
 8009c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c5c:	f000 f847 	bl	8009cee <__retarget_lock_init_recursive>
 8009c60:	f7ff ff96 	bl	8009b90 <__sfp_lock_release>
 8009c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c6c:	6025      	str	r5, [r4, #0]
 8009c6e:	61a5      	str	r5, [r4, #24]
 8009c70:	2208      	movs	r2, #8
 8009c72:	4629      	mov	r1, r5
 8009c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c78:	f7fd faae 	bl	80071d8 <memset>
 8009c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c84:	4620      	mov	r0, r4
 8009c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c88:	3468      	adds	r4, #104	; 0x68
 8009c8a:	e7d9      	b.n	8009c40 <__sfp+0x1c>
 8009c8c:	2104      	movs	r1, #4
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f7ff ff62 	bl	8009b58 <__sfmoreglue>
 8009c94:	4604      	mov	r4, r0
 8009c96:	6030      	str	r0, [r6, #0]
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d1d5      	bne.n	8009c48 <__sfp+0x24>
 8009c9c:	f7ff ff78 	bl	8009b90 <__sfp_lock_release>
 8009ca0:	230c      	movs	r3, #12
 8009ca2:	603b      	str	r3, [r7, #0]
 8009ca4:	e7ee      	b.n	8009c84 <__sfp+0x60>
 8009ca6:	bf00      	nop
 8009ca8:	0800b4e4 	.word	0x0800b4e4
 8009cac:	ffff0001 	.word	0xffff0001

08009cb0 <_fwalk_reent>:
 8009cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	4688      	mov	r8, r1
 8009cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cbc:	2700      	movs	r7, #0
 8009cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8009cc6:	d505      	bpl.n	8009cd4 <_fwalk_reent+0x24>
 8009cc8:	6824      	ldr	r4, [r4, #0]
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	d1f7      	bne.n	8009cbe <_fwalk_reent+0xe>
 8009cce:	4638      	mov	r0, r7
 8009cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd4:	89ab      	ldrh	r3, [r5, #12]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d907      	bls.n	8009cea <_fwalk_reent+0x3a>
 8009cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	d003      	beq.n	8009cea <_fwalk_reent+0x3a>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	47c0      	blx	r8
 8009ce8:	4307      	orrs	r7, r0
 8009cea:	3568      	adds	r5, #104	; 0x68
 8009cec:	e7e9      	b.n	8009cc2 <_fwalk_reent+0x12>

08009cee <__retarget_lock_init_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <__retarget_lock_acquire_recursive>:
 8009cf0:	4770      	bx	lr

08009cf2 <__retarget_lock_release_recursive>:
 8009cf2:	4770      	bx	lr

08009cf4 <__swhatbuf_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	460e      	mov	r6, r1
 8009cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	b096      	sub	sp, #88	; 0x58
 8009d00:	4614      	mov	r4, r2
 8009d02:	461d      	mov	r5, r3
 8009d04:	da08      	bge.n	8009d18 <__swhatbuf_r+0x24>
 8009d06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	602a      	str	r2, [r5, #0]
 8009d0e:	061a      	lsls	r2, r3, #24
 8009d10:	d410      	bmi.n	8009d34 <__swhatbuf_r+0x40>
 8009d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d16:	e00e      	b.n	8009d36 <__swhatbuf_r+0x42>
 8009d18:	466a      	mov	r2, sp
 8009d1a:	f000 f903 	bl	8009f24 <_fstat_r>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	dbf1      	blt.n	8009d06 <__swhatbuf_r+0x12>
 8009d22:	9a01      	ldr	r2, [sp, #4]
 8009d24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d2c:	425a      	negs	r2, r3
 8009d2e:	415a      	adcs	r2, r3
 8009d30:	602a      	str	r2, [r5, #0]
 8009d32:	e7ee      	b.n	8009d12 <__swhatbuf_r+0x1e>
 8009d34:	2340      	movs	r3, #64	; 0x40
 8009d36:	2000      	movs	r0, #0
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	b016      	add	sp, #88	; 0x58
 8009d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d40 <__smakebuf_r>:
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d44:	079d      	lsls	r5, r3, #30
 8009d46:	4606      	mov	r6, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	d507      	bpl.n	8009d5c <__smakebuf_r+0x1c>
 8009d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	2301      	movs	r3, #1
 8009d56:	6163      	str	r3, [r4, #20]
 8009d58:	b002      	add	sp, #8
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	ab01      	add	r3, sp, #4
 8009d5e:	466a      	mov	r2, sp
 8009d60:	f7ff ffc8 	bl	8009cf4 <__swhatbuf_r>
 8009d64:	9900      	ldr	r1, [sp, #0]
 8009d66:	4605      	mov	r5, r0
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f7ff f963 	bl	8009034 <_malloc_r>
 8009d6e:	b948      	cbnz	r0, 8009d84 <__smakebuf_r+0x44>
 8009d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d74:	059a      	lsls	r2, r3, #22
 8009d76:	d4ef      	bmi.n	8009d58 <__smakebuf_r+0x18>
 8009d78:	f023 0303 	bic.w	r3, r3, #3
 8009d7c:	f043 0302 	orr.w	r3, r3, #2
 8009d80:	81a3      	strh	r3, [r4, #12]
 8009d82:	e7e3      	b.n	8009d4c <__smakebuf_r+0xc>
 8009d84:	4b0d      	ldr	r3, [pc, #52]	; (8009dbc <__smakebuf_r+0x7c>)
 8009d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	6020      	str	r0, [r4, #0]
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	9b00      	ldr	r3, [sp, #0]
 8009d94:	6163      	str	r3, [r4, #20]
 8009d96:	9b01      	ldr	r3, [sp, #4]
 8009d98:	6120      	str	r0, [r4, #16]
 8009d9a:	b15b      	cbz	r3, 8009db4 <__smakebuf_r+0x74>
 8009d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009da0:	4630      	mov	r0, r6
 8009da2:	f000 f8d1 	bl	8009f48 <_isatty_r>
 8009da6:	b128      	cbz	r0, 8009db4 <__smakebuf_r+0x74>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	f043 0301 	orr.w	r3, r3, #1
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	89a0      	ldrh	r0, [r4, #12]
 8009db6:	4305      	orrs	r5, r0
 8009db8:	81a5      	strh	r5, [r4, #12]
 8009dba:	e7cd      	b.n	8009d58 <__smakebuf_r+0x18>
 8009dbc:	08009b4d 	.word	0x08009b4d

08009dc0 <_malloc_usable_size_r>:
 8009dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc4:	1f18      	subs	r0, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfbc      	itt	lt
 8009dca:	580b      	ldrlt	r3, [r1, r0]
 8009dcc:	18c0      	addlt	r0, r0, r3
 8009dce:	4770      	bx	lr

08009dd0 <_raise_r>:
 8009dd0:	291f      	cmp	r1, #31
 8009dd2:	b538      	push	{r3, r4, r5, lr}
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	d904      	bls.n	8009de4 <_raise_r+0x14>
 8009dda:	2316      	movs	r3, #22
 8009ddc:	6003      	str	r3, [r0, #0]
 8009dde:	f04f 30ff 	mov.w	r0, #4294967295
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009de6:	b112      	cbz	r2, 8009dee <_raise_r+0x1e>
 8009de8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dec:	b94b      	cbnz	r3, 8009e02 <_raise_r+0x32>
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 f830 	bl	8009e54 <_getpid_r>
 8009df4:	462a      	mov	r2, r5
 8009df6:	4601      	mov	r1, r0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dfe:	f000 b817 	b.w	8009e30 <_kill_r>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d00a      	beq.n	8009e1c <_raise_r+0x4c>
 8009e06:	1c59      	adds	r1, r3, #1
 8009e08:	d103      	bne.n	8009e12 <_raise_r+0x42>
 8009e0a:	2316      	movs	r3, #22
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7e7      	b.n	8009de2 <_raise_r+0x12>
 8009e12:	2400      	movs	r4, #0
 8009e14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e18:	4628      	mov	r0, r5
 8009e1a:	4798      	blx	r3
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7e0      	b.n	8009de2 <_raise_r+0x12>

08009e20 <raise>:
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <raise+0xc>)
 8009e22:	4601      	mov	r1, r0
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f7ff bfd3 	b.w	8009dd0 <_raise_r>
 8009e2a:	bf00      	nop
 8009e2c:	20000018 	.word	0x20000018

08009e30 <_kill_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d07      	ldr	r5, [pc, #28]	; (8009e50 <_kill_r+0x20>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	f7f8 fd49 	bl	80028d4 <_kill>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d102      	bne.n	8009e4c <_kill_r+0x1c>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	b103      	cbz	r3, 8009e4c <_kill_r+0x1c>
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	bd38      	pop	{r3, r4, r5, pc}
 8009e4e:	bf00      	nop
 8009e50:	200005f8 	.word	0x200005f8

08009e54 <_getpid_r>:
 8009e54:	f7f8 bd36 	b.w	80028c4 <_getpid>

08009e58 <__sread>:
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e60:	f000 f894 	bl	8009f8c <_read_r>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	bfab      	itete	ge
 8009e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e6c:	181b      	addge	r3, r3, r0
 8009e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e72:	bfac      	ite	ge
 8009e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e76:	81a3      	strhlt	r3, [r4, #12]
 8009e78:	bd10      	pop	{r4, pc}

08009e7a <__swrite>:
 8009e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7e:	461f      	mov	r7, r3
 8009e80:	898b      	ldrh	r3, [r1, #12]
 8009e82:	05db      	lsls	r3, r3, #23
 8009e84:	4605      	mov	r5, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	4616      	mov	r6, r2
 8009e8a:	d505      	bpl.n	8009e98 <__swrite+0x1e>
 8009e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e90:	2302      	movs	r3, #2
 8009e92:	2200      	movs	r2, #0
 8009e94:	f000 f868 	bl	8009f68 <_lseek_r>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	4632      	mov	r2, r6
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eae:	f000 b817 	b.w	8009ee0 <_write_r>

08009eb2 <__sseek>:
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eba:	f000 f855 	bl	8009f68 <_lseek_r>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	bf15      	itete	ne
 8009ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ece:	81a3      	strheq	r3, [r4, #12]
 8009ed0:	bf18      	it	ne
 8009ed2:	81a3      	strhne	r3, [r4, #12]
 8009ed4:	bd10      	pop	{r4, pc}

08009ed6 <__sclose>:
 8009ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eda:	f000 b813 	b.w	8009f04 <_close_r>
	...

08009ee0 <_write_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d07      	ldr	r5, [pc, #28]	; (8009f00 <_write_r+0x20>)
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4611      	mov	r1, r2
 8009eea:	2200      	movs	r2, #0
 8009eec:	602a      	str	r2, [r5, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f7f8 fd27 	bl	8002942 <_write>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d102      	bne.n	8009efe <_write_r+0x1e>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	b103      	cbz	r3, 8009efe <_write_r+0x1e>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	200005f8 	.word	0x200005f8

08009f04 <_close_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d06      	ldr	r5, [pc, #24]	; (8009f20 <_close_r+0x1c>)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	602b      	str	r3, [r5, #0]
 8009f10:	f7f8 fd33 	bl	800297a <_close>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_close_r+0x1a>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_close_r+0x1a>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	200005f8 	.word	0x200005f8

08009f24 <_fstat_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	; (8009f44 <_fstat_r+0x20>)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	4611      	mov	r1, r2
 8009f30:	602b      	str	r3, [r5, #0]
 8009f32:	f7f8 fd2e 	bl	8002992 <_fstat>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	d102      	bne.n	8009f40 <_fstat_r+0x1c>
 8009f3a:	682b      	ldr	r3, [r5, #0]
 8009f3c:	b103      	cbz	r3, 8009f40 <_fstat_r+0x1c>
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	bd38      	pop	{r3, r4, r5, pc}
 8009f42:	bf00      	nop
 8009f44:	200005f8 	.word	0x200005f8

08009f48 <_isatty_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d06      	ldr	r5, [pc, #24]	; (8009f64 <_isatty_r+0x1c>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f7f8 fd2d 	bl	80029b2 <_isatty>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_isatty_r+0x1a>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_isatty_r+0x1a>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	200005f8 	.word	0x200005f8

08009f68 <_lseek_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4d07      	ldr	r5, [pc, #28]	; (8009f88 <_lseek_r+0x20>)
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	4608      	mov	r0, r1
 8009f70:	4611      	mov	r1, r2
 8009f72:	2200      	movs	r2, #0
 8009f74:	602a      	str	r2, [r5, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f7f8 fd26 	bl	80029c8 <_lseek>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_lseek_r+0x1e>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_lseek_r+0x1e>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	200005f8 	.word	0x200005f8

08009f8c <_read_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d07      	ldr	r5, [pc, #28]	; (8009fac <_read_r+0x20>)
 8009f90:	4604      	mov	r4, r0
 8009f92:	4608      	mov	r0, r1
 8009f94:	4611      	mov	r1, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7f8 fcb4 	bl	8002908 <_read>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_read_r+0x1e>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_read_r+0x1e>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	200005f8 	.word	0x200005f8

08009fb0 <atan>:
 8009fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	ec55 4b10 	vmov	r4, r5, d0
 8009fb8:	4bc3      	ldr	r3, [pc, #780]	; (800a2c8 <atan+0x318>)
 8009fba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009fbe:	429e      	cmp	r6, r3
 8009fc0:	46ab      	mov	fp, r5
 8009fc2:	dd18      	ble.n	8009ff6 <atan+0x46>
 8009fc4:	4bc1      	ldr	r3, [pc, #772]	; (800a2cc <atan+0x31c>)
 8009fc6:	429e      	cmp	r6, r3
 8009fc8:	dc01      	bgt.n	8009fce <atan+0x1e>
 8009fca:	d109      	bne.n	8009fe0 <atan+0x30>
 8009fcc:	b144      	cbz	r4, 8009fe0 <atan+0x30>
 8009fce:	4622      	mov	r2, r4
 8009fd0:	462b      	mov	r3, r5
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	f7f6 f979 	bl	80002cc <__adddf3>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
 8009fde:	e006      	b.n	8009fee <atan+0x3e>
 8009fe0:	f1bb 0f00 	cmp.w	fp, #0
 8009fe4:	f300 8131 	bgt.w	800a24a <atan+0x29a>
 8009fe8:	a59b      	add	r5, pc, #620	; (adr r5, 800a258 <atan+0x2a8>)
 8009fea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fee:	ec45 4b10 	vmov	d0, r4, r5
 8009ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	4bb6      	ldr	r3, [pc, #728]	; (800a2d0 <atan+0x320>)
 8009ff8:	429e      	cmp	r6, r3
 8009ffa:	dc14      	bgt.n	800a026 <atan+0x76>
 8009ffc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a000:	429e      	cmp	r6, r3
 800a002:	dc0d      	bgt.n	800a020 <atan+0x70>
 800a004:	a396      	add	r3, pc, #600	; (adr r3, 800a260 <atan+0x2b0>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	ee10 0a10 	vmov	r0, s0
 800a00e:	4629      	mov	r1, r5
 800a010:	f7f6 f95c 	bl	80002cc <__adddf3>
 800a014:	4baf      	ldr	r3, [pc, #700]	; (800a2d4 <atan+0x324>)
 800a016:	2200      	movs	r2, #0
 800a018:	f7f6 fd9e 	bl	8000b58 <__aeabi_dcmpgt>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d1e6      	bne.n	8009fee <atan+0x3e>
 800a020:	f04f 3aff 	mov.w	sl, #4294967295
 800a024:	e02b      	b.n	800a07e <atan+0xce>
 800a026:	f000 f963 	bl	800a2f0 <fabs>
 800a02a:	4bab      	ldr	r3, [pc, #684]	; (800a2d8 <atan+0x328>)
 800a02c:	429e      	cmp	r6, r3
 800a02e:	ec55 4b10 	vmov	r4, r5, d0
 800a032:	f300 80bf 	bgt.w	800a1b4 <atan+0x204>
 800a036:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a03a:	429e      	cmp	r6, r3
 800a03c:	f300 80a0 	bgt.w	800a180 <atan+0x1d0>
 800a040:	ee10 2a10 	vmov	r2, s0
 800a044:	ee10 0a10 	vmov	r0, s0
 800a048:	462b      	mov	r3, r5
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7f6 f93e 	bl	80002cc <__adddf3>
 800a050:	4ba0      	ldr	r3, [pc, #640]	; (800a2d4 <atan+0x324>)
 800a052:	2200      	movs	r2, #0
 800a054:	f7f6 f938 	bl	80002c8 <__aeabi_dsub>
 800a058:	2200      	movs	r2, #0
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 f931 	bl	80002cc <__adddf3>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 fc0b 	bl	800088c <__aeabi_ddiv>
 800a076:	f04f 0a00 	mov.w	sl, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	460d      	mov	r5, r1
 800a07e:	4622      	mov	r2, r4
 800a080:	462b      	mov	r3, r5
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 fad7 	bl	8000638 <__aeabi_dmul>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4680      	mov	r8, r0
 800a090:	4689      	mov	r9, r1
 800a092:	f7f6 fad1 	bl	8000638 <__aeabi_dmul>
 800a096:	a374      	add	r3, pc, #464	; (adr r3, 800a268 <atan+0x2b8>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	f7f6 faca 	bl	8000638 <__aeabi_dmul>
 800a0a4:	a372      	add	r3, pc, #456	; (adr r3, 800a270 <atan+0x2c0>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f90f 	bl	80002cc <__adddf3>
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	f7f6 fac1 	bl	8000638 <__aeabi_dmul>
 800a0b6:	a370      	add	r3, pc, #448	; (adr r3, 800a278 <atan+0x2c8>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 f906 	bl	80002cc <__adddf3>
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	f7f6 fab8 	bl	8000638 <__aeabi_dmul>
 800a0c8:	a36d      	add	r3, pc, #436	; (adr r3, 800a280 <atan+0x2d0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 f8fd 	bl	80002cc <__adddf3>
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	f7f6 faaf 	bl	8000638 <__aeabi_dmul>
 800a0da:	a36b      	add	r3, pc, #428	; (adr r3, 800a288 <atan+0x2d8>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f7f6 f8f4 	bl	80002cc <__adddf3>
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	f7f6 faa6 	bl	8000638 <__aeabi_dmul>
 800a0ec:	a368      	add	r3, pc, #416	; (adr r3, 800a290 <atan+0x2e0>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f8eb 	bl	80002cc <__adddf3>
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	f7f6 fa9d 	bl	8000638 <__aeabi_dmul>
 800a0fe:	a366      	add	r3, pc, #408	; (adr r3, 800a298 <atan+0x2e8>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	4680      	mov	r8, r0
 800a106:	4689      	mov	r9, r1
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fa94 	bl	8000638 <__aeabi_dmul>
 800a110:	a363      	add	r3, pc, #396	; (adr r3, 800a2a0 <atan+0x2f0>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f7f6 f8d7 	bl	80002c8 <__aeabi_dsub>
 800a11a:	4632      	mov	r2, r6
 800a11c:	463b      	mov	r3, r7
 800a11e:	f7f6 fa8b 	bl	8000638 <__aeabi_dmul>
 800a122:	a361      	add	r3, pc, #388	; (adr r3, 800a2a8 <atan+0x2f8>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f7f6 f8ce 	bl	80002c8 <__aeabi_dsub>
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	f7f6 fa82 	bl	8000638 <__aeabi_dmul>
 800a134:	a35e      	add	r3, pc, #376	; (adr r3, 800a2b0 <atan+0x300>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f7f6 f8c5 	bl	80002c8 <__aeabi_dsub>
 800a13e:	4632      	mov	r2, r6
 800a140:	463b      	mov	r3, r7
 800a142:	f7f6 fa79 	bl	8000638 <__aeabi_dmul>
 800a146:	a35c      	add	r3, pc, #368	; (adr r3, 800a2b8 <atan+0x308>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 f8bc 	bl	80002c8 <__aeabi_dsub>
 800a150:	4632      	mov	r2, r6
 800a152:	463b      	mov	r3, r7
 800a154:	f7f6 fa70 	bl	8000638 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4640      	mov	r0, r8
 800a15e:	4649      	mov	r1, r9
 800a160:	f7f6 f8b4 	bl	80002cc <__adddf3>
 800a164:	4622      	mov	r2, r4
 800a166:	462b      	mov	r3, r5
 800a168:	f7f6 fa66 	bl	8000638 <__aeabi_dmul>
 800a16c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	d14b      	bne.n	800a20e <atan+0x25e>
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f6 f8a5 	bl	80002c8 <__aeabi_dsub>
 800a17e:	e72c      	b.n	8009fda <atan+0x2a>
 800a180:	ee10 0a10 	vmov	r0, s0
 800a184:	4b53      	ldr	r3, [pc, #332]	; (800a2d4 <atan+0x324>)
 800a186:	2200      	movs	r2, #0
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 f89d 	bl	80002c8 <__aeabi_dsub>
 800a18e:	4b51      	ldr	r3, [pc, #324]	; (800a2d4 <atan+0x324>)
 800a190:	4606      	mov	r6, r0
 800a192:	460f      	mov	r7, r1
 800a194:	2200      	movs	r2, #0
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f897 	bl	80002cc <__adddf3>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	f7f6 fb71 	bl	800088c <__aeabi_ddiv>
 800a1aa:	f04f 0a01 	mov.w	sl, #1
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	e764      	b.n	800a07e <atan+0xce>
 800a1b4:	4b49      	ldr	r3, [pc, #292]	; (800a2dc <atan+0x32c>)
 800a1b6:	429e      	cmp	r6, r3
 800a1b8:	da1d      	bge.n	800a1f6 <atan+0x246>
 800a1ba:	ee10 0a10 	vmov	r0, s0
 800a1be:	4b48      	ldr	r3, [pc, #288]	; (800a2e0 <atan+0x330>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	f7f6 f880 	bl	80002c8 <__aeabi_dsub>
 800a1c8:	4b45      	ldr	r3, [pc, #276]	; (800a2e0 <atan+0x330>)
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f6 fa30 	bl	8000638 <__aeabi_dmul>
 800a1d8:	4b3e      	ldr	r3, [pc, #248]	; (800a2d4 <atan+0x324>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f7f6 f876 	bl	80002cc <__adddf3>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f7f6 fb50 	bl	800088c <__aeabi_ddiv>
 800a1ec:	f04f 0a02 	mov.w	sl, #2
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	e743      	b.n	800a07e <atan+0xce>
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	ee10 2a10 	vmov	r2, s0
 800a1fc:	4939      	ldr	r1, [pc, #228]	; (800a2e4 <atan+0x334>)
 800a1fe:	2000      	movs	r0, #0
 800a200:	f7f6 fb44 	bl	800088c <__aeabi_ddiv>
 800a204:	f04f 0a03 	mov.w	sl, #3
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
 800a20c:	e737      	b.n	800a07e <atan+0xce>
 800a20e:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <atan+0x338>)
 800a210:	4e36      	ldr	r6, [pc, #216]	; (800a2ec <atan+0x33c>)
 800a212:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a216:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a21a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a21e:	f7f6 f853 	bl	80002c8 <__aeabi_dsub>
 800a222:	4622      	mov	r2, r4
 800a224:	462b      	mov	r3, r5
 800a226:	f7f6 f84f 	bl	80002c8 <__aeabi_dsub>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a232:	f7f6 f849 	bl	80002c8 <__aeabi_dsub>
 800a236:	f1bb 0f00 	cmp.w	fp, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	460d      	mov	r5, r1
 800a23e:	f6bf aed6 	bge.w	8009fee <atan+0x3e>
 800a242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a246:	461d      	mov	r5, r3
 800a248:	e6d1      	b.n	8009fee <atan+0x3e>
 800a24a:	a51d      	add	r5, pc, #116	; (adr r5, 800a2c0 <atan+0x310>)
 800a24c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a250:	e6cd      	b.n	8009fee <atan+0x3e>
 800a252:	bf00      	nop
 800a254:	f3af 8000 	nop.w
 800a258:	54442d18 	.word	0x54442d18
 800a25c:	bff921fb 	.word	0xbff921fb
 800a260:	8800759c 	.word	0x8800759c
 800a264:	7e37e43c 	.word	0x7e37e43c
 800a268:	e322da11 	.word	0xe322da11
 800a26c:	3f90ad3a 	.word	0x3f90ad3a
 800a270:	24760deb 	.word	0x24760deb
 800a274:	3fa97b4b 	.word	0x3fa97b4b
 800a278:	a0d03d51 	.word	0xa0d03d51
 800a27c:	3fb10d66 	.word	0x3fb10d66
 800a280:	c54c206e 	.word	0xc54c206e
 800a284:	3fb745cd 	.word	0x3fb745cd
 800a288:	920083ff 	.word	0x920083ff
 800a28c:	3fc24924 	.word	0x3fc24924
 800a290:	5555550d 	.word	0x5555550d
 800a294:	3fd55555 	.word	0x3fd55555
 800a298:	2c6a6c2f 	.word	0x2c6a6c2f
 800a29c:	bfa2b444 	.word	0xbfa2b444
 800a2a0:	52defd9a 	.word	0x52defd9a
 800a2a4:	3fadde2d 	.word	0x3fadde2d
 800a2a8:	af749a6d 	.word	0xaf749a6d
 800a2ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800a2b0:	fe231671 	.word	0xfe231671
 800a2b4:	3fbc71c6 	.word	0x3fbc71c6
 800a2b8:	9998ebc4 	.word	0x9998ebc4
 800a2bc:	3fc99999 	.word	0x3fc99999
 800a2c0:	54442d18 	.word	0x54442d18
 800a2c4:	3ff921fb 	.word	0x3ff921fb
 800a2c8:	440fffff 	.word	0x440fffff
 800a2cc:	7ff00000 	.word	0x7ff00000
 800a2d0:	3fdbffff 	.word	0x3fdbffff
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	3ff2ffff 	.word	0x3ff2ffff
 800a2dc:	40038000 	.word	0x40038000
 800a2e0:	3ff80000 	.word	0x3ff80000
 800a2e4:	bff00000 	.word	0xbff00000
 800a2e8:	0800b8e0 	.word	0x0800b8e0
 800a2ec:	0800b8c0 	.word	0x0800b8c0

0800a2f0 <fabs>:
 800a2f0:	ec51 0b10 	vmov	r0, r1, d0
 800a2f4:	ee10 2a10 	vmov	r2, s0
 800a2f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2fc:	ec43 2b10 	vmov	d0, r2, r3
 800a300:	4770      	bx	lr
 800a302:	0000      	movs	r0, r0
 800a304:	0000      	movs	r0, r0
	...

0800a308 <tan>:
 800a308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a30a:	ec53 2b10 	vmov	r2, r3, d0
 800a30e:	4816      	ldr	r0, [pc, #88]	; (800a368 <tan+0x60>)
 800a310:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a314:	4281      	cmp	r1, r0
 800a316:	dc07      	bgt.n	800a328 <tan+0x20>
 800a318:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a360 <tan+0x58>
 800a31c:	2001      	movs	r0, #1
 800a31e:	b005      	add	sp, #20
 800a320:	f85d eb04 	ldr.w	lr, [sp], #4
 800a324:	f000 bd80 	b.w	800ae28 <__kernel_tan>
 800a328:	4810      	ldr	r0, [pc, #64]	; (800a36c <tan+0x64>)
 800a32a:	4281      	cmp	r1, r0
 800a32c:	dd09      	ble.n	800a342 <tan+0x3a>
 800a32e:	ee10 0a10 	vmov	r0, s0
 800a332:	4619      	mov	r1, r3
 800a334:	f7f5 ffc8 	bl	80002c8 <__aeabi_dsub>
 800a338:	ec41 0b10 	vmov	d0, r0, r1
 800a33c:	b005      	add	sp, #20
 800a33e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a342:	4668      	mov	r0, sp
 800a344:	f000 f814 	bl	800a370 <__ieee754_rem_pio2>
 800a348:	0040      	lsls	r0, r0, #1
 800a34a:	f000 0002 	and.w	r0, r0, #2
 800a34e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a352:	ed9d 0b00 	vldr	d0, [sp]
 800a356:	f1c0 0001 	rsb	r0, r0, #1
 800a35a:	f000 fd65 	bl	800ae28 <__kernel_tan>
 800a35e:	e7ed      	b.n	800a33c <tan+0x34>
	...
 800a368:	3fe921fb 	.word	0x3fe921fb
 800a36c:	7fefffff 	.word	0x7fefffff

0800a370 <__ieee754_rem_pio2>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	ed2d 8b02 	vpush	{d8}
 800a378:	ec55 4b10 	vmov	r4, r5, d0
 800a37c:	4bca      	ldr	r3, [pc, #808]	; (800a6a8 <__ieee754_rem_pio2+0x338>)
 800a37e:	b08b      	sub	sp, #44	; 0x2c
 800a380:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a384:	4598      	cmp	r8, r3
 800a386:	4682      	mov	sl, r0
 800a388:	9502      	str	r5, [sp, #8]
 800a38a:	dc08      	bgt.n	800a39e <__ieee754_rem_pio2+0x2e>
 800a38c:	2200      	movs	r2, #0
 800a38e:	2300      	movs	r3, #0
 800a390:	ed80 0b00 	vstr	d0, [r0]
 800a394:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a398:	f04f 0b00 	mov.w	fp, #0
 800a39c:	e028      	b.n	800a3f0 <__ieee754_rem_pio2+0x80>
 800a39e:	4bc3      	ldr	r3, [pc, #780]	; (800a6ac <__ieee754_rem_pio2+0x33c>)
 800a3a0:	4598      	cmp	r8, r3
 800a3a2:	dc78      	bgt.n	800a496 <__ieee754_rem_pio2+0x126>
 800a3a4:	9b02      	ldr	r3, [sp, #8]
 800a3a6:	4ec2      	ldr	r6, [pc, #776]	; (800a6b0 <__ieee754_rem_pio2+0x340>)
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	ee10 0a10 	vmov	r0, s0
 800a3ae:	a3b0      	add	r3, pc, #704	; (adr r3, 800a670 <__ieee754_rem_pio2+0x300>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	dd39      	ble.n	800a42c <__ieee754_rem_pio2+0xbc>
 800a3b8:	f7f5 ff86 	bl	80002c8 <__aeabi_dsub>
 800a3bc:	45b0      	cmp	r8, r6
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	d01b      	beq.n	800a3fc <__ieee754_rem_pio2+0x8c>
 800a3c4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f5 ff7d 	bl	80002c8 <__aeabi_dsub>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	e9ca 2300 	strd	r2, r3, [sl]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7f5 ff75 	bl	80002c8 <__aeabi_dsub>
 800a3de:	a3a6      	add	r3, pc, #664	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 ff70 	bl	80002c8 <__aeabi_dsub>
 800a3e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3ec:	f04f 0b01 	mov.w	fp, #1
 800a3f0:	4658      	mov	r0, fp
 800a3f2:	b00b      	add	sp, #44	; 0x2c
 800a3f4:	ecbd 8b02 	vpop	{d8}
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a680 <__ieee754_rem_pio2+0x310>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff61 	bl	80002c8 <__aeabi_dsub>
 800a406:	a3a0      	add	r3, pc, #640	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	f7f5 ff5a 	bl	80002c8 <__aeabi_dsub>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	e9ca 2300 	strd	r2, r3, [sl]
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f5 ff52 	bl	80002c8 <__aeabi_dsub>
 800a424:	a398      	add	r3, pc, #608	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	e7db      	b.n	800a3e4 <__ieee754_rem_pio2+0x74>
 800a42c:	f7f5 ff4e 	bl	80002cc <__adddf3>
 800a430:	45b0      	cmp	r8, r6
 800a432:	4604      	mov	r4, r0
 800a434:	460d      	mov	r5, r1
 800a436:	d016      	beq.n	800a466 <__ieee754_rem_pio2+0xf6>
 800a438:	a38f      	add	r3, pc, #572	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f7f5 ff45 	bl	80002cc <__adddf3>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	e9ca 2300 	strd	r2, r3, [sl]
 800a44a:	4620      	mov	r0, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	f7f5 ff3b 	bl	80002c8 <__aeabi_dsub>
 800a452:	a389      	add	r3, pc, #548	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f7f5 ff38 	bl	80002cc <__adddf3>
 800a45c:	f04f 3bff 	mov.w	fp, #4294967295
 800a460:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a464:	e7c4      	b.n	800a3f0 <__ieee754_rem_pio2+0x80>
 800a466:	a386      	add	r3, pc, #536	; (adr r3, 800a680 <__ieee754_rem_pio2+0x310>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f5 ff2e 	bl	80002cc <__adddf3>
 800a470:	a385      	add	r3, pc, #532	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	4604      	mov	r4, r0
 800a478:	460d      	mov	r5, r1
 800a47a:	f7f5 ff27 	bl	80002cc <__adddf3>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	e9ca 2300 	strd	r2, r3, [sl]
 800a486:	4620      	mov	r0, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	f7f5 ff1d 	bl	80002c8 <__aeabi_dsub>
 800a48e:	a37e      	add	r3, pc, #504	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	e7e0      	b.n	800a458 <__ieee754_rem_pio2+0xe8>
 800a496:	4b87      	ldr	r3, [pc, #540]	; (800a6b4 <__ieee754_rem_pio2+0x344>)
 800a498:	4598      	cmp	r8, r3
 800a49a:	f300 80d9 	bgt.w	800a650 <__ieee754_rem_pio2+0x2e0>
 800a49e:	f7ff ff27 	bl	800a2f0 <fabs>
 800a4a2:	ec55 4b10 	vmov	r4, r5, d0
 800a4a6:	ee10 0a10 	vmov	r0, s0
 800a4aa:	a379      	add	r3, pc, #484	; (adr r3, 800a690 <__ieee754_rem_pio2+0x320>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f6 f8c1 	bl	8000638 <__aeabi_dmul>
 800a4b6:	4b80      	ldr	r3, [pc, #512]	; (800a6b8 <__ieee754_rem_pio2+0x348>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f7f5 ff07 	bl	80002cc <__adddf3>
 800a4be:	f7f6 fb6b 	bl	8000b98 <__aeabi_d2iz>
 800a4c2:	4683      	mov	fp, r0
 800a4c4:	f7f6 f84e 	bl	8000564 <__aeabi_i2d>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	ec43 2b18 	vmov	d8, r2, r3
 800a4d0:	a367      	add	r3, pc, #412	; (adr r3, 800a670 <__ieee754_rem_pio2+0x300>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f6 f8af 	bl	8000638 <__aeabi_dmul>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	f7f5 fef1 	bl	80002c8 <__aeabi_dsub>
 800a4e6:	a364      	add	r3, pc, #400	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	ec51 0b18 	vmov	r0, r1, d8
 800a4f4:	f7f6 f8a0 	bl	8000638 <__aeabi_dmul>
 800a4f8:	f1bb 0f1f 	cmp.w	fp, #31
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	dc0d      	bgt.n	800a51e <__ieee754_rem_pio2+0x1ae>
 800a502:	4b6e      	ldr	r3, [pc, #440]	; (800a6bc <__ieee754_rem_pio2+0x34c>)
 800a504:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	4543      	cmp	r3, r8
 800a50e:	d006      	beq.n	800a51e <__ieee754_rem_pio2+0x1ae>
 800a510:	4622      	mov	r2, r4
 800a512:	462b      	mov	r3, r5
 800a514:	4630      	mov	r0, r6
 800a516:	4639      	mov	r1, r7
 800a518:	f7f5 fed6 	bl	80002c8 <__aeabi_dsub>
 800a51c:	e00f      	b.n	800a53e <__ieee754_rem_pio2+0x1ce>
 800a51e:	462b      	mov	r3, r5
 800a520:	4622      	mov	r2, r4
 800a522:	4630      	mov	r0, r6
 800a524:	4639      	mov	r1, r7
 800a526:	f7f5 fecf 	bl	80002c8 <__aeabi_dsub>
 800a52a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a534:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a538:	f1b8 0f10 	cmp.w	r8, #16
 800a53c:	dc02      	bgt.n	800a544 <__ieee754_rem_pio2+0x1d4>
 800a53e:	e9ca 0100 	strd	r0, r1, [sl]
 800a542:	e039      	b.n	800a5b8 <__ieee754_rem_pio2+0x248>
 800a544:	a34e      	add	r3, pc, #312	; (adr r3, 800a680 <__ieee754_rem_pio2+0x310>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	ec51 0b18 	vmov	r0, r1, d8
 800a54e:	f7f6 f873 	bl	8000638 <__aeabi_dmul>
 800a552:	4604      	mov	r4, r0
 800a554:	460d      	mov	r5, r1
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4630      	mov	r0, r6
 800a55c:	4639      	mov	r1, r7
 800a55e:	f7f5 feb3 	bl	80002c8 <__aeabi_dsub>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4680      	mov	r8, r0
 800a568:	4689      	mov	r9, r1
 800a56a:	4630      	mov	r0, r6
 800a56c:	4639      	mov	r1, r7
 800a56e:	f7f5 feab 	bl	80002c8 <__aeabi_dsub>
 800a572:	4622      	mov	r2, r4
 800a574:	462b      	mov	r3, r5
 800a576:	f7f5 fea7 	bl	80002c8 <__aeabi_dsub>
 800a57a:	a343      	add	r3, pc, #268	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	4604      	mov	r4, r0
 800a582:	460d      	mov	r5, r1
 800a584:	ec51 0b18 	vmov	r0, r1, d8
 800a588:	f7f6 f856 	bl	8000638 <__aeabi_dmul>
 800a58c:	4622      	mov	r2, r4
 800a58e:	462b      	mov	r3, r5
 800a590:	f7f5 fe9a 	bl	80002c8 <__aeabi_dsub>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4604      	mov	r4, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	4640      	mov	r0, r8
 800a59e:	4649      	mov	r1, r9
 800a5a0:	f7f5 fe92 	bl	80002c8 <__aeabi_dsub>
 800a5a4:	9a03      	ldr	r2, [sp, #12]
 800a5a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	2b31      	cmp	r3, #49	; 0x31
 800a5ae:	dc24      	bgt.n	800a5fa <__ieee754_rem_pio2+0x28a>
 800a5b0:	e9ca 0100 	strd	r0, r1, [sl]
 800a5b4:	4646      	mov	r6, r8
 800a5b6:	464f      	mov	r7, r9
 800a5b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4642      	mov	r2, r8
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe80 	bl	80002c8 <__aeabi_dsub>
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	f7f5 fe7c 	bl	80002c8 <__aeabi_dsub>
 800a5d0:	9b02      	ldr	r3, [sp, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5d8:	f6bf af0a 	bge.w	800a3f0 <__ieee754_rem_pio2+0x80>
 800a5dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a5e0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5e8:	f8ca 8000 	str.w	r8, [sl]
 800a5ec:	f8ca 0008 	str.w	r0, [sl, #8]
 800a5f0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a5f4:	f1cb 0b00 	rsb	fp, fp, #0
 800a5f8:	e6fa      	b.n	800a3f0 <__ieee754_rem_pio2+0x80>
 800a5fa:	a327      	add	r3, pc, #156	; (adr r3, 800a698 <__ieee754_rem_pio2+0x328>)
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	ec51 0b18 	vmov	r0, r1, d8
 800a604:	f7f6 f818 	bl	8000638 <__aeabi_dmul>
 800a608:	4604      	mov	r4, r0
 800a60a:	460d      	mov	r5, r1
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f5 fe58 	bl	80002c8 <__aeabi_dsub>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4606      	mov	r6, r0
 800a61e:	460f      	mov	r7, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 fe50 	bl	80002c8 <__aeabi_dsub>
 800a628:	4622      	mov	r2, r4
 800a62a:	462b      	mov	r3, r5
 800a62c:	f7f5 fe4c 	bl	80002c8 <__aeabi_dsub>
 800a630:	a31b      	add	r3, pc, #108	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x330>)
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	ec51 0b18 	vmov	r0, r1, d8
 800a63e:	f7f5 fffb 	bl	8000638 <__aeabi_dmul>
 800a642:	4622      	mov	r2, r4
 800a644:	462b      	mov	r3, r5
 800a646:	f7f5 fe3f 	bl	80002c8 <__aeabi_dsub>
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
 800a64e:	e75f      	b.n	800a510 <__ieee754_rem_pio2+0x1a0>
 800a650:	4b1b      	ldr	r3, [pc, #108]	; (800a6c0 <__ieee754_rem_pio2+0x350>)
 800a652:	4598      	cmp	r8, r3
 800a654:	dd36      	ble.n	800a6c4 <__ieee754_rem_pio2+0x354>
 800a656:	ee10 2a10 	vmov	r2, s0
 800a65a:	462b      	mov	r3, r5
 800a65c:	4620      	mov	r0, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	f7f5 fe32 	bl	80002c8 <__aeabi_dsub>
 800a664:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a668:	e9ca 0100 	strd	r0, r1, [sl]
 800a66c:	e694      	b.n	800a398 <__ieee754_rem_pio2+0x28>
 800a66e:	bf00      	nop
 800a670:	54400000 	.word	0x54400000
 800a674:	3ff921fb 	.word	0x3ff921fb
 800a678:	1a626331 	.word	0x1a626331
 800a67c:	3dd0b461 	.word	0x3dd0b461
 800a680:	1a600000 	.word	0x1a600000
 800a684:	3dd0b461 	.word	0x3dd0b461
 800a688:	2e037073 	.word	0x2e037073
 800a68c:	3ba3198a 	.word	0x3ba3198a
 800a690:	6dc9c883 	.word	0x6dc9c883
 800a694:	3fe45f30 	.word	0x3fe45f30
 800a698:	2e000000 	.word	0x2e000000
 800a69c:	3ba3198a 	.word	0x3ba3198a
 800a6a0:	252049c1 	.word	0x252049c1
 800a6a4:	397b839a 	.word	0x397b839a
 800a6a8:	3fe921fb 	.word	0x3fe921fb
 800a6ac:	4002d97b 	.word	0x4002d97b
 800a6b0:	3ff921fb 	.word	0x3ff921fb
 800a6b4:	413921fb 	.word	0x413921fb
 800a6b8:	3fe00000 	.word	0x3fe00000
 800a6bc:	0800b900 	.word	0x0800b900
 800a6c0:	7fefffff 	.word	0x7fefffff
 800a6c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a6c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a6cc:	ee10 0a10 	vmov	r0, s0
 800a6d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a6d4:	ee10 6a10 	vmov	r6, s0
 800a6d8:	460f      	mov	r7, r1
 800a6da:	f7f6 fa5d 	bl	8000b98 <__aeabi_d2iz>
 800a6de:	f7f5 ff41 	bl	8000564 <__aeabi_i2d>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6ee:	f7f5 fdeb 	bl	80002c8 <__aeabi_dsub>
 800a6f2:	4b23      	ldr	r3, [pc, #140]	; (800a780 <__ieee754_rem_pio2+0x410>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f7f5 ff9f 	bl	8000638 <__aeabi_dmul>
 800a6fa:	460f      	mov	r7, r1
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	f7f6 fa4b 	bl	8000b98 <__aeabi_d2iz>
 800a702:	f7f5 ff2f 	bl	8000564 <__aeabi_i2d>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4630      	mov	r0, r6
 800a70c:	4639      	mov	r1, r7
 800a70e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a712:	f7f5 fdd9 	bl	80002c8 <__aeabi_dsub>
 800a716:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <__ieee754_rem_pio2+0x410>)
 800a718:	2200      	movs	r2, #0
 800a71a:	f7f5 ff8d 	bl	8000638 <__aeabi_dmul>
 800a71e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a722:	ad04      	add	r5, sp, #16
 800a724:	f04f 0803 	mov.w	r8, #3
 800a728:	46a9      	mov	r9, r5
 800a72a:	2600      	movs	r6, #0
 800a72c:	2700      	movs	r7, #0
 800a72e:	4632      	mov	r2, r6
 800a730:	463b      	mov	r3, r7
 800a732:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a736:	46c3      	mov	fp, r8
 800a738:	3d08      	subs	r5, #8
 800a73a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a73e:	f7f6 f9e3 	bl	8000b08 <__aeabi_dcmpeq>
 800a742:	2800      	cmp	r0, #0
 800a744:	d1f3      	bne.n	800a72e <__ieee754_rem_pio2+0x3be>
 800a746:	4b0f      	ldr	r3, [pc, #60]	; (800a784 <__ieee754_rem_pio2+0x414>)
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	2302      	movs	r3, #2
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	4622      	mov	r2, r4
 800a750:	465b      	mov	r3, fp
 800a752:	4651      	mov	r1, sl
 800a754:	4648      	mov	r0, r9
 800a756:	f000 f817 	bl	800a788 <__kernel_rem_pio2>
 800a75a:	9b02      	ldr	r3, [sp, #8]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	4683      	mov	fp, r0
 800a760:	f6bf ae46 	bge.w	800a3f0 <__ieee754_rem_pio2+0x80>
 800a764:	e9da 2100 	ldrd	r2, r1, [sl]
 800a768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a76c:	e9ca 2300 	strd	r2, r3, [sl]
 800a770:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a778:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a77c:	e73a      	b.n	800a5f4 <__ieee754_rem_pio2+0x284>
 800a77e:	bf00      	nop
 800a780:	41700000 	.word	0x41700000
 800a784:	0800b980 	.word	0x0800b980

0800a788 <__kernel_rem_pio2>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	ed2d 8b02 	vpush	{d8}
 800a790:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a794:	f112 0f14 	cmn.w	r2, #20
 800a798:	9308      	str	r3, [sp, #32]
 800a79a:	9101      	str	r1, [sp, #4]
 800a79c:	4bc4      	ldr	r3, [pc, #784]	; (800aab0 <__kernel_rem_pio2+0x328>)
 800a79e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a7a0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7a6:	9302      	str	r3, [sp, #8]
 800a7a8:	9b08      	ldr	r3, [sp, #32]
 800a7aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7ae:	bfa8      	it	ge
 800a7b0:	1ed4      	subge	r4, r2, #3
 800a7b2:	9306      	str	r3, [sp, #24]
 800a7b4:	bfb2      	itee	lt
 800a7b6:	2400      	movlt	r4, #0
 800a7b8:	2318      	movge	r3, #24
 800a7ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800a7be:	f06f 0317 	mvn.w	r3, #23
 800a7c2:	fb04 3303 	mla	r3, r4, r3, r3
 800a7c6:	eb03 0a02 	add.w	sl, r3, r2
 800a7ca:	9b02      	ldr	r3, [sp, #8]
 800a7cc:	9a06      	ldr	r2, [sp, #24]
 800a7ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800aaa0 <__kernel_rem_pio2+0x318>
 800a7d2:	eb03 0802 	add.w	r8, r3, r2
 800a7d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a7d8:	1aa7      	subs	r7, r4, r2
 800a7da:	ae22      	add	r6, sp, #136	; 0x88
 800a7dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	4545      	cmp	r5, r8
 800a7e4:	dd13      	ble.n	800a80e <__kernel_rem_pio2+0x86>
 800a7e6:	9b08      	ldr	r3, [sp, #32]
 800a7e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800aaa0 <__kernel_rem_pio2+0x318>
 800a7ec:	aa22      	add	r2, sp, #136	; 0x88
 800a7ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a7f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a7f6:	f04f 0800 	mov.w	r8, #0
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	4598      	cmp	r8, r3
 800a7fe:	dc2f      	bgt.n	800a860 <__kernel_rem_pio2+0xd8>
 800a800:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a804:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a808:	462f      	mov	r7, r5
 800a80a:	2600      	movs	r6, #0
 800a80c:	e01b      	b.n	800a846 <__kernel_rem_pio2+0xbe>
 800a80e:	42ef      	cmn	r7, r5
 800a810:	d407      	bmi.n	800a822 <__kernel_rem_pio2+0x9a>
 800a812:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a816:	f7f5 fea5 	bl	8000564 <__aeabi_i2d>
 800a81a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a81e:	3501      	adds	r5, #1
 800a820:	e7df      	b.n	800a7e2 <__kernel_rem_pio2+0x5a>
 800a822:	ec51 0b18 	vmov	r0, r1, d8
 800a826:	e7f8      	b.n	800a81a <__kernel_rem_pio2+0x92>
 800a828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a82c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a830:	f7f5 ff02 	bl	8000638 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a83c:	f7f5 fd46 	bl	80002cc <__adddf3>
 800a840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a844:	3601      	adds	r6, #1
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	429e      	cmp	r6, r3
 800a84a:	f1a7 0708 	sub.w	r7, r7, #8
 800a84e:	ddeb      	ble.n	800a828 <__kernel_rem_pio2+0xa0>
 800a850:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a854:	f108 0801 	add.w	r8, r8, #1
 800a858:	ecab 7b02 	vstmia	fp!, {d7}
 800a85c:	3508      	adds	r5, #8
 800a85e:	e7cc      	b.n	800a7fa <__kernel_rem_pio2+0x72>
 800a860:	9b02      	ldr	r3, [sp, #8]
 800a862:	aa0e      	add	r2, sp, #56	; 0x38
 800a864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a868:	930d      	str	r3, [sp, #52]	; 0x34
 800a86a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a86c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a870:	9c02      	ldr	r4, [sp, #8]
 800a872:	930c      	str	r3, [sp, #48]	; 0x30
 800a874:	00e3      	lsls	r3, r4, #3
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	ab9a      	add	r3, sp, #616	; 0x268
 800a87a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a87e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a882:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a886:	ab72      	add	r3, sp, #456	; 0x1c8
 800a888:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a88c:	46c3      	mov	fp, r8
 800a88e:	46a1      	mov	r9, r4
 800a890:	f1b9 0f00 	cmp.w	r9, #0
 800a894:	f1a5 0508 	sub.w	r5, r5, #8
 800a898:	dc77      	bgt.n	800a98a <__kernel_rem_pio2+0x202>
 800a89a:	ec47 6b10 	vmov	d0, r6, r7
 800a89e:	4650      	mov	r0, sl
 800a8a0:	f000 fd4e 	bl	800b340 <scalbn>
 800a8a4:	ec57 6b10 	vmov	r6, r7, d0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a8ae:	ee10 0a10 	vmov	r0, s0
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f5 fec0 	bl	8000638 <__aeabi_dmul>
 800a8b8:	ec41 0b10 	vmov	d0, r0, r1
 800a8bc:	f000 fcc0 	bl	800b240 <floor>
 800a8c0:	4b7c      	ldr	r3, [pc, #496]	; (800aab4 <__kernel_rem_pio2+0x32c>)
 800a8c2:	ec51 0b10 	vmov	r0, r1, d0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f7f5 feb6 	bl	8000638 <__aeabi_dmul>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f5 fcf8 	bl	80002c8 <__aeabi_dsub>
 800a8d8:	460f      	mov	r7, r1
 800a8da:	4606      	mov	r6, r0
 800a8dc:	f7f6 f95c 	bl	8000b98 <__aeabi_d2iz>
 800a8e0:	9004      	str	r0, [sp, #16]
 800a8e2:	f7f5 fe3f 	bl	8000564 <__aeabi_i2d>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	f7f5 fceb 	bl	80002c8 <__aeabi_dsub>
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	dd6d      	ble.n	800a9d8 <__kernel_rem_pio2+0x250>
 800a8fc:	1e62      	subs	r2, r4, #1
 800a8fe:	ab0e      	add	r3, sp, #56	; 0x38
 800a900:	9d04      	ldr	r5, [sp, #16]
 800a902:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a906:	f1ca 0118 	rsb	r1, sl, #24
 800a90a:	fa40 f301 	asr.w	r3, r0, r1
 800a90e:	441d      	add	r5, r3
 800a910:	408b      	lsls	r3, r1
 800a912:	1ac0      	subs	r0, r0, r3
 800a914:	ab0e      	add	r3, sp, #56	; 0x38
 800a916:	9504      	str	r5, [sp, #16]
 800a918:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a91c:	f1ca 0317 	rsb	r3, sl, #23
 800a920:	fa40 fb03 	asr.w	fp, r0, r3
 800a924:	f1bb 0f00 	cmp.w	fp, #0
 800a928:	dd65      	ble.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	2200      	movs	r2, #0
 800a92e:	3301      	adds	r3, #1
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	4615      	mov	r5, r2
 800a934:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a938:	4294      	cmp	r4, r2
 800a93a:	f300 809c 	bgt.w	800aa76 <__kernel_rem_pio2+0x2ee>
 800a93e:	f1ba 0f00 	cmp.w	sl, #0
 800a942:	dd07      	ble.n	800a954 <__kernel_rem_pio2+0x1cc>
 800a944:	f1ba 0f01 	cmp.w	sl, #1
 800a948:	f000 80c0 	beq.w	800aacc <__kernel_rem_pio2+0x344>
 800a94c:	f1ba 0f02 	cmp.w	sl, #2
 800a950:	f000 80c6 	beq.w	800aae0 <__kernel_rem_pio2+0x358>
 800a954:	f1bb 0f02 	cmp.w	fp, #2
 800a958:	d14d      	bne.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a95a:	4632      	mov	r2, r6
 800a95c:	463b      	mov	r3, r7
 800a95e:	4956      	ldr	r1, [pc, #344]	; (800aab8 <__kernel_rem_pio2+0x330>)
 800a960:	2000      	movs	r0, #0
 800a962:	f7f5 fcb1 	bl	80002c8 <__aeabi_dsub>
 800a966:	4606      	mov	r6, r0
 800a968:	460f      	mov	r7, r1
 800a96a:	2d00      	cmp	r5, #0
 800a96c:	d043      	beq.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a96e:	4650      	mov	r0, sl
 800a970:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800aaa8 <__kernel_rem_pio2+0x320>
 800a974:	f000 fce4 	bl	800b340 <scalbn>
 800a978:	4630      	mov	r0, r6
 800a97a:	4639      	mov	r1, r7
 800a97c:	ec53 2b10 	vmov	r2, r3, d0
 800a980:	f7f5 fca2 	bl	80002c8 <__aeabi_dsub>
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	e035      	b.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a98a:	4b4c      	ldr	r3, [pc, #304]	; (800aabc <__kernel_rem_pio2+0x334>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f5 fe51 	bl	8000638 <__aeabi_dmul>
 800a996:	f7f6 f8ff 	bl	8000b98 <__aeabi_d2iz>
 800a99a:	f7f5 fde3 	bl	8000564 <__aeabi_i2d>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	ec43 2b18 	vmov	d8, r2, r3
 800a9a6:	4b46      	ldr	r3, [pc, #280]	; (800aac0 <__kernel_rem_pio2+0x338>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f7f5 fe45 	bl	8000638 <__aeabi_dmul>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	f7f5 fc87 	bl	80002c8 <__aeabi_dsub>
 800a9ba:	f7f6 f8ed 	bl	8000b98 <__aeabi_d2iz>
 800a9be:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9c2:	f84b 0b04 	str.w	r0, [fp], #4
 800a9c6:	ec51 0b18 	vmov	r0, r1, d8
 800a9ca:	f7f5 fc7f 	bl	80002cc <__adddf3>
 800a9ce:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	e75b      	b.n	800a890 <__kernel_rem_pio2+0x108>
 800a9d8:	d106      	bne.n	800a9e8 <__kernel_rem_pio2+0x260>
 800a9da:	1e63      	subs	r3, r4, #1
 800a9dc:	aa0e      	add	r2, sp, #56	; 0x38
 800a9de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a9e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a9e6:	e79d      	b.n	800a924 <__kernel_rem_pio2+0x19c>
 800a9e8:	4b36      	ldr	r3, [pc, #216]	; (800aac4 <__kernel_rem_pio2+0x33c>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f7f6 f8aa 	bl	8000b44 <__aeabi_dcmpge>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d13d      	bne.n	800aa70 <__kernel_rem_pio2+0x2e8>
 800a9f4:	4683      	mov	fp, r0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	f7f6 f883 	bl	8000b08 <__aeabi_dcmpeq>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	f000 80c0 	beq.w	800ab88 <__kernel_rem_pio2+0x400>
 800aa08:	1e65      	subs	r5, r4, #1
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	9902      	ldr	r1, [sp, #8]
 800aa10:	428b      	cmp	r3, r1
 800aa12:	da6c      	bge.n	800aaee <__kernel_rem_pio2+0x366>
 800aa14:	2a00      	cmp	r2, #0
 800aa16:	f000 8089 	beq.w	800ab2c <__kernel_rem_pio2+0x3a4>
 800aa1a:	ab0e      	add	r3, sp, #56	; 0x38
 800aa1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 80ad 	beq.w	800ab84 <__kernel_rem_pio2+0x3fc>
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800aaa8 <__kernel_rem_pio2+0x320>
 800aa30:	f000 fc86 	bl	800b340 <scalbn>
 800aa34:	ab9a      	add	r3, sp, #616	; 0x268
 800aa36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa3a:	ec57 6b10 	vmov	r6, r7, d0
 800aa3e:	00ec      	lsls	r4, r5, #3
 800aa40:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800aa44:	46aa      	mov	sl, r5
 800aa46:	f1ba 0f00 	cmp.w	sl, #0
 800aa4a:	f280 80d6 	bge.w	800abfa <__kernel_rem_pio2+0x472>
 800aa4e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800aaa0 <__kernel_rem_pio2+0x318>
 800aa52:	462e      	mov	r6, r5
 800aa54:	2e00      	cmp	r6, #0
 800aa56:	f2c0 8104 	blt.w	800ac62 <__kernel_rem_pio2+0x4da>
 800aa5a:	ab72      	add	r3, sp, #456	; 0x1c8
 800aa5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800aa60:	f8df a064 	ldr.w	sl, [pc, #100]	; 800aac8 <__kernel_rem_pio2+0x340>
 800aa64:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aa68:	f04f 0800 	mov.w	r8, #0
 800aa6c:	1baf      	subs	r7, r5, r6
 800aa6e:	e0ea      	b.n	800ac46 <__kernel_rem_pio2+0x4be>
 800aa70:	f04f 0b02 	mov.w	fp, #2
 800aa74:	e759      	b.n	800a92a <__kernel_rem_pio2+0x1a2>
 800aa76:	f8d8 3000 	ldr.w	r3, [r8]
 800aa7a:	b955      	cbnz	r5, 800aa92 <__kernel_rem_pio2+0x30a>
 800aa7c:	b123      	cbz	r3, 800aa88 <__kernel_rem_pio2+0x300>
 800aa7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aa82:	f8c8 3000 	str.w	r3, [r8]
 800aa86:	2301      	movs	r3, #1
 800aa88:	3201      	adds	r2, #1
 800aa8a:	f108 0804 	add.w	r8, r8, #4
 800aa8e:	461d      	mov	r5, r3
 800aa90:	e752      	b.n	800a938 <__kernel_rem_pio2+0x1b0>
 800aa92:	1acb      	subs	r3, r1, r3
 800aa94:	f8c8 3000 	str.w	r3, [r8]
 800aa98:	462b      	mov	r3, r5
 800aa9a:	e7f5      	b.n	800aa88 <__kernel_rem_pio2+0x300>
 800aa9c:	f3af 8000 	nop.w
	...
 800aaac:	3ff00000 	.word	0x3ff00000
 800aab0:	0800bac8 	.word	0x0800bac8
 800aab4:	40200000 	.word	0x40200000
 800aab8:	3ff00000 	.word	0x3ff00000
 800aabc:	3e700000 	.word	0x3e700000
 800aac0:	41700000 	.word	0x41700000
 800aac4:	3fe00000 	.word	0x3fe00000
 800aac8:	0800ba88 	.word	0x0800ba88
 800aacc:	1e62      	subs	r2, r4, #1
 800aace:	ab0e      	add	r3, sp, #56	; 0x38
 800aad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aad8:	a90e      	add	r1, sp, #56	; 0x38
 800aada:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aade:	e739      	b.n	800a954 <__kernel_rem_pio2+0x1cc>
 800aae0:	1e62      	subs	r2, r4, #1
 800aae2:	ab0e      	add	r3, sp, #56	; 0x38
 800aae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aaec:	e7f4      	b.n	800aad8 <__kernel_rem_pio2+0x350>
 800aaee:	a90e      	add	r1, sp, #56	; 0x38
 800aaf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	e789      	b.n	800aa0e <__kernel_rem_pio2+0x286>
 800aafa:	3301      	adds	r3, #1
 800aafc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab00:	2900      	cmp	r1, #0
 800ab02:	d0fa      	beq.n	800aafa <__kernel_rem_pio2+0x372>
 800ab04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab06:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ab0a:	446a      	add	r2, sp
 800ab0c:	3a98      	subs	r2, #152	; 0x98
 800ab0e:	920a      	str	r2, [sp, #40]	; 0x28
 800ab10:	9a08      	ldr	r2, [sp, #32]
 800ab12:	18e3      	adds	r3, r4, r3
 800ab14:	18a5      	adds	r5, r4, r2
 800ab16:	aa22      	add	r2, sp, #136	; 0x88
 800ab18:	f104 0801 	add.w	r8, r4, #1
 800ab1c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	9b04      	ldr	r3, [sp, #16]
 800ab24:	4543      	cmp	r3, r8
 800ab26:	da04      	bge.n	800ab32 <__kernel_rem_pio2+0x3aa>
 800ab28:	461c      	mov	r4, r3
 800ab2a:	e6a3      	b.n	800a874 <__kernel_rem_pio2+0xec>
 800ab2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e7e4      	b.n	800aafc <__kernel_rem_pio2+0x374>
 800ab32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ab38:	f7f5 fd14 	bl	8000564 <__aeabi_i2d>
 800ab3c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ab40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab42:	46ab      	mov	fp, r5
 800ab44:	461c      	mov	r4, r3
 800ab46:	f04f 0900 	mov.w	r9, #0
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	2700      	movs	r7, #0
 800ab4e:	9b06      	ldr	r3, [sp, #24]
 800ab50:	4599      	cmp	r9, r3
 800ab52:	dd06      	ble.n	800ab62 <__kernel_rem_pio2+0x3da>
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ab5a:	f108 0801 	add.w	r8, r8, #1
 800ab5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab60:	e7df      	b.n	800ab22 <__kernel_rem_pio2+0x39a>
 800ab62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ab66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ab6a:	f7f5 fd65 	bl	8000638 <__aeabi_dmul>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 fba9 	bl	80002cc <__adddf3>
 800ab7a:	f109 0901 	add.w	r9, r9, #1
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	e7e4      	b.n	800ab4e <__kernel_rem_pio2+0x3c6>
 800ab84:	3d01      	subs	r5, #1
 800ab86:	e748      	b.n	800aa1a <__kernel_rem_pio2+0x292>
 800ab88:	ec47 6b10 	vmov	d0, r6, r7
 800ab8c:	f1ca 0000 	rsb	r0, sl, #0
 800ab90:	f000 fbd6 	bl	800b340 <scalbn>
 800ab94:	ec57 6b10 	vmov	r6, r7, d0
 800ab98:	4ba0      	ldr	r3, [pc, #640]	; (800ae1c <__kernel_rem_pio2+0x694>)
 800ab9a:	ee10 0a10 	vmov	r0, s0
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4639      	mov	r1, r7
 800aba2:	f7f5 ffcf 	bl	8000b44 <__aeabi_dcmpge>
 800aba6:	b1f8      	cbz	r0, 800abe8 <__kernel_rem_pio2+0x460>
 800aba8:	4b9d      	ldr	r3, [pc, #628]	; (800ae20 <__kernel_rem_pio2+0x698>)
 800abaa:	2200      	movs	r2, #0
 800abac:	4630      	mov	r0, r6
 800abae:	4639      	mov	r1, r7
 800abb0:	f7f5 fd42 	bl	8000638 <__aeabi_dmul>
 800abb4:	f7f5 fff0 	bl	8000b98 <__aeabi_d2iz>
 800abb8:	4680      	mov	r8, r0
 800abba:	f7f5 fcd3 	bl	8000564 <__aeabi_i2d>
 800abbe:	4b97      	ldr	r3, [pc, #604]	; (800ae1c <__kernel_rem_pio2+0x694>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	f7f5 fd39 	bl	8000638 <__aeabi_dmul>
 800abc6:	460b      	mov	r3, r1
 800abc8:	4602      	mov	r2, r0
 800abca:	4639      	mov	r1, r7
 800abcc:	4630      	mov	r0, r6
 800abce:	f7f5 fb7b 	bl	80002c8 <__aeabi_dsub>
 800abd2:	f7f5 ffe1 	bl	8000b98 <__aeabi_d2iz>
 800abd6:	1c65      	adds	r5, r4, #1
 800abd8:	ab0e      	add	r3, sp, #56	; 0x38
 800abda:	f10a 0a18 	add.w	sl, sl, #24
 800abde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800abe2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800abe6:	e720      	b.n	800aa2a <__kernel_rem_pio2+0x2a2>
 800abe8:	4630      	mov	r0, r6
 800abea:	4639      	mov	r1, r7
 800abec:	f7f5 ffd4 	bl	8000b98 <__aeabi_d2iz>
 800abf0:	ab0e      	add	r3, sp, #56	; 0x38
 800abf2:	4625      	mov	r5, r4
 800abf4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800abf8:	e717      	b.n	800aa2a <__kernel_rem_pio2+0x2a2>
 800abfa:	ab0e      	add	r3, sp, #56	; 0x38
 800abfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac00:	f7f5 fcb0 	bl	8000564 <__aeabi_i2d>
 800ac04:	4632      	mov	r2, r6
 800ac06:	463b      	mov	r3, r7
 800ac08:	f7f5 fd16 	bl	8000638 <__aeabi_dmul>
 800ac0c:	4b84      	ldr	r3, [pc, #528]	; (800ae20 <__kernel_rem_pio2+0x698>)
 800ac0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ac12:	2200      	movs	r2, #0
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f7f5 fd0e 	bl	8000638 <__aeabi_dmul>
 800ac1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac20:	4606      	mov	r6, r0
 800ac22:	460f      	mov	r7, r1
 800ac24:	e70f      	b.n	800aa46 <__kernel_rem_pio2+0x2be>
 800ac26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ac2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ac2e:	f7f5 fd03 	bl	8000638 <__aeabi_dmul>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac3a:	f7f5 fb47 	bl	80002cc <__adddf3>
 800ac3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac42:	f108 0801 	add.w	r8, r8, #1
 800ac46:	9b02      	ldr	r3, [sp, #8]
 800ac48:	4598      	cmp	r8, r3
 800ac4a:	dc01      	bgt.n	800ac50 <__kernel_rem_pio2+0x4c8>
 800ac4c:	45b8      	cmp	r8, r7
 800ac4e:	ddea      	ble.n	800ac26 <__kernel_rem_pio2+0x49e>
 800ac50:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ac54:	ab4a      	add	r3, sp, #296	; 0x128
 800ac56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ac5a:	ed87 7b00 	vstr	d7, [r7]
 800ac5e:	3e01      	subs	r6, #1
 800ac60:	e6f8      	b.n	800aa54 <__kernel_rem_pio2+0x2cc>
 800ac62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	dc0b      	bgt.n	800ac80 <__kernel_rem_pio2+0x4f8>
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc35      	bgt.n	800acd8 <__kernel_rem_pio2+0x550>
 800ac6c:	d059      	beq.n	800ad22 <__kernel_rem_pio2+0x59a>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	f003 0007 	and.w	r0, r3, #7
 800ac74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ac78:	ecbd 8b02 	vpop	{d8}
 800ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d1f3      	bne.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ac86:	ab4a      	add	r3, sp, #296	; 0x128
 800ac88:	4423      	add	r3, r4
 800ac8a:	9306      	str	r3, [sp, #24]
 800ac8c:	461c      	mov	r4, r3
 800ac8e:	469a      	mov	sl, r3
 800ac90:	9502      	str	r5, [sp, #8]
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f1aa 0a08 	sub.w	sl, sl, #8
 800ac9a:	dc6b      	bgt.n	800ad74 <__kernel_rem_pio2+0x5ec>
 800ac9c:	46aa      	mov	sl, r5
 800ac9e:	f1ba 0f01 	cmp.w	sl, #1
 800aca2:	f1a4 0408 	sub.w	r4, r4, #8
 800aca6:	f300 8085 	bgt.w	800adb4 <__kernel_rem_pio2+0x62c>
 800acaa:	9c06      	ldr	r4, [sp, #24]
 800acac:	2000      	movs	r0, #0
 800acae:	3408      	adds	r4, #8
 800acb0:	2100      	movs	r1, #0
 800acb2:	2d01      	cmp	r5, #1
 800acb4:	f300 809d 	bgt.w	800adf2 <__kernel_rem_pio2+0x66a>
 800acb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800acbc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800acc0:	f1bb 0f00 	cmp.w	fp, #0
 800acc4:	f040 809b 	bne.w	800adfe <__kernel_rem_pio2+0x676>
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	e9c3 5600 	strd	r5, r6, [r3]
 800acce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800acd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800acd6:	e7ca      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800acd8:	3408      	adds	r4, #8
 800acda:	ab4a      	add	r3, sp, #296	; 0x128
 800acdc:	441c      	add	r4, r3
 800acde:	462e      	mov	r6, r5
 800ace0:	2000      	movs	r0, #0
 800ace2:	2100      	movs	r1, #0
 800ace4:	2e00      	cmp	r6, #0
 800ace6:	da36      	bge.n	800ad56 <__kernel_rem_pio2+0x5ce>
 800ace8:	f1bb 0f00 	cmp.w	fp, #0
 800acec:	d039      	beq.n	800ad62 <__kernel_rem_pio2+0x5da>
 800acee:	4602      	mov	r2, r0
 800acf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acf4:	9c01      	ldr	r4, [sp, #4]
 800acf6:	e9c4 2300 	strd	r2, r3, [r4]
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ad02:	f7f5 fae1 	bl	80002c8 <__aeabi_dsub>
 800ad06:	ae4c      	add	r6, sp, #304	; 0x130
 800ad08:	2401      	movs	r4, #1
 800ad0a:	42a5      	cmp	r5, r4
 800ad0c:	da2c      	bge.n	800ad68 <__kernel_rem_pio2+0x5e0>
 800ad0e:	f1bb 0f00 	cmp.w	fp, #0
 800ad12:	d002      	beq.n	800ad1a <__kernel_rem_pio2+0x592>
 800ad14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad18:	4619      	mov	r1, r3
 800ad1a:	9b01      	ldr	r3, [sp, #4]
 800ad1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ad20:	e7a5      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ad22:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ad26:	eb0d 0403 	add.w	r4, sp, r3
 800ad2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ad2e:	2000      	movs	r0, #0
 800ad30:	2100      	movs	r1, #0
 800ad32:	2d00      	cmp	r5, #0
 800ad34:	da09      	bge.n	800ad4a <__kernel_rem_pio2+0x5c2>
 800ad36:	f1bb 0f00 	cmp.w	fp, #0
 800ad3a:	d002      	beq.n	800ad42 <__kernel_rem_pio2+0x5ba>
 800ad3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad40:	4619      	mov	r1, r3
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	e9c3 0100 	strd	r0, r1, [r3]
 800ad48:	e791      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ad4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad4e:	f7f5 fabd 	bl	80002cc <__adddf3>
 800ad52:	3d01      	subs	r5, #1
 800ad54:	e7ed      	b.n	800ad32 <__kernel_rem_pio2+0x5aa>
 800ad56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad5a:	f7f5 fab7 	bl	80002cc <__adddf3>
 800ad5e:	3e01      	subs	r6, #1
 800ad60:	e7c0      	b.n	800ace4 <__kernel_rem_pio2+0x55c>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	e7c5      	b.n	800acf4 <__kernel_rem_pio2+0x56c>
 800ad68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ad6c:	f7f5 faae 	bl	80002cc <__adddf3>
 800ad70:	3401      	adds	r4, #1
 800ad72:	e7ca      	b.n	800ad0a <__kernel_rem_pio2+0x582>
 800ad74:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ad7c:	9b02      	ldr	r3, [sp, #8]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	9302      	str	r3, [sp, #8]
 800ad82:	4632      	mov	r2, r6
 800ad84:	463b      	mov	r3, r7
 800ad86:	4640      	mov	r0, r8
 800ad88:	4649      	mov	r1, r9
 800ad8a:	f7f5 fa9f 	bl	80002cc <__adddf3>
 800ad8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4640      	mov	r0, r8
 800ad98:	4649      	mov	r1, r9
 800ad9a:	f7f5 fa95 	bl	80002c8 <__aeabi_dsub>
 800ad9e:	4632      	mov	r2, r6
 800ada0:	463b      	mov	r3, r7
 800ada2:	f7f5 fa93 	bl	80002cc <__adddf3>
 800ada6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800adaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800adae:	ed8a 7b00 	vstr	d7, [sl]
 800adb2:	e76e      	b.n	800ac92 <__kernel_rem_pio2+0x50a>
 800adb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800adb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800adbc:	4640      	mov	r0, r8
 800adbe:	4632      	mov	r2, r6
 800adc0:	463b      	mov	r3, r7
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 fa82 	bl	80002cc <__adddf3>
 800adc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4640      	mov	r0, r8
 800add2:	4649      	mov	r1, r9
 800add4:	f7f5 fa78 	bl	80002c8 <__aeabi_dsub>
 800add8:	4632      	mov	r2, r6
 800adda:	463b      	mov	r3, r7
 800addc:	f7f5 fa76 	bl	80002cc <__adddf3>
 800ade0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ade4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ade8:	ed84 7b00 	vstr	d7, [r4]
 800adec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adf0:	e755      	b.n	800ac9e <__kernel_rem_pio2+0x516>
 800adf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800adf6:	f7f5 fa69 	bl	80002cc <__adddf3>
 800adfa:	3d01      	subs	r5, #1
 800adfc:	e759      	b.n	800acb2 <__kernel_rem_pio2+0x52a>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	9a01      	ldr	r2, [sp, #4]
 800ae02:	601d      	str	r5, [r3, #0]
 800ae04:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ae08:	605c      	str	r4, [r3, #4]
 800ae0a:	609f      	str	r7, [r3, #8]
 800ae0c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ae10:	60d3      	str	r3, [r2, #12]
 800ae12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae16:	6110      	str	r0, [r2, #16]
 800ae18:	6153      	str	r3, [r2, #20]
 800ae1a:	e728      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ae1c:	41700000 	.word	0x41700000
 800ae20:	3e700000 	.word	0x3e700000
 800ae24:	00000000 	.word	0x00000000

0800ae28 <__kernel_tan>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ed2d 8b06 	vpush	{d8-d10}
 800ae30:	ec5b ab10 	vmov	sl, fp, d0
 800ae34:	4be0      	ldr	r3, [pc, #896]	; (800b1b8 <__kernel_tan+0x390>)
 800ae36:	b083      	sub	sp, #12
 800ae38:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800ae3c:	429f      	cmp	r7, r3
 800ae3e:	ec59 8b11 	vmov	r8, r9, d1
 800ae42:	4606      	mov	r6, r0
 800ae44:	f8cd b000 	str.w	fp, [sp]
 800ae48:	dc61      	bgt.n	800af0e <__kernel_tan+0xe6>
 800ae4a:	ee10 0a10 	vmov	r0, s0
 800ae4e:	4659      	mov	r1, fp
 800ae50:	f7f5 fea2 	bl	8000b98 <__aeabi_d2iz>
 800ae54:	4605      	mov	r5, r0
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f040 8083 	bne.w	800af62 <__kernel_tan+0x13a>
 800ae5c:	1c73      	adds	r3, r6, #1
 800ae5e:	4652      	mov	r2, sl
 800ae60:	4313      	orrs	r3, r2
 800ae62:	433b      	orrs	r3, r7
 800ae64:	d112      	bne.n	800ae8c <__kernel_tan+0x64>
 800ae66:	ec4b ab10 	vmov	d0, sl, fp
 800ae6a:	f7ff fa41 	bl	800a2f0 <fabs>
 800ae6e:	49d3      	ldr	r1, [pc, #844]	; (800b1bc <__kernel_tan+0x394>)
 800ae70:	ec53 2b10 	vmov	r2, r3, d0
 800ae74:	2000      	movs	r0, #0
 800ae76:	f7f5 fd09 	bl	800088c <__aeabi_ddiv>
 800ae7a:	4682      	mov	sl, r0
 800ae7c:	468b      	mov	fp, r1
 800ae7e:	ec4b ab10 	vmov	d0, sl, fp
 800ae82:	b003      	add	sp, #12
 800ae84:	ecbd 8b06 	vpop	{d8-d10}
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	2e01      	cmp	r6, #1
 800ae8e:	d0f6      	beq.n	800ae7e <__kernel_tan+0x56>
 800ae90:	4642      	mov	r2, r8
 800ae92:	464b      	mov	r3, r9
 800ae94:	4650      	mov	r0, sl
 800ae96:	4659      	mov	r1, fp
 800ae98:	f7f5 fa18 	bl	80002cc <__adddf3>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	460f      	mov	r7, r1
 800aea2:	2000      	movs	r0, #0
 800aea4:	49c6      	ldr	r1, [pc, #792]	; (800b1c0 <__kernel_tan+0x398>)
 800aea6:	f7f5 fcf1 	bl	800088c <__aeabi_ddiv>
 800aeaa:	e9cd 0100 	strd	r0, r1, [sp]
 800aeae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeb2:	462e      	mov	r6, r5
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	462c      	mov	r4, r5
 800aeb8:	4630      	mov	r0, r6
 800aeba:	461d      	mov	r5, r3
 800aebc:	4639      	mov	r1, r7
 800aebe:	465b      	mov	r3, fp
 800aec0:	f7f5 fa02 	bl	80002c8 <__aeabi_dsub>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4640      	mov	r0, r8
 800aeca:	4649      	mov	r1, r9
 800aecc:	f7f5 f9fc 	bl	80002c8 <__aeabi_dsub>
 800aed0:	4632      	mov	r2, r6
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fbb0 	bl	8000638 <__aeabi_dmul>
 800aed8:	4632      	mov	r2, r6
 800aeda:	4680      	mov	r8, r0
 800aedc:	4689      	mov	r9, r1
 800aede:	462b      	mov	r3, r5
 800aee0:	4630      	mov	r0, r6
 800aee2:	4639      	mov	r1, r7
 800aee4:	f7f5 fba8 	bl	8000638 <__aeabi_dmul>
 800aee8:	4bb4      	ldr	r3, [pc, #720]	; (800b1bc <__kernel_tan+0x394>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	f7f5 f9ee 	bl	80002cc <__adddf3>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4640      	mov	r0, r8
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 f9e8 	bl	80002cc <__adddf3>
 800aefc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af00:	f7f5 fb9a 	bl	8000638 <__aeabi_dmul>
 800af04:	4622      	mov	r2, r4
 800af06:	462b      	mov	r3, r5
 800af08:	f7f5 f9e0 	bl	80002cc <__adddf3>
 800af0c:	e7b5      	b.n	800ae7a <__kernel_tan+0x52>
 800af0e:	4bad      	ldr	r3, [pc, #692]	; (800b1c4 <__kernel_tan+0x39c>)
 800af10:	429f      	cmp	r7, r3
 800af12:	dd26      	ble.n	800af62 <__kernel_tan+0x13a>
 800af14:	9b00      	ldr	r3, [sp, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	da09      	bge.n	800af2e <__kernel_tan+0x106>
 800af1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af1e:	469b      	mov	fp, r3
 800af20:	ee10 aa10 	vmov	sl, s0
 800af24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af28:	ee11 8a10 	vmov	r8, s2
 800af2c:	4699      	mov	r9, r3
 800af2e:	4652      	mov	r2, sl
 800af30:	465b      	mov	r3, fp
 800af32:	a183      	add	r1, pc, #524	; (adr r1, 800b140 <__kernel_tan+0x318>)
 800af34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af38:	f7f5 f9c6 	bl	80002c8 <__aeabi_dsub>
 800af3c:	4642      	mov	r2, r8
 800af3e:	464b      	mov	r3, r9
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	a180      	add	r1, pc, #512	; (adr r1, 800b148 <__kernel_tan+0x320>)
 800af46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af4a:	f7f5 f9bd 	bl	80002c8 <__aeabi_dsub>
 800af4e:	4622      	mov	r2, r4
 800af50:	462b      	mov	r3, r5
 800af52:	f7f5 f9bb 	bl	80002cc <__adddf3>
 800af56:	f04f 0800 	mov.w	r8, #0
 800af5a:	4682      	mov	sl, r0
 800af5c:	468b      	mov	fp, r1
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	4652      	mov	r2, sl
 800af64:	465b      	mov	r3, fp
 800af66:	4650      	mov	r0, sl
 800af68:	4659      	mov	r1, fp
 800af6a:	f7f5 fb65 	bl	8000638 <__aeabi_dmul>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	ec43 2b18 	vmov	d8, r2, r3
 800af76:	f7f5 fb5f 	bl	8000638 <__aeabi_dmul>
 800af7a:	ec53 2b18 	vmov	r2, r3, d8
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	f7f5 fb57 	bl	8000638 <__aeabi_dmul>
 800af8a:	a371      	add	r3, pc, #452	; (adr r3, 800b150 <__kernel_tan+0x328>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	ec41 0b19 	vmov	d9, r0, r1
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 fb4e 	bl	8000638 <__aeabi_dmul>
 800af9c:	a36e      	add	r3, pc, #440	; (adr r3, 800b158 <__kernel_tan+0x330>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	f7f5 f993 	bl	80002cc <__adddf3>
 800afa6:	4622      	mov	r2, r4
 800afa8:	462b      	mov	r3, r5
 800afaa:	f7f5 fb45 	bl	8000638 <__aeabi_dmul>
 800afae:	a36c      	add	r3, pc, #432	; (adr r3, 800b160 <__kernel_tan+0x338>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 f98a 	bl	80002cc <__adddf3>
 800afb8:	4622      	mov	r2, r4
 800afba:	462b      	mov	r3, r5
 800afbc:	f7f5 fb3c 	bl	8000638 <__aeabi_dmul>
 800afc0:	a369      	add	r3, pc, #420	; (adr r3, 800b168 <__kernel_tan+0x340>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 f981 	bl	80002cc <__adddf3>
 800afca:	4622      	mov	r2, r4
 800afcc:	462b      	mov	r3, r5
 800afce:	f7f5 fb33 	bl	8000638 <__aeabi_dmul>
 800afd2:	a367      	add	r3, pc, #412	; (adr r3, 800b170 <__kernel_tan+0x348>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 f978 	bl	80002cc <__adddf3>
 800afdc:	4622      	mov	r2, r4
 800afde:	462b      	mov	r3, r5
 800afe0:	f7f5 fb2a 	bl	8000638 <__aeabi_dmul>
 800afe4:	a364      	add	r3, pc, #400	; (adr r3, 800b178 <__kernel_tan+0x350>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f7f5 f96f 	bl	80002cc <__adddf3>
 800afee:	ec53 2b18 	vmov	r2, r3, d8
 800aff2:	f7f5 fb21 	bl	8000638 <__aeabi_dmul>
 800aff6:	a362      	add	r3, pc, #392	; (adr r3, 800b180 <__kernel_tan+0x358>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	ec41 0b1a 	vmov	d10, r0, r1
 800b000:	4620      	mov	r0, r4
 800b002:	4629      	mov	r1, r5
 800b004:	f7f5 fb18 	bl	8000638 <__aeabi_dmul>
 800b008:	a35f      	add	r3, pc, #380	; (adr r3, 800b188 <__kernel_tan+0x360>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f7f5 f95d 	bl	80002cc <__adddf3>
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 fb0f 	bl	8000638 <__aeabi_dmul>
 800b01a:	a35d      	add	r3, pc, #372	; (adr r3, 800b190 <__kernel_tan+0x368>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 f954 	bl	80002cc <__adddf3>
 800b024:	4622      	mov	r2, r4
 800b026:	462b      	mov	r3, r5
 800b028:	f7f5 fb06 	bl	8000638 <__aeabi_dmul>
 800b02c:	a35a      	add	r3, pc, #360	; (adr r3, 800b198 <__kernel_tan+0x370>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f7f5 f94b 	bl	80002cc <__adddf3>
 800b036:	4622      	mov	r2, r4
 800b038:	462b      	mov	r3, r5
 800b03a:	f7f5 fafd 	bl	8000638 <__aeabi_dmul>
 800b03e:	a358      	add	r3, pc, #352	; (adr r3, 800b1a0 <__kernel_tan+0x378>)
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f7f5 f942 	bl	80002cc <__adddf3>
 800b048:	4622      	mov	r2, r4
 800b04a:	462b      	mov	r3, r5
 800b04c:	f7f5 faf4 	bl	8000638 <__aeabi_dmul>
 800b050:	a355      	add	r3, pc, #340	; (adr r3, 800b1a8 <__kernel_tan+0x380>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 f939 	bl	80002cc <__adddf3>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	ec51 0b1a 	vmov	r0, r1, d10
 800b062:	f7f5 f933 	bl	80002cc <__adddf3>
 800b066:	ec53 2b19 	vmov	r2, r3, d9
 800b06a:	f7f5 fae5 	bl	8000638 <__aeabi_dmul>
 800b06e:	4642      	mov	r2, r8
 800b070:	464b      	mov	r3, r9
 800b072:	f7f5 f92b 	bl	80002cc <__adddf3>
 800b076:	ec53 2b18 	vmov	r2, r3, d8
 800b07a:	f7f5 fadd 	bl	8000638 <__aeabi_dmul>
 800b07e:	4642      	mov	r2, r8
 800b080:	464b      	mov	r3, r9
 800b082:	f7f5 f923 	bl	80002cc <__adddf3>
 800b086:	a34a      	add	r3, pc, #296	; (adr r3, 800b1b0 <__kernel_tan+0x388>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	ec51 0b19 	vmov	r0, r1, d9
 800b094:	f7f5 fad0 	bl	8000638 <__aeabi_dmul>
 800b098:	4622      	mov	r2, r4
 800b09a:	462b      	mov	r3, r5
 800b09c:	f7f5 f916 	bl	80002cc <__adddf3>
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	ec41 0b18 	vmov	d8, r0, r1
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	f7f5 f90e 	bl	80002cc <__adddf3>
 800b0b0:	4b44      	ldr	r3, [pc, #272]	; (800b1c4 <__kernel_tan+0x39c>)
 800b0b2:	429f      	cmp	r7, r3
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	f340 8086 	ble.w	800b1c8 <__kernel_tan+0x3a0>
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7f5 fa51 	bl	8000564 <__aeabi_i2d>
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	4689      	mov	r9, r1
 800b0c8:	462b      	mov	r3, r5
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 fab3 	bl	8000638 <__aeabi_dmul>
 800b0d2:	4642      	mov	r2, r8
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	460f      	mov	r7, r1
 800b0d8:	464b      	mov	r3, r9
 800b0da:	4620      	mov	r0, r4
 800b0dc:	4629      	mov	r1, r5
 800b0de:	f7f5 f8f5 	bl	80002cc <__adddf3>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	f7f5 fbcf 	bl	800088c <__aeabi_ddiv>
 800b0ee:	ec53 2b18 	vmov	r2, r3, d8
 800b0f2:	f7f5 f8e9 	bl	80002c8 <__aeabi_dsub>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	4659      	mov	r1, fp
 800b0fe:	f7f5 f8e3 	bl	80002c8 <__aeabi_dsub>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	f7f5 f8e1 	bl	80002cc <__adddf3>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 f8d9 	bl	80002c8 <__aeabi_dsub>
 800b116:	9b00      	ldr	r3, [sp, #0]
 800b118:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b11c:	f00a 0a02 	and.w	sl, sl, #2
 800b120:	4604      	mov	r4, r0
 800b122:	f1ca 0001 	rsb	r0, sl, #1
 800b126:	460d      	mov	r5, r1
 800b128:	f7f5 fa1c 	bl	8000564 <__aeabi_i2d>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4620      	mov	r0, r4
 800b132:	4629      	mov	r1, r5
 800b134:	f7f5 fa80 	bl	8000638 <__aeabi_dmul>
 800b138:	e69f      	b.n	800ae7a <__kernel_tan+0x52>
 800b13a:	bf00      	nop
 800b13c:	f3af 8000 	nop.w
 800b140:	54442d18 	.word	0x54442d18
 800b144:	3fe921fb 	.word	0x3fe921fb
 800b148:	33145c07 	.word	0x33145c07
 800b14c:	3c81a626 	.word	0x3c81a626
 800b150:	74bf7ad4 	.word	0x74bf7ad4
 800b154:	3efb2a70 	.word	0x3efb2a70
 800b158:	32f0a7e9 	.word	0x32f0a7e9
 800b15c:	3f12b80f 	.word	0x3f12b80f
 800b160:	1a8d1068 	.word	0x1a8d1068
 800b164:	3f3026f7 	.word	0x3f3026f7
 800b168:	fee08315 	.word	0xfee08315
 800b16c:	3f57dbc8 	.word	0x3f57dbc8
 800b170:	e96e8493 	.word	0xe96e8493
 800b174:	3f8226e3 	.word	0x3f8226e3
 800b178:	1bb341fe 	.word	0x1bb341fe
 800b17c:	3faba1ba 	.word	0x3faba1ba
 800b180:	db605373 	.word	0xdb605373
 800b184:	bef375cb 	.word	0xbef375cb
 800b188:	a03792a6 	.word	0xa03792a6
 800b18c:	3f147e88 	.word	0x3f147e88
 800b190:	f2f26501 	.word	0xf2f26501
 800b194:	3f4344d8 	.word	0x3f4344d8
 800b198:	c9560328 	.word	0xc9560328
 800b19c:	3f6d6d22 	.word	0x3f6d6d22
 800b1a0:	8406d637 	.word	0x8406d637
 800b1a4:	3f9664f4 	.word	0x3f9664f4
 800b1a8:	1110fe7a 	.word	0x1110fe7a
 800b1ac:	3fc11111 	.word	0x3fc11111
 800b1b0:	55555563 	.word	0x55555563
 800b1b4:	3fd55555 	.word	0x3fd55555
 800b1b8:	3e2fffff 	.word	0x3e2fffff
 800b1bc:	3ff00000 	.word	0x3ff00000
 800b1c0:	bff00000 	.word	0xbff00000
 800b1c4:	3fe59427 	.word	0x3fe59427
 800b1c8:	2e01      	cmp	r6, #1
 800b1ca:	d02f      	beq.n	800b22c <__kernel_tan+0x404>
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4689      	mov	r9, r1
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	4917      	ldr	r1, [pc, #92]	; (800b234 <__kernel_tan+0x40c>)
 800b1d8:	f7f5 fb58 	bl	800088c <__aeabi_ddiv>
 800b1dc:	2600      	movs	r6, #0
 800b1de:	e9cd 0100 	strd	r0, r1, [sp]
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	465b      	mov	r3, fp
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	4639      	mov	r1, r7
 800b1ea:	f7f5 f86d 	bl	80002c8 <__aeabi_dsub>
 800b1ee:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	ec51 0b18 	vmov	r0, r1, d8
 800b1fa:	f7f5 f865 	bl	80002c8 <__aeabi_dsub>
 800b1fe:	4632      	mov	r2, r6
 800b200:	462b      	mov	r3, r5
 800b202:	f7f5 fa19 	bl	8000638 <__aeabi_dmul>
 800b206:	46b0      	mov	r8, r6
 800b208:	460f      	mov	r7, r1
 800b20a:	4642      	mov	r2, r8
 800b20c:	462b      	mov	r3, r5
 800b20e:	4634      	mov	r4, r6
 800b210:	4649      	mov	r1, r9
 800b212:	4606      	mov	r6, r0
 800b214:	4640      	mov	r0, r8
 800b216:	f7f5 fa0f 	bl	8000638 <__aeabi_dmul>
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <__kernel_tan+0x410>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	f7f5 f855 	bl	80002cc <__adddf3>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4630      	mov	r0, r6
 800b228:	4639      	mov	r1, r7
 800b22a:	e665      	b.n	800aef8 <__kernel_tan+0xd0>
 800b22c:	4682      	mov	sl, r0
 800b22e:	468b      	mov	fp, r1
 800b230:	e625      	b.n	800ae7e <__kernel_tan+0x56>
 800b232:	bf00      	nop
 800b234:	bff00000 	.word	0xbff00000
 800b238:	3ff00000 	.word	0x3ff00000
 800b23c:	00000000 	.word	0x00000000

0800b240 <floor>:
 800b240:	ec51 0b10 	vmov	r0, r1, d0
 800b244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b248:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b24c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b250:	2e13      	cmp	r6, #19
 800b252:	ee10 5a10 	vmov	r5, s0
 800b256:	ee10 8a10 	vmov	r8, s0
 800b25a:	460c      	mov	r4, r1
 800b25c:	dc32      	bgt.n	800b2c4 <floor+0x84>
 800b25e:	2e00      	cmp	r6, #0
 800b260:	da14      	bge.n	800b28c <floor+0x4c>
 800b262:	a333      	add	r3, pc, #204	; (adr r3, 800b330 <floor+0xf0>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f7f5 f830 	bl	80002cc <__adddf3>
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	f7f5 fc72 	bl	8000b58 <__aeabi_dcmpgt>
 800b274:	b138      	cbz	r0, 800b286 <floor+0x46>
 800b276:	2c00      	cmp	r4, #0
 800b278:	da57      	bge.n	800b32a <floor+0xea>
 800b27a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b27e:	431d      	orrs	r5, r3
 800b280:	d001      	beq.n	800b286 <floor+0x46>
 800b282:	4c2d      	ldr	r4, [pc, #180]	; (800b338 <floor+0xf8>)
 800b284:	2500      	movs	r5, #0
 800b286:	4621      	mov	r1, r4
 800b288:	4628      	mov	r0, r5
 800b28a:	e025      	b.n	800b2d8 <floor+0x98>
 800b28c:	4f2b      	ldr	r7, [pc, #172]	; (800b33c <floor+0xfc>)
 800b28e:	4137      	asrs	r7, r6
 800b290:	ea01 0307 	and.w	r3, r1, r7
 800b294:	4303      	orrs	r3, r0
 800b296:	d01f      	beq.n	800b2d8 <floor+0x98>
 800b298:	a325      	add	r3, pc, #148	; (adr r3, 800b330 <floor+0xf0>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f7f5 f815 	bl	80002cc <__adddf3>
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f7f5 fc57 	bl	8000b58 <__aeabi_dcmpgt>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d0eb      	beq.n	800b286 <floor+0x46>
 800b2ae:	2c00      	cmp	r4, #0
 800b2b0:	bfbe      	ittt	lt
 800b2b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b2b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b2ba:	19a4      	addlt	r4, r4, r6
 800b2bc:	ea24 0407 	bic.w	r4, r4, r7
 800b2c0:	2500      	movs	r5, #0
 800b2c2:	e7e0      	b.n	800b286 <floor+0x46>
 800b2c4:	2e33      	cmp	r6, #51	; 0x33
 800b2c6:	dd0b      	ble.n	800b2e0 <floor+0xa0>
 800b2c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b2cc:	d104      	bne.n	800b2d8 <floor+0x98>
 800b2ce:	ee10 2a10 	vmov	r2, s0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	f7f4 fffa 	bl	80002cc <__adddf3>
 800b2d8:	ec41 0b10 	vmov	d0, r0, r1
 800b2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e8:	fa23 f707 	lsr.w	r7, r3, r7
 800b2ec:	4207      	tst	r7, r0
 800b2ee:	d0f3      	beq.n	800b2d8 <floor+0x98>
 800b2f0:	a30f      	add	r3, pc, #60	; (adr r3, 800b330 <floor+0xf0>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f7f4 ffe9 	bl	80002cc <__adddf3>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f7f5 fc2b 	bl	8000b58 <__aeabi_dcmpgt>
 800b302:	2800      	cmp	r0, #0
 800b304:	d0bf      	beq.n	800b286 <floor+0x46>
 800b306:	2c00      	cmp	r4, #0
 800b308:	da02      	bge.n	800b310 <floor+0xd0>
 800b30a:	2e14      	cmp	r6, #20
 800b30c:	d103      	bne.n	800b316 <floor+0xd6>
 800b30e:	3401      	adds	r4, #1
 800b310:	ea25 0507 	bic.w	r5, r5, r7
 800b314:	e7b7      	b.n	800b286 <floor+0x46>
 800b316:	2301      	movs	r3, #1
 800b318:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b31c:	fa03 f606 	lsl.w	r6, r3, r6
 800b320:	4435      	add	r5, r6
 800b322:	4545      	cmp	r5, r8
 800b324:	bf38      	it	cc
 800b326:	18e4      	addcc	r4, r4, r3
 800b328:	e7f2      	b.n	800b310 <floor+0xd0>
 800b32a:	2500      	movs	r5, #0
 800b32c:	462c      	mov	r4, r5
 800b32e:	e7aa      	b.n	800b286 <floor+0x46>
 800b330:	8800759c 	.word	0x8800759c
 800b334:	7e37e43c 	.word	0x7e37e43c
 800b338:	bff00000 	.word	0xbff00000
 800b33c:	000fffff 	.word	0x000fffff

0800b340 <scalbn>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	ec55 4b10 	vmov	r4, r5, d0
 800b346:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b34a:	4606      	mov	r6, r0
 800b34c:	462b      	mov	r3, r5
 800b34e:	b99a      	cbnz	r2, 800b378 <scalbn+0x38>
 800b350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b354:	4323      	orrs	r3, r4
 800b356:	d036      	beq.n	800b3c6 <scalbn+0x86>
 800b358:	4b39      	ldr	r3, [pc, #228]	; (800b440 <scalbn+0x100>)
 800b35a:	4629      	mov	r1, r5
 800b35c:	ee10 0a10 	vmov	r0, s0
 800b360:	2200      	movs	r2, #0
 800b362:	f7f5 f969 	bl	8000638 <__aeabi_dmul>
 800b366:	4b37      	ldr	r3, [pc, #220]	; (800b444 <scalbn+0x104>)
 800b368:	429e      	cmp	r6, r3
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	da10      	bge.n	800b392 <scalbn+0x52>
 800b370:	a32b      	add	r3, pc, #172	; (adr r3, 800b420 <scalbn+0xe0>)
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	e03a      	b.n	800b3ee <scalbn+0xae>
 800b378:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b37c:	428a      	cmp	r2, r1
 800b37e:	d10c      	bne.n	800b39a <scalbn+0x5a>
 800b380:	ee10 2a10 	vmov	r2, s0
 800b384:	4620      	mov	r0, r4
 800b386:	4629      	mov	r1, r5
 800b388:	f7f4 ffa0 	bl	80002cc <__adddf3>
 800b38c:	4604      	mov	r4, r0
 800b38e:	460d      	mov	r5, r1
 800b390:	e019      	b.n	800b3c6 <scalbn+0x86>
 800b392:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b396:	460b      	mov	r3, r1
 800b398:	3a36      	subs	r2, #54	; 0x36
 800b39a:	4432      	add	r2, r6
 800b39c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b3a0:	428a      	cmp	r2, r1
 800b3a2:	dd08      	ble.n	800b3b6 <scalbn+0x76>
 800b3a4:	2d00      	cmp	r5, #0
 800b3a6:	a120      	add	r1, pc, #128	; (adr r1, 800b428 <scalbn+0xe8>)
 800b3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ac:	da1c      	bge.n	800b3e8 <scalbn+0xa8>
 800b3ae:	a120      	add	r1, pc, #128	; (adr r1, 800b430 <scalbn+0xf0>)
 800b3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b4:	e018      	b.n	800b3e8 <scalbn+0xa8>
 800b3b6:	2a00      	cmp	r2, #0
 800b3b8:	dd08      	ble.n	800b3cc <scalbn+0x8c>
 800b3ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3c6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b3d0:	da19      	bge.n	800b406 <scalbn+0xc6>
 800b3d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3d6:	429e      	cmp	r6, r3
 800b3d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b3dc:	dd0a      	ble.n	800b3f4 <scalbn+0xb4>
 800b3de:	a112      	add	r1, pc, #72	; (adr r1, 800b428 <scalbn+0xe8>)
 800b3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e2      	bne.n	800b3ae <scalbn+0x6e>
 800b3e8:	a30f      	add	r3, pc, #60	; (adr r3, 800b428 <scalbn+0xe8>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f5 f923 	bl	8000638 <__aeabi_dmul>
 800b3f2:	e7cb      	b.n	800b38c <scalbn+0x4c>
 800b3f4:	a10a      	add	r1, pc, #40	; (adr r1, 800b420 <scalbn+0xe0>)
 800b3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0b8      	beq.n	800b370 <scalbn+0x30>
 800b3fe:	a10e      	add	r1, pc, #56	; (adr r1, 800b438 <scalbn+0xf8>)
 800b400:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b404:	e7b4      	b.n	800b370 <scalbn+0x30>
 800b406:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b40a:	3236      	adds	r2, #54	; 0x36
 800b40c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b410:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b414:	4620      	mov	r0, r4
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <scalbn+0x108>)
 800b418:	2200      	movs	r2, #0
 800b41a:	e7e8      	b.n	800b3ee <scalbn+0xae>
 800b41c:	f3af 8000 	nop.w
 800b420:	c2f8f359 	.word	0xc2f8f359
 800b424:	01a56e1f 	.word	0x01a56e1f
 800b428:	8800759c 	.word	0x8800759c
 800b42c:	7e37e43c 	.word	0x7e37e43c
 800b430:	8800759c 	.word	0x8800759c
 800b434:	fe37e43c 	.word	0xfe37e43c
 800b438:	c2f8f359 	.word	0xc2f8f359
 800b43c:	81a56e1f 	.word	0x81a56e1f
 800b440:	43500000 	.word	0x43500000
 800b444:	ffff3cb0 	.word	0xffff3cb0
 800b448:	3c900000 	.word	0x3c900000

0800b44c <_init>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr

0800b458 <_fini>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	bf00      	nop
 800b45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45e:	bc08      	pop	{r3}
 800b460:	469e      	mov	lr, r3
 800b462:	4770      	bx	lr
