
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f374  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800f548  0800f548  0001f548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc98  0800fc98  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc98  0800fc98  0001fc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fca0  0800fca0  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fca0  0800fca0  0001fca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fca4  0800fca4  0001fca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800fca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  20000268  0800ff10  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  0800ff10  00020b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180ee  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ed  00000000  00000000  00038386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263e9  00000000  00000000  0003dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198b9  00000000  00000000  00064391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1557  00000000  00000000  0007dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f1a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  0015f1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000268 	.word	0x20000268
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f52c 	.word	0x0800f52c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000026c 	.word	0x2000026c
 800020c:	0800f52c 	.word	0x0800f52c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f9e:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_SystemReset+0x28>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <__NVIC_SystemReset+0x20>
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0004 	.word	0x05fa0004

08000fb8 <F4_Basic_Init>:
uint8_t mode;
float v_ref; //mm/s
uint8_t leaveLineEnabled;

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder,TIM_HandleTypeDef *htim_delay,TIM_HandleTypeDef *htim_rand)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	4851      	ldr	r0, [pc, #324]	; (8001114 <F4_Basic_Init+0x15c>)
 8000fce:	f006 fb2b 	bl	8007628 <HAL_GPIO_WritePin>
	LED_B(0);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	484e      	ldr	r0, [pc, #312]	; (8001114 <F4_Basic_Init+0x15c>)
 8000fda:	f006 fb25 	bl	8007628 <HAL_GPIO_WritePin>
	LED_G(0);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	484c      	ldr	r0, [pc, #304]	; (8001114 <F4_Basic_Init+0x15c>)
 8000fe4:	f006 fb20 	bl	8007628 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fee:	4849      	ldr	r0, [pc, #292]	; (8001114 <F4_Basic_Init+0x15c>)
 8000ff0:	f006 fb1a 	bl	8007628 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4847      	ldr	r0, [pc, #284]	; (8001118 <F4_Basic_Init+0x160>)
 8000ffa:	f006 fb15 	bl	8007628 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4946      	ldr	r1, [pc, #280]	; (800111c <F4_Basic_Init+0x164>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00a fdcb 	bl	800bba0 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8fe 	bl	8000210 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	f107 0110 	add.w	r1, r7, #16
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f009 f855 	bl	800a0ce <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <F4_Basic_Init+0x168>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 800102a:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <F4_Basic_Init+0x16c>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
	leaveLineEnabled=0;
 8001030:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <F4_Basic_Init+0x170>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

	swState[0] = SW1;
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4837      	ldr	r0, [pc, #220]	; (8001118 <F4_Basic_Init+0x160>)
 800103c:	f006 fadc 	bl	80075f8 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <F4_Basic_Init+0x174>)
 8001046:	701a      	strb	r2, [r3, #0]
	swState[1] = SW2;
 8001048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104c:	4831      	ldr	r0, [pc, #196]	; (8001114 <F4_Basic_Init+0x15c>)
 800104e:	f006 fad3 	bl	80075f8 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <F4_Basic_Init+0x174>)
 8001058:	705a      	strb	r2, [r3, #1]
	if(SW2)LED_R(1);
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	482d      	ldr	r0, [pc, #180]	; (8001114 <F4_Basic_Init+0x15c>)
 8001060:	f006 faca 	bl	80075f8 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <F4_Basic_Init+0xc0>
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4828      	ldr	r0, [pc, #160]	; (8001114 <F4_Basic_Init+0x15c>)
 8001072:	f006 fad9 	bl	8007628 <HAL_GPIO_WritePin>
 8001076:	e005      	b.n	8001084 <F4_Basic_Init+0xcc>
	else LED_R(0);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4825      	ldr	r0, [pc, #148]	; (8001114 <F4_Basic_Init+0x15c>)
 8001080:	f006 fad2 	bl	8007628 <HAL_GPIO_WritePin>

	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 8001084:	2200      	movs	r2, #0
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <F4_Basic_Init+0x178>)
 8001088:	4611      	mov	r1, r2
 800108a:	7099      	strb	r1, [r3, #2]
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <F4_Basic_Init+0x178>)
 800108e:	4611      	mov	r1, r2
 8001090:	7059      	strb	r1, [r3, #1]
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <F4_Basic_Init+0x178>)
 8001094:	701a      	strb	r2, [r3, #0]
	fromPC[0]=150;
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <F4_Basic_Init+0x17c>)
 8001098:	2296      	movs	r2, #150	; 0x96
 800109a:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <F4_Basic_Init+0x17c>)
 800109e:	2296      	movs	r2, #150	; 0x96
 80010a0:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <F4_Basic_Init+0x180>)
 80010a4:	2252      	movs	r2, #82	; 0x52
 80010a6:	701a      	strb	r2, [r3, #0]
	v_ref = 1000;
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <F4_Basic_Init+0x184>)
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <F4_Basic_Init+0x188>)
 80010ac:	601a      	str	r2, [r3, #0]
	v=0;
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <F4_Basic_Init+0x18c>)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=SERVO_REAR_CCR_MIDDLE;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <F4_Basic_Init+0x190>)
 80010b8:	f44f 7219 	mov.w	r2, #612	; 0x264
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE;
 80010be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c2:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	//TIM3->CCR1=499; //0 kitöltési tényező a motorra
	//TIM3->CCR2=499;
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	f007 f981 	bl	80083d0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_delay);//heart beat timer tick start
 80010ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010d0:	f007 f97e 	bl	80083d0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_rand);//heart beat timer tick start
 80010d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010d6:	f007 f97b 	bl	80083d0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 80010da:	2100      	movs	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f007 fa39 	bl	8008554 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 80010e2:	2104      	movs	r1, #4
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f007 fa35 	bl	8008554 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 80010ea:	2100      	movs	r1, #0
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f007 fa31 	bl	8008554 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 80010f2:	210c      	movs	r1, #12
 80010f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010f6:	f007 fa2d 	bl	8008554 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 80010fa:	213c      	movs	r1, #60	; 0x3c
 80010fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010fe:	f007 fd9b 	bl	8008c38 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	HAL_UART_Receive_IT(huart_debugg, fromPC, 2);
 8001102:	2202      	movs	r2, #2
 8001104:	490b      	ldr	r1, [pc, #44]	; (8001134 <F4_Basic_Init+0x17c>)
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f009 f915 	bl	800a336 <HAL_UART_Receive_IT>
}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	; 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020400 	.word	0x40020400
 8001118:	40020000 	.word	0x40020000
 800111c:	0800f548 	.word	0x0800f548
 8001120:	20000b40 	.word	0x20000b40
 8001124:	20000b41 	.word	0x20000b41
 8001128:	20000294 	.word	0x20000294
 800112c:	20000284 	.word	0x20000284
 8001130:	20000288 	.word	0x20000288
 8001134:	2000028c 	.word	0x2000028c
 8001138:	2000028e 	.word	0x2000028e
 800113c:	20000290 	.word	0x20000290
 8001140:	447a0000 	.word	0x447a0000
 8001144:	20000660 	.word	0x20000660
 8001148:	40010000 	.word	0x40010000

0800114c <HDI_Read_Task>:


void HDI_Read_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
	static uint32_t hdi_read_task_tick=0;

	if(hdi_read_task_tick>tick) return;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HDI_Read_Task+0xb4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d349      	bcc.n	80011f8 <HDI_Read_Task+0xac>
	hdi_read_task_tick = tick + period;
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	4a25      	ldr	r2, [pc, #148]	; (8001200 <HDI_Read_Task+0xb4>)
 800116c:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4824      	ldr	r0, [pc, #144]	; (8001204 <HDI_Read_Task+0xb8>)
 8001174:	f006 fa40 	bl	80075f8 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HDI_Read_Task+0xbc>)
 800117e:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <HDI_Read_Task+0xc0>)
 8001186:	f006 fa37 	bl	80075f8 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HDI_Read_Task+0xbc>)
 8001190:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HDI_Read_Task+0xbc>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <HDI_Read_Task+0x60>
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HDI_Read_Task+0xc4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b3f      	cmp	r3, #63	; 0x3f
 80011a0:	d104      	bne.n	80011ac <HDI_Read_Task+0x60>
 80011a2:	2200      	movs	r2, #0
 80011a4:	2102      	movs	r1, #2
 80011a6:	4819      	ldr	r0, [pc, #100]	; (800120c <HDI_Read_Task+0xc0>)
 80011a8:	f006 fa3e 	bl	8007628 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HDI_Read_Task+0xbc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d108      	bne.n	80011c6 <HDI_Read_Task+0x7a>
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HDI_Read_Task+0xc4>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b3f      	cmp	r3, #63	; 0x3f
 80011ba:	d104      	bne.n	80011c6 <HDI_Read_Task+0x7a>
 80011bc:	2201      	movs	r2, #1
 80011be:	2102      	movs	r1, #2
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <HDI_Read_Task+0xc0>)
 80011c2:	f006 fa31 	bl	8007628 <HAL_GPIO_WritePin>
	if(swState[1]) LED_R(1);
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HDI_Read_Task+0xbc>)
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HDI_Read_Task+0x8e>
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <HDI_Read_Task+0xc0>)
 80011d6:	f006 fa27 	bl	8007628 <HAL_GPIO_WritePin>
	if(!swState[1]) LED_R(0);
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HDI_Read_Task+0xbc>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HDI_Read_Task+0xa2>
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <HDI_Read_Task+0xc0>)
 80011ea:	f006 fa1d 	bl	8007628 <HAL_GPIO_WritePin>

	if(bFlag[0]);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HDI_Read_Task+0xc8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
	if(bFlag[1]);
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HDI_Read_Task+0xc8>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	e000      	b.n	80011fa <HDI_Read_Task+0xae>
	if(hdi_read_task_tick>tick) return;
 80011f8:	bf00      	nop

}
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000298 	.word	0x20000298
 8001204:	40020000 	.word	0x40020000
 8001208:	20000284 	.word	0x20000284
 800120c:	40020400 	.word	0x40020400
 8001210:	2000028e 	.word	0x2000028e
 8001214:	20000288 	.word	0x20000288

08001218 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 8001220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <Uart_Receive_From_PC_ISR+0x3c>)
 8001226:	f006 fa18 	bl	800765a <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 2);
 800122a:	2202      	movs	r2, #2
 800122c:	490a      	ldr	r1, [pc, #40]	; (8001258 <Uart_Receive_From_PC_ISR+0x40>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f009 f881 	bl	800a336 <HAL_UART_Receive_IT>
	TIM2->CCR1 = 4*fromPC[0];
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <Uart_Receive_From_PC_ISR+0x40>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	009a      	lsls	r2, r3, #2
 800123a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR4 = 4*fromPC[1];
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <Uart_Receive_From_PC_ISR+0x40>)
 8001242:	785b      	ldrb	r3, [r3, #1]
 8001244:	009a      	lsls	r2, r3, #2
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <Uart_Receive_From_PC_ISR+0x44>)
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020400 	.word	0x40020400
 8001258:	2000028c 	.word	0x2000028c
 800125c:	40010000 	.word	0x40010000

08001260 <B1_ISR>:

void B1_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
		HAL_FLASH_Unlock();
 800126a:	f005 fe77 	bl	8006f5c <HAL_FLASH_Unlock>
		Delay(50);
 800126e:	2032      	movs	r0, #50	; 0x32
 8001270:	f003 fcec 	bl	8004c4c <Delay>
		FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);
 8001274:	2102      	movs	r1, #2
 8001276:	2006      	movs	r0, #6
 8001278:	f005 ffe2 	bl	8007240 <FLASH_Erase_Sector>
		Delay(50);
 800127c:	2032      	movs	r0, #50	; 0x32
 800127e:	f003 fce5 	bl	8004c4c <Delay>
		HAL_FLASH_Lock();
 8001282:	f005 fe8d 	bl	8006fa0 <HAL_FLASH_Lock>

		int i;
		for(i=0;i<8;i++)
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e00a      	b.n	80012a2 <B1_ISR+0x42>
		{
			LED_R_TOGGLE;
 800128c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001290:	4828      	ldr	r0, [pc, #160]	; (8001334 <B1_ISR+0xd4>)
 8001292:	f006 f9e2 	bl	800765a <HAL_GPIO_TogglePin>
			Delay(150);
 8001296:	2096      	movs	r0, #150	; 0x96
 8001298:	f003 fcd8 	bl	8004c4c <Delay>
		for(i=0;i<8;i++)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	ddf1      	ble.n	800128c <B1_ISR+0x2c>
		}
		LED_R(0);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ae:	4821      	ldr	r0, [pc, #132]	; (8001334 <B1_ISR+0xd4>)
 80012b0:	f006 f9ba 	bl	8007628 <HAL_GPIO_WritePin>

		HAL_FLASH_Unlock();
 80012b4:	f005 fe52 	bl	8006f5c <HAL_FLASH_Unlock>
		Delay(50);
 80012b8:	2032      	movs	r0, #50	; 0x32
 80012ba:	f003 fcc7 	bl	8004c4c <Delay>
		for(i=0;i<22;i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e01a      	b.n	80012fa <B1_ISR+0x9a>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80012ca:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80012ce:	4618      	mov	r0, r3
 80012d0:	4919      	ldr	r1, [pc, #100]	; (8001338 <B1_ISR+0xd8>)
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	3304      	adds	r3, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	17da      	asrs	r2, r3, #31
 80012e4:	4698      	mov	r8, r3
 80012e6:	4691      	mov	r9, r2
 80012e8:	4642      	mov	r2, r8
 80012ea:	464b      	mov	r3, r9
 80012ec:	4601      	mov	r1, r0
 80012ee:	2000      	movs	r0, #0
 80012f0:	f005 fde0 	bl	8006eb4 <HAL_FLASH_Program>
		for(i=0;i<22;i++)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b15      	cmp	r3, #21
 80012fe:	dde1      	ble.n	80012c4 <B1_ISR+0x64>
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+22, collectedPoints);
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <B1_ISR+0xdc>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2200      	movs	r2, #0
 8001308:	461c      	mov	r4, r3
 800130a:	4615      	mov	r5, r2
 800130c:	4622      	mov	r2, r4
 800130e:	462b      	mov	r3, r5
 8001310:	490b      	ldr	r1, [pc, #44]	; (8001340 <B1_ISR+0xe0>)
 8001312:	2000      	movs	r0, #0
 8001314:	f005 fdce 	bl	8006eb4 <HAL_FLASH_Program>
		Delay(50);
 8001318:	2032      	movs	r0, #50	; 0x32
 800131a:	f003 fc97 	bl	8004c4c <Delay>
		HAL_FLASH_Lock();
 800131e:	f005 fe3f 	bl	8006fa0 <HAL_FLASH_Lock>
		HAL_UART_Transmit(huart_debugg,(uint8_t*) "\n\rBackup save!\n\r", 16, 10);
 8001322:	230a      	movs	r3, #10
 8001324:	2210      	movs	r2, #16
 8001326:	4907      	ldr	r1, [pc, #28]	; (8001344 <B1_ISR+0xe4>)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f008 fed0 	bl	800a0ce <HAL_UART_Transmit>
		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 800132e:	f7ff fe2d 	bl	8000f8c <__NVIC_SystemReset>
 8001332:	bf00      	nop
 8001334:	40020400 	.word	0x40020400
 8001338:	200002b0 	.word	0x200002b0
 800133c:	2000029f 	.word	0x2000029f
 8001340:	08040016 	.word	0x08040016
 8001344:	0800f56c 	.word	0x0800f56c

08001348 <B_NUCLEO_ISR>:
}

void B_NUCLEO_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	//Milyen módban voltunk eddig?
	uint8_t tmp= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR;
 8001350:	4b41      	ldr	r3, [pc, #260]	; (8001458 <B_NUCLEO_ISR+0x110>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	72fb      	strb	r3, [r7, #11]
	if(tmp==SKILL || tmp==FAST)mode=tmp;
 8001356:	7afb      	ldrb	r3, [r7, #11]
 8001358:	2b52      	cmp	r3, #82	; 0x52
 800135a:	d002      	beq.n	8001362 <B_NUCLEO_ISR+0x1a>
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	2b3f      	cmp	r3, #63	; 0x3f
 8001360:	d103      	bne.n	800136a <B_NUCLEO_ISR+0x22>
 8001362:	4a3e      	ldr	r2, [pc, #248]	; (800145c <B_NUCLEO_ISR+0x114>)
 8001364:	7afb      	ldrb	r3, [r7, #11]
 8001366:	7013      	strb	r3, [r2, #0]
 8001368:	e002      	b.n	8001370 <B_NUCLEO_ISR+0x28>
	else mode=SKILL;
 800136a:	4b3c      	ldr	r3, [pc, #240]	; (800145c <B_NUCLEO_ISR+0x114>)
 800136c:	2252      	movs	r2, #82	; 0x52
 800136e:	701a      	strb	r2, [r3, #0]

	//section 7 törlése, hogy újraírhassuk a módot jelző bytot
	HAL_FLASH_Unlock();
 8001370:	f005 fdf4 	bl	8006f5c <HAL_FLASH_Unlock>
	Delay(50);
 8001374:	2032      	movs	r0, #50	; 0x32
 8001376:	f003 fc69 	bl	8004c4c <Delay>
	FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 800137a:	2102      	movs	r1, #2
 800137c:	2007      	movs	r0, #7
 800137e:	f005 ff5f 	bl	8007240 <FLASH_Erase_Sector>
	Delay(50);
 8001382:	2032      	movs	r0, #50	; 0x32
 8001384:	f003 fc62 	bl	8004c4c <Delay>
	HAL_FLASH_Lock();
 8001388:	f005 fe0a 	bl	8006fa0 <HAL_FLASH_Lock>

	LED_NUCLEO(0);
 800138c:	2200      	movs	r2, #0
 800138e:	2120      	movs	r1, #32
 8001390:	4833      	ldr	r0, [pc, #204]	; (8001460 <B_NUCLEO_ISR+0x118>)
 8001392:	f006 f949 	bl	8007628 <HAL_GPIO_WritePin>
	LED_Y(0);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139c:	4831      	ldr	r0, [pc, #196]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 800139e:	f006 f943 	bl	8007628 <HAL_GPIO_WritePin>
	LED_G(0);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2102      	movs	r1, #2
 80013a6:	482f      	ldr	r0, [pc, #188]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 80013a8:	f006 f93e 	bl	8007628 <HAL_GPIO_WritePin>
	LED_B(0);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b2:	482c      	ldr	r0, [pc, #176]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 80013b4:	f006 f938 	bl	8007628 <HAL_GPIO_WritePin>
	LED_R(0);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013be:	4829      	ldr	r0, [pc, #164]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 80013c0:	f006 f932 	bl	8007628 <HAL_GPIO_WritePin>
	int i;
	for(i=0;i<8;i++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e01c      	b.n	8001404 <B_NUCLEO_ISR+0xbc>
	{
		LED_NUCLEO_TOGGLE;
 80013ca:	2120      	movs	r1, #32
 80013cc:	4824      	ldr	r0, [pc, #144]	; (8001460 <B_NUCLEO_ISR+0x118>)
 80013ce:	f006 f944 	bl	800765a <HAL_GPIO_TogglePin>
		LED_Y_TOGGLE;
 80013d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d6:	4823      	ldr	r0, [pc, #140]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 80013d8:	f006 f93f 	bl	800765a <HAL_GPIO_TogglePin>
		LED_G_TOGGLE;
 80013dc:	2102      	movs	r1, #2
 80013de:	4821      	ldr	r0, [pc, #132]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 80013e0:	f006 f93b 	bl	800765a <HAL_GPIO_TogglePin>
		LED_B_TOGGLE;
 80013e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 80013ea:	f006 f936 	bl	800765a <HAL_GPIO_TogglePin>
		LED_R_TOGGLE;
 80013ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f2:	481c      	ldr	r0, [pc, #112]	; (8001464 <B_NUCLEO_ISR+0x11c>)
 80013f4:	f006 f931 	bl	800765a <HAL_GPIO_TogglePin>
		Delay(150);
 80013f8:	2096      	movs	r0, #150	; 0x96
 80013fa:	f003 fc27 	bl	8004c4c <Delay>
	for(i=0;i<8;i++)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3301      	adds	r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b07      	cmp	r3, #7
 8001408:	dddf      	ble.n	80013ca <B_NUCLEO_ISR+0x82>
	}

	//Állítsuk át a módot
	HAL_FLASH_Unlock();
 800140a:	f005 fda7 	bl	8006f5c <HAL_FLASH_Unlock>
	Delay(50);
 800140e:	2032      	movs	r0, #50	; 0x32
 8001410:	f003 fc1c 	bl	8004c4c <Delay>
	if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, FAST); //ha eddig skill mód volt akor msot gyors lesz
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <B_NUCLEO_ISR+0x114>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b52      	cmp	r3, #82	; 0x52
 800141a:	d108      	bne.n	800142e <B_NUCLEO_ISR+0xe6>
 800141c:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <B_NUCLEO_ISR+0x110>)
 8001426:	2000      	movs	r0, #0
 8001428:	f005 fd44 	bl	8006eb4 <HAL_FLASH_Program>
 800142c:	e007      	b.n	800143e <B_NUCLEO_ISR+0xf6>
	else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig gyors mód vagy memóriaszemét volt akkor msot skil lesz
 800142e:	f04f 0252 	mov.w	r2, #82	; 0x52
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <B_NUCLEO_ISR+0x110>)
 8001438:	2000      	movs	r0, #0
 800143a:	f005 fd3b 	bl	8006eb4 <HAL_FLASH_Program>
	Delay(50);
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f003 fc04 	bl	8004c4c <Delay>
	HAL_FLASH_Lock();
 8001444:	f005 fdac 	bl	8006fa0 <HAL_FLASH_Lock>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\rMode change!\n\r", 16, 10);
 8001448:	230a      	movs	r3, #10
 800144a:	2210      	movs	r2, #16
 800144c:	4906      	ldr	r1, [pc, #24]	; (8001468 <B_NUCLEO_ISR+0x120>)
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f008 fe3d 	bl	800a0ce <HAL_UART_Transmit>
	NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 8001454:	f7ff fd9a 	bl	8000f8c <__NVIC_SystemReset>
 8001458:	08060000 	.word	0x08060000
 800145c:	2000028e 	.word	0x2000028e
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	0800f580 	.word	0x0800f580
 800146c:	00000000 	.word	0x00000000

08001470 <Control_Task>:
	}
}


void Control_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_rand,uint32_t tick, uint32_t period)
{
 8001470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001474:	b088      	sub	sp, #32
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	603b      	str	r3, [r7, #0]

	static uint32_t control_task_tick = 0;
	static uint8_t control_task_state=NEIGHBOUR1;//5 db állapot ->5.után megint 1.jön
	//szomszéd1,szomszéd2,szomszéd3,szomszéd4,kiértékelés

	uint8_t nID=0;
 8001480:	2300      	movs	r3, #0
 8001482:	76fb      	strb	r3, [r7, #27]

	if(control_task_tick>tick)return;
 8001484:	4b98      	ldr	r3, [pc, #608]	; (80016e8 <Control_Task+0x278>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	f0c0 8385 	bcc.w	8001b9a <Control_Task+0x72a>
	control_task_tick=tick+period;
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <Control_Task+0x278>)
 8001498:	6013      	str	r3, [r2, #0]
	if(mode!=SKILL)return;
 800149a:	4b94      	ldr	r3, [pc, #592]	; (80016ec <Control_Task+0x27c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b52      	cmp	r3, #82	; 0x52
 80014a0:	f040 837d 	bne.w	8001b9e <Control_Task+0x72e>
	//if(!readytorace)return;

	//ha kapu nélküli nodeba tartunk éppen, akkor időzítéssel "detektáljuk" a nodot
	if(N(pos[MY]).type>2)
 80014a4:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <Control_Task+0x280>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80014ac:	4991      	ldr	r1, [pc, #580]	; (80016f4 <Control_Task+0x284>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3308      	adds	r3, #8
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d94c      	bls.n	800155a <Control_Task+0xea>
	{
		s += (float)(tick-tick_prev)*fabs(v)/10000;
 80014c0:	4b8d      	ldr	r3, [pc, #564]	; (80016f8 <Control_Task+0x288>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f85f 	bl	8000588 <__aeabi_f2d>
 80014ca:	4604      	mov	r4, r0
 80014cc:	460d      	mov	r5, r1
 80014ce:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <Control_Task+0x28c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014de:	ee17 0a90 	vmov	r0, s15
 80014e2:	f7ff f851 	bl	8000588 <__aeabi_f2d>
 80014e6:	4680      	mov	r8, r0
 80014e8:	4689      	mov	r9, r1
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <Control_Task+0x290>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eef0 7ae7 	vabs.f32	s15, s15
 80014f4:	ee17 0a90 	vmov	r0, s15
 80014f8:	f7ff f846 	bl	8000588 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4640      	mov	r0, r8
 8001502:	4649      	mov	r1, r9
 8001504:	f7ff f898 	bl	8000638 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	a373      	add	r3, pc, #460	; (adr r3, 80016e0 <Control_Task+0x270>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f9b9 	bl	800088c <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7fe fed3 	bl	80002cc <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb5b 	bl	8000be8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4a70      	ldr	r2, [pc, #448]	; (80016f8 <Control_Task+0x288>)
 8001536:	6013      	str	r3, [r2, #0]
		if(s>sMAX)nodeDetected=1;
 8001538:	4b72      	ldr	r3, [pc, #456]	; (8001704 <Control_Task+0x294>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001544:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <Control_Task+0x288>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d502      	bpl.n	800155a <Control_Task+0xea>
 8001554:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <Control_Task+0x298>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]

	}
	tick_prev=tick;//mostantól mérjük az időt
 800155a:	4a68      	ldr	r2, [pc, #416]	; (80016fc <Control_Task+0x28c>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6013      	str	r3, [r2, #0]

	//ha odaértünk a myPositionbe, akkor indulhat a mozgás a nextPosition felé
	if(nodeDetected)
 8001560:	4b69      	ldr	r3, [pc, #420]	; (8001708 <Control_Task+0x298>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80eb 	beq.w	8001740 <Control_Task+0x2d0>
	{
		LED_B_TOGGLE;
 800156a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156e:	4867      	ldr	r0, [pc, #412]	; (800170c <Control_Task+0x29c>)
 8001570:	f006 f873 	bl	800765a <HAL_GPIO_TogglePin>
		if(N(pos[NEXT]).type>2)//ha a kövi node-on nincs kapu
 8001574:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <Control_Task+0x280>)
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800157c:	495d      	ldr	r1, [pc, #372]	; (80016f4 <Control_Task+0x284>)
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	3308      	adds	r3, #8
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d917      	bls.n	80015c0 <Control_Task+0x150>
		{
			s=0;
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <Control_Task+0x288>)
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
			sMAX=N(pos[MY]).distance[bestNb[NEXT]]+25;
 8001598:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <Control_Task+0x280>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80015a0:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <Control_Task+0x2a0>)
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	4618      	mov	r0, r3
 80015a6:	4953      	ldr	r1, [pc, #332]	; (80016f4 <Control_Task+0x284>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4403      	add	r3, r0
 80015b2:	330c      	adds	r3, #12
 80015b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015b8:	3319      	adds	r3, #25
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b51      	ldr	r3, [pc, #324]	; (8001704 <Control_Task+0x294>)
 80015be:	601a      	str	r2, [r3, #0]
		}

		//pontok nyugtázása
		if(!laneChange)//ha nem sávváltó üzemmódban vagyunk pontotszámolunk és felszedett kapukat nullázzuk
 80015c0:	4b54      	ldr	r3, [pc, #336]	; (8001714 <Control_Task+0x2a4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11f      	bne.n	8001608 <Control_Task+0x198>
		{
			collectedPoints +=N(pos[MY]).worth;//sávváltás módik vizsgáljuk az össezgyűjtött kapuk számát
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <Control_Task+0x280>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80015d0:	4948      	ldr	r1, [pc, #288]	; (80016f4 <Control_Task+0x284>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	3304      	adds	r3, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <Control_Task+0x2a8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <Control_Task+0x2a8>)
 80015ec:	701a      	strb	r2, [r3, #0]
			N(pos[MY]).worth=0;//ez a kapu már nem ér pontot
 80015ee:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <Control_Task+0x280>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80015f6:	493f      	ldr	r1, [pc, #252]	; (80016f4 <Control_Task+0x284>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3304      	adds	r3, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
		}

		if(collectedPoints >= 34 && !laneChange) //átváltás lane change módba
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <Control_Task+0x2a8>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b21      	cmp	r3, #33	; 0x21
 800160e:	d90e      	bls.n	800162e <Control_Task+0x1be>
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <Control_Task+0x2a4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <Control_Task+0x1be>
		{
			laneChange=1; //flag állítás
 8001618:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <Control_Task+0x2a4>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
			Lane_Change_Init(); //a sávváltóhely felé nőnek a rewardok
 800161e:	f000 fc2d 	bl	8001e7c <Lane_Change_Init>
			LED_Y(1); //sárga led világít
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001628:	4838      	ldr	r0, [pc, #224]	; (800170c <Control_Task+0x29c>)
 800162a:	f005 fffd 	bl	8007628 <HAL_GPIO_WritePin>
		}

		if(laneChange==1 && pos[MY]=='V' && pos[NEXT]=='U')//ha a tett színhelyén vagyunk
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <Control_Task+0x2a4>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10a      	bne.n	800164c <Control_Task+0x1dc>
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <Control_Task+0x280>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b56      	cmp	r3, #86	; 0x56
 800163c:	d106      	bne.n	800164c <Control_Task+0x1dc>
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <Control_Task+0x280>)
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	2b55      	cmp	r3, #85	; 0x55
 8001644:	d102      	bne.n	800164c <Control_Task+0x1dc>
		{
			laneChange=2;
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <Control_Task+0x2a4>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
		}

		static char str[15]; //kiiratás
		sprintf(str,"d,d,%2d\n\r",(int)collectedPoints);
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <Control_Task+0x2a8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4932      	ldr	r1, [pc, #200]	; (800171c <Control_Task+0x2ac>)
 8001654:	4832      	ldr	r0, [pc, #200]	; (8001720 <Control_Task+0x2b0>)
 8001656:	f00a faa3 	bl	800bba0 <siprintf>
		str[0]=pos[MY];
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <Control_Task+0x280>)
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <Control_Task+0x2b0>)
 8001660:	701a      	strb	r2, [r3, #0]
		str[2]=pos[NEXT];
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <Control_Task+0x280>)
 8001664:	785a      	ldrb	r2, [r3, #1]
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <Control_Task+0x2b0>)
 8001668:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 2);
 800166a:	482d      	ldr	r0, [pc, #180]	; (8001720 <Control_Task+0x2b0>)
 800166c:	f7fe fdd0 	bl	8000210 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	2302      	movs	r3, #2
 8001676:	492a      	ldr	r1, [pc, #168]	; (8001720 <Control_Task+0x2b0>)
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f008 fd28 	bl	800a0ce <HAL_UART_Transmit>

		if(Cross_Collision(pos[MY], pos[NEXT]))
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <Control_Task+0x280>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <Control_Task+0x280>)
 8001684:	7852      	ldrb	r2, [r2, #1]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fc61 	bl	8001f50 <Cross_Collision>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <Control_Task+0x23c>
		{
			control_task_state = WAIT;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <Control_Task+0x2b4>)
 8001696:	2207      	movs	r2, #7
 8001698:	701a      	strb	r2, [r3, #0]
			t_stamp=tick;
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <Control_Task+0x2b8>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6013      	str	r3, [r2, #0]
			LED_G(1);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2102      	movs	r1, #2
 80016a4:	4819      	ldr	r0, [pc, #100]	; (800170c <Control_Task+0x29c>)
 80016a6:	f005 ffbf 	bl	8007628 <HAL_GPIO_WritePin>
 80016aa:	e002      	b.n	80016b2 <Control_Task+0x242>
		}
		else control_task_state = NEIGHBOUR1;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <Control_Task+0x2b4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]

		pos[MY]=pos[NEXT];
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <Control_Task+0x280>)
 80016b4:	785a      	ldrb	r2, [r3, #1]
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <Control_Task+0x280>)
 80016b8:	701a      	strb	r2, [r3, #0]
		path=nextPath;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <Control_Task+0x2bc>)
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <Control_Task+0x2c0>)
 80016c0:	701a      	strb	r2, [r3, #0]
		dir[MY]=dir[NEXT];
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <Control_Task+0x2c4>)
 80016c4:	785a      	ldrb	r2, [r3, #1]
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <Control_Task+0x2c4>)
 80016c8:	701a      	strb	r2, [r3, #0]
		orientation=nextOri;//FORWARD
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <Control_Task+0x2c8>)
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <Control_Task+0x2cc>)
 80016d0:	701a      	strb	r2, [r3, #0]

		nodeDetected=0;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <Control_Task+0x298>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
		return;
 80016d8:	e264      	b.n	8001ba4 <Control_Task+0x734>
 80016da:	bf00      	nop
 80016dc:	f3af 8000 	nop.w
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40c38800 	.word	0x40c38800
 80016e8:	20000620 	.word	0x20000620
 80016ec:	2000028e 	.word	0x2000028e
 80016f0:	20000000 	.word	0x20000000
 80016f4:	200002b0 	.word	0x200002b0
 80016f8:	20000624 	.word	0x20000624
 80016fc:	20000628 	.word	0x20000628
 8001700:	20000660 	.word	0x20000660
 8001704:	20000004 	.word	0x20000004
 8001708:	2000029d 	.word	0x2000029d
 800170c:	40020400 	.word	0x40020400
 8001710:	2000062c 	.word	0x2000062c
 8001714:	200002a0 	.word	0x200002a0
 8001718:	2000029f 	.word	0x2000029f
 800171c:	0800f5f0 	.word	0x0800f5f0
 8001720:	20000630 	.word	0x20000630
 8001724:	2000063f 	.word	0x2000063f
 8001728:	20000640 	.word	0x20000640
 800172c:	20000644 	.word	0x20000644
 8001730:	2000029e 	.word	0x2000029e
 8001734:	20000008 	.word	0x20000008
 8001738:	20000645 	.word	0x20000645
 800173c:	2000029c 	.word	0x2000029c
	}

	if(thunderboardFlag)//ha új kalózpozíció jött a TB-től ujrakezdjük a számolást (első szomszéd vizsgálata jön)
 8001740:	4ba2      	ldr	r3, [pc, #648]	; (80019cc <Control_Task+0x55c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d05e      	beq.n	8001808 <Control_Task+0x398>
	{
		if(piratePos_prev[1]!=piratePos[1] && !laneChange && piratePos[0] !='R')//a kalóz átment egy Node-on
 800174a:	4ba1      	ldr	r3, [pc, #644]	; (80019d0 <Control_Task+0x560>)
 800174c:	785a      	ldrb	r2, [r3, #1]
 800174e:	4ba1      	ldr	r3, [pc, #644]	; (80019d4 <Control_Task+0x564>)
 8001750:	785b      	ldrb	r3, [r3, #1]
 8001752:	429a      	cmp	r2, r3
 8001754:	d03e      	beq.n	80017d4 <Control_Task+0x364>
 8001756:	4ba0      	ldr	r3, [pc, #640]	; (80019d8 <Control_Task+0x568>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d13a      	bne.n	80017d4 <Control_Task+0x364>
 800175e:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <Control_Task+0x564>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b52      	cmp	r3, #82	; 0x52
 8001764:	d036      	beq.n	80017d4 <Control_Task+0x364>
		{
			if(N(piratePos[0]).worth > 0)
 8001766:	4b9b      	ldr	r3, [pc, #620]	; (80019d4 <Control_Task+0x564>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800176e:	499b      	ldr	r1, [pc, #620]	; (80019dc <Control_Task+0x56c>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	dd1b      	ble.n	80017ba <Control_Task+0x34a>
			{
				N(piratePos[0]).worth--; //az a node már kevesebbet ér
 8001782:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <Control_Task+0x564>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800178a:	4994      	ldr	r1, [pc, #592]	; (80019dc <Control_Task+0x56c>)
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3304      	adds	r3, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	1e59      	subs	r1, r3, #1
 800179c:	488f      	ldr	r0, [pc, #572]	; (80019dc <Control_Task+0x56c>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4403      	add	r3, r0
 80017a8:	3304      	adds	r3, #4
 80017aa:	6019      	str	r1, [r3, #0]
				collectedPoints ++;
 80017ac:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <Control_Task+0x570>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <Control_Task+0x570>)
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e00c      	b.n	80017d4 <Control_Task+0x364>
			}
			else N(piratePos[0]).worth=0;
 80017ba:	4b86      	ldr	r3, [pc, #536]	; (80019d4 <Control_Task+0x564>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80017c2:	4986      	ldr	r1, [pc, #536]	; (80019dc <Control_Task+0x56c>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
		}
		if(control_task_state!=WAIT)//wait állapotból nem tud mindekt kibillenteni az új kalózrobot pozíció
 80017d4:	4b83      	ldr	r3, [pc, #524]	; (80019e4 <Control_Task+0x574>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	d002      	beq.n	80017e2 <Control_Task+0x372>
			control_task_state=NEIGHBOUR1;//kezdjük előrröl a fitneszérték számítást az 1. szomszédtól
 80017dc:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <Control_Task+0x574>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]

		piratePos_prev[0]=piratePos[0];//előző kalozpozíció frissítése
 80017e2:	4b7c      	ldr	r3, [pc, #496]	; (80019d4 <Control_Task+0x564>)
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <Control_Task+0x560>)
 80017e8:	701a      	strb	r2, [r3, #0]
		piratePos_prev[1]=piratePos[1];
 80017ea:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <Control_Task+0x564>)
 80017ec:	785a      	ldrb	r2, [r3, #1]
 80017ee:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <Control_Task+0x560>)
 80017f0:	705a      	strb	r2, [r3, #1]
		piratePos_prev[2]=piratePos[2];
 80017f2:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <Control_Task+0x564>)
 80017f4:	789a      	ldrb	r2, [r3, #2]
 80017f6:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <Control_Task+0x560>)
 80017f8:	709a      	strb	r2, [r3, #2]
		piratePos_prev[3]=piratePos[3];
 80017fa:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <Control_Task+0x564>)
 80017fc:	78da      	ldrb	r2, [r3, #3]
 80017fe:	4b74      	ldr	r3, [pc, #464]	; (80019d0 <Control_Task+0x560>)
 8001800:	70da      	strb	r2, [r3, #3]

		thunderboardFlag=0; //várjuk az újabb kalózrobot pozíciókat a thunderboardtól
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <Control_Task+0x55c>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
	}
	if(!piratePos_prev[0])return;
 8001808:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <Control_Task+0x560>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 81c8 	beq.w	8001ba2 <Control_Task+0x732>


	/******************LEGJOBB SZOMSZÉD KIVÁLASZTÁSA (első 4 állapot)******************/
	if(control_task_state < EVALUATE)//1.szomszéd/2.szomszéd/3.szomszéd/4.szomszéd
 8001812:	4b74      	ldr	r3, [pc, #464]	; (80019e4 <Control_Task+0x574>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b05      	cmp	r3, #5
 8001818:	f200 80f6 	bhi.w	8001a08 <Control_Task+0x598>
	{
		if(control_task_state==NEIGHBOUR1)
 800181c:	4b71      	ldr	r3, [pc, #452]	; (80019e4 <Control_Task+0x574>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <Control_Task+0x3ba>
		{
			bestFitness=-200.0;//az előző számolás legjob fitneszértéke volt még benne
 8001824:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <Control_Task+0x578>)
 8001826:	4a71      	ldr	r2, [pc, #452]	; (80019ec <Control_Task+0x57c>)
 8001828:	601a      	str	r2, [r3, #0]
		}
		nID=N(pos[MY]).neighbours[control_task_state]; //a vizsgált 1.rendű szomszéd azonosítója
 800182a:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <Control_Task+0x580>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001832:	4b6c      	ldr	r3, [pc, #432]	; (80019e4 <Control_Task+0x574>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	4968      	ldr	r1, [pc, #416]	; (80019dc <Control_Task+0x56c>)
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	4403      	add	r3, r0
 8001846:	330c      	adds	r3, #12
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	76fb      	strb	r3, [r7, #27]
		if(nID) //ha létezik a szomszéd
 800184c:	7efb      	ldrb	r3, [r7, #27]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8093 	beq.w	800197a <Control_Task+0x50a>
		{
			fitness[control_task_state]=(float)N(nID).worth; //fitneszérték 1.rendű szomszéd alapján
 8001854:	7efb      	ldrb	r3, [r7, #27]
 8001856:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800185a:	4960      	ldr	r1, [pc, #384]	; (80019dc <Control_Task+0x56c>)
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	3304      	adds	r3, #4
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <Control_Task+0x574>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	ee07 2a90 	vmov	s15, r2
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	4a5f      	ldr	r2, [pc, #380]	; (80019f4 <Control_Task+0x584>)
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	edc3 7a00 	vstr	s15, [r3]
			//kalozrobot hatása az 1.rendű szomszéd esetén
			if(piratePos[1]==nID) fitness[control_task_state] -= 80/*P*/;//ha a kalóz is ebbe az 1.rendű tart éppen akkor kerüljük el az ütközést
 8001880:	4b54      	ldr	r3, [pc, #336]	; (80019d4 <Control_Task+0x564>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	7efa      	ldrb	r2, [r7, #27]
 8001886:	429a      	cmp	r2, r3
 8001888:	d112      	bne.n	80018b0 <Control_Task+0x440>
 800188a:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <Control_Task+0x574>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4a59      	ldr	r2, [pc, #356]	; (80019f4 <Control_Task+0x584>)
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	4b52      	ldr	r3, [pc, #328]	; (80019e4 <Control_Task+0x574>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80019f8 <Control_Task+0x588>
 80018a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018a4:	4a53      	ldr	r2, [pc, #332]	; (80019f4 <Control_Task+0x584>)
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	edc3 7a00 	vstr	s15, [r3]
 80018ae:	e016      	b.n	80018de <Control_Task+0x46e>
			else if(piratePos[2]==nID) fitness[control_task_state] -= 60/*P*/;//ha még csak tervezi, hogy odamegy, akkor is kerüljük a pontot
 80018b0:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <Control_Task+0x564>)
 80018b2:	789b      	ldrb	r3, [r3, #2]
 80018b4:	7efa      	ldrb	r2, [r7, #27]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d111      	bne.n	80018de <Control_Task+0x46e>
 80018ba:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <Control_Task+0x574>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <Control_Task+0x584>)
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <Control_Task+0x574>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80019fc <Control_Task+0x58c>
 80018d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018d4:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <Control_Task+0x584>)
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	edc3 7a00 	vstr	s15, [r3]
			int i;
			uint8_t nnID;
			float nnFit;
			for(i=0;i<6;i++)//2.rednű szomszédok
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e046      	b.n	8001972 <Control_Task+0x502>
			{
				nnFit=0.0;
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
				nnID=N(nID).neighbours[i]; //2.rednű szomszéd ID-ja
 80018ea:	7efb      	ldrb	r3, [r7, #27]
 80018ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80018f0:	493a      	ldr	r1, [pc, #232]	; (80019dc <Control_Task+0x56c>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	18ca      	adds	r2, r1, r3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	330c      	adds	r3, #12
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	74fb      	strb	r3, [r7, #19]
				if(nnID && nnID!=pos[MY])//ha létezik a 2.rendű szomszéd (és nem a myposition az)
 8001906:	7cfb      	ldrb	r3, [r7, #19]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d02f      	beq.n	800196c <Control_Task+0x4fc>
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <Control_Task+0x580>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	7cfa      	ldrb	r2, [r7, #19]
 8001912:	429a      	cmp	r2, r3
 8001914:	d02a      	beq.n	800196c <Control_Task+0x4fc>
				{
					nnFit += (float)N(nnID).worth;
 8001916:	7cfb      	ldrb	r3, [r7, #19]
 8001918:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800191c:	492f      	ldr	r1, [pc, #188]	; (80019dc <Control_Task+0x56c>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ed97 7a05 	vldr	s14, [r7, #20]
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	edc7 7a05 	vstr	s15, [r7, #20]
					//if(piratePos[1]==nnID) nnFit -= 0.5/*P*/;//ha a kalóz is ebbe a pontba tart éppen akkor kerüljük el az ütközést
					//else if(piratePos[2]==nnID) fitness[control_task_state] -= 0.25/*P*/;//ha még csak tervezi, hogy odamegy, akkor se fogjuk tudni megelőnzi, mert mi 3 nodnyira vagyunk ő pedig csak 2
					//if(!lane_change)nnFit = nnFit * (float)DIST_AVG/N(nID).distance[i];//a 2.rendű szomszédhoz tartozó fitneszérték jobb ha az közelebb van az 1.rendű szomszédjához
					//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget
					fitness[control_task_state] += nnFit/6/*P*/;
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <Control_Task+0x574>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <Control_Task+0x584>)
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	ed93 7a00 	vldr	s14, [r3]
 800194e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001952:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001956:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <Control_Task+0x574>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <Control_Task+0x584>)
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	edc3 7a00 	vstr	s15, [r3]
			for(i=0;i<6;i++)//2.rednű szomszédok
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	3301      	adds	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2b05      	cmp	r3, #5
 8001976:	ddb5      	ble.n	80018e4 <Control_Task+0x474>
 8001978:	e006      	b.n	8001988 <Control_Task+0x518>
			}
			//if(!lane_change) fitness[control_task_state] =fitness[control_task_state] * (float)DIST_AVG/N(pos[MY]).distance[control_task_state]; //minél közelebb van a szomszéd annál jobb
			//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget

		}
		else fitness[control_task_state]=-150.0;//ha nem létezik a szomszéd erre tuti ne menjünk
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <Control_Task+0x574>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <Control_Task+0x584>)
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <Control_Task+0x590>)
 8001986:	601a      	str	r2, [r3, #0]
		//uint16_t tmp= __HAL_TIM_GET_COUNTER(htim_rand)%2;
		if(fitness[control_task_state]>=bestFitness) //ha ez a fitness jobb mint az eddigi legjobb, akkor mostantól ez a legjobb
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <Control_Task+0x574>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <Control_Task+0x584>)
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <Control_Task+0x578>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	db0b      	blt.n	80019be <Control_Task+0x54e>
		{
			bestFitness=fitness[control_task_state];
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <Control_Task+0x574>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <Control_Task+0x584>)
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <Control_Task+0x578>)
 80019b4:	6013      	str	r3, [r2, #0]
			bestNb[TMP] = control_task_state;//ez az egy érték amivel a task első 4 (fitnesszámoló) álapota kommunikál a kiértékelő álapottal
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <Control_Task+0x574>)
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <Control_Task+0x594>)
 80019bc:	701a      	strb	r2, [r3, #0]
		}
		control_task_state++;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <Control_Task+0x574>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <Control_Task+0x574>)
 80019c8:	701a      	strb	r2, [r3, #0]
		return; //ha csak valamelyik szomszédot vizsgáltuk még akkor eddig tartott ez a task futás, itt kilépünk
 80019ca:	e0eb      	b.n	8001ba4 <Control_Task+0x734>
 80019cc:	200002a2 	.word	0x200002a2
 80019d0:	20000648 	.word	0x20000648
 80019d4:	200002ac 	.word	0x200002ac
 80019d8:	200002a0 	.word	0x200002a0
 80019dc:	200002b0 	.word	0x200002b0
 80019e0:	2000029f 	.word	0x2000029f
 80019e4:	2000063f 	.word	0x2000063f
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	c3480000 	.word	0xc3480000
 80019f0:	20000000 	.word	0x20000000
 80019f4:	2000064c 	.word	0x2000064c
 80019f8:	42a00000 	.word	0x42a00000
 80019fc:	42700000 	.word	0x42700000
 8001a00:	c3160000 	.word	0xc3160000
 8001a04:	2000062c 	.word	0x2000062c
	}
	/**************************************************************************************/
	//ide csak akkor jutunk el ha control_task_state>NEIGHBOUR4

	/**********************KIÉRTÉKELÉS (control_task_state=EVALUATE ->5.állapot)**********************/
	else if(control_task_state==EVALUATE)
 8001a08:	4b68      	ldr	r3, [pc, #416]	; (8001bac <Control_Task+0x73c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	f040 80a6 	bne.w	8001b5e <Control_Task+0x6ee>
	{
		if(bestFitness==0 && fitness[N(pos[MY]).middle]==0) bestNb[TMP]=N(pos[MY]).middle;
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <Control_Task+0x740>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	d123      	bne.n	8001a6a <Control_Task+0x5fa>
 8001a22:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <Control_Task+0x744>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001a2a:	4963      	ldr	r1, [pc, #396]	; (8001bb8 <Control_Task+0x748>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3324      	adds	r3, #36	; 0x24
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <Control_Task+0x74c>)
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	d10d      	bne.n	8001a6a <Control_Task+0x5fa>
 8001a4e:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <Control_Task+0x744>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001a56:	4958      	ldr	r1, [pc, #352]	; (8001bb8 <Control_Task+0x748>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	3324      	adds	r3, #36	; 0x24
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <Control_Task+0x750>)
 8001a68:	701a      	strb	r2, [r3, #0]
		bestNb[NEXT]=bestNb[TMP];
 8001a6a:	4b55      	ldr	r3, [pc, #340]	; (8001bc0 <Control_Task+0x750>)
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <Control_Task+0x750>)
 8001a70:	705a      	strb	r2, [r3, #1]
		pos[NEXT]=N(pos[MY]).neighbours[bestNb[NEXT]];//a következő poziciónk a legjobb szomszéd lesz
 8001a72:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <Control_Task+0x744>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <Control_Task+0x750>)
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	494d      	ldr	r1, [pc, #308]	; (8001bb8 <Control_Task+0x748>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	4403      	add	r3, r0
 8001a8e:	330c      	adds	r3, #12
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <Control_Task+0x744>)
 8001a94:	705a      	strb	r2, [r3, #1]
		dir[NEXT]=N(pos[MY]).directions[bestNb[NEXT]];//már most tudjuk, mi lesz az irányunk, ha odaértünk
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <Control_Task+0x744>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <Control_Task+0x750>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4944      	ldr	r1, [pc, #272]	; (8001bb8 <Control_Task+0x748>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	4403      	add	r3, r0
 8001ab2:	3312      	adds	r3, #18
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <Control_Task+0x754>)
 8001ab8:	705a      	strb	r2, [r3, #1]

		//a kocsi az egyik node-ból átmegy egy másikba-> az irányok segítségével meghatározzu az új orientationt
		if(bestNb[NEXT] < NEIGHBOUR4) //ha balra/fel kell majd mennünk a nextPosition -höz
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <Control_Task+0x750>)
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d813      	bhi.n	8001aea <Control_Task+0x67a>
		{
			if(dir[MY]==2)//és eddig jobbra/fel mentünk,
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <Control_Task+0x754>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d10a      	bne.n	8001ae0 <Control_Task+0x670>
				nextOri = !orientation;//akkor most orientációt kell váltanunk
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <Control_Task+0x758>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <Control_Task+0x75c>)
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e017      	b.n	8001b10 <Control_Task+0x6a0>
			else nextOri = orientation; //különben nem kell
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <Control_Task+0x758>)
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <Control_Task+0x75c>)
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e012      	b.n	8001b10 <Control_Task+0x6a0>
		}
		else //ha jobbra/le kell majd mennünk
		{
			if(dir[MY]==1)//és eddig balra/fel mentünk,
 8001aea:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <Control_Task+0x754>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d10a      	bne.n	8001b08 <Control_Task+0x698>
				nextOri =! orientation;//akkor most irányt kell váltanunk
 8001af2:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <Control_Task+0x758>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <Control_Task+0x75c>)
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e003      	b.n	8001b10 <Control_Task+0x6a0>
			else nextOri = orientation; //különben nem kell
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <Control_Task+0x758>)
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <Control_Task+0x75c>)
 8001b0e:	701a      	strb	r2, [r3, #0]
		}

		//path kiválasztás -> az orientációt mostmár tudjuk (tolatás/előre), már csak az ösvény kell kivákasztani, hogy a megfelelő szomszédhoz jussunk

		if(bestNb[NEXT]==NEIGHBOUR1 || bestNb[NEXT]==NEIGHBOUR4)nextPath=LEFT;
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <Control_Task+0x750>)
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <Control_Task+0x6b0>
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <Control_Task+0x750>)
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d103      	bne.n	8001b28 <Control_Task+0x6b8>
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <Control_Task+0x760>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e016      	b.n	8001b56 <Control_Task+0x6e6>
		else if(bestNb[NEXT]==NEIGHBOUR2 || bestNb[NEXT]==NEIGHBOUR5)nextPath=MIDDLE;
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <Control_Task+0x750>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d003      	beq.n	8001b38 <Control_Task+0x6c8>
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <Control_Task+0x750>)
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d103      	bne.n	8001b40 <Control_Task+0x6d0>
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <Control_Task+0x760>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e00a      	b.n	8001b56 <Control_Task+0x6e6>
		else if(bestNb[NEXT]==NEIGHBOUR3 || bestNb[NEXT]==NEIGHBOUR6)nextPath=RIGHT;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <Control_Task+0x750>)
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d003      	beq.n	8001b50 <Control_Task+0x6e0>
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <Control_Task+0x750>)
 8001b4a:	785b      	ldrb	r3, [r3, #1]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d102      	bne.n	8001b56 <Control_Task+0x6e6>
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <Control_Task+0x760>)
 8001b52:	2202      	movs	r2, #2
 8001b54:	701a      	strb	r2, [r3, #0]

		control_task_state=NEIGHBOUR1;
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <Control_Task+0x73c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
		return;
 8001b5c:	e022      	b.n	8001ba4 <Control_Task+0x734>
	}
	/**************************************************************************************/

	/**********ÜTKÖZÉSELKERÜLÉS VÁRAKOZÁSSAL (control_task_state=EVALUATE ->6.állapot)***********/
	else if(control_task_state==WAIT)
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <Control_Task+0x73c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b07      	cmp	r3, #7
 8001b64:	d11e      	bne.n	8001ba4 <Control_Task+0x734>
	{
		if(tick-t_stamp<4000)
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <Control_Task+0x764>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b72:	d206      	bcs.n	8001b82 <Control_Task+0x712>
		{
			v_control=STOP;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <Control_Task+0x768>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
			control_task_state=WAIT;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <Control_Task+0x73c>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e010      	b.n	8001ba4 <Control_Task+0x734>
		}
		else
		{
			LED_G(0);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2102      	movs	r1, #2
 8001b86:	4815      	ldr	r0, [pc, #84]	; (8001bdc <Control_Task+0x76c>)
 8001b88:	f005 fd4e 	bl	8007628 <HAL_GPIO_WritePin>
			v_control=NORMAL_VEL;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <Control_Task+0x768>)
 8001b8e:	2202      	movs	r2, #2
 8001b90:	701a      	strb	r2, [r3, #0]
			control_task_state=NEIGHBOUR1;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <Control_Task+0x73c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e004      	b.n	8001ba4 <Control_Task+0x734>
	if(control_task_tick>tick)return;
 8001b9a:	bf00      	nop
 8001b9c:	e002      	b.n	8001ba4 <Control_Task+0x734>
	if(mode!=SKILL)return;
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <Control_Task+0x734>
	if(!piratePos_prev[0])return;
 8001ba2:	bf00      	nop
		}
	}
	/**************************************************************************************/
}
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bac:	2000063f 	.word	0x2000063f
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	200002b0 	.word	0x200002b0
 8001bbc:	2000064c 	.word	0x2000064c
 8001bc0:	2000062c 	.word	0x2000062c
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	20000645 	.word	0x20000645
 8001bd0:	20000644 	.word	0x20000644
 8001bd4:	20000640 	.word	0x20000640
 8001bd8:	200002a1 	.word	0x200002a1
 8001bdc:	40020400 	.word	0x40020400

08001be0 <Mode_Selector>:
		}
	}
}

void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint8_t tmp=*(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 8001bea:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <Mode_Selector+0x188>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if(tmp==SKILL || tmp==FAST) mode = tmp;
 8001bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bf6:	2b52      	cmp	r3, #82	; 0x52
 8001bf8:	d003      	beq.n	8001c02 <Mode_Selector+0x22>
 8001bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bfe:	2b3f      	cmp	r3, #63	; 0x3f
 8001c00:	d104      	bne.n	8001c0c <Mode_Selector+0x2c>
 8001c02:	4a5a      	ldr	r2, [pc, #360]	; (8001d6c <Mode_Selector+0x18c>)
 8001c04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c08:	7013      	strb	r3, [r2, #0]
 8001c0a:	e022      	b.n	8001c52 <Mode_Selector+0x72>
	else
	{
		HAL_FLASH_Unlock();
 8001c0c:	f005 f9a6 	bl	8006f5c <HAL_FLASH_Unlock>
		HAL_Delay(50);
 8001c10:	2032      	movs	r0, #50	; 0x32
 8001c12:	f003 fe6f 	bl	80058f4 <HAL_Delay>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001c16:	2102      	movs	r1, #2
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f005 fb11 	bl	8007240 <FLASH_Erase_Sector>
		HAL_Delay(50);
 8001c1e:	2032      	movs	r0, #50	; 0x32
 8001c20:	f003 fe68 	bl	80058f4 <HAL_Delay>
		HAL_FLASH_Lock();
 8001c24:	f005 f9bc 	bl	8006fa0 <HAL_FLASH_Lock>
		HAL_FLASH_Unlock();
 8001c28:	f005 f998 	bl	8006f5c <HAL_FLASH_Unlock>
		HAL_Delay(50);
 8001c2c:	2032      	movs	r0, #50	; 0x32
 8001c2e:	f003 fe61 	bl	80058f4 <HAL_Delay>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig skill mód volt akor msot gyors lesz
 8001c32:	f04f 0252 	mov.w	r2, #82	; 0x52
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	494b      	ldr	r1, [pc, #300]	; (8001d68 <Mode_Selector+0x188>)
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f005 f939 	bl	8006eb4 <HAL_FLASH_Program>
		HAL_Delay(50);
 8001c42:	2032      	movs	r0, #50	; 0x32
 8001c44:	f003 fe56 	bl	80058f4 <HAL_Delay>
		HAL_FLASH_Lock();
 8001c48:	f005 f9aa 	bl	8006fa0 <HAL_FLASH_Lock>

		mode=SKILL;
 8001c4c:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <Mode_Selector+0x18c>)
 8001c4e:	2252      	movs	r2, #82	; 0x52
 8001c50:	701a      	strb	r2, [r3, #0]
	}

	if(mode==SKILL)
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <Mode_Selector+0x18c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b52      	cmp	r3, #82	; 0x52
 8001c58:	d135      	bne.n	8001cc6 <Mode_Selector+0xe6>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 8001c5a:	2352      	movs	r3, #82	; 0x52
 8001c5c:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001c5e:	f107 010c 	add.w	r1, r7, #12
 8001c62:	230a      	movs	r3, #10
 8001c64:	2201      	movs	r2, #1
 8001c66:	6838      	ldr	r0, [r7, #0]
 8001c68:	f008 fa31 	bl	800a0ce <HAL_UART_Transmit>
		HAL_Delay(10);
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	f003 fe41 	bl	80058f4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 8001c72:	f107 010c 	add.w	r1, r7, #12
 8001c76:	230a      	movs	r3, #10
 8001c78:	2201      	movs	r2, #1
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f008 fa27 	bl	800a0ce <HAL_UART_Transmit>
		HAL_Delay(10);
 8001c80:	200a      	movs	r0, #10
 8001c82:	f003 fe37 	bl	80058f4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001c86:	f107 010c 	add.w	r1, r7, #12
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f008 fa1d 	bl	800a0ce <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4935      	ldr	r1, [pc, #212]	; (8001d70 <Mode_Selector+0x190>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f009 ff80 	bl	800bba0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fab3 	bl	8000210 <strlen>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	f107 010c 	add.w	r1, r7, #12
 8001cb2:	2364      	movs	r3, #100	; 0x64
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f008 fa0a 	bl	800a0ce <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	482d      	ldr	r0, [pc, #180]	; (8001d74 <Mode_Selector+0x194>)
 8001cc0:	f005 fcb2 	bl	8007628 <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 8001cc4:	e04c      	b.n	8001d60 <Mode_Selector+0x180>
	else if(mode==FAST)
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <Mode_Selector+0x18c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b3f      	cmp	r3, #63	; 0x3f
 8001ccc:	d135      	bne.n	8001d3a <Mode_Selector+0x15a>
		buffer[0] = CMD_MODE_FAST;
 8001cce:	233f      	movs	r3, #63	; 0x3f
 8001cd0:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001cd2:	f107 010c 	add.w	r1, r7, #12
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	2201      	movs	r2, #1
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f008 f9f7 	bl	800a0ce <HAL_UART_Transmit>
		HAL_Delay(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f003 fe07 	bl	80058f4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001ce6:	f107 010c 	add.w	r1, r7, #12
 8001cea:	230a      	movs	r3, #10
 8001cec:	2201      	movs	r2, #1
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f008 f9ed 	bl	800a0ce <HAL_UART_Transmit>
		HAL_Delay(10);
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f003 fdfd 	bl	80058f4 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001cfa:	f107 010c 	add.w	r1, r7, #12
 8001cfe:	230a      	movs	r3, #10
 8001d00:	2201      	movs	r2, #1
 8001d02:	6838      	ldr	r0, [r7, #0]
 8001d04:	f008 f9e3 	bl	800a0ce <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	491a      	ldr	r1, [pc, #104]	; (8001d78 <Mode_Selector+0x198>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f009 ff46 	bl	800bba0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fa79 	bl	8000210 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	f107 010c 	add.w	r1, r7, #12
 8001d26:	2364      	movs	r3, #100	; 0x64
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f008 f9d0 	bl	800a0ce <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2120      	movs	r1, #32
 8001d32:	4810      	ldr	r0, [pc, #64]	; (8001d74 <Mode_Selector+0x194>)
 8001d34:	f005 fc78 	bl	8007628 <HAL_GPIO_WritePin>
}
 8001d38:	e012      	b.n	8001d60 <Mode_Selector+0x180>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	490f      	ldr	r1, [pc, #60]	; (8001d7c <Mode_Selector+0x19c>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f009 ff2d 	bl	800bba0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fa60 	bl	8000210 <strlen>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	f107 010c 	add.w	r1, r7, #12
 8001d58:	2364      	movs	r3, #100	; 0x64
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f008 f9b7 	bl	800a0ce <HAL_UART_Transmit>
}
 8001d60:	bf00      	nop
 8001d62:	3738      	adds	r7, #56	; 0x38
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08060000 	.word	0x08060000
 8001d6c:	2000028e 	.word	0x2000028e
 8001d70:	0800f600 	.word	0x0800f600
 8001d74:	40020000 	.word	0x40020000
 8001d78:	0800f610 	.word	0x0800f610
 8001d7c:	0800f620 	.word	0x0800f620

08001d80 <Uart_Receive_Thunderboard_ISR>:
	}
	HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"START!\n\r",8, 3);
}
void Uart_Receive_Thunderboard_ISR(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	static uint8_t sp[]={0};//slip protection
	static uint8_t cnt=0;
	if(tb_msg[0]>='A' && tb_msg[0]<='Z' && tb_msg[5]>='0' && tb_msg[5]<='9')
 8001d8a:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d93d      	bls.n	8001e0e <Uart_Receive_Thunderboard_ISR+0x8e>
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b5a      	cmp	r3, #90	; 0x5a
 8001d98:	d839      	bhi.n	8001e0e <Uart_Receive_Thunderboard_ISR+0x8e>
 8001d9a:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001d9c:	795b      	ldrb	r3, [r3, #5]
 8001d9e:	2b2f      	cmp	r3, #47	; 0x2f
 8001da0:	d935      	bls.n	8001e0e <Uart_Receive_Thunderboard_ISR+0x8e>
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001da4:	795b      	ldrb	r3, [r3, #5]
 8001da6:	2b39      	cmp	r3, #57	; 0x39
 8001da8:	d831      	bhi.n	8001e0e <Uart_Receive_Thunderboard_ISR+0x8e>
	{
		piratePos[0]=tb_msg[0];	piratePos[1]=tb_msg[1];	piratePos[2]=tb_msg[2];
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <Uart_Receive_Thunderboard_ISR+0xec>)
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001db4:	785a      	ldrb	r2, [r3, #1]
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <Uart_Receive_Thunderboard_ISR+0xec>)
 8001db8:	705a      	strb	r2, [r3, #1]
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001dbc:	789a      	ldrb	r2, [r3, #2]
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <Uart_Receive_Thunderboard_ISR+0xec>)
 8001dc0:	709a      	strb	r2, [r3, #2]
		piratePos[3]=100*(tb_msg[3]-0x30) + 10*(tb_msg[4]-0x30) + (tb_msg[5]-0x30);
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001dc4:	78db      	ldrb	r3, [r3, #3]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	0091      	lsls	r1, r2, #2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	4619      	mov	r1, r3
 8001de0:	0089      	lsls	r1, r1, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001dee:	795b      	ldrb	r3, [r3, #5]
 8001df0:	4413      	add	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3330      	adds	r3, #48	; 0x30
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <Uart_Receive_Thunderboard_ISR+0xec>)
 8001dfa:	70da      	strb	r2, [r3, #3]
		thunderboardFlag=1;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8001e02:	2206      	movs	r2, #6
 8001e04:	4918      	ldr	r1, [pc, #96]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f008 fa95 	bl	800a336 <HAL_UART_Receive_IT>
#ifdef TB_DEBUGG
		HAL_UART_Transmit(huart_debugg, tb_msg, 6, 2);
		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
#endif
		return;
 8001e0c:	e029      	b.n	8001e62 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	//SLIP PROTECTION
	if(sp[0]>='0' && sp[0]<='9')cnt++;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b2f      	cmp	r3, #47	; 0x2f
 8001e14:	d90a      	bls.n	8001e2c <Uart_Receive_Thunderboard_ISR+0xac>
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b39      	cmp	r3, #57	; 0x39
 8001e1c:	d806      	bhi.n	8001e2c <Uart_Receive_Thunderboard_ISR+0xac>
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e002      	b.n	8001e32 <Uart_Receive_Thunderboard_ISR+0xb2>
	else cnt=0;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]

	if(cnt<3) //3 darab ASCI számnak össze kell gyűlnie egymás után
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d805      	bhi.n	8001e46 <Uart_Receive_Thunderboard_ISR+0xc6>
	{
		HAL_UART_Receive_IT(huart_TB, sp, 1);//amig ez nincs meg addig cask egyesével olvasunk
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	490d      	ldr	r1, [pc, #52]	; (8001e74 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f008 fa79 	bl	800a336 <HAL_UART_Receive_IT>
 8001e44:	e00d      	b.n	8001e62 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	else//ha megvan megint 6-ossával olvasunk
	{
		sp[0]=0;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <Uart_Receive_Thunderboard_ISR+0xf8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8001e52:	2206      	movs	r2, #6
 8001e54:	4904      	ldr	r1, [pc, #16]	; (8001e68 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f008 fa6d 	bl	800a336 <HAL_UART_Receive_IT>
		thunderboardFlag=1;
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
	}
}
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200002a4 	.word	0x200002a4
 8001e6c:	200002ac 	.word	0x200002ac
 8001e70:	200002a2 	.word	0x200002a2
 8001e74:	2000065c 	.word	0x2000065c
 8001e78:	2000065d 	.word	0x2000065d

08001e7c <Lane_Change_Init>:


void Lane_Change_Init(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	N('A').worth = N('B').worth = N('C').worth = N('E').worth = 0;
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001e8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001e90:	6553      	str	r3, [r2, #84]	; 0x54
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	4a2d      	ldr	r2, [pc, #180]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001e98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ea0:	6053      	str	r3, [r2, #4]
	N('F').worth = N('D').worth = N('G').worth = 1;
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001eb2:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eb8:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001eba:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	N('I').worth = 2;
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	N('H').worth = N('J').worth = N('K').worth = N('L').worth = N('Q').worth = N('P').worth =  4;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ec8:	2204      	movs	r2, #4
 8001eca:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ed0:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ed6:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001edc:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 8001ee0:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ee2:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ee8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001eec:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001eee:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001ef4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001efa:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f00:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001f04:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f06:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	N('N').worth = N('T').worth =8;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f14:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f1a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	N('O').worth = N('M').worth = 9;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f20:	2209      	movs	r2, #9
 8001f22:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f28:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f2e:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
	N('U').worth = 16;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f34:	2210      	movs	r2, #16
 8001f36:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	N('V').worth = 32;
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <Lane_Change_Init+0xd0>)
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	200002b0 	.word	0x200002b0

08001f50 <Cross_Collision>:

uint8_t Cross_Collision(uint8_t myPos, uint8_t nextPos)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	460a      	mov	r2, r1
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	71bb      	strb	r3, [r7, #6]
	/********************************NI, KL kereszteződés**********************/
	if((myPos=='N' && nextPos=='I') || (myPos=='I' && nextPos=='N'))
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b4e      	cmp	r3, #78	; 0x4e
 8001f64:	d102      	bne.n	8001f6c <Cross_Collision+0x1c>
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	2b49      	cmp	r3, #73	; 0x49
 8001f6a:	d005      	beq.n	8001f78 <Cross_Collision+0x28>
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	2b49      	cmp	r3, #73	; 0x49
 8001f70:	d132      	bne.n	8001fd8 <Cross_Collision+0x88>
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	2b4e      	cmp	r3, #78	; 0x4e
 8001f76:	d12f      	bne.n	8001fd8 <Cross_Collision+0x88>
	{
		if((piratePos[0]=='K' && piratePos[1]=='L') || (piratePos[0]=='L' && piratePos[1]=='K')){ if(piratePos[3]<60) return 1;}
 8001f78:	4b83      	ldr	r3, [pc, #524]	; (8002188 <Cross_Collision+0x238>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b4b      	cmp	r3, #75	; 0x4b
 8001f7e:	d103      	bne.n	8001f88 <Cross_Collision+0x38>
 8001f80:	4b81      	ldr	r3, [pc, #516]	; (8002188 <Cross_Collision+0x238>)
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	2b4c      	cmp	r3, #76	; 0x4c
 8001f86:	d007      	beq.n	8001f98 <Cross_Collision+0x48>
 8001f88:	4b7f      	ldr	r3, [pc, #508]	; (8002188 <Cross_Collision+0x238>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b4c      	cmp	r3, #76	; 0x4c
 8001f8e:	d109      	bne.n	8001fa4 <Cross_Collision+0x54>
 8001f90:	4b7d      	ldr	r3, [pc, #500]	; (8002188 <Cross_Collision+0x238>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b4b      	cmp	r3, #75	; 0x4b
 8001f96:	d105      	bne.n	8001fa4 <Cross_Collision+0x54>
 8001f98:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <Cross_Collision+0x238>)
 8001f9a:	78db      	ldrb	r3, [r3, #3]
 8001f9c:	2b3b      	cmp	r3, #59	; 0x3b
 8001f9e:	d81a      	bhi.n	8001fd6 <Cross_Collision+0x86>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e12c      	b.n	80021fe <Cross_Collision+0x2ae>
		else if((piratePos[1]=='K' && piratePos[2]=='L') || (piratePos[1]=='L' && piratePos[2]=='K')){ if(piratePos[3]>50) return 1;}
 8001fa4:	4b78      	ldr	r3, [pc, #480]	; (8002188 <Cross_Collision+0x238>)
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	2b4b      	cmp	r3, #75	; 0x4b
 8001faa:	d103      	bne.n	8001fb4 <Cross_Collision+0x64>
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <Cross_Collision+0x238>)
 8001fae:	789b      	ldrb	r3, [r3, #2]
 8001fb0:	2b4c      	cmp	r3, #76	; 0x4c
 8001fb2:	d009      	beq.n	8001fc8 <Cross_Collision+0x78>
 8001fb4:	4b74      	ldr	r3, [pc, #464]	; (8002188 <Cross_Collision+0x238>)
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	2b4c      	cmp	r3, #76	; 0x4c
 8001fba:	f040 8116 	bne.w	80021ea <Cross_Collision+0x29a>
 8001fbe:	4b72      	ldr	r3, [pc, #456]	; (8002188 <Cross_Collision+0x238>)
 8001fc0:	789b      	ldrb	r3, [r3, #2]
 8001fc2:	2b4b      	cmp	r3, #75	; 0x4b
 8001fc4:	f040 8111 	bne.w	80021ea <Cross_Collision+0x29a>
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <Cross_Collision+0x238>)
 8001fca:	78db      	ldrb	r3, [r3, #3]
 8001fcc:	2b32      	cmp	r3, #50	; 0x32
 8001fce:	f240 810c 	bls.w	80021ea <Cross_Collision+0x29a>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e113      	b.n	80021fe <Cross_Collision+0x2ae>
		if((piratePos[0]=='K' && piratePos[1]=='L') || (piratePos[0]=='L' && piratePos[1]=='K')){ if(piratePos[3]<60) return 1;}
 8001fd6:	e108      	b.n	80021ea <Cross_Collision+0x29a>
	}
	else if((myPos=='K' && nextPos=='L') || (myPos=='L' && nextPos=='K'))
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b4b      	cmp	r3, #75	; 0x4b
 8001fdc:	d102      	bne.n	8001fe4 <Cross_Collision+0x94>
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	2b4c      	cmp	r3, #76	; 0x4c
 8001fe2:	d005      	beq.n	8001ff0 <Cross_Collision+0xa0>
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	2b4c      	cmp	r3, #76	; 0x4c
 8001fe8:	d132      	bne.n	8002050 <Cross_Collision+0x100>
 8001fea:	79bb      	ldrb	r3, [r7, #6]
 8001fec:	2b4b      	cmp	r3, #75	; 0x4b
 8001fee:	d12f      	bne.n	8002050 <Cross_Collision+0x100>
	{
		if((piratePos[0]=='N' && piratePos[1]=='I') || (piratePos[0]=='I' && piratePos[1]=='N')){ if(piratePos[3]<60) return 1;}
 8001ff0:	4b65      	ldr	r3, [pc, #404]	; (8002188 <Cross_Collision+0x238>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b4e      	cmp	r3, #78	; 0x4e
 8001ff6:	d103      	bne.n	8002000 <Cross_Collision+0xb0>
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <Cross_Collision+0x238>)
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	2b49      	cmp	r3, #73	; 0x49
 8001ffe:	d007      	beq.n	8002010 <Cross_Collision+0xc0>
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <Cross_Collision+0x238>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b49      	cmp	r3, #73	; 0x49
 8002006:	d109      	bne.n	800201c <Cross_Collision+0xcc>
 8002008:	4b5f      	ldr	r3, [pc, #380]	; (8002188 <Cross_Collision+0x238>)
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	2b4e      	cmp	r3, #78	; 0x4e
 800200e:	d105      	bne.n	800201c <Cross_Collision+0xcc>
 8002010:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <Cross_Collision+0x238>)
 8002012:	78db      	ldrb	r3, [r3, #3]
 8002014:	2b3b      	cmp	r3, #59	; 0x3b
 8002016:	d81a      	bhi.n	800204e <Cross_Collision+0xfe>
 8002018:	2301      	movs	r3, #1
 800201a:	e0f0      	b.n	80021fe <Cross_Collision+0x2ae>
		else if((piratePos[1]=='N' && piratePos[2]=='I') || (piratePos[1]=='I' && piratePos[2]=='N')){ if(piratePos[3]>50) return 1;}
 800201c:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <Cross_Collision+0x238>)
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	2b4e      	cmp	r3, #78	; 0x4e
 8002022:	d103      	bne.n	800202c <Cross_Collision+0xdc>
 8002024:	4b58      	ldr	r3, [pc, #352]	; (8002188 <Cross_Collision+0x238>)
 8002026:	789b      	ldrb	r3, [r3, #2]
 8002028:	2b49      	cmp	r3, #73	; 0x49
 800202a:	d009      	beq.n	8002040 <Cross_Collision+0xf0>
 800202c:	4b56      	ldr	r3, [pc, #344]	; (8002188 <Cross_Collision+0x238>)
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	2b49      	cmp	r3, #73	; 0x49
 8002032:	f040 80dc 	bne.w	80021ee <Cross_Collision+0x29e>
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <Cross_Collision+0x238>)
 8002038:	789b      	ldrb	r3, [r3, #2]
 800203a:	2b4e      	cmp	r3, #78	; 0x4e
 800203c:	f040 80d7 	bne.w	80021ee <Cross_Collision+0x29e>
 8002040:	4b51      	ldr	r3, [pc, #324]	; (8002188 <Cross_Collision+0x238>)
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	2b32      	cmp	r3, #50	; 0x32
 8002046:	f240 80d2 	bls.w	80021ee <Cross_Collision+0x29e>
 800204a:	2301      	movs	r3, #1
 800204c:	e0d7      	b.n	80021fe <Cross_Collision+0x2ae>
		if((piratePos[0]=='N' && piratePos[1]=='I') || (piratePos[0]=='I' && piratePos[1]=='N')){ if(piratePos[3]<60) return 1;}
 800204e:	e0ce      	b.n	80021ee <Cross_Collision+0x29e>
	}
	/**************************************************************************/


	/********************************ID, FG kereszteződés**********************/
	else if((myPos=='I' && nextPos=='D') || (myPos=='D' && nextPos=='I'))
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b49      	cmp	r3, #73	; 0x49
 8002054:	d102      	bne.n	800205c <Cross_Collision+0x10c>
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	2b44      	cmp	r3, #68	; 0x44
 800205a:	d005      	beq.n	8002068 <Cross_Collision+0x118>
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2b44      	cmp	r3, #68	; 0x44
 8002060:	d132      	bne.n	80020c8 <Cross_Collision+0x178>
 8002062:	79bb      	ldrb	r3, [r7, #6]
 8002064:	2b49      	cmp	r3, #73	; 0x49
 8002066:	d12f      	bne.n	80020c8 <Cross_Collision+0x178>
	{
		if((piratePos[0]=='F' && piratePos[1]=='G') || (piratePos[0]=='G' && piratePos[1]=='F')){ if(piratePos[3]<60) return 1;}
 8002068:	4b47      	ldr	r3, [pc, #284]	; (8002188 <Cross_Collision+0x238>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b46      	cmp	r3, #70	; 0x46
 800206e:	d103      	bne.n	8002078 <Cross_Collision+0x128>
 8002070:	4b45      	ldr	r3, [pc, #276]	; (8002188 <Cross_Collision+0x238>)
 8002072:	785b      	ldrb	r3, [r3, #1]
 8002074:	2b47      	cmp	r3, #71	; 0x47
 8002076:	d007      	beq.n	8002088 <Cross_Collision+0x138>
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <Cross_Collision+0x238>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b47      	cmp	r3, #71	; 0x47
 800207e:	d109      	bne.n	8002094 <Cross_Collision+0x144>
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <Cross_Collision+0x238>)
 8002082:	785b      	ldrb	r3, [r3, #1]
 8002084:	2b46      	cmp	r3, #70	; 0x46
 8002086:	d105      	bne.n	8002094 <Cross_Collision+0x144>
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <Cross_Collision+0x238>)
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	2b3b      	cmp	r3, #59	; 0x3b
 800208e:	d81a      	bhi.n	80020c6 <Cross_Collision+0x176>
 8002090:	2301      	movs	r3, #1
 8002092:	e0b4      	b.n	80021fe <Cross_Collision+0x2ae>
		else if((piratePos[1]=='F' && piratePos[2]=='G') || (piratePos[1]=='G' && piratePos[2]=='F')){ if(piratePos[3]>50) return 1;}
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <Cross_Collision+0x238>)
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b46      	cmp	r3, #70	; 0x46
 800209a:	d103      	bne.n	80020a4 <Cross_Collision+0x154>
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <Cross_Collision+0x238>)
 800209e:	789b      	ldrb	r3, [r3, #2]
 80020a0:	2b47      	cmp	r3, #71	; 0x47
 80020a2:	d009      	beq.n	80020b8 <Cross_Collision+0x168>
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <Cross_Collision+0x238>)
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	2b47      	cmp	r3, #71	; 0x47
 80020aa:	f040 80a2 	bne.w	80021f2 <Cross_Collision+0x2a2>
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <Cross_Collision+0x238>)
 80020b0:	789b      	ldrb	r3, [r3, #2]
 80020b2:	2b46      	cmp	r3, #70	; 0x46
 80020b4:	f040 809d 	bne.w	80021f2 <Cross_Collision+0x2a2>
 80020b8:	4b33      	ldr	r3, [pc, #204]	; (8002188 <Cross_Collision+0x238>)
 80020ba:	78db      	ldrb	r3, [r3, #3]
 80020bc:	2b32      	cmp	r3, #50	; 0x32
 80020be:	f240 8098 	bls.w	80021f2 <Cross_Collision+0x2a2>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e09b      	b.n	80021fe <Cross_Collision+0x2ae>
		if((piratePos[0]=='F' && piratePos[1]=='G') || (piratePos[0]=='G' && piratePos[1]=='F')){ if(piratePos[3]<60) return 1;}
 80020c6:	e094      	b.n	80021f2 <Cross_Collision+0x2a2>
	}
	else if((myPos=='F' && nextPos=='G') || (myPos=='G' && nextPos=='F'))
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	2b46      	cmp	r3, #70	; 0x46
 80020cc:	d102      	bne.n	80020d4 <Cross_Collision+0x184>
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	2b47      	cmp	r3, #71	; 0x47
 80020d2:	d005      	beq.n	80020e0 <Cross_Collision+0x190>
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b47      	cmp	r3, #71	; 0x47
 80020d8:	d12f      	bne.n	800213a <Cross_Collision+0x1ea>
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	2b46      	cmp	r3, #70	; 0x46
 80020de:	d12c      	bne.n	800213a <Cross_Collision+0x1ea>
	{
		if((piratePos[0]=='I' && piratePos[1]=='D') || (piratePos[0]=='D' && piratePos[1]=='I')){ if(piratePos[3]<60) return 1;}
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <Cross_Collision+0x238>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b49      	cmp	r3, #73	; 0x49
 80020e6:	d103      	bne.n	80020f0 <Cross_Collision+0x1a0>
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <Cross_Collision+0x238>)
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	2b44      	cmp	r3, #68	; 0x44
 80020ee:	d007      	beq.n	8002100 <Cross_Collision+0x1b0>
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <Cross_Collision+0x238>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b44      	cmp	r3, #68	; 0x44
 80020f6:	d109      	bne.n	800210c <Cross_Collision+0x1bc>
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <Cross_Collision+0x238>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	2b49      	cmp	r3, #73	; 0x49
 80020fe:	d105      	bne.n	800210c <Cross_Collision+0x1bc>
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <Cross_Collision+0x238>)
 8002102:	78db      	ldrb	r3, [r3, #3]
 8002104:	2b3b      	cmp	r3, #59	; 0x3b
 8002106:	d817      	bhi.n	8002138 <Cross_Collision+0x1e8>
 8002108:	2301      	movs	r3, #1
 800210a:	e078      	b.n	80021fe <Cross_Collision+0x2ae>
		else if((piratePos[1]=='I' && piratePos[2]=='D') || (piratePos[1]=='D' && piratePos[2]=='I')){ if(piratePos[3]>50) return 1;}
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <Cross_Collision+0x238>)
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b49      	cmp	r3, #73	; 0x49
 8002112:	d103      	bne.n	800211c <Cross_Collision+0x1cc>
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <Cross_Collision+0x238>)
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	2b44      	cmp	r3, #68	; 0x44
 800211a:	d007      	beq.n	800212c <Cross_Collision+0x1dc>
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <Cross_Collision+0x238>)
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b44      	cmp	r3, #68	; 0x44
 8002122:	d168      	bne.n	80021f6 <Cross_Collision+0x2a6>
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <Cross_Collision+0x238>)
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	2b49      	cmp	r3, #73	; 0x49
 800212a:	d164      	bne.n	80021f6 <Cross_Collision+0x2a6>
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <Cross_Collision+0x238>)
 800212e:	78db      	ldrb	r3, [r3, #3]
 8002130:	2b32      	cmp	r3, #50	; 0x32
 8002132:	d960      	bls.n	80021f6 <Cross_Collision+0x2a6>
 8002134:	2301      	movs	r3, #1
 8002136:	e062      	b.n	80021fe <Cross_Collision+0x2ae>
		if((piratePos[0]=='I' && piratePos[1]=='D') || (piratePos[0]=='D' && piratePos[1]=='I')){ if(piratePos[3]<60) return 1;}
 8002138:	e05d      	b.n	80021f6 <Cross_Collision+0x2a6>
	}
	/**************************************************************************/


	/********************************TN, PQ kereszteződés**********************/
	else if((myPos=='P' && nextPos=='Q') || (myPos=='Q' && nextPos=='P'))
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b50      	cmp	r3, #80	; 0x50
 800213e:	d102      	bne.n	8002146 <Cross_Collision+0x1f6>
 8002140:	79bb      	ldrb	r3, [r7, #6]
 8002142:	2b51      	cmp	r3, #81	; 0x51
 8002144:	d005      	beq.n	8002152 <Cross_Collision+0x202>
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b51      	cmp	r3, #81	; 0x51
 800214a:	d11f      	bne.n	800218c <Cross_Collision+0x23c>
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2b50      	cmp	r3, #80	; 0x50
 8002150:	d11c      	bne.n	800218c <Cross_Collision+0x23c>
	{
		if(piratePos[0]=='T'){ if(piratePos[3]<50) return 1; }
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <Cross_Collision+0x238>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b54      	cmp	r3, #84	; 0x54
 8002158:	d105      	bne.n	8002166 <Cross_Collision+0x216>
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <Cross_Collision+0x238>)
 800215c:	78db      	ldrb	r3, [r3, #3]
 800215e:	2b31      	cmp	r3, #49	; 0x31
 8002160:	d84b      	bhi.n	80021fa <Cross_Collision+0x2aa>
 8002162:	2301      	movs	r3, #1
 8002164:	e04b      	b.n	80021fe <Cross_Collision+0x2ae>
		else if(piratePos[1]=='T') return 1;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <Cross_Collision+0x238>)
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	2b54      	cmp	r3, #84	; 0x54
 800216c:	d101      	bne.n	8002172 <Cross_Collision+0x222>
 800216e:	2301      	movs	r3, #1
 8002170:	e045      	b.n	80021fe <Cross_Collision+0x2ae>
		else if(piratePos[2]=='T'){ if(piratePos[3]>60) return 1; };
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <Cross_Collision+0x238>)
 8002174:	789b      	ldrb	r3, [r3, #2]
 8002176:	2b54      	cmp	r3, #84	; 0x54
 8002178:	d13f      	bne.n	80021fa <Cross_Collision+0x2aa>
 800217a:	4b03      	ldr	r3, [pc, #12]	; (8002188 <Cross_Collision+0x238>)
 800217c:	78db      	ldrb	r3, [r3, #3]
 800217e:	2b3c      	cmp	r3, #60	; 0x3c
 8002180:	d93b      	bls.n	80021fa <Cross_Collision+0x2aa>
 8002182:	2301      	movs	r3, #1
 8002184:	e03b      	b.n	80021fe <Cross_Collision+0x2ae>
 8002186:	bf00      	nop
 8002188:	200002ac 	.word	0x200002ac
	}
	else if(nextPos=='T')
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	2b54      	cmp	r3, #84	; 0x54
 8002190:	d134      	bne.n	80021fc <Cross_Collision+0x2ac>
	{
		if((piratePos[0]=='P' && piratePos[1]=='Q') || (piratePos[0]=='Q' && piratePos[1]=='P')){if(piratePos[3]<70)return 1;}
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <Cross_Collision+0x2bc>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b50      	cmp	r3, #80	; 0x50
 8002198:	d103      	bne.n	80021a2 <Cross_Collision+0x252>
 800219a:	4b1c      	ldr	r3, [pc, #112]	; (800220c <Cross_Collision+0x2bc>)
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b51      	cmp	r3, #81	; 0x51
 80021a0:	d007      	beq.n	80021b2 <Cross_Collision+0x262>
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <Cross_Collision+0x2bc>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b51      	cmp	r3, #81	; 0x51
 80021a8:	d109      	bne.n	80021be <Cross_Collision+0x26e>
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <Cross_Collision+0x2bc>)
 80021ac:	785b      	ldrb	r3, [r3, #1]
 80021ae:	2b50      	cmp	r3, #80	; 0x50
 80021b0:	d105      	bne.n	80021be <Cross_Collision+0x26e>
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <Cross_Collision+0x2bc>)
 80021b4:	78db      	ldrb	r3, [r3, #3]
 80021b6:	2b45      	cmp	r3, #69	; 0x45
 80021b8:	d820      	bhi.n	80021fc <Cross_Collision+0x2ac>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e01f      	b.n	80021fe <Cross_Collision+0x2ae>
		else if((piratePos[1]=='P' && piratePos[2]=='Q') || (piratePos[1]=='Q' && piratePos[2]=='P')){if(piratePos[3]>50)return 1;}
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <Cross_Collision+0x2bc>)
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	2b50      	cmp	r3, #80	; 0x50
 80021c4:	d103      	bne.n	80021ce <Cross_Collision+0x27e>
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <Cross_Collision+0x2bc>)
 80021c8:	789b      	ldrb	r3, [r3, #2]
 80021ca:	2b51      	cmp	r3, #81	; 0x51
 80021cc:	d007      	beq.n	80021de <Cross_Collision+0x28e>
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <Cross_Collision+0x2bc>)
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	2b51      	cmp	r3, #81	; 0x51
 80021d4:	d112      	bne.n	80021fc <Cross_Collision+0x2ac>
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <Cross_Collision+0x2bc>)
 80021d8:	789b      	ldrb	r3, [r3, #2]
 80021da:	2b50      	cmp	r3, #80	; 0x50
 80021dc:	d10e      	bne.n	80021fc <Cross_Collision+0x2ac>
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <Cross_Collision+0x2bc>)
 80021e0:	78db      	ldrb	r3, [r3, #3]
 80021e2:	2b32      	cmp	r3, #50	; 0x32
 80021e4:	d90a      	bls.n	80021fc <Cross_Collision+0x2ac>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e009      	b.n	80021fe <Cross_Collision+0x2ae>
		if((piratePos[0]=='K' && piratePos[1]=='L') || (piratePos[0]=='L' && piratePos[1]=='K')){ if(piratePos[3]<60) return 1;}
 80021ea:	bf00      	nop
 80021ec:	e006      	b.n	80021fc <Cross_Collision+0x2ac>
		if((piratePos[0]=='N' && piratePos[1]=='I') || (piratePos[0]=='I' && piratePos[1]=='N')){ if(piratePos[3]<60) return 1;}
 80021ee:	bf00      	nop
 80021f0:	e004      	b.n	80021fc <Cross_Collision+0x2ac>
		if((piratePos[0]=='F' && piratePos[1]=='G') || (piratePos[0]=='G' && piratePos[1]=='F')){ if(piratePos[3]<60) return 1;}
 80021f2:	bf00      	nop
 80021f4:	e002      	b.n	80021fc <Cross_Collision+0x2ac>
		if((piratePos[0]=='I' && piratePos[1]=='D') || (piratePos[0]=='D' && piratePos[1]=='I')){ if(piratePos[3]<60) return 1;}
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <Cross_Collision+0x2ac>
		if(piratePos[0]=='T'){ if(piratePos[3]<50) return 1; }
 80021fa:	bf00      	nop
	}
	/**************************************************************************/
	return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200002ac 	.word	0x200002ac

08002210 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b090      	sub	sp, #64	; 0x40
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 800221c:	2300      	movs	r3, #0
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8002220:	2300      	movs	r3, #0
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
 8002224:	e016      	b.n	8002254 <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f003 fbcc 	bl	80059c4 <HAL_ADC_Start>
		HAL_Delay(10);
 800222c:	200a      	movs	r0, #10
 800222e:	f003 fb61 	bl	80058f4 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8002232:	2114      	movs	r1, #20
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f003 fc97 	bl	8005b68 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 800223a:	200a      	movs	r0, #10
 800223c:	f003 fb5a 	bl	80058f4 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f003 fd1c 	bl	8005c7e <HAL_ADC_GetValue>
 8002246:	4602      	mov	r2, r0
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	4413      	add	r3, r2
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	3301      	adds	r3, #1
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	2b13      	cmp	r3, #19
 8002258:	dde5      	ble.n	8002226 <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 800225a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002264:	ee17 0a90 	vmov	r0, s15
 8002268:	f7fe f98e 	bl	8000588 <__aeabi_f2d>
 800226c:	a37b      	add	r3, pc, #492	; (adr r3, 800245c <Battery_Voltage_Compensate+0x24c>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f9e1 	bl	8000638 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	4b71      	ldr	r3, [pc, #452]	; (8002448 <Battery_Voltage_Compensate+0x238>)
 8002284:	f7fe fb02 	bl	800088c <__aeabi_ddiv>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	f7fe fcaa 	bl	8000be8 <__aeabi_d2f>
 8002294:	4603      	mov	r3, r0
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 8002298:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800229a:	f7fe f975 	bl	8000588 <__aeabi_f2d>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	f107 0014 	add.w	r0, r7, #20
 80022a6:	4969      	ldr	r1, [pc, #420]	; (800244c <Battery_Voltage_Compensate+0x23c>)
 80022a8:	f009 fc7a 	bl	800bba0 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fd ffad 	bl	8000210 <strlen>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	f107 0114 	add.w	r1, r7, #20
 80022be:	230a      	movs	r3, #10
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f007 ff04 	bl	800a0ce <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 80022c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d2:	d009      	beq.n	80022e8 <Battery_Voltage_Compensate+0xd8>
 80022d4:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 80022d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80022dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e0:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <Battery_Voltage_Compensate+0x240>)
 80022e2:	edc3 7a00 	vstr	s15, [r3]
 80022e6:	e003      	b.n	80022f0 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 80022e8:	4b59      	ldr	r3, [pc, #356]	; (8002450 <Battery_Voltage_Compensate+0x240>)
 80022ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022ee:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 80022f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022f2:	f7fe f949 	bl	8000588 <__aeabi_f2d>
 80022f6:	a34e      	add	r3, pc, #312	; (adr r3, 8002430 <Battery_Voltage_Compensate+0x220>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fe fc0e 	bl	8000b1c <__aeabi_dcmplt>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8002306:	2300      	movs	r3, #0
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
 800230a:	e00a      	b.n	8002322 <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 800230c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002310:	4850      	ldr	r0, [pc, #320]	; (8002454 <Battery_Voltage_Compensate+0x244>)
 8002312:	f005 f9a2 	bl	800765a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002316:	20c8      	movs	r0, #200	; 0xc8
 8002318:	f003 faec 	bl	80058f4 <HAL_Delay>
		for(i=0;i<10;i++)
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	3301      	adds	r3, #1
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2b09      	cmp	r3, #9
 8002326:	ddf1      	ble.n	800230c <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800232c:	2300      	movs	r3, #0
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002330:	e016      	b.n	8002360 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8002332:	68b8      	ldr	r0, [r7, #8]
 8002334:	f003 fb46 	bl	80059c4 <HAL_ADC_Start>
		HAL_Delay(10);
 8002338:	200a      	movs	r0, #10
 800233a:	f003 fadb 	bl	80058f4 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 800233e:	2114      	movs	r1, #20
 8002340:	68b8      	ldr	r0, [r7, #8]
 8002342:	f003 fc11 	bl	8005b68 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002346:	200a      	movs	r0, #10
 8002348:	f003 fad4 	bl	80058f4 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 800234c:	68b8      	ldr	r0, [r7, #8]
 800234e:	f003 fc96 	bl	8005c7e <HAL_ADC_GetValue>
 8002352:	4602      	mov	r2, r0
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	4413      	add	r3, r2
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	3301      	adds	r3, #1
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	2b13      	cmp	r3, #19
 8002364:	dde5      	ble.n	8002332 <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8002366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002370:	ee17 0a90 	vmov	r0, s15
 8002374:	f7fe f908 	bl	8000588 <__aeabi_f2d>
 8002378:	a32f      	add	r3, pc, #188	; (adr r3, 8002438 <Battery_Voltage_Compensate+0x228>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe f95b 	bl	8000638 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <Battery_Voltage_Compensate+0x238>)
 8002390:	f7fe fa7c 	bl	800088c <__aeabi_ddiv>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	a328      	add	r3, pc, #160	; (adr r3, 8002440 <Battery_Voltage_Compensate+0x230>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fd ff93 	bl	80002cc <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fc1b 	bl	8000be8 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 80023b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023b8:	f7fe f8e6 	bl	8000588 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	f107 0014 	add.w	r0, r7, #20
 80023c4:	4924      	ldr	r1, [pc, #144]	; (8002458 <Battery_Voltage_Compensate+0x248>)
 80023c6:	f009 fbeb 	bl	800bba0 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fd ff1e 	bl	8000210 <strlen>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	f107 0114 	add.w	r1, r7, #20
 80023dc:	230a      	movs	r3, #10
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f007 fe75 	bl	800a0ce <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 80023e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d510      	bpl.n	8002418 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023fa:	e00a      	b.n	8002412 <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 80023fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <Battery_Voltage_Compensate+0x244>)
 8002402:	f005 f92a 	bl	800765a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002406:	20c8      	movs	r0, #200	; 0xc8
 8002408:	f003 fa74 	bl	80058f4 <HAL_Delay>
		for(i=0;i<20;i++)
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	3301      	adds	r3, #1
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002414:	2b13      	cmp	r3, #19
 8002416:	ddf1      	ble.n	80023fc <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8002418:	2201      	movs	r2, #1
 800241a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <Battery_Voltage_Compensate+0x244>)
 8002420:	f005 f902 	bl	8007628 <HAL_GPIO_WritePin>

}
 8002424:	bf00      	nop
 8002426:	3740      	adds	r7, #64	; 0x40
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	f3af 8000 	nop.w
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	401ccccc 	.word	0x401ccccc
 8002438:	8c6df334 	.word	0x8c6df334
 800243c:	3f6a8d60 	.word	0x3f6a8d60
 8002440:	47ae147b 	.word	0x47ae147b
 8002444:	3f947ae1 	.word	0x3f947ae1
 8002448:	40340000 	.word	0x40340000
 800244c:	0800f654 	.word	0x0800f654
 8002450:	20000010 	.word	0x20000010
 8002454:	40020400 	.word	0x40020400
 8002458:	0800f66c 	.word	0x0800f66c
 800245c:	99fa11a9 	.word	0x99fa11a9
 8002460:	3f72dd7a 	.word	0x3f72dd7a
 8002464:	00000000 	.word	0x00000000

08002468 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <Measure_Velocity_Task+0xd8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	429a      	cmp	r2, r3
 8002482:	d354      	bcc.n	800252e <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <Measure_Velocity_Task+0xd8>)
 800248c:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <Measure_Velocity_Task+0xdc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8002496:	4a2b      	ldr	r2, [pc, #172]	; (8002544 <Measure_Velocity_Task+0xdc>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6013      	str	r3, [r2, #0]
		return;
 800249c:	e048      	b.n	8002530 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002548 <Measure_Velocity_Task+0xe0>
 80024b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b4:	ee17 0a90 	vmov	r0, s15
 80024b8:	f7fe f866 	bl	8000588 <__aeabi_f2d>
 80024bc:	a31e      	add	r3, pc, #120	; (adr r3, 8002538 <Measure_Velocity_Task+0xd0>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fe f8b9 	bl	8000638 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4614      	mov	r4, r2
 80024cc:	461d      	mov	r5, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d8:	ee17 0a90 	vmov	r0, s15
 80024dc:	f7fe f854 	bl	8000588 <__aeabi_f2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4620      	mov	r0, r4
 80024e6:	4629      	mov	r1, r5
 80024e8:	f7fe f9d0 	bl	800088c <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fb78 	bl	8000be8 <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <Measure_Velocity_Task+0xe4>)
 80024fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <Measure_Velocity_Task+0xe8>)
 8002506:	ed93 7a00 	vldr	s14, [r3]
 800250a:	edd7 7a05 	vldr	s15, [r7, #20]
 800250e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <Measure_Velocity_Task+0xec>)
 8002514:	edd3 6a00 	vldr	s13, [r3]
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <Measure_Velocity_Task+0xf0>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <Measure_Velocity_Task+0xf0>)
 8002528:	edc3 7a00 	vstr	s15, [r3]
 800252c:	e000      	b.n	8002530 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 800252e:	bf00      	nop
}
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bdb0      	pop	{r4, r5, r7, pc}
 8002536:	bf00      	nop
 8002538:	8f5c28f6 	.word	0x8f5c28f6
 800253c:	401df5c2 	.word	0x401df5c2
 8002540:	20000014 	.word	0x20000014
 8002544:	20000664 	.word	0x20000664
 8002548:	47000000 	.word	0x47000000
 800254c:	40010400 	.word	0x40010400
 8002550:	20000018 	.word	0x20000018
 8002554:	2000001c 	.word	0x2000001c
 8002558:	20000660 	.word	0x20000660
 800255c:	00000000 	.word	0x00000000

08002560 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 800256e:	4ba4      	ldr	r3, [pc, #656]	; (8002800 <Motor_Drive_Task+0x2a0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	f0c0 8133 	bcc.w	80027e0 <Motor_Drive_Task+0x280>
	motor_drive_task_tick= tick + period;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a9f      	ldr	r2, [pc, #636]	; (8002800 <Motor_Drive_Task+0x2a0>)
 8002582:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8002584:	4b9f      	ldr	r3, [pc, #636]	; (8002804 <Motor_Drive_Task+0x2a4>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80da 	beq.w	8002742 <Motor_Drive_Task+0x1e2>
 800258e:	4b9e      	ldr	r3, [pc, #632]	; (8002808 <Motor_Drive_Task+0x2a8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80d5 	beq.w	8002742 <Motor_Drive_Task+0x1e2>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8002598:	4b9c      	ldr	r3, [pc, #624]	; (800280c <Motor_Drive_Task+0x2ac>)
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	4b9c      	ldr	r3, [pc, #624]	; (8002810 <Motor_Drive_Task+0x2b0>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a8:	ee17 0a90 	vmov	r0, s15
 80025ac:	f7fd ffec 	bl	8000588 <__aeabi_f2d>
 80025b0:	a38d      	add	r3, pc, #564	; (adr r3, 80027e8 <Motor_Drive_Task+0x288>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fe f83f 	bl	8000638 <__aeabi_dmul>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	461d      	mov	r5, r3
 80025c2:	4b94      	ldr	r3, [pc, #592]	; (8002814 <Motor_Drive_Task+0x2b4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffde 	bl	8000588 <__aeabi_f2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fe f830 	bl	8000638 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4614      	mov	r4, r2
 80025de:	461d      	mov	r5, r3
 80025e0:	4b8d      	ldr	r3, [pc, #564]	; (8002818 <Motor_Drive_Task+0x2b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ffcf 	bl	8000588 <__aeabi_f2d>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4620      	mov	r0, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7fd fe6b 	bl	80002cc <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe faf3 	bl	8000be8 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4a85      	ldr	r2, [pc, #532]	; (800281c <Motor_Drive_Task+0x2bc>)
 8002606:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8002608:	4b84      	ldr	r3, [pc, #528]	; (800281c <Motor_Drive_Task+0x2bc>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002820 <Motor_Drive_Task+0x2c0>
 8002612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	dd03      	ble.n	8002624 <Motor_Drive_Task+0xc4>
 800261c:	4b7f      	ldr	r3, [pc, #508]	; (800281c <Motor_Drive_Task+0x2bc>)
 800261e:	4a81      	ldr	r2, [pc, #516]	; (8002824 <Motor_Drive_Task+0x2c4>)
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e00c      	b.n	800263e <Motor_Drive_Task+0xde>
		else if(u<-500)u=-500;
 8002624:	4b7d      	ldr	r3, [pc, #500]	; (800281c <Motor_Drive_Task+0x2bc>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002828 <Motor_Drive_Task+0x2c8>
 800262e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	d502      	bpl.n	800263e <Motor_Drive_Task+0xde>
 8002638:	4b78      	ldr	r3, [pc, #480]	; (800281c <Motor_Drive_Task+0x2bc>)
 800263a:	4a7c      	ldr	r2, [pc, #496]	; (800282c <Motor_Drive_Task+0x2cc>)
 800263c:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 800263e:	4b76      	ldr	r3, [pc, #472]	; (8002818 <Motor_Drive_Task+0x2b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffa0 	bl	8000588 <__aeabi_f2d>
 8002648:	a369      	add	r3, pc, #420	; (adr r3, 80027f0 <Motor_Drive_Task+0x290>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fd fff3 	bl	8000638 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4614      	mov	r4, r2
 8002658:	461d      	mov	r5, r3
 800265a:	4b70      	ldr	r3, [pc, #448]	; (800281c <Motor_Drive_Task+0x2bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff92 	bl	8000588 <__aeabi_f2d>
 8002664:	a364      	add	r3, pc, #400	; (adr r3, 80027f8 <Motor_Drive_Task+0x298>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffe5 	bl	8000638 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fe29 	bl	80002cc <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fab1 	bl	8000be8 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a63      	ldr	r2, [pc, #396]	; (8002818 <Motor_Drive_Task+0x2b8>)
 800268a:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 800268c:	4b63      	ldr	r3, [pc, #396]	; (800281c <Motor_Drive_Task+0x2bc>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	dd0a      	ble.n	80026b2 <Motor_Drive_Task+0x152>
 800269c:	4b5f      	ldr	r3, [pc, #380]	; (800281c <Motor_Drive_Task+0x2bc>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a6:	ee17 3a90 	vmov	r3, s15
 80026aa:	3346      	adds	r3, #70	; 0x46
 80026ac:	4a60      	ldr	r2, [pc, #384]	; (8002830 <Motor_Drive_Task+0x2d0>)
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	e01b      	b.n	80026ea <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <Motor_Drive_Task+0x2bc>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	d50a      	bpl.n	80026d8 <Motor_Drive_Task+0x178>
 80026c2:	4b56      	ldr	r3, [pc, #344]	; (800281c <Motor_Drive_Task+0x2bc>)
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026cc:	ee17 3a90 	vmov	r3, s15
 80026d0:	3b46      	subs	r3, #70	; 0x46
 80026d2:	4a57      	ldr	r2, [pc, #348]	; (8002830 <Motor_Drive_Task+0x2d0>)
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e008      	b.n	80026ea <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <Motor_Drive_Task+0x2bc>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e2:	ee17 2a90 	vmov	r2, s15
 80026e6:	4b52      	ldr	r3, [pc, #328]	; (8002830 <Motor_Drive_Task+0x2d0>)
 80026e8:	601a      	str	r2, [r3, #0]
		MOTOR_EN(1);
 80026ea:	2201      	movs	r2, #1
 80026ec:	2140      	movs	r1, #64	; 0x40
 80026ee:	4851      	ldr	r0, [pc, #324]	; (8002834 <Motor_Drive_Task+0x2d4>)
 80026f0:	f004 ff9a 	bl	8007628 <HAL_GPIO_WritePin>
		if(fabs(v_ref)<70 && fabs(v)<70)
 80026f4:	4b45      	ldr	r3, [pc, #276]	; (800280c <Motor_Drive_Task+0x2ac>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eef0 7ae7 	vabs.f32	s15, s15
 80026fe:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002838 <Motor_Drive_Task+0x2d8>
 8002702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270a:	d527      	bpl.n	800275c <Motor_Drive_Task+0x1fc>
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <Motor_Drive_Task+0x2b0>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	eef0 7ae7 	vabs.f32	s15, s15
 8002716:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002838 <Motor_Drive_Task+0x2d8>
 800271a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d400      	bmi.n	8002726 <Motor_Drive_Task+0x1c6>
 8002724:	e01a      	b.n	800275c <Motor_Drive_Task+0x1fc>
		{
			f=u=0;
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <Motor_Drive_Task+0x2bc>)
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <Motor_Drive_Task+0x2bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a39      	ldr	r2, [pc, #228]	; (8002818 <Motor_Drive_Task+0x2b8>)
 8002734:	6013      	str	r3, [r2, #0]
			MOTOR_EN(0); //amugy stop
 8002736:	2200      	movs	r2, #0
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	483e      	ldr	r0, [pc, #248]	; (8002834 <Motor_Drive_Task+0x2d4>)
 800273c:	f004 ff74 	bl	8007628 <HAL_GPIO_WritePin>
		if(fabs(v_ref)<70 && fabs(v)<70)
 8002740:	e00c      	b.n	800275c <Motor_Drive_Task+0x1fc>
		}
	}
	else
	{	f=u=0;
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <Motor_Drive_Task+0x2bc>)
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <Motor_Drive_Task+0x2bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a32      	ldr	r2, [pc, #200]	; (8002818 <Motor_Drive_Task+0x2b8>)
 8002750:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 8002752:	2200      	movs	r2, #0
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	4837      	ldr	r0, [pc, #220]	; (8002834 <Motor_Drive_Task+0x2d4>)
 8002758:	f004 ff66 	bl	8007628 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	/**/
	if(mode==FAST && rxBuf[1]<1 && !leaveLineEnabled)
 800275c:	4b37      	ldr	r3, [pc, #220]	; (800283c <Motor_Drive_Task+0x2dc>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b3f      	cmp	r3, #63	; 0x3f
 8002762:	d110      	bne.n	8002786 <Motor_Drive_Task+0x226>
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <Motor_Drive_Task+0x2e0>)
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10c      	bne.n	8002786 <Motor_Drive_Task+0x226>
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <Motor_Drive_Task+0x2e4>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d108      	bne.n	8002786 <Motor_Drive_Task+0x226>
	{
		TIM3->CCR1=499;
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <Motor_Drive_Task+0x2e8>)
 8002776:	f240 12f3 	movw	r2, #499	; 0x1f3
 800277a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2=499;
 800277c:	4b32      	ldr	r3, [pc, #200]	; (8002848 <Motor_Drive_Task+0x2e8>)
 800277e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
 8002784:	e027      	b.n	80027d6 <Motor_Drive_Task+0x276>
		//LED_Y_TOGGLE;
	}
	else if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <Motor_Drive_Task+0x2d0>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <Motor_Drive_Task+0x2ec>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d021      	beq.n	80027d6 <Motor_Drive_Task+0x276>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8002792:	4b27      	ldr	r3, [pc, #156]	; (8002830 <Motor_Drive_Task+0x2d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800279a:	0fda      	lsrs	r2, r3, #31
 800279c:	4413      	add	r3, r2
 800279e:	105b      	asrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80027aa:	4293      	cmp	r3, r2
 80027ac:	dd02      	ble.n	80027b4 <Motor_Drive_Task+0x254>
 80027ae:	f240 33b6 	movw	r3, #950	; 0x3b6
 80027b2:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	4a26      	ldr	r2, [pc, #152]	; (8002850 <Motor_Drive_Task+0x2f0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	da01      	bge.n	80027c0 <Motor_Drive_Task+0x260>
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <Motor_Drive_Task+0x2f0>)
 80027be:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 80027c6:	3302      	adds	r3, #2
 80027c8:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd

		TIM3->CCR1=ccr1;
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <Motor_Drive_Task+0x2e8>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <Motor_Drive_Task+0x2e8>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <Motor_Drive_Task+0x2d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1c      	ldr	r2, [pc, #112]	; (800284c <Motor_Drive_Task+0x2ec>)
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e000      	b.n	80027e2 <Motor_Drive_Task+0x282>
	if(motor_drive_task_tick>tick) return;
 80027e0:	bf00      	nop
}
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdb0      	pop	{r4, r5, r7, pc}
 80027e8:	30be0ded 	.word	0x30be0ded
 80027ec:	3fd02a99 	.word	0x3fd02a99
 80027f0:	9b3d07c8 	.word	0x9b3d07c8
 80027f4:	3fef9f55 	.word	0x3fef9f55
 80027f8:	30be0e00 	.word	0x30be0e00
 80027fc:	3f882a99 	.word	0x3f882a99
 8002800:	20000020 	.word	0x20000020
 8002804:	20000b40 	.word	0x20000b40
 8002808:	20000b41 	.word	0x20000b41
 800280c:	20000290 	.word	0x20000290
 8002810:	20000660 	.word	0x20000660
 8002814:	20000010 	.word	0x20000010
 8002818:	20000668 	.word	0x20000668
 800281c:	2000066c 	.word	0x2000066c
 8002820:	445c0000 	.word	0x445c0000
 8002824:	445c0000 	.word	0x445c0000
 8002828:	c3fa0000 	.word	0xc3fa0000
 800282c:	c3fa0000 	.word	0xc3fa0000
 8002830:	20000670 	.word	0x20000670
 8002834:	40020400 	.word	0x40020400
 8002838:	428c0000 	.word	0x428c0000
 800283c:	2000028e 	.word	0x2000028e
 8002840:	20000678 	.word	0x20000678
 8002844:	20000294 	.word	0x20000294
 8002848:	40000400 	.word	0x40000400
 800284c:	20000674 	.word	0x20000674
 8002850:	fffffc4a 	.word	0xfffffc4a

08002854 <G0_Read_Fast>:

uint16_t boostCnt=0;


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <G0_Read_Fast+0x5c>)
 8002864:	222a      	movs	r2, #42	; 0x2a
 8002866:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 8002868:	2302      	movs	r3, #2
 800286a:	2201      	movs	r2, #1
 800286c:	4910      	ldr	r1, [pc, #64]	; (80028b0 <G0_Read_Fast+0x5c>)
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f007 fc2d 	bl	800a0ce <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 4);
 8002874:	2304      	movs	r3, #4
 8002876:	2208      	movs	r2, #8
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <G0_Read_Fast+0x60>)
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f007 fcb9 	bl	800a1f2 <HAL_UART_Receive>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <G0_Read_Fast+0x64>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
	if((state==HAL_OK)&&(rxBuf[0]==START_BYTE_FAST) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <G0_Read_Fast+0x50>
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <G0_Read_Fast+0x60>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b41      	cmp	r3, #65	; 0x41
 8002896:	d105      	bne.n	80028a4 <G0_Read_Fast+0x50>
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <G0_Read_Fast+0x60>)
 800289a:	79db      	ldrb	r3, [r3, #7]
 800289c:	2b12      	cmp	r3, #18
 800289e:	d101      	bne.n	80028a4 <G0_Read_Fast+0x50>
	{
		return 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 80028a4:	2301      	movs	r3, #1
	}
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000024 	.word	0x20000024
 80028b4:	20000678 	.word	0x20000678
 80028b8:	20000b41 	.word	0x20000b41

080028bc <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	71fb      	strb	r3, [r7, #7]
	uint8_t state=0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <G0_Read_Skill+0x68>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 80028d4:	2302      	movs	r3, #2
 80028d6:	2201      	movs	r2, #1
 80028d8:	4912      	ldr	r1, [pc, #72]	; (8002924 <G0_Read_Skill+0x68>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f007 fbf7 	bl	800a0ce <HAL_UART_Transmit>
	state = HAL_UART_Receive(huart_stm, rxBuf, 10, 4);
 80028e0:	2304      	movs	r3, #4
 80028e2:	220a      	movs	r2, #10
 80028e4:	4910      	ldr	r1, [pc, #64]	; (8002928 <G0_Read_Skill+0x6c>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f007 fc83 	bl	800a1f2 <HAL_UART_Receive>
 80028ec:	4603      	mov	r3, r0
 80028ee:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <G0_Read_Skill+0x70>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
	if((state==HAL_OK)&&(rxBuf[0]==START_BYTE_SKILL_FORWARD || rxBuf[0]==START_BYTE_SKILL_REVERSE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <G0_Read_Skill+0x5c>
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <G0_Read_Skill+0x6c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b50      	cmp	r3, #80	; 0x50
 8002902:	d003      	beq.n	800290c <G0_Read_Skill+0x50>
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <G0_Read_Skill+0x6c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2ba8      	cmp	r3, #168	; 0xa8
 800290a:	d105      	bne.n	8002918 <G0_Read_Skill+0x5c>
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <G0_Read_Skill+0x6c>)
 800290e:	7a5b      	ldrb	r3, [r3, #9]
 8002910:	2b12      	cmp	r3, #18
 8002912:	d101      	bne.n	8002918 <G0_Read_Skill+0x5c>
	{
		return 0;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <G0_Read_Skill+0x5e>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8002918:	2301      	movs	r3, #1
	}
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000024 	.word	0x20000024
 8002928:	20000678 	.word	0x20000678
 800292c:	20000b41 	.word	0x20000b41

08002930 <Line_Track_Task>:


void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
	static float PHI;
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t tick_prev=0;

	if(line_track_task_tick>tick) return;
 800293e:	4b96      	ldr	r3, [pc, #600]	; (8002b98 <Line_Track_Task+0x268>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	f0c0 83ed 	bcc.w	8003124 <Line_Track_Task+0x7f4>
	line_track_task_tick = tick + period;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4413      	add	r3, r2
 8002950:	4a91      	ldr	r2, [pc, #580]	; (8002b98 <Line_Track_Task+0x268>)
 8002952:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 8002954:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <Line_Track_Task+0x26c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b52      	cmp	r3, #82	; 0x52
 800295a:	f040 8212 	bne.w	8002d82 <Line_Track_Task+0x452>
	{
		if(orientation==FORWARD)
 800295e:	4b90      	ldr	r3, [pc, #576]	; (8002ba0 <Line_Track_Task+0x270>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80eb 	bne.w	8002b3e <Line_Track_Task+0x20e>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 8002968:	2239      	movs	r2, #57	; 0x39
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff ffa5 	bl	80028bc <G0_Read_Skill>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 83d7 	bne.w	8003128 <Line_Track_Task+0x7f8>

			uint8_t tmp=Lane_Changer(tick);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f001 f980 	bl	8003c80 <Lane_Changer>
 8002980:	4603      	mov	r3, r0
 8002982:	75bb      	strb	r3, [r7, #22]
			if(v_control==NORMAL_VEL)v_ref=1100;
 8002984:	4b87      	ldr	r3, [pc, #540]	; (8002ba4 <Line_Track_Task+0x274>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d103      	bne.n	8002994 <Line_Track_Task+0x64>
 800298c:	4b86      	ldr	r3, [pc, #536]	; (8002ba8 <Line_Track_Task+0x278>)
 800298e:	4a87      	ldr	r2, [pc, #540]	; (8002bac <Line_Track_Task+0x27c>)
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e00e      	b.n	80029b2 <Line_Track_Task+0x82>
			else if(v_control==SLOW_DOWN)v_ref=600;
 8002994:	4b83      	ldr	r3, [pc, #524]	; (8002ba4 <Line_Track_Task+0x274>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d103      	bne.n	80029a4 <Line_Track_Task+0x74>
 800299c:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <Line_Track_Task+0x278>)
 800299e:	4a84      	ldr	r2, [pc, #528]	; (8002bb0 <Line_Track_Task+0x280>)
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e006      	b.n	80029b2 <Line_Track_Task+0x82>
			else if(v_control==STOP)v_ref=100;
 80029a4:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <Line_Track_Task+0x274>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <Line_Track_Task+0x82>
 80029ac:	4b7e      	ldr	r3, [pc, #504]	; (8002ba8 <Line_Track_Task+0x278>)
 80029ae:	4a81      	ldr	r2, [pc, #516]	; (8002bb4 <Line_Track_Task+0x284>)
 80029b0:	601a      	str	r2, [r3, #0]

			if(tmp)return;
 80029b2:	7dbb      	ldrb	r3, [r7, #22]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 83b9 	bne.w	800312c <Line_Track_Task+0x7fc>

			Detect_Node4(huart_debugg, tick);
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68b8      	ldr	r0, [r7, #8]
 80029be:	f001 f8cb 	bl	8003b58 <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80029c2:	4b7d      	ldr	r3, [pc, #500]	; (8002bb8 <Line_Track_Task+0x288>)
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 83b2 	beq.w	8003130 <Line_Track_Task+0x800>
 80029cc:	4b7a      	ldr	r3, [pc, #488]	; (8002bb8 <Line_Track_Task+0x288>)
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	f200 83ad 	bhi.w	8003130 <Line_Track_Task+0x800>
			gamma = Skill_Mode(huart_debugg, 0.004, 0.004, tick); //kD 4ms -es futáshoz hangolva
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	eddf 0a78 	vldr	s1, [pc, #480]	; 8002bbc <Line_Track_Task+0x28c>
 80029dc:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8002bbc <Line_Track_Task+0x28c>
 80029e0:	68b8      	ldr	r0, [r7, #8]
 80029e2:	f000 ff17 	bl	8003814 <Skill_Mode>
 80029e6:	eef0 7a40 	vmov.f32	s15, s0
 80029ea:	4b75      	ldr	r3, [pc, #468]	; (8002bc0 <Line_Track_Task+0x290>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]

			//ELSŐSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 80029f0:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <Line_Track_Task+0x290>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdc7 	bl	8000588 <__aeabi_f2d>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	ec43 2b10 	vmov	d0, r2, r3
 8002a02:	f00b fcf1 	bl	800e3e8 <tan>
 8002a06:	ec51 0b10 	vmov	r0, r1, d0
 8002a0a:	a35f      	add	r3, pc, #380	; (adr r3, 8002b88 <Line_Track_Task+0x258>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f7fd fe12 	bl	8000638 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	ec43 2b17 	vmov	d7, r2, r3
 8002a1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a20:	eef0 0a67 	vmov.f32	s1, s15
 8002a24:	f00b fb34 	bl	800e090 <atan>
 8002a28:	ec53 2b10 	vmov	r2, r3, d0
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7fe f8da 	bl	8000be8 <__aeabi_d2f>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4a63      	ldr	r2, [pc, #396]	; (8002bc4 <Line_Track_Task+0x294>)
 8002a38:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <Line_Track_Task+0x294>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002bc8 <Line_Track_Task+0x298>
 8002a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a48:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002bcc <Line_Track_Task+0x29c>
 8002a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a54:	ee17 3a90 	vmov	r3, s15
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002a5e:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002a60:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002a68:	dd04      	ble.n	8002a74 <Line_Track_Task+0x144>
			{
				ccr = CCR_FRONT_MAX;
 8002a6a:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002a6c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e008      	b.n	8002a86 <Line_Track_Task+0x156>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002a7c:	da03      	bge.n	8002a86 <Line_Track_Task+0x156>
			{
				ccr = CCR_FRONT_MIN;
 8002a7e:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002a80:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002a84:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 8002a86:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34
			//HÁTSÓSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma))/3;
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <Line_Track_Task+0x290>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd77 	bl	8000588 <__aeabi_f2d>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	ec43 2b10 	vmov	d0, r2, r3
 8002aa2:	f00b fca1 	bl	800e3e8 <tan>
 8002aa6:	ec51 0b10 	vmov	r0, r1, d0
 8002aaa:	a339      	add	r3, pc, #228	; (adr r3, 8002b90 <Line_Track_Task+0x260>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fdc2 	bl	8000638 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	ec43 2b17 	vmov	d7, r2, r3
 8002abc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac0:	eef0 0a67 	vmov.f32	s1, s15
 8002ac4:	f00b fae4 	bl	800e090 <atan>
 8002ac8:	ec51 0b10 	vmov	r0, r1, d0
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <Line_Track_Task+0x2a4>)
 8002ad2:	f7fd fedb 	bl	800088c <__aeabi_ddiv>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f7fe f883 	bl	8000be8 <__aeabi_d2f>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4a37      	ldr	r2, [pc, #220]	; (8002bc4 <Line_Track_Task+0x294>)
 8002ae6:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);//balra kanyarodás
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <Line_Track_Task+0x294>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002bc8 <Line_Track_Task+0x298>
 8002af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002bd8 <Line_Track_Task+0x2a8>
 8002afa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b02:	ee17 3a90 	vmov	r3, s15
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002b0c:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8002b16:	dd04      	ble.n	8002b22 <Line_Track_Task+0x1f2>
			{
				ccr = CCR_REAR_MAX;
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002b1a:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e008      	b.n	8002b34 <Line_Track_Task+0x204>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002b2a:	da03      	bge.n	8002b34 <Line_Track_Task+0x204>
			{
				ccr = CCR_REAR_MIN;
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002b2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b32:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <Line_Track_Task+0x2a0>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <Line_Track_Task+0x2ac>)
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3c:	e2ee      	b.n	800311c <Line_Track_Task+0x7ec>
		}
		else if(orientation==REVERSE)//TOLATÁS
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <Line_Track_Task+0x270>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 82ea 	bne.w	800311c <Line_Track_Task+0x7ec>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 8002b48:	2291      	movs	r2, #145	; 0x91
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff feb5 	bl	80028bc <G0_Read_Skill>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f040 82ed 	bne.w	8003134 <Line_Track_Task+0x804>

			uint8_t tmp=Lane_Changer(tick);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f001 f890 	bl	8003c80 <Lane_Changer>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]
			if(v_control==NORMAL_VEL)v_ref=-1100;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <Line_Track_Task+0x274>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d103      	bne.n	8002b74 <Line_Track_Task+0x244>
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <Line_Track_Task+0x278>)
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <Line_Track_Task+0x2b0>)
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e040      	b.n	8002bf6 <Line_Track_Task+0x2c6>
			else if(v_control==SLOW_DOWN)v_ref=-600;
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <Line_Track_Task+0x274>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d135      	bne.n	8002be8 <Line_Track_Task+0x2b8>
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <Line_Track_Task+0x278>)
 8002b7e:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <Line_Track_Task+0x2b4>)
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e038      	b.n	8002bf6 <Line_Track_Task+0x2c6>
 8002b84:	f3af 8000 	nop.w
 8002b88:	c4830201 	.word	0xc4830201
 8002b8c:	3fe73a26 	.word	0x3fe73a26
 8002b90:	a3f47e90 	.word	0xa3f47e90
 8002b94:	3fe8fd1f 	.word	0x3fe8fd1f
 8002b98:	20000028 	.word	0x20000028
 8002b9c:	2000028e 	.word	0x2000028e
 8002ba0:	2000029c 	.word	0x2000029c
 8002ba4:	200002a1 	.word	0x200002a1
 8002ba8:	20000290 	.word	0x20000290
 8002bac:	44898000 	.word	0x44898000
 8002bb0:	44160000 	.word	0x44160000
 8002bb4:	42c80000 	.word	0x42c80000
 8002bb8:	20000678 	.word	0x20000678
 8002bbc:	3b83126f 	.word	0x3b83126f
 8002bc0:	20000688 	.word	0x20000688
 8002bc4:	2000068c 	.word	0x2000068c
 8002bc8:	44af0000 	.word	0x44af0000
 8002bcc:	442c0000 	.word	0x442c0000
 8002bd0:	2000002c 	.word	0x2000002c
 8002bd4:	40080000 	.word	0x40080000
 8002bd8:	44190000 	.word	0x44190000
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	c4898000 	.word	0xc4898000
 8002be4:	c4160000 	.word	0xc4160000
			else if(v_control==STOP)v_ref=-100;
 8002be8:	4baf      	ldr	r3, [pc, #700]	; (8002ea8 <Line_Track_Task+0x578>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <Line_Track_Task+0x2c6>
 8002bf0:	4bae      	ldr	r3, [pc, #696]	; (8002eac <Line_Track_Task+0x57c>)
 8002bf2:	4aaf      	ldr	r2, [pc, #700]	; (8002eb0 <Line_Track_Task+0x580>)
 8002bf4:	601a      	str	r2, [r3, #0]

			if(tmp)return;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 829d 	bne.w	8003138 <Line_Track_Task+0x808>

			Detect_Node4(huart_debugg, tick);
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	68b8      	ldr	r0, [r7, #8]
 8002c02:	f000 ffa9 	bl	8003b58 <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8002c06:	4bab      	ldr	r3, [pc, #684]	; (8002eb4 <Line_Track_Task+0x584>)
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8296 	beq.w	800313c <Line_Track_Task+0x80c>
 8002c10:	4ba8      	ldr	r3, [pc, #672]	; (8002eb4 <Line_Track_Task+0x584>)
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	f200 8291 	bhi.w	800313c <Line_Track_Task+0x80c>
			gamma = Skill_Mode(huart_debugg, 0.003, 0.032, tick);
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8002eb8 <Line_Track_Task+0x588>
 8002c20:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8002ebc <Line_Track_Task+0x58c>
 8002c24:	68b8      	ldr	r0, [r7, #8]
 8002c26:	f000 fdf5 	bl	8003814 <Skill_Mode>
 8002c2a:	eef0 7a40 	vmov.f32	s15, s0
 8002c2e:	4ba4      	ldr	r3, [pc, #656]	; (8002ec0 <Line_Track_Task+0x590>)
 8002c30:	edc3 7a00 	vstr	s15, [r3]

			//HÁTSÓ SZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 8002c34:	4ba2      	ldr	r3, [pc, #648]	; (8002ec0 <Line_Track_Task+0x590>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fca5 	bl	8000588 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	ec43 2b10 	vmov	d0, r2, r3
 8002c46:	f00b fbcf 	bl	800e3e8 <tan>
 8002c4a:	ec51 0b10 	vmov	r0, r1, d0
 8002c4e:	a392      	add	r3, pc, #584	; (adr r3, 8002e98 <Line_Track_Task+0x568>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fcf0 	bl	8000638 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	ec43 2b17 	vmov	d7, r2, r3
 8002c60:	eeb0 0a47 	vmov.f32	s0, s14
 8002c64:	eef0 0a67 	vmov.f32	s1, s15
 8002c68:	f00b fa12 	bl	800e090 <atan>
 8002c6c:	ec53 2b10 	vmov	r2, r3, d0
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd ffb8 	bl	8000be8 <__aeabi_d2f>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4a92      	ldr	r2, [pc, #584]	; (8002ec4 <Line_Track_Task+0x594>)
 8002c7c:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);
 8002c7e:	4b91      	ldr	r3, [pc, #580]	; (8002ec4 <Line_Track_Task+0x594>)
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002ec8 <Line_Track_Task+0x598>
 8002c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002ecc <Line_Track_Task+0x59c>
 8002c90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c98:	ee17 3a90 	vmov	r3, s15
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002ca2:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002ca4:	4b8a      	ldr	r3, [pc, #552]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8002cac:	dd04      	ble.n	8002cb8 <Line_Track_Task+0x388>
			{
				ccr = CCR_REAR_MAX;
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002cb0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e008      	b.n	8002cca <Line_Track_Task+0x39a>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8002cb8:	4b85      	ldr	r3, [pc, #532]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002cc0:	da03      	bge.n	8002cca <Line_Track_Task+0x39a>
			{
				ccr = CCR_REAR_MIN;
 8002cc2:	4b83      	ldr	r3, [pc, #524]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002cc4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002cc8:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 8002cca:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b81      	ldr	r3, [pc, #516]	; (8002ed4 <Line_Track_Task+0x5a4>)
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
			//ELSŐSZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma))/3;
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <Line_Track_Task+0x590>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc56 	bl	8000588 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	ec43 2b10 	vmov	d0, r2, r3
 8002ce4:	f00b fb80 	bl	800e3e8 <tan>
 8002ce8:	ec51 0b10 	vmov	r0, r1, d0
 8002cec:	a36c      	add	r3, pc, #432	; (adr r3, 8002ea0 <Line_Track_Task+0x570>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fca1 	bl	8000638 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	ec43 2b17 	vmov	d7, r2, r3
 8002cfe:	eeb0 0a47 	vmov.f32	s0, s14
 8002d02:	eef0 0a67 	vmov.f32	s1, s15
 8002d06:	f00b f9c3 	bl	800e090 <atan>
 8002d0a:	ec51 0b10 	vmov	r0, r1, d0
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	4b71      	ldr	r3, [pc, #452]	; (8002ed8 <Line_Track_Task+0x5a8>)
 8002d14:	f7fd fdba 	bl	800088c <__aeabi_ddiv>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd ff62 	bl	8000be8 <__aeabi_d2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <Line_Track_Task+0x594>)
 8002d28:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <Line_Track_Task+0x594>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002ec8 <Line_Track_Task+0x598>
 8002d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d38:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002edc <Line_Track_Task+0x5ac>
 8002d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d44:	ee17 3a90 	vmov	r3, s15
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b60      	ldr	r3, [pc, #384]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002d4e:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002d50:	4b5f      	ldr	r3, [pc, #380]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002d58:	dd04      	ble.n	8002d64 <Line_Track_Task+0x434>
			{
				ccr = CCR_FRONT_MAX;
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002d5c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e008      	b.n	8002d76 <Line_Track_Task+0x446>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002d6c:	da03      	bge.n	8002d76 <Line_Track_Task+0x446>
			{
				ccr = CCR_FRONT_MIN;
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002d70:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d74:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d80:	e1cc      	b.n	800311c <Line_Track_Task+0x7ec>
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 8002d82:	4b57      	ldr	r3, [pc, #348]	; (8002ee0 <Line_Track_Task+0x5b0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b3f      	cmp	r3, #63	; 0x3f
 8002d88:	f040 81c8 	bne.w	800311c <Line_Track_Task+0x7ec>
	{
		static uint8_t fast_mode_state=SC_MODE;

		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fd60 	bl	8002854 <G0_Read_Fast>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 81d2 	bne.w	8003140 <Line_Track_Task+0x810>
		if((LINE_CNT<1 || LINE_CNT > 3) && !leaveLineEnabled) return;//ha nincs vonal a kocsi alatt
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <Line_Track_Task+0x584>)
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <Line_Track_Task+0x47c>
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <Line_Track_Task+0x584>)
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d904      	bls.n	8002db6 <Line_Track_Task+0x486>
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <Line_Track_Task+0x5b4>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 81c7 	beq.w	8003144 <Line_Track_Task+0x814>
		gamma = Fast_Mode(huart_debugg, &fast_mode_state, tick);
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	494b      	ldr	r1, [pc, #300]	; (8002ee8 <Line_Track_Task+0x5b8>)
 8002dba:	68b8      	ldr	r0, [r7, #8]
 8002dbc:	f000 f9e8 	bl	8003190 <Fast_Mode>
 8002dc0:	eef0 7a40 	vmov.f32	s15, s0
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <Line_Track_Task+0x590>)
 8002dc6:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <Line_Track_Task+0x590>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbda 	bl	8000588 <__aeabi_f2d>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	ec43 2b10 	vmov	d0, r2, r3
 8002ddc:	f00b fb04 	bl	800e3e8 <tan>
 8002de0:	ec51 0b10 	vmov	r0, r1, d0
 8002de4:	a32e      	add	r3, pc, #184	; (adr r3, 8002ea0 <Line_Track_Task+0x570>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fc25 	bl	8000638 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	ec43 2b17 	vmov	d7, r2, r3
 8002df6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dfa:	eef0 0a67 	vmov.f32	s1, s15
 8002dfe:	f00b f947 	bl	800e090 <atan>
 8002e02:	ec53 2b10 	vmov	r2, r3, d0
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd feed 	bl	8000be8 <__aeabi_d2f>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <Line_Track_Task+0x594>)
 8002e12:	6013      	str	r3, [r2, #0]

		if(fast_mode_state==FREERUN_MODE)
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <Line_Track_Task+0x5b8>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	f040 80cd 	bne.w	8002fb8 <Line_Track_Task+0x688>
		{
			if(v>2000)//egyenes
 8002e1e:	4b33      	ldr	r3, [pc, #204]	; (8002eec <Line_Track_Task+0x5bc>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002ef0 <Line_Track_Task+0x5c0>
 8002e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	dd62      	ble.n	8002ef8 <Line_Track_Task+0x5c8>
			{
				ccr = (uint16_t)(-SERVO_M_STRAIGHT * PHI + SERVO_FRONT_CCR_MIDDLE);
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <Line_Track_Task+0x594>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002ef4 <Line_Track_Task+0x5c4>
 8002e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e40:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002edc <Line_Track_Task+0x5ac>
 8002e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4c:	ee17 3a90 	vmov	r3, s15
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002e56:	601a      	str	r2, [r3, #0]
				if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e60:	dd04      	ble.n	8002e6c <Line_Track_Task+0x53c>
				{
					ccr = CCR_FRONT_MAX;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002e64:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e008      	b.n	8002e7e <Line_Track_Task+0x54e>
				}
				else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002e74:	da03      	bge.n	8002e7e <Line_Track_Task+0x54e>
				{
					ccr = CCR_FRONT_MIN;
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002e78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e7c:	601a      	str	r2, [r3, #0]
				}
				TIM2->CCR1 = ccr; //első állít
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <Line_Track_Task+0x5a0>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;//hátsó fix
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <Line_Track_Task+0x5a4>)
 8002e8a:	f44f 7219 	mov.w	r2, #612	; 0x264
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e90:	e144      	b.n	800311c <Line_Track_Task+0x7ec>
 8002e92:	bf00      	nop
 8002e94:	f3af 8000 	nop.w
 8002e98:	a3f47e90 	.word	0xa3f47e90
 8002e9c:	3fe8fd1f 	.word	0x3fe8fd1f
 8002ea0:	c4830201 	.word	0xc4830201
 8002ea4:	3fe73a26 	.word	0x3fe73a26
 8002ea8:	200002a1 	.word	0x200002a1
 8002eac:	20000290 	.word	0x20000290
 8002eb0:	c2c80000 	.word	0xc2c80000
 8002eb4:	20000678 	.word	0x20000678
 8002eb8:	3d03126f 	.word	0x3d03126f
 8002ebc:	3b449ba6 	.word	0x3b449ba6
 8002ec0:	20000688 	.word	0x20000688
 8002ec4:	2000068c 	.word	0x2000068c
 8002ec8:	44af0000 	.word	0x44af0000
 8002ecc:	44190000 	.word	0x44190000
 8002ed0:	2000002c 	.word	0x2000002c
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40080000 	.word	0x40080000
 8002edc:	442c0000 	.word	0x442c0000
 8002ee0:	2000028e 	.word	0x2000028e
 8002ee4:	20000294 	.word	0x20000294
 8002ee8:	20000690 	.word	0x20000690
 8002eec:	20000660 	.word	0x20000660
 8002ef0:	44fa0000 	.word	0x44fa0000
 8002ef4:	c4610000 	.word	0xc4610000
			}
			else//kanyar
			{
				//első szervó
				ccr =(uint16_t)(-SERVO_M_CORNER * PHI + SERVO_FRONT_CCR_MIDDLE);
 8002ef8:	4b94      	ldr	r3, [pc, #592]	; (800314c <Line_Track_Task+0x81c>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003150 <Line_Track_Task+0x820>
 8002f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f06:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003154 <Line_Track_Task+0x824>
 8002f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f12:	ee17 3a90 	vmov	r3, s15
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <Line_Track_Task+0x828>)
 8002f1c:	601a      	str	r2, [r3, #0]
				if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002f1e:	4b8e      	ldr	r3, [pc, #568]	; (8003158 <Line_Track_Task+0x828>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002f26:	dd04      	ble.n	8002f32 <Line_Track_Task+0x602>
				{
					ccr = CCR_FRONT_MAX;
 8002f28:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <Line_Track_Task+0x828>)
 8002f2a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e008      	b.n	8002f44 <Line_Track_Task+0x614>
				}
				else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8002f32:	4b89      	ldr	r3, [pc, #548]	; (8003158 <Line_Track_Task+0x828>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002f3a:	da03      	bge.n	8002f44 <Line_Track_Task+0x614>
				{
					ccr = CCR_FRONT_MIN;
 8002f3c:	4b86      	ldr	r3, [pc, #536]	; (8003158 <Line_Track_Task+0x828>)
 8002f3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f42:	601a      	str	r2, [r3, #0]
				}
				TIM2->CCR1 = ccr;
 8002f44:	4b84      	ldr	r3, [pc, #528]	; (8003158 <Line_Track_Task+0x828>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34

				//Hátsó szervó
				PHI/= 3;
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	; (800314c <Line_Track_Task+0x81c>)
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <Line_Track_Task+0x81c>)
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
				ccr = (uint16_t)(-SERVO_M_CORNER * PHI + SERVO_REAR_CCR_MIDDLE);
 8002f62:	4b7a      	ldr	r3, [pc, #488]	; (800314c <Line_Track_Task+0x81c>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003150 <Line_Track_Task+0x820>
 8002f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f70:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800315c <Line_Track_Task+0x82c>
 8002f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f7c:	ee17 3a90 	vmov	r3, s15
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b74      	ldr	r3, [pc, #464]	; (8003158 <Line_Track_Task+0x828>)
 8002f86:	601a      	str	r2, [r3, #0]
				if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002f88:	4b73      	ldr	r3, [pc, #460]	; (8003158 <Line_Track_Task+0x828>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8002f90:	dd04      	ble.n	8002f9c <Line_Track_Task+0x66c>
				{
					ccr = CCR_REAR_MAX;
 8002f92:	4b71      	ldr	r3, [pc, #452]	; (8003158 <Line_Track_Task+0x828>)
 8002f94:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e008      	b.n	8002fae <Line_Track_Task+0x67e>
				}
				else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8002f9c:	4b6e      	ldr	r3, [pc, #440]	; (8003158 <Line_Track_Task+0x828>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002fa4:	da03      	bge.n	8002fae <Line_Track_Task+0x67e>
				{
					ccr = CCR_REAR_MIN;
 8002fa6:	4b6c      	ldr	r3, [pc, #432]	; (8003158 <Line_Track_Task+0x828>)
 8002fa8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fac:	601a      	str	r2, [r3, #0]
				}
				TIM1->CCR4=ccr;
 8002fae:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <Line_Track_Task+0x828>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b6b      	ldr	r3, [pc, #428]	; (8003160 <Line_Track_Task+0x830>)
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb6:	e0b1      	b.n	800311c <Line_Track_Task+0x7ec>
			}

		}
		else if(fast_mode_state==SC_MODE)
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <Line_Track_Task+0x834>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d15f      	bne.n	8003080 <Line_Track_Task+0x750>
		{
			//első szervó
			ccr = (uint16_t)(-SERVO_M_SC * PHI + SERVO_FRONT_CCR_MIDDLE);
 8002fc0:	4b62      	ldr	r3, [pc, #392]	; (800314c <Line_Track_Task+0x81c>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003168 <Line_Track_Task+0x838>
 8002fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fce:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003154 <Line_Track_Task+0x824>
 8002fd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fda:	ee17 3a90 	vmov	r3, s15
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <Line_Track_Task+0x828>)
 8002fe4:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <Line_Track_Task+0x828>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002fee:	dd04      	ble.n	8002ffa <Line_Track_Task+0x6ca>
			{
				ccr = CCR_FRONT_MAX;
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <Line_Track_Task+0x828>)
 8002ff2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e008      	b.n	800300c <Line_Track_Task+0x6dc>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8002ffa:	4b57      	ldr	r3, [pc, #348]	; (8003158 <Line_Track_Task+0x828>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003002:	da03      	bge.n	800300c <Line_Track_Task+0x6dc>
			{
				ccr = CCR_FRONT_MIN;
 8003004:	4b54      	ldr	r3, [pc, #336]	; (8003158 <Line_Track_Task+0x828>)
 8003006:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800300a:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 800300c:	4b52      	ldr	r3, [pc, #328]	; (8003158 <Line_Track_Task+0x828>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003014:	635a      	str	r2, [r3, #52]	; 0x34
			//Hátsó szervó
			PHI/= 3;
 8003016:	4b4d      	ldr	r3, [pc, #308]	; (800314c <Line_Track_Task+0x81c>)
 8003018:	ed93 7a00 	vldr	s14, [r3]
 800301c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003024:	4b49      	ldr	r3, [pc, #292]	; (800314c <Line_Track_Task+0x81c>)
 8003026:	edc3 7a00 	vstr	s15, [r3]
			ccr = (uint16_t)(-SERVO_M_SC * PHI + SERVO_REAR_CCR_MIDDLE);
 800302a:	4b48      	ldr	r3, [pc, #288]	; (800314c <Line_Track_Task+0x81c>)
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003168 <Line_Track_Task+0x838>
 8003034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003038:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800315c <Line_Track_Task+0x82c>
 800303c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003044:	ee17 3a90 	vmov	r3, s15
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	4b42      	ldr	r3, [pc, #264]	; (8003158 <Line_Track_Task+0x828>)
 800304e:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003050:	4b41      	ldr	r3, [pc, #260]	; (8003158 <Line_Track_Task+0x828>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 8003058:	dd04      	ble.n	8003064 <Line_Track_Task+0x734>
			{
				ccr = CCR_REAR_MAX;
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <Line_Track_Task+0x828>)
 800305c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e008      	b.n	8003076 <Line_Track_Task+0x746>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <Line_Track_Task+0x828>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800306c:	da03      	bge.n	8003076 <Line_Track_Task+0x746>
			{
				ccr = CCR_REAR_MIN;
 800306e:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <Line_Track_Task+0x828>)
 8003070:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003074:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4=ccr;
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <Line_Track_Task+0x828>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b39      	ldr	r3, [pc, #228]	; (8003160 <Line_Track_Task+0x830>)
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
 800307e:	e04d      	b.n	800311c <Line_Track_Task+0x7ec>
		}
		else if(fast_mode_state==OVERTAKE_MODE)
 8003080:	4b38      	ldr	r3, [pc, #224]	; (8003164 <Line_Track_Task+0x834>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d149      	bne.n	800311c <Line_Track_Task+0x7ec>
		{
			static uint8_t overtake_state=0;
			static uint32_t t_stamp_overtake=0;
			if(overtake_state==0)
 8003088:	4b38      	ldr	r3, [pc, #224]	; (800316c <Line_Track_Task+0x83c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d115      	bne.n	80030bc <Line_Track_Task+0x78c>
			{
				v_ref=1000;
 8003090:	4b37      	ldr	r3, [pc, #220]	; (8003170 <Line_Track_Task+0x840>)
 8003092:	4a38      	ldr	r2, [pc, #224]	; (8003174 <Line_Track_Task+0x844>)
 8003094:	601a      	str	r2, [r3, #0]
				t_stamp_overtake=tick;
 8003096:	4a38      	ldr	r2, [pc, #224]	; (8003178 <Line_Track_Task+0x848>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6013      	str	r3, [r2, #0]
				leaveLineEnabled=1;
 800309c:	4b37      	ldr	r3, [pc, #220]	; (800317c <Line_Track_Task+0x84c>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
				TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE+130;
 80030a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a6:	f240 3232 	movw	r2, #818	; 0x332
 80030aa:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR4=SERVO_REAR_CCR_MIDDLE-130;
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <Line_Track_Task+0x830>)
 80030ae:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
				overtake_state=1;
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <Line_Track_Task+0x83c>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e02f      	b.n	800311c <Line_Track_Task+0x7ec>
			}
			else if(overtake_state==1 && (tick-t_stamp_overtake)>2500)
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <Line_Track_Task+0x83c>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d117      	bne.n	80030f4 <Line_Track_Task+0x7c4>
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <Line_Track_Task+0x848>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d90f      	bls.n	80030f4 <Line_Track_Task+0x7c4>
			{
				v_ref=3000;
 80030d4:	4b26      	ldr	r3, [pc, #152]	; (8003170 <Line_Track_Task+0x840>)
 80030d6:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <Line_Track_Task+0x850>)
 80030d8:	601a      	str	r2, [r3, #0]
				TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE-20;
 80030da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030de:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR4=SERVO_REAR_CCR_MIDDLE+20;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <Line_Track_Task+0x830>)
 80030e6:	f44f 721e 	mov.w	r2, #632	; 0x278
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
				overtake_state=2;
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <Line_Track_Task+0x83c>)
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e013      	b.n	800311c <Line_Track_Task+0x7ec>
			}
			else if(overtake_state==2 && LINE_CNT>0)
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <Line_Track_Task+0x83c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d10f      	bne.n	800311c <Line_Track_Task+0x7ec>
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <Line_Track_Task+0x854>)
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <Line_Track_Task+0x7ec>
			{
				v_ref=1200;
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <Line_Track_Task+0x840>)
 8003106:	4a20      	ldr	r2, [pc, #128]	; (8003188 <Line_Track_Task+0x858>)
 8003108:	601a      	str	r2, [r3, #0]
				overtake_state=0;
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <Line_Track_Task+0x83c>)
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
				fast_mode_state=FREERUN_MODE;
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <Line_Track_Task+0x834>)
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
				leaveLineEnabled=0;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <Line_Track_Task+0x84c>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
			}

		}
	}

	tick_prev=tick;
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <Line_Track_Task+0x85c>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e010      	b.n	8003146 <Line_Track_Task+0x816>
	if(line_track_task_tick>tick) return;
 8003124:	bf00      	nop
 8003126:	e00e      	b.n	8003146 <Line_Track_Task+0x816>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 8003128:	bf00      	nop
 800312a:	e00c      	b.n	8003146 <Line_Track_Task+0x816>
			if(tmp)return;
 800312c:	bf00      	nop
 800312e:	e00a      	b.n	8003146 <Line_Track_Task+0x816>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003130:	bf00      	nop
 8003132:	e008      	b.n	8003146 <Line_Track_Task+0x816>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 8003134:	bf00      	nop
 8003136:	e006      	b.n	8003146 <Line_Track_Task+0x816>
			if(tmp)return;
 8003138:	bf00      	nop
 800313a:	e004      	b.n	8003146 <Line_Track_Task+0x816>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 800313c:	bf00      	nop
 800313e:	e002      	b.n	8003146 <Line_Track_Task+0x816>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8003140:	bf00      	nop
 8003142:	e000      	b.n	8003146 <Line_Track_Task+0x816>
		if((LINE_CNT<1 || LINE_CNT > 3) && !leaveLineEnabled) return;//ha nincs vonal a kocsi alatt
 8003144:	bf00      	nop
}
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	2000068c 	.word	0x2000068c
 8003150:	c4c1c000 	.word	0xc4c1c000
 8003154:	442c0000 	.word	0x442c0000
 8003158:	2000002c 	.word	0x2000002c
 800315c:	44190000 	.word	0x44190000
 8003160:	40010000 	.word	0x40010000
 8003164:	20000690 	.word	0x20000690
 8003168:	c4a28000 	.word	0xc4a28000
 800316c:	20000691 	.word	0x20000691
 8003170:	20000290 	.word	0x20000290
 8003174:	447a0000 	.word	0x447a0000
 8003178:	20000694 	.word	0x20000694
 800317c:	20000294 	.word	0x20000294
 8003180:	453b8000 	.word	0x453b8000
 8003184:	20000678 	.word	0x20000678
 8003188:	44960000 	.word	0x44960000
 800318c:	20000698 	.word	0x20000698

08003190 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg,uint8_t* state_pointer, uint32_t t)
{
 8003190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003194:	b088      	sub	sp, #32
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
	static float x_elso_prev=0;
	static float x_hatso;
	static float delta;
	static float gamma;

	uint8_t state = *state_pointer;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	77fb      	strb	r3, [r7, #31]

	if(state==OVERTAKE_MODE)return 0;
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d102      	bne.n	80031b0 <Fast_Mode+0x20>
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e315      	b.n	80037dc <Fast_Mode+0x64c>
/**/
	//BOOST detect
	if(LINE_CNT != lineCnt_prev && (LINE_CNT==1 || LINE_CNT==3)) //ha változik az alattunk lévő vonalak száma
 80031b0:	4b95      	ldr	r3, [pc, #596]	; (8003408 <Fast_Mode+0x278>)
 80031b2:	785a      	ldrb	r2, [r3, #1]
 80031b4:	4b95      	ldr	r3, [pc, #596]	; (800340c <Fast_Mode+0x27c>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	f000 80ae 	beq.w	800331a <Fast_Mode+0x18a>
 80031be:	4b92      	ldr	r3, [pc, #584]	; (8003408 <Fast_Mode+0x278>)
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d004      	beq.n	80031d0 <Fast_Mode+0x40>
 80031c6:	4b90      	ldr	r3, [pc, #576]	; (8003408 <Fast_Mode+0x278>)
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	f040 80a5 	bne.w	800331a <Fast_Mode+0x18a>
	{
		ds[index]=fabs(v)*(t-t_stamp_boost)/1000;
 80031d0:	4b8f      	ldr	r3, [pc, #572]	; (8003410 <Fast_Mode+0x280>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	eef0 7ae7 	vabs.f32	s15, s15
 80031da:	ee17 0a90 	vmov	r0, s15
 80031de:	f7fd f9d3 	bl	8000588 <__aeabi_f2d>
 80031e2:	4604      	mov	r4, r0
 80031e4:	460d      	mov	r5, r1
 80031e6:	4b8b      	ldr	r3, [pc, #556]	; (8003414 <Fast_Mode+0x284>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f9a8 	bl	8000544 <__aeabi_ui2d>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fd fa1c 	bl	8000638 <__aeabi_dmul>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	4b82      	ldr	r3, [pc, #520]	; (8003418 <Fast_Mode+0x288>)
 800320e:	f7fd fb3d 	bl	800088c <__aeabi_ddiv>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4981      	ldr	r1, [pc, #516]	; (800341c <Fast_Mode+0x28c>)
 8003218:	7809      	ldrb	r1, [r1, #0]
 800321a:	460c      	mov	r4, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	f7fd fce2 	bl	8000be8 <__aeabi_d2f>
 8003224:	4602      	mov	r2, r0
 8003226:	497e      	ldr	r1, [pc, #504]	; (8003420 <Fast_Mode+0x290>)
 8003228:	00a3      	lsls	r3, r4, #2
 800322a:	440b      	add	r3, r1
 800322c:	601a      	str	r2, [r3, #0]
		float s_boost = ds[0]+ds[1]+ds[2]+ds[3]+ds[4]+ds[5]+ds[6]+ds[7];
 800322e:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <Fast_Mode+0x290>)
 8003230:	ed93 7a00 	vldr	s14, [r3]
 8003234:	4b7a      	ldr	r3, [pc, #488]	; (8003420 <Fast_Mode+0x290>)
 8003236:	edd3 7a01 	vldr	s15, [r3, #4]
 800323a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800323e:	4b78      	ldr	r3, [pc, #480]	; (8003420 <Fast_Mode+0x290>)
 8003240:	edd3 7a02 	vldr	s15, [r3, #8]
 8003244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003248:	4b75      	ldr	r3, [pc, #468]	; (8003420 <Fast_Mode+0x290>)
 800324a:	edd3 7a03 	vldr	s15, [r3, #12]
 800324e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003252:	4b73      	ldr	r3, [pc, #460]	; (8003420 <Fast_Mode+0x290>)
 8003254:	edd3 7a04 	vldr	s15, [r3, #16]
 8003258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800325c:	4b70      	ldr	r3, [pc, #448]	; (8003420 <Fast_Mode+0x290>)
 800325e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003266:	4b6e      	ldr	r3, [pc, #440]	; (8003420 <Fast_Mode+0x290>)
 8003268:	edd3 7a06 	vldr	s15, [r3, #24]
 800326c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003270:	4b6b      	ldr	r3, [pc, #428]	; (8003420 <Fast_Mode+0x290>)
 8003272:	edd3 7a07 	vldr	s15, [r3, #28]
 8003276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327a:	edc7 7a06 	vstr	s15, [r7, #24]
		if(s_boost>300.0 && s_boost<800.0 && boostOrBrake==1) // ha 70 és 80 cm közt bekövetkezik 8 vonalszámváltás
 800327e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003282:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003424 <Fast_Mode+0x294>
 8003286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328e:	dd34      	ble.n	80032fa <Fast_Mode+0x16a>
 8003290:	edd7 7a06 	vldr	s15, [r7, #24]
 8003294:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003428 <Fast_Mode+0x298>
 8003298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	d52b      	bpl.n	80032fa <Fast_Mode+0x16a>
 80032a2:	4b62      	ldr	r3, [pc, #392]	; (800342c <Fast_Mode+0x29c>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d127      	bne.n	80032fa <Fast_Mode+0x16a>
		{
			boostOrBrake=2;
 80032aa:	4b60      	ldr	r3, [pc, #384]	; (800342c <Fast_Mode+0x29c>)
 80032ac:	2202      	movs	r2, #2
 80032ae:	701a      	strb	r2, [r3, #0]
			boostCnt++;
 80032b0:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <Fast_Mode+0x2a0>)
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <Fast_Mode+0x2a0>)
 80032ba:	801a      	strh	r2, [r3, #0]
			if(boostCnt>1 && state==SC_MODE)
 80032bc:	4b5c      	ldr	r3, [pc, #368]	; (8003430 <Fast_Mode+0x2a0>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d908      	bls.n	80032d6 <Fast_Mode+0x146>
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <Fast_Mode+0x146>
			{
				*state_pointer=OVERTAKE_MODE;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
				return 0;
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e282      	b.n	80037dc <Fast_Mode+0x64c>
			}
			if(state==FREERUN_MODE)
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d109      	bne.n	80032f0 <Fast_Mode+0x160>
			{
				//v_ref = 5000;
				v_ref=2500;
 80032dc:	4b55      	ldr	r3, [pc, #340]	; (8003434 <Fast_Mode+0x2a4>)
 80032de:	4a56      	ldr	r2, [pc, #344]	; (8003438 <Fast_Mode+0x2a8>)
 80032e0:	601a      	str	r2, [r3, #0]
				LED_B(1);
 80032e2:	2200      	movs	r2, #0
 80032e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032e8:	4854      	ldr	r0, [pc, #336]	; (800343c <Fast_Mode+0x2ac>)
 80032ea:	f004 f99d 	bl	8007628 <HAL_GPIO_WritePin>
 80032ee:	e004      	b.n	80032fa <Fast_Mode+0x16a>
			}
			else LED_B_TOGGLE;
 80032f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032f4:	4851      	ldr	r0, [pc, #324]	; (800343c <Fast_Mode+0x2ac>)
 80032f6:	f004 f9b0 	bl	800765a <HAL_GPIO_TogglePin>
		}

		index++;
 80032fa:	4b48      	ldr	r3, [pc, #288]	; (800341c <Fast_Mode+0x28c>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b46      	ldr	r3, [pc, #280]	; (800341c <Fast_Mode+0x28c>)
 8003304:	701a      	strb	r2, [r3, #0]
		if(index>7) index=0;
 8003306:	4b45      	ldr	r3, [pc, #276]	; (800341c <Fast_Mode+0x28c>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b07      	cmp	r3, #7
 800330c:	d902      	bls.n	8003314 <Fast_Mode+0x184>
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <Fast_Mode+0x28c>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
		t_stamp_boost = t;
 8003314:	4a3f      	ldr	r2, [pc, #252]	; (8003414 <Fast_Mode+0x284>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
	}
	lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <Fast_Mode+0x278>)
 800331c:	785a      	ldrb	r2, [r3, #1]
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <Fast_Mode+0x27c>)
 8003320:	701a      	strb	r2, [r3, #0]

	//BRAKING detect -> erre csak gyors üzemmódban van szükség
	if(LINE_CNT > 1) //ha 3 vonalat érzékelünk
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <Fast_Mode+0x278>)
 8003324:	785b      	ldrb	r3, [r3, #1]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d950      	bls.n	80033cc <Fast_Mode+0x23c>
	{
		s_brake += fabs(v)*(t-t_prev)/1000;
 800332a:	4b45      	ldr	r3, [pc, #276]	; (8003440 <Fast_Mode+0x2b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f92a 	bl	8000588 <__aeabi_f2d>
 8003334:	4604      	mov	r4, r0
 8003336:	460d      	mov	r5, r1
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <Fast_Mode+0x280>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	eef0 7ae7 	vabs.f32	s15, s15
 8003342:	ee17 0a90 	vmov	r0, s15
 8003346:	f7fd f91f 	bl	8000588 <__aeabi_f2d>
 800334a:	4680      	mov	r8, r0
 800334c:	4689      	mov	r9, r1
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <Fast_Mode+0x2b4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f8f4 	bl	8000544 <__aeabi_ui2d>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4640      	mov	r0, r8
 8003362:	4649      	mov	r1, r9
 8003364:	f7fd f968 	bl	8000638 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <Fast_Mode+0x288>)
 8003376:	f7fd fa89 	bl	800088c <__aeabi_ddiv>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4620      	mov	r0, r4
 8003380:	4629      	mov	r1, r5
 8003382:	f7fc ffa3 	bl	80002cc <__adddf3>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f7fd fc2b 	bl	8000be8 <__aeabi_d2f>
 8003392:	4603      	mov	r3, r0
 8003394:	4a2a      	ldr	r2, [pc, #168]	; (8003440 <Fast_Mode+0x2b0>)
 8003396:	6013      	str	r3, [r2, #0]
		if(s_brake>400) //ha már legalább 30cm óta folyamatosan 3 vonal van alattunk
 8003398:	4b29      	ldr	r3, [pc, #164]	; (8003440 <Fast_Mode+0x2b0>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003450 <Fast_Mode+0x2c0>
 80033a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033aa:	dd13      	ble.n	80033d4 <Fast_Mode+0x244>
		{
			boostOrBrake=1;
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <Fast_Mode+0x29c>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
			if(state == FREERUN_MODE)
 80033b2:	7ffb      	ldrb	r3, [r7, #31]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d10d      	bne.n	80033d4 <Fast_Mode+0x244>
			{
				v_ref = 1200;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <Fast_Mode+0x2a4>)
 80033ba:	4a23      	ldr	r2, [pc, #140]	; (8003448 <Fast_Mode+0x2b8>)
 80033bc:	601a      	str	r2, [r3, #0]
				LED_B(0);
 80033be:	2201      	movs	r2, #1
 80033c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033c4:	481d      	ldr	r0, [pc, #116]	; (800343c <Fast_Mode+0x2ac>)
 80033c6:	f004 f92f 	bl	8007628 <HAL_GPIO_WritePin>
 80033ca:	e003      	b.n	80033d4 <Fast_Mode+0x244>
			}
		}
	}
	else //ha 1 vonalat érzékelünk
	{
		s_brake=0;
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <Fast_Mode+0x2b0>)
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
	}
	t_prev=t;
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <Fast_Mode+0x2b4>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6013      	str	r3, [r2, #0]

	/*****SC üzemmód******/
	if(state==SC_MODE)
 80033da:	7ffb      	ldrb	r3, [r7, #31]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d147      	bne.n	8003470 <Fast_Mode+0x2e0>
	{
		uint32_t dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <Fast_Mode+0x278>)
 80033e2:	795b      	ldrb	r3, [r3, #5]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <Fast_Mode+0x278>)
 80033e8:	7992      	ldrb	r2, [r2, #6]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f4:	d803      	bhi.n	80033fe <Fast_Mode+0x26e>
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <Fast_Mode+0x278>)
 80033f8:	791b      	ldrb	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02a      	beq.n	8003454 <Fast_Mode+0x2c4>
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <Fast_Mode+0x2a4>)
 8003400:	4a12      	ldr	r2, [pc, #72]	; (800344c <Fast_Mode+0x2bc>)
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e034      	b.n	8003470 <Fast_Mode+0x2e0>
 8003406:	bf00      	nop
 8003408:	20000678 	.word	0x20000678
 800340c:	20000030 	.word	0x20000030
 8003410:	20000660 	.word	0x20000660
 8003414:	2000069c 	.word	0x2000069c
 8003418:	408f4000 	.word	0x408f4000
 800341c:	200006a0 	.word	0x200006a0
 8003420:	20000034 	.word	0x20000034
 8003424:	43960000 	.word	0x43960000
 8003428:	44480000 	.word	0x44480000
 800342c:	20000054 	.word	0x20000054
 8003430:	20000684 	.word	0x20000684
 8003434:	20000290 	.word	0x20000290
 8003438:	451c4000 	.word	0x451c4000
 800343c:	40020400 	.word	0x40020400
 8003440:	200006a4 	.word	0x200006a4
 8003444:	200006a8 	.word	0x200006a8
 8003448:	44960000 	.word	0x44960000
 800344c:	44bb8000 	.word	0x44bb8000
 8003450:	43c80000 	.word	0x43c80000
		else v_ref = 2*(float)dist-400;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003462:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003450 <Fast_Mode+0x2c0>
 8003466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800346a:	4bad      	ldr	r3, [pc, #692]	; (8003720 <Fast_Mode+0x590>)
 800346c:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/248.0-102;//248
 8003470:	4bac      	ldr	r3, [pc, #688]	; (8003724 <Fast_Mode+0x594>)
 8003472:	789b      	ldrb	r3, [r3, #2]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8003728 <Fast_Mode+0x598>
 8003480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003484:	ee17 0a90 	vmov	r0, s15
 8003488:	f7fd f87e 	bl	8000588 <__aeabi_f2d>
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	4ba6      	ldr	r3, [pc, #664]	; (800372c <Fast_Mode+0x59c>)
 8003492:	f7fd f9fb 	bl	800088c <__aeabi_ddiv>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	4ba3      	ldr	r3, [pc, #652]	; (8003730 <Fast_Mode+0x5a0>)
 80034a4:	f7fc ff10 	bl	80002c8 <__aeabi_dsub>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7fd fb9a 	bl	8000be8 <__aeabi_d2f>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4a9f      	ldr	r2, [pc, #636]	; (8003734 <Fast_Mode+0x5a4>)
 80034b8:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/248.0-102; //244
 80034ba:	4b9a      	ldr	r3, [pc, #616]	; (8003724 <Fast_Mode+0x594>)
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c6:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8003728 <Fast_Mode+0x598>
 80034ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ce:	ee17 0a90 	vmov	r0, s15
 80034d2:	f7fd f859 	bl	8000588 <__aeabi_f2d>
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	4b94      	ldr	r3, [pc, #592]	; (800372c <Fast_Mode+0x59c>)
 80034dc:	f7fd f9d6 	bl	800088c <__aeabi_ddiv>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	4b90      	ldr	r3, [pc, #576]	; (8003730 <Fast_Mode+0x5a0>)
 80034ee:	f7fc feeb 	bl	80002c8 <__aeabi_dsub>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f7fd fb75 	bl	8000be8 <__aeabi_d2f>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a8d      	ldr	r2, [pc, #564]	; (8003738 <Fast_Mode+0x5a8>)
 8003502:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 8003504:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <Fast_Mode+0x5a4>)
 8003506:	ed93 7a00 	vldr	s14, [r3]
 800350a:	4b8b      	ldr	r3, [pc, #556]	; (8003738 <Fast_Mode+0x5a8>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003514:	ee17 0a90 	vmov	r0, s15
 8003518:	f7fd f836 	bl	8000588 <__aeabi_f2d>
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	4b86      	ldr	r3, [pc, #536]	; (800373c <Fast_Mode+0x5ac>)
 8003522:	f7fd f9b3 	bl	800088c <__aeabi_ddiv>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	ec43 2b17 	vmov	d7, r2, r3
 800352e:	eeb0 0a47 	vmov.f32	s0, s14
 8003532:	eef0 0a67 	vmov.f32	s1, s15
 8003536:	f00a fdab 	bl	800e090 <atan>
 800353a:	ec53 2b10 	vmov	r2, r3, d0
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb51 	bl	8000be8 <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	4a7d      	ldr	r2, [pc, #500]	; (8003740 <Fast_Mode+0x5b0>)
 800354a:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(state==SC_MODE)
 800354c:	7ffb      	ldrb	r3, [r7, #31]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <Fast_Mode+0x3d8>
	{
		k_p = -0.004;
 8003552:	4b7c      	ldr	r3, [pc, #496]	; (8003744 <Fast_Mode+0x5b4>)
 8003554:	4a7c      	ldr	r2, [pc, #496]	; (8003748 <Fast_Mode+0x5b8>)
 8003556:	601a      	str	r2, [r3, #0]
		kD = -0.004;
 8003558:	4b7c      	ldr	r3, [pc, #496]	; (800374c <Fast_Mode+0x5bc>)
 800355a:	4a7b      	ldr	r2, [pc, #492]	; (8003748 <Fast_Mode+0x5b8>)
 800355c:	601a      	str	r2, [r3, #0]
		k_delta = 0;
 800355e:	4b7c      	ldr	r3, [pc, #496]	; (8003750 <Fast_Mode+0x5c0>)
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e10a      	b.n	800377e <Fast_Mode+0x5ee>
	}

	else //FREERUN modes
	{
		if(v>150 || v<-150)
 8003568:	4b7a      	ldr	r3, [pc, #488]	; (8003754 <Fast_Mode+0x5c4>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003758 <Fast_Mode+0x5c8>
 8003572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357a:	dc0a      	bgt.n	8003592 <Fast_Mode+0x402>
 800357c:	4b75      	ldr	r3, [pc, #468]	; (8003754 <Fast_Mode+0x5c4>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800375c <Fast_Mode+0x5cc>
 8003586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	f140 80ed 	bpl.w	800376c <Fast_Mode+0x5dc>
		{
			if(v<2000) //kanyar
 8003592:	4b70      	ldr	r3, [pc, #448]	; (8003754 <Fast_Mode+0x5c4>)
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003760 <Fast_Mode+0x5d0>
 800359c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	d557      	bpl.n	8003656 <Fast_Mode+0x4c6>
			{
				k_p = -L/(v*v)*S1MULTS2_SLOW;
 80035a6:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <Fast_Mode+0x5c4>)
 80035a8:	ed93 7a00 	vldr	s14, [r3]
 80035ac:	4b69      	ldr	r3, [pc, #420]	; (8003754 <Fast_Mode+0x5c4>)
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	ee17 0a90 	vmov	r0, s15
 80035ba:	f7fc ffe5 	bl	8000588 <__aeabi_f2d>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	a151      	add	r1, pc, #324	; (adr r1, 8003708 <Fast_Mode+0x578>)
 80035c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035c8:	f7fd f960 	bl	800088c <__aeabi_ddiv>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	a34e      	add	r3, pc, #312	; (adr r3, 8003710 <Fast_Mode+0x580>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f7fd f82d 	bl	8000638 <__aeabi_dmul>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f7fd faff 	bl	8000be8 <__aeabi_d2f>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a55      	ldr	r2, [pc, #340]	; (8003744 <Fast_Mode+0x5b4>)
 80035ee:	6013      	str	r3, [r2, #0]
				k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 80035f0:	4b58      	ldr	r3, [pc, #352]	; (8003754 <Fast_Mode+0x5c4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffc7 	bl	8000588 <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	a146      	add	r1, pc, #280	; (adr r1, 8003718 <Fast_Mode+0x588>)
 8003600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003604:	f7fd f942 	bl	800088c <__aeabi_ddiv>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4614      	mov	r4, r2
 800360e:	461d      	mov	r5, r3
 8003610:	4b50      	ldr	r3, [pc, #320]	; (8003754 <Fast_Mode+0x5c4>)
 8003612:	ed93 7a00 	vldr	s14, [r3]
 8003616:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <Fast_Mode+0x5b4>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8003624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003628:	ee17 0a90 	vmov	r0, s15
 800362c:	f7fc ffac 	bl	8000588 <__aeabi_f2d>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4620      	mov	r0, r4
 8003636:	4629      	mov	r1, r5
 8003638:	f7fc fffe 	bl	8000638 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f7fd fad0 	bl	8000be8 <__aeabi_d2f>
 8003648:	4603      	mov	r3, r0
 800364a:	4a41      	ldr	r2, [pc, #260]	; (8003750 <Fast_Mode+0x5c0>)
 800364c:	6013      	str	r3, [r2, #0]
				kD=-0.06;
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <Fast_Mode+0x5bc>)
 8003650:	4a44      	ldr	r2, [pc, #272]	; (8003764 <Fast_Mode+0x5d4>)
 8003652:	601a      	str	r2, [r3, #0]
			if(v<2000) //kanyar
 8003654:	e093      	b.n	800377e <Fast_Mode+0x5ee>
				//kD=0;
			}
			else //egyenes
			{
				k_p = -L/(v*v)*S1MULTS2_SLOW;
 8003656:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <Fast_Mode+0x5c4>)
 8003658:	ed93 7a00 	vldr	s14, [r3]
 800365c:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <Fast_Mode+0x5c4>)
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	ee17 0a90 	vmov	r0, s15
 800366a:	f7fc ff8d 	bl	8000588 <__aeabi_f2d>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	a125      	add	r1, pc, #148	; (adr r1, 8003708 <Fast_Mode+0x578>)
 8003674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003678:	f7fd f908 	bl	800088c <__aeabi_ddiv>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	a322      	add	r3, pc, #136	; (adr r3, 8003710 <Fast_Mode+0x580>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f7fc ffd5 	bl	8000638 <__aeabi_dmul>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f7fd faa7 	bl	8000be8 <__aeabi_d2f>
 800369a:	4603      	mov	r3, r0
 800369c:	4a29      	ldr	r2, [pc, #164]	; (8003744 <Fast_Mode+0x5b4>)
 800369e:	6013      	str	r3, [r2, #0]
				k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <Fast_Mode+0x5c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff6f 	bl	8000588 <__aeabi_f2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	a11a      	add	r1, pc, #104	; (adr r1, 8003718 <Fast_Mode+0x588>)
 80036b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036b4:	f7fd f8ea 	bl	800088c <__aeabi_ddiv>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4614      	mov	r4, r2
 80036be:	461d      	mov	r5, r3
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <Fast_Mode+0x5c4>)
 80036c2:	ed93 7a00 	vldr	s14, [r3]
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <Fast_Mode+0x5b4>)
 80036c8:	edd3 7a00 	vldr	s15, [r3]
 80036cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d0:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80036d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d8:	ee17 0a90 	vmov	r0, s15
 80036dc:	f7fc ff54 	bl	8000588 <__aeabi_f2d>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4620      	mov	r0, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	f7fc ffa6 	bl	8000638 <__aeabi_dmul>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7fd fa78 	bl	8000be8 <__aeabi_d2f>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <Fast_Mode+0x5c0>)
 80036fc:	6013      	str	r3, [r2, #0]
				kD=-0.05;
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <Fast_Mode+0x5bc>)
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <Fast_Mode+0x5d8>)
 8003702:	601a      	str	r2, [r3, #0]
			if(v<2000) //kanyar
 8003704:	e03b      	b.n	800377e <Fast_Mode+0x5ee>
 8003706:	bf00      	nop
 8003708:	00000000 	.word	0x00000000
 800370c:	c0716000 	.word	0xc0716000
 8003710:	fd21ff2e 	.word	0xfd21ff2e
 8003714:	402275f6 	.word	0x402275f6
 8003718:	00000000 	.word	0x00000000
 800371c:	40716000 	.word	0x40716000
 8003720:	20000290 	.word	0x20000290
 8003724:	20000678 	.word	0x20000678
 8003728:	434c0000 	.word	0x434c0000
 800372c:	406f0000 	.word	0x406f0000
 8003730:	40598000 	.word	0x40598000
 8003734:	200006ac 	.word	0x200006ac
 8003738:	200006b0 	.word	0x200006b0
 800373c:	407c4000 	.word	0x407c4000
 8003740:	200006b4 	.word	0x200006b4
 8003744:	20000058 	.word	0x20000058
 8003748:	bb83126f 	.word	0xbb83126f
 800374c:	2000005c 	.word	0x2000005c
 8003750:	20000060 	.word	0x20000060
 8003754:	20000660 	.word	0x20000660
 8003758:	43160000 	.word	0x43160000
 800375c:	c3160000 	.word	0xc3160000
 8003760:	44fa0000 	.word	0x44fa0000
 8003764:	bd75c28f 	.word	0xbd75c28f
 8003768:	bd4ccccd 	.word	0xbd4ccccd
			}
		}
		else
		{
			k_p=K_P_200;
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <Fast_Mode+0x65c>)
 800376e:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <Fast_Mode+0x660>)
 8003770:	601a      	str	r2, [r3, #0]
			k_delta=K_DELTA_200;
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <Fast_Mode+0x664>)
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <Fast_Mode+0x668>)
 8003776:	601a      	str	r2, [r3, #0]
			kD=-0.06;
 8003778:	4b20      	ldr	r3, [pc, #128]	; (80037fc <Fast_Mode+0x66c>)
 800377a:	4a21      	ldr	r2, [pc, #132]	; (8003800 <Fast_Mode+0x670>)
 800377c:	601a      	str	r2, [r3, #0]
		}
	}
	gamma = -k_p * x_elso -k_delta * delta - kD * (x_elso-x_elso_prev);
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <Fast_Mode+0x65c>)
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	eeb1 7a67 	vneg.f32	s14, s15
 8003788:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <Fast_Mode+0x674>)
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <Fast_Mode+0x664>)
 8003794:	edd3 6a00 	vldr	s13, [r3]
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <Fast_Mode+0x678>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <Fast_Mode+0x674>)
 80037a8:	edd3 6a00 	vldr	s13, [r3]
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <Fast_Mode+0x67c>)
 80037ae:	edd3 7a00 	vldr	s15, [r3]
 80037b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <Fast_Mode+0x66c>)
 80037b8:	edd3 7a00 	vldr	s15, [r3]
 80037bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <Fast_Mode+0x680>)
 80037c6:	edc3 7a00 	vstr	s15, [r3]
	x_elso_prev = x_elso;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <Fast_Mode+0x674>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <Fast_Mode+0x67c>)
 80037d0:	6013      	str	r3, [r2, #0]

	*state_pointer=state;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	7ffa      	ldrb	r2, [r7, #31]
 80037d6:	701a      	strb	r2, [r3, #0]
	return gamma;
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <Fast_Mode+0x680>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eeb0 0a67 	vmov.f32	s0, s15
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037ec:	20000058 	.word	0x20000058
 80037f0:	ba30dc42 	.word	0xba30dc42
 80037f4:	20000060 	.word	0x20000060
 80037f8:	bf21eadf 	.word	0xbf21eadf
 80037fc:	2000005c 	.word	0x2000005c
 8003800:	bd75c28f 	.word	0xbd75c28f
 8003804:	200006ac 	.word	0x200006ac
 8003808:	200006b4 	.word	0x200006b4
 800380c:	200006b8 	.word	0x200006b8
 8003810:	200006bc 	.word	0x200006bc

08003814 <Skill_Mode>:

float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003820:	edc7 0a01 	vstr	s1, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	int byte=0;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
	static int byte_prev=0;
	int delta_byte;
	float p=0;
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 8003830:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <Skill_Mode+0x25c>)
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d803      	bhi.n	8003840 <Skill_Mode+0x2c>
 8003838:	4b8e      	ldr	r3, [pc, #568]	; (8003a74 <Skill_Mode+0x260>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d022      	beq.n	8003886 <Skill_Mode+0x72>
	{
		byte=0;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e00a      	b.n	8003860 <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	4a88      	ldr	r2, [pc, #544]	; (8003a70 <Skill_Mode+0x25c>)
 8003850:	5cd3      	ldrb	r3, [r2, r3]
 8003852:	461a      	mov	r2, r3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	3301      	adds	r3, #1
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	4b83      	ldr	r3, [pc, #524]	; (8003a70 <Skill_Mode+0x25c>)
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	461a      	mov	r2, r3
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4293      	cmp	r3, r2
 800386a:	dbee      	blt.n	800384a <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 800386c:	4b80      	ldr	r3, [pc, #512]	; (8003a70 <Skill_Mode+0x25c>)
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8112 	beq.w	8003a9a <Skill_Mode+0x286>
 8003876:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <Skill_Mode+0x25c>)
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	461a      	mov	r2, r3
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	e109      	b.n	8003a9a <Skill_Mode+0x286>
	}
	else if((path==LEFT && orientation==FORWARD) || (path==RIGHT && orientation==REVERSE))
 8003886:	4b7c      	ldr	r3, [pc, #496]	; (8003a78 <Skill_Mode+0x264>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <Skill_Mode+0x82>
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <Skill_Mode+0x268>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <Skill_Mode+0x92>
 8003896:	4b78      	ldr	r3, [pc, #480]	; (8003a78 <Skill_Mode+0x264>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d152      	bne.n	8003944 <Skill_Mode+0x130>
 800389e:	4b77      	ldr	r3, [pc, #476]	; (8003a7c <Skill_Mode+0x268>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d14e      	bne.n	8003944 <Skill_Mode+0x130>
	{
		byte = LINE1; //az első vonalt kell követni
 80038a6:	4b72      	ldr	r3, [pc, #456]	; (8003a70 <Skill_Mode+0x25c>)
 80038a8:	789b      	ldrb	r3, [r3, #2]
 80038aa:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 80038ac:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <Skill_Mode+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bfb8      	it	lt
 80038b8:	425b      	neglt	r3, r3
 80038ba:	613b      	str	r3, [r7, #16]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b46      	cmp	r3, #70	; 0x46
 80038c0:	dd03      	ble.n	80038ca <Skill_Mode+0xb6>
 80038c2:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <Skill_Mode+0x270>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <Skill_Mode+0xbe>
 80038ca:	4b6e      	ldr	r3, [pc, #440]	; (8003a84 <Skill_Mode+0x270>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d125      	bne.n	800391e <Skill_Mode+0x10a>
		{

			if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 80038d2:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <Skill_Mode+0x270>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <Skill_Mode+0xcc>
 80038da:	4a6b      	ldr	r2, [pc, #428]	; (8003a88 <Skill_Mode+0x274>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6013      	str	r3, [r2, #0]
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80038e0:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <Skill_Mode+0x274>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038ec:	d908      	bls.n	8003900 <Skill_Mode+0xec>
			{
				estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 80038ee:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <Skill_Mode+0x270>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 80038f4:	2201      	movs	r2, #1
 80038f6:	2102      	movs	r1, #2
 80038f8:	4864      	ldr	r0, [pc, #400]	; (8003a8c <Skill_Mode+0x278>)
 80038fa:	f003 fe95 	bl	8007628 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80038fe:	e020      	b.n	8003942 <Skill_Mode+0x12e>
			}
			else //ha még nem telt le az timout idő
			{
				byte = rxBuf[1+LINE_CNT]; //ilyenkor az utolsó vonalat nézzük az első helyett
 8003900:	4b5b      	ldr	r3, [pc, #364]	; (8003a70 <Skill_Mode+0x25c>)
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	3301      	adds	r3, #1
 8003906:	4a5a      	ldr	r2, [pc, #360]	; (8003a70 <Skill_Mode+0x25c>)
 8003908:	5cd3      	ldrb	r3, [r2, r3]
 800390a:	61fb      	str	r3, [r7, #28]
				estuary=ESTUARY_MODE_ON; //öntartás
 800390c:	4b5d      	ldr	r3, [pc, #372]	; (8003a84 <Skill_Mode+0x270>)
 800390e:	2202      	movs	r2, #2
 8003910:	701a      	strb	r2, [r3, #0]
				LED_G(1);
 8003912:	2200      	movs	r2, #0
 8003914:	2102      	movs	r1, #2
 8003916:	485d      	ldr	r0, [pc, #372]	; (8003a8c <Skill_Mode+0x278>)
 8003918:	f003 fe86 	bl	8007628 <HAL_GPIO_WritePin>
			if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 800391c:	e011      	b.n	8003942 <Skill_Mode+0x12e>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b2c      	cmp	r3, #44	; 0x2c
 8003922:	f300 80a2 	bgt.w	8003a6a <Skill_Mode+0x256>
 8003926:	4b57      	ldr	r3, [pc, #348]	; (8003a84 <Skill_Mode+0x270>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	f040 809d 	bne.w	8003a6a <Skill_Mode+0x256>
		{
			estuary=ESTUARY_MODE_OFF;
 8003930:	4b54      	ldr	r3, [pc, #336]	; (8003a84 <Skill_Mode+0x270>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 8003936:	2201      	movs	r2, #1
 8003938:	2102      	movs	r1, #2
 800393a:	4854      	ldr	r0, [pc, #336]	; (8003a8c <Skill_Mode+0x278>)
 800393c:	f003 fe74 	bl	8007628 <HAL_GPIO_WritePin>
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8003940:	e093      	b.n	8003a6a <Skill_Mode+0x256>
 8003942:	e092      	b.n	8003a6a <Skill_Mode+0x256>
		}

	}
	else if((path==RIGHT && orientation==FORWARD) || (path==LEFT && orientation==REVERSE))
 8003944:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <Skill_Mode+0x264>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d103      	bne.n	8003954 <Skill_Mode+0x140>
 800394c:	4b4b      	ldr	r3, [pc, #300]	; (8003a7c <Skill_Mode+0x268>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <Skill_Mode+0x150>
 8003954:	4b48      	ldr	r3, [pc, #288]	; (8003a78 <Skill_Mode+0x264>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d150      	bne.n	80039fe <Skill_Mode+0x1ea>
 800395c:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <Skill_Mode+0x268>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d14c      	bne.n	80039fe <Skill_Mode+0x1ea>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 8003964:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <Skill_Mode+0x25c>)
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	3301      	adds	r3, #1
 800396a:	4a41      	ldr	r2, [pc, #260]	; (8003a70 <Skill_Mode+0x25c>)
 800396c:	5cd3      	ldrb	r3, [r2, r3]
 800396e:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <Skill_Mode+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	bfb8      	it	lt
 800397c:	425b      	neglt	r3, r3
 800397e:	613b      	str	r3, [r7, #16]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b46      	cmp	r3, #70	; 0x46
 8003984:	dd03      	ble.n	800398e <Skill_Mode+0x17a>
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <Skill_Mode+0x270>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <Skill_Mode+0x182>
 800398e:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <Skill_Mode+0x270>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d122      	bne.n	80039dc <Skill_Mode+0x1c8>
		{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <Skill_Mode+0x270>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d102      	bne.n	80039a4 <Skill_Mode+0x190>
 800399e:	4a3a      	ldr	r2, [pc, #232]	; (8003a88 <Skill_Mode+0x274>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80039a4:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <Skill_Mode+0x274>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039b0:	d908      	bls.n	80039c4 <Skill_Mode+0x1b0>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 80039b2:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <Skill_Mode+0x270>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 80039b8:	2201      	movs	r2, #1
 80039ba:	2102      	movs	r1, #2
 80039bc:	4833      	ldr	r0, [pc, #204]	; (8003a8c <Skill_Mode+0x278>)
 80039be:	f003 fe33 	bl	8007628 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80039c2:	e01b      	b.n	80039fc <Skill_Mode+0x1e8>
				}
				else //ha még nem telt le az idő
				{
					byte = rxBuf[2]; //ilyenkor az első vonalat nézzük az utolsó helyett
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <Skill_Mode+0x25c>)
 80039c6:	789b      	ldrb	r3, [r3, #2]
 80039c8:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 80039ca:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <Skill_Mode+0x270>)
 80039cc:	2202      	movs	r2, #2
 80039ce:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2102      	movs	r1, #2
 80039d4:	482d      	ldr	r0, [pc, #180]	; (8003a8c <Skill_Mode+0x278>)
 80039d6:	f003 fe27 	bl	8007628 <HAL_GPIO_WritePin>
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 80039da:	e00f      	b.n	80039fc <Skill_Mode+0x1e8>
				}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b2c      	cmp	r3, #44	; 0x2c
 80039e0:	dc5a      	bgt.n	8003a98 <Skill_Mode+0x284>
 80039e2:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <Skill_Mode+0x270>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d156      	bne.n	8003a98 <Skill_Mode+0x284>
		{
			estuary=ESTUARY_MODE_OFF;
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <Skill_Mode+0x270>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 80039f0:	2201      	movs	r2, #1
 80039f2:	2102      	movs	r1, #2
 80039f4:	4825      	ldr	r0, [pc, #148]	; (8003a8c <Skill_Mode+0x278>)
 80039f6:	f003 fe17 	bl	8007628 <HAL_GPIO_WritePin>
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 80039fa:	e04d      	b.n	8003a98 <Skill_Mode+0x284>
 80039fc:	e04c      	b.n	8003a98 <Skill_Mode+0x284>
		}

	}

	else if(path==MIDDLE)
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <Skill_Mode+0x264>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d149      	bne.n	8003a9a <Skill_Mode+0x286>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 8003a06:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <Skill_Mode+0x25c>)
 8003a08:	785b      	ldrb	r3, [r3, #1]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d103      	bne.n	8003a16 <Skill_Mode+0x202>
 8003a0e:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <Skill_Mode+0x25c>)
 8003a10:	789b      	ldrb	r3, [r3, #2]
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e041      	b.n	8003a9a <Skill_Mode+0x286>
		else if(LINE_CNT==3)//ha 3 vonal van
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <Skill_Mode+0x25c>)
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d113      	bne.n	8003a46 <Skill_Mode+0x232>
		{
			byte = rxBuf[3];//a középsőt követjük
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <Skill_Mode+0x25c>)
 8003a20:	78db      	ldrb	r3, [r3, #3]
 8003a22:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <Skill_Mode+0x25c>)
 8003a26:	789b      	ldrb	r3, [r3, #2]
 8003a28:	3b7b      	subs	r3, #123	; 0x7b
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfb8      	it	lt
 8003a2e:	425b      	neglt	r3, r3
 8003a30:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <Skill_Mode+0x27c>)
 8003a32:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <Skill_Mode+0x25c>)
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	3b7b      	subs	r3, #123	; 0x7b
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfb8      	it	lt
 8003a3e:	425b      	neglt	r3, r3
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <Skill_Mode+0x280>)
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e029      	b.n	8003a9a <Skill_Mode+0x286>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <Skill_Mode+0x25c>)
 8003a48:	785b      	ldrb	r3, [r3, #1]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d125      	bne.n	8003a9a <Skill_Mode+0x286>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <Skill_Mode+0x27c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <Skill_Mode+0x280>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	da03      	bge.n	8003a62 <Skill_Mode+0x24e>
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <Skill_Mode+0x25c>)
 8003a5c:	789b      	ldrb	r3, [r3, #2]
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	e01b      	b.n	8003a9a <Skill_Mode+0x286>
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 8003a62:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <Skill_Mode+0x25c>)
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e017      	b.n	8003a9a <Skill_Mode+0x286>
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8003a6a:	bf00      	nop
 8003a6c:	e015      	b.n	8003a9a <Skill_Mode+0x286>
 8003a6e:	bf00      	nop
 8003a70:	20000678 	.word	0x20000678
 8003a74:	20000682 	.word	0x20000682
 8003a78:	2000029e 	.word	0x2000029e
 8003a7c:	2000029c 	.word	0x2000029c
 8003a80:	200006c0 	.word	0x200006c0
 8003a84:	200006c4 	.word	0x200006c4
 8003a88:	200006c8 	.word	0x200006c8
 8003a8c:	40020400 	.word	0x40020400
 8003a90:	200006cc 	.word	0x200006cc
 8003a94:	200006d0 	.word	0x200006d0
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8003a98:	bf00      	nop
		}
	}
	if(estuary==ESTUARY_MODE_INIT)estuary=ESTUARY_MODE_OFF;
 8003a9a:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <Skill_Mode+0x328>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <Skill_Mode+0x294>
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <Skill_Mode+0x328>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
	//p = (float)byte * 204/248.0-102;
	p = (float)byte * 204/248.0-102;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003b40 <Skill_Mode+0x32c>
 8003ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aba:	ee17 0a90 	vmov	r0, s15
 8003abe:	f7fc fd63 	bl	8000588 <__aeabi_f2d>
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <Skill_Mode+0x330>)
 8003ac8:	f7fc fee0 	bl	800088c <__aeabi_ddiv>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <Skill_Mode+0x334>)
 8003ada:	f7fc fbf5 	bl	80002c8 <__aeabi_dsub>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7fd f87f 	bl	8000be8 <__aeabi_d2f>
 8003aea:	4603      	mov	r3, r0
 8003aec:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 8003aee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003af2:	eeb1 7a67 	vneg.f32	s14, s15
 8003af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <Skill_Mode+0x338>)
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	edd7 6a05 	vldr	s13, [r7, #20]
 8003b08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <Skill_Mode+0x33c>)
 8003b1a:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <Skill_Mode+0x338>)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 8003b24:	4a0b      	ldr	r2, [pc, #44]	; (8003b54 <Skill_Mode+0x340>)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	6013      	str	r3, [r2, #0]

	return gamma;
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <Skill_Mode+0x33c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	ee07 3a90 	vmov	s15, r3
}
 8003b32:	eeb0 0a67 	vmov.f32	s0, s15
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200006c4 	.word	0x200006c4
 8003b40:	434c0000 	.word	0x434c0000
 8003b44:	406f0000 	.word	0x406f0000
 8003b48:	40598000 	.word	0x40598000
 8003b4c:	200006d4 	.word	0x200006d4
 8003b50:	200006d8 	.word	0x200006d8
 8003b54:	200006c0 	.word	0x200006c0

08003b58 <Detect_Node4>:
		ignore=0;
	}
}

void Detect_Node4(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8003b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	static uint32_t t_stamp=0;
	static uint8_t detect_node_state=0;
	static float s=0;

	if(LINE_CNT==4 && !detect_node_state)
 8003b64:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <Detect_Node4+0x100>)
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d111      	bne.n	8003b90 <Detect_Node4+0x38>
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <Detect_Node4+0x104>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10d      	bne.n	8003b90 <Detect_Node4+0x38>
	{
		s=0;
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <Detect_Node4+0x108>)
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
		detect_node_state=1;//innentől mérünk
 8003b7c:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <Detect_Node4+0x104>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
		ignore=1;
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <Detect_Node4+0x10c>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
		t_stamp=t;
 8003b88:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <Detect_Node4+0x110>)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e03e      	b.n	8003c0e <Detect_Node4+0xb6>

	}
	else if(LINE_CNT==4 && detect_node_state)
 8003b90:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <Detect_Node4+0x100>)
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d13a      	bne.n	8003c0e <Detect_Node4+0xb6>
 8003b98:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <Detect_Node4+0x104>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d036      	beq.n	8003c0e <Detect_Node4+0xb6>
	{
		s+=fabs(v)*(t-t_prev)/1000;
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <Detect_Node4+0x108>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fcef 	bl	8000588 <__aeabi_f2d>
 8003baa:	4604      	mov	r4, r0
 8003bac:	460d      	mov	r5, r1
 8003bae:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <Detect_Node4+0x114>)
 8003bb0:	edd3 7a00 	vldr	s15, [r3]
 8003bb4:	eef0 7ae7 	vabs.f32	s15, s15
 8003bb8:	ee17 0a90 	vmov	r0, s15
 8003bbc:	f7fc fce4 	bl	8000588 <__aeabi_f2d>
 8003bc0:	4680      	mov	r8, r0
 8003bc2:	4689      	mov	r9, r1
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <Detect_Node4+0x118>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc fcb9 	bl	8000544 <__aeabi_ui2d>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	4649      	mov	r1, r9
 8003bda:	f7fc fd2d 	bl	8000638 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <Detect_Node4+0x11c>)
 8003bec:	f7fc fe4e 	bl	800088c <__aeabi_ddiv>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	f7fc fb68 	bl	80002cc <__adddf3>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7fc fff0 	bl	8000be8 <__aeabi_d2f>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <Detect_Node4+0x108>)
 8003c0c:	6013      	str	r3, [r2, #0]
	}
	if((t-t_stamp)>230 && detect_node_state)
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <Detect_Node4+0x110>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2be6      	cmp	r3, #230	; 0xe6
 8003c18:	d916      	bls.n	8003c48 <Detect_Node4+0xf0>
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <Detect_Node4+0x104>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d012      	beq.n	8003c48 <Detect_Node4+0xf0>
	{
		detect_node_state=0;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <Detect_Node4+0x104>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
		ignore=0;
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <Detect_Node4+0x10c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
		if(s>140)//vertical node
		{
			nodeDetected=1; //horizont node

		}
		else*/ if(s>50)//horizontal node
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <Detect_Node4+0x108>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003c78 <Detect_Node4+0x120>
 8003c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	dd02      	ble.n	8003c48 <Detect_Node4+0xf0>
		{
			nodeDetected=1; //horizont node
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <Detect_Node4+0x124>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
		}
	}
	t_prev=t;
 8003c48:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <Detect_Node4+0x118>)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6013      	str	r3, [r2, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c58:	20000678 	.word	0x20000678
 8003c5c:	200006dc 	.word	0x200006dc
 8003c60:	200006e0 	.word	0x200006e0
 8003c64:	20000682 	.word	0x20000682
 8003c68:	200006e4 	.word	0x200006e4
 8003c6c:	20000660 	.word	0x20000660
 8003c70:	200006e8 	.word	0x200006e8
 8003c74:	408f4000 	.word	0x408f4000
 8003c78:	42480000 	.word	0x42480000
 8003c7c:	2000029d 	.word	0x2000029d

08003c80 <Lane_Changer>:

uint8_t Lane_Changer(uint32_t t)
{
 8003c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	static uint8_t lineCnt_prev=1;
	static float s=0;
	static int i=0;
	static uint32_t dt[5]={1000,1000,1000,1000,1000};

	if(laneChange<2)return 0;
 8003c8a:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <Lane_Changer+0x1f0>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d801      	bhi.n	8003c96 <Lane_Changer+0x16>
 8003c92:	2300      	movs	r3, #0
 8003c94:	e0e6      	b.n	8003e64 <Lane_Changer+0x1e4>
	if(LINE_CNT != lineCnt_prev && (LINE_CNT==1 || LINE_CNT==2) && laneChange==2) //ha változik az alattunk lévő vonalak száma
 8003c96:	4b77      	ldr	r3, [pc, #476]	; (8003e74 <Lane_Changer+0x1f4>)
 8003c98:	785a      	ldrb	r2, [r3, #1]
 8003c9a:	4b77      	ldr	r3, [pc, #476]	; (8003e78 <Lane_Changer+0x1f8>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d041      	beq.n	8003d26 <Lane_Changer+0xa6>
 8003ca2:	4b74      	ldr	r3, [pc, #464]	; (8003e74 <Lane_Changer+0x1f4>)
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d003      	beq.n	8003cb2 <Lane_Changer+0x32>
 8003caa:	4b72      	ldr	r3, [pc, #456]	; (8003e74 <Lane_Changer+0x1f4>)
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d139      	bne.n	8003d26 <Lane_Changer+0xa6>
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <Lane_Changer+0x1f0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d135      	bne.n	8003d26 <Lane_Changer+0xa6>
	{
		dt[i] = t - t_stamp;
 8003cba:	4b70      	ldr	r3, [pc, #448]	; (8003e7c <Lane_Changer+0x1fc>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <Lane_Changer+0x200>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	1a8a      	subs	r2, r1, r2
 8003cc6:	496f      	ldr	r1, [pc, #444]	; (8003e84 <Lane_Changer+0x204>)
 8003cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint32_t sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 8003ccc:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <Lane_Changer+0x204>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <Lane_Changer+0x204>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	441a      	add	r2, r3
 8003cd6:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <Lane_Changer+0x204>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	441a      	add	r2, r3
 8003cdc:	4b69      	ldr	r3, [pc, #420]	; (8003e84 <Lane_Changer+0x204>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <Lane_Changer+0x204>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
		if((sum > 250) && (sum < 1000))//ha másfél másodpercen belül van8 váltás
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2bfa      	cmp	r3, #250	; 0xfa
 8003cee:	d90a      	bls.n	8003d06 <Lane_Changer+0x86>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf6:	d206      	bcs.n	8003d06 <Lane_Changer+0x86>
		{
			s=0;
 8003cf8:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <Lane_Changer+0x208>)
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
			laneChange=3;
 8003d00:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <Lane_Changer+0x1f0>)
 8003d02:	2203      	movs	r2, #3
 8003d04:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8003d06:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <Lane_Changer+0x200>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	4a5c      	ldr	r2, [pc, #368]	; (8003e80 <Lane_Changer+0x200>)
 8003d0e:	6013      	str	r3, [r2, #0]
		if(i>4) i=0;
 8003d10:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <Lane_Changer+0x200>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	dd02      	ble.n	8003d1e <Lane_Changer+0x9e>
 8003d18:	4b59      	ldr	r3, [pc, #356]	; (8003e80 <Lane_Changer+0x200>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
		t_stamp = t;
 8003d1e:	4a57      	ldr	r2, [pc, #348]	; (8003e7c <Lane_Changer+0x1fc>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6013      	str	r3, [r2, #0]
	{
 8003d24:	e096      	b.n	8003e54 <Lane_Changer+0x1d4>
	}
	else if(laneChange==3)
 8003d26:	4b52      	ldr	r3, [pc, #328]	; (8003e70 <Lane_Changer+0x1f0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d172      	bne.n	8003e14 <Lane_Changer+0x194>
	{
		s+=fabs(v)*(t-t_prev)/1000;
 8003d2e:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <Lane_Changer+0x208>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fc28 	bl	8000588 <__aeabi_f2d>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <Lane_Changer+0x20c>)
 8003d3e:	edd3 7a00 	vldr	s15, [r3]
 8003d42:	eef0 7ae7 	vabs.f32	s15, s15
 8003d46:	ee17 0a90 	vmov	r0, s15
 8003d4a:	f7fc fc1d 	bl	8000588 <__aeabi_f2d>
 8003d4e:	4680      	mov	r8, r0
 8003d50:	4689      	mov	r9, r1
 8003d52:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <Lane_Changer+0x210>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fbf2 	bl	8000544 <__aeabi_ui2d>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4640      	mov	r0, r8
 8003d66:	4649      	mov	r1, r9
 8003d68:	f7fc fc66 	bl	8000638 <__aeabi_dmul>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <Lane_Changer+0x214>)
 8003d7a:	f7fc fd87 	bl	800088c <__aeabi_ddiv>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4620      	mov	r0, r4
 8003d84:	4629      	mov	r1, r5
 8003d86:	f7fc faa1 	bl	80002cc <__adddf3>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7fc ff29 	bl	8000be8 <__aeabi_d2f>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4a3b      	ldr	r2, [pc, #236]	; (8003e88 <Lane_Changer+0x208>)
 8003d9a:	6013      	str	r3, [r2, #0]
		if(orientation==FORWARD)
 8003d9c:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <Lane_Changer+0x218>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d114      	bne.n	8003dce <Lane_Changer+0x14e>
		{
			TIM2->CCR1=CCR_FRONT_MAX-40;
 8003da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003da8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <Lane_Changer+0x21c>)
 8003db0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=1000;
 8003db6:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <Lane_Changer+0x220>)
 8003db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dbc:	601a      	str	r2, [r3, #0]
			laneChange=4;
 8003dbe:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <Lane_Changer+0x1f0>)
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 8003dc4:	4a2d      	ldr	r2, [pc, #180]	; (8003e7c <Lane_Changer+0x1fc>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6013      	str	r3, [r2, #0]
			return 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e04a      	b.n	8003e64 <Lane_Changer+0x1e4>
		}
		else if(orientation==REVERSE && s>2000)
 8003dce:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <Lane_Changer+0x218>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d13e      	bne.n	8003e54 <Lane_Changer+0x1d4>
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <Lane_Changer+0x208>)
 8003dd8:	edd3 7a00 	vldr	s15, [r3]
 8003ddc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003ea4 <Lane_Changer+0x224>
 8003de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de8:	dd34      	ble.n	8003e54 <Lane_Changer+0x1d4>
		{
			TIM2->CCR1=CCR_FRONT_MIN;
 8003dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 8003df4:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <Lane_Changer+0x21c>)
 8003df6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=3000;
 8003dfc:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <Lane_Changer+0x220>)
 8003dfe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003e02:	601a      	str	r2, [r3, #0]
			laneChange=4;
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <Lane_Changer+0x1f0>)
 8003e06:	2204      	movs	r2, #4
 8003e08:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <Lane_Changer+0x1fc>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6013      	str	r3, [r2, #0]
			return 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e027      	b.n	8003e64 <Lane_Changer+0x1e4>
		}
	}
	else if(laneChange==4)
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <Lane_Changer+0x1f0>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d11b      	bne.n	8003e54 <Lane_Changer+0x1d4>
	{
		LED_Y(0);
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e22:	4821      	ldr	r0, [pc, #132]	; (8003ea8 <Lane_Changer+0x228>)
 8003e24:	f003 fc00 	bl	8007628 <HAL_GPIO_WritePin>
		v_control=SLOW_DOWN;
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <Lane_Changer+0x22c>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
		if((t-t_stamp)>timeout && LINE_CNT>0)
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <Lane_Changer+0x1fc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	1ad2      	subs	r2, r2, r3
 8003e36:	4b1a      	ldr	r3, [pc, #104]	; (8003ea0 <Lane_Changer+0x220>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d908      	bls.n	8003e50 <Lane_Changer+0x1d0>
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <Lane_Changer+0x1f4>)
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <Lane_Changer+0x1d0>
		{
			ignore=1;
 8003e46:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <Lane_Changer+0x230>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
			return 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e009      	b.n	8003e64 <Lane_Changer+0x1e4>
		}
		else return 1;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e007      	b.n	8003e64 <Lane_Changer+0x1e4>
	}
	lineCnt_prev=LINE_CNT;
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <Lane_Changer+0x1f4>)
 8003e56:	785a      	ldrb	r2, [r3, #1]
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <Lane_Changer+0x1f8>)
 8003e5a:	701a      	strb	r2, [r3, #0]
	t_prev=t;
 8003e5c:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <Lane_Changer+0x210>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6013      	str	r3, [r2, #0]
	return 0;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e6e:	bf00      	nop
 8003e70:	200002a0 	.word	0x200002a0
 8003e74:	20000678 	.word	0x20000678
 8003e78:	20000064 	.word	0x20000064
 8003e7c:	200006ec 	.word	0x200006ec
 8003e80:	200006f0 	.word	0x200006f0
 8003e84:	20000068 	.word	0x20000068
 8003e88:	200006f4 	.word	0x200006f4
 8003e8c:	20000660 	.word	0x20000660
 8003e90:	200006f8 	.word	0x200006f8
 8003e94:	408f4000 	.word	0x408f4000
 8003e98:	2000029c 	.word	0x2000029c
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	200006fc 	.word	0x200006fc
 8003ea4:	44fa0000 	.word	0x44fa0000
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	200002a1 	.word	0x200002a1
 8003eb0:	20000682 	.word	0x20000682

08003eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003eba:	f001 fca9 	bl	8005810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ebe:	f000 f893 	bl	8003fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ec2:	f000 fdb1 	bl	8004a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ec6:	f000 fd8f 	bl	80049e8 <MX_DMA_Init>
  MX_TIM2_Init();
 8003eca:	f000 fa83 	bl	80043d4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003ece:	f000 fd0d 	bl	80048ec <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8003ed2:	f000 fb77 	bl	80045c4 <MX_TIM4_Init>
  MX_ADC2_Init();
 8003ed6:	f000 f98b 	bl	80041f0 <MX_ADC2_Init>
  MX_TIM3_Init();
 8003eda:	f000 faf1 	bl	80044c0 <MX_TIM3_Init>
  MX_UART5_Init();
 8003ede:	f000 fcdb 	bl	8004898 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8003ee2:	f000 fd2d 	bl	8004940 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8003ee6:	f000 fc37 	bl	8004758 <MX_TIM8_Init>
  MX_ADC1_Init();
 8003eea:	f000 f8ef 	bl	80040cc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8003eee:	f000 fd51 	bl	8004994 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8003ef2:	f000 fbe3 	bl	80046bc <MX_TIM5_Init>
  MX_TIM1_Init();
 8003ef6:	f000 f9cd 	bl	8004294 <MX_TIM1_Init>
  MX_TIM14_Init();
 8003efa:	f000 fca9 	bl	8004850 <MX_TIM14_Init>
  MX_TIM13_Init();
 8003efe:	f000 fc83 	bl	8004808 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8,&htim13,&htim14);
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <main+0xf8>)
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <main+0xfc>)
 8003f08:	9302      	str	r3, [sp, #8]
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <main+0x100>)
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <main+0x104>)
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <main+0x108>)
 8003f14:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <main+0x10c>)
 8003f16:	492b      	ldr	r1, [pc, #172]	; (8003fc4 <main+0x110>)
 8003f18:	482b      	ldr	r0, [pc, #172]	; (8003fc8 <main+0x114>)
 8003f1a:	f7fd f84d 	bl	8000fb8 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 8003f1e:	2108      	movs	r1, #8
 8003f20:	482a      	ldr	r0, [pc, #168]	; (8003fcc <main+0x118>)
 8003f22:	f000 feb3 	bl	8004c8c <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 8003f26:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <main+0x114>)
 8003f28:	4929      	ldr	r1, [pc, #164]	; (8003fd0 <main+0x11c>)
 8003f2a:	482a      	ldr	r0, [pc, #168]	; (8003fd4 <main+0x120>)
 8003f2c:	f7fe f970 	bl	8002210 <Battery_Voltage_Compensate>

  leaveLineEnabled=1;
 8003f30:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <main+0x124>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
  v_ref=1000;
 8003f36:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <main+0x128>)
 8003f38:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <main+0x12c>)
 8003f3a:	601a      	str	r2, [r3, #0]

  Mode_Selector(&huart1, &huart5);
 8003f3c:	4929      	ldr	r1, [pc, #164]	; (8003fe4 <main+0x130>)
 8003f3e:	4822      	ldr	r0, [pc, #136]	; (8003fc8 <main+0x114>)
 8003f40:	f7fd fe4e 	bl	8001be0 <Mode_Selector>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {/**/
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <main+0x110>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4819      	ldr	r0, [pc, #100]	; (8003fb4 <main+0x100>)
 8003f50:	f7fe fa8a 	bl	8002468 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <main+0x110>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f5a:	230a      	movs	r3, #10
 8003f5c:	491a      	ldr	r1, [pc, #104]	; (8003fc8 <main+0x114>)
 8003f5e:	4818      	ldr	r0, [pc, #96]	; (8003fc0 <main+0x10c>)
 8003f60:	f7fe fafe 	bl	8002560 <Motor_Drive_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 43);
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <main+0x110>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	222b      	movs	r2, #43	; 0x2b
 8003f6c:	9200      	str	r2, [sp, #0]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <main+0x114>)
 8003f70:	2108      	movs	r1, #8
 8003f72:	4816      	ldr	r0, [pc, #88]	; (8003fcc <main+0x118>)
 8003f74:	f000 fea6 	bl	8004cc4 <Remote_Control_Task>

	  Control_Task(&huart1,&htim14,TICK, 23);
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <main+0x110>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7e:	2317      	movs	r3, #23
 8003f80:	490a      	ldr	r1, [pc, #40]	; (8003fac <main+0xf8>)
 8003f82:	4811      	ldr	r0, [pc, #68]	; (8003fc8 <main+0x114>)
 8003f84:	f7fd fa74 	bl	8001470 <Control_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 4);
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <main+0x110>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8e:	2304      	movs	r3, #4
 8003f90:	490d      	ldr	r1, [pc, #52]	; (8003fc8 <main+0x114>)
 8003f92:	4814      	ldr	r0, [pc, #80]	; (8003fe4 <main+0x130>)
 8003f94:	f7fe fccc 	bl	8002930 <Line_Track_Task>

	  HDI_Read_Task(&huart1,&htim2,TICK, 200);
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <main+0x110>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9e:	23c8      	movs	r3, #200	; 0xc8
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <main+0x108>)
 8003fa2:	4809      	ldr	r0, [pc, #36]	; (8003fc8 <main+0x114>)
 8003fa4:	f7fd f8d2 	bl	800114c <HDI_Read_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8003fa8:	e7cc      	b.n	8003f44 <main+0x90>
 8003faa:	bf00      	nop
 8003fac:	20000988 	.word	0x20000988
 8003fb0:	20000940 	.word	0x20000940
 8003fb4:	200008f8 	.word	0x200008f8
 8003fb8:	20000790 	.word	0x20000790
 8003fbc:	200007d8 	.word	0x200007d8
 8003fc0:	20000820 	.word	0x20000820
 8003fc4:	200008b0 	.word	0x200008b0
 8003fc8:	20000a74 	.word	0x20000a74
 8003fcc:	20000868 	.word	0x20000868
 8003fd0:	20000700 	.word	0x20000700
 8003fd4:	20000748 	.word	0x20000748
 8003fd8:	20000294 	.word	0x20000294
 8003fdc:	20000290 	.word	0x20000290
 8003fe0:	447a0000 	.word	0x447a0000
 8003fe4:	20000a30 	.word	0x20000a30

08003fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b094      	sub	sp, #80	; 0x50
 8003fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fee:	f107 031c 	add.w	r3, r7, #28
 8003ff2:	2234      	movs	r2, #52	; 0x34
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f007 f960 	bl	800b2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <SystemClock_Config+0xdc>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <SystemClock_Config+0xdc>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6413      	str	r3, [r2, #64]	; 0x40
 800401c:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <SystemClock_Config+0xdc>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004028:	2300      	movs	r3, #0
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <SystemClock_Config+0xe0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <SystemClock_Config+0xe0>)
 8004032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <SystemClock_Config+0xe0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004044:	2301      	movs	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800404e:	2302      	movs	r3, #2
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004058:	2304      	movs	r3, #4
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800405c:	23b4      	movs	r3, #180	; 0xb4
 800405e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004060:	2302      	movs	r3, #2
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004064:	2302      	movs	r3, #2
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004068:	2302      	movs	r3, #2
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800406c:	f107 031c 	add.w	r3, r7, #28
 8004070:	4618      	mov	r0, r3
 8004072:	f003 febf 	bl	8007df4 <HAL_RCC_OscConfig>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800407c:	f000 fe00 	bl	8004c80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004080:	f003 fb1e 	bl	80076c0 <HAL_PWREx_EnableOverDrive>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800408a:	f000 fdf9 	bl	8004c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800408e:	230f      	movs	r3, #15
 8004090:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004092:	2302      	movs	r3, #2
 8004094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800409a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800409e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	2105      	movs	r1, #5
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fb57 	bl	8007760 <HAL_RCC_ClockConfig>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80040b8:	f000 fde2 	bl	8004c80 <Error_Handler>
  }
}
 80040bc:	bf00      	nop
 80040be:	3750      	adds	r7, #80	; 0x50
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40007000 	.word	0x40007000

080040cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08c      	sub	sp, #48	; 0x30
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040d2:	f107 0320 	add.w	r3, r7, #32
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80040e0:	463b      	mov	r3, r7
 80040e2:	2220      	movs	r2, #32
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f007 f8e8 	bl	800b2bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80040ec:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <MX_ADC1_Init+0x114>)
 80040ee:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <MX_ADC1_Init+0x118>)
 80040f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <MX_ADC1_Init+0x114>)
 80040f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040fa:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <MX_ADC1_Init+0x114>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004100:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004102:	2201      	movs	r2, #1
 8004104:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004106:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004108:	2200      	movs	r2, #0
 800410a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800410c:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <MX_ADC1_Init+0x114>)
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004116:	2200      	movs	r2, #0
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800411a:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <MX_ADC1_Init+0x114>)
 800411c:	4a32      	ldr	r2, [pc, #200]	; (80041e8 <MX_ADC1_Init+0x11c>)
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004126:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004128:	2203      	movs	r2, #3
 800412a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <MX_ADC1_Init+0x114>)
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004134:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004136:	2201      	movs	r2, #1
 8004138:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800413a:	4829      	ldr	r0, [pc, #164]	; (80041e0 <MX_ADC1_Init+0x114>)
 800413c:	f001 fbfe 	bl	800593c <HAL_ADC_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8004146:	f000 fd9b 	bl	8004c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800414a:	2308      	movs	r3, #8
 800414c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004152:	2307      	movs	r3, #7
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004156:	f107 0320 	add.w	r3, r7, #32
 800415a:	4619      	mov	r1, r3
 800415c:	4820      	ldr	r0, [pc, #128]	; (80041e0 <MX_ADC1_Init+0x114>)
 800415e:	f001 fd9b 	bl	8005c98 <HAL_ADC_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004168:	f000 fd8a 	bl	8004c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800416c:	2302      	movs	r3, #2
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004170:	f107 0320 	add.w	r3, r7, #32
 8004174:	4619      	mov	r1, r3
 8004176:	481a      	ldr	r0, [pc, #104]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004178:	f001 fd8e 	bl	8005c98 <HAL_ADC_ConfigChannel>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8004182:	f000 fd7d 	bl	8004c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8004186:	2303      	movs	r3, #3
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800418a:	f107 0320 	add.w	r3, r7, #32
 800418e:	4619      	mov	r1, r3
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <MX_ADC1_Init+0x114>)
 8004192:	f001 fd81 	bl	8005c98 <HAL_ADC_ConfigChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800419c:	f000 fd70 	bl	8004c80 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80041a0:	2308      	movs	r3, #8
 80041a2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80041a4:	2301      	movs	r3, #1
 80041a6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80041a8:	2301      	movs	r3, #1
 80041aa:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <MX_ADC1_Init+0x120>)
 80041b6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80041c4:	463b      	mov	r3, r7
 80041c6:	4619      	mov	r1, r3
 80041c8:	4805      	ldr	r0, [pc, #20]	; (80041e0 <MX_ADC1_Init+0x114>)
 80041ca:	f001 ff93 	bl	80060f4 <HAL_ADCEx_InjectedConfigChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80041d4:	f000 fd54 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041d8:	bf00      	nop
 80041da:	3730      	adds	r7, #48	; 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000700 	.word	0x20000700
 80041e4:	40012000 	.word	0x40012000
 80041e8:	0f000001 	.word	0x0f000001
 80041ec:	000f0001 	.word	0x000f0001

080041f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041f6:	463b      	mov	r3, r7
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004202:	4b21      	ldr	r3, [pc, #132]	; (8004288 <MX_ADC2_Init+0x98>)
 8004204:	4a21      	ldr	r2, [pc, #132]	; (800428c <MX_ADC2_Init+0x9c>)
 8004206:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004208:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <MX_ADC2_Init+0x98>)
 800420a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800420e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <MX_ADC2_Init+0x98>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <MX_ADC2_Init+0x98>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800421c:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <MX_ADC2_Init+0x98>)
 800421e:	2200      	movs	r2, #0
 8004220:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <MX_ADC2_Init+0x98>)
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <MX_ADC2_Init+0x98>)
 800422c:	2200      	movs	r2, #0
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <MX_ADC2_Init+0x98>)
 8004232:	4a17      	ldr	r2, [pc, #92]	; (8004290 <MX_ADC2_Init+0xa0>)
 8004234:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <MX_ADC2_Init+0x98>)
 8004238:	2200      	movs	r2, #0
 800423a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <MX_ADC2_Init+0x98>)
 800423e:	2201      	movs	r2, #1
 8004240:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <MX_ADC2_Init+0x98>)
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <MX_ADC2_Init+0x98>)
 800424c:	2201      	movs	r2, #1
 800424e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004250:	480d      	ldr	r0, [pc, #52]	; (8004288 <MX_ADC2_Init+0x98>)
 8004252:	f001 fb73 	bl	800593c <HAL_ADC_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800425c:	f000 fd10 	bl	8004c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004260:	230d      	movs	r3, #13
 8004262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004264:	2301      	movs	r3, #1
 8004266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004268:	2307      	movs	r3, #7
 800426a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800426c:	463b      	mov	r3, r7
 800426e:	4619      	mov	r1, r3
 8004270:	4805      	ldr	r0, [pc, #20]	; (8004288 <MX_ADC2_Init+0x98>)
 8004272:	f001 fd11 	bl	8005c98 <HAL_ADC_ConfigChannel>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800427c:	f000 fd00 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000748 	.word	0x20000748
 800428c:	40012100 	.word	0x40012100
 8004290:	0f000001 	.word	0x0f000001

08004294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b096      	sub	sp, #88	; 0x58
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800429a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	609a      	str	r2, [r3, #8]
 80042a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	60da      	str	r2, [r3, #12]
 80042c0:	611a      	str	r2, [r3, #16]
 80042c2:	615a      	str	r2, [r3, #20]
 80042c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	2220      	movs	r2, #32
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f006 fff5 	bl	800b2bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042d2:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <MX_TIM1_Init+0x138>)
 80042d4:	4a3e      	ldr	r2, [pc, #248]	; (80043d0 <MX_TIM1_Init+0x13c>)
 80042d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 80042d8:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <MX_TIM1_Init+0x138>)
 80042da:	f240 1267 	movw	r2, #359	; 0x167
 80042de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e0:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <MX_TIM1_Init+0x138>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <MX_TIM1_Init+0x138>)
 80042e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80042ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ee:	4b37      	ldr	r3, [pc, #220]	; (80043cc <MX_TIM1_Init+0x138>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <MX_TIM1_Init+0x138>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042fa:	4b34      	ldr	r3, [pc, #208]	; (80043cc <MX_TIM1_Init+0x138>)
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004300:	4832      	ldr	r0, [pc, #200]	; (80043cc <MX_TIM1_Init+0x138>)
 8004302:	f004 f815 	bl	8008330 <HAL_TIM_Base_Init>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800430c:	f000 fcb8 	bl	8004c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004314:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800431a:	4619      	mov	r1, r3
 800431c:	482b      	ldr	r0, [pc, #172]	; (80043cc <MX_TIM1_Init+0x138>)
 800431e:	f004 ff7f 	bl	8009220 <HAL_TIM_ConfigClockSource>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004328:	f000 fcaa 	bl	8004c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800432c:	4827      	ldr	r0, [pc, #156]	; (80043cc <MX_TIM1_Init+0x138>)
 800432e:	f004 f8b7 	bl	80084a0 <HAL_TIM_PWM_Init>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004338:	f000 fca2 	bl	8004c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800433c:	2300      	movs	r3, #0
 800433e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004340:	2300      	movs	r3, #0
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004344:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004348:	4619      	mov	r1, r3
 800434a:	4820      	ldr	r0, [pc, #128]	; (80043cc <MX_TIM1_Init+0x138>)
 800434c:	f005 fd90 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004356:	f000 fc93 	bl	8004c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800435a:	2360      	movs	r3, #96	; 0x60
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 800435e:	f240 23ed 	movw	r3, #749	; 0x2ed
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004364:	2300      	movs	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004368:	2300      	movs	r3, #0
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004370:	2300      	movs	r3, #0
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	220c      	movs	r2, #12
 800437a:	4619      	mov	r1, r3
 800437c:	4813      	ldr	r0, [pc, #76]	; (80043cc <MX_TIM1_Init+0x138>)
 800437e:	f004 fe8d 	bl	800909c <HAL_TIM_PWM_ConfigChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004388:	f000 fc7a 	bl	8004c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800438c:	2300      	movs	r3, #0
 800438e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004390:	2300      	movs	r3, #0
 8004392:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4807      	ldr	r0, [pc, #28]	; (80043cc <MX_TIM1_Init+0x138>)
 80043b0:	f005 fdda 	bl	8009f68 <HAL_TIMEx_ConfigBreakDeadTime>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80043ba:	f000 fc61 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80043be:	4803      	ldr	r0, [pc, #12]	; (80043cc <MX_TIM1_Init+0x138>)
 80043c0:	f000 ff24 	bl	800520c <HAL_TIM_MspPostInit>

}
 80043c4:	bf00      	nop
 80043c6:	3758      	adds	r7, #88	; 0x58
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000790 	.word	0x20000790
 80043d0:	40010000 	.word	0x40010000

080043d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	; 0x38
 80043d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e8:	f107 0320 	add.w	r3, r7, #32
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
 8004400:	615a      	str	r2, [r3, #20]
 8004402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <MX_TIM2_Init+0xe8>)
 8004406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800440a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <MX_TIM2_Init+0xe8>)
 800440e:	2259      	movs	r2, #89	; 0x59
 8004410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <MX_TIM2_Init+0xe8>)
 8004414:	2200      	movs	r2, #0
 8004416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8004418:	4b28      	ldr	r3, [pc, #160]	; (80044bc <MX_TIM2_Init+0xe8>)
 800441a:	f242 720f 	movw	r2, #9999	; 0x270f
 800441e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004420:	4b26      	ldr	r3, [pc, #152]	; (80044bc <MX_TIM2_Init+0xe8>)
 8004422:	2200      	movs	r2, #0
 8004424:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004426:	4b25      	ldr	r3, [pc, #148]	; (80044bc <MX_TIM2_Init+0xe8>)
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800442c:	4823      	ldr	r0, [pc, #140]	; (80044bc <MX_TIM2_Init+0xe8>)
 800442e:	f003 ff7f 	bl	8008330 <HAL_TIM_Base_Init>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004438:	f000 fc22 	bl	8004c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800443c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004446:	4619      	mov	r1, r3
 8004448:	481c      	ldr	r0, [pc, #112]	; (80044bc <MX_TIM2_Init+0xe8>)
 800444a:	f004 fee9 	bl	8009220 <HAL_TIM_ConfigClockSource>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004454:	f000 fc14 	bl	8004c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004458:	4818      	ldr	r0, [pc, #96]	; (80044bc <MX_TIM2_Init+0xe8>)
 800445a:	f004 f821 	bl	80084a0 <HAL_TIM_PWM_Init>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004464:	f000 fc0c 	bl	8004c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004470:	f107 0320 	add.w	r3, r7, #32
 8004474:	4619      	mov	r1, r3
 8004476:	4811      	ldr	r0, [pc, #68]	; (80044bc <MX_TIM2_Init+0xe8>)
 8004478:	f005 fcfa 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004482:	f000 fbfd 	bl	8004c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004486:	2360      	movs	r3, #96	; 0x60
 8004488:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 800448a:	f240 23ed 	movw	r3, #749	; 0x2ed
 800448e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	2200      	movs	r2, #0
 800449c:	4619      	mov	r1, r3
 800449e:	4807      	ldr	r0, [pc, #28]	; (80044bc <MX_TIM2_Init+0xe8>)
 80044a0:	f004 fdfc 	bl	800909c <HAL_TIM_PWM_ConfigChannel>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80044aa:	f000 fbe9 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80044ae:	4803      	ldr	r0, [pc, #12]	; (80044bc <MX_TIM2_Init+0xe8>)
 80044b0:	f000 feac 	bl	800520c <HAL_TIM_MspPostInit>

}
 80044b4:	bf00      	nop
 80044b6:	3738      	adds	r7, #56	; 0x38
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200007d8 	.word	0x200007d8

080044c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08e      	sub	sp, #56	; 0x38
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044d4:	f107 0320 	add.w	r3, r7, #32
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
 80044ec:	615a      	str	r2, [r3, #20]
 80044ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044f0:	4b32      	ldr	r3, [pc, #200]	; (80045bc <MX_TIM3_Init+0xfc>)
 80044f2:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <MX_TIM3_Init+0x100>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80044f6:	4b31      	ldr	r3, [pc, #196]	; (80045bc <MX_TIM3_Init+0xfc>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80044fc:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <MX_TIM3_Init+0xfc>)
 80044fe:	2260      	movs	r2, #96	; 0x60
 8004500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004502:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <MX_TIM3_Init+0xfc>)
 8004504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004508:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800450a:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <MX_TIM3_Init+0xfc>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <MX_TIM3_Init+0xfc>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004516:	4829      	ldr	r0, [pc, #164]	; (80045bc <MX_TIM3_Init+0xfc>)
 8004518:	f003 ff0a 	bl	8008330 <HAL_TIM_Base_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004522:	f000 fbad 	bl	8004c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800452c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004530:	4619      	mov	r1, r3
 8004532:	4822      	ldr	r0, [pc, #136]	; (80045bc <MX_TIM3_Init+0xfc>)
 8004534:	f004 fe74 	bl	8009220 <HAL_TIM_ConfigClockSource>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800453e:	f000 fb9f 	bl	8004c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004542:	481e      	ldr	r0, [pc, #120]	; (80045bc <MX_TIM3_Init+0xfc>)
 8004544:	f003 ffac 	bl	80084a0 <HAL_TIM_PWM_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800454e:	f000 fb97 	bl	8004c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004552:	2300      	movs	r3, #0
 8004554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800455a:	f107 0320 	add.w	r3, r7, #32
 800455e:	4619      	mov	r1, r3
 8004560:	4816      	ldr	r0, [pc, #88]	; (80045bc <MX_TIM3_Init+0xfc>)
 8004562:	f005 fc85 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800456c:	f000 fb88 	bl	8004c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004570:	2360      	movs	r3, #96	; 0x60
 8004572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	2200      	movs	r2, #0
 8004584:	4619      	mov	r1, r3
 8004586:	480d      	ldr	r0, [pc, #52]	; (80045bc <MX_TIM3_Init+0xfc>)
 8004588:	f004 fd88 	bl	800909c <HAL_TIM_PWM_ConfigChannel>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004592:	f000 fb75 	bl	8004c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004596:	1d3b      	adds	r3, r7, #4
 8004598:	2204      	movs	r2, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4807      	ldr	r0, [pc, #28]	; (80045bc <MX_TIM3_Init+0xfc>)
 800459e:	f004 fd7d 	bl	800909c <HAL_TIM_PWM_ConfigChannel>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80045a8:	f000 fb6a 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80045ac:	4803      	ldr	r0, [pc, #12]	; (80045bc <MX_TIM3_Init+0xfc>)
 80045ae:	f000 fe2d 	bl	800520c <HAL_TIM_MspPostInit>

}
 80045b2:	bf00      	nop
 80045b4:	3738      	adds	r7, #56	; 0x38
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000820 	.word	0x20000820
 80045c0:	40000400 	.word	0x40000400

080045c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ca:	f107 0318 	add.w	r3, r7, #24
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	609a      	str	r2, [r3, #8]
 80045d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045d8:	f107 0310 	add.w	r3, r7, #16
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80045e2:	463b      	mov	r3, r7
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <MX_TIM4_Init+0xf0>)
 80045f0:	4a31      	ldr	r2, [pc, #196]	; (80046b8 <MX_TIM4_Init+0xf4>)
 80045f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <MX_TIM4_Init+0xf0>)
 80045f6:	f240 321f 	movw	r2, #799	; 0x31f
 80045fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <MX_TIM4_Init+0xf0>)
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8004602:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <MX_TIM4_Init+0xf0>)
 8004604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004608:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800460a:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <MX_TIM4_Init+0xf0>)
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004610:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <MX_TIM4_Init+0xf0>)
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004616:	4827      	ldr	r0, [pc, #156]	; (80046b4 <MX_TIM4_Init+0xf0>)
 8004618:	f003 fe8a 	bl	8008330 <HAL_TIM_Base_Init>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8004622:	f000 fb2d 	bl	8004c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800462a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800462c:	f107 0318 	add.w	r3, r7, #24
 8004630:	4619      	mov	r1, r3
 8004632:	4820      	ldr	r0, [pc, #128]	; (80046b4 <MX_TIM4_Init+0xf0>)
 8004634:	f004 fdf4 	bl	8009220 <HAL_TIM_ConfigClockSource>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800463e:	f000 fb1f 	bl	8004c80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004642:	481c      	ldr	r0, [pc, #112]	; (80046b4 <MX_TIM4_Init+0xf0>)
 8004644:	f004 f84e 	bl	80086e4 <HAL_TIM_IC_Init>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800464e:	f000 fb17 	bl	8004c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800465a:	f107 0310 	add.w	r3, r7, #16
 800465e:	4619      	mov	r1, r3
 8004660:	4814      	ldr	r0, [pc, #80]	; (80046b4 <MX_TIM4_Init+0xf0>)
 8004662:	f005 fc05 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800466c:	f000 fb08 	bl	8004c80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004670:	230a      	movs	r3, #10
 8004672:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004674:	2301      	movs	r3, #1
 8004676:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004678:	2300      	movs	r3, #0
 800467a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004680:	463b      	mov	r3, r7
 8004682:	2208      	movs	r2, #8
 8004684:	4619      	mov	r1, r3
 8004686:	480b      	ldr	r0, [pc, #44]	; (80046b4 <MX_TIM4_Init+0xf0>)
 8004688:	f004 fc6c 	bl	8008f64 <HAL_TIM_IC_ConfigChannel>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004692:	f000 faf5 	bl	8004c80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004696:	463b      	mov	r3, r7
 8004698:	220c      	movs	r2, #12
 800469a:	4619      	mov	r1, r3
 800469c:	4805      	ldr	r0, [pc, #20]	; (80046b4 <MX_TIM4_Init+0xf0>)
 800469e:	f004 fc61 	bl	8008f64 <HAL_TIM_IC_ConfigChannel>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 80046a8:	f000 faea 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80046ac:	bf00      	nop
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000868 	.word	0x20000868
 80046b8:	40000800 	.word	0x40000800

080046bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	609a      	str	r2, [r3, #8]
 80046ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d0:	463b      	mov	r3, r7
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <MX_TIM5_Init+0x94>)
 80046da:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <MX_TIM5_Init+0x98>)
 80046dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 80046de:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <MX_TIM5_Init+0x94>)
 80046e0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80046e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <MX_TIM5_Init+0x94>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <MX_TIM5_Init+0x94>)
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295
 80046f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046f4:	4b16      	ldr	r3, [pc, #88]	; (8004750 <MX_TIM5_Init+0x94>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <MX_TIM5_Init+0x94>)
 80046fc:	2280      	movs	r2, #128	; 0x80
 80046fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004700:	4813      	ldr	r0, [pc, #76]	; (8004750 <MX_TIM5_Init+0x94>)
 8004702:	f003 fe15 	bl	8008330 <HAL_TIM_Base_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800470c:	f000 fab8 	bl	8004c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	4619      	mov	r1, r3
 800471c:	480c      	ldr	r0, [pc, #48]	; (8004750 <MX_TIM5_Init+0x94>)
 800471e:	f004 fd7f 	bl	8009220 <HAL_TIM_ConfigClockSource>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004728:	f000 faaa 	bl	8004c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800472c:	2300      	movs	r3, #0
 800472e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004730:	2300      	movs	r3, #0
 8004732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004734:	463b      	mov	r3, r7
 8004736:	4619      	mov	r1, r3
 8004738:	4805      	ldr	r0, [pc, #20]	; (8004750 <MX_TIM5_Init+0x94>)
 800473a:	f005 fb99 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004744:	f000 fa9c 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004748:	bf00      	nop
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	200008b0 	.word	0x200008b0
 8004754:	40000c00 	.word	0x40000c00

08004758 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08c      	sub	sp, #48	; 0x30
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800475e:	f107 030c 	add.w	r3, r7, #12
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f006 fda8 	bl	800b2bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <MX_TIM8_Init+0xa8>)
 8004776:	4a23      	ldr	r2, [pc, #140]	; (8004804 <MX_TIM8_Init+0xac>)
 8004778:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800477a:	4b21      	ldr	r3, [pc, #132]	; (8004800 <MX_TIM8_Init+0xa8>)
 800477c:	2200      	movs	r2, #0
 800477e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004780:	4b1f      	ldr	r3, [pc, #124]	; (8004800 <MX_TIM8_Init+0xa8>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <MX_TIM8_Init+0xa8>)
 8004788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800478c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <MX_TIM8_Init+0xa8>)
 8004790:	2200      	movs	r2, #0
 8004792:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <MX_TIM8_Init+0xa8>)
 8004796:	2200      	movs	r2, #0
 8004798:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <MX_TIM8_Init+0xa8>)
 800479c:	2280      	movs	r2, #128	; 0x80
 800479e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80047a0:	2303      	movs	r3, #3
 80047a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 80047b0:	230c      	movs	r3, #12
 80047b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047b4:	2300      	movs	r3, #0
 80047b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047b8:	2301      	movs	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80047bc:	2300      	movs	r3, #0
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 80047c0:	230c      	movs	r3, #12
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80047c4:	f107 030c 	add.w	r3, r7, #12
 80047c8:	4619      	mov	r1, r3
 80047ca:	480d      	ldr	r0, [pc, #52]	; (8004800 <MX_TIM8_Init+0xa8>)
 80047cc:	f004 f98e 	bl	8008aec <HAL_TIM_Encoder_Init>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80047d6:	f000 fa53 	bl	8004c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4806      	ldr	r0, [pc, #24]	; (8004800 <MX_TIM8_Init+0xa8>)
 80047e8:	f005 fb42 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80047f2:	f000 fa45 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80047f6:	bf00      	nop
 80047f8:	3730      	adds	r7, #48	; 0x30
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200008f8 	.word	0x200008f8
 8004804:	40010400 	.word	0x40010400

08004808 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <MX_TIM13_Init+0x40>)
 800480e:	4a0f      	ldr	r2, [pc, #60]	; (800484c <MX_TIM13_Init+0x44>)
 8004810:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000-1;
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <MX_TIM13_Init+0x40>)
 8004814:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8004818:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <MX_TIM13_Init+0x40>)
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <MX_TIM13_Init+0x40>)
 8004822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004826:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004828:	4b07      	ldr	r3, [pc, #28]	; (8004848 <MX_TIM13_Init+0x40>)
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <MX_TIM13_Init+0x40>)
 8004830:	2280      	movs	r2, #128	; 0x80
 8004832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004834:	4804      	ldr	r0, [pc, #16]	; (8004848 <MX_TIM13_Init+0x40>)
 8004836:	f003 fd7b 	bl	8008330 <HAL_TIM_Base_Init>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004840:	f000 fa1e 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000940 	.word	0x20000940
 800484c:	40001c00 	.word	0x40001c00

08004850 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <MX_TIM14_Init+0x40>)
 8004856:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <MX_TIM14_Init+0x44>)
 8004858:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <MX_TIM14_Init+0x40>)
 800485c:	2200      	movs	r2, #0
 800485e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <MX_TIM14_Init+0x40>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <MX_TIM14_Init+0x40>)
 8004868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800486c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800486e:	4b08      	ldr	r3, [pc, #32]	; (8004890 <MX_TIM14_Init+0x40>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <MX_TIM14_Init+0x40>)
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800487a:	4805      	ldr	r0, [pc, #20]	; (8004890 <MX_TIM14_Init+0x40>)
 800487c:	f003 fd58 	bl	8008330 <HAL_TIM_Base_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004886:	f000 f9fb 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000988 	.word	0x20000988
 8004894:	40002000 	.word	0x40002000

08004898 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <MX_UART5_Init+0x4c>)
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <MX_UART5_Init+0x50>)
 80048a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048a4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80048a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048be:	220c      	movs	r2, #12
 80048c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80048ce:	4805      	ldr	r0, [pc, #20]	; (80048e4 <MX_UART5_Init+0x4c>)
 80048d0:	f005 fbb0 	bl	800a034 <HAL_UART_Init>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80048da:	f000 f9d1 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000a30 	.word	0x20000a30
 80048e8:	40005000 	.word	0x40005000

080048ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <MX_USART1_UART_Init+0x50>)
 80048f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 80048f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004906:	2200      	movs	r2, #0
 8004908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004912:	220c      	movs	r2, #12
 8004914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004922:	4805      	ldr	r0, [pc, #20]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004924:	f005 fb86 	bl	800a034 <HAL_UART_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800492e:	f000 f9a7 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000a74 	.word	0x20000a74
 800493c:	40011000 	.word	0x40011000

08004940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <MX_USART2_UART_Init+0x50>)
 8004948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <MX_USART2_UART_Init+0x4c>)
 800494c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004954:	2200      	movs	r2, #0
 8004956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <MX_USART2_UART_Init+0x4c>)
 800495a:	2200      	movs	r2, #0
 800495c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004960:	2200      	movs	r2, #0
 8004962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004966:	220c      	movs	r2, #12
 8004968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <MX_USART2_UART_Init+0x4c>)
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004972:	2200      	movs	r2, #0
 8004974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004976:	4805      	ldr	r0, [pc, #20]	; (800498c <MX_USART2_UART_Init+0x4c>)
 8004978:	f005 fb5c 	bl	800a034 <HAL_UART_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004982:	f000 f97d 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000ab8 	.word	0x20000ab8
 8004990:	40004400 	.word	0x40004400

08004994 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <MX_USART3_UART_Init+0x50>)
 800499c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049ba:	220c      	movs	r2, #12
 80049bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80049ca:	4805      	ldr	r0, [pc, #20]	; (80049e0 <MX_USART3_UART_Init+0x4c>)
 80049cc:	f005 fb32 	bl	800a034 <HAL_UART_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80049d6:	f000 f953 	bl	8004c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000afc 	.word	0x20000afc
 80049e4:	40004800 	.word	0x40004800

080049e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <MX_DMA_Init+0x3c>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <MX_DMA_Init+0x3c>)
 80049f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049fc:	6313      	str	r3, [r2, #48]	; 0x30
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <MX_DMA_Init+0x3c>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	607b      	str	r3, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	202f      	movs	r0, #47	; 0x2f
 8004a10:	f001 fe09 	bl	8006626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004a14:	202f      	movs	r0, #47	; 0x2f
 8004a16:	f001 fe22 	bl	800665e <HAL_NVIC_EnableIRQ>

}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800

08004a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2e:	f107 0314 	add.w	r3, r7, #20
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	609a      	str	r2, [r3, #8]
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	4b64      	ldr	r3, [pc, #400]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a63      	ldr	r2, [pc, #396]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b61      	ldr	r3, [pc, #388]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b5d      	ldr	r3, [pc, #372]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4a5c      	ldr	r2, [pc, #368]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6a:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a55      	ldr	r2, [pc, #340]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	4b4f      	ldr	r3, [pc, #316]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	4a4e      	ldr	r2, [pc, #312]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa2:	4b4c      	ldr	r3, [pc, #304]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4a47      	ldr	r2, [pc, #284]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004ab8:	f043 0308 	orr.w	r3, r3, #8
 8004abc:	6313      	str	r3, [r2, #48]	; 0x30
 8004abe:	4b45      	ldr	r3, [pc, #276]	; (8004bd4 <MX_GPIO_Init+0x1ac>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2102      	movs	r1, #2
 8004ace:	4842      	ldr	r0, [pc, #264]	; (8004bd8 <MX_GPIO_Init+0x1b0>)
 8004ad0:	f002 fdaa 	bl	8007628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2122      	movs	r1, #34	; 0x22
 8004ad8:	4840      	ldr	r0, [pc, #256]	; (8004bdc <MX_GPIO_Init+0x1b4>)
 8004ada:	f002 fda5 	bl	8007628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f24e 0142 	movw	r1, #57410	; 0xe042
 8004ae4:	483e      	ldr	r0, [pc, #248]	; (8004be0 <MX_GPIO_Init+0x1b8>)
 8004ae6:	f002 fd9f 	bl	8007628 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 8004aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004af0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 8004afa:	f107 0314 	add.w	r3, r7, #20
 8004afe:	4619      	mov	r1, r3
 8004b00:	4835      	ldr	r0, [pc, #212]	; (8004bd8 <MX_GPIO_Init+0x1b0>)
 8004b02:	f002 fbe5 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8004b06:	2302      	movs	r3, #2
 8004b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8004b16:	f107 0314 	add.w	r3, r7, #20
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	482e      	ldr	r0, [pc, #184]	; (8004bd8 <MX_GPIO_Init+0x1b0>)
 8004b1e:	f002 fbd7 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8004b22:	2322      	movs	r3, #34	; 0x22
 8004b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	4619      	mov	r1, r3
 8004b38:	4828      	ldr	r0, [pc, #160]	; (8004bdc <MX_GPIO_Init+0x1b4>)
 8004b3a:	f002 fbc9 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8004b3e:	f24e 0342 	movw	r3, #57410	; 0xe042
 8004b42:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b50:	f107 0314 	add.w	r3, r7, #20
 8004b54:	4619      	mov	r1, r3
 8004b56:	4822      	ldr	r0, [pc, #136]	; (8004be0 <MX_GPIO_Init+0x1b8>)
 8004b58:	f002 fbba 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 8004b5c:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8004b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	4619      	mov	r1, r3
 8004b70:	481b      	ldr	r0, [pc, #108]	; (8004be0 <MX_GPIO_Init+0x1b8>)
 8004b72:	f002 fbad 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8004b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4814      	ldr	r0, [pc, #80]	; (8004bdc <MX_GPIO_Init+0x1b4>)
 8004b8c:	f002 fba0 	bl	80072d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b90:	2310      	movs	r3, #16
 8004b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b9e:	f107 0314 	add.w	r3, r7, #20
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	480e      	ldr	r0, [pc, #56]	; (8004be0 <MX_GPIO_Init+0x1b8>)
 8004ba6:	f002 fb93 	bl	80072d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	200a      	movs	r0, #10
 8004bb0:	f001 fd39 	bl	8006626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004bb4:	200a      	movs	r0, #10
 8004bb6:	f001 fd52 	bl	800665e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	2028      	movs	r0, #40	; 0x28
 8004bc0:	f001 fd31 	bl	8006626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bc4:	2028      	movs	r0, #40	; 0x28
 8004bc6:	f001 fd4a 	bl	800665e <HAL_NVIC_EnableIRQ>

}
 8004bca:	bf00      	nop
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40020800 	.word	0x40020800
 8004bdc:	40020000 	.word	0x40020000
 8004be0:	40020400 	.word	0x40020400

08004be4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)B_NUCLEO_ISR(&huart1);
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf4:	d102      	bne.n	8004bfc <HAL_GPIO_EXTI_Callback+0x18>
 8004bf6:	4806      	ldr	r0, [pc, #24]	; (8004c10 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004bf8:	f7fc fba6 	bl	8001348 <B_NUCLEO_ISR>
	if(GPIO_Pin == B1_Pin) B1_ISR(&huart1);
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d102      	bne.n	8004c08 <HAL_GPIO_EXTI_Callback+0x24>
 8004c02:	4803      	ldr	r0, [pc, #12]	; (8004c10 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004c04:	f7fc fb2c 	bl	8001260 <B1_ISR>
}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000a74 	.word	0x20000a74

08004c14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(&huart1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_UART_RxCpltCallback+0x30>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d103      	bne.n	8004c2c <HAL_UART_RxCpltCallback+0x18>
 8004c24:	4807      	ldr	r0, [pc, #28]	; (8004c44 <HAL_UART_RxCpltCallback+0x30>)
 8004c26:	f7fc faf7 	bl	8001218 <Uart_Receive_From_PC_ISR>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
}
 8004c2a:	e007      	b.n	8004c3c <HAL_UART_RxCpltCallback+0x28>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <HAL_UART_RxCpltCallback+0x34>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d103      	bne.n	8004c3c <HAL_UART_RxCpltCallback+0x28>
 8004c34:	4903      	ldr	r1, [pc, #12]	; (8004c44 <HAL_UART_RxCpltCallback+0x30>)
 8004c36:	4804      	ldr	r0, [pc, #16]	; (8004c48 <HAL_UART_RxCpltCallback+0x34>)
 8004c38:	f7fd f8a2 	bl	8001d80 <Uart_Receive_Thunderboard_ISR>
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000a74 	.word	0x20000a74
 8004c48:	20000afc 	.word	0x20000afc

08004c4c <Delay>:

void Delay(uint16_t ms)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
	TIM13->CNT=0;
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <Delay+0x2c>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		if(__HAL_TIM_GET_COUNTER(&htim13)>ms)break;
 8004c5c:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <Delay+0x30>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d800      	bhi.n	8004c6a <Delay+0x1e>
 8004c68:	e7f8      	b.n	8004c5c <Delay+0x10>
 8004c6a:	bf00      	nop
	}

}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40001c00 	.word	0x40001c00
 8004c7c:	20000940 	.word	0x20000940

08004c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004c84:	b672      	cpsid	i
}
 8004c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c88:	e7fe      	b.n	8004c88 <Error_Handler+0x8>
	...

08004c8c <Remote_Control_Init>:
#include <stdlib.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <Remote_Control_Init+0x34>)
 8004c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c9c:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 8004c9e:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <Remote_Control_Init+0x34>)
 8004ca0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ca4:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <Remote_Control_Init+0x34>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8004cac:	2303      	movs	r3, #3
 8004cae:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <Remote_Control_Init+0x34>)
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f003 fd70 	bl	8008798 <HAL_TIM_IC_Start_DMA>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000b44 	.word	0x20000b44

08004cc4 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 8004cd2:	4b50      	ldr	r3, [pc, #320]	; (8004e14 <Remote_Control_Task+0x150>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	f0c0 8096 	bcc.w	8004e0a <Remote_Control_Task+0x146>
	remote_control_tick = tick + period;
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	4a4b      	ldr	r2, [pc, #300]	; (8004e14 <Remote_Control_Task+0x150>)
 8004ce6:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8004ce8:	201e      	movs	r0, #30
 8004cea:	f001 fcc6 	bl	800667a <HAL_NVIC_DisableIRQ>
	dt0=abs((int)tEdge[1]-tEdge[0]);
 8004cee:	4b4a      	ldr	r3, [pc, #296]	; (8004e18 <Remote_Control_Task+0x154>)
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <Remote_Control_Task+0x154>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb8      	it	lt
 8004cfc:	425b      	neglt	r3, r3
 8004cfe:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <Remote_Control_Task+0x158>)
 8004d00:	6013      	str	r3, [r2, #0]
	dt1=abs((int)tEdge[2]-tEdge[1]);
 8004d02:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <Remote_Control_Task+0x154>)
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	4b44      	ldr	r3, [pc, #272]	; (8004e18 <Remote_Control_Task+0x154>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bfb8      	it	lt
 8004d10:	425b      	neglt	r3, r3
 8004d12:	4a43      	ldr	r2, [pc, #268]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004d14:	6013      	str	r3, [r2, #0]
	dt2=abs((int)tEdge[0]-tEdge[2]);
 8004d16:	4b40      	ldr	r3, [pc, #256]	; (8004e18 <Remote_Control_Task+0x154>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <Remote_Control_Task+0x154>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bfb8      	it	lt
 8004d24:	425b      	neglt	r3, r3
 8004d26:	4a3f      	ldr	r2, [pc, #252]	; (8004e24 <Remote_Control_Task+0x160>)
 8004d28:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8004d2a:	201e      	movs	r0, #30
 8004d2c:	f001 fc97 	bl	800665e <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8004d30:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <Remote_Control_Task+0x158>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	dd06      	ble.n	8004d4a <Remote_Control_Task+0x86>
 8004d3c:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <Remote_Control_Task+0x158>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004d44:	33ff      	adds	r3, #255	; 0xff
 8004d46:	4a35      	ldr	r2, [pc, #212]	; (8004e1c <Remote_Control_Task+0x158>)
 8004d48:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8004d4a:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	dd06      	ble.n	8004d64 <Remote_Control_Task+0xa0>
 8004d56:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004d5e:	33ff      	adds	r3, #255	; 0xff
 8004d60:	4a2f      	ldr	r2, [pc, #188]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004d62:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8004d64:	4b2f      	ldr	r3, [pc, #188]	; (8004e24 <Remote_Control_Task+0x160>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	dd06      	ble.n	8004d7e <Remote_Control_Task+0xba>
 8004d70:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <Remote_Control_Task+0x160>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004d78:	33ff      	adds	r3, #255	; 0xff
 8004d7a:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <Remote_Control_Task+0x160>)
 8004d7c:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 8004d7e:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <Remote_Control_Task+0x158>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	da0b      	bge.n	8004da2 <Remote_Control_Task+0xde>
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <Remote_Control_Task+0x158>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <Remote_Control_Task+0x160>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	da05      	bge.n	8004da2 <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8004d96:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <Remote_Control_Task+0x158>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <Remote_Control_Task+0x164>)
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e016      	b.n	8004dd0 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8004da2:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <Remote_Control_Task+0x158>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	da0b      	bge.n	8004dc6 <Remote_Control_Task+0x102>
 8004dae:	4b1c      	ldr	r3, [pc, #112]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <Remote_Control_Task+0x160>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	da05      	bge.n	8004dc6 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8004dba:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <Remote_Control_Task+0x15c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <Remote_Control_Task+0x164>)
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e004      	b.n	8004dd0 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8004dc6:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <Remote_Control_Task+0x160>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <Remote_Control_Task+0x164>)
 8004dce:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 8004dd0:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <Remote_Control_Task+0x164>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b46      	cmp	r3, #70	; 0x46
 8004dd6:	d903      	bls.n	8004de0 <Remote_Control_Task+0x11c>
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <Remote_Control_Task+0x164>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b63      	cmp	r3, #99	; 0x63
 8004dde:	d904      	bls.n	8004dea <Remote_Control_Task+0x126>
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <Remote_Control_Task+0x164>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de8:	d103      	bne.n	8004df2 <Remote_Control_Task+0x12e>
	{
		//LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <Remote_Control_Task+0x168>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	e00c      	b.n	8004e0c <Remote_Control_Task+0x148>
	}
	else
	{
		//LED_R(0);
		if(tLow <= 70) motorEnRemote=1;
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <Remote_Control_Task+0x164>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b46      	cmp	r3, #70	; 0x46
 8004df8:	d803      	bhi.n	8004e02 <Remote_Control_Task+0x13e>
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <Remote_Control_Task+0x168>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e004      	b.n	8004e0c <Remote_Control_Task+0x148>
		else motorEnRemote=2;
 8004e02:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <Remote_Control_Task+0x168>)
 8004e04:	2202      	movs	r2, #2
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e000      	b.n	8004e0c <Remote_Control_Task+0x148>
	if(remote_control_tick>tick) return;
 8004e0a:	bf00      	nop
	}
}
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000b50 	.word	0x20000b50
 8004e18:	20000b44 	.word	0x20000b44
 8004e1c:	2000007c 	.word	0x2000007c
 8004e20:	20000080 	.word	0x20000080
 8004e24:	20000084 	.word	0x20000084
 8004e28:	20000088 	.word	0x20000088
 8004e2c:	20000b40 	.word	0x20000b40

08004e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e44:	6453      	str	r3, [r2, #68]	; 0x44
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_MspInit+0x4c>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004e6e:	2007      	movs	r0, #7
 8004e70:	f001 fbce 	bl	8006610 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40023800 	.word	0x40023800

08004e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	; 0x30
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e88:	f107 031c 	add.w	r3, r7, #28
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	; (8004f58 <HAL_ADC_MspInit+0xd8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d128      	bne.n	8004ef4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8004ee6:	f107 031c 	add.w	r3, r7, #28
 8004eea:	4619      	mov	r1, r3
 8004eec:	481c      	ldr	r0, [pc, #112]	; (8004f60 <HAL_ADC_MspInit+0xe0>)
 8004eee:	f002 f9ef 	bl	80072d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004ef2:	e02c      	b.n	8004f4e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <HAL_ADC_MspInit+0xe4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d127      	bne.n	8004f4e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004f08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a0e      	ldr	r2, [pc, #56]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <HAL_ADC_MspInit+0xdc>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 8004f36:	2308      	movs	r3, #8
 8004f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8004f42:	f107 031c 	add.w	r3, r7, #28
 8004f46:	4619      	mov	r1, r3
 8004f48:	4807      	ldr	r0, [pc, #28]	; (8004f68 <HAL_ADC_MspInit+0xe8>)
 8004f4a:	f002 f9c1 	bl	80072d0 <HAL_GPIO_Init>
}
 8004f4e:	bf00      	nop
 8004f50:	3730      	adds	r7, #48	; 0x30
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40012000 	.word	0x40012000
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40020400 	.word	0x40020400
 8004f64:	40012100 	.word	0x40012100
 8004f68:	40020800 	.word	0x40020800

08004f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b090      	sub	sp, #64	; 0x40
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a72      	ldr	r2, [pc, #456]	; (8005154 <HAL_TIM_Base_MspInit+0x1e8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d10e      	bne.n	8004fac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f92:	4b71      	ldr	r3, [pc, #452]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	4a70      	ldr	r2, [pc, #448]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9e:	4b6e      	ldr	r3, [pc, #440]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004faa:	e0cf      	b.n	800514c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d116      	bne.n	8004fe4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fba:	4b67      	ldr	r3, [pc, #412]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	4a66      	ldr	r2, [pc, #408]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc6:	4b64      	ldr	r3, [pc, #400]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	201c      	movs	r0, #28
 8004fd8:	f001 fb25 	bl	8006626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004fdc:	201c      	movs	r0, #28
 8004fde:	f001 fb3e 	bl	800665e <HAL_NVIC_EnableIRQ>
}
 8004fe2:	e0b3      	b.n	800514c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM3)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5c      	ldr	r2, [pc, #368]	; (800515c <HAL_TIM_Base_MspInit+0x1f0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	4b59      	ldr	r3, [pc, #356]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4a58      	ldr	r2, [pc, #352]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffe:	4b56      	ldr	r3, [pc, #344]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	623b      	str	r3, [r7, #32]
 8005008:	6a3b      	ldr	r3, [r7, #32]
}
 800500a:	e09f      	b.n	800514c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM4)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a53      	ldr	r2, [pc, #332]	; (8005160 <HAL_TIM_Base_MspInit+0x1f4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d15f      	bne.n	80050d6 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	4a4e      	ldr	r2, [pc, #312]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005020:	f043 0304 	orr.w	r3, r3, #4
 8005024:	6413      	str	r3, [r2, #64]	; 0x40
 8005026:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	4b48      	ldr	r3, [pc, #288]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	4a47      	ldr	r2, [pc, #284]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	6313      	str	r3, [r2, #48]	; 0x30
 8005042:	4b45      	ldr	r3, [pc, #276]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 800504e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005054:	2302      	movs	r3, #2
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005058:	2300      	movs	r3, #0
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505c:	2300      	movs	r3, #0
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005060:	2302      	movs	r3, #2
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005068:	4619      	mov	r1, r3
 800506a:	483e      	ldr	r0, [pc, #248]	; (8005164 <HAL_TIM_Base_MspInit+0x1f8>)
 800506c:	f002 f930 	bl	80072d0 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8005070:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 8005072:	4a3e      	ldr	r2, [pc, #248]	; (800516c <HAL_TIM_Base_MspInit+0x200>)
 8005074:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8005076:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 8005078:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800507c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800507e:	4b3a      	ldr	r3, [pc, #232]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 8005080:	2200      	movs	r2, #0
 8005082:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005084:	4b38      	ldr	r3, [pc, #224]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 8005086:	2200      	movs	r2, #0
 8005088:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800508a:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 800508c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005090:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005092:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 8005094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005098:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800509a:	4b33      	ldr	r3, [pc, #204]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 800509c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050a0:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80050a2:	4b31      	ldr	r3, [pc, #196]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 80050a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050a8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 80050ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050b0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050b2:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80050b8:	482b      	ldr	r0, [pc, #172]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 80050ba:	f001 faf9 	bl	80066b0 <HAL_DMA_Init>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 80050c4:	f7ff fddc 	bl	8004c80 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a27      	ldr	r2, [pc, #156]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ce:	4a26      	ldr	r2, [pc, #152]	; (8005168 <HAL_TIM_Base_MspInit+0x1fc>)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80050d4:	e03a      	b.n	800514c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM5)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a25      	ldr	r2, [pc, #148]	; (8005170 <HAL_TIM_Base_MspInit+0x204>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10e      	bne.n	80050fe <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 80050ea:	f043 0308 	orr.w	r3, r3, #8
 80050ee:	6413      	str	r3, [r2, #64]	; 0x40
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	697b      	ldr	r3, [r7, #20]
}
 80050fc:	e026      	b.n	800514c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM13)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_TIM_Base_MspInit+0x208>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d10e      	bne.n	8005126 <HAL_TIM_Base_MspInit+0x1ba>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005108:	2300      	movs	r3, #0
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	4a11      	ldr	r2, [pc, #68]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005116:	6413      	str	r3, [r2, #64]	; 0x40
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	693b      	ldr	r3, [r7, #16]
}
 8005124:	e012      	b.n	800514c <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM14)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a13      	ldr	r2, [pc, #76]	; (8005178 <HAL_TIM_Base_MspInit+0x20c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10d      	bne.n	800514c <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	4a07      	ldr	r2, [pc, #28]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 800513a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513e:	6413      	str	r3, [r2, #64]	; 0x40
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_TIM_Base_MspInit+0x1ec>)
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	bf00      	nop
 800514e:	3740      	adds	r7, #64	; 0x40
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40010000 	.word	0x40010000
 8005158:	40023800 	.word	0x40023800
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40020400 	.word	0x40020400
 8005168:	200009d0 	.word	0x200009d0
 800516c:	400260b8 	.word	0x400260b8
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40001c00 	.word	0x40001c00
 8005178:	40002000 	.word	0x40002000

0800517c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a19      	ldr	r2, [pc, #100]	; (8005200 <HAL_TIM_Encoder_MspInit+0x84>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d12b      	bne.n	80051f6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <HAL_TIM_Encoder_MspInit+0x88>)
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_TIM_Encoder_MspInit+0x88>)
 80051a8:	f043 0302 	orr.w	r3, r3, #2
 80051ac:	6453      	str	r3, [r2, #68]	; 0x44
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <HAL_TIM_Encoder_MspInit+0x88>)
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_TIM_Encoder_MspInit+0x88>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <HAL_TIM_Encoder_MspInit+0x88>)
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <HAL_TIM_Encoder_MspInit+0x88>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051d6:	23c0      	movs	r3, #192	; 0xc0
 80051d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051da:	2302      	movs	r3, #2
 80051dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80051e6:	2303      	movs	r3, #3
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ea:	f107 0314 	add.w	r3, r7, #20
 80051ee:	4619      	mov	r1, r3
 80051f0:	4805      	ldr	r0, [pc, #20]	; (8005208 <HAL_TIM_Encoder_MspInit+0x8c>)
 80051f2:	f002 f86d 	bl	80072d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80051f6:	bf00      	nop
 80051f8:	3728      	adds	r7, #40	; 0x28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40010400 	.word	0x40010400
 8005204:	40023800 	.word	0x40023800
 8005208:	40020800 	.word	0x40020800

0800520c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005214:	f107 0314 	add.w	r3, r7, #20
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a37      	ldr	r2, [pc, #220]	; (8005308 <HAL_TIM_MspPostInit+0xfc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d11f      	bne.n	800526e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	4b36      	ldr	r3, [pc, #216]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	4a35      	ldr	r2, [pc, #212]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6313      	str	r3, [r2, #48]	; 0x30
 800523e:	4b33      	ldr	r3, [pc, #204]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 800524a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800524e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005250:	2302      	movs	r3, #2
 8005252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005258:	2300      	movs	r3, #0
 800525a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800525c:	2301      	movs	r3, #1
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	4619      	mov	r1, r3
 8005266:	482a      	ldr	r0, [pc, #168]	; (8005310 <HAL_TIM_MspPostInit+0x104>)
 8005268:	f002 f832 	bl	80072d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800526c:	e047      	b.n	80052fe <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005276:	d11f      	bne.n	80052b8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	4b23      	ldr	r3, [pc, #140]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6313      	str	r3, [r2, #48]	; 0x30
 8005288:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8005294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529a:	2302      	movs	r3, #2
 800529c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052a6:	2301      	movs	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 80052aa:	f107 0314 	add.w	r3, r7, #20
 80052ae:	4619      	mov	r1, r3
 80052b0:	4817      	ldr	r0, [pc, #92]	; (8005310 <HAL_TIM_MspPostInit+0x104>)
 80052b2:	f002 f80d 	bl	80072d0 <HAL_GPIO_Init>
}
 80052b6:	e022      	b.n	80052fe <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a15      	ldr	r2, [pc, #84]	; (8005314 <HAL_TIM_MspPostInit+0x108>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d11d      	bne.n	80052fe <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	4a10      	ldr	r2, [pc, #64]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6313      	str	r3, [r2, #48]	; 0x30
 80052d2:	4b0e      	ldr	r3, [pc, #56]	; (800530c <HAL_TIM_MspPostInit+0x100>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 80052de:	23c0      	movs	r3, #192	; 0xc0
 80052e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ea:	2300      	movs	r3, #0
 80052ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052ee:	2302      	movs	r3, #2
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	4619      	mov	r1, r3
 80052f8:	4805      	ldr	r0, [pc, #20]	; (8005310 <HAL_TIM_MspPostInit+0x104>)
 80052fa:	f001 ffe9 	bl	80072d0 <HAL_GPIO_Init>
}
 80052fe:	bf00      	nop
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40023800 	.word	0x40023800
 8005310:	40020000 	.word	0x40020000
 8005314:	40000400 	.word	0x40000400

08005318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b090      	sub	sp, #64	; 0x40
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a7c      	ldr	r2, [pc, #496]	; (8005528 <HAL_UART_MspInit+0x210>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d14b      	bne.n	80053d2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
 800533e:	4b7b      	ldr	r3, [pc, #492]	; (800552c <HAL_UART_MspInit+0x214>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	4a7a      	ldr	r2, [pc, #488]	; (800552c <HAL_UART_MspInit+0x214>)
 8005344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005348:	6413      	str	r3, [r2, #64]	; 0x40
 800534a:	4b78      	ldr	r3, [pc, #480]	; (800552c <HAL_UART_MspInit+0x214>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	4b74      	ldr	r3, [pc, #464]	; (800552c <HAL_UART_MspInit+0x214>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	4a73      	ldr	r2, [pc, #460]	; (800552c <HAL_UART_MspInit+0x214>)
 8005360:	f043 0304 	orr.w	r3, r3, #4
 8005364:	6313      	str	r3, [r2, #48]	; 0x30
 8005366:	4b71      	ldr	r3, [pc, #452]	; (800552c <HAL_UART_MspInit+0x214>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	4b6d      	ldr	r3, [pc, #436]	; (800552c <HAL_UART_MspInit+0x214>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	4a6c      	ldr	r2, [pc, #432]	; (800552c <HAL_UART_MspInit+0x214>)
 800537c:	f043 0308 	orr.w	r3, r3, #8
 8005380:	6313      	str	r3, [r2, #48]	; 0x30
 8005382:	4b6a      	ldr	r3, [pc, #424]	; (800552c <HAL_UART_MspInit+0x214>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 800538e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80053a0:	2308      	movs	r3, #8
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 80053a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a8:	4619      	mov	r1, r3
 80053aa:	4861      	ldr	r0, [pc, #388]	; (8005530 <HAL_UART_MspInit+0x218>)
 80053ac:	f001 ff90 	bl	80072d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 80053b0:	2304      	movs	r3, #4
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b4:	2302      	movs	r3, #2
 80053b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053bc:	2303      	movs	r3, #3
 80053be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80053c0:	2308      	movs	r3, #8
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 80053c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053c8:	4619      	mov	r1, r3
 80053ca:	485a      	ldr	r0, [pc, #360]	; (8005534 <HAL_UART_MspInit+0x21c>)
 80053cc:	f001 ff80 	bl	80072d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80053d0:	e0a6      	b.n	8005520 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a58      	ldr	r2, [pc, #352]	; (8005538 <HAL_UART_MspInit+0x220>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d135      	bne.n	8005448 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	4b52      	ldr	r3, [pc, #328]	; (800552c <HAL_UART_MspInit+0x214>)
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	4a51      	ldr	r2, [pc, #324]	; (800552c <HAL_UART_MspInit+0x214>)
 80053e6:	f043 0310 	orr.w	r3, r3, #16
 80053ea:	6453      	str	r3, [r2, #68]	; 0x44
 80053ec:	4b4f      	ldr	r3, [pc, #316]	; (800552c <HAL_UART_MspInit+0x214>)
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	4b4b      	ldr	r3, [pc, #300]	; (800552c <HAL_UART_MspInit+0x214>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	4a4a      	ldr	r2, [pc, #296]	; (800552c <HAL_UART_MspInit+0x214>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6313      	str	r3, [r2, #48]	; 0x30
 8005408:	4b48      	ldr	r3, [pc, #288]	; (800552c <HAL_UART_MspInit+0x214>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8005414:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541a:	2302      	movs	r3, #2
 800541c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005422:	2303      	movs	r3, #3
 8005424:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005426:	2307      	movs	r3, #7
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800542e:	4619      	mov	r1, r3
 8005430:	4842      	ldr	r0, [pc, #264]	; (800553c <HAL_UART_MspInit+0x224>)
 8005432:	f001 ff4d 	bl	80072d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005436:	2200      	movs	r2, #0
 8005438:	2100      	movs	r1, #0
 800543a:	2025      	movs	r0, #37	; 0x25
 800543c:	f001 f8f3 	bl	8006626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005440:	2025      	movs	r0, #37	; 0x25
 8005442:	f001 f90c 	bl	800665e <HAL_NVIC_EnableIRQ>
}
 8005446:	e06b      	b.n	8005520 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3c      	ldr	r2, [pc, #240]	; (8005540 <HAL_UART_MspInit+0x228>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d12c      	bne.n	80054ac <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_UART_MspInit+0x214>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a34      	ldr	r2, [pc, #208]	; (800552c <HAL_UART_MspInit+0x214>)
 800545c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
 8005462:	4b32      	ldr	r3, [pc, #200]	; (800552c <HAL_UART_MspInit+0x214>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	4b2e      	ldr	r3, [pc, #184]	; (800552c <HAL_UART_MspInit+0x214>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	4a2d      	ldr	r2, [pc, #180]	; (800552c <HAL_UART_MspInit+0x214>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	6313      	str	r3, [r2, #48]	; 0x30
 800547e:	4b2b      	ldr	r3, [pc, #172]	; (800552c <HAL_UART_MspInit+0x214>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800548a:	230c      	movs	r3, #12
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548e:	2302      	movs	r3, #2
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005492:	2300      	movs	r3, #0
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005496:	2303      	movs	r3, #3
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800549a:	2307      	movs	r3, #7
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054a2:	4619      	mov	r1, r3
 80054a4:	4825      	ldr	r0, [pc, #148]	; (800553c <HAL_UART_MspInit+0x224>)
 80054a6:	f001 ff13 	bl	80072d0 <HAL_GPIO_Init>
}
 80054aa:	e039      	b.n	8005520 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a24      	ldr	r2, [pc, #144]	; (8005544 <HAL_UART_MspInit+0x22c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d134      	bne.n	8005520 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <HAL_UART_MspInit+0x214>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a1b      	ldr	r2, [pc, #108]	; (800552c <HAL_UART_MspInit+0x214>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_UART_MspInit+0x214>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <HAL_UART_MspInit+0x214>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4a14      	ldr	r2, [pc, #80]	; (800552c <HAL_UART_MspInit+0x214>)
 80054dc:	f043 0304 	orr.w	r3, r3, #4
 80054e0:	6313      	str	r3, [r2, #48]	; 0x30
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_UART_MspInit+0x214>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 80054ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f4:	2302      	movs	r3, #2
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054fc:	2303      	movs	r3, #3
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005500:	2307      	movs	r3, #7
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005508:	4619      	mov	r1, r3
 800550a:	4809      	ldr	r0, [pc, #36]	; (8005530 <HAL_UART_MspInit+0x218>)
 800550c:	f001 fee0 	bl	80072d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005510:	2200      	movs	r2, #0
 8005512:	2100      	movs	r1, #0
 8005514:	2027      	movs	r0, #39	; 0x27
 8005516:	f001 f886 	bl	8006626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800551a:	2027      	movs	r0, #39	; 0x27
 800551c:	f001 f89f 	bl	800665e <HAL_NVIC_EnableIRQ>
}
 8005520:	bf00      	nop
 8005522:	3740      	adds	r7, #64	; 0x40
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40005000 	.word	0x40005000
 800552c:	40023800 	.word	0x40023800
 8005530:	40020800 	.word	0x40020800
 8005534:	40020c00 	.word	0x40020c00
 8005538:	40011000 	.word	0x40011000
 800553c:	40020000 	.word	0x40020000
 8005540:	40004400 	.word	0x40004400
 8005544:	40004800 	.word	0x40004800

08005548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800554c:	e7fe      	b.n	800554c <NMI_Handler+0x4>

0800554e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800554e:	b480      	push	{r7}
 8005550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005552:	e7fe      	b.n	8005552 <HardFault_Handler+0x4>

08005554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005558:	e7fe      	b.n	8005558 <MemManage_Handler+0x4>

0800555a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800555e:	e7fe      	b.n	800555e <BusFault_Handler+0x4>

08005560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005564:	e7fe      	b.n	8005564 <UsageFault_Handler+0x4>

08005566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005578:	bf00      	nop
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005582:	b480      	push	{r7}
 8005584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005594:	f000 f98e 	bl	80058b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}

0800559c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80055a0:	2010      	movs	r0, #16
 80055a2:	f002 f875 	bl	8007690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <TIM2_IRQHandler+0x10>)
 80055b2:	f003 fbcf 	bl	8008d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	200007d8 	.word	0x200007d8

080055c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <USART1_IRQHandler+0x10>)
 80055c6:	f004 fee7 	bl	800a398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000a74 	.word	0x20000a74

080055d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <USART3_IRQHandler+0x10>)
 80055da:	f004 fedd 	bl	800a398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000afc 	.word	0x20000afc

080055e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 80055ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055f0:	f002 f84e 	bl	8007690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055f4:	bf00      	nop
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80055fc:	4802      	ldr	r0, [pc, #8]	; (8005608 <DMA1_Stream7_IRQHandler+0x10>)
 80055fe:	f001 f9ef 	bl	80069e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005602:	bf00      	nop
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	200009d0 	.word	0x200009d0

0800560c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
	return 1;
 8005610:	2301      	movs	r3, #1
}
 8005612:	4618      	mov	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <_kill>:

int _kill(int pid, int sig)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005626:	f005 fe1f 	bl	800b268 <__errno>
 800562a:	4603      	mov	r3, r0
 800562c:	2216      	movs	r2, #22
 800562e:	601a      	str	r2, [r3, #0]
	return -1;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <_exit>:

void _exit (int status)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005644:	f04f 31ff 	mov.w	r1, #4294967295
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ffe7 	bl	800561c <_kill>
	while (1) {}		/* Make sure we hang here */
 800564e:	e7fe      	b.n	800564e <_exit+0x12>

08005650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e00a      	b.n	8005678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005662:	f3af 8000 	nop.w
 8005666:	4601      	mov	r1, r0
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	60ba      	str	r2, [r7, #8]
 800566e:	b2ca      	uxtb	r2, r1
 8005670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	3301      	adds	r3, #1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	dbf0      	blt.n	8005662 <_read+0x12>
	}

return len;
 8005680:	687b      	ldr	r3, [r7, #4]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e009      	b.n	80056b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	60ba      	str	r2, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	3301      	adds	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	dbf1      	blt.n	800569c <_write+0x12>
	}
	return len;
 80056b8:	687b      	ldr	r3, [r7, #4]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <_close>:

int _close(int file)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
	return -1;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056ea:	605a      	str	r2, [r3, #4]
	return 0;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <_isatty>:

int _isatty(int file)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
	return 1;
 8005702:	2301      	movs	r3, #1
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
	return 0;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005734:	4a14      	ldr	r2, [pc, #80]	; (8005788 <_sbrk+0x5c>)
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <_sbrk+0x60>)
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005740:	4b13      	ldr	r3, [pc, #76]	; (8005790 <_sbrk+0x64>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <_sbrk+0x64>)
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <_sbrk+0x68>)
 800574c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <_sbrk+0x64>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d207      	bcs.n	800576c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800575c:	f005 fd84 	bl	800b268 <__errno>
 8005760:	4603      	mov	r3, r0
 8005762:	220c      	movs	r2, #12
 8005764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	e009      	b.n	8005780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <_sbrk+0x64>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <_sbrk+0x64>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4413      	add	r3, r2
 800577a:	4a05      	ldr	r2, [pc, #20]	; (8005790 <_sbrk+0x64>)
 800577c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20020000 	.word	0x20020000
 800578c:	00000400 	.word	0x00000400
 8005790:	20000b54 	.word	0x20000b54
 8005794:	20000b90 	.word	0x20000b90

08005798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <SystemInit+0x20>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <SystemInit+0x20>)
 80057a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057ac:	bf00      	nop
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	e000ed00 	.word	0xe000ed00

080057bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 80057bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057c0:	480d      	ldr	r0, [pc, #52]	; (80057f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80057c2:	490e      	ldr	r1, [pc, #56]	; (80057fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057c4:	4a0e      	ldr	r2, [pc, #56]	; (8005800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057c8:	e002      	b.n	80057d0 <LoopCopyDataInit>

080057ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057ce:	3304      	adds	r3, #4

080057d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057d4:	d3f9      	bcc.n	80057ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057d6:	4a0b      	ldr	r2, [pc, #44]	; (8005804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057d8:	4c0b      	ldr	r4, [pc, #44]	; (8005808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80057da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057dc:	e001      	b.n	80057e2 <LoopFillZerobss>

080057de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057e0:	3204      	adds	r2, #4

080057e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057e4:	d3fb      	bcc.n	80057de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057e6:	f7ff ffd7 	bl	8005798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057ea:	f005 fd43 	bl	800b274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057ee:	f7fe fb61 	bl	8003eb4 <main>
  bx  lr    
 80057f2:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 80057f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057fc:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8005800:	0800fca8 	.word	0x0800fca8
  ldr r2, =_sbss
 8005804:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8005808:	20000b8c 	.word	0x20000b8c

0800580c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800580c:	e7fe      	b.n	800580c <ADC_IRQHandler>
	...

08005810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_Init+0x40>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a0d      	ldr	r2, [pc, #52]	; (8005850 <HAL_Init+0x40>)
 800581a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800581e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <HAL_Init+0x40>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <HAL_Init+0x40>)
 8005826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800582a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800582c:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_Init+0x40>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a07      	ldr	r2, [pc, #28]	; (8005850 <HAL_Init+0x40>)
 8005832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005838:	2003      	movs	r0, #3
 800583a:	f000 fee9 	bl	8006610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800583e:	2000      	movs	r0, #0
 8005840:	f000 f808 	bl	8005854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005844:	f7ff faf4 	bl	8004e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023c00 	.word	0x40023c00

08005854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800585c:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <HAL_InitTick+0x54>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_InitTick+0x58>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800586a:	fbb3 f3f1 	udiv	r3, r3, r1
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ff0f 	bl	8006696 <HAL_SYSTICK_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e00e      	b.n	80058a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b0f      	cmp	r3, #15
 8005886:	d80a      	bhi.n	800589e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005888:	2200      	movs	r2, #0
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	f000 fec9 	bl	8006626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <HAL_InitTick+0x5c>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e000      	b.n	80058a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	2000008c 	.word	0x2000008c
 80058ac:	20000094 	.word	0x20000094
 80058b0:	20000090 	.word	0x20000090

080058b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_IncTick+0x20>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <HAL_IncTick+0x24>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <HAL_IncTick+0x24>)
 80058c6:	6013      	str	r3, [r2, #0]
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000094 	.word	0x20000094
 80058d8:	20000b58 	.word	0x20000b58

080058dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return uwTick;
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_GetTick+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000b58 	.word	0x20000b58

080058f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058fc:	f7ff ffee 	bl	80058dc <HAL_GetTick>
 8005900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d005      	beq.n	800591a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_Delay+0x44>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800591a:	bf00      	nop
 800591c:	f7ff ffde 	bl	80058dc <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d8f7      	bhi.n	800591c <HAL_Delay+0x28>
  {
  }
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000094 	.word	0x20000094

0800593c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e033      	b.n	80059ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fa90 	bl	8004e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b00      	cmp	r3, #0
 8005978:	d118      	bne.n	80059ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005982:	f023 0302 	bic.w	r3, r3, #2
 8005986:	f043 0202 	orr.w	r2, r3, #2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fab4 	bl	8005efc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
 80059aa:	e001      	b.n	80059b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_ADC_Start+0x1a>
 80059da:	2302      	movs	r3, #2
 80059dc:	e0b2      	b.n	8005b44 <HAL_ADC_Start+0x180>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d018      	beq.n	8005a26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a04:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <HAL_ADC_Start+0x18c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a52      	ldr	r2, [pc, #328]	; (8005b54 <HAL_ADC_Start+0x190>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	0c9a      	lsrs	r2, r3, #18
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005a18:	e002      	b.n	8005a20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f9      	bne.n	8005a1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d17a      	bne.n	8005b2a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a72:	d106      	bne.n	8005a82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	f023 0206 	bic.w	r2, r3, #6
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	645a      	str	r2, [r3, #68]	; 0x44
 8005a80:	e002      	b.n	8005a88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a90:	4b31      	ldr	r3, [pc, #196]	; (8005b58 <HAL_ADC_Start+0x194>)
 8005a92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d12a      	bne.n	8005b00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <HAL_ADC_Start+0x198>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d015      	beq.n	8005ae0 <HAL_ADC_Start+0x11c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <HAL_ADC_Start+0x19c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d105      	bne.n	8005aca <HAL_ADC_Start+0x106>
 8005abe:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <HAL_ADC_Start+0x194>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a25      	ldr	r2, [pc, #148]	; (8005b64 <HAL_ADC_Start+0x1a0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d136      	bne.n	8005b42 <HAL_ADC_Start+0x17e>
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <HAL_ADC_Start+0x194>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d130      	bne.n	8005b42 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d129      	bne.n	8005b42 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	e020      	b.n	8005b42 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <HAL_ADC_Start+0x198>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d11b      	bne.n	8005b42 <HAL_ADC_Start+0x17e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d114      	bne.n	8005b42 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b26:	609a      	str	r2, [r3, #8]
 8005b28:	e00b      	b.n	8005b42 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f043 0210 	orr.w	r2, r3, #16
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	2000008c 	.word	0x2000008c
 8005b54:	431bde83 	.word	0x431bde83
 8005b58:	40012300 	.word	0x40012300
 8005b5c:	40012000 	.word	0x40012000
 8005b60:	40012100 	.word	0x40012100
 8005b64:	40012200 	.word	0x40012200

08005b68 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b84:	d113      	bne.n	8005bae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b94:	d10b      	bne.n	8005bae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e063      	b.n	8005c76 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005bae:	f7ff fe95 	bl	80058dc <HAL_GetTick>
 8005bb2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bb4:	e021      	b.n	8005bfa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d01d      	beq.n	8005bfa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_ADC_PollForConversion+0x6c>
 8005bc4:	f7ff fe8a 	bl	80058dc <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d212      	bcs.n	8005bfa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d00b      	beq.n	8005bfa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0204 	orr.w	r2, r3, #4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e03d      	b.n	8005c76 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d1d6      	bne.n	8005bb6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0212 	mvn.w	r2, #18
 8005c10:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d123      	bne.n	8005c74 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11f      	bne.n	8005c74 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d006      	beq.n	8005c50 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d111      	bne.n	8005c74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	f043 0201 	orr.w	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x1c>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e113      	b.n	8005edc <HAL_ADC_ConfigChannel+0x244>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d925      	bls.n	8005d10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68d9      	ldr	r1, [r3, #12]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3b1e      	subs	r3, #30
 8005cda:	2207      	movs	r2, #7
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43da      	mvns	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68d9      	ldr	r1, [r3, #12]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4403      	add	r3, r0
 8005d02:	3b1e      	subs	r3, #30
 8005d04:	409a      	lsls	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	e022      	b.n	8005d56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6919      	ldr	r1, [r3, #16]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4613      	mov	r3, r2
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	4413      	add	r3, r2
 8005d24:	2207      	movs	r2, #7
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	400a      	ands	r2, r1
 8005d32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6919      	ldr	r1, [r3, #16]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4618      	mov	r0, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4403      	add	r3, r0
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d824      	bhi.n	8005da8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3b05      	subs	r3, #5
 8005d70:	221f      	movs	r2, #31
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43da      	mvns	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	3b05      	subs	r3, #5
 8005d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34
 8005da6:	e04c      	b.n	8005e42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	d824      	bhi.n	8005dfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3b23      	subs	r3, #35	; 0x23
 8005dc2:	221f      	movs	r2, #31
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	43da      	mvns	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	400a      	ands	r2, r1
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4618      	mov	r0, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	3b23      	subs	r3, #35	; 0x23
 8005dec:	fa00 f203 	lsl.w	r2, r0, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
 8005df8:	e023      	b.n	8005e42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	3b41      	subs	r3, #65	; 0x41
 8005e0c:	221f      	movs	r2, #31
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	43da      	mvns	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	400a      	ands	r2, r1
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	4618      	mov	r0, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	3b41      	subs	r3, #65	; 0x41
 8005e36:	fa00 f203 	lsl.w	r2, r0, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <HAL_ADC_ConfigChannel+0x250>)
 8005e44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a28      	ldr	r2, [pc, #160]	; (8005eec <HAL_ADC_ConfigChannel+0x254>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10f      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x1d8>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b12      	cmp	r3, #18
 8005e56:	d10b      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <HAL_ADC_ConfigChannel+0x254>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d12b      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x23a>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <HAL_ADC_ConfigChannel+0x258>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <HAL_ADC_ConfigChannel+0x1f4>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b11      	cmp	r3, #17
 8005e8a:	d122      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a11      	ldr	r2, [pc, #68]	; (8005ef0 <HAL_ADC_ConfigChannel+0x258>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d111      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <HAL_ADC_ConfigChannel+0x25c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <HAL_ADC_ConfigChannel+0x260>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	0c9a      	lsrs	r2, r3, #18
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ec4:	e002      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f9      	bne.n	8005ec6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40012300 	.word	0x40012300
 8005eec:	40012000 	.word	0x40012000
 8005ef0:	10000012 	.word	0x10000012
 8005ef4:	2000008c 	.word	0x2000008c
 8005ef8:	431bde83 	.word	0x431bde83

08005efc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f04:	4b79      	ldr	r3, [pc, #484]	; (80060ec <ADC_Init+0x1f0>)
 8005f06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6859      	ldr	r1, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	021a      	lsls	r2, r3, #8
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6899      	ldr	r1, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	4a58      	ldr	r2, [pc, #352]	; (80060f0 <ADC_Init+0x1f4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d022      	beq.n	8005fda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6899      	ldr	r1, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	e00f      	b.n	8005ffa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ff8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0202 	bic.w	r2, r2, #2
 8006008:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6899      	ldr	r1, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7e1b      	ldrb	r3, [r3, #24]
 8006014:	005a      	lsls	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006036:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006046:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	3b01      	subs	r3, #1
 8006054:	035a      	lsls	r2, r3, #13
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	e007      	b.n	8006070 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800606e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	3b01      	subs	r3, #1
 800608c:	051a      	lsls	r2, r3, #20
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6899      	ldr	r1, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060b2:	025a      	lsls	r2, r3, #9
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6899      	ldr	r1, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	029a      	lsls	r2, r3, #10
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
}
 80060e0:	bf00      	nop
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40012300 	.word	0x40012300
 80060f0:	0f000001 	.word	0x0f000001

080060f4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e17e      	b.n	800640a <HAL_ADCEx_InjectedConfigChannel+0x316>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b09      	cmp	r3, #9
 800611a:	d925      	bls.n	8006168 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68d9      	ldr	r1, [r3, #12]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	4613      	mov	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4413      	add	r3, r2
 8006130:	3b1e      	subs	r3, #30
 8006132:	2207      	movs	r2, #7
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	43da      	mvns	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	400a      	ands	r2, r1
 8006140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68d9      	ldr	r1, [r3, #12]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	4618      	mov	r0, r3
 8006154:	4603      	mov	r3, r0
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	4403      	add	r3, r0
 800615a:	3b1e      	subs	r3, #30
 800615c:	409a      	lsls	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	e022      	b.n	80061ae <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6919      	ldr	r1, [r3, #16]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	4613      	mov	r3, r2
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	4413      	add	r3, r2
 800617c:	2207      	movs	r2, #7
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43da      	mvns	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	400a      	ands	r2, r1
 800618a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6919      	ldr	r1, [r3, #16]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	4618      	mov	r0, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	4403      	add	r3, r0
 80061a4:	409a      	lsls	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	051a      	lsls	r2, r3, #20
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	3303      	adds	r3, #3
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	221f      	movs	r2, #31
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43da      	mvns	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	400a      	ands	r2, r1
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	4618      	mov	r0, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	b2da      	uxtb	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	3303      	adds	r3, #3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	fa00 f203 	lsl.w	r2, r0, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	4a75      	ldr	r2, [pc, #468]	; (8006418 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d022      	beq.n	800628c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6899      	ldr	r1, [r3, #8]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	699a      	ldr	r2, [r3, #24]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6899      	ldr	r1, [r3, #8]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	69da      	ldr	r2, [r3, #28]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	e00f      	b.n	80062ac <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800629a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80062aa:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	7d5b      	ldrb	r3, [r3, #21]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062c2:	605a      	str	r2, [r3, #4]
 80062c4:	e007      	b.n	80062d6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	7d1b      	ldrb	r3, [r3, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	e007      	b.n	8006300 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062fe:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b03      	cmp	r3, #3
 8006306:	d02e      	beq.n	8006366 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006308:	2b03      	cmp	r3, #3
 800630a:	d840      	bhi.n	800638e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800630c:	2b01      	cmp	r3, #1
 800630e:	d002      	beq.n	8006316 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8006310:	2b02      	cmp	r3, #2
 8006312:	d014      	beq.n	800633e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006314:	e03b      	b.n	800638e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006324:	f023 030f 	bic.w	r3, r3, #15
 8006328:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6959      	ldr	r1, [r3, #20]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	615a      	str	r2, [r3, #20]
      break;
 800633c:	e03b      	b.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800634c:	f023 030f 	bic.w	r3, r3, #15
 8006350:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	619a      	str	r2, [r3, #24]
      break;
 8006364:	e027      	b.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006374:	f023 030f 	bic.w	r3, r3, #15
 8006378:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69d9      	ldr	r1, [r3, #28]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	61da      	str	r2, [r3, #28]
      break;
 800638c:	e013      	b.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800639c:	f023 030f 	bic.w	r3, r3, #15
 80063a0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a19      	ldr	r1, [r3, #32]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	621a      	str	r2, [r3, #32]
      break;
 80063b4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063b6:	4b19      	ldr	r3, [pc, #100]	; (800641c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80063b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d109      	bne.n	80063d8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b12      	cmp	r3, #18
 80063ca:	d105      	bne.n	80063d8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a10      	ldr	r2, [pc, #64]	; (8006420 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10e      	bne.n	8006400 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a0f      	ldr	r2, [pc, #60]	; (8006424 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b11      	cmp	r3, #17
 80063f2:	d105      	bne.n	8006400 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	000f0001 	.word	0x000f0001
 800641c:	40012300 	.word	0x40012300
 8006420:	40012000 	.word	0x40012000
 8006424:	10000012 	.word	0x10000012

08006428 <__NVIC_SetPriorityGrouping>:
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <__NVIC_SetPriorityGrouping+0x44>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006444:	4013      	ands	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800645a:	4a04      	ldr	r2, [pc, #16]	; (800646c <__NVIC_SetPriorityGrouping+0x44>)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	60d3      	str	r3, [r2, #12]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	e000ed00 	.word	0xe000ed00

08006470 <__NVIC_GetPriorityGrouping>:
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <__NVIC_GetPriorityGrouping+0x18>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	f003 0307 	and.w	r3, r3, #7
}
 800647e:	4618      	mov	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000ed00 	.word	0xe000ed00

0800648c <__NVIC_EnableIRQ>:
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	db0b      	blt.n	80064b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	f003 021f 	and.w	r2, r3, #31
 80064a4:	4907      	ldr	r1, [pc, #28]	; (80064c4 <__NVIC_EnableIRQ+0x38>)
 80064a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2001      	movs	r0, #1
 80064ae:	fa00 f202 	lsl.w	r2, r0, r2
 80064b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	e000e100 	.word	0xe000e100

080064c8 <__NVIC_DisableIRQ>:
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	db12      	blt.n	8006500 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	f003 021f 	and.w	r2, r3, #31
 80064e0:	490a      	ldr	r1, [pc, #40]	; (800650c <__NVIC_DisableIRQ+0x44>)
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	2001      	movs	r0, #1
 80064ea:	fa00 f202 	lsl.w	r2, r0, r2
 80064ee:	3320      	adds	r3, #32
 80064f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80064f4:	f3bf 8f4f 	dsb	sy
}
 80064f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80064fa:	f3bf 8f6f 	isb	sy
}
 80064fe:	bf00      	nop
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	e000e100 	.word	0xe000e100

08006510 <__NVIC_SetPriority>:
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800651c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006520:	2b00      	cmp	r3, #0
 8006522:	db0a      	blt.n	800653a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	490c      	ldr	r1, [pc, #48]	; (800655c <__NVIC_SetPriority+0x4c>)
 800652a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652e:	0112      	lsls	r2, r2, #4
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	440b      	add	r3, r1
 8006534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006538:	e00a      	b.n	8006550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	4908      	ldr	r1, [pc, #32]	; (8006560 <__NVIC_SetPriority+0x50>)
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	3b04      	subs	r3, #4
 8006548:	0112      	lsls	r2, r2, #4
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	440b      	add	r3, r1
 800654e:	761a      	strb	r2, [r3, #24]
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	e000e100 	.word	0xe000e100
 8006560:	e000ed00 	.word	0xe000ed00

08006564 <NVIC_EncodePriority>:
{
 8006564:	b480      	push	{r7}
 8006566:	b089      	sub	sp, #36	; 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f1c3 0307 	rsb	r3, r3, #7
 800657e:	2b04      	cmp	r3, #4
 8006580:	bf28      	it	cs
 8006582:	2304      	movcs	r3, #4
 8006584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3304      	adds	r3, #4
 800658a:	2b06      	cmp	r3, #6
 800658c:	d902      	bls.n	8006594 <NVIC_EncodePriority+0x30>
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3b03      	subs	r3, #3
 8006592:	e000      	b.n	8006596 <NVIC_EncodePriority+0x32>
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	43da      	mvns	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	401a      	ands	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065ac:	f04f 31ff 	mov.w	r1, #4294967295
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	fa01 f303 	lsl.w	r3, r1, r3
 80065b6:	43d9      	mvns	r1, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065bc:	4313      	orrs	r3, r2
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3724      	adds	r7, #36	; 0x24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
	...

080065cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065dc:	d301      	bcc.n	80065e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065de:	2301      	movs	r3, #1
 80065e0:	e00f      	b.n	8006602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <SysTick_Config+0x40>)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ea:	210f      	movs	r1, #15
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	f7ff ff8e 	bl	8006510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <SysTick_Config+0x40>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065fa:	4b04      	ldr	r3, [pc, #16]	; (800660c <SysTick_Config+0x40>)
 80065fc:	2207      	movs	r2, #7
 80065fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	e000e010 	.word	0xe000e010

08006610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff ff05 	bl	8006428 <__NVIC_SetPriorityGrouping>
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	4603      	mov	r3, r0
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006638:	f7ff ff1a 	bl	8006470 <__NVIC_GetPriorityGrouping>
 800663c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	6978      	ldr	r0, [r7, #20]
 8006644:	f7ff ff8e 	bl	8006564 <NVIC_EncodePriority>
 8006648:	4602      	mov	r2, r0
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664e:	4611      	mov	r1, r2
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff ff5d 	bl	8006510 <__NVIC_SetPriority>
}
 8006656:	bf00      	nop
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	4603      	mov	r3, r0
 8006666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff ff0d 	bl	800648c <__NVIC_EnableIRQ>
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	4603      	mov	r3, r0
 8006682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff ff1d 	bl	80064c8 <__NVIC_DisableIRQ>
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ff94 	bl	80065cc <SysTick_Config>
 80066a4:	4603      	mov	r3, r0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066bc:	f7ff f90e 	bl	80058dc <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e099      	b.n	8006800 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066ec:	e00f      	b.n	800670e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066ee:	f7ff f8f5 	bl	80058dc <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b05      	cmp	r3, #5
 80066fa:	d908      	bls.n	800670e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2203      	movs	r2, #3
 8006706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e078      	b.n	8006800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e8      	bne.n	80066ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4b38      	ldr	r3, [pc, #224]	; (8006808 <HAL_DMA_Init+0x158>)
 8006728:	4013      	ands	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800673a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b04      	cmp	r3, #4
 8006766:	d107      	bne.n	8006778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	4313      	orrs	r3, r2
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d117      	bne.n	80067d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00e      	beq.n	80067d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fb01 	bl	8006dbc <DMA_CheckFifoParam>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2240      	movs	r2, #64	; 0x40
 80067c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067ce:	2301      	movs	r3, #1
 80067d0:	e016      	b.n	8006800 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fab8 	bl	8006d50 <DMA_CalcBaseAndBitshift>
 80067e0:	4603      	mov	r3, r0
 80067e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e8:	223f      	movs	r2, #63	; 0x3f
 80067ea:	409a      	lsls	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	f010803f 	.word	0xf010803f

0800680c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_DMA_Start_IT+0x26>
 800682e:	2302      	movs	r3, #2
 8006830:	e040      	b.n	80068b4 <HAL_DMA_Start_IT+0xa8>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	d12f      	bne.n	80068a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fa4a 	bl	8006cf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	223f      	movs	r2, #63	; 0x3f
 8006866:	409a      	lsls	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0216 	orr.w	r2, r2, #22
 800687a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0208 	orr.w	r2, r2, #8
 8006892:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e005      	b.n	80068b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
 80068b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80068ca:	f7ff f807 	bl	80058dc <HAL_GetTick>
 80068ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d008      	beq.n	80068ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2280      	movs	r2, #128	; 0x80
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e052      	b.n	8006994 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0216 	bic.w	r2, r2, #22
 80068fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800690c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <HAL_DMA_Abort+0x62>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0208 	bic.w	r2, r2, #8
 800692c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800693e:	e013      	b.n	8006968 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006940:	f7fe ffcc 	bl	80058dc <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b05      	cmp	r3, #5
 800694c:	d90c      	bls.n	8006968 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2203      	movs	r2, #3
 8006958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e015      	b.n	8006994 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e4      	bne.n	8006940 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	223f      	movs	r2, #63	; 0x3f
 800697c:	409a      	lsls	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d004      	beq.n	80069ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2280      	movs	r2, #128	; 0x80
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e00c      	b.n	80069d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2205      	movs	r2, #5
 80069be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069ec:	4b8e      	ldr	r3, [pc, #568]	; (8006c28 <HAL_DMA_IRQHandler+0x248>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a8e      	ldr	r2, [pc, #568]	; (8006c2c <HAL_DMA_IRQHandler+0x24c>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	0a9b      	lsrs	r3, r3, #10
 80069f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4013      	ands	r3, r2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d01a      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d013      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0204 	bic.w	r2, r2, #4
 8006a32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a38:	2208      	movs	r2, #8
 8006a3a:	409a      	lsls	r2, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a44:	f043 0201 	orr.w	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	2201      	movs	r2, #1
 8006a52:	409a      	lsls	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d012      	beq.n	8006a82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6e:	2201      	movs	r2, #1
 8006a70:	409a      	lsls	r2, r3
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	f043 0202 	orr.w	r2, r3, #2
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a86:	2204      	movs	r2, #4
 8006a88:	409a      	lsls	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d012      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	f043 0204 	orr.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abc:	2210      	movs	r2, #16
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d043      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d03c      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	2210      	movs	r2, #16
 8006adc:	409a      	lsls	r2, r3
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d018      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d108      	bne.n	8006b10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d024      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	e01f      	b.n	8006b50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01b      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
 8006b20:	e016      	b.n	8006b50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d107      	bne.n	8006b40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0208 	bic.w	r2, r2, #8
 8006b3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b54:	2220      	movs	r2, #32
 8006b56:	409a      	lsls	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 808f 	beq.w	8006c80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8087 	beq.w	8006c80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b76:	2220      	movs	r2, #32
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d136      	bne.n	8006bf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0216 	bic.w	r2, r2, #22
 8006b98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695a      	ldr	r2, [r3, #20]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ba8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <HAL_DMA_IRQHandler+0x1da>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0208 	bic.w	r2, r2, #8
 8006bc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	223f      	movs	r2, #63	; 0x3f
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d07e      	beq.n	8006cec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
        }
        return;
 8006bf6:	e079      	b.n	8006cec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01d      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10d      	bne.n	8006c30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d031      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
 8006c24:	e02c      	b.n	8006c80 <HAL_DMA_IRQHandler+0x2a0>
 8006c26:	bf00      	nop
 8006c28:	2000008c 	.word	0x2000008c
 8006c2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d023      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
 8006c40:	e01e      	b.n	8006c80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10f      	bne.n	8006c70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0210 	bic.w	r2, r2, #16
 8006c5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d032      	beq.n	8006cee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d022      	beq.n	8006cda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2205      	movs	r2, #5
 8006c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0201 	bic.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d307      	bcc.n	8006cc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f2      	bne.n	8006cac <HAL_DMA_IRQHandler+0x2cc>
 8006cc6:	e000      	b.n	8006cca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006cc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
 8006cea:	e000      	b.n	8006cee <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cec:	bf00      	nop
    }
  }
}
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d108      	bne.n	8006d34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d32:	e007      	b.n	8006d44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	3b10      	subs	r3, #16
 8006d60:	4a14      	ldr	r2, [pc, #80]	; (8006db4 <DMA_CalcBaseAndBitshift+0x64>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	091b      	lsrs	r3, r3, #4
 8006d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d6a:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <DMA_CalcBaseAndBitshift+0x68>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d909      	bls.n	8006d92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d86:	f023 0303 	bic.w	r3, r3, #3
 8006d8a:	1d1a      	adds	r2, r3, #4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8006d90:	e007      	b.n	8006da2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	aaaaaaab 	.word	0xaaaaaaab
 8006db8:	0800f69c 	.word	0x0800f69c

08006dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d11f      	bne.n	8006e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d856      	bhi.n	8006e8a <DMA_CheckFifoParam+0xce>
 8006ddc:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <DMA_CheckFifoParam+0x28>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e07 	.word	0x08006e07
 8006dec:	08006df5 	.word	0x08006df5
 8006df0:	08006e8b 	.word	0x08006e8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d046      	beq.n	8006e8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e04:	e043      	b.n	8006e8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e0e:	d140      	bne.n	8006e92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e14:	e03d      	b.n	8006e92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1e:	d121      	bne.n	8006e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d837      	bhi.n	8006e96 <DMA_CheckFifoParam+0xda>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <DMA_CheckFifoParam+0x70>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e43 	.word	0x08006e43
 8006e34:	08006e3d 	.word	0x08006e3d
 8006e38:	08006e55 	.word	0x08006e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e40:	e030      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d025      	beq.n	8006e9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e52:	e022      	b.n	8006e9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e5c:	d11f      	bne.n	8006e9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e62:	e01c      	b.n	8006e9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d903      	bls.n	8006e72 <DMA_CheckFifoParam+0xb6>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d003      	beq.n	8006e78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e70:	e018      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
      break;
 8006e76:	e015      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00e      	beq.n	8006ea2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
      break;
 8006e88:	e00b      	b.n	8006ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e00a      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e008      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e92:	bf00      	nop
 8006e94:	e006      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e96:	bf00      	nop
 8006e98:	e004      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8006ea2:	bf00      	nop
    }
  } 
  
  return status; 
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop

08006eb4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006ec6:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <HAL_FLASH_Program+0xa0>)
 8006ec8:	7e1b      	ldrb	r3, [r3, #24]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <HAL_FLASH_Program+0x1e>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e03b      	b.n	8006f4a <HAL_FLASH_Program+0x96>
 8006ed2:	4b20      	ldr	r3, [pc, #128]	; (8006f54 <HAL_FLASH_Program+0xa0>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006edc:	f000 f870 	bl	8006fc0 <FLASH_WaitForLastOperation>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d12b      	bne.n	8006f42 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006ef0:	783b      	ldrb	r3, [r7, #0]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	68b8      	ldr	r0, [r7, #8]
 8006ef6:	f000 f91b 	bl	8007130 <FLASH_Program_Byte>
 8006efa:	e016      	b.n	8006f2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d105      	bne.n	8006f0e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006f02:	883b      	ldrh	r3, [r7, #0]
 8006f04:	4619      	mov	r1, r3
 8006f06:	68b8      	ldr	r0, [r7, #8]
 8006f08:	f000 f8ee 	bl	80070e8 <FLASH_Program_HalfWord>
 8006f0c:	e00d      	b.n	8006f2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d105      	bne.n	8006f20 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	4619      	mov	r1, r3
 8006f18:	68b8      	ldr	r0, [r7, #8]
 8006f1a:	f000 f8c3 	bl	80070a4 <FLASH_Program_Word>
 8006f1e:	e004      	b.n	8006f2a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f24:	68b8      	ldr	r0, [r7, #8]
 8006f26:	f000 f88b 	bl	8007040 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006f2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006f2e:	f000 f847 	bl	8006fc0 <FLASH_WaitForLastOperation>
 8006f32:	4603      	mov	r3, r0
 8006f34:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <HAL_FLASH_Program+0xa4>)
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	4a07      	ldr	r2, [pc, #28]	; (8006f58 <HAL_FLASH_Program+0xa4>)
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006f42:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <HAL_FLASH_Program+0xa0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000b5c 	.word	0x20000b5c
 8006f58:	40023c00 	.word	0x40023c00

08006f5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_FLASH_Unlock+0x38>)
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da0b      	bge.n	8006f86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006f6e:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <HAL_FLASH_Unlock+0x38>)
 8006f70:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <HAL_FLASH_Unlock+0x3c>)
 8006f72:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006f74:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <HAL_FLASH_Unlock+0x38>)
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <HAL_FLASH_Unlock+0x40>)
 8006f78:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <HAL_FLASH_Unlock+0x38>)
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	da01      	bge.n	8006f86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006f86:	79fb      	ldrb	r3, [r7, #7]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	40023c00 	.word	0x40023c00
 8006f98:	45670123 	.word	0x45670123
 8006f9c:	cdef89ab 	.word	0xcdef89ab

08006fa0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <HAL_FLASH_Lock+0x1c>)
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <HAL_FLASH_Lock+0x1c>)
 8006faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	40023c00 	.word	0x40023c00

08006fc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <FLASH_WaitForLastOperation+0x78>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006fd2:	f7fe fc83 	bl	80058dc <HAL_GetTick>
 8006fd6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006fd8:	e010      	b.n	8006ffc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d00c      	beq.n	8006ffc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <FLASH_WaitForLastOperation+0x38>
 8006fe8:	f7fe fc78 	bl	80058dc <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d201      	bcs.n	8006ffc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e019      	b.n	8007030 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <FLASH_WaitForLastOperation+0x7c>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e8      	bne.n	8006fda <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <FLASH_WaitForLastOperation+0x7c>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <FLASH_WaitForLastOperation+0x7c>)
 8007016:	2201      	movs	r2, #1
 8007018:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800701a:	4b08      	ldr	r3, [pc, #32]	; (800703c <FLASH_WaitForLastOperation+0x7c>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007026:	f000 f8a5 	bl	8007174 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
  
}  
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20000b5c 	.word	0x20000b5c
 800703c:	40023c00 	.word	0x40023c00

08007040 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800704c:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <FLASH_Program_DoubleWord+0x60>)
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <FLASH_Program_DoubleWord+0x60>)
 8007052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007058:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <FLASH_Program_DoubleWord+0x60>)
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	4a10      	ldr	r2, [pc, #64]	; (80070a0 <FLASH_Program_DoubleWord+0x60>)
 800705e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007064:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <FLASH_Program_DoubleWord+0x60>)
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	4a0d      	ldr	r2, [pc, #52]	; (80070a0 <FLASH_Program_DoubleWord+0x60>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007076:	f3bf 8f6f 	isb	sy
}
 800707a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800707c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	000a      	movs	r2, r1
 800708a:	2300      	movs	r3, #0
 800708c:	68f9      	ldr	r1, [r7, #12]
 800708e:	3104      	adds	r1, #4
 8007090:	4613      	mov	r3, r2
 8007092:	600b      	str	r3, [r1, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40023c00 	.word	0x40023c00

080070a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <FLASH_Program_Word+0x40>)
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	4a0c      	ldr	r2, [pc, #48]	; (80070e4 <FLASH_Program_Word+0x40>)
 80070b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80070ba:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <FLASH_Program_Word+0x40>)
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <FLASH_Program_Word+0x40>)
 80070c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <FLASH_Program_Word+0x40>)
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	4a06      	ldr	r2, [pc, #24]	; (80070e4 <FLASH_Program_Word+0x40>)
 80070cc:	f043 0301 	orr.w	r3, r3, #1
 80070d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	601a      	str	r2, [r3, #0]
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	40023c00 	.word	0x40023c00

080070e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <FLASH_Program_HalfWord+0x44>)
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	4a0c      	ldr	r2, [pc, #48]	; (800712c <FLASH_Program_HalfWord+0x44>)
 80070fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007100:	4b0a      	ldr	r3, [pc, #40]	; (800712c <FLASH_Program_HalfWord+0x44>)
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	4a09      	ldr	r2, [pc, #36]	; (800712c <FLASH_Program_HalfWord+0x44>)
 8007106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800710a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800710c:	4b07      	ldr	r3, [pc, #28]	; (800712c <FLASH_Program_HalfWord+0x44>)
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	4a06      	ldr	r2, [pc, #24]	; (800712c <FLASH_Program_HalfWord+0x44>)
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	887a      	ldrh	r2, [r7, #2]
 800711c:	801a      	strh	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40023c00 	.word	0x40023c00

08007130 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800713c:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <FLASH_Program_Byte+0x40>)
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	4a0b      	ldr	r2, [pc, #44]	; (8007170 <FLASH_Program_Byte+0x40>)
 8007142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007146:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007148:	4b09      	ldr	r3, [pc, #36]	; (8007170 <FLASH_Program_Byte+0x40>)
 800714a:	4a09      	ldr	r2, [pc, #36]	; (8007170 <FLASH_Program_Byte+0x40>)
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007150:	4b07      	ldr	r3, [pc, #28]	; (8007170 <FLASH_Program_Byte+0x40>)
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	4a06      	ldr	r2, [pc, #24]	; (8007170 <FLASH_Program_Byte+0x40>)
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	701a      	strb	r2, [r3, #0]
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40023c00 	.word	0x40023c00

08007174 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007178:	4b2f      	ldr	r3, [pc, #188]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007184:	4b2d      	ldr	r3, [pc, #180]	; (800723c <FLASH_SetErrorCode+0xc8>)
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f043 0310 	orr.w	r3, r3, #16
 800718c:	4a2b      	ldr	r2, [pc, #172]	; (800723c <FLASH_SetErrorCode+0xc8>)
 800718e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007190:	4b29      	ldr	r3, [pc, #164]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 8007192:	2210      	movs	r2, #16
 8007194:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007196:	4b28      	ldr	r3, [pc, #160]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80071a2:	4b26      	ldr	r3, [pc, #152]	; (800723c <FLASH_SetErrorCode+0xc8>)
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	f043 0308 	orr.w	r3, r3, #8
 80071aa:	4a24      	ldr	r2, [pc, #144]	; (800723c <FLASH_SetErrorCode+0xc8>)
 80071ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80071ae:	4b22      	ldr	r3, [pc, #136]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 80071b0:	2220      	movs	r2, #32
 80071b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80071b4:	4b20      	ldr	r3, [pc, #128]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80071c0:	4b1e      	ldr	r3, [pc, #120]	; (800723c <FLASH_SetErrorCode+0xc8>)
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f043 0304 	orr.w	r3, r3, #4
 80071c8:	4a1c      	ldr	r2, [pc, #112]	; (800723c <FLASH_SetErrorCode+0xc8>)
 80071ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80071cc:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80071d2:	4b19      	ldr	r3, [pc, #100]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80071de:	4b17      	ldr	r3, [pc, #92]	; (800723c <FLASH_SetErrorCode+0xc8>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f043 0302 	orr.w	r3, r3, #2
 80071e6:	4a15      	ldr	r2, [pc, #84]	; (800723c <FLASH_SetErrorCode+0xc8>)
 80071e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80071ea:	4b13      	ldr	r3, [pc, #76]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 80071ec:	2280      	movs	r2, #128	; 0x80
 80071ee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80071f0:	4b11      	ldr	r3, [pc, #68]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80071fc:	4b0f      	ldr	r3, [pc, #60]	; (800723c <FLASH_SetErrorCode+0xc8>)
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	4a0d      	ldr	r2, [pc, #52]	; (800723c <FLASH_SetErrorCode+0xc8>)
 8007206:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 800720a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800720e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800721c:	4b07      	ldr	r3, [pc, #28]	; (800723c <FLASH_SetErrorCode+0xc8>)
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f043 0320 	orr.w	r3, r3, #32
 8007224:	4a05      	ldr	r2, [pc, #20]	; (800723c <FLASH_SetErrorCode+0xc8>)
 8007226:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <FLASH_SetErrorCode+0xc4>)
 800722a:	2202      	movs	r2, #2
 800722c:	60da      	str	r2, [r3, #12]
  }
}
 800722e:	bf00      	nop
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	40023c00 	.word	0x40023c00
 800723c:	20000b5c 	.word	0x20000b5c

08007240 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e010      	b.n	800727e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d103      	bne.n	800726a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e009      	b.n	800727e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d103      	bne.n	8007278 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e002      	b.n	800727e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007278:	f44f 7340 	mov.w	r3, #768	; 0x300
 800727c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800727e:	4b13      	ldr	r3, [pc, #76]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	4a12      	ldr	r2, [pc, #72]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 8007284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007288:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	490f      	ldr	r1, [pc, #60]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	4a0c      	ldr	r2, [pc, #48]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 800729c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80072a2:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	4313      	orrs	r3, r2
 80072ac:	4a07      	ldr	r2, [pc, #28]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 80072ae:	f043 0302 	orr.w	r3, r3, #2
 80072b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4a04      	ldr	r2, [pc, #16]	; (80072cc <FLASH_Erase_Sector+0x8c>)
 80072ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072be:	6113      	str	r3, [r2, #16]
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40023c00 	.word	0x40023c00

080072d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b089      	sub	sp, #36	; 0x24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072de:	2300      	movs	r3, #0
 80072e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072e6:	2300      	movs	r3, #0
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	e165      	b.n	80075b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072ec:	2201      	movs	r2, #1
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	fa02 f303 	lsl.w	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4013      	ands	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	429a      	cmp	r2, r3
 8007306:	f040 8154 	bne.w	80075b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b01      	cmp	r3, #1
 8007314:	d005      	beq.n	8007322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800731e:	2b02      	cmp	r3, #2
 8007320:	d130      	bne.n	8007384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	2203      	movs	r2, #3
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4013      	ands	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	4313      	orrs	r3, r2
 800734a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007358:	2201      	movs	r2, #1
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	fa02 f303 	lsl.w	r3, r2, r3
 8007360:	43db      	mvns	r3, r3
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	4013      	ands	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	091b      	lsrs	r3, r3, #4
 800736e:	f003 0201 	and.w	r2, r3, #1
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	4313      	orrs	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	2b03      	cmp	r3, #3
 800738e:	d017      	beq.n	80073c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	2203      	movs	r2, #3
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	43db      	mvns	r3, r3
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	4013      	ands	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d123      	bne.n	8007414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	08da      	lsrs	r2, r3, #3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3208      	adds	r2, #8
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	220f      	movs	r2, #15
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	43db      	mvns	r3, r3
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	4013      	ands	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4313      	orrs	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	08da      	lsrs	r2, r3, #3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3208      	adds	r2, #8
 800740e:	69b9      	ldr	r1, [r7, #24]
 8007410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	2203      	movs	r2, #3
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43db      	mvns	r3, r3
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	4013      	ands	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 0203 	and.w	r2, r3, #3
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4313      	orrs	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80ae 	beq.w	80075b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	4b5d      	ldr	r3, [pc, #372]	; (80075d0 <HAL_GPIO_Init+0x300>)
 800745c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745e:	4a5c      	ldr	r2, [pc, #368]	; (80075d0 <HAL_GPIO_Init+0x300>)
 8007460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007464:	6453      	str	r3, [r2, #68]	; 0x44
 8007466:	4b5a      	ldr	r3, [pc, #360]	; (80075d0 <HAL_GPIO_Init+0x300>)
 8007468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007472:	4a58      	ldr	r2, [pc, #352]	; (80075d4 <HAL_GPIO_Init+0x304>)
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	089b      	lsrs	r3, r3, #2
 8007478:	3302      	adds	r3, #2
 800747a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	220f      	movs	r2, #15
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	43db      	mvns	r3, r3
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	4013      	ands	r3, r2
 8007494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a4f      	ldr	r2, [pc, #316]	; (80075d8 <HAL_GPIO_Init+0x308>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d025      	beq.n	80074ea <HAL_GPIO_Init+0x21a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a4e      	ldr	r2, [pc, #312]	; (80075dc <HAL_GPIO_Init+0x30c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01f      	beq.n	80074e6 <HAL_GPIO_Init+0x216>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a4d      	ldr	r2, [pc, #308]	; (80075e0 <HAL_GPIO_Init+0x310>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d019      	beq.n	80074e2 <HAL_GPIO_Init+0x212>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a4c      	ldr	r2, [pc, #304]	; (80075e4 <HAL_GPIO_Init+0x314>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_GPIO_Init+0x20e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a4b      	ldr	r2, [pc, #300]	; (80075e8 <HAL_GPIO_Init+0x318>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00d      	beq.n	80074da <HAL_GPIO_Init+0x20a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a4a      	ldr	r2, [pc, #296]	; (80075ec <HAL_GPIO_Init+0x31c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <HAL_GPIO_Init+0x206>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a49      	ldr	r2, [pc, #292]	; (80075f0 <HAL_GPIO_Init+0x320>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d101      	bne.n	80074d2 <HAL_GPIO_Init+0x202>
 80074ce:	2306      	movs	r3, #6
 80074d0:	e00c      	b.n	80074ec <HAL_GPIO_Init+0x21c>
 80074d2:	2307      	movs	r3, #7
 80074d4:	e00a      	b.n	80074ec <HAL_GPIO_Init+0x21c>
 80074d6:	2305      	movs	r3, #5
 80074d8:	e008      	b.n	80074ec <HAL_GPIO_Init+0x21c>
 80074da:	2304      	movs	r3, #4
 80074dc:	e006      	b.n	80074ec <HAL_GPIO_Init+0x21c>
 80074de:	2303      	movs	r3, #3
 80074e0:	e004      	b.n	80074ec <HAL_GPIO_Init+0x21c>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e002      	b.n	80074ec <HAL_GPIO_Init+0x21c>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <HAL_GPIO_Init+0x21c>
 80074ea:	2300      	movs	r3, #0
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	f002 0203 	and.w	r2, r2, #3
 80074f2:	0092      	lsls	r2, r2, #2
 80074f4:	4093      	lsls	r3, r2
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074fc:	4935      	ldr	r1, [pc, #212]	; (80075d4 <HAL_GPIO_Init+0x304>)
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	089b      	lsrs	r3, r3, #2
 8007502:	3302      	adds	r3, #2
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800750a:	4b3a      	ldr	r3, [pc, #232]	; (80075f4 <HAL_GPIO_Init+0x324>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	43db      	mvns	r3, r3
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4013      	ands	r3, r2
 8007518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800752e:	4a31      	ldr	r2, [pc, #196]	; (80075f4 <HAL_GPIO_Init+0x324>)
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007534:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <HAL_GPIO_Init+0x324>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	43db      	mvns	r3, r3
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	4013      	ands	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007558:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <HAL_GPIO_Init+0x324>)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800755e:	4b25      	ldr	r3, [pc, #148]	; (80075f4 <HAL_GPIO_Init+0x324>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007582:	4a1c      	ldr	r2, [pc, #112]	; (80075f4 <HAL_GPIO_Init+0x324>)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <HAL_GPIO_Init+0x324>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	43db      	mvns	r3, r3
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	4013      	ands	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80075ac:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <HAL_GPIO_Init+0x324>)
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	3301      	adds	r3, #1
 80075b6:	61fb      	str	r3, [r7, #28]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b0f      	cmp	r3, #15
 80075bc:	f67f ae96 	bls.w	80072ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	3724      	adds	r7, #36	; 0x24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40023800 	.word	0x40023800
 80075d4:	40013800 	.word	0x40013800
 80075d8:	40020000 	.word	0x40020000
 80075dc:	40020400 	.word	0x40020400
 80075e0:	40020800 	.word	0x40020800
 80075e4:	40020c00 	.word	0x40020c00
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40021400 	.word	0x40021400
 80075f0:	40021800 	.word	0x40021800
 80075f4:	40013c00 	.word	0x40013c00

080075f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	887b      	ldrh	r3, [r7, #2]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
 8007614:	e001      	b.n	800761a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	807b      	strh	r3, [r7, #2]
 8007634:	4613      	mov	r3, r2
 8007636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007638:	787b      	ldrb	r3, [r7, #1]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800763e:	887a      	ldrh	r2, [r7, #2]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007644:	e003      	b.n	800764e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007646:	887b      	ldrh	r3, [r7, #2]
 8007648:	041a      	lsls	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	619a      	str	r2, [r3, #24]
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800765a:	b480      	push	{r7}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800766c:	887a      	ldrh	r2, [r7, #2]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4013      	ands	r3, r2
 8007672:	041a      	lsls	r2, r3, #16
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	43d9      	mvns	r1, r3
 8007678:	887b      	ldrh	r3, [r7, #2]
 800767a:	400b      	ands	r3, r1
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	619a      	str	r2, [r3, #24]
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800769a:	4b08      	ldr	r3, [pc, #32]	; (80076bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d006      	beq.n	80076b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076a6:	4a05      	ldr	r2, [pc, #20]	; (80076bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076ac:	88fb      	ldrh	r3, [r7, #6]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fd fa98 	bl	8004be4 <HAL_GPIO_EXTI_Callback>
  }
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40013c00 	.word	0x40013c00

080076c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80076ca:	2300      	movs	r3, #0
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <HAL_PWREx_EnableOverDrive+0x90>)
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	4a1f      	ldr	r2, [pc, #124]	; (8007750 <HAL_PWREx_EnableOverDrive+0x90>)
 80076d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d8:	6413      	str	r3, [r2, #64]	; 0x40
 80076da:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <HAL_PWREx_EnableOverDrive+0x90>)
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076e6:	4b1b      	ldr	r3, [pc, #108]	; (8007754 <HAL_PWREx_EnableOverDrive+0x94>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076ec:	f7fe f8f6 	bl	80058dc <HAL_GetTick>
 80076f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076f2:	e009      	b.n	8007708 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076f4:	f7fe f8f2 	bl	80058dc <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007702:	d901      	bls.n	8007708 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e01f      	b.n	8007748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007708:	4b13      	ldr	r3, [pc, #76]	; (8007758 <HAL_PWREx_EnableOverDrive+0x98>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007714:	d1ee      	bne.n	80076f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007716:	4b11      	ldr	r3, [pc, #68]	; (800775c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800771c:	f7fe f8de 	bl	80058dc <HAL_GetTick>
 8007720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007722:	e009      	b.n	8007738 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007724:	f7fe f8da 	bl	80058dc <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007732:	d901      	bls.n	8007738 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e007      	b.n	8007748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007738:	4b07      	ldr	r3, [pc, #28]	; (8007758 <HAL_PWREx_EnableOverDrive+0x98>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007744:	d1ee      	bne.n	8007724 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40023800 	.word	0x40023800
 8007754:	420e0040 	.word	0x420e0040
 8007758:	40007000 	.word	0x40007000
 800775c:	420e0044 	.word	0x420e0044

08007760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0cc      	b.n	800790e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007774:	4b68      	ldr	r3, [pc, #416]	; (8007918 <HAL_RCC_ClockConfig+0x1b8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d90c      	bls.n	800779c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007782:	4b65      	ldr	r3, [pc, #404]	; (8007918 <HAL_RCC_ClockConfig+0x1b8>)
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b63      	ldr	r3, [pc, #396]	; (8007918 <HAL_RCC_ClockConfig+0x1b8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e0b8      	b.n	800790e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d020      	beq.n	80077ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077b4:	4b59      	ldr	r3, [pc, #356]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4a58      	ldr	r2, [pc, #352]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80077ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077cc:	4b53      	ldr	r3, [pc, #332]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4a52      	ldr	r2, [pc, #328]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077d8:	4b50      	ldr	r3, [pc, #320]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	494d      	ldr	r1, [pc, #308]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d044      	beq.n	8007880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d107      	bne.n	800780e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077fe:	4b47      	ldr	r3, [pc, #284]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d119      	bne.n	800783e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e07f      	b.n	800790e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d003      	beq.n	800781e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800781a:	2b03      	cmp	r3, #3
 800781c:	d107      	bne.n	800782e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800781e:	4b3f      	ldr	r3, [pc, #252]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e06f      	b.n	800790e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800782e:	4b3b      	ldr	r3, [pc, #236]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e067      	b.n	800790e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800783e:	4b37      	ldr	r3, [pc, #220]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f023 0203 	bic.w	r2, r3, #3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4934      	ldr	r1, [pc, #208]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 800784c:	4313      	orrs	r3, r2
 800784e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007850:	f7fe f844 	bl	80058dc <HAL_GetTick>
 8007854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007856:	e00a      	b.n	800786e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007858:	f7fe f840 	bl	80058dc <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	f241 3288 	movw	r2, #5000	; 0x1388
 8007866:	4293      	cmp	r3, r2
 8007868:	d901      	bls.n	800786e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e04f      	b.n	800790e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800786e:	4b2b      	ldr	r3, [pc, #172]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 020c 	and.w	r2, r3, #12
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	429a      	cmp	r2, r3
 800787e:	d1eb      	bne.n	8007858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007880:	4b25      	ldr	r3, [pc, #148]	; (8007918 <HAL_RCC_ClockConfig+0x1b8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d20c      	bcs.n	80078a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800788e:	4b22      	ldr	r3, [pc, #136]	; (8007918 <HAL_RCC_ClockConfig+0x1b8>)
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007896:	4b20      	ldr	r3, [pc, #128]	; (8007918 <HAL_RCC_ClockConfig+0x1b8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d001      	beq.n	80078a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e032      	b.n	800790e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078b4:	4b19      	ldr	r3, [pc, #100]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	4916      	ldr	r1, [pc, #88]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078d2:	4b12      	ldr	r3, [pc, #72]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	490e      	ldr	r1, [pc, #56]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078e6:	f000 f855 	bl	8007994 <HAL_RCC_GetSysClockFreq>
 80078ea:	4602      	mov	r2, r0
 80078ec:	4b0b      	ldr	r3, [pc, #44]	; (800791c <HAL_RCC_ClockConfig+0x1bc>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	091b      	lsrs	r3, r3, #4
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	490a      	ldr	r1, [pc, #40]	; (8007920 <HAL_RCC_ClockConfig+0x1c0>)
 80078f8:	5ccb      	ldrb	r3, [r1, r3]
 80078fa:	fa22 f303 	lsr.w	r3, r2, r3
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <HAL_RCC_ClockConfig+0x1c4>)
 8007900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <HAL_RCC_ClockConfig+0x1c8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd ffa4 	bl	8005854 <HAL_InitTick>

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40023c00 	.word	0x40023c00
 800791c:	40023800 	.word	0x40023800
 8007920:	0800f684 	.word	0x0800f684
 8007924:	2000008c 	.word	0x2000008c
 8007928:	20000090 	.word	0x20000090

0800792c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007930:	4b03      	ldr	r3, [pc, #12]	; (8007940 <HAL_RCC_GetHCLKFreq+0x14>)
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	2000008c 	.word	0x2000008c

08007944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007948:	f7ff fff0 	bl	800792c <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0a9b      	lsrs	r3, r3, #10
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4903      	ldr	r1, [pc, #12]	; (8007968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40023800 	.word	0x40023800
 8007968:	0800f694 	.word	0x0800f694

0800796c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007970:	f7ff ffdc 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0b5b      	lsrs	r3, r3, #13
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4903      	ldr	r1, [pc, #12]	; (8007990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40023800 	.word	0x40023800
 8007990:	0800f694 	.word	0x0800f694

08007994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007998:	b0ae      	sub	sp, #184	; 0xb8
 800799a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079ba:	4bcb      	ldr	r3, [pc, #812]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 030c 	and.w	r3, r3, #12
 80079c2:	2b0c      	cmp	r3, #12
 80079c4:	f200 8206 	bhi.w	8007dd4 <HAL_RCC_GetSysClockFreq+0x440>
 80079c8:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007dd5 	.word	0x08007dd5
 80079d8:	08007dd5 	.word	0x08007dd5
 80079dc:	08007dd5 	.word	0x08007dd5
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	08007dd5 	.word	0x08007dd5
 80079e8:	08007dd5 	.word	0x08007dd5
 80079ec:	08007dd5 	.word	0x08007dd5
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007dd5 	.word	0x08007dd5
 80079f8:	08007dd5 	.word	0x08007dd5
 80079fc:	08007dd5 	.word	0x08007dd5
 8007a00:	08007c05 	.word	0x08007c05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a04:	4bb9      	ldr	r3, [pc, #740]	; (8007cec <HAL_RCC_GetSysClockFreq+0x358>)
 8007a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007a0a:	e1e7      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a0c:	4bb8      	ldr	r3, [pc, #736]	; (8007cf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007a12:	e1e3      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a14:	4bb4      	ldr	r3, [pc, #720]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a20:	4bb1      	ldr	r3, [pc, #708]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d071      	beq.n	8007b10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a2c:	4bae      	ldr	r3, [pc, #696]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	099b      	lsrs	r3, r3, #6
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a38:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a52:	4622      	mov	r2, r4
 8007a54:	462b      	mov	r3, r5
 8007a56:	f04f 0000 	mov.w	r0, #0
 8007a5a:	f04f 0100 	mov.w	r1, #0
 8007a5e:	0159      	lsls	r1, r3, #5
 8007a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a64:	0150      	lsls	r0, r2, #5
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	1a51      	subs	r1, r2, r1
 8007a6e:	6439      	str	r1, [r7, #64]	; 0x40
 8007a70:	4629      	mov	r1, r5
 8007a72:	eb63 0301 	sbc.w	r3, r3, r1
 8007a76:	647b      	str	r3, [r7, #68]	; 0x44
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007a84:	4649      	mov	r1, r9
 8007a86:	018b      	lsls	r3, r1, #6
 8007a88:	4641      	mov	r1, r8
 8007a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a8e:	4641      	mov	r1, r8
 8007a90:	018a      	lsls	r2, r1, #6
 8007a92:	4641      	mov	r1, r8
 8007a94:	1a51      	subs	r1, r2, r1
 8007a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a98:	4649      	mov	r1, r9
 8007a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007aac:	4649      	mov	r1, r9
 8007aae:	00cb      	lsls	r3, r1, #3
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	00ca      	lsls	r2, r1, #3
 8007aba:	4610      	mov	r0, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	189b      	adds	r3, r3, r2
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ac6:	462b      	mov	r3, r5
 8007ac8:	460a      	mov	r2, r1
 8007aca:	eb42 0303 	adc.w	r3, r2, r3
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007adc:	4629      	mov	r1, r5
 8007ade:	024b      	lsls	r3, r1, #9
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	024a      	lsls	r2, r1, #9
 8007aea:	4610      	mov	r0, r2
 8007aec:	4619      	mov	r1, r3
 8007aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007afc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007b00:	f7f9 f8c2 	bl	8000c88 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4613      	mov	r3, r2
 8007b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b0e:	e067      	b.n	8007be0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b10:	4b75      	ldr	r3, [pc, #468]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	099b      	lsrs	r3, r3, #6
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007b32:	4622      	mov	r2, r4
 8007b34:	462b      	mov	r3, r5
 8007b36:	f04f 0000 	mov.w	r0, #0
 8007b3a:	f04f 0100 	mov.w	r1, #0
 8007b3e:	0159      	lsls	r1, r3, #5
 8007b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b44:	0150      	lsls	r0, r2, #5
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	1a51      	subs	r1, r2, r1
 8007b4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b50:	4629      	mov	r1, r5
 8007b52:	eb63 0301 	sbc.w	r3, r3, r1
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007b64:	4649      	mov	r1, r9
 8007b66:	018b      	lsls	r3, r1, #6
 8007b68:	4641      	mov	r1, r8
 8007b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b6e:	4641      	mov	r1, r8
 8007b70:	018a      	lsls	r2, r1, #6
 8007b72:	4641      	mov	r1, r8
 8007b74:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b78:	4649      	mov	r1, r9
 8007b7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b92:	4692      	mov	sl, r2
 8007b94:	469b      	mov	fp, r3
 8007b96:	4623      	mov	r3, r4
 8007b98:	eb1a 0303 	adds.w	r3, sl, r3
 8007b9c:	623b      	str	r3, [r7, #32]
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	028b      	lsls	r3, r1, #10
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	028a      	lsls	r2, r1, #10
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bc8:	2200      	movs	r2, #0
 8007bca:	673b      	str	r3, [r7, #112]	; 0x70
 8007bcc:	677a      	str	r2, [r7, #116]	; 0x74
 8007bce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007bd2:	f7f9 f859 	bl	8000c88 <__aeabi_uldivmod>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4613      	mov	r3, r2
 8007bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007be0:	4b41      	ldr	r3, [pc, #260]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	3301      	adds	r3, #1
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007c02:	e0eb      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c04:	4b38      	ldr	r3, [pc, #224]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c10:	4b35      	ldr	r3, [pc, #212]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d06b      	beq.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c1c:	4b32      	ldr	r3, [pc, #200]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	099b      	lsrs	r3, r3, #6
 8007c22:	2200      	movs	r2, #0
 8007c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8007c30:	2300      	movs	r3, #0
 8007c32:	667b      	str	r3, [r7, #100]	; 0x64
 8007c34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007c38:	4622      	mov	r2, r4
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	f04f 0000 	mov.w	r0, #0
 8007c40:	f04f 0100 	mov.w	r1, #0
 8007c44:	0159      	lsls	r1, r3, #5
 8007c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c4a:	0150      	lsls	r0, r2, #5
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4621      	mov	r1, r4
 8007c52:	1a51      	subs	r1, r2, r1
 8007c54:	61b9      	str	r1, [r7, #24]
 8007c56:	4629      	mov	r1, r5
 8007c58:	eb63 0301 	sbc.w	r3, r3, r1
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	018b      	lsls	r3, r1, #6
 8007c6e:	4651      	mov	r1, sl
 8007c70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c74:	4651      	mov	r1, sl
 8007c76:	018a      	lsls	r2, r1, #6
 8007c78:	4651      	mov	r1, sl
 8007c7a:	ebb2 0801 	subs.w	r8, r2, r1
 8007c7e:	4659      	mov	r1, fp
 8007c80:	eb63 0901 	sbc.w	r9, r3, r1
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c98:	4690      	mov	r8, r2
 8007c9a:	4699      	mov	r9, r3
 8007c9c:	4623      	mov	r3, r4
 8007c9e:	eb18 0303 	adds.w	r3, r8, r3
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	eb49 0303 	adc.w	r3, r9, r3
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007cb8:	4629      	mov	r1, r5
 8007cba:	024b      	lsls	r3, r1, #9
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	024a      	lsls	r2, r1, #9
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4619      	mov	r1, r3
 8007cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cce:	2200      	movs	r2, #0
 8007cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007cd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cd8:	f7f8 ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ce6:	e065      	b.n	8007db4 <HAL_RCC_GetSysClockFreq+0x420>
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	00f42400 	.word	0x00f42400
 8007cf0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf4:	4b3d      	ldr	r3, [pc, #244]	; (8007dec <HAL_RCC_GetSysClockFreq+0x458>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	099b      	lsrs	r3, r3, #6
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	4611      	mov	r1, r2
 8007d00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d04:	653b      	str	r3, [r7, #80]	; 0x50
 8007d06:	2300      	movs	r3, #0
 8007d08:	657b      	str	r3, [r7, #84]	; 0x54
 8007d0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007d0e:	4642      	mov	r2, r8
 8007d10:	464b      	mov	r3, r9
 8007d12:	f04f 0000 	mov.w	r0, #0
 8007d16:	f04f 0100 	mov.w	r1, #0
 8007d1a:	0159      	lsls	r1, r3, #5
 8007d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d20:	0150      	lsls	r0, r2, #5
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4641      	mov	r1, r8
 8007d28:	1a51      	subs	r1, r2, r1
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007d40:	4659      	mov	r1, fp
 8007d42:	018b      	lsls	r3, r1, #6
 8007d44:	4651      	mov	r1, sl
 8007d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d4a:	4651      	mov	r1, sl
 8007d4c:	018a      	lsls	r2, r1, #6
 8007d4e:	4651      	mov	r1, sl
 8007d50:	1a54      	subs	r4, r2, r1
 8007d52:	4659      	mov	r1, fp
 8007d54:	eb63 0501 	sbc.w	r5, r3, r1
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	00eb      	lsls	r3, r5, #3
 8007d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d66:	00e2      	lsls	r2, r4, #3
 8007d68:	4614      	mov	r4, r2
 8007d6a:	461d      	mov	r5, r3
 8007d6c:	4643      	mov	r3, r8
 8007d6e:	18e3      	adds	r3, r4, r3
 8007d70:	603b      	str	r3, [r7, #0]
 8007d72:	464b      	mov	r3, r9
 8007d74:	eb45 0303 	adc.w	r3, r5, r3
 8007d78:	607b      	str	r3, [r7, #4]
 8007d7a:	f04f 0200 	mov.w	r2, #0
 8007d7e:	f04f 0300 	mov.w	r3, #0
 8007d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d86:	4629      	mov	r1, r5
 8007d88:	028b      	lsls	r3, r1, #10
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d90:	4621      	mov	r1, r4
 8007d92:	028a      	lsls	r2, r1, #10
 8007d94:	4610      	mov	r0, r2
 8007d96:	4619      	mov	r1, r3
 8007d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007da0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007da2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007da6:	f7f8 ff6f 	bl	8000c88 <__aeabi_uldivmod>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4613      	mov	r3, r2
 8007db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007db4:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <HAL_RCC_GetSysClockFreq+0x458>)
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	0f1b      	lsrs	r3, r3, #28
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007dd2:	e003      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	37b8      	adds	r7, #184	; 0xb8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dea:	bf00      	nop
 8007dec:	40023800 	.word	0x40023800
 8007df0:	00f42400 	.word	0x00f42400

08007df4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e28d      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8083 	beq.w	8007f1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e14:	4b94      	ldr	r3, [pc, #592]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 030c 	and.w	r3, r3, #12
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d019      	beq.n	8007e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e20:	4b91      	ldr	r3, [pc, #580]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e2c:	4b8e      	ldr	r3, [pc, #568]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e38:	d00c      	beq.n	8007e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e3a:	4b8b      	ldr	r3, [pc, #556]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e42:	2b0c      	cmp	r3, #12
 8007e44:	d112      	bne.n	8007e6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e46:	4b88      	ldr	r3, [pc, #544]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e52:	d10b      	bne.n	8007e6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e54:	4b84      	ldr	r3, [pc, #528]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d05b      	beq.n	8007f18 <HAL_RCC_OscConfig+0x124>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d157      	bne.n	8007f18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e25a      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e74:	d106      	bne.n	8007e84 <HAL_RCC_OscConfig+0x90>
 8007e76:	4b7c      	ldr	r3, [pc, #496]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a7b      	ldr	r2, [pc, #492]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	e01d      	b.n	8007ec0 <HAL_RCC_OscConfig+0xcc>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_RCC_OscConfig+0xb4>
 8007e8e:	4b76      	ldr	r3, [pc, #472]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a75      	ldr	r2, [pc, #468]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	4b73      	ldr	r3, [pc, #460]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a72      	ldr	r2, [pc, #456]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	e00b      	b.n	8007ec0 <HAL_RCC_OscConfig+0xcc>
 8007ea8:	4b6f      	ldr	r3, [pc, #444]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a6e      	ldr	r2, [pc, #440]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	4b6c      	ldr	r3, [pc, #432]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a6b      	ldr	r2, [pc, #428]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d013      	beq.n	8007ef0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fd fd08 	bl	80058dc <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ed0:	f7fd fd04 	bl	80058dc <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b64      	cmp	r3, #100	; 0x64
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e21f      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ee2:	4b61      	ldr	r3, [pc, #388]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f0      	beq.n	8007ed0 <HAL_RCC_OscConfig+0xdc>
 8007eee:	e014      	b.n	8007f1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef0:	f7fd fcf4 	bl	80058dc <HAL_GetTick>
 8007ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ef6:	e008      	b.n	8007f0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ef8:	f7fd fcf0 	bl	80058dc <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b64      	cmp	r3, #100	; 0x64
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e20b      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f0a:	4b57      	ldr	r3, [pc, #348]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1f0      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x104>
 8007f16:	e000      	b.n	8007f1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d06f      	beq.n	8008006 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f26:	4b50      	ldr	r3, [pc, #320]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 030c 	and.w	r3, r3, #12
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d017      	beq.n	8007f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f32:	4b4d      	ldr	r3, [pc, #308]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d105      	bne.n	8007f4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f3e:	4b4a      	ldr	r3, [pc, #296]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f4a:	4b47      	ldr	r3, [pc, #284]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f52:	2b0c      	cmp	r3, #12
 8007f54:	d11c      	bne.n	8007f90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f56:	4b44      	ldr	r3, [pc, #272]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d116      	bne.n	8007f90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f62:	4b41      	ldr	r3, [pc, #260]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <HAL_RCC_OscConfig+0x186>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d001      	beq.n	8007f7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e1d3      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7a:	4b3b      	ldr	r3, [pc, #236]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4937      	ldr	r1, [pc, #220]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f8e:	e03a      	b.n	8008006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d020      	beq.n	8007fda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f98:	4b34      	ldr	r3, [pc, #208]	; (800806c <HAL_RCC_OscConfig+0x278>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9e:	f7fd fc9d 	bl	80058dc <HAL_GetTick>
 8007fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fa4:	e008      	b.n	8007fb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fa6:	f7fd fc99 	bl	80058dc <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e1b4      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fb8:	4b2b      	ldr	r3, [pc, #172]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0f0      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc4:	4b28      	ldr	r3, [pc, #160]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	00db      	lsls	r3, r3, #3
 8007fd2:	4925      	ldr	r1, [pc, #148]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	600b      	str	r3, [r1, #0]
 8007fd8:	e015      	b.n	8008006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fda:	4b24      	ldr	r3, [pc, #144]	; (800806c <HAL_RCC_OscConfig+0x278>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7fd fc7c 	bl	80058dc <HAL_GetTick>
 8007fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fe8:	f7fd fc78 	bl	80058dc <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e193      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ffa:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f0      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d036      	beq.n	8008080 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d016      	beq.n	8008048 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800801a:	4b15      	ldr	r3, [pc, #84]	; (8008070 <HAL_RCC_OscConfig+0x27c>)
 800801c:	2201      	movs	r2, #1
 800801e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008020:	f7fd fc5c 	bl	80058dc <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008028:	f7fd fc58 	bl	80058dc <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e173      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <HAL_RCC_OscConfig+0x274>)
 800803c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f0      	beq.n	8008028 <HAL_RCC_OscConfig+0x234>
 8008046:	e01b      	b.n	8008080 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <HAL_RCC_OscConfig+0x27c>)
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804e:	f7fd fc45 	bl	80058dc <HAL_GetTick>
 8008052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008054:	e00e      	b.n	8008074 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008056:	f7fd fc41 	bl	80058dc <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d907      	bls.n	8008074 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e15c      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
 8008068:	40023800 	.word	0x40023800
 800806c:	42470000 	.word	0x42470000
 8008070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008074:	4b8a      	ldr	r3, [pc, #552]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1ea      	bne.n	8008056 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8097 	beq.w	80081bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800808e:	2300      	movs	r3, #0
 8008090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008092:	4b83      	ldr	r3, [pc, #524]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10f      	bne.n	80080be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800809e:	2300      	movs	r3, #0
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	4b7f      	ldr	r3, [pc, #508]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	4a7e      	ldr	r2, [pc, #504]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80080a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ac:	6413      	str	r3, [r2, #64]	; 0x40
 80080ae:	4b7c      	ldr	r3, [pc, #496]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b6:	60bb      	str	r3, [r7, #8]
 80080b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080ba:	2301      	movs	r3, #1
 80080bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080be:	4b79      	ldr	r3, [pc, #484]	; (80082a4 <HAL_RCC_OscConfig+0x4b0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d118      	bne.n	80080fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080ca:	4b76      	ldr	r3, [pc, #472]	; (80082a4 <HAL_RCC_OscConfig+0x4b0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a75      	ldr	r2, [pc, #468]	; (80082a4 <HAL_RCC_OscConfig+0x4b0>)
 80080d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080d6:	f7fd fc01 	bl	80058dc <HAL_GetTick>
 80080da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080dc:	e008      	b.n	80080f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080de:	f7fd fbfd 	bl	80058dc <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e118      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080f0:	4b6c      	ldr	r3, [pc, #432]	; (80082a4 <HAL_RCC_OscConfig+0x4b0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0f0      	beq.n	80080de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d106      	bne.n	8008112 <HAL_RCC_OscConfig+0x31e>
 8008104:	4b66      	ldr	r3, [pc, #408]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008108:	4a65      	ldr	r2, [pc, #404]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	6713      	str	r3, [r2, #112]	; 0x70
 8008110:	e01c      	b.n	800814c <HAL_RCC_OscConfig+0x358>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	2b05      	cmp	r3, #5
 8008118:	d10c      	bne.n	8008134 <HAL_RCC_OscConfig+0x340>
 800811a:	4b61      	ldr	r3, [pc, #388]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	4a60      	ldr	r2, [pc, #384]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008120:	f043 0304 	orr.w	r3, r3, #4
 8008124:	6713      	str	r3, [r2, #112]	; 0x70
 8008126:	4b5e      	ldr	r3, [pc, #376]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	4a5d      	ldr	r2, [pc, #372]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	6713      	str	r3, [r2, #112]	; 0x70
 8008132:	e00b      	b.n	800814c <HAL_RCC_OscConfig+0x358>
 8008134:	4b5a      	ldr	r3, [pc, #360]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008138:	4a59      	ldr	r2, [pc, #356]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 800813a:	f023 0301 	bic.w	r3, r3, #1
 800813e:	6713      	str	r3, [r2, #112]	; 0x70
 8008140:	4b57      	ldr	r3, [pc, #348]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008144:	4a56      	ldr	r2, [pc, #344]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008146:	f023 0304 	bic.w	r3, r3, #4
 800814a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d015      	beq.n	8008180 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008154:	f7fd fbc2 	bl	80058dc <HAL_GetTick>
 8008158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800815a:	e00a      	b.n	8008172 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800815c:	f7fd fbbe 	bl	80058dc <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	f241 3288 	movw	r2, #5000	; 0x1388
 800816a:	4293      	cmp	r3, r2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e0d7      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008172:	4b4b      	ldr	r3, [pc, #300]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0ee      	beq.n	800815c <HAL_RCC_OscConfig+0x368>
 800817e:	e014      	b.n	80081aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008180:	f7fd fbac 	bl	80058dc <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008186:	e00a      	b.n	800819e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008188:	f7fd fba8 	bl	80058dc <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	f241 3288 	movw	r2, #5000	; 0x1388
 8008196:	4293      	cmp	r3, r2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e0c1      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800819e:	4b40      	ldr	r3, [pc, #256]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1ee      	bne.n	8008188 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d105      	bne.n	80081bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081b0:	4b3b      	ldr	r3, [pc, #236]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	4a3a      	ldr	r2, [pc, #232]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80081b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80ad 	beq.w	8008320 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081c6:	4b36      	ldr	r3, [pc, #216]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d060      	beq.n	8008294 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d145      	bne.n	8008266 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081da:	4b33      	ldr	r3, [pc, #204]	; (80082a8 <HAL_RCC_OscConfig+0x4b4>)
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fd fb7c 	bl	80058dc <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081e8:	f7fd fb78 	bl	80058dc <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e093      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081fa:	4b29      	ldr	r3, [pc, #164]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69da      	ldr	r2, [r3, #28]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	019b      	lsls	r3, r3, #6
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	3b01      	subs	r3, #1
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008230:	071b      	lsls	r3, r3, #28
 8008232:	491b      	ldr	r1, [pc, #108]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008234:	4313      	orrs	r3, r2
 8008236:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008238:	4b1b      	ldr	r3, [pc, #108]	; (80082a8 <HAL_RCC_OscConfig+0x4b4>)
 800823a:	2201      	movs	r2, #1
 800823c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823e:	f7fd fb4d 	bl	80058dc <HAL_GetTick>
 8008242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008244:	e008      	b.n	8008258 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008246:	f7fd fb49 	bl	80058dc <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e064      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008258:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0f0      	beq.n	8008246 <HAL_RCC_OscConfig+0x452>
 8008264:	e05c      	b.n	8008320 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <HAL_RCC_OscConfig+0x4b4>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826c:	f7fd fb36 	bl	80058dc <HAL_GetTick>
 8008270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008272:	e008      	b.n	8008286 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008274:	f7fd fb32 	bl	80058dc <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e04d      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <HAL_RCC_OscConfig+0x4ac>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f0      	bne.n	8008274 <HAL_RCC_OscConfig+0x480>
 8008292:	e045      	b.n	8008320 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d107      	bne.n	80082ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e040      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
 80082a0:	40023800 	.word	0x40023800
 80082a4:	40007000 	.word	0x40007000
 80082a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082ac:	4b1f      	ldr	r3, [pc, #124]	; (800832c <HAL_RCC_OscConfig+0x538>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d030      	beq.n	800831c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d129      	bne.n	800831c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d122      	bne.n	800831c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082dc:	4013      	ands	r3, r2
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d119      	bne.n	800831c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	3b01      	subs	r3, #1
 80082f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d10f      	bne.n	800831c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008308:	429a      	cmp	r2, r3
 800830a:	d107      	bne.n	800831c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008318:	429a      	cmp	r2, r3
 800831a:	d001      	beq.n	8008320 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40023800 	.word	0x40023800

08008330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e041      	b.n	80083c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fc fe08 	bl	8004f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3304      	adds	r3, #4
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f001 f944 	bl	80095fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d001      	beq.n	80083e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e046      	b.n	8008476 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a23      	ldr	r2, [pc, #140]	; (8008484 <HAL_TIM_Base_Start+0xb4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d022      	beq.n	8008440 <HAL_TIM_Base_Start+0x70>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008402:	d01d      	beq.n	8008440 <HAL_TIM_Base_Start+0x70>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1f      	ldr	r2, [pc, #124]	; (8008488 <HAL_TIM_Base_Start+0xb8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d018      	beq.n	8008440 <HAL_TIM_Base_Start+0x70>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1e      	ldr	r2, [pc, #120]	; (800848c <HAL_TIM_Base_Start+0xbc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <HAL_TIM_Base_Start+0x70>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1c      	ldr	r2, [pc, #112]	; (8008490 <HAL_TIM_Base_Start+0xc0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00e      	beq.n	8008440 <HAL_TIM_Base_Start+0x70>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <HAL_TIM_Base_Start+0xc4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d009      	beq.n	8008440 <HAL_TIM_Base_Start+0x70>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a19      	ldr	r2, [pc, #100]	; (8008498 <HAL_TIM_Base_Start+0xc8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d004      	beq.n	8008440 <HAL_TIM_Base_Start+0x70>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a18      	ldr	r2, [pc, #96]	; (800849c <HAL_TIM_Base_Start+0xcc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d111      	bne.n	8008464 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b06      	cmp	r3, #6
 8008450:	d010      	beq.n	8008474 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0201 	orr.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008462:	e007      	b.n	8008474 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0201 	orr.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40010000 	.word	0x40010000
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40000c00 	.word	0x40000c00
 8008494:	40010400 	.word	0x40010400
 8008498:	40014000 	.word	0x40014000
 800849c:	40001800 	.word	0x40001800

080084a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e041      	b.n	8008536 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f839 	bl	800853e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f001 f88c 	bl	80095fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
	...

08008554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d109      	bne.n	8008578 <HAL_TIM_PWM_Start+0x24>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	bf14      	ite	ne
 8008570:	2301      	movne	r3, #1
 8008572:	2300      	moveq	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	e022      	b.n	80085be <HAL_TIM_PWM_Start+0x6a>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b04      	cmp	r3, #4
 800857c:	d109      	bne.n	8008592 <HAL_TIM_PWM_Start+0x3e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b01      	cmp	r3, #1
 8008588:	bf14      	ite	ne
 800858a:	2301      	movne	r3, #1
 800858c:	2300      	moveq	r3, #0
 800858e:	b2db      	uxtb	r3, r3
 8008590:	e015      	b.n	80085be <HAL_TIM_PWM_Start+0x6a>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b08      	cmp	r3, #8
 8008596:	d109      	bne.n	80085ac <HAL_TIM_PWM_Start+0x58>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	bf14      	ite	ne
 80085a4:	2301      	movne	r3, #1
 80085a6:	2300      	moveq	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	e008      	b.n	80085be <HAL_TIM_PWM_Start+0x6a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	bf14      	ite	ne
 80085b8:	2301      	movne	r3, #1
 80085ba:	2300      	moveq	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e07c      	b.n	80086c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <HAL_TIM_PWM_Start+0x82>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d4:	e013      	b.n	80085fe <HAL_TIM_PWM_Start+0xaa>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d104      	bne.n	80085e6 <HAL_TIM_PWM_Start+0x92>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e4:	e00b      	b.n	80085fe <HAL_TIM_PWM_Start+0xaa>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_PWM_Start+0xa2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f4:	e003      	b.n	80085fe <HAL_TIM_PWM_Start+0xaa>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2201      	movs	r2, #1
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f001 fc0c 	bl	8009e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a2d      	ldr	r2, [pc, #180]	; (80086c8 <HAL_TIM_PWM_Start+0x174>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d004      	beq.n	8008620 <HAL_TIM_PWM_Start+0xcc>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <HAL_TIM_PWM_Start+0x178>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d101      	bne.n	8008624 <HAL_TIM_PWM_Start+0xd0>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <HAL_TIM_PWM_Start+0xd2>
 8008624:	2300      	movs	r3, #0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a22      	ldr	r2, [pc, #136]	; (80086c8 <HAL_TIM_PWM_Start+0x174>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d022      	beq.n	800868a <HAL_TIM_PWM_Start+0x136>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864c:	d01d      	beq.n	800868a <HAL_TIM_PWM_Start+0x136>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <HAL_TIM_PWM_Start+0x17c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d018      	beq.n	800868a <HAL_TIM_PWM_Start+0x136>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <HAL_TIM_PWM_Start+0x180>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <HAL_TIM_PWM_Start+0x136>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1c      	ldr	r2, [pc, #112]	; (80086d8 <HAL_TIM_PWM_Start+0x184>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00e      	beq.n	800868a <HAL_TIM_PWM_Start+0x136>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a16      	ldr	r2, [pc, #88]	; (80086cc <HAL_TIM_PWM_Start+0x178>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d009      	beq.n	800868a <HAL_TIM_PWM_Start+0x136>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a18      	ldr	r2, [pc, #96]	; (80086dc <HAL_TIM_PWM_Start+0x188>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d004      	beq.n	800868a <HAL_TIM_PWM_Start+0x136>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a16      	ldr	r2, [pc, #88]	; (80086e0 <HAL_TIM_PWM_Start+0x18c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d111      	bne.n	80086ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b06      	cmp	r3, #6
 800869a:	d010      	beq.n	80086be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f042 0201 	orr.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ac:	e007      	b.n	80086be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40010000 	.word	0x40010000
 80086cc:	40010400 	.word	0x40010400
 80086d0:	40000400 	.word	0x40000400
 80086d4:	40000800 	.word	0x40000800
 80086d8:	40000c00 	.word	0x40000c00
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40001800 	.word	0x40001800

080086e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e041      	b.n	800877a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f839 	bl	8008782 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3304      	adds	r3, #4
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f000 ff6a 	bl	80095fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <HAL_TIM_IC_Start_DMA+0x22>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	e013      	b.n	80087e2 <HAL_TIM_IC_Start_DMA+0x4a>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d104      	bne.n	80087ca <HAL_TIM_IC_Start_DMA+0x32>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	e00b      	b.n	80087e2 <HAL_TIM_IC_Start_DMA+0x4a>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d104      	bne.n	80087da <HAL_TIM_IC_Start_DMA+0x42>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	e003      	b.n	80087e2 <HAL_TIM_IC_Start_DMA+0x4a>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d104      	bne.n	80087f4 <HAL_TIM_IC_Start_DMA+0x5c>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	e013      	b.n	800881c <HAL_TIM_IC_Start_DMA+0x84>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d104      	bne.n	8008804 <HAL_TIM_IC_Start_DMA+0x6c>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008800:	b2db      	uxtb	r3, r3
 8008802:	e00b      	b.n	800881c <HAL_TIM_IC_Start_DMA+0x84>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b08      	cmp	r3, #8
 8008808:	d104      	bne.n	8008814 <HAL_TIM_IC_Start_DMA+0x7c>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008810:	b2db      	uxtb	r3, r3
 8008812:	e003      	b.n	800881c <HAL_TIM_IC_Start_DMA+0x84>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800881a:	b2db      	uxtb	r3, r3
 800881c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800881e:	7dbb      	ldrb	r3, [r7, #22]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d002      	beq.n	800882a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008824:	7d7b      	ldrb	r3, [r7, #21]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d101      	bne.n	800882e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800882a:	2302      	movs	r3, #2
 800882c:	e146      	b.n	8008abc <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800882e:	7dbb      	ldrb	r3, [r7, #22]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d143      	bne.n	80088bc <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008834:	7d7b      	ldrb	r3, [r7, #21]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d140      	bne.n	80088bc <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <HAL_TIM_IC_Start_DMA+0xb2>
 8008840:	887b      	ldrh	r3, [r7, #2]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e138      	b.n	8008abc <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <HAL_TIM_IC_Start_DMA+0xc2>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008858:	e013      	b.n	8008882 <HAL_TIM_IC_Start_DMA+0xea>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b04      	cmp	r3, #4
 800885e:	d104      	bne.n	800886a <HAL_TIM_IC_Start_DMA+0xd2>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008868:	e00b      	b.n	8008882 <HAL_TIM_IC_Start_DMA+0xea>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b08      	cmp	r3, #8
 800886e:	d104      	bne.n	800887a <HAL_TIM_IC_Start_DMA+0xe2>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008878:	e003      	b.n	8008882 <HAL_TIM_IC_Start_DMA+0xea>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2202      	movs	r2, #2
 800887e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <HAL_TIM_IC_Start_DMA+0xfa>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8008890:	e016      	b.n	80088c0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d104      	bne.n	80088a2 <HAL_TIM_IC_Start_DMA+0x10a>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80088a0:	e00e      	b.n	80088c0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d104      	bne.n	80088b2 <HAL_TIM_IC_Start_DMA+0x11a>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80088b0:	e006      	b.n	80088c0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80088ba:	e001      	b.n	80088c0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e0fd      	b.n	8008abc <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2201      	movs	r2, #1
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 faab 	bl	8009e24 <TIM_CCxChannelCmd>

  switch (Channel)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b0c      	cmp	r3, #12
 80088d2:	f200 80ad 	bhi.w	8008a30 <HAL_TIM_IC_Start_DMA+0x298>
 80088d6:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <HAL_TIM_IC_Start_DMA+0x144>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	08008911 	.word	0x08008911
 80088e0:	08008a31 	.word	0x08008a31
 80088e4:	08008a31 	.word	0x08008a31
 80088e8:	08008a31 	.word	0x08008a31
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008a31 	.word	0x08008a31
 80088f4:	08008a31 	.word	0x08008a31
 80088f8:	08008a31 	.word	0x08008a31
 80088fc:	080089a1 	.word	0x080089a1
 8008900:	08008a31 	.word	0x08008a31
 8008904:	08008a31 	.word	0x08008a31
 8008908:	08008a31 	.word	0x08008a31
 800890c:	080089e9 	.word	0x080089e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	4a6b      	ldr	r2, [pc, #428]	; (8008ac4 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008916:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	4a6a      	ldr	r2, [pc, #424]	; (8008ac8 <HAL_TIM_IC_Start_DMA+0x330>)
 800891e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	4a69      	ldr	r2, [pc, #420]	; (8008acc <HAL_TIM_IC_Start_DMA+0x334>)
 8008926:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3334      	adds	r3, #52	; 0x34
 8008932:	4619      	mov	r1, r3
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	887b      	ldrh	r3, [r7, #2]
 8008938:	f7fd ff68 	bl	800680c <HAL_DMA_Start_IT>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e0ba      	b.n	8008abc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008954:	60da      	str	r2, [r3, #12]
      break;
 8008956:	e06e      	b.n	8008a36 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	4a59      	ldr	r2, [pc, #356]	; (8008ac4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800895e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	4a58      	ldr	r2, [pc, #352]	; (8008ac8 <HAL_TIM_IC_Start_DMA+0x330>)
 8008966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	4a57      	ldr	r2, [pc, #348]	; (8008acc <HAL_TIM_IC_Start_DMA+0x334>)
 800896e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3338      	adds	r3, #56	; 0x38
 800897a:	4619      	mov	r1, r3
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	887b      	ldrh	r3, [r7, #2]
 8008980:	f7fd ff44 	bl	800680c <HAL_DMA_Start_IT>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e096      	b.n	8008abc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800899c:	60da      	str	r2, [r3, #12]
      break;
 800899e:	e04a      	b.n	8008a36 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a47      	ldr	r2, [pc, #284]	; (8008ac4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80089a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4a46      	ldr	r2, [pc, #280]	; (8008ac8 <HAL_TIM_IC_Start_DMA+0x330>)
 80089ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a45      	ldr	r2, [pc, #276]	; (8008acc <HAL_TIM_IC_Start_DMA+0x334>)
 80089b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	333c      	adds	r3, #60	; 0x3c
 80089c2:	4619      	mov	r1, r3
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	887b      	ldrh	r3, [r7, #2]
 80089c8:	f7fd ff20 	bl	800680c <HAL_DMA_Start_IT>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e072      	b.n	8008abc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e4:	60da      	str	r2, [r3, #12]
      break;
 80089e6:	e026      	b.n	8008a36 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ec:	4a35      	ldr	r2, [pc, #212]	; (8008ac4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80089ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	4a34      	ldr	r2, [pc, #208]	; (8008ac8 <HAL_TIM_IC_Start_DMA+0x330>)
 80089f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fc:	4a33      	ldr	r2, [pc, #204]	; (8008acc <HAL_TIM_IC_Start_DMA+0x334>)
 80089fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3340      	adds	r3, #64	; 0x40
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	887b      	ldrh	r3, [r7, #2]
 8008a10:	f7fd fefc 	bl	800680c <HAL_DMA_Start_IT>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e04e      	b.n	8008abc <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a2c:	60da      	str	r2, [r3, #12]
      break;
 8008a2e:	e002      	b.n	8008a36 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	75fb      	strb	r3, [r7, #23]
      break;
 8008a34:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a25      	ldr	r2, [pc, #148]	; (8008ad0 <HAL_TIM_IC_Start_DMA+0x338>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d022      	beq.n	8008a86 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a48:	d01d      	beq.n	8008a86 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a21      	ldr	r2, [pc, #132]	; (8008ad4 <HAL_TIM_IC_Start_DMA+0x33c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d018      	beq.n	8008a86 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1f      	ldr	r2, [pc, #124]	; (8008ad8 <HAL_TIM_IC_Start_DMA+0x340>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d013      	beq.n	8008a86 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <HAL_TIM_IC_Start_DMA+0x344>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00e      	beq.n	8008a86 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <HAL_TIM_IC_Start_DMA+0x348>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d009      	beq.n	8008a86 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <HAL_TIM_IC_Start_DMA+0x34c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d004      	beq.n	8008a86 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <HAL_TIM_IC_Start_DMA+0x350>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d111      	bne.n	8008aaa <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	d010      	beq.n	8008aba <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0201 	orr.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa8:	e007      	b.n	8008aba <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f042 0201 	orr.w	r2, r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	080094cd 	.word	0x080094cd
 8008ac8:	08009595 	.word	0x08009595
 8008acc:	0800943b 	.word	0x0800943b
 8008ad0:	40010000 	.word	0x40010000
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40001800 	.word	0x40001800

08008aec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e097      	b.n	8008c30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d106      	bne.n	8008b1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7fc fb31 	bl	800517c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6812      	ldr	r2, [r2, #0]
 8008b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4610      	mov	r0, r2
 8008b42:	f000 fd5b 	bl	80095fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b8c:	f023 030c 	bic.w	r3, r3, #12
 8008b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	011a      	lsls	r2, r3, #4
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	031b      	lsls	r3, r3, #12
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008bca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008bd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	4313      	orrs	r3, r2
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d110      	bne.n	8008c8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d102      	bne.n	8008c74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c6e:	7b7b      	ldrb	r3, [r7, #13]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d001      	beq.n	8008c78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e069      	b.n	8008d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c88:	e031      	b.n	8008cee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d110      	bne.n	8008cb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d102      	bne.n	8008c9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c96:	7b3b      	ldrb	r3, [r7, #12]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d001      	beq.n	8008ca0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e055      	b.n	8008d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cb0:	e01d      	b.n	8008cee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d108      	bne.n	8008cca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d105      	bne.n	8008cca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cbe:	7b7b      	ldrb	r3, [r7, #13]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d102      	bne.n	8008cca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008cc4:	7b3b      	ldrb	r3, [r7, #12]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d001      	beq.n	8008cce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e03e      	b.n	8008d4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <HAL_TIM_Encoder_Start+0xc4>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d008      	beq.n	8008d0c <HAL_TIM_Encoder_Start+0xd4>
 8008cfa:	e00f      	b.n	8008d1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2201      	movs	r2, #1
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 f88d 	bl	8009e24 <TIM_CCxChannelCmd>
      break;
 8008d0a:	e016      	b.n	8008d3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2201      	movs	r2, #1
 8008d12:	2104      	movs	r1, #4
 8008d14:	4618      	mov	r0, r3
 8008d16:	f001 f885 	bl	8009e24 <TIM_CCxChannelCmd>
      break;
 8008d1a:	e00e      	b.n	8008d3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2201      	movs	r2, #1
 8008d22:	2100      	movs	r1, #0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 f87d 	bl	8009e24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	2104      	movs	r1, #4
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f876 	bl	8009e24 <TIM_CCxChannelCmd>
      break;
 8008d38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0201 	orr.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d122      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d11b      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f06f 0202 	mvn.w	r2, #2
 8008d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fb1d 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008d9c:	e005      	b.n	8008daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fb0f 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fb2a 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	d122      	bne.n	8008e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f003 0304 	and.w	r3, r3, #4
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d11b      	bne.n	8008e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f06f 0204 	mvn.w	r2, #4
 8008dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2202      	movs	r2, #2
 8008dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 faf3 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008df0:	e005      	b.n	8008dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fae5 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fb00 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d122      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	d11b      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f06f 0208 	mvn.w	r2, #8
 8008e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fac9 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008e44:	e005      	b.n	8008e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fabb 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fad6 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d122      	bne.n	8008eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b10      	cmp	r3, #16
 8008e72:	d11b      	bne.n	8008eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0210 	mvn.w	r2, #16
 8008e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2208      	movs	r2, #8
 8008e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa9f 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
 8008e98:	e005      	b.n	8008ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa91 	bl	80093c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 faac 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d10e      	bne.n	8008ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d107      	bne.n	8008ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f06f 0201 	mvn.w	r2, #1
 8008ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa6b 	bl	80093ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee2:	2b80      	cmp	r3, #128	; 0x80
 8008ee4:	d10e      	bne.n	8008f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef0:	2b80      	cmp	r3, #128	; 0x80
 8008ef2:	d107      	bne.n	8008f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 f88e 	bl	800a020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d10e      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	d107      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa71 	bl	8009412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	d10e      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d107      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0220 	mvn.w	r2, #32
 8008f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 f858 	bl	800a00c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d101      	bne.n	8008f82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008f7e:	2302      	movs	r3, #2
 8008f80:	e088      	b.n	8009094 <HAL_TIM_IC_ConfigChannel+0x130>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d11b      	bne.n	8008fc8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6819      	ldr	r1, [r3, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f000 fd7c 	bl	8009a9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 020c 	bic.w	r2, r2, #12
 8008fb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6999      	ldr	r1, [r3, #24]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	619a      	str	r2, [r3, #24]
 8008fc6:	e060      	b.n	800908a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d11c      	bne.n	8009008 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6819      	ldr	r1, [r3, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f000 fe00 	bl	8009be2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ff0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6999      	ldr	r1, [r3, #24]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	021a      	lsls	r2, r3, #8
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	619a      	str	r2, [r3, #24]
 8009006:	e040      	b.n	800908a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b08      	cmp	r3, #8
 800900c:	d11b      	bne.n	8009046 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6819      	ldr	r1, [r3, #0]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f000 fe4d 	bl	8009cbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69da      	ldr	r2, [r3, #28]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 020c 	bic.w	r2, r2, #12
 8009030:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69d9      	ldr	r1, [r3, #28]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	61da      	str	r2, [r3, #28]
 8009044:	e021      	b.n	800908a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b0c      	cmp	r3, #12
 800904a:	d11c      	bne.n	8009086 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f000 fe6a 	bl	8009d34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	69da      	ldr	r2, [r3, #28]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800906e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69d9      	ldr	r1, [r3, #28]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	021a      	lsls	r2, r3, #8
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	61da      	str	r2, [r3, #28]
 8009084:	e001      	b.n	800908a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e0ae      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b0c      	cmp	r3, #12
 80090c6:	f200 809f 	bhi.w	8009208 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090ca:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	08009105 	.word	0x08009105
 80090d4:	08009209 	.word	0x08009209
 80090d8:	08009209 	.word	0x08009209
 80090dc:	08009209 	.word	0x08009209
 80090e0:	08009145 	.word	0x08009145
 80090e4:	08009209 	.word	0x08009209
 80090e8:	08009209 	.word	0x08009209
 80090ec:	08009209 	.word	0x08009209
 80090f0:	08009187 	.word	0x08009187
 80090f4:	08009209 	.word	0x08009209
 80090f8:	08009209 	.word	0x08009209
 80090fc:	08009209 	.word	0x08009209
 8009100:	080091c7 	.word	0x080091c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fb16 	bl	800973c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0208 	orr.w	r2, r2, #8
 800911e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0204 	bic.w	r2, r2, #4
 800912e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6999      	ldr	r1, [r3, #24]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	691a      	ldr	r2, [r3, #16]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	619a      	str	r2, [r3, #24]
      break;
 8009142:	e064      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fb66 	bl	800981c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800915e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800916e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6999      	ldr	r1, [r3, #24]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	021a      	lsls	r2, r3, #8
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	619a      	str	r2, [r3, #24]
      break;
 8009184:	e043      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fbbb 	bl	8009908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69da      	ldr	r2, [r3, #28]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f042 0208 	orr.w	r2, r2, #8
 80091a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69da      	ldr	r2, [r3, #28]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 0204 	bic.w	r2, r2, #4
 80091b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69d9      	ldr	r1, [r3, #28]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	61da      	str	r2, [r3, #28]
      break;
 80091c4:	e023      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fc0f 	bl	80099f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69da      	ldr	r2, [r3, #28]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69d9      	ldr	r1, [r3, #28]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	021a      	lsls	r2, r3, #8
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	61da      	str	r2, [r3, #28]
      break;
 8009206:	e002      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	75fb      	strb	r3, [r7, #23]
      break;
 800920c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009234:	2b01      	cmp	r3, #1
 8009236:	d101      	bne.n	800923c <HAL_TIM_ConfigClockSource+0x1c>
 8009238:	2302      	movs	r3, #2
 800923a:	e0b4      	b.n	80093a6 <HAL_TIM_ConfigClockSource+0x186>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800925a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009274:	d03e      	beq.n	80092f4 <HAL_TIM_ConfigClockSource+0xd4>
 8009276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800927a:	f200 8087 	bhi.w	800938c <HAL_TIM_ConfigClockSource+0x16c>
 800927e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009282:	f000 8086 	beq.w	8009392 <HAL_TIM_ConfigClockSource+0x172>
 8009286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800928a:	d87f      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
 800928c:	2b70      	cmp	r3, #112	; 0x70
 800928e:	d01a      	beq.n	80092c6 <HAL_TIM_ConfigClockSource+0xa6>
 8009290:	2b70      	cmp	r3, #112	; 0x70
 8009292:	d87b      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
 8009294:	2b60      	cmp	r3, #96	; 0x60
 8009296:	d050      	beq.n	800933a <HAL_TIM_ConfigClockSource+0x11a>
 8009298:	2b60      	cmp	r3, #96	; 0x60
 800929a:	d877      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
 800929c:	2b50      	cmp	r3, #80	; 0x50
 800929e:	d03c      	beq.n	800931a <HAL_TIM_ConfigClockSource+0xfa>
 80092a0:	2b50      	cmp	r3, #80	; 0x50
 80092a2:	d873      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
 80092a4:	2b40      	cmp	r3, #64	; 0x40
 80092a6:	d058      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x13a>
 80092a8:	2b40      	cmp	r3, #64	; 0x40
 80092aa:	d86f      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
 80092ac:	2b30      	cmp	r3, #48	; 0x30
 80092ae:	d064      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x15a>
 80092b0:	2b30      	cmp	r3, #48	; 0x30
 80092b2:	d86b      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d060      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x15a>
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d867      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d05c      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x15a>
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d05a      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x15a>
 80092c4:	e062      	b.n	800938c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6899      	ldr	r1, [r3, #8]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f000 fd85 	bl	8009de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	609a      	str	r2, [r3, #8]
      break;
 80092f2:	e04f      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	6899      	ldr	r1, [r3, #8]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	f000 fd6e 	bl	8009de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689a      	ldr	r2, [r3, #8]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009316:	609a      	str	r2, [r3, #8]
      break;
 8009318:	e03c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	6859      	ldr	r1, [r3, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	461a      	mov	r2, r3
 8009328:	f000 fc2c 	bl	8009b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2150      	movs	r1, #80	; 0x50
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fd3b 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009338:	e02c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6859      	ldr	r1, [r3, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	461a      	mov	r2, r3
 8009348:	f000 fc88 	bl	8009c5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2160      	movs	r1, #96	; 0x60
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fd2b 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009358:	e01c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6859      	ldr	r1, [r3, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	461a      	mov	r2, r3
 8009368:	f000 fc0c 	bl	8009b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2140      	movs	r1, #64	; 0x40
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fd1b 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009378:	e00c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f000 fd12 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 800938a:	e003      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	73fb      	strb	r3, [r7, #15]
      break;
 8009390:	e000      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b083      	sub	sp, #12
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093ca:	bf00      	nop
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800941a:	bf00      	nop
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009446:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	429a      	cmp	r2, r3
 8009450:	d107      	bne.n	8009462 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009460:	e02a      	b.n	80094b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	429a      	cmp	r2, r3
 800946a:	d107      	bne.n	800947c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2202      	movs	r2, #2
 8009470:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800947a:	e01d      	b.n	80094b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d107      	bne.n	8009496 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2204      	movs	r2, #4
 800948a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009494:	e010      	b.n	80094b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d107      	bne.n	80094b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2208      	movs	r2, #8
 80094a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094ae:	e003      	b.n	80094b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff ffb4 	bl	8009426 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	771a      	strb	r2, [r3, #28]
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d10f      	bne.n	8009504 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2201      	movs	r2, #1
 80094e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d146      	bne.n	8009580 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009502:	e03d      	b.n	8009580 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	429a      	cmp	r2, r3
 800950c:	d10f      	bne.n	800952e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2202      	movs	r2, #2
 8009512:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d131      	bne.n	8009580 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800952c:	e028      	b.n	8009580 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d10f      	bne.n	8009558 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2204      	movs	r2, #4
 800953c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d11c      	bne.n	8009580 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009556:	e013      	b.n	8009580 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	429a      	cmp	r2, r3
 8009560:	d10e      	bne.n	8009580 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2208      	movs	r2, #8
 8009566:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d107      	bne.n	8009580 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7ff ff28 	bl	80093d6 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	771a      	strb	r2, [r3, #28]
}
 800958c:	bf00      	nop
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d103      	bne.n	80095b4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2201      	movs	r2, #1
 80095b0:	771a      	strb	r2, [r3, #28]
 80095b2:	e019      	b.n	80095e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d103      	bne.n	80095c6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2202      	movs	r2, #2
 80095c2:	771a      	strb	r2, [r3, #28]
 80095c4:	e010      	b.n	80095e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d103      	bne.n	80095d8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2204      	movs	r2, #4
 80095d4:	771a      	strb	r2, [r3, #28]
 80095d6:	e007      	b.n	80095e8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d102      	bne.n	80095e8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2208      	movs	r2, #8
 80095e6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7ff fefe 	bl	80093ea <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	771a      	strb	r2, [r3, #28]
}
 80095f4:	bf00      	nop
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a40      	ldr	r2, [pc, #256]	; (8009710 <TIM_Base_SetConfig+0x114>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d013      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961a:	d00f      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a3d      	ldr	r2, [pc, #244]	; (8009714 <TIM_Base_SetConfig+0x118>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00b      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a3c      	ldr	r2, [pc, #240]	; (8009718 <TIM_Base_SetConfig+0x11c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a3b      	ldr	r2, [pc, #236]	; (800971c <TIM_Base_SetConfig+0x120>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a3a      	ldr	r2, [pc, #232]	; (8009720 <TIM_Base_SetConfig+0x124>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d108      	bne.n	800964e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2f      	ldr	r2, [pc, #188]	; (8009710 <TIM_Base_SetConfig+0x114>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d02b      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965c:	d027      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2c      	ldr	r2, [pc, #176]	; (8009714 <TIM_Base_SetConfig+0x118>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d023      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a2b      	ldr	r2, [pc, #172]	; (8009718 <TIM_Base_SetConfig+0x11c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d01f      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a2a      	ldr	r2, [pc, #168]	; (800971c <TIM_Base_SetConfig+0x120>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d01b      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a29      	ldr	r2, [pc, #164]	; (8009720 <TIM_Base_SetConfig+0x124>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d017      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a28      	ldr	r2, [pc, #160]	; (8009724 <TIM_Base_SetConfig+0x128>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a27      	ldr	r2, [pc, #156]	; (8009728 <TIM_Base_SetConfig+0x12c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d00f      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a26      	ldr	r2, [pc, #152]	; (800972c <TIM_Base_SetConfig+0x130>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00b      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a25      	ldr	r2, [pc, #148]	; (8009730 <TIM_Base_SetConfig+0x134>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d007      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a24      	ldr	r2, [pc, #144]	; (8009734 <TIM_Base_SetConfig+0x138>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d003      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a23      	ldr	r2, [pc, #140]	; (8009738 <TIM_Base_SetConfig+0x13c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d108      	bne.n	80096c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4313      	orrs	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <TIM_Base_SetConfig+0x114>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_Base_SetConfig+0xf8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <TIM_Base_SetConfig+0x124>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d103      	bne.n	80096fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	615a      	str	r2, [r3, #20]
}
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40010000 	.word	0x40010000
 8009714:	40000400 	.word	0x40000400
 8009718:	40000800 	.word	0x40000800
 800971c:	40000c00 	.word	0x40000c00
 8009720:	40010400 	.word	0x40010400
 8009724:	40014000 	.word	0x40014000
 8009728:	40014400 	.word	0x40014400
 800972c:	40014800 	.word	0x40014800
 8009730:	40001800 	.word	0x40001800
 8009734:	40001c00 	.word	0x40001c00
 8009738:	40002000 	.word	0x40002000

0800973c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	f023 0201 	bic.w	r2, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0303 	bic.w	r3, r3, #3
 8009772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f023 0302 	bic.w	r3, r3, #2
 8009784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a20      	ldr	r2, [pc, #128]	; (8009814 <TIM_OC1_SetConfig+0xd8>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d003      	beq.n	80097a0 <TIM_OC1_SetConfig+0x64>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a1f      	ldr	r2, [pc, #124]	; (8009818 <TIM_OC1_SetConfig+0xdc>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10c      	bne.n	80097ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f023 0308 	bic.w	r3, r3, #8
 80097a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f023 0304 	bic.w	r3, r3, #4
 80097b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a15      	ldr	r2, [pc, #84]	; (8009814 <TIM_OC1_SetConfig+0xd8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d003      	beq.n	80097ca <TIM_OC1_SetConfig+0x8e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a14      	ldr	r2, [pc, #80]	; (8009818 <TIM_OC1_SetConfig+0xdc>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d111      	bne.n	80097ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	621a      	str	r2, [r3, #32]
}
 8009808:	bf00      	nop
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	40010000 	.word	0x40010000
 8009818:	40010400 	.word	0x40010400

0800981c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	f023 0210 	bic.w	r2, r3, #16
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800984a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	021b      	lsls	r3, r3, #8
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	4313      	orrs	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f023 0320 	bic.w	r3, r3, #32
 8009866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	011b      	lsls	r3, r3, #4
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	4313      	orrs	r3, r2
 8009872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a22      	ldr	r2, [pc, #136]	; (8009900 <TIM_OC2_SetConfig+0xe4>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d003      	beq.n	8009884 <TIM_OC2_SetConfig+0x68>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a21      	ldr	r2, [pc, #132]	; (8009904 <TIM_OC2_SetConfig+0xe8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d10d      	bne.n	80098a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800988a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	4313      	orrs	r3, r2
 8009896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800989e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a17      	ldr	r2, [pc, #92]	; (8009900 <TIM_OC2_SetConfig+0xe4>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC2_SetConfig+0x94>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a16      	ldr	r2, [pc, #88]	; (8009904 <TIM_OC2_SetConfig+0xe8>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d113      	bne.n	80098d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	621a      	str	r2, [r3, #32]
}
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	40010000 	.word	0x40010000
 8009904:	40010400 	.word	0x40010400

08009908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	4313      	orrs	r3, r2
 8009948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	021b      	lsls	r3, r3, #8
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	4313      	orrs	r3, r2
 800995c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a21      	ldr	r2, [pc, #132]	; (80099e8 <TIM_OC3_SetConfig+0xe0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d003      	beq.n	800996e <TIM_OC3_SetConfig+0x66>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a20      	ldr	r2, [pc, #128]	; (80099ec <TIM_OC3_SetConfig+0xe4>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d10d      	bne.n	800998a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	4313      	orrs	r3, r2
 8009980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a16      	ldr	r2, [pc, #88]	; (80099e8 <TIM_OC3_SetConfig+0xe0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d003      	beq.n	800999a <TIM_OC3_SetConfig+0x92>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a15      	ldr	r2, [pc, #84]	; (80099ec <TIM_OC3_SetConfig+0xe4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d113      	bne.n	80099c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4313      	orrs	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	621a      	str	r2, [r3, #32]
}
 80099dc:	bf00      	nop
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	40010000 	.word	0x40010000
 80099ec:	40010400 	.word	0x40010400

080099f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	031b      	lsls	r3, r3, #12
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a12      	ldr	r2, [pc, #72]	; (8009a94 <TIM_OC4_SetConfig+0xa4>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d003      	beq.n	8009a58 <TIM_OC4_SetConfig+0x68>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a11      	ldr	r2, [pc, #68]	; (8009a98 <TIM_OC4_SetConfig+0xa8>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d109      	bne.n	8009a6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	019b      	lsls	r3, r3, #6
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	621a      	str	r2, [r3, #32]
}
 8009a86:	bf00      	nop
 8009a88:	371c      	adds	r7, #28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	40010000 	.word	0x40010000
 8009a98:	40010400 	.word	0x40010400

08009a9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f023 0201 	bic.w	r2, r3, #1
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a28      	ldr	r2, [pc, #160]	; (8009b68 <TIM_TI1_SetConfig+0xcc>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d01b      	beq.n	8009b02 <TIM_TI1_SetConfig+0x66>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad0:	d017      	beq.n	8009b02 <TIM_TI1_SetConfig+0x66>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4a25      	ldr	r2, [pc, #148]	; (8009b6c <TIM_TI1_SetConfig+0xd0>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d013      	beq.n	8009b02 <TIM_TI1_SetConfig+0x66>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4a24      	ldr	r2, [pc, #144]	; (8009b70 <TIM_TI1_SetConfig+0xd4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00f      	beq.n	8009b02 <TIM_TI1_SetConfig+0x66>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4a23      	ldr	r2, [pc, #140]	; (8009b74 <TIM_TI1_SetConfig+0xd8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00b      	beq.n	8009b02 <TIM_TI1_SetConfig+0x66>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4a22      	ldr	r2, [pc, #136]	; (8009b78 <TIM_TI1_SetConfig+0xdc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d007      	beq.n	8009b02 <TIM_TI1_SetConfig+0x66>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4a21      	ldr	r2, [pc, #132]	; (8009b7c <TIM_TI1_SetConfig+0xe0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d003      	beq.n	8009b02 <TIM_TI1_SetConfig+0x66>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4a20      	ldr	r2, [pc, #128]	; (8009b80 <TIM_TI1_SetConfig+0xe4>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d101      	bne.n	8009b06 <TIM_TI1_SetConfig+0x6a>
 8009b02:	2301      	movs	r3, #1
 8009b04:	e000      	b.n	8009b08 <TIM_TI1_SetConfig+0x6c>
 8009b06:	2300      	movs	r3, #0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d008      	beq.n	8009b1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f023 0303 	bic.w	r3, r3, #3
 8009b12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	e003      	b.n	8009b26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f043 0301 	orr.w	r3, r3, #1
 8009b24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f023 030a 	bic.w	r3, r3, #10
 8009b40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f003 030a 	and.w	r3, r3, #10
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40010000 	.word	0x40010000
 8009b6c:	40000400 	.word	0x40000400
 8009b70:	40000800 	.word	0x40000800
 8009b74:	40000c00 	.word	0x40000c00
 8009b78:	40010400 	.word	0x40010400
 8009b7c:	40014000 	.word	0x40014000
 8009b80:	40001800 	.word	0x40001800

08009b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f023 0201 	bic.w	r2, r3, #1
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f023 030a 	bic.w	r3, r3, #10
 8009bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	621a      	str	r2, [r3, #32]
}
 8009bd6:	bf00      	nop
 8009bd8:	371c      	adds	r7, #28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b087      	sub	sp, #28
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	f023 0210 	bic.w	r2, r3, #16
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	031b      	lsls	r3, r3, #12
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	621a      	str	r2, [r3, #32]
}
 8009c50:	bf00      	nop
 8009c52:	371c      	adds	r7, #28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	f023 0210 	bic.w	r2, r3, #16
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	031b      	lsls	r3, r3, #12
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	621a      	str	r2, [r3, #32]
}
 8009cb0:	bf00      	nop
 8009cb2:	371c      	adds	r7, #28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f023 0303 	bic.w	r3, r3, #3
 8009ce8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	621a      	str	r2, [r3, #32]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	031b      	lsls	r3, r3, #12
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009d86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	031b      	lsls	r3, r3, #12
 8009d8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	621a      	str	r2, [r3, #32]
}
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	f043 0307 	orr.w	r3, r3, #7
 8009dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	609a      	str	r2, [r3, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	021a      	lsls	r2, r3, #8
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	431a      	orrs	r2, r3
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	609a      	str	r2, [r3, #8]
}
 8009e18:	bf00      	nop
 8009e1a:	371c      	adds	r7, #28
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	2201      	movs	r2, #1
 8009e38:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a1a      	ldr	r2, [r3, #32]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	43db      	mvns	r3, r3
 8009e46:	401a      	ands	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a1a      	ldr	r2, [r3, #32]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f003 031f 	and.w	r3, r3, #31
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	621a      	str	r2, [r3, #32]
}
 8009e62:	bf00      	nop
 8009e64:	371c      	adds	r7, #28
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
	...

08009e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d101      	bne.n	8009e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e84:	2302      	movs	r3, #2
 8009e86:	e05a      	b.n	8009f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2202      	movs	r2, #2
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a21      	ldr	r2, [pc, #132]	; (8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d022      	beq.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed4:	d01d      	beq.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a1d      	ldr	r2, [pc, #116]	; (8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d018      	beq.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a1b      	ldr	r2, [pc, #108]	; (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d013      	beq.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a1a      	ldr	r2, [pc, #104]	; (8009f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d00e      	beq.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a18      	ldr	r2, [pc, #96]	; (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d009      	beq.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a17      	ldr	r2, [pc, #92]	; (8009f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d004      	beq.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a15      	ldr	r2, [pc, #84]	; (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d10c      	bne.n	8009f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	40010000 	.word	0x40010000
 8009f50:	40000400 	.word	0x40000400
 8009f54:	40000800 	.word	0x40000800
 8009f58:	40000c00 	.word	0x40000c00
 8009f5c:	40010400 	.word	0x40010400
 8009f60:	40014000 	.word	0x40014000
 8009f64:	40001800 	.word	0x40001800

08009f68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e03d      	b.n	800a000 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e03f      	b.n	800a0c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7fb f95c 	bl	8005318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2224      	movs	r2, #36	; 0x24
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fe81 	bl	800ad80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	691a      	ldr	r2, [r3, #16]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a08c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	695a      	ldr	r2, [r3, #20]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a09c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b08a      	sub	sp, #40	; 0x28
 800a0d2:	af02      	add	r7, sp, #8
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	603b      	str	r3, [r7, #0]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b20      	cmp	r3, #32
 800a0ec:	d17c      	bne.n	800a1e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <HAL_UART_Transmit+0x2c>
 800a0f4:	88fb      	ldrh	r3, [r7, #6]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e075      	b.n	800a1ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a104:	2b01      	cmp	r3, #1
 800a106:	d101      	bne.n	800a10c <HAL_UART_Transmit+0x3e>
 800a108:	2302      	movs	r3, #2
 800a10a:	e06e      	b.n	800a1ea <HAL_UART_Transmit+0x11c>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2221      	movs	r2, #33	; 0x21
 800a11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a122:	f7fb fbdb 	bl	80058dc <HAL_GetTick>
 800a126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	88fa      	ldrh	r2, [r7, #6]
 800a12c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	88fa      	ldrh	r2, [r7, #6]
 800a132:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a13c:	d108      	bne.n	800a150 <HAL_UART_Transmit+0x82>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d104      	bne.n	800a150 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a146:	2300      	movs	r3, #0
 800a148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	61bb      	str	r3, [r7, #24]
 800a14e:	e003      	b.n	800a158 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a154:	2300      	movs	r3, #0
 800a156:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a160:	e02a      	b.n	800a1b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2200      	movs	r2, #0
 800a16a:	2180      	movs	r1, #128	; 0x80
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 fbc1 	bl	800a8f4 <UART_WaitOnFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e036      	b.n	800a1ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10b      	bne.n	800a19a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a190:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	3302      	adds	r3, #2
 800a196:	61bb      	str	r3, [r7, #24]
 800a198:	e007      	b.n	800a1aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	781a      	ldrb	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1cf      	bne.n	800a162 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2140      	movs	r1, #64	; 0x40
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 fb91 	bl	800a8f4 <UART_WaitOnFlagUntilTimeout>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e006      	b.n	800a1ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e000      	b.n	800a1ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a1e8:	2302      	movs	r3, #2
  }
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b08a      	sub	sp, #40	; 0x28
 800a1f6:	af02      	add	r7, sp, #8
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	603b      	str	r3, [r7, #0]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b20      	cmp	r3, #32
 800a210:	f040 808c 	bne.w	800a32c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <HAL_UART_Receive+0x2e>
 800a21a:	88fb      	ldrh	r3, [r7, #6]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e084      	b.n	800a32e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d101      	bne.n	800a232 <HAL_UART_Receive+0x40>
 800a22e:	2302      	movs	r3, #2
 800a230:	e07d      	b.n	800a32e <HAL_UART_Receive+0x13c>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2222      	movs	r2, #34	; 0x22
 800a244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a24e:	f7fb fb45 	bl	80058dc <HAL_GetTick>
 800a252:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	88fa      	ldrh	r2, [r7, #6]
 800a258:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	88fa      	ldrh	r2, [r7, #6]
 800a25e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a268:	d108      	bne.n	800a27c <HAL_UART_Receive+0x8a>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d104      	bne.n	800a27c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a272:	2300      	movs	r3, #0
 800a274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	e003      	b.n	800a284 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a280:	2300      	movs	r3, #0
 800a282:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a28c:	e043      	b.n	800a316 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2200      	movs	r2, #0
 800a296:	2120      	movs	r1, #32
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fb2b 	bl	800a8f4 <UART_WaitOnFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e042      	b.n	800a32e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10c      	bne.n	800a2c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	3302      	adds	r3, #2
 800a2c4:	61bb      	str	r3, [r7, #24]
 800a2c6:	e01f      	b.n	800a308 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d0:	d007      	beq.n	800a2e2 <HAL_UART_Receive+0xf0>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <HAL_UART_Receive+0xfe>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	e008      	b.n	800a302 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	3301      	adds	r3, #1
 800a306:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	3b01      	subs	r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1b6      	bne.n	800a28e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2220      	movs	r2, #32
 800a324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	e000      	b.n	800a32e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a32c:	2302      	movs	r3, #2
  }
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	4613      	mov	r3, r2
 800a342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b20      	cmp	r3, #32
 800a34e:	d11d      	bne.n	800a38c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d002      	beq.n	800a35c <HAL_UART_Receive_IT+0x26>
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e016      	b.n	800a38e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <HAL_UART_Receive_IT+0x38>
 800a36a:	2302      	movs	r3, #2
 800a36c:	e00f      	b.n	800a38e <HAL_UART_Receive_IT+0x58>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a37c:	88fb      	ldrh	r3, [r7, #6]
 800a37e:	461a      	mov	r2, r3
 800a380:	68b9      	ldr	r1, [r7, #8]
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 fb24 	bl	800a9d0 <UART_Start_Receive_IT>
 800a388:	4603      	mov	r3, r0
 800a38a:	e000      	b.n	800a38e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a38c:	2302      	movs	r3, #2
  }
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b0ba      	sub	sp, #232	; 0xe8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ce:	f003 030f 	and.w	r3, r3, #15
 800a3d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a3d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10f      	bne.n	800a3fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e2:	f003 0320 	and.w	r3, r3, #32
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <HAL_UART_IRQHandler+0x66>
 800a3ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fc07 	bl	800ac0a <UART_Receive_IT>
      return;
 800a3fc:	e256      	b.n	800a8ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a3fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 80de 	beq.w	800a5c4 <HAL_UART_IRQHandler+0x22c>
 800a408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b00      	cmp	r3, #0
 800a412:	d106      	bne.n	800a422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a418:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 80d1 	beq.w	800a5c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <HAL_UART_IRQHandler+0xae>
 800a42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a436:	2b00      	cmp	r3, #0
 800a438:	d005      	beq.n	800a446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	f043 0201 	orr.w	r2, r3, #1
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a44a:	f003 0304 	and.w	r3, r3, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <HAL_UART_IRQHandler+0xd2>
 800a452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d005      	beq.n	800a46a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	f043 0202 	orr.w	r2, r3, #2
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00b      	beq.n	800a48e <HAL_UART_IRQHandler+0xf6>
 800a476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d005      	beq.n	800a48e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	f043 0204 	orr.w	r2, r3, #4
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a492:	f003 0308 	and.w	r3, r3, #8
 800a496:	2b00      	cmp	r3, #0
 800a498:	d011      	beq.n	800a4be <HAL_UART_IRQHandler+0x126>
 800a49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a49e:	f003 0320 	and.w	r3, r3, #32
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d005      	beq.n	800a4be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f043 0208 	orr.w	r2, r3, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 81ed 	beq.w	800a8a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d008      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x14e>
 800a4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fb92 	bl	800ac0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2301      	moveq	r3, #1
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	2b00      	cmp	r3, #0
 800a508:	d103      	bne.n	800a512 <HAL_UART_IRQHandler+0x17a>
 800a50a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d04f      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fa9a 	bl	800aa4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a522:	2b40      	cmp	r3, #64	; 0x40
 800a524:	d141      	bne.n	800a5aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3314      	adds	r3, #20
 800a52c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a53c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3314      	adds	r3, #20
 800a54e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a55e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a56a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1d9      	bne.n	800a526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a576:	2b00      	cmp	r3, #0
 800a578:	d013      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57e:	4a7d      	ldr	r2, [pc, #500]	; (800a774 <HAL_UART_IRQHandler+0x3dc>)
 800a580:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	4618      	mov	r0, r3
 800a588:	f7fc fa08 	bl	800699c <HAL_DMA_Abort_IT>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d016      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a59c:	4610      	mov	r0, r2
 800a59e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a0:	e00e      	b.n	800a5c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f990 	bl	800a8c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a8:	e00a      	b.n	800a5c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f98c 	bl	800a8c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b0:	e006      	b.n	800a5c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f988 	bl	800a8c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a5be:	e170      	b.n	800a8a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c0:	bf00      	nop
    return;
 800a5c2:	e16e      	b.n	800a8a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	f040 814a 	bne.w	800a862 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d2:	f003 0310 	and.w	r3, r3, #16
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8143 	beq.w	800a862 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e0:	f003 0310 	and.w	r3, r3, #16
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 813c 	beq.w	800a862 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	60bb      	str	r3, [r7, #8]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	60bb      	str	r3, [r7, #8]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	60bb      	str	r3, [r7, #8]
 800a5fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60a:	2b40      	cmp	r3, #64	; 0x40
 800a60c:	f040 80b4 	bne.w	800a778 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a61c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 8140 	beq.w	800a8a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a62a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a62e:	429a      	cmp	r2, r3
 800a630:	f080 8139 	bcs.w	800a8a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a63a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a646:	f000 8088 	beq.w	800a75a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	330c      	adds	r3, #12
 800a650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	330c      	adds	r3, #12
 800a672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a67a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a686:	e841 2300 	strex	r3, r2, [r1]
 800a68a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a68e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1d9      	bne.n	800a64a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3314      	adds	r3, #20
 800a69c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6a0:	e853 3f00 	ldrex	r3, [r3]
 800a6a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6a8:	f023 0301 	bic.w	r3, r3, #1
 800a6ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3314      	adds	r3, #20
 800a6b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6c6:	e841 2300 	strex	r3, r2, [r1]
 800a6ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1e1      	bne.n	800a696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3314      	adds	r3, #20
 800a6d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a6e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3314      	adds	r3, #20
 800a6f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a6f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a6f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a6fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a6fe:	e841 2300 	strex	r3, r2, [r1]
 800a702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1e3      	bne.n	800a6d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	330c      	adds	r3, #12
 800a71e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a72a:	f023 0310 	bic.w	r3, r3, #16
 800a72e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	330c      	adds	r3, #12
 800a738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a73c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a73e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e3      	bne.n	800a718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a754:	4618      	mov	r0, r3
 800a756:	f7fc f8b1 	bl	80068bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a762:	b29b      	uxth	r3, r3
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	b29b      	uxth	r3, r3
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f8b6 	bl	800a8dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a770:	e099      	b.n	800a8a6 <HAL_UART_IRQHandler+0x50e>
 800a772:	bf00      	nop
 800a774:	0800ab13 	.word	0x0800ab13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a780:	b29b      	uxth	r3, r3
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 808b 	beq.w	800a8aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 8086 	beq.w	800a8aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	330c      	adds	r3, #12
 800a7be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a7c2:	647a      	str	r2, [r7, #68]	; 0x44
 800a7c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e3      	bne.n	800a79e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3314      	adds	r3, #20
 800a7dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	f023 0301 	bic.w	r3, r3, #1
 800a7ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3314      	adds	r3, #20
 800a7f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a7fa:	633a      	str	r2, [r7, #48]	; 0x30
 800a7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1e3      	bne.n	800a7d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	330c      	adds	r3, #12
 800a822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 0310 	bic.w	r3, r3, #16
 800a832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	330c      	adds	r3, #12
 800a83c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a840:	61fa      	str	r2, [r7, #28]
 800a842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	69b9      	ldr	r1, [r7, #24]
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	e841 2300 	strex	r3, r2, [r1]
 800a84c:	617b      	str	r3, [r7, #20]
   return(result);
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e3      	bne.n	800a81c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f83e 	bl	800a8dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a860:	e023      	b.n	800a8aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <HAL_UART_IRQHandler+0x4ea>
 800a86e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f95d 	bl	800ab3a <UART_Transmit_IT>
    return;
 800a880:	e014      	b.n	800a8ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <HAL_UART_IRQHandler+0x514>
 800a88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f99d 	bl	800abda <UART_EndTransmit_IT>
    return;
 800a8a0:	e004      	b.n	800a8ac <HAL_UART_IRQHandler+0x514>
    return;
 800a8a2:	bf00      	nop
 800a8a4:	e002      	b.n	800a8ac <HAL_UART_IRQHandler+0x514>
      return;
 800a8a6:	bf00      	nop
 800a8a8:	e000      	b.n	800a8ac <HAL_UART_IRQHandler+0x514>
      return;
 800a8aa:	bf00      	nop
  }
}
 800a8ac:	37e8      	adds	r7, #232	; 0xe8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop

0800a8b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b090      	sub	sp, #64	; 0x40
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	603b      	str	r3, [r7, #0]
 800a900:	4613      	mov	r3, r2
 800a902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a904:	e050      	b.n	800a9a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90c:	d04c      	beq.n	800a9a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <UART_WaitOnFlagUntilTimeout+0x30>
 800a914:	f7fa ffe2 	bl	80058dc <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a920:	429a      	cmp	r2, r3
 800a922:	d241      	bcs.n	800a9a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	330c      	adds	r3, #12
 800a92a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92e:	e853 3f00 	ldrex	r3, [r3]
 800a932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	330c      	adds	r3, #12
 800a942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a944:	637a      	str	r2, [r7, #52]	; 0x34
 800a946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a94a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a94c:	e841 2300 	strex	r3, r2, [r1]
 800a950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e5      	bne.n	800a924 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3314      	adds	r3, #20
 800a95e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	e853 3f00 	ldrex	r3, [r3]
 800a966:	613b      	str	r3, [r7, #16]
   return(result);
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f023 0301 	bic.w	r3, r3, #1
 800a96e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3314      	adds	r3, #20
 800a976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a978:	623a      	str	r2, [r7, #32]
 800a97a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97c:	69f9      	ldr	r1, [r7, #28]
 800a97e:	6a3a      	ldr	r2, [r7, #32]
 800a980:	e841 2300 	strex	r3, r2, [r1]
 800a984:	61bb      	str	r3, [r7, #24]
   return(result);
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e5      	bne.n	800a958 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2220      	movs	r2, #32
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2220      	movs	r2, #32
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e00f      	b.n	800a9c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	bf0c      	ite	eq
 800a9b8:	2301      	moveq	r3, #1
 800a9ba:	2300      	movne	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	461a      	mov	r2, r3
 800a9c0:	79fb      	ldrb	r3, [r7, #7]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d09f      	beq.n	800a906 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3740      	adds	r7, #64	; 0x40
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	88fa      	ldrh	r2, [r7, #6]
 800a9e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	88fa      	ldrh	r2, [r7, #6]
 800a9ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2222      	movs	r2, #34	; 0x22
 800a9fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d007      	beq.n	800aa1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	695a      	ldr	r2, [r3, #20]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f042 0201 	orr.w	r2, r2, #1
 800aa2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f042 0220 	orr.w	r2, r2, #32
 800aa3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b095      	sub	sp, #84	; 0x54
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	330c      	adds	r3, #12
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5e:	e853 3f00 	ldrex	r3, [r3]
 800aa62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	330c      	adds	r3, #12
 800aa72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa74:	643a      	str	r2, [r7, #64]	; 0x40
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e5      	bne.n	800aa54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3314      	adds	r3, #20
 800aa8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f023 0301 	bic.w	r3, r3, #1
 800aa9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3314      	adds	r3, #20
 800aaa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aaaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e5      	bne.n	800aa88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d119      	bne.n	800aaf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	330c      	adds	r3, #12
 800aaca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	e853 3f00 	ldrex	r3, [r3]
 800aad2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f023 0310 	bic.w	r3, r3, #16
 800aada:	647b      	str	r3, [r7, #68]	; 0x44
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	330c      	adds	r3, #12
 800aae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aae4:	61ba      	str	r2, [r7, #24]
 800aae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6979      	ldr	r1, [r7, #20]
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	e841 2300 	strex	r3, r2, [r1]
 800aaf0:	613b      	str	r3, [r7, #16]
   return(result);
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e5      	bne.n	800aac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab06:	bf00      	nop
 800ab08:	3754      	adds	r7, #84	; 0x54
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f7ff fecb 	bl	800a8c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab32:	bf00      	nop
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b21      	cmp	r3, #33	; 0x21
 800ab4c:	d13e      	bne.n	800abcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab56:	d114      	bne.n	800ab82 <UART_Transmit_IT+0x48>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d110      	bne.n	800ab82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	1c9a      	adds	r2, r3, #2
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	621a      	str	r2, [r3, #32]
 800ab80:	e008      	b.n	800ab94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	1c59      	adds	r1, r3, #1
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	6211      	str	r1, [r2, #32]
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	4619      	mov	r1, r3
 800aba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10f      	bne.n	800abc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68da      	ldr	r2, [r3, #12]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	e000      	b.n	800abce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800abcc:	2302      	movs	r3, #2
  }
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fe5a 	bl	800a8b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b08c      	sub	sp, #48	; 0x30
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b22      	cmp	r3, #34	; 0x22
 800ac1c:	f040 80ab 	bne.w	800ad76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac28:	d117      	bne.n	800ac5a <UART_Receive_IT+0x50>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d113      	bne.n	800ac5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac52:	1c9a      	adds	r2, r3, #2
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	629a      	str	r2, [r3, #40]	; 0x28
 800ac58:	e026      	b.n	800aca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac6c:	d007      	beq.n	800ac7e <UART_Receive_IT+0x74>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <UART_Receive_IT+0x82>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	e008      	b.n	800ac9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4619      	mov	r1, r3
 800acb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d15a      	bne.n	800ad72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68da      	ldr	r2, [r3, #12]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f022 0220 	bic.w	r2, r2, #32
 800acca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68da      	ldr	r2, [r3, #12]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	695a      	ldr	r2, [r3, #20]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f022 0201 	bic.w	r2, r2, #1
 800acea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2220      	movs	r2, #32
 800acf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d135      	bne.n	800ad68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	330c      	adds	r3, #12
 800ad08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	613b      	str	r3, [r7, #16]
   return(result);
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	f023 0310 	bic.w	r3, r3, #16
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	330c      	adds	r3, #12
 800ad20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad22:	623a      	str	r2, [r7, #32]
 800ad24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	69f9      	ldr	r1, [r7, #28]
 800ad28:	6a3a      	ldr	r2, [r7, #32]
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1e5      	bne.n	800ad02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0310 	and.w	r3, r3, #16
 800ad40:	2b10      	cmp	r3, #16
 800ad42:	d10a      	bne.n	800ad5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad44:	2300      	movs	r3, #0
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff fdbb 	bl	800a8dc <HAL_UARTEx_RxEventCallback>
 800ad66:	e002      	b.n	800ad6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7f9 ff53 	bl	8004c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e002      	b.n	800ad78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	e000      	b.n	800ad78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ad76:	2302      	movs	r3, #2
  }
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3730      	adds	r7, #48	; 0x30
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad84:	b0c0      	sub	sp, #256	; 0x100
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9c:	68d9      	ldr	r1, [r3, #12]
 800ad9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	ea40 0301 	orr.w	r3, r0, r1
 800ada8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800adaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	431a      	orrs	r2, r3
 800adb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	431a      	orrs	r2, r3
 800adc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800adcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800add8:	f021 010c 	bic.w	r1, r1, #12
 800addc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ade6:	430b      	orrs	r3, r1
 800ade8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800adea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800adf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adfa:	6999      	ldr	r1, [r3, #24]
 800adfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	ea40 0301 	orr.w	r3, r0, r1
 800ae06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	4b8f      	ldr	r3, [pc, #572]	; (800b04c <UART_SetConfig+0x2cc>)
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d005      	beq.n	800ae20 <UART_SetConfig+0xa0>
 800ae14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b8d      	ldr	r3, [pc, #564]	; (800b050 <UART_SetConfig+0x2d0>)
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d104      	bne.n	800ae2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae20:	f7fc fda4 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 800ae24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ae28:	e003      	b.n	800ae32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae2a:	f7fc fd8b 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 800ae2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae3c:	f040 810c 	bne.w	800b058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ae4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ae52:	4622      	mov	r2, r4
 800ae54:	462b      	mov	r3, r5
 800ae56:	1891      	adds	r1, r2, r2
 800ae58:	65b9      	str	r1, [r7, #88]	; 0x58
 800ae5a:	415b      	adcs	r3, r3
 800ae5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ae62:	4621      	mov	r1, r4
 800ae64:	eb12 0801 	adds.w	r8, r2, r1
 800ae68:	4629      	mov	r1, r5
 800ae6a:	eb43 0901 	adc.w	r9, r3, r1
 800ae6e:	f04f 0200 	mov.w	r2, #0
 800ae72:	f04f 0300 	mov.w	r3, #0
 800ae76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae82:	4690      	mov	r8, r2
 800ae84:	4699      	mov	r9, r3
 800ae86:	4623      	mov	r3, r4
 800ae88:	eb18 0303 	adds.w	r3, r8, r3
 800ae8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae90:	462b      	mov	r3, r5
 800ae92:	eb49 0303 	adc.w	r3, r9, r3
 800ae96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aeaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aeae:	460b      	mov	r3, r1
 800aeb0:	18db      	adds	r3, r3, r3
 800aeb2:	653b      	str	r3, [r7, #80]	; 0x50
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	eb42 0303 	adc.w	r3, r2, r3
 800aeba:	657b      	str	r3, [r7, #84]	; 0x54
 800aebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aec4:	f7f5 fee0 	bl	8000c88 <__aeabi_uldivmod>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4b61      	ldr	r3, [pc, #388]	; (800b054 <UART_SetConfig+0x2d4>)
 800aece:	fba3 2302 	umull	r2, r3, r3, r2
 800aed2:	095b      	lsrs	r3, r3, #5
 800aed4:	011c      	lsls	r4, r3, #4
 800aed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aee8:	4642      	mov	r2, r8
 800aeea:	464b      	mov	r3, r9
 800aeec:	1891      	adds	r1, r2, r2
 800aeee:	64b9      	str	r1, [r7, #72]	; 0x48
 800aef0:	415b      	adcs	r3, r3
 800aef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aef8:	4641      	mov	r1, r8
 800aefa:	eb12 0a01 	adds.w	sl, r2, r1
 800aefe:	4649      	mov	r1, r9
 800af00:	eb43 0b01 	adc.w	fp, r3, r1
 800af04:	f04f 0200 	mov.w	r2, #0
 800af08:	f04f 0300 	mov.w	r3, #0
 800af0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800af10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800af14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af18:	4692      	mov	sl, r2
 800af1a:	469b      	mov	fp, r3
 800af1c:	4643      	mov	r3, r8
 800af1e:	eb1a 0303 	adds.w	r3, sl, r3
 800af22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af26:	464b      	mov	r3, r9
 800af28:	eb4b 0303 	adc.w	r3, fp, r3
 800af2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800af40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af44:	460b      	mov	r3, r1
 800af46:	18db      	adds	r3, r3, r3
 800af48:	643b      	str	r3, [r7, #64]	; 0x40
 800af4a:	4613      	mov	r3, r2
 800af4c:	eb42 0303 	adc.w	r3, r2, r3
 800af50:	647b      	str	r3, [r7, #68]	; 0x44
 800af52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800af56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800af5a:	f7f5 fe95 	bl	8000c88 <__aeabi_uldivmod>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4611      	mov	r1, r2
 800af64:	4b3b      	ldr	r3, [pc, #236]	; (800b054 <UART_SetConfig+0x2d4>)
 800af66:	fba3 2301 	umull	r2, r3, r3, r1
 800af6a:	095b      	lsrs	r3, r3, #5
 800af6c:	2264      	movs	r2, #100	; 0x64
 800af6e:	fb02 f303 	mul.w	r3, r2, r3
 800af72:	1acb      	subs	r3, r1, r3
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800af7a:	4b36      	ldr	r3, [pc, #216]	; (800b054 <UART_SetConfig+0x2d4>)
 800af7c:	fba3 2302 	umull	r2, r3, r3, r2
 800af80:	095b      	lsrs	r3, r3, #5
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af88:	441c      	add	r4, r3
 800af8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800af98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800af9c:	4642      	mov	r2, r8
 800af9e:	464b      	mov	r3, r9
 800afa0:	1891      	adds	r1, r2, r2
 800afa2:	63b9      	str	r1, [r7, #56]	; 0x38
 800afa4:	415b      	adcs	r3, r3
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800afac:	4641      	mov	r1, r8
 800afae:	1851      	adds	r1, r2, r1
 800afb0:	6339      	str	r1, [r7, #48]	; 0x30
 800afb2:	4649      	mov	r1, r9
 800afb4:	414b      	adcs	r3, r1
 800afb6:	637b      	str	r3, [r7, #52]	; 0x34
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	f04f 0300 	mov.w	r3, #0
 800afc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800afc4:	4659      	mov	r1, fp
 800afc6:	00cb      	lsls	r3, r1, #3
 800afc8:	4651      	mov	r1, sl
 800afca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afce:	4651      	mov	r1, sl
 800afd0:	00ca      	lsls	r2, r1, #3
 800afd2:	4610      	mov	r0, r2
 800afd4:	4619      	mov	r1, r3
 800afd6:	4603      	mov	r3, r0
 800afd8:	4642      	mov	r2, r8
 800afda:	189b      	adds	r3, r3, r2
 800afdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afe0:	464b      	mov	r3, r9
 800afe2:	460a      	mov	r2, r1
 800afe4:	eb42 0303 	adc.w	r3, r2, r3
 800afe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800affc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b000:	460b      	mov	r3, r1
 800b002:	18db      	adds	r3, r3, r3
 800b004:	62bb      	str	r3, [r7, #40]	; 0x28
 800b006:	4613      	mov	r3, r2
 800b008:	eb42 0303 	adc.w	r3, r2, r3
 800b00c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b00e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b016:	f7f5 fe37 	bl	8000c88 <__aeabi_uldivmod>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4b0d      	ldr	r3, [pc, #52]	; (800b054 <UART_SetConfig+0x2d4>)
 800b020:	fba3 1302 	umull	r1, r3, r3, r2
 800b024:	095b      	lsrs	r3, r3, #5
 800b026:	2164      	movs	r1, #100	; 0x64
 800b028:	fb01 f303 	mul.w	r3, r1, r3
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	00db      	lsls	r3, r3, #3
 800b030:	3332      	adds	r3, #50	; 0x32
 800b032:	4a08      	ldr	r2, [pc, #32]	; (800b054 <UART_SetConfig+0x2d4>)
 800b034:	fba2 2303 	umull	r2, r3, r2, r3
 800b038:	095b      	lsrs	r3, r3, #5
 800b03a:	f003 0207 	and.w	r2, r3, #7
 800b03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4422      	add	r2, r4
 800b046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b048:	e105      	b.n	800b256 <UART_SetConfig+0x4d6>
 800b04a:	bf00      	nop
 800b04c:	40011000 	.word	0x40011000
 800b050:	40011400 	.word	0x40011400
 800b054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b05c:	2200      	movs	r2, #0
 800b05e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b06a:	4642      	mov	r2, r8
 800b06c:	464b      	mov	r3, r9
 800b06e:	1891      	adds	r1, r2, r2
 800b070:	6239      	str	r1, [r7, #32]
 800b072:	415b      	adcs	r3, r3
 800b074:	627b      	str	r3, [r7, #36]	; 0x24
 800b076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b07a:	4641      	mov	r1, r8
 800b07c:	1854      	adds	r4, r2, r1
 800b07e:	4649      	mov	r1, r9
 800b080:	eb43 0501 	adc.w	r5, r3, r1
 800b084:	f04f 0200 	mov.w	r2, #0
 800b088:	f04f 0300 	mov.w	r3, #0
 800b08c:	00eb      	lsls	r3, r5, #3
 800b08e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b092:	00e2      	lsls	r2, r4, #3
 800b094:	4614      	mov	r4, r2
 800b096:	461d      	mov	r5, r3
 800b098:	4643      	mov	r3, r8
 800b09a:	18e3      	adds	r3, r4, r3
 800b09c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0a0:	464b      	mov	r3, r9
 800b0a2:	eb45 0303 	adc.w	r3, r5, r3
 800b0a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b0ba:	f04f 0200 	mov.w	r2, #0
 800b0be:	f04f 0300 	mov.w	r3, #0
 800b0c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	008b      	lsls	r3, r1, #2
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	008a      	lsls	r2, r1, #2
 800b0d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b0d8:	f7f5 fdd6 	bl	8000c88 <__aeabi_uldivmod>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4b60      	ldr	r3, [pc, #384]	; (800b264 <UART_SetConfig+0x4e4>)
 800b0e2:	fba3 2302 	umull	r2, r3, r3, r2
 800b0e6:	095b      	lsrs	r3, r3, #5
 800b0e8:	011c      	lsls	r4, r3, #4
 800b0ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b0f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b0f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b0fc:	4642      	mov	r2, r8
 800b0fe:	464b      	mov	r3, r9
 800b100:	1891      	adds	r1, r2, r2
 800b102:	61b9      	str	r1, [r7, #24]
 800b104:	415b      	adcs	r3, r3
 800b106:	61fb      	str	r3, [r7, #28]
 800b108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b10c:	4641      	mov	r1, r8
 800b10e:	1851      	adds	r1, r2, r1
 800b110:	6139      	str	r1, [r7, #16]
 800b112:	4649      	mov	r1, r9
 800b114:	414b      	adcs	r3, r1
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	f04f 0200 	mov.w	r2, #0
 800b11c:	f04f 0300 	mov.w	r3, #0
 800b120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b124:	4659      	mov	r1, fp
 800b126:	00cb      	lsls	r3, r1, #3
 800b128:	4651      	mov	r1, sl
 800b12a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b12e:	4651      	mov	r1, sl
 800b130:	00ca      	lsls	r2, r1, #3
 800b132:	4610      	mov	r0, r2
 800b134:	4619      	mov	r1, r3
 800b136:	4603      	mov	r3, r0
 800b138:	4642      	mov	r2, r8
 800b13a:	189b      	adds	r3, r3, r2
 800b13c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b140:	464b      	mov	r3, r9
 800b142:	460a      	mov	r2, r1
 800b144:	eb42 0303 	adc.w	r3, r2, r3
 800b148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	67bb      	str	r3, [r7, #120]	; 0x78
 800b156:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b158:	f04f 0200 	mov.w	r2, #0
 800b15c:	f04f 0300 	mov.w	r3, #0
 800b160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b164:	4649      	mov	r1, r9
 800b166:	008b      	lsls	r3, r1, #2
 800b168:	4641      	mov	r1, r8
 800b16a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b16e:	4641      	mov	r1, r8
 800b170:	008a      	lsls	r2, r1, #2
 800b172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b176:	f7f5 fd87 	bl	8000c88 <__aeabi_uldivmod>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4b39      	ldr	r3, [pc, #228]	; (800b264 <UART_SetConfig+0x4e4>)
 800b180:	fba3 1302 	umull	r1, r3, r3, r2
 800b184:	095b      	lsrs	r3, r3, #5
 800b186:	2164      	movs	r1, #100	; 0x64
 800b188:	fb01 f303 	mul.w	r3, r1, r3
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	3332      	adds	r3, #50	; 0x32
 800b192:	4a34      	ldr	r2, [pc, #208]	; (800b264 <UART_SetConfig+0x4e4>)
 800b194:	fba2 2303 	umull	r2, r3, r2, r3
 800b198:	095b      	lsrs	r3, r3, #5
 800b19a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b19e:	441c      	add	r4, r3
 800b1a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	673b      	str	r3, [r7, #112]	; 0x70
 800b1a8:	677a      	str	r2, [r7, #116]	; 0x74
 800b1aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b1ae:	4642      	mov	r2, r8
 800b1b0:	464b      	mov	r3, r9
 800b1b2:	1891      	adds	r1, r2, r2
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	415b      	adcs	r3, r3
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1be:	4641      	mov	r1, r8
 800b1c0:	1851      	adds	r1, r2, r1
 800b1c2:	6039      	str	r1, [r7, #0]
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	414b      	adcs	r3, r1
 800b1c8:	607b      	str	r3, [r7, #4]
 800b1ca:	f04f 0200 	mov.w	r2, #0
 800b1ce:	f04f 0300 	mov.w	r3, #0
 800b1d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b1d6:	4659      	mov	r1, fp
 800b1d8:	00cb      	lsls	r3, r1, #3
 800b1da:	4651      	mov	r1, sl
 800b1dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1e0:	4651      	mov	r1, sl
 800b1e2:	00ca      	lsls	r2, r1, #3
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	189b      	adds	r3, r3, r2
 800b1ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	460a      	mov	r2, r1
 800b1f4:	eb42 0303 	adc.w	r3, r2, r3
 800b1f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	663b      	str	r3, [r7, #96]	; 0x60
 800b204:	667a      	str	r2, [r7, #100]	; 0x64
 800b206:	f04f 0200 	mov.w	r2, #0
 800b20a:	f04f 0300 	mov.w	r3, #0
 800b20e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b212:	4649      	mov	r1, r9
 800b214:	008b      	lsls	r3, r1, #2
 800b216:	4641      	mov	r1, r8
 800b218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b21c:	4641      	mov	r1, r8
 800b21e:	008a      	lsls	r2, r1, #2
 800b220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b224:	f7f5 fd30 	bl	8000c88 <__aeabi_uldivmod>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4b0d      	ldr	r3, [pc, #52]	; (800b264 <UART_SetConfig+0x4e4>)
 800b22e:	fba3 1302 	umull	r1, r3, r3, r2
 800b232:	095b      	lsrs	r3, r3, #5
 800b234:	2164      	movs	r1, #100	; 0x64
 800b236:	fb01 f303 	mul.w	r3, r1, r3
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	011b      	lsls	r3, r3, #4
 800b23e:	3332      	adds	r3, #50	; 0x32
 800b240:	4a08      	ldr	r2, [pc, #32]	; (800b264 <UART_SetConfig+0x4e4>)
 800b242:	fba2 2303 	umull	r2, r3, r2, r3
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	f003 020f 	and.w	r2, r3, #15
 800b24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4422      	add	r2, r4
 800b254:	609a      	str	r2, [r3, #8]
}
 800b256:	bf00      	nop
 800b258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b25c:	46bd      	mov	sp, r7
 800b25e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b262:	bf00      	nop
 800b264:	51eb851f 	.word	0x51eb851f

0800b268 <__errno>:
 800b268:	4b01      	ldr	r3, [pc, #4]	; (800b270 <__errno+0x8>)
 800b26a:	6818      	ldr	r0, [r3, #0]
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000098 	.word	0x20000098

0800b274 <__libc_init_array>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	4d0d      	ldr	r5, [pc, #52]	; (800b2ac <__libc_init_array+0x38>)
 800b278:	4c0d      	ldr	r4, [pc, #52]	; (800b2b0 <__libc_init_array+0x3c>)
 800b27a:	1b64      	subs	r4, r4, r5
 800b27c:	10a4      	asrs	r4, r4, #2
 800b27e:	2600      	movs	r6, #0
 800b280:	42a6      	cmp	r6, r4
 800b282:	d109      	bne.n	800b298 <__libc_init_array+0x24>
 800b284:	4d0b      	ldr	r5, [pc, #44]	; (800b2b4 <__libc_init_array+0x40>)
 800b286:	4c0c      	ldr	r4, [pc, #48]	; (800b2b8 <__libc_init_array+0x44>)
 800b288:	f004 f950 	bl	800f52c <_init>
 800b28c:	1b64      	subs	r4, r4, r5
 800b28e:	10a4      	asrs	r4, r4, #2
 800b290:	2600      	movs	r6, #0
 800b292:	42a6      	cmp	r6, r4
 800b294:	d105      	bne.n	800b2a2 <__libc_init_array+0x2e>
 800b296:	bd70      	pop	{r4, r5, r6, pc}
 800b298:	f855 3b04 	ldr.w	r3, [r5], #4
 800b29c:	4798      	blx	r3
 800b29e:	3601      	adds	r6, #1
 800b2a0:	e7ee      	b.n	800b280 <__libc_init_array+0xc>
 800b2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a6:	4798      	blx	r3
 800b2a8:	3601      	adds	r6, #1
 800b2aa:	e7f2      	b.n	800b292 <__libc_init_array+0x1e>
 800b2ac:	0800fca0 	.word	0x0800fca0
 800b2b0:	0800fca0 	.word	0x0800fca0
 800b2b4:	0800fca0 	.word	0x0800fca0
 800b2b8:	0800fca4 	.word	0x0800fca4

0800b2bc <memset>:
 800b2bc:	4402      	add	r2, r0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d100      	bne.n	800b2c6 <memset+0xa>
 800b2c4:	4770      	bx	lr
 800b2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ca:	e7f9      	b.n	800b2c0 <memset+0x4>

0800b2cc <__cvt>:
 800b2cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d0:	ec55 4b10 	vmov	r4, r5, d0
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	460e      	mov	r6, r1
 800b2d8:	4619      	mov	r1, r3
 800b2da:	462b      	mov	r3, r5
 800b2dc:	bfbb      	ittet	lt
 800b2de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b2e2:	461d      	movlt	r5, r3
 800b2e4:	2300      	movge	r3, #0
 800b2e6:	232d      	movlt	r3, #45	; 0x2d
 800b2e8:	700b      	strb	r3, [r1, #0]
 800b2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b2f0:	4691      	mov	r9, r2
 800b2f2:	f023 0820 	bic.w	r8, r3, #32
 800b2f6:	bfbc      	itt	lt
 800b2f8:	4622      	movlt	r2, r4
 800b2fa:	4614      	movlt	r4, r2
 800b2fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b300:	d005      	beq.n	800b30e <__cvt+0x42>
 800b302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b306:	d100      	bne.n	800b30a <__cvt+0x3e>
 800b308:	3601      	adds	r6, #1
 800b30a:	2102      	movs	r1, #2
 800b30c:	e000      	b.n	800b310 <__cvt+0x44>
 800b30e:	2103      	movs	r1, #3
 800b310:	ab03      	add	r3, sp, #12
 800b312:	9301      	str	r3, [sp, #4]
 800b314:	ab02      	add	r3, sp, #8
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	ec45 4b10 	vmov	d0, r4, r5
 800b31c:	4653      	mov	r3, sl
 800b31e:	4632      	mov	r2, r6
 800b320:	f000 fcea 	bl	800bcf8 <_dtoa_r>
 800b324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b328:	4607      	mov	r7, r0
 800b32a:	d102      	bne.n	800b332 <__cvt+0x66>
 800b32c:	f019 0f01 	tst.w	r9, #1
 800b330:	d022      	beq.n	800b378 <__cvt+0xac>
 800b332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b336:	eb07 0906 	add.w	r9, r7, r6
 800b33a:	d110      	bne.n	800b35e <__cvt+0x92>
 800b33c:	783b      	ldrb	r3, [r7, #0]
 800b33e:	2b30      	cmp	r3, #48	; 0x30
 800b340:	d10a      	bne.n	800b358 <__cvt+0x8c>
 800b342:	2200      	movs	r2, #0
 800b344:	2300      	movs	r3, #0
 800b346:	4620      	mov	r0, r4
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f5 fbdd 	bl	8000b08 <__aeabi_dcmpeq>
 800b34e:	b918      	cbnz	r0, 800b358 <__cvt+0x8c>
 800b350:	f1c6 0601 	rsb	r6, r6, #1
 800b354:	f8ca 6000 	str.w	r6, [sl]
 800b358:	f8da 3000 	ldr.w	r3, [sl]
 800b35c:	4499      	add	r9, r3
 800b35e:	2200      	movs	r2, #0
 800b360:	2300      	movs	r3, #0
 800b362:	4620      	mov	r0, r4
 800b364:	4629      	mov	r1, r5
 800b366:	f7f5 fbcf 	bl	8000b08 <__aeabi_dcmpeq>
 800b36a:	b108      	cbz	r0, 800b370 <__cvt+0xa4>
 800b36c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b370:	2230      	movs	r2, #48	; 0x30
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	454b      	cmp	r3, r9
 800b376:	d307      	bcc.n	800b388 <__cvt+0xbc>
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b37c:	1bdb      	subs	r3, r3, r7
 800b37e:	4638      	mov	r0, r7
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	b004      	add	sp, #16
 800b384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b388:	1c59      	adds	r1, r3, #1
 800b38a:	9103      	str	r1, [sp, #12]
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	e7f0      	b.n	800b372 <__cvt+0xa6>

0800b390 <__exponent>:
 800b390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b392:	4603      	mov	r3, r0
 800b394:	2900      	cmp	r1, #0
 800b396:	bfb8      	it	lt
 800b398:	4249      	neglt	r1, r1
 800b39a:	f803 2b02 	strb.w	r2, [r3], #2
 800b39e:	bfb4      	ite	lt
 800b3a0:	222d      	movlt	r2, #45	; 0x2d
 800b3a2:	222b      	movge	r2, #43	; 0x2b
 800b3a4:	2909      	cmp	r1, #9
 800b3a6:	7042      	strb	r2, [r0, #1]
 800b3a8:	dd2a      	ble.n	800b400 <__exponent+0x70>
 800b3aa:	f10d 0407 	add.w	r4, sp, #7
 800b3ae:	46a4      	mov	ip, r4
 800b3b0:	270a      	movs	r7, #10
 800b3b2:	46a6      	mov	lr, r4
 800b3b4:	460a      	mov	r2, r1
 800b3b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b3ba:	fb07 1516 	mls	r5, r7, r6, r1
 800b3be:	3530      	adds	r5, #48	; 0x30
 800b3c0:	2a63      	cmp	r2, #99	; 0x63
 800b3c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b3c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	dcf1      	bgt.n	800b3b2 <__exponent+0x22>
 800b3ce:	3130      	adds	r1, #48	; 0x30
 800b3d0:	f1ae 0502 	sub.w	r5, lr, #2
 800b3d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b3d8:	1c44      	adds	r4, r0, #1
 800b3da:	4629      	mov	r1, r5
 800b3dc:	4561      	cmp	r1, ip
 800b3de:	d30a      	bcc.n	800b3f6 <__exponent+0x66>
 800b3e0:	f10d 0209 	add.w	r2, sp, #9
 800b3e4:	eba2 020e 	sub.w	r2, r2, lr
 800b3e8:	4565      	cmp	r5, ip
 800b3ea:	bf88      	it	hi
 800b3ec:	2200      	movhi	r2, #0
 800b3ee:	4413      	add	r3, r2
 800b3f0:	1a18      	subs	r0, r3, r0
 800b3f2:	b003      	add	sp, #12
 800b3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b3fe:	e7ed      	b.n	800b3dc <__exponent+0x4c>
 800b400:	2330      	movs	r3, #48	; 0x30
 800b402:	3130      	adds	r1, #48	; 0x30
 800b404:	7083      	strb	r3, [r0, #2]
 800b406:	70c1      	strb	r1, [r0, #3]
 800b408:	1d03      	adds	r3, r0, #4
 800b40a:	e7f1      	b.n	800b3f0 <__exponent+0x60>

0800b40c <_printf_float>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	ed2d 8b02 	vpush	{d8}
 800b414:	b08d      	sub	sp, #52	; 0x34
 800b416:	460c      	mov	r4, r1
 800b418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b41c:	4616      	mov	r6, r2
 800b41e:	461f      	mov	r7, r3
 800b420:	4605      	mov	r5, r0
 800b422:	f001 fa57 	bl	800c8d4 <_localeconv_r>
 800b426:	f8d0 a000 	ldr.w	sl, [r0]
 800b42a:	4650      	mov	r0, sl
 800b42c:	f7f4 fef0 	bl	8000210 <strlen>
 800b430:	2300      	movs	r3, #0
 800b432:	930a      	str	r3, [sp, #40]	; 0x28
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	9305      	str	r3, [sp, #20]
 800b438:	f8d8 3000 	ldr.w	r3, [r8]
 800b43c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b440:	3307      	adds	r3, #7
 800b442:	f023 0307 	bic.w	r3, r3, #7
 800b446:	f103 0208 	add.w	r2, r3, #8
 800b44a:	f8c8 2000 	str.w	r2, [r8]
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b45a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	f8cd 8018 	str.w	r8, [sp, #24]
 800b464:	ee08 0a10 	vmov	s16, r0
 800b468:	4b9f      	ldr	r3, [pc, #636]	; (800b6e8 <_printf_float+0x2dc>)
 800b46a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	f7f5 fb7b 	bl	8000b6c <__aeabi_dcmpun>
 800b476:	bb88      	cbnz	r0, 800b4dc <_printf_float+0xd0>
 800b478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b47c:	4b9a      	ldr	r3, [pc, #616]	; (800b6e8 <_printf_float+0x2dc>)
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295
 800b482:	f7f5 fb55 	bl	8000b30 <__aeabi_dcmple>
 800b486:	bb48      	cbnz	r0, 800b4dc <_printf_float+0xd0>
 800b488:	2200      	movs	r2, #0
 800b48a:	2300      	movs	r3, #0
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f5 fb44 	bl	8000b1c <__aeabi_dcmplt>
 800b494:	b110      	cbz	r0, 800b49c <_printf_float+0x90>
 800b496:	232d      	movs	r3, #45	; 0x2d
 800b498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b49c:	4b93      	ldr	r3, [pc, #588]	; (800b6ec <_printf_float+0x2e0>)
 800b49e:	4894      	ldr	r0, [pc, #592]	; (800b6f0 <_printf_float+0x2e4>)
 800b4a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b4a4:	bf94      	ite	ls
 800b4a6:	4698      	movls	r8, r3
 800b4a8:	4680      	movhi	r8, r0
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	6123      	str	r3, [r4, #16]
 800b4ae:	9b05      	ldr	r3, [sp, #20]
 800b4b0:	f023 0204 	bic.w	r2, r3, #4
 800b4b4:	6022      	str	r2, [r4, #0]
 800b4b6:	f04f 0900 	mov.w	r9, #0
 800b4ba:	9700      	str	r7, [sp, #0]
 800b4bc:	4633      	mov	r3, r6
 800b4be:	aa0b      	add	r2, sp, #44	; 0x2c
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 f9d8 	bl	800b878 <_printf_common>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	f040 8090 	bne.w	800b5ee <_printf_float+0x1e2>
 800b4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d2:	b00d      	add	sp, #52	; 0x34
 800b4d4:	ecbd 8b02 	vpop	{d8}
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4dc:	4642      	mov	r2, r8
 800b4de:	464b      	mov	r3, r9
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	f7f5 fb42 	bl	8000b6c <__aeabi_dcmpun>
 800b4e8:	b140      	cbz	r0, 800b4fc <_printf_float+0xf0>
 800b4ea:	464b      	mov	r3, r9
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	bfbc      	itt	lt
 800b4f0:	232d      	movlt	r3, #45	; 0x2d
 800b4f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b4f6:	487f      	ldr	r0, [pc, #508]	; (800b6f4 <_printf_float+0x2e8>)
 800b4f8:	4b7f      	ldr	r3, [pc, #508]	; (800b6f8 <_printf_float+0x2ec>)
 800b4fa:	e7d1      	b.n	800b4a0 <_printf_float+0x94>
 800b4fc:	6863      	ldr	r3, [r4, #4]
 800b4fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b502:	9206      	str	r2, [sp, #24]
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	d13f      	bne.n	800b588 <_printf_float+0x17c>
 800b508:	2306      	movs	r3, #6
 800b50a:	6063      	str	r3, [r4, #4]
 800b50c:	9b05      	ldr	r3, [sp, #20]
 800b50e:	6861      	ldr	r1, [r4, #4]
 800b510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b514:	2300      	movs	r3, #0
 800b516:	9303      	str	r3, [sp, #12]
 800b518:	ab0a      	add	r3, sp, #40	; 0x28
 800b51a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b51e:	ab09      	add	r3, sp, #36	; 0x24
 800b520:	ec49 8b10 	vmov	d0, r8, r9
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	6022      	str	r2, [r4, #0]
 800b528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b52c:	4628      	mov	r0, r5
 800b52e:	f7ff fecd 	bl	800b2cc <__cvt>
 800b532:	9b06      	ldr	r3, [sp, #24]
 800b534:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b536:	2b47      	cmp	r3, #71	; 0x47
 800b538:	4680      	mov	r8, r0
 800b53a:	d108      	bne.n	800b54e <_printf_float+0x142>
 800b53c:	1cc8      	adds	r0, r1, #3
 800b53e:	db02      	blt.n	800b546 <_printf_float+0x13a>
 800b540:	6863      	ldr	r3, [r4, #4]
 800b542:	4299      	cmp	r1, r3
 800b544:	dd41      	ble.n	800b5ca <_printf_float+0x1be>
 800b546:	f1ab 0b02 	sub.w	fp, fp, #2
 800b54a:	fa5f fb8b 	uxtb.w	fp, fp
 800b54e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b552:	d820      	bhi.n	800b596 <_printf_float+0x18a>
 800b554:	3901      	subs	r1, #1
 800b556:	465a      	mov	r2, fp
 800b558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b55c:	9109      	str	r1, [sp, #36]	; 0x24
 800b55e:	f7ff ff17 	bl	800b390 <__exponent>
 800b562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b564:	1813      	adds	r3, r2, r0
 800b566:	2a01      	cmp	r2, #1
 800b568:	4681      	mov	r9, r0
 800b56a:	6123      	str	r3, [r4, #16]
 800b56c:	dc02      	bgt.n	800b574 <_printf_float+0x168>
 800b56e:	6822      	ldr	r2, [r4, #0]
 800b570:	07d2      	lsls	r2, r2, #31
 800b572:	d501      	bpl.n	800b578 <_printf_float+0x16c>
 800b574:	3301      	adds	r3, #1
 800b576:	6123      	str	r3, [r4, #16]
 800b578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d09c      	beq.n	800b4ba <_printf_float+0xae>
 800b580:	232d      	movs	r3, #45	; 0x2d
 800b582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b586:	e798      	b.n	800b4ba <_printf_float+0xae>
 800b588:	9a06      	ldr	r2, [sp, #24]
 800b58a:	2a47      	cmp	r2, #71	; 0x47
 800b58c:	d1be      	bne.n	800b50c <_printf_float+0x100>
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1bc      	bne.n	800b50c <_printf_float+0x100>
 800b592:	2301      	movs	r3, #1
 800b594:	e7b9      	b.n	800b50a <_printf_float+0xfe>
 800b596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b59a:	d118      	bne.n	800b5ce <_printf_float+0x1c2>
 800b59c:	2900      	cmp	r1, #0
 800b59e:	6863      	ldr	r3, [r4, #4]
 800b5a0:	dd0b      	ble.n	800b5ba <_printf_float+0x1ae>
 800b5a2:	6121      	str	r1, [r4, #16]
 800b5a4:	b913      	cbnz	r3, 800b5ac <_printf_float+0x1a0>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	07d0      	lsls	r0, r2, #31
 800b5aa:	d502      	bpl.n	800b5b2 <_printf_float+0x1a6>
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	440b      	add	r3, r1
 800b5b0:	6123      	str	r3, [r4, #16]
 800b5b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b5b4:	f04f 0900 	mov.w	r9, #0
 800b5b8:	e7de      	b.n	800b578 <_printf_float+0x16c>
 800b5ba:	b913      	cbnz	r3, 800b5c2 <_printf_float+0x1b6>
 800b5bc:	6822      	ldr	r2, [r4, #0]
 800b5be:	07d2      	lsls	r2, r2, #31
 800b5c0:	d501      	bpl.n	800b5c6 <_printf_float+0x1ba>
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	e7f4      	b.n	800b5b0 <_printf_float+0x1a4>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e7f2      	b.n	800b5b0 <_printf_float+0x1a4>
 800b5ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	db05      	blt.n	800b5e0 <_printf_float+0x1d4>
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	6121      	str	r1, [r4, #16]
 800b5d8:	07d8      	lsls	r0, r3, #31
 800b5da:	d5ea      	bpl.n	800b5b2 <_printf_float+0x1a6>
 800b5dc:	1c4b      	adds	r3, r1, #1
 800b5de:	e7e7      	b.n	800b5b0 <_printf_float+0x1a4>
 800b5e0:	2900      	cmp	r1, #0
 800b5e2:	bfd4      	ite	le
 800b5e4:	f1c1 0202 	rsble	r2, r1, #2
 800b5e8:	2201      	movgt	r2, #1
 800b5ea:	4413      	add	r3, r2
 800b5ec:	e7e0      	b.n	800b5b0 <_printf_float+0x1a4>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	055a      	lsls	r2, r3, #21
 800b5f2:	d407      	bmi.n	800b604 <_printf_float+0x1f8>
 800b5f4:	6923      	ldr	r3, [r4, #16]
 800b5f6:	4642      	mov	r2, r8
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	47b8      	blx	r7
 800b5fe:	3001      	adds	r0, #1
 800b600:	d12c      	bne.n	800b65c <_printf_float+0x250>
 800b602:	e764      	b.n	800b4ce <_printf_float+0xc2>
 800b604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b608:	f240 80e0 	bls.w	800b7cc <_printf_float+0x3c0>
 800b60c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b610:	2200      	movs	r2, #0
 800b612:	2300      	movs	r3, #0
 800b614:	f7f5 fa78 	bl	8000b08 <__aeabi_dcmpeq>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d034      	beq.n	800b686 <_printf_float+0x27a>
 800b61c:	4a37      	ldr	r2, [pc, #220]	; (800b6fc <_printf_float+0x2f0>)
 800b61e:	2301      	movs	r3, #1
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	f43f af51 	beq.w	800b4ce <_printf_float+0xc2>
 800b62c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b630:	429a      	cmp	r2, r3
 800b632:	db02      	blt.n	800b63a <_printf_float+0x22e>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	07d8      	lsls	r0, r3, #31
 800b638:	d510      	bpl.n	800b65c <_printf_float+0x250>
 800b63a:	ee18 3a10 	vmov	r3, s16
 800b63e:	4652      	mov	r2, sl
 800b640:	4631      	mov	r1, r6
 800b642:	4628      	mov	r0, r5
 800b644:	47b8      	blx	r7
 800b646:	3001      	adds	r0, #1
 800b648:	f43f af41 	beq.w	800b4ce <_printf_float+0xc2>
 800b64c:	f04f 0800 	mov.w	r8, #0
 800b650:	f104 091a 	add.w	r9, r4, #26
 800b654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b656:	3b01      	subs	r3, #1
 800b658:	4543      	cmp	r3, r8
 800b65a:	dc09      	bgt.n	800b670 <_printf_float+0x264>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	079b      	lsls	r3, r3, #30
 800b660:	f100 8105 	bmi.w	800b86e <_printf_float+0x462>
 800b664:	68e0      	ldr	r0, [r4, #12]
 800b666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b668:	4298      	cmp	r0, r3
 800b66a:	bfb8      	it	lt
 800b66c:	4618      	movlt	r0, r3
 800b66e:	e730      	b.n	800b4d2 <_printf_float+0xc6>
 800b670:	2301      	movs	r3, #1
 800b672:	464a      	mov	r2, r9
 800b674:	4631      	mov	r1, r6
 800b676:	4628      	mov	r0, r5
 800b678:	47b8      	blx	r7
 800b67a:	3001      	adds	r0, #1
 800b67c:	f43f af27 	beq.w	800b4ce <_printf_float+0xc2>
 800b680:	f108 0801 	add.w	r8, r8, #1
 800b684:	e7e6      	b.n	800b654 <_printf_float+0x248>
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dc39      	bgt.n	800b700 <_printf_float+0x2f4>
 800b68c:	4a1b      	ldr	r2, [pc, #108]	; (800b6fc <_printf_float+0x2f0>)
 800b68e:	2301      	movs	r3, #1
 800b690:	4631      	mov	r1, r6
 800b692:	4628      	mov	r0, r5
 800b694:	47b8      	blx	r7
 800b696:	3001      	adds	r0, #1
 800b698:	f43f af19 	beq.w	800b4ce <_printf_float+0xc2>
 800b69c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	d102      	bne.n	800b6aa <_printf_float+0x29e>
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	07d9      	lsls	r1, r3, #31
 800b6a8:	d5d8      	bpl.n	800b65c <_printf_float+0x250>
 800b6aa:	ee18 3a10 	vmov	r3, s16
 800b6ae:	4652      	mov	r2, sl
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	f43f af09 	beq.w	800b4ce <_printf_float+0xc2>
 800b6bc:	f04f 0900 	mov.w	r9, #0
 800b6c0:	f104 0a1a 	add.w	sl, r4, #26
 800b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c6:	425b      	negs	r3, r3
 800b6c8:	454b      	cmp	r3, r9
 800b6ca:	dc01      	bgt.n	800b6d0 <_printf_float+0x2c4>
 800b6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ce:	e792      	b.n	800b5f6 <_printf_float+0x1ea>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	4652      	mov	r2, sl
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	47b8      	blx	r7
 800b6da:	3001      	adds	r0, #1
 800b6dc:	f43f aef7 	beq.w	800b4ce <_printf_float+0xc2>
 800b6e0:	f109 0901 	add.w	r9, r9, #1
 800b6e4:	e7ee      	b.n	800b6c4 <_printf_float+0x2b8>
 800b6e6:	bf00      	nop
 800b6e8:	7fefffff 	.word	0x7fefffff
 800b6ec:	0800f6a8 	.word	0x0800f6a8
 800b6f0:	0800f6ac 	.word	0x0800f6ac
 800b6f4:	0800f6b4 	.word	0x0800f6b4
 800b6f8:	0800f6b0 	.word	0x0800f6b0
 800b6fc:	0800f6b8 	.word	0x0800f6b8
 800b700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b704:	429a      	cmp	r2, r3
 800b706:	bfa8      	it	ge
 800b708:	461a      	movge	r2, r3
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	4691      	mov	r9, r2
 800b70e:	dc37      	bgt.n	800b780 <_printf_float+0x374>
 800b710:	f04f 0b00 	mov.w	fp, #0
 800b714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b718:	f104 021a 	add.w	r2, r4, #26
 800b71c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b71e:	9305      	str	r3, [sp, #20]
 800b720:	eba3 0309 	sub.w	r3, r3, r9
 800b724:	455b      	cmp	r3, fp
 800b726:	dc33      	bgt.n	800b790 <_printf_float+0x384>
 800b728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b72c:	429a      	cmp	r2, r3
 800b72e:	db3b      	blt.n	800b7a8 <_printf_float+0x39c>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	07da      	lsls	r2, r3, #31
 800b734:	d438      	bmi.n	800b7a8 <_printf_float+0x39c>
 800b736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b738:	9a05      	ldr	r2, [sp, #20]
 800b73a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b73c:	1a9a      	subs	r2, r3, r2
 800b73e:	eba3 0901 	sub.w	r9, r3, r1
 800b742:	4591      	cmp	r9, r2
 800b744:	bfa8      	it	ge
 800b746:	4691      	movge	r9, r2
 800b748:	f1b9 0f00 	cmp.w	r9, #0
 800b74c:	dc35      	bgt.n	800b7ba <_printf_float+0x3ae>
 800b74e:	f04f 0800 	mov.w	r8, #0
 800b752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b756:	f104 0a1a 	add.w	sl, r4, #26
 800b75a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b75e:	1a9b      	subs	r3, r3, r2
 800b760:	eba3 0309 	sub.w	r3, r3, r9
 800b764:	4543      	cmp	r3, r8
 800b766:	f77f af79 	ble.w	800b65c <_printf_float+0x250>
 800b76a:	2301      	movs	r3, #1
 800b76c:	4652      	mov	r2, sl
 800b76e:	4631      	mov	r1, r6
 800b770:	4628      	mov	r0, r5
 800b772:	47b8      	blx	r7
 800b774:	3001      	adds	r0, #1
 800b776:	f43f aeaa 	beq.w	800b4ce <_printf_float+0xc2>
 800b77a:	f108 0801 	add.w	r8, r8, #1
 800b77e:	e7ec      	b.n	800b75a <_printf_float+0x34e>
 800b780:	4613      	mov	r3, r2
 800b782:	4631      	mov	r1, r6
 800b784:	4642      	mov	r2, r8
 800b786:	4628      	mov	r0, r5
 800b788:	47b8      	blx	r7
 800b78a:	3001      	adds	r0, #1
 800b78c:	d1c0      	bne.n	800b710 <_printf_float+0x304>
 800b78e:	e69e      	b.n	800b4ce <_printf_float+0xc2>
 800b790:	2301      	movs	r3, #1
 800b792:	4631      	mov	r1, r6
 800b794:	4628      	mov	r0, r5
 800b796:	9205      	str	r2, [sp, #20]
 800b798:	47b8      	blx	r7
 800b79a:	3001      	adds	r0, #1
 800b79c:	f43f ae97 	beq.w	800b4ce <_printf_float+0xc2>
 800b7a0:	9a05      	ldr	r2, [sp, #20]
 800b7a2:	f10b 0b01 	add.w	fp, fp, #1
 800b7a6:	e7b9      	b.n	800b71c <_printf_float+0x310>
 800b7a8:	ee18 3a10 	vmov	r3, s16
 800b7ac:	4652      	mov	r2, sl
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	d1be      	bne.n	800b736 <_printf_float+0x32a>
 800b7b8:	e689      	b.n	800b4ce <_printf_float+0xc2>
 800b7ba:	9a05      	ldr	r2, [sp, #20]
 800b7bc:	464b      	mov	r3, r9
 800b7be:	4442      	add	r2, r8
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b8      	blx	r7
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d1c1      	bne.n	800b74e <_printf_float+0x342>
 800b7ca:	e680      	b.n	800b4ce <_printf_float+0xc2>
 800b7cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7ce:	2a01      	cmp	r2, #1
 800b7d0:	dc01      	bgt.n	800b7d6 <_printf_float+0x3ca>
 800b7d2:	07db      	lsls	r3, r3, #31
 800b7d4:	d538      	bpl.n	800b848 <_printf_float+0x43c>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4642      	mov	r2, r8
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4628      	mov	r0, r5
 800b7de:	47b8      	blx	r7
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	f43f ae74 	beq.w	800b4ce <_printf_float+0xc2>
 800b7e6:	ee18 3a10 	vmov	r3, s16
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	47b8      	blx	r7
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f43f ae6b 	beq.w	800b4ce <_printf_float+0xc2>
 800b7f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2300      	movs	r3, #0
 800b800:	f7f5 f982 	bl	8000b08 <__aeabi_dcmpeq>
 800b804:	b9d8      	cbnz	r0, 800b83e <_printf_float+0x432>
 800b806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b808:	f108 0201 	add.w	r2, r8, #1
 800b80c:	3b01      	subs	r3, #1
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	d10e      	bne.n	800b836 <_printf_float+0x42a>
 800b818:	e659      	b.n	800b4ce <_printf_float+0xc2>
 800b81a:	2301      	movs	r3, #1
 800b81c:	4652      	mov	r2, sl
 800b81e:	4631      	mov	r1, r6
 800b820:	4628      	mov	r0, r5
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	f43f ae52 	beq.w	800b4ce <_printf_float+0xc2>
 800b82a:	f108 0801 	add.w	r8, r8, #1
 800b82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b830:	3b01      	subs	r3, #1
 800b832:	4543      	cmp	r3, r8
 800b834:	dcf1      	bgt.n	800b81a <_printf_float+0x40e>
 800b836:	464b      	mov	r3, r9
 800b838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b83c:	e6dc      	b.n	800b5f8 <_printf_float+0x1ec>
 800b83e:	f04f 0800 	mov.w	r8, #0
 800b842:	f104 0a1a 	add.w	sl, r4, #26
 800b846:	e7f2      	b.n	800b82e <_printf_float+0x422>
 800b848:	2301      	movs	r3, #1
 800b84a:	4642      	mov	r2, r8
 800b84c:	e7df      	b.n	800b80e <_printf_float+0x402>
 800b84e:	2301      	movs	r3, #1
 800b850:	464a      	mov	r2, r9
 800b852:	4631      	mov	r1, r6
 800b854:	4628      	mov	r0, r5
 800b856:	47b8      	blx	r7
 800b858:	3001      	adds	r0, #1
 800b85a:	f43f ae38 	beq.w	800b4ce <_printf_float+0xc2>
 800b85e:	f108 0801 	add.w	r8, r8, #1
 800b862:	68e3      	ldr	r3, [r4, #12]
 800b864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b866:	1a5b      	subs	r3, r3, r1
 800b868:	4543      	cmp	r3, r8
 800b86a:	dcf0      	bgt.n	800b84e <_printf_float+0x442>
 800b86c:	e6fa      	b.n	800b664 <_printf_float+0x258>
 800b86e:	f04f 0800 	mov.w	r8, #0
 800b872:	f104 0919 	add.w	r9, r4, #25
 800b876:	e7f4      	b.n	800b862 <_printf_float+0x456>

0800b878 <_printf_common>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	4616      	mov	r6, r2
 800b87e:	4699      	mov	r9, r3
 800b880:	688a      	ldr	r2, [r1, #8]
 800b882:	690b      	ldr	r3, [r1, #16]
 800b884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b888:	4293      	cmp	r3, r2
 800b88a:	bfb8      	it	lt
 800b88c:	4613      	movlt	r3, r2
 800b88e:	6033      	str	r3, [r6, #0]
 800b890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b894:	4607      	mov	r7, r0
 800b896:	460c      	mov	r4, r1
 800b898:	b10a      	cbz	r2, 800b89e <_printf_common+0x26>
 800b89a:	3301      	adds	r3, #1
 800b89c:	6033      	str	r3, [r6, #0]
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	0699      	lsls	r1, r3, #26
 800b8a2:	bf42      	ittt	mi
 800b8a4:	6833      	ldrmi	r3, [r6, #0]
 800b8a6:	3302      	addmi	r3, #2
 800b8a8:	6033      	strmi	r3, [r6, #0]
 800b8aa:	6825      	ldr	r5, [r4, #0]
 800b8ac:	f015 0506 	ands.w	r5, r5, #6
 800b8b0:	d106      	bne.n	800b8c0 <_printf_common+0x48>
 800b8b2:	f104 0a19 	add.w	sl, r4, #25
 800b8b6:	68e3      	ldr	r3, [r4, #12]
 800b8b8:	6832      	ldr	r2, [r6, #0]
 800b8ba:	1a9b      	subs	r3, r3, r2
 800b8bc:	42ab      	cmp	r3, r5
 800b8be:	dc26      	bgt.n	800b90e <_printf_common+0x96>
 800b8c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8c4:	1e13      	subs	r3, r2, #0
 800b8c6:	6822      	ldr	r2, [r4, #0]
 800b8c8:	bf18      	it	ne
 800b8ca:	2301      	movne	r3, #1
 800b8cc:	0692      	lsls	r2, r2, #26
 800b8ce:	d42b      	bmi.n	800b928 <_printf_common+0xb0>
 800b8d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	47c0      	blx	r8
 800b8da:	3001      	adds	r0, #1
 800b8dc:	d01e      	beq.n	800b91c <_printf_common+0xa4>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	68e5      	ldr	r5, [r4, #12]
 800b8e2:	6832      	ldr	r2, [r6, #0]
 800b8e4:	f003 0306 	and.w	r3, r3, #6
 800b8e8:	2b04      	cmp	r3, #4
 800b8ea:	bf08      	it	eq
 800b8ec:	1aad      	subeq	r5, r5, r2
 800b8ee:	68a3      	ldr	r3, [r4, #8]
 800b8f0:	6922      	ldr	r2, [r4, #16]
 800b8f2:	bf0c      	ite	eq
 800b8f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8f8:	2500      	movne	r5, #0
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	bfc4      	itt	gt
 800b8fe:	1a9b      	subgt	r3, r3, r2
 800b900:	18ed      	addgt	r5, r5, r3
 800b902:	2600      	movs	r6, #0
 800b904:	341a      	adds	r4, #26
 800b906:	42b5      	cmp	r5, r6
 800b908:	d11a      	bne.n	800b940 <_printf_common+0xc8>
 800b90a:	2000      	movs	r0, #0
 800b90c:	e008      	b.n	800b920 <_printf_common+0xa8>
 800b90e:	2301      	movs	r3, #1
 800b910:	4652      	mov	r2, sl
 800b912:	4649      	mov	r1, r9
 800b914:	4638      	mov	r0, r7
 800b916:	47c0      	blx	r8
 800b918:	3001      	adds	r0, #1
 800b91a:	d103      	bne.n	800b924 <_printf_common+0xac>
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b924:	3501      	adds	r5, #1
 800b926:	e7c6      	b.n	800b8b6 <_printf_common+0x3e>
 800b928:	18e1      	adds	r1, r4, r3
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	2030      	movs	r0, #48	; 0x30
 800b92e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b932:	4422      	add	r2, r4
 800b934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b93c:	3302      	adds	r3, #2
 800b93e:	e7c7      	b.n	800b8d0 <_printf_common+0x58>
 800b940:	2301      	movs	r3, #1
 800b942:	4622      	mov	r2, r4
 800b944:	4649      	mov	r1, r9
 800b946:	4638      	mov	r0, r7
 800b948:	47c0      	blx	r8
 800b94a:	3001      	adds	r0, #1
 800b94c:	d0e6      	beq.n	800b91c <_printf_common+0xa4>
 800b94e:	3601      	adds	r6, #1
 800b950:	e7d9      	b.n	800b906 <_printf_common+0x8e>
	...

0800b954 <_printf_i>:
 800b954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	7e0f      	ldrb	r7, [r1, #24]
 800b95a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b95c:	2f78      	cmp	r7, #120	; 0x78
 800b95e:	4691      	mov	r9, r2
 800b960:	4680      	mov	r8, r0
 800b962:	460c      	mov	r4, r1
 800b964:	469a      	mov	sl, r3
 800b966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b96a:	d807      	bhi.n	800b97c <_printf_i+0x28>
 800b96c:	2f62      	cmp	r7, #98	; 0x62
 800b96e:	d80a      	bhi.n	800b986 <_printf_i+0x32>
 800b970:	2f00      	cmp	r7, #0
 800b972:	f000 80d8 	beq.w	800bb26 <_printf_i+0x1d2>
 800b976:	2f58      	cmp	r7, #88	; 0x58
 800b978:	f000 80a3 	beq.w	800bac2 <_printf_i+0x16e>
 800b97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b984:	e03a      	b.n	800b9fc <_printf_i+0xa8>
 800b986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b98a:	2b15      	cmp	r3, #21
 800b98c:	d8f6      	bhi.n	800b97c <_printf_i+0x28>
 800b98e:	a101      	add	r1, pc, #4	; (adr r1, 800b994 <_printf_i+0x40>)
 800b990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b994:	0800b9ed 	.word	0x0800b9ed
 800b998:	0800ba01 	.word	0x0800ba01
 800b99c:	0800b97d 	.word	0x0800b97d
 800b9a0:	0800b97d 	.word	0x0800b97d
 800b9a4:	0800b97d 	.word	0x0800b97d
 800b9a8:	0800b97d 	.word	0x0800b97d
 800b9ac:	0800ba01 	.word	0x0800ba01
 800b9b0:	0800b97d 	.word	0x0800b97d
 800b9b4:	0800b97d 	.word	0x0800b97d
 800b9b8:	0800b97d 	.word	0x0800b97d
 800b9bc:	0800b97d 	.word	0x0800b97d
 800b9c0:	0800bb0d 	.word	0x0800bb0d
 800b9c4:	0800ba31 	.word	0x0800ba31
 800b9c8:	0800baef 	.word	0x0800baef
 800b9cc:	0800b97d 	.word	0x0800b97d
 800b9d0:	0800b97d 	.word	0x0800b97d
 800b9d4:	0800bb2f 	.word	0x0800bb2f
 800b9d8:	0800b97d 	.word	0x0800b97d
 800b9dc:	0800ba31 	.word	0x0800ba31
 800b9e0:	0800b97d 	.word	0x0800b97d
 800b9e4:	0800b97d 	.word	0x0800b97d
 800b9e8:	0800baf7 	.word	0x0800baf7
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	1d1a      	adds	r2, r3, #4
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	602a      	str	r2, [r5, #0]
 800b9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e0a3      	b.n	800bb48 <_printf_i+0x1f4>
 800ba00:	6820      	ldr	r0, [r4, #0]
 800ba02:	6829      	ldr	r1, [r5, #0]
 800ba04:	0606      	lsls	r6, r0, #24
 800ba06:	f101 0304 	add.w	r3, r1, #4
 800ba0a:	d50a      	bpl.n	800ba22 <_printf_i+0xce>
 800ba0c:	680e      	ldr	r6, [r1, #0]
 800ba0e:	602b      	str	r3, [r5, #0]
 800ba10:	2e00      	cmp	r6, #0
 800ba12:	da03      	bge.n	800ba1c <_printf_i+0xc8>
 800ba14:	232d      	movs	r3, #45	; 0x2d
 800ba16:	4276      	negs	r6, r6
 800ba18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba1c:	485e      	ldr	r0, [pc, #376]	; (800bb98 <_printf_i+0x244>)
 800ba1e:	230a      	movs	r3, #10
 800ba20:	e019      	b.n	800ba56 <_printf_i+0x102>
 800ba22:	680e      	ldr	r6, [r1, #0]
 800ba24:	602b      	str	r3, [r5, #0]
 800ba26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba2a:	bf18      	it	ne
 800ba2c:	b236      	sxthne	r6, r6
 800ba2e:	e7ef      	b.n	800ba10 <_printf_i+0xbc>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	6820      	ldr	r0, [r4, #0]
 800ba34:	1d19      	adds	r1, r3, #4
 800ba36:	6029      	str	r1, [r5, #0]
 800ba38:	0601      	lsls	r1, r0, #24
 800ba3a:	d501      	bpl.n	800ba40 <_printf_i+0xec>
 800ba3c:	681e      	ldr	r6, [r3, #0]
 800ba3e:	e002      	b.n	800ba46 <_printf_i+0xf2>
 800ba40:	0646      	lsls	r6, r0, #25
 800ba42:	d5fb      	bpl.n	800ba3c <_printf_i+0xe8>
 800ba44:	881e      	ldrh	r6, [r3, #0]
 800ba46:	4854      	ldr	r0, [pc, #336]	; (800bb98 <_printf_i+0x244>)
 800ba48:	2f6f      	cmp	r7, #111	; 0x6f
 800ba4a:	bf0c      	ite	eq
 800ba4c:	2308      	moveq	r3, #8
 800ba4e:	230a      	movne	r3, #10
 800ba50:	2100      	movs	r1, #0
 800ba52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba56:	6865      	ldr	r5, [r4, #4]
 800ba58:	60a5      	str	r5, [r4, #8]
 800ba5a:	2d00      	cmp	r5, #0
 800ba5c:	bfa2      	ittt	ge
 800ba5e:	6821      	ldrge	r1, [r4, #0]
 800ba60:	f021 0104 	bicge.w	r1, r1, #4
 800ba64:	6021      	strge	r1, [r4, #0]
 800ba66:	b90e      	cbnz	r6, 800ba6c <_printf_i+0x118>
 800ba68:	2d00      	cmp	r5, #0
 800ba6a:	d04d      	beq.n	800bb08 <_printf_i+0x1b4>
 800ba6c:	4615      	mov	r5, r2
 800ba6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba72:	fb03 6711 	mls	r7, r3, r1, r6
 800ba76:	5dc7      	ldrb	r7, [r0, r7]
 800ba78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba7c:	4637      	mov	r7, r6
 800ba7e:	42bb      	cmp	r3, r7
 800ba80:	460e      	mov	r6, r1
 800ba82:	d9f4      	bls.n	800ba6e <_printf_i+0x11a>
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d10b      	bne.n	800baa0 <_printf_i+0x14c>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	07de      	lsls	r6, r3, #31
 800ba8c:	d508      	bpl.n	800baa0 <_printf_i+0x14c>
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	4299      	cmp	r1, r3
 800ba94:	bfde      	ittt	le
 800ba96:	2330      	movle	r3, #48	; 0x30
 800ba98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800baa0:	1b52      	subs	r2, r2, r5
 800baa2:	6122      	str	r2, [r4, #16]
 800baa4:	f8cd a000 	str.w	sl, [sp]
 800baa8:	464b      	mov	r3, r9
 800baaa:	aa03      	add	r2, sp, #12
 800baac:	4621      	mov	r1, r4
 800baae:	4640      	mov	r0, r8
 800bab0:	f7ff fee2 	bl	800b878 <_printf_common>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d14c      	bne.n	800bb52 <_printf_i+0x1fe>
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
 800babc:	b004      	add	sp, #16
 800babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac2:	4835      	ldr	r0, [pc, #212]	; (800bb98 <_printf_i+0x244>)
 800bac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bac8:	6829      	ldr	r1, [r5, #0]
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	f851 6b04 	ldr.w	r6, [r1], #4
 800bad0:	6029      	str	r1, [r5, #0]
 800bad2:	061d      	lsls	r5, r3, #24
 800bad4:	d514      	bpl.n	800bb00 <_printf_i+0x1ac>
 800bad6:	07df      	lsls	r7, r3, #31
 800bad8:	bf44      	itt	mi
 800bada:	f043 0320 	orrmi.w	r3, r3, #32
 800bade:	6023      	strmi	r3, [r4, #0]
 800bae0:	b91e      	cbnz	r6, 800baea <_printf_i+0x196>
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	f023 0320 	bic.w	r3, r3, #32
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	2310      	movs	r3, #16
 800baec:	e7b0      	b.n	800ba50 <_printf_i+0xfc>
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	f043 0320 	orr.w	r3, r3, #32
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	2378      	movs	r3, #120	; 0x78
 800baf8:	4828      	ldr	r0, [pc, #160]	; (800bb9c <_printf_i+0x248>)
 800bafa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bafe:	e7e3      	b.n	800bac8 <_printf_i+0x174>
 800bb00:	0659      	lsls	r1, r3, #25
 800bb02:	bf48      	it	mi
 800bb04:	b2b6      	uxthmi	r6, r6
 800bb06:	e7e6      	b.n	800bad6 <_printf_i+0x182>
 800bb08:	4615      	mov	r5, r2
 800bb0a:	e7bb      	b.n	800ba84 <_printf_i+0x130>
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	6826      	ldr	r6, [r4, #0]
 800bb10:	6961      	ldr	r1, [r4, #20]
 800bb12:	1d18      	adds	r0, r3, #4
 800bb14:	6028      	str	r0, [r5, #0]
 800bb16:	0635      	lsls	r5, r6, #24
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	d501      	bpl.n	800bb20 <_printf_i+0x1cc>
 800bb1c:	6019      	str	r1, [r3, #0]
 800bb1e:	e002      	b.n	800bb26 <_printf_i+0x1d2>
 800bb20:	0670      	lsls	r0, r6, #25
 800bb22:	d5fb      	bpl.n	800bb1c <_printf_i+0x1c8>
 800bb24:	8019      	strh	r1, [r3, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	6123      	str	r3, [r4, #16]
 800bb2a:	4615      	mov	r5, r2
 800bb2c:	e7ba      	b.n	800baa4 <_printf_i+0x150>
 800bb2e:	682b      	ldr	r3, [r5, #0]
 800bb30:	1d1a      	adds	r2, r3, #4
 800bb32:	602a      	str	r2, [r5, #0]
 800bb34:	681d      	ldr	r5, [r3, #0]
 800bb36:	6862      	ldr	r2, [r4, #4]
 800bb38:	2100      	movs	r1, #0
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	f7f4 fb70 	bl	8000220 <memchr>
 800bb40:	b108      	cbz	r0, 800bb46 <_printf_i+0x1f2>
 800bb42:	1b40      	subs	r0, r0, r5
 800bb44:	6060      	str	r0, [r4, #4]
 800bb46:	6863      	ldr	r3, [r4, #4]
 800bb48:	6123      	str	r3, [r4, #16]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb50:	e7a8      	b.n	800baa4 <_printf_i+0x150>
 800bb52:	6923      	ldr	r3, [r4, #16]
 800bb54:	462a      	mov	r2, r5
 800bb56:	4649      	mov	r1, r9
 800bb58:	4640      	mov	r0, r8
 800bb5a:	47d0      	blx	sl
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d0ab      	beq.n	800bab8 <_printf_i+0x164>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	079b      	lsls	r3, r3, #30
 800bb64:	d413      	bmi.n	800bb8e <_printf_i+0x23a>
 800bb66:	68e0      	ldr	r0, [r4, #12]
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	4298      	cmp	r0, r3
 800bb6c:	bfb8      	it	lt
 800bb6e:	4618      	movlt	r0, r3
 800bb70:	e7a4      	b.n	800babc <_printf_i+0x168>
 800bb72:	2301      	movs	r3, #1
 800bb74:	4632      	mov	r2, r6
 800bb76:	4649      	mov	r1, r9
 800bb78:	4640      	mov	r0, r8
 800bb7a:	47d0      	blx	sl
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d09b      	beq.n	800bab8 <_printf_i+0x164>
 800bb80:	3501      	adds	r5, #1
 800bb82:	68e3      	ldr	r3, [r4, #12]
 800bb84:	9903      	ldr	r1, [sp, #12]
 800bb86:	1a5b      	subs	r3, r3, r1
 800bb88:	42ab      	cmp	r3, r5
 800bb8a:	dcf2      	bgt.n	800bb72 <_printf_i+0x21e>
 800bb8c:	e7eb      	b.n	800bb66 <_printf_i+0x212>
 800bb8e:	2500      	movs	r5, #0
 800bb90:	f104 0619 	add.w	r6, r4, #25
 800bb94:	e7f5      	b.n	800bb82 <_printf_i+0x22e>
 800bb96:	bf00      	nop
 800bb98:	0800f6ba 	.word	0x0800f6ba
 800bb9c:	0800f6cb 	.word	0x0800f6cb

0800bba0 <siprintf>:
 800bba0:	b40e      	push	{r1, r2, r3}
 800bba2:	b500      	push	{lr}
 800bba4:	b09c      	sub	sp, #112	; 0x70
 800bba6:	ab1d      	add	r3, sp, #116	; 0x74
 800bba8:	9002      	str	r0, [sp, #8]
 800bbaa:	9006      	str	r0, [sp, #24]
 800bbac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbb0:	4809      	ldr	r0, [pc, #36]	; (800bbd8 <siprintf+0x38>)
 800bbb2:	9107      	str	r1, [sp, #28]
 800bbb4:	9104      	str	r1, [sp, #16]
 800bbb6:	4909      	ldr	r1, [pc, #36]	; (800bbdc <siprintf+0x3c>)
 800bbb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbbc:	9105      	str	r1, [sp, #20]
 800bbbe:	6800      	ldr	r0, [r0, #0]
 800bbc0:	9301      	str	r3, [sp, #4]
 800bbc2:	a902      	add	r1, sp, #8
 800bbc4:	f001 fb76 	bl	800d2b4 <_svfiprintf_r>
 800bbc8:	9b02      	ldr	r3, [sp, #8]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	b01c      	add	sp, #112	; 0x70
 800bbd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd4:	b003      	add	sp, #12
 800bbd6:	4770      	bx	lr
 800bbd8:	20000098 	.word	0x20000098
 800bbdc:	ffff0208 	.word	0xffff0208

0800bbe0 <quorem>:
 800bbe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	6903      	ldr	r3, [r0, #16]
 800bbe6:	690c      	ldr	r4, [r1, #16]
 800bbe8:	42a3      	cmp	r3, r4
 800bbea:	4607      	mov	r7, r0
 800bbec:	f2c0 8081 	blt.w	800bcf2 <quorem+0x112>
 800bbf0:	3c01      	subs	r4, #1
 800bbf2:	f101 0814 	add.w	r8, r1, #20
 800bbf6:	f100 0514 	add.w	r5, r0, #20
 800bbfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc14:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc18:	d331      	bcc.n	800bc7e <quorem+0x9e>
 800bc1a:	f04f 0e00 	mov.w	lr, #0
 800bc1e:	4640      	mov	r0, r8
 800bc20:	46ac      	mov	ip, r5
 800bc22:	46f2      	mov	sl, lr
 800bc24:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc28:	b293      	uxth	r3, r2
 800bc2a:	fb06 e303 	mla	r3, r6, r3, lr
 800bc2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	ebaa 0303 	sub.w	r3, sl, r3
 800bc38:	f8dc a000 	ldr.w	sl, [ip]
 800bc3c:	0c12      	lsrs	r2, r2, #16
 800bc3e:	fa13 f38a 	uxtah	r3, r3, sl
 800bc42:	fb06 e202 	mla	r2, r6, r2, lr
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	9b00      	ldr	r3, [sp, #0]
 800bc4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc4e:	b292      	uxth	r2, r2
 800bc50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc58:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc5c:	4581      	cmp	r9, r0
 800bc5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc62:	f84c 3b04 	str.w	r3, [ip], #4
 800bc66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc6a:	d2db      	bcs.n	800bc24 <quorem+0x44>
 800bc6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc70:	b92b      	cbnz	r3, 800bc7e <quorem+0x9e>
 800bc72:	9b01      	ldr	r3, [sp, #4]
 800bc74:	3b04      	subs	r3, #4
 800bc76:	429d      	cmp	r5, r3
 800bc78:	461a      	mov	r2, r3
 800bc7a:	d32e      	bcc.n	800bcda <quorem+0xfa>
 800bc7c:	613c      	str	r4, [r7, #16]
 800bc7e:	4638      	mov	r0, r7
 800bc80:	f001 f8c4 	bl	800ce0c <__mcmp>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	db24      	blt.n	800bcd2 <quorem+0xf2>
 800bc88:	3601      	adds	r6, #1
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f04f 0c00 	mov.w	ip, #0
 800bc90:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc94:	f8d0 e000 	ldr.w	lr, [r0]
 800bc98:	b293      	uxth	r3, r2
 800bc9a:	ebac 0303 	sub.w	r3, ip, r3
 800bc9e:	0c12      	lsrs	r2, r2, #16
 800bca0:	fa13 f38e 	uxtah	r3, r3, lr
 800bca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcb2:	45c1      	cmp	r9, r8
 800bcb4:	f840 3b04 	str.w	r3, [r0], #4
 800bcb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcbc:	d2e8      	bcs.n	800bc90 <quorem+0xb0>
 800bcbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcc6:	b922      	cbnz	r2, 800bcd2 <quorem+0xf2>
 800bcc8:	3b04      	subs	r3, #4
 800bcca:	429d      	cmp	r5, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	d30a      	bcc.n	800bce6 <quorem+0x106>
 800bcd0:	613c      	str	r4, [r7, #16]
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	b003      	add	sp, #12
 800bcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	3b04      	subs	r3, #4
 800bcde:	2a00      	cmp	r2, #0
 800bce0:	d1cc      	bne.n	800bc7c <quorem+0x9c>
 800bce2:	3c01      	subs	r4, #1
 800bce4:	e7c7      	b.n	800bc76 <quorem+0x96>
 800bce6:	6812      	ldr	r2, [r2, #0]
 800bce8:	3b04      	subs	r3, #4
 800bcea:	2a00      	cmp	r2, #0
 800bcec:	d1f0      	bne.n	800bcd0 <quorem+0xf0>
 800bcee:	3c01      	subs	r4, #1
 800bcf0:	e7eb      	b.n	800bcca <quorem+0xea>
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	e7ee      	b.n	800bcd4 <quorem+0xf4>
	...

0800bcf8 <_dtoa_r>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	ed2d 8b04 	vpush	{d8-d9}
 800bd00:	ec57 6b10 	vmov	r6, r7, d0
 800bd04:	b093      	sub	sp, #76	; 0x4c
 800bd06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd0c:	9106      	str	r1, [sp, #24]
 800bd0e:	ee10 aa10 	vmov	sl, s0
 800bd12:	4604      	mov	r4, r0
 800bd14:	9209      	str	r2, [sp, #36]	; 0x24
 800bd16:	930c      	str	r3, [sp, #48]	; 0x30
 800bd18:	46bb      	mov	fp, r7
 800bd1a:	b975      	cbnz	r5, 800bd3a <_dtoa_r+0x42>
 800bd1c:	2010      	movs	r0, #16
 800bd1e:	f000 fddd 	bl	800c8dc <malloc>
 800bd22:	4602      	mov	r2, r0
 800bd24:	6260      	str	r0, [r4, #36]	; 0x24
 800bd26:	b920      	cbnz	r0, 800bd32 <_dtoa_r+0x3a>
 800bd28:	4ba7      	ldr	r3, [pc, #668]	; (800bfc8 <_dtoa_r+0x2d0>)
 800bd2a:	21ea      	movs	r1, #234	; 0xea
 800bd2c:	48a7      	ldr	r0, [pc, #668]	; (800bfcc <_dtoa_r+0x2d4>)
 800bd2e:	f001 fbd1 	bl	800d4d4 <__assert_func>
 800bd32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd36:	6005      	str	r5, [r0, #0]
 800bd38:	60c5      	str	r5, [r0, #12]
 800bd3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd3c:	6819      	ldr	r1, [r3, #0]
 800bd3e:	b151      	cbz	r1, 800bd56 <_dtoa_r+0x5e>
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	604a      	str	r2, [r1, #4]
 800bd44:	2301      	movs	r3, #1
 800bd46:	4093      	lsls	r3, r2
 800bd48:	608b      	str	r3, [r1, #8]
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 fe1c 	bl	800c988 <_Bfree>
 800bd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd52:	2200      	movs	r2, #0
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	1e3b      	subs	r3, r7, #0
 800bd58:	bfaa      	itet	ge
 800bd5a:	2300      	movge	r3, #0
 800bd5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bd60:	f8c8 3000 	strge.w	r3, [r8]
 800bd64:	4b9a      	ldr	r3, [pc, #616]	; (800bfd0 <_dtoa_r+0x2d8>)
 800bd66:	bfbc      	itt	lt
 800bd68:	2201      	movlt	r2, #1
 800bd6a:	f8c8 2000 	strlt.w	r2, [r8]
 800bd6e:	ea33 030b 	bics.w	r3, r3, fp
 800bd72:	d11b      	bne.n	800bdac <_dtoa_r+0xb4>
 800bd74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd76:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd7a:	6013      	str	r3, [r2, #0]
 800bd7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd80:	4333      	orrs	r3, r6
 800bd82:	f000 8592 	beq.w	800c8aa <_dtoa_r+0xbb2>
 800bd86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd88:	b963      	cbnz	r3, 800bda4 <_dtoa_r+0xac>
 800bd8a:	4b92      	ldr	r3, [pc, #584]	; (800bfd4 <_dtoa_r+0x2dc>)
 800bd8c:	e022      	b.n	800bdd4 <_dtoa_r+0xdc>
 800bd8e:	4b92      	ldr	r3, [pc, #584]	; (800bfd8 <_dtoa_r+0x2e0>)
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	3308      	adds	r3, #8
 800bd94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	9801      	ldr	r0, [sp, #4]
 800bd9a:	b013      	add	sp, #76	; 0x4c
 800bd9c:	ecbd 8b04 	vpop	{d8-d9}
 800bda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda4:	4b8b      	ldr	r3, [pc, #556]	; (800bfd4 <_dtoa_r+0x2dc>)
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	3303      	adds	r3, #3
 800bdaa:	e7f3      	b.n	800bd94 <_dtoa_r+0x9c>
 800bdac:	2200      	movs	r2, #0
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4650      	mov	r0, sl
 800bdb2:	4659      	mov	r1, fp
 800bdb4:	f7f4 fea8 	bl	8000b08 <__aeabi_dcmpeq>
 800bdb8:	ec4b ab19 	vmov	d9, sl, fp
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	b158      	cbz	r0, 800bdd8 <_dtoa_r+0xe0>
 800bdc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 856b 	beq.w	800c8a4 <_dtoa_r+0xbac>
 800bdce:	4883      	ldr	r0, [pc, #524]	; (800bfdc <_dtoa_r+0x2e4>)
 800bdd0:	6018      	str	r0, [r3, #0]
 800bdd2:	1e43      	subs	r3, r0, #1
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	e7df      	b.n	800bd98 <_dtoa_r+0xa0>
 800bdd8:	ec4b ab10 	vmov	d0, sl, fp
 800bddc:	aa10      	add	r2, sp, #64	; 0x40
 800bdde:	a911      	add	r1, sp, #68	; 0x44
 800bde0:	4620      	mov	r0, r4
 800bde2:	f001 f8b9 	bl	800cf58 <__d2b>
 800bde6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bdea:	ee08 0a10 	vmov	s16, r0
 800bdee:	2d00      	cmp	r5, #0
 800bdf0:	f000 8084 	beq.w	800befc <_dtoa_r+0x204>
 800bdf4:	ee19 3a90 	vmov	r3, s19
 800bdf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be00:	4656      	mov	r6, sl
 800be02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be0e:	4b74      	ldr	r3, [pc, #464]	; (800bfe0 <_dtoa_r+0x2e8>)
 800be10:	2200      	movs	r2, #0
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fa57 	bl	80002c8 <__aeabi_dsub>
 800be1a:	a365      	add	r3, pc, #404	; (adr r3, 800bfb0 <_dtoa_r+0x2b8>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fc0a 	bl	8000638 <__aeabi_dmul>
 800be24:	a364      	add	r3, pc, #400	; (adr r3, 800bfb8 <_dtoa_r+0x2c0>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fa4f 	bl	80002cc <__adddf3>
 800be2e:	4606      	mov	r6, r0
 800be30:	4628      	mov	r0, r5
 800be32:	460f      	mov	r7, r1
 800be34:	f7f4 fb96 	bl	8000564 <__aeabi_i2d>
 800be38:	a361      	add	r3, pc, #388	; (adr r3, 800bfc0 <_dtoa_r+0x2c8>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f7f4 fbfb 	bl	8000638 <__aeabi_dmul>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4630      	mov	r0, r6
 800be48:	4639      	mov	r1, r7
 800be4a:	f7f4 fa3f 	bl	80002cc <__adddf3>
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	f7f4 fea1 	bl	8000b98 <__aeabi_d2iz>
 800be56:	2200      	movs	r2, #0
 800be58:	9000      	str	r0, [sp, #0]
 800be5a:	2300      	movs	r3, #0
 800be5c:	4630      	mov	r0, r6
 800be5e:	4639      	mov	r1, r7
 800be60:	f7f4 fe5c 	bl	8000b1c <__aeabi_dcmplt>
 800be64:	b150      	cbz	r0, 800be7c <_dtoa_r+0x184>
 800be66:	9800      	ldr	r0, [sp, #0]
 800be68:	f7f4 fb7c 	bl	8000564 <__aeabi_i2d>
 800be6c:	4632      	mov	r2, r6
 800be6e:	463b      	mov	r3, r7
 800be70:	f7f4 fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 800be74:	b910      	cbnz	r0, 800be7c <_dtoa_r+0x184>
 800be76:	9b00      	ldr	r3, [sp, #0]
 800be78:	3b01      	subs	r3, #1
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	9b00      	ldr	r3, [sp, #0]
 800be7e:	2b16      	cmp	r3, #22
 800be80:	d85a      	bhi.n	800bf38 <_dtoa_r+0x240>
 800be82:	9a00      	ldr	r2, [sp, #0]
 800be84:	4b57      	ldr	r3, [pc, #348]	; (800bfe4 <_dtoa_r+0x2ec>)
 800be86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	ec51 0b19 	vmov	r0, r1, d9
 800be92:	f7f4 fe43 	bl	8000b1c <__aeabi_dcmplt>
 800be96:	2800      	cmp	r0, #0
 800be98:	d050      	beq.n	800bf3c <_dtoa_r+0x244>
 800be9a:	9b00      	ldr	r3, [sp, #0]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	2300      	movs	r3, #0
 800bea2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bea6:	1b5d      	subs	r5, r3, r5
 800bea8:	1e6b      	subs	r3, r5, #1
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	bf45      	ittet	mi
 800beae:	f1c5 0301 	rsbmi	r3, r5, #1
 800beb2:	9304      	strmi	r3, [sp, #16]
 800beb4:	2300      	movpl	r3, #0
 800beb6:	2300      	movmi	r3, #0
 800beb8:	bf4c      	ite	mi
 800beba:	9305      	strmi	r3, [sp, #20]
 800bebc:	9304      	strpl	r3, [sp, #16]
 800bebe:	9b00      	ldr	r3, [sp, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	db3d      	blt.n	800bf40 <_dtoa_r+0x248>
 800bec4:	9b05      	ldr	r3, [sp, #20]
 800bec6:	9a00      	ldr	r2, [sp, #0]
 800bec8:	920a      	str	r2, [sp, #40]	; 0x28
 800beca:	4413      	add	r3, r2
 800becc:	9305      	str	r3, [sp, #20]
 800bece:	2300      	movs	r3, #0
 800bed0:	9307      	str	r3, [sp, #28]
 800bed2:	9b06      	ldr	r3, [sp, #24]
 800bed4:	2b09      	cmp	r3, #9
 800bed6:	f200 8089 	bhi.w	800bfec <_dtoa_r+0x2f4>
 800beda:	2b05      	cmp	r3, #5
 800bedc:	bfc4      	itt	gt
 800bede:	3b04      	subgt	r3, #4
 800bee0:	9306      	strgt	r3, [sp, #24]
 800bee2:	9b06      	ldr	r3, [sp, #24]
 800bee4:	f1a3 0302 	sub.w	r3, r3, #2
 800bee8:	bfcc      	ite	gt
 800beea:	2500      	movgt	r5, #0
 800beec:	2501      	movle	r5, #1
 800beee:	2b03      	cmp	r3, #3
 800bef0:	f200 8087 	bhi.w	800c002 <_dtoa_r+0x30a>
 800bef4:	e8df f003 	tbb	[pc, r3]
 800bef8:	59383a2d 	.word	0x59383a2d
 800befc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf00:	441d      	add	r5, r3
 800bf02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf06:	2b20      	cmp	r3, #32
 800bf08:	bfc1      	itttt	gt
 800bf0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf12:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf16:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf1a:	bfda      	itte	le
 800bf1c:	f1c3 0320 	rsble	r3, r3, #32
 800bf20:	fa06 f003 	lslle.w	r0, r6, r3
 800bf24:	4318      	orrgt	r0, r3
 800bf26:	f7f4 fb0d 	bl	8000544 <__aeabi_ui2d>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf32:	3d01      	subs	r5, #1
 800bf34:	930e      	str	r3, [sp, #56]	; 0x38
 800bf36:	e76a      	b.n	800be0e <_dtoa_r+0x116>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e7b2      	b.n	800bea2 <_dtoa_r+0x1aa>
 800bf3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf3e:	e7b1      	b.n	800bea4 <_dtoa_r+0x1ac>
 800bf40:	9b04      	ldr	r3, [sp, #16]
 800bf42:	9a00      	ldr	r2, [sp, #0]
 800bf44:	1a9b      	subs	r3, r3, r2
 800bf46:	9304      	str	r3, [sp, #16]
 800bf48:	4253      	negs	r3, r2
 800bf4a:	9307      	str	r3, [sp, #28]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf50:	e7bf      	b.n	800bed2 <_dtoa_r+0x1da>
 800bf52:	2300      	movs	r3, #0
 800bf54:	9308      	str	r3, [sp, #32]
 800bf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dc55      	bgt.n	800c008 <_dtoa_r+0x310>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf62:	461a      	mov	r2, r3
 800bf64:	9209      	str	r2, [sp, #36]	; 0x24
 800bf66:	e00c      	b.n	800bf82 <_dtoa_r+0x28a>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e7f3      	b.n	800bf54 <_dtoa_r+0x25c>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf70:	9308      	str	r3, [sp, #32]
 800bf72:	9b00      	ldr	r3, [sp, #0]
 800bf74:	4413      	add	r3, r2
 800bf76:	9302      	str	r3, [sp, #8]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	9303      	str	r3, [sp, #12]
 800bf7e:	bfb8      	it	lt
 800bf80:	2301      	movlt	r3, #1
 800bf82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf84:	2200      	movs	r2, #0
 800bf86:	6042      	str	r2, [r0, #4]
 800bf88:	2204      	movs	r2, #4
 800bf8a:	f102 0614 	add.w	r6, r2, #20
 800bf8e:	429e      	cmp	r6, r3
 800bf90:	6841      	ldr	r1, [r0, #4]
 800bf92:	d93d      	bls.n	800c010 <_dtoa_r+0x318>
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 fcb7 	bl	800c908 <_Balloc>
 800bf9a:	9001      	str	r0, [sp, #4]
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d13b      	bne.n	800c018 <_dtoa_r+0x320>
 800bfa0:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <_dtoa_r+0x2f0>)
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bfa8:	e6c0      	b.n	800bd2c <_dtoa_r+0x34>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e7df      	b.n	800bf6e <_dtoa_r+0x276>
 800bfae:	bf00      	nop
 800bfb0:	636f4361 	.word	0x636f4361
 800bfb4:	3fd287a7 	.word	0x3fd287a7
 800bfb8:	8b60c8b3 	.word	0x8b60c8b3
 800bfbc:	3fc68a28 	.word	0x3fc68a28
 800bfc0:	509f79fb 	.word	0x509f79fb
 800bfc4:	3fd34413 	.word	0x3fd34413
 800bfc8:	0800f6e9 	.word	0x0800f6e9
 800bfcc:	0800f700 	.word	0x0800f700
 800bfd0:	7ff00000 	.word	0x7ff00000
 800bfd4:	0800f6e5 	.word	0x0800f6e5
 800bfd8:	0800f6dc 	.word	0x0800f6dc
 800bfdc:	0800f6b9 	.word	0x0800f6b9
 800bfe0:	3ff80000 	.word	0x3ff80000
 800bfe4:	0800f7f0 	.word	0x0800f7f0
 800bfe8:	0800f75b 	.word	0x0800f75b
 800bfec:	2501      	movs	r5, #1
 800bfee:	2300      	movs	r3, #0
 800bff0:	9306      	str	r3, [sp, #24]
 800bff2:	9508      	str	r5, [sp, #32]
 800bff4:	f04f 33ff 	mov.w	r3, #4294967295
 800bff8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bffc:	2200      	movs	r2, #0
 800bffe:	2312      	movs	r3, #18
 800c000:	e7b0      	b.n	800bf64 <_dtoa_r+0x26c>
 800c002:	2301      	movs	r3, #1
 800c004:	9308      	str	r3, [sp, #32]
 800c006:	e7f5      	b.n	800bff4 <_dtoa_r+0x2fc>
 800c008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c00a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c00e:	e7b8      	b.n	800bf82 <_dtoa_r+0x28a>
 800c010:	3101      	adds	r1, #1
 800c012:	6041      	str	r1, [r0, #4]
 800c014:	0052      	lsls	r2, r2, #1
 800c016:	e7b8      	b.n	800bf8a <_dtoa_r+0x292>
 800c018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c01a:	9a01      	ldr	r2, [sp, #4]
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	2b0e      	cmp	r3, #14
 800c022:	f200 809d 	bhi.w	800c160 <_dtoa_r+0x468>
 800c026:	2d00      	cmp	r5, #0
 800c028:	f000 809a 	beq.w	800c160 <_dtoa_r+0x468>
 800c02c:	9b00      	ldr	r3, [sp, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	dd32      	ble.n	800c098 <_dtoa_r+0x3a0>
 800c032:	4ab7      	ldr	r2, [pc, #732]	; (800c310 <_dtoa_r+0x618>)
 800c034:	f003 030f 	and.w	r3, r3, #15
 800c038:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c03c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c040:	9b00      	ldr	r3, [sp, #0]
 800c042:	05d8      	lsls	r0, r3, #23
 800c044:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c048:	d516      	bpl.n	800c078 <_dtoa_r+0x380>
 800c04a:	4bb2      	ldr	r3, [pc, #712]	; (800c314 <_dtoa_r+0x61c>)
 800c04c:	ec51 0b19 	vmov	r0, r1, d9
 800c050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c054:	f7f4 fc1a 	bl	800088c <__aeabi_ddiv>
 800c058:	f007 070f 	and.w	r7, r7, #15
 800c05c:	4682      	mov	sl, r0
 800c05e:	468b      	mov	fp, r1
 800c060:	2503      	movs	r5, #3
 800c062:	4eac      	ldr	r6, [pc, #688]	; (800c314 <_dtoa_r+0x61c>)
 800c064:	b957      	cbnz	r7, 800c07c <_dtoa_r+0x384>
 800c066:	4642      	mov	r2, r8
 800c068:	464b      	mov	r3, r9
 800c06a:	4650      	mov	r0, sl
 800c06c:	4659      	mov	r1, fp
 800c06e:	f7f4 fc0d 	bl	800088c <__aeabi_ddiv>
 800c072:	4682      	mov	sl, r0
 800c074:	468b      	mov	fp, r1
 800c076:	e028      	b.n	800c0ca <_dtoa_r+0x3d2>
 800c078:	2502      	movs	r5, #2
 800c07a:	e7f2      	b.n	800c062 <_dtoa_r+0x36a>
 800c07c:	07f9      	lsls	r1, r7, #31
 800c07e:	d508      	bpl.n	800c092 <_dtoa_r+0x39a>
 800c080:	4640      	mov	r0, r8
 800c082:	4649      	mov	r1, r9
 800c084:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c088:	f7f4 fad6 	bl	8000638 <__aeabi_dmul>
 800c08c:	3501      	adds	r5, #1
 800c08e:	4680      	mov	r8, r0
 800c090:	4689      	mov	r9, r1
 800c092:	107f      	asrs	r7, r7, #1
 800c094:	3608      	adds	r6, #8
 800c096:	e7e5      	b.n	800c064 <_dtoa_r+0x36c>
 800c098:	f000 809b 	beq.w	800c1d2 <_dtoa_r+0x4da>
 800c09c:	9b00      	ldr	r3, [sp, #0]
 800c09e:	4f9d      	ldr	r7, [pc, #628]	; (800c314 <_dtoa_r+0x61c>)
 800c0a0:	425e      	negs	r6, r3
 800c0a2:	4b9b      	ldr	r3, [pc, #620]	; (800c310 <_dtoa_r+0x618>)
 800c0a4:	f006 020f 	and.w	r2, r6, #15
 800c0a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	ec51 0b19 	vmov	r0, r1, d9
 800c0b4:	f7f4 fac0 	bl	8000638 <__aeabi_dmul>
 800c0b8:	1136      	asrs	r6, r6, #4
 800c0ba:	4682      	mov	sl, r0
 800c0bc:	468b      	mov	fp, r1
 800c0be:	2300      	movs	r3, #0
 800c0c0:	2502      	movs	r5, #2
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	d17a      	bne.n	800c1bc <_dtoa_r+0x4c4>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1d3      	bne.n	800c072 <_dtoa_r+0x37a>
 800c0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 8082 	beq.w	800c1d6 <_dtoa_r+0x4de>
 800c0d2:	4b91      	ldr	r3, [pc, #580]	; (800c318 <_dtoa_r+0x620>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	4650      	mov	r0, sl
 800c0d8:	4659      	mov	r1, fp
 800c0da:	f7f4 fd1f 	bl	8000b1c <__aeabi_dcmplt>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d079      	beq.n	800c1d6 <_dtoa_r+0x4de>
 800c0e2:	9b03      	ldr	r3, [sp, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d076      	beq.n	800c1d6 <_dtoa_r+0x4de>
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dd36      	ble.n	800c15c <_dtoa_r+0x464>
 800c0ee:	9b00      	ldr	r3, [sp, #0]
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	4659      	mov	r1, fp
 800c0f4:	1e5f      	subs	r7, r3, #1
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4b88      	ldr	r3, [pc, #544]	; (800c31c <_dtoa_r+0x624>)
 800c0fa:	f7f4 fa9d 	bl	8000638 <__aeabi_dmul>
 800c0fe:	9e02      	ldr	r6, [sp, #8]
 800c100:	4682      	mov	sl, r0
 800c102:	468b      	mov	fp, r1
 800c104:	3501      	adds	r5, #1
 800c106:	4628      	mov	r0, r5
 800c108:	f7f4 fa2c 	bl	8000564 <__aeabi_i2d>
 800c10c:	4652      	mov	r2, sl
 800c10e:	465b      	mov	r3, fp
 800c110:	f7f4 fa92 	bl	8000638 <__aeabi_dmul>
 800c114:	4b82      	ldr	r3, [pc, #520]	; (800c320 <_dtoa_r+0x628>)
 800c116:	2200      	movs	r2, #0
 800c118:	f7f4 f8d8 	bl	80002cc <__adddf3>
 800c11c:	46d0      	mov	r8, sl
 800c11e:	46d9      	mov	r9, fp
 800c120:	4682      	mov	sl, r0
 800c122:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c126:	2e00      	cmp	r6, #0
 800c128:	d158      	bne.n	800c1dc <_dtoa_r+0x4e4>
 800c12a:	4b7e      	ldr	r3, [pc, #504]	; (800c324 <_dtoa_r+0x62c>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	4640      	mov	r0, r8
 800c130:	4649      	mov	r1, r9
 800c132:	f7f4 f8c9 	bl	80002c8 <__aeabi_dsub>
 800c136:	4652      	mov	r2, sl
 800c138:	465b      	mov	r3, fp
 800c13a:	4680      	mov	r8, r0
 800c13c:	4689      	mov	r9, r1
 800c13e:	f7f4 fd0b 	bl	8000b58 <__aeabi_dcmpgt>
 800c142:	2800      	cmp	r0, #0
 800c144:	f040 8295 	bne.w	800c672 <_dtoa_r+0x97a>
 800c148:	4652      	mov	r2, sl
 800c14a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c14e:	4640      	mov	r0, r8
 800c150:	4649      	mov	r1, r9
 800c152:	f7f4 fce3 	bl	8000b1c <__aeabi_dcmplt>
 800c156:	2800      	cmp	r0, #0
 800c158:	f040 8289 	bne.w	800c66e <_dtoa_r+0x976>
 800c15c:	ec5b ab19 	vmov	sl, fp, d9
 800c160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c162:	2b00      	cmp	r3, #0
 800c164:	f2c0 8148 	blt.w	800c3f8 <_dtoa_r+0x700>
 800c168:	9a00      	ldr	r2, [sp, #0]
 800c16a:	2a0e      	cmp	r2, #14
 800c16c:	f300 8144 	bgt.w	800c3f8 <_dtoa_r+0x700>
 800c170:	4b67      	ldr	r3, [pc, #412]	; (800c310 <_dtoa_r+0x618>)
 800c172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c176:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f280 80d5 	bge.w	800c32c <_dtoa_r+0x634>
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f300 80d1 	bgt.w	800c32c <_dtoa_r+0x634>
 800c18a:	f040 826f 	bne.w	800c66c <_dtoa_r+0x974>
 800c18e:	4b65      	ldr	r3, [pc, #404]	; (800c324 <_dtoa_r+0x62c>)
 800c190:	2200      	movs	r2, #0
 800c192:	4640      	mov	r0, r8
 800c194:	4649      	mov	r1, r9
 800c196:	f7f4 fa4f 	bl	8000638 <__aeabi_dmul>
 800c19a:	4652      	mov	r2, sl
 800c19c:	465b      	mov	r3, fp
 800c19e:	f7f4 fcd1 	bl	8000b44 <__aeabi_dcmpge>
 800c1a2:	9e03      	ldr	r6, [sp, #12]
 800c1a4:	4637      	mov	r7, r6
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	f040 8245 	bne.w	800c636 <_dtoa_r+0x93e>
 800c1ac:	9d01      	ldr	r5, [sp, #4]
 800c1ae:	2331      	movs	r3, #49	; 0x31
 800c1b0:	f805 3b01 	strb.w	r3, [r5], #1
 800c1b4:	9b00      	ldr	r3, [sp, #0]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	e240      	b.n	800c63e <_dtoa_r+0x946>
 800c1bc:	07f2      	lsls	r2, r6, #31
 800c1be:	d505      	bpl.n	800c1cc <_dtoa_r+0x4d4>
 800c1c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1c4:	f7f4 fa38 	bl	8000638 <__aeabi_dmul>
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	1076      	asrs	r6, r6, #1
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	e777      	b.n	800c0c2 <_dtoa_r+0x3ca>
 800c1d2:	2502      	movs	r5, #2
 800c1d4:	e779      	b.n	800c0ca <_dtoa_r+0x3d2>
 800c1d6:	9f00      	ldr	r7, [sp, #0]
 800c1d8:	9e03      	ldr	r6, [sp, #12]
 800c1da:	e794      	b.n	800c106 <_dtoa_r+0x40e>
 800c1dc:	9901      	ldr	r1, [sp, #4]
 800c1de:	4b4c      	ldr	r3, [pc, #304]	; (800c310 <_dtoa_r+0x618>)
 800c1e0:	4431      	add	r1, r6
 800c1e2:	910d      	str	r1, [sp, #52]	; 0x34
 800c1e4:	9908      	ldr	r1, [sp, #32]
 800c1e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1ee:	2900      	cmp	r1, #0
 800c1f0:	d043      	beq.n	800c27a <_dtoa_r+0x582>
 800c1f2:	494d      	ldr	r1, [pc, #308]	; (800c328 <_dtoa_r+0x630>)
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	f7f4 fb49 	bl	800088c <__aeabi_ddiv>
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	465b      	mov	r3, fp
 800c1fe:	f7f4 f863 	bl	80002c8 <__aeabi_dsub>
 800c202:	9d01      	ldr	r5, [sp, #4]
 800c204:	4682      	mov	sl, r0
 800c206:	468b      	mov	fp, r1
 800c208:	4649      	mov	r1, r9
 800c20a:	4640      	mov	r0, r8
 800c20c:	f7f4 fcc4 	bl	8000b98 <__aeabi_d2iz>
 800c210:	4606      	mov	r6, r0
 800c212:	f7f4 f9a7 	bl	8000564 <__aeabi_i2d>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4640      	mov	r0, r8
 800c21c:	4649      	mov	r1, r9
 800c21e:	f7f4 f853 	bl	80002c8 <__aeabi_dsub>
 800c222:	3630      	adds	r6, #48	; 0x30
 800c224:	f805 6b01 	strb.w	r6, [r5], #1
 800c228:	4652      	mov	r2, sl
 800c22a:	465b      	mov	r3, fp
 800c22c:	4680      	mov	r8, r0
 800c22e:	4689      	mov	r9, r1
 800c230:	f7f4 fc74 	bl	8000b1c <__aeabi_dcmplt>
 800c234:	2800      	cmp	r0, #0
 800c236:	d163      	bne.n	800c300 <_dtoa_r+0x608>
 800c238:	4642      	mov	r2, r8
 800c23a:	464b      	mov	r3, r9
 800c23c:	4936      	ldr	r1, [pc, #216]	; (800c318 <_dtoa_r+0x620>)
 800c23e:	2000      	movs	r0, #0
 800c240:	f7f4 f842 	bl	80002c8 <__aeabi_dsub>
 800c244:	4652      	mov	r2, sl
 800c246:	465b      	mov	r3, fp
 800c248:	f7f4 fc68 	bl	8000b1c <__aeabi_dcmplt>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	f040 80b5 	bne.w	800c3bc <_dtoa_r+0x6c4>
 800c252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c254:	429d      	cmp	r5, r3
 800c256:	d081      	beq.n	800c15c <_dtoa_r+0x464>
 800c258:	4b30      	ldr	r3, [pc, #192]	; (800c31c <_dtoa_r+0x624>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	4650      	mov	r0, sl
 800c25e:	4659      	mov	r1, fp
 800c260:	f7f4 f9ea 	bl	8000638 <__aeabi_dmul>
 800c264:	4b2d      	ldr	r3, [pc, #180]	; (800c31c <_dtoa_r+0x624>)
 800c266:	4682      	mov	sl, r0
 800c268:	468b      	mov	fp, r1
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	2200      	movs	r2, #0
 800c270:	f7f4 f9e2 	bl	8000638 <__aeabi_dmul>
 800c274:	4680      	mov	r8, r0
 800c276:	4689      	mov	r9, r1
 800c278:	e7c6      	b.n	800c208 <_dtoa_r+0x510>
 800c27a:	4650      	mov	r0, sl
 800c27c:	4659      	mov	r1, fp
 800c27e:	f7f4 f9db 	bl	8000638 <__aeabi_dmul>
 800c282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c284:	9d01      	ldr	r5, [sp, #4]
 800c286:	930f      	str	r3, [sp, #60]	; 0x3c
 800c288:	4682      	mov	sl, r0
 800c28a:	468b      	mov	fp, r1
 800c28c:	4649      	mov	r1, r9
 800c28e:	4640      	mov	r0, r8
 800c290:	f7f4 fc82 	bl	8000b98 <__aeabi_d2iz>
 800c294:	4606      	mov	r6, r0
 800c296:	f7f4 f965 	bl	8000564 <__aeabi_i2d>
 800c29a:	3630      	adds	r6, #48	; 0x30
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	f7f4 f810 	bl	80002c8 <__aeabi_dsub>
 800c2a8:	f805 6b01 	strb.w	r6, [r5], #1
 800c2ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ae:	429d      	cmp	r5, r3
 800c2b0:	4680      	mov	r8, r0
 800c2b2:	4689      	mov	r9, r1
 800c2b4:	f04f 0200 	mov.w	r2, #0
 800c2b8:	d124      	bne.n	800c304 <_dtoa_r+0x60c>
 800c2ba:	4b1b      	ldr	r3, [pc, #108]	; (800c328 <_dtoa_r+0x630>)
 800c2bc:	4650      	mov	r0, sl
 800c2be:	4659      	mov	r1, fp
 800c2c0:	f7f4 f804 	bl	80002cc <__adddf3>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4640      	mov	r0, r8
 800c2ca:	4649      	mov	r1, r9
 800c2cc:	f7f4 fc44 	bl	8000b58 <__aeabi_dcmpgt>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d173      	bne.n	800c3bc <_dtoa_r+0x6c4>
 800c2d4:	4652      	mov	r2, sl
 800c2d6:	465b      	mov	r3, fp
 800c2d8:	4913      	ldr	r1, [pc, #76]	; (800c328 <_dtoa_r+0x630>)
 800c2da:	2000      	movs	r0, #0
 800c2dc:	f7f3 fff4 	bl	80002c8 <__aeabi_dsub>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4640      	mov	r0, r8
 800c2e6:	4649      	mov	r1, r9
 800c2e8:	f7f4 fc18 	bl	8000b1c <__aeabi_dcmplt>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	f43f af35 	beq.w	800c15c <_dtoa_r+0x464>
 800c2f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c2f4:	1e6b      	subs	r3, r5, #1
 800c2f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2fc:	2b30      	cmp	r3, #48	; 0x30
 800c2fe:	d0f8      	beq.n	800c2f2 <_dtoa_r+0x5fa>
 800c300:	9700      	str	r7, [sp, #0]
 800c302:	e049      	b.n	800c398 <_dtoa_r+0x6a0>
 800c304:	4b05      	ldr	r3, [pc, #20]	; (800c31c <_dtoa_r+0x624>)
 800c306:	f7f4 f997 	bl	8000638 <__aeabi_dmul>
 800c30a:	4680      	mov	r8, r0
 800c30c:	4689      	mov	r9, r1
 800c30e:	e7bd      	b.n	800c28c <_dtoa_r+0x594>
 800c310:	0800f7f0 	.word	0x0800f7f0
 800c314:	0800f7c8 	.word	0x0800f7c8
 800c318:	3ff00000 	.word	0x3ff00000
 800c31c:	40240000 	.word	0x40240000
 800c320:	401c0000 	.word	0x401c0000
 800c324:	40140000 	.word	0x40140000
 800c328:	3fe00000 	.word	0x3fe00000
 800c32c:	9d01      	ldr	r5, [sp, #4]
 800c32e:	4656      	mov	r6, sl
 800c330:	465f      	mov	r7, fp
 800c332:	4642      	mov	r2, r8
 800c334:	464b      	mov	r3, r9
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	f7f4 faa7 	bl	800088c <__aeabi_ddiv>
 800c33e:	f7f4 fc2b 	bl	8000b98 <__aeabi_d2iz>
 800c342:	4682      	mov	sl, r0
 800c344:	f7f4 f90e 	bl	8000564 <__aeabi_i2d>
 800c348:	4642      	mov	r2, r8
 800c34a:	464b      	mov	r3, r9
 800c34c:	f7f4 f974 	bl	8000638 <__aeabi_dmul>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c35c:	f7f3 ffb4 	bl	80002c8 <__aeabi_dsub>
 800c360:	f805 6b01 	strb.w	r6, [r5], #1
 800c364:	9e01      	ldr	r6, [sp, #4]
 800c366:	9f03      	ldr	r7, [sp, #12]
 800c368:	1bae      	subs	r6, r5, r6
 800c36a:	42b7      	cmp	r7, r6
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	d135      	bne.n	800c3de <_dtoa_r+0x6e6>
 800c372:	f7f3 ffab 	bl	80002cc <__adddf3>
 800c376:	4642      	mov	r2, r8
 800c378:	464b      	mov	r3, r9
 800c37a:	4606      	mov	r6, r0
 800c37c:	460f      	mov	r7, r1
 800c37e:	f7f4 fbeb 	bl	8000b58 <__aeabi_dcmpgt>
 800c382:	b9d0      	cbnz	r0, 800c3ba <_dtoa_r+0x6c2>
 800c384:	4642      	mov	r2, r8
 800c386:	464b      	mov	r3, r9
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f4 fbbc 	bl	8000b08 <__aeabi_dcmpeq>
 800c390:	b110      	cbz	r0, 800c398 <_dtoa_r+0x6a0>
 800c392:	f01a 0f01 	tst.w	sl, #1
 800c396:	d110      	bne.n	800c3ba <_dtoa_r+0x6c2>
 800c398:	4620      	mov	r0, r4
 800c39a:	ee18 1a10 	vmov	r1, s16
 800c39e:	f000 faf3 	bl	800c988 <_Bfree>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	9800      	ldr	r0, [sp, #0]
 800c3a6:	702b      	strb	r3, [r5, #0]
 800c3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	6018      	str	r0, [r3, #0]
 800c3ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f43f acf1 	beq.w	800bd98 <_dtoa_r+0xa0>
 800c3b6:	601d      	str	r5, [r3, #0]
 800c3b8:	e4ee      	b.n	800bd98 <_dtoa_r+0xa0>
 800c3ba:	9f00      	ldr	r7, [sp, #0]
 800c3bc:	462b      	mov	r3, r5
 800c3be:	461d      	mov	r5, r3
 800c3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3c4:	2a39      	cmp	r2, #57	; 0x39
 800c3c6:	d106      	bne.n	800c3d6 <_dtoa_r+0x6de>
 800c3c8:	9a01      	ldr	r2, [sp, #4]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d1f7      	bne.n	800c3be <_dtoa_r+0x6c6>
 800c3ce:	9901      	ldr	r1, [sp, #4]
 800c3d0:	2230      	movs	r2, #48	; 0x30
 800c3d2:	3701      	adds	r7, #1
 800c3d4:	700a      	strb	r2, [r1, #0]
 800c3d6:	781a      	ldrb	r2, [r3, #0]
 800c3d8:	3201      	adds	r2, #1
 800c3da:	701a      	strb	r2, [r3, #0]
 800c3dc:	e790      	b.n	800c300 <_dtoa_r+0x608>
 800c3de:	4ba6      	ldr	r3, [pc, #664]	; (800c678 <_dtoa_r+0x980>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f7f4 f929 	bl	8000638 <__aeabi_dmul>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	460f      	mov	r7, r1
 800c3ee:	f7f4 fb8b 	bl	8000b08 <__aeabi_dcmpeq>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d09d      	beq.n	800c332 <_dtoa_r+0x63a>
 800c3f6:	e7cf      	b.n	800c398 <_dtoa_r+0x6a0>
 800c3f8:	9a08      	ldr	r2, [sp, #32]
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	f000 80d7 	beq.w	800c5ae <_dtoa_r+0x8b6>
 800c400:	9a06      	ldr	r2, [sp, #24]
 800c402:	2a01      	cmp	r2, #1
 800c404:	f300 80ba 	bgt.w	800c57c <_dtoa_r+0x884>
 800c408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	f000 80b2 	beq.w	800c574 <_dtoa_r+0x87c>
 800c410:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c414:	9e07      	ldr	r6, [sp, #28]
 800c416:	9d04      	ldr	r5, [sp, #16]
 800c418:	9a04      	ldr	r2, [sp, #16]
 800c41a:	441a      	add	r2, r3
 800c41c:	9204      	str	r2, [sp, #16]
 800c41e:	9a05      	ldr	r2, [sp, #20]
 800c420:	2101      	movs	r1, #1
 800c422:	441a      	add	r2, r3
 800c424:	4620      	mov	r0, r4
 800c426:	9205      	str	r2, [sp, #20]
 800c428:	f000 fb66 	bl	800caf8 <__i2b>
 800c42c:	4607      	mov	r7, r0
 800c42e:	2d00      	cmp	r5, #0
 800c430:	dd0c      	ble.n	800c44c <_dtoa_r+0x754>
 800c432:	9b05      	ldr	r3, [sp, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	dd09      	ble.n	800c44c <_dtoa_r+0x754>
 800c438:	42ab      	cmp	r3, r5
 800c43a:	9a04      	ldr	r2, [sp, #16]
 800c43c:	bfa8      	it	ge
 800c43e:	462b      	movge	r3, r5
 800c440:	1ad2      	subs	r2, r2, r3
 800c442:	9204      	str	r2, [sp, #16]
 800c444:	9a05      	ldr	r2, [sp, #20]
 800c446:	1aed      	subs	r5, r5, r3
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	9305      	str	r3, [sp, #20]
 800c44c:	9b07      	ldr	r3, [sp, #28]
 800c44e:	b31b      	cbz	r3, 800c498 <_dtoa_r+0x7a0>
 800c450:	9b08      	ldr	r3, [sp, #32]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 80af 	beq.w	800c5b6 <_dtoa_r+0x8be>
 800c458:	2e00      	cmp	r6, #0
 800c45a:	dd13      	ble.n	800c484 <_dtoa_r+0x78c>
 800c45c:	4639      	mov	r1, r7
 800c45e:	4632      	mov	r2, r6
 800c460:	4620      	mov	r0, r4
 800c462:	f000 fc09 	bl	800cc78 <__pow5mult>
 800c466:	ee18 2a10 	vmov	r2, s16
 800c46a:	4601      	mov	r1, r0
 800c46c:	4607      	mov	r7, r0
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 fb58 	bl	800cb24 <__multiply>
 800c474:	ee18 1a10 	vmov	r1, s16
 800c478:	4680      	mov	r8, r0
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 fa84 	bl	800c988 <_Bfree>
 800c480:	ee08 8a10 	vmov	s16, r8
 800c484:	9b07      	ldr	r3, [sp, #28]
 800c486:	1b9a      	subs	r2, r3, r6
 800c488:	d006      	beq.n	800c498 <_dtoa_r+0x7a0>
 800c48a:	ee18 1a10 	vmov	r1, s16
 800c48e:	4620      	mov	r0, r4
 800c490:	f000 fbf2 	bl	800cc78 <__pow5mult>
 800c494:	ee08 0a10 	vmov	s16, r0
 800c498:	2101      	movs	r1, #1
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 fb2c 	bl	800caf8 <__i2b>
 800c4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	f340 8088 	ble.w	800c5ba <_dtoa_r+0x8c2>
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f000 fbe2 	bl	800cc78 <__pow5mult>
 800c4b4:	9b06      	ldr	r3, [sp, #24]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	f340 8081 	ble.w	800c5c0 <_dtoa_r+0x8c8>
 800c4be:	f04f 0800 	mov.w	r8, #0
 800c4c2:	6933      	ldr	r3, [r6, #16]
 800c4c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4c8:	6918      	ldr	r0, [r3, #16]
 800c4ca:	f000 fac5 	bl	800ca58 <__hi0bits>
 800c4ce:	f1c0 0020 	rsb	r0, r0, #32
 800c4d2:	9b05      	ldr	r3, [sp, #20]
 800c4d4:	4418      	add	r0, r3
 800c4d6:	f010 001f 	ands.w	r0, r0, #31
 800c4da:	f000 8092 	beq.w	800c602 <_dtoa_r+0x90a>
 800c4de:	f1c0 0320 	rsb	r3, r0, #32
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	f340 808a 	ble.w	800c5fc <_dtoa_r+0x904>
 800c4e8:	f1c0 001c 	rsb	r0, r0, #28
 800c4ec:	9b04      	ldr	r3, [sp, #16]
 800c4ee:	4403      	add	r3, r0
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	9b05      	ldr	r3, [sp, #20]
 800c4f4:	4403      	add	r3, r0
 800c4f6:	4405      	add	r5, r0
 800c4f8:	9305      	str	r3, [sp, #20]
 800c4fa:	9b04      	ldr	r3, [sp, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	dd07      	ble.n	800c510 <_dtoa_r+0x818>
 800c500:	ee18 1a10 	vmov	r1, s16
 800c504:	461a      	mov	r2, r3
 800c506:	4620      	mov	r0, r4
 800c508:	f000 fc10 	bl	800cd2c <__lshift>
 800c50c:	ee08 0a10 	vmov	s16, r0
 800c510:	9b05      	ldr	r3, [sp, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	dd05      	ble.n	800c522 <_dtoa_r+0x82a>
 800c516:	4631      	mov	r1, r6
 800c518:	461a      	mov	r2, r3
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 fc06 	bl	800cd2c <__lshift>
 800c520:	4606      	mov	r6, r0
 800c522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c524:	2b00      	cmp	r3, #0
 800c526:	d06e      	beq.n	800c606 <_dtoa_r+0x90e>
 800c528:	ee18 0a10 	vmov	r0, s16
 800c52c:	4631      	mov	r1, r6
 800c52e:	f000 fc6d 	bl	800ce0c <__mcmp>
 800c532:	2800      	cmp	r0, #0
 800c534:	da67      	bge.n	800c606 <_dtoa_r+0x90e>
 800c536:	9b00      	ldr	r3, [sp, #0]
 800c538:	3b01      	subs	r3, #1
 800c53a:	ee18 1a10 	vmov	r1, s16
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	220a      	movs	r2, #10
 800c542:	2300      	movs	r3, #0
 800c544:	4620      	mov	r0, r4
 800c546:	f000 fa41 	bl	800c9cc <__multadd>
 800c54a:	9b08      	ldr	r3, [sp, #32]
 800c54c:	ee08 0a10 	vmov	s16, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 81b1 	beq.w	800c8b8 <_dtoa_r+0xbc0>
 800c556:	2300      	movs	r3, #0
 800c558:	4639      	mov	r1, r7
 800c55a:	220a      	movs	r2, #10
 800c55c:	4620      	mov	r0, r4
 800c55e:	f000 fa35 	bl	800c9cc <__multadd>
 800c562:	9b02      	ldr	r3, [sp, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	4607      	mov	r7, r0
 800c568:	f300 808e 	bgt.w	800c688 <_dtoa_r+0x990>
 800c56c:	9b06      	ldr	r3, [sp, #24]
 800c56e:	2b02      	cmp	r3, #2
 800c570:	dc51      	bgt.n	800c616 <_dtoa_r+0x91e>
 800c572:	e089      	b.n	800c688 <_dtoa_r+0x990>
 800c574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c57a:	e74b      	b.n	800c414 <_dtoa_r+0x71c>
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	1e5e      	subs	r6, r3, #1
 800c580:	9b07      	ldr	r3, [sp, #28]
 800c582:	42b3      	cmp	r3, r6
 800c584:	bfbf      	itttt	lt
 800c586:	9b07      	ldrlt	r3, [sp, #28]
 800c588:	9607      	strlt	r6, [sp, #28]
 800c58a:	1af2      	sublt	r2, r6, r3
 800c58c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c58e:	bfb6      	itet	lt
 800c590:	189b      	addlt	r3, r3, r2
 800c592:	1b9e      	subge	r6, r3, r6
 800c594:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	bfb8      	it	lt
 800c59a:	2600      	movlt	r6, #0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfb7      	itett	lt
 800c5a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c5a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c5a8:	1a9d      	sublt	r5, r3, r2
 800c5aa:	2300      	movlt	r3, #0
 800c5ac:	e734      	b.n	800c418 <_dtoa_r+0x720>
 800c5ae:	9e07      	ldr	r6, [sp, #28]
 800c5b0:	9d04      	ldr	r5, [sp, #16]
 800c5b2:	9f08      	ldr	r7, [sp, #32]
 800c5b4:	e73b      	b.n	800c42e <_dtoa_r+0x736>
 800c5b6:	9a07      	ldr	r2, [sp, #28]
 800c5b8:	e767      	b.n	800c48a <_dtoa_r+0x792>
 800c5ba:	9b06      	ldr	r3, [sp, #24]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	dc18      	bgt.n	800c5f2 <_dtoa_r+0x8fa>
 800c5c0:	f1ba 0f00 	cmp.w	sl, #0
 800c5c4:	d115      	bne.n	800c5f2 <_dtoa_r+0x8fa>
 800c5c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5ca:	b993      	cbnz	r3, 800c5f2 <_dtoa_r+0x8fa>
 800c5cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5d0:	0d1b      	lsrs	r3, r3, #20
 800c5d2:	051b      	lsls	r3, r3, #20
 800c5d4:	b183      	cbz	r3, 800c5f8 <_dtoa_r+0x900>
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	9304      	str	r3, [sp, #16]
 800c5dc:	9b05      	ldr	r3, [sp, #20]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	9305      	str	r3, [sp, #20]
 800c5e2:	f04f 0801 	mov.w	r8, #1
 800c5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f47f af6a 	bne.w	800c4c2 <_dtoa_r+0x7ca>
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	e76f      	b.n	800c4d2 <_dtoa_r+0x7da>
 800c5f2:	f04f 0800 	mov.w	r8, #0
 800c5f6:	e7f6      	b.n	800c5e6 <_dtoa_r+0x8ee>
 800c5f8:	4698      	mov	r8, r3
 800c5fa:	e7f4      	b.n	800c5e6 <_dtoa_r+0x8ee>
 800c5fc:	f43f af7d 	beq.w	800c4fa <_dtoa_r+0x802>
 800c600:	4618      	mov	r0, r3
 800c602:	301c      	adds	r0, #28
 800c604:	e772      	b.n	800c4ec <_dtoa_r+0x7f4>
 800c606:	9b03      	ldr	r3, [sp, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	dc37      	bgt.n	800c67c <_dtoa_r+0x984>
 800c60c:	9b06      	ldr	r3, [sp, #24]
 800c60e:	2b02      	cmp	r3, #2
 800c610:	dd34      	ble.n	800c67c <_dtoa_r+0x984>
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	9302      	str	r3, [sp, #8]
 800c616:	9b02      	ldr	r3, [sp, #8]
 800c618:	b96b      	cbnz	r3, 800c636 <_dtoa_r+0x93e>
 800c61a:	4631      	mov	r1, r6
 800c61c:	2205      	movs	r2, #5
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 f9d4 	bl	800c9cc <__multadd>
 800c624:	4601      	mov	r1, r0
 800c626:	4606      	mov	r6, r0
 800c628:	ee18 0a10 	vmov	r0, s16
 800c62c:	f000 fbee 	bl	800ce0c <__mcmp>
 800c630:	2800      	cmp	r0, #0
 800c632:	f73f adbb 	bgt.w	800c1ac <_dtoa_r+0x4b4>
 800c636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c638:	9d01      	ldr	r5, [sp, #4]
 800c63a:	43db      	mvns	r3, r3
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	f04f 0800 	mov.w	r8, #0
 800c642:	4631      	mov	r1, r6
 800c644:	4620      	mov	r0, r4
 800c646:	f000 f99f 	bl	800c988 <_Bfree>
 800c64a:	2f00      	cmp	r7, #0
 800c64c:	f43f aea4 	beq.w	800c398 <_dtoa_r+0x6a0>
 800c650:	f1b8 0f00 	cmp.w	r8, #0
 800c654:	d005      	beq.n	800c662 <_dtoa_r+0x96a>
 800c656:	45b8      	cmp	r8, r7
 800c658:	d003      	beq.n	800c662 <_dtoa_r+0x96a>
 800c65a:	4641      	mov	r1, r8
 800c65c:	4620      	mov	r0, r4
 800c65e:	f000 f993 	bl	800c988 <_Bfree>
 800c662:	4639      	mov	r1, r7
 800c664:	4620      	mov	r0, r4
 800c666:	f000 f98f 	bl	800c988 <_Bfree>
 800c66a:	e695      	b.n	800c398 <_dtoa_r+0x6a0>
 800c66c:	2600      	movs	r6, #0
 800c66e:	4637      	mov	r7, r6
 800c670:	e7e1      	b.n	800c636 <_dtoa_r+0x93e>
 800c672:	9700      	str	r7, [sp, #0]
 800c674:	4637      	mov	r7, r6
 800c676:	e599      	b.n	800c1ac <_dtoa_r+0x4b4>
 800c678:	40240000 	.word	0x40240000
 800c67c:	9b08      	ldr	r3, [sp, #32]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f000 80ca 	beq.w	800c818 <_dtoa_r+0xb20>
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	9302      	str	r3, [sp, #8]
 800c688:	2d00      	cmp	r5, #0
 800c68a:	dd05      	ble.n	800c698 <_dtoa_r+0x9a0>
 800c68c:	4639      	mov	r1, r7
 800c68e:	462a      	mov	r2, r5
 800c690:	4620      	mov	r0, r4
 800c692:	f000 fb4b 	bl	800cd2c <__lshift>
 800c696:	4607      	mov	r7, r0
 800c698:	f1b8 0f00 	cmp.w	r8, #0
 800c69c:	d05b      	beq.n	800c756 <_dtoa_r+0xa5e>
 800c69e:	6879      	ldr	r1, [r7, #4]
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f000 f931 	bl	800c908 <_Balloc>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	b928      	cbnz	r0, 800c6b6 <_dtoa_r+0x9be>
 800c6aa:	4b87      	ldr	r3, [pc, #540]	; (800c8c8 <_dtoa_r+0xbd0>)
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6b2:	f7ff bb3b 	b.w	800bd2c <_dtoa_r+0x34>
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	3202      	adds	r2, #2
 800c6ba:	0092      	lsls	r2, r2, #2
 800c6bc:	f107 010c 	add.w	r1, r7, #12
 800c6c0:	300c      	adds	r0, #12
 800c6c2:	f000 f913 	bl	800c8ec <memcpy>
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 fb2e 	bl	800cd2c <__lshift>
 800c6d0:	9b01      	ldr	r3, [sp, #4]
 800c6d2:	f103 0901 	add.w	r9, r3, #1
 800c6d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c6da:	4413      	add	r3, r2
 800c6dc:	9305      	str	r3, [sp, #20]
 800c6de:	f00a 0301 	and.w	r3, sl, #1
 800c6e2:	46b8      	mov	r8, r7
 800c6e4:	9304      	str	r3, [sp, #16]
 800c6e6:	4607      	mov	r7, r0
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	ee18 0a10 	vmov	r0, s16
 800c6ee:	f7ff fa77 	bl	800bbe0 <quorem>
 800c6f2:	4641      	mov	r1, r8
 800c6f4:	9002      	str	r0, [sp, #8]
 800c6f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c6fa:	ee18 0a10 	vmov	r0, s16
 800c6fe:	f000 fb85 	bl	800ce0c <__mcmp>
 800c702:	463a      	mov	r2, r7
 800c704:	9003      	str	r0, [sp, #12]
 800c706:	4631      	mov	r1, r6
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 fb9b 	bl	800ce44 <__mdiff>
 800c70e:	68c2      	ldr	r2, [r0, #12]
 800c710:	f109 3bff 	add.w	fp, r9, #4294967295
 800c714:	4605      	mov	r5, r0
 800c716:	bb02      	cbnz	r2, 800c75a <_dtoa_r+0xa62>
 800c718:	4601      	mov	r1, r0
 800c71a:	ee18 0a10 	vmov	r0, s16
 800c71e:	f000 fb75 	bl	800ce0c <__mcmp>
 800c722:	4602      	mov	r2, r0
 800c724:	4629      	mov	r1, r5
 800c726:	4620      	mov	r0, r4
 800c728:	9207      	str	r2, [sp, #28]
 800c72a:	f000 f92d 	bl	800c988 <_Bfree>
 800c72e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c732:	ea43 0102 	orr.w	r1, r3, r2
 800c736:	9b04      	ldr	r3, [sp, #16]
 800c738:	430b      	orrs	r3, r1
 800c73a:	464d      	mov	r5, r9
 800c73c:	d10f      	bne.n	800c75e <_dtoa_r+0xa66>
 800c73e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c742:	d02a      	beq.n	800c79a <_dtoa_r+0xaa2>
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	dd02      	ble.n	800c750 <_dtoa_r+0xa58>
 800c74a:	9b02      	ldr	r3, [sp, #8]
 800c74c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c750:	f88b a000 	strb.w	sl, [fp]
 800c754:	e775      	b.n	800c642 <_dtoa_r+0x94a>
 800c756:	4638      	mov	r0, r7
 800c758:	e7ba      	b.n	800c6d0 <_dtoa_r+0x9d8>
 800c75a:	2201      	movs	r2, #1
 800c75c:	e7e2      	b.n	800c724 <_dtoa_r+0xa2c>
 800c75e:	9b03      	ldr	r3, [sp, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	db04      	blt.n	800c76e <_dtoa_r+0xa76>
 800c764:	9906      	ldr	r1, [sp, #24]
 800c766:	430b      	orrs	r3, r1
 800c768:	9904      	ldr	r1, [sp, #16]
 800c76a:	430b      	orrs	r3, r1
 800c76c:	d122      	bne.n	800c7b4 <_dtoa_r+0xabc>
 800c76e:	2a00      	cmp	r2, #0
 800c770:	ddee      	ble.n	800c750 <_dtoa_r+0xa58>
 800c772:	ee18 1a10 	vmov	r1, s16
 800c776:	2201      	movs	r2, #1
 800c778:	4620      	mov	r0, r4
 800c77a:	f000 fad7 	bl	800cd2c <__lshift>
 800c77e:	4631      	mov	r1, r6
 800c780:	ee08 0a10 	vmov	s16, r0
 800c784:	f000 fb42 	bl	800ce0c <__mcmp>
 800c788:	2800      	cmp	r0, #0
 800c78a:	dc03      	bgt.n	800c794 <_dtoa_r+0xa9c>
 800c78c:	d1e0      	bne.n	800c750 <_dtoa_r+0xa58>
 800c78e:	f01a 0f01 	tst.w	sl, #1
 800c792:	d0dd      	beq.n	800c750 <_dtoa_r+0xa58>
 800c794:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c798:	d1d7      	bne.n	800c74a <_dtoa_r+0xa52>
 800c79a:	2339      	movs	r3, #57	; 0x39
 800c79c:	f88b 3000 	strb.w	r3, [fp]
 800c7a0:	462b      	mov	r3, r5
 800c7a2:	461d      	mov	r5, r3
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7aa:	2a39      	cmp	r2, #57	; 0x39
 800c7ac:	d071      	beq.n	800c892 <_dtoa_r+0xb9a>
 800c7ae:	3201      	adds	r2, #1
 800c7b0:	701a      	strb	r2, [r3, #0]
 800c7b2:	e746      	b.n	800c642 <_dtoa_r+0x94a>
 800c7b4:	2a00      	cmp	r2, #0
 800c7b6:	dd07      	ble.n	800c7c8 <_dtoa_r+0xad0>
 800c7b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7bc:	d0ed      	beq.n	800c79a <_dtoa_r+0xaa2>
 800c7be:	f10a 0301 	add.w	r3, sl, #1
 800c7c2:	f88b 3000 	strb.w	r3, [fp]
 800c7c6:	e73c      	b.n	800c642 <_dtoa_r+0x94a>
 800c7c8:	9b05      	ldr	r3, [sp, #20]
 800c7ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c7ce:	4599      	cmp	r9, r3
 800c7d0:	d047      	beq.n	800c862 <_dtoa_r+0xb6a>
 800c7d2:	ee18 1a10 	vmov	r1, s16
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	220a      	movs	r2, #10
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f000 f8f6 	bl	800c9cc <__multadd>
 800c7e0:	45b8      	cmp	r8, r7
 800c7e2:	ee08 0a10 	vmov	s16, r0
 800c7e6:	f04f 0300 	mov.w	r3, #0
 800c7ea:	f04f 020a 	mov.w	r2, #10
 800c7ee:	4641      	mov	r1, r8
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	d106      	bne.n	800c802 <_dtoa_r+0xb0a>
 800c7f4:	f000 f8ea 	bl	800c9cc <__multadd>
 800c7f8:	4680      	mov	r8, r0
 800c7fa:	4607      	mov	r7, r0
 800c7fc:	f109 0901 	add.w	r9, r9, #1
 800c800:	e772      	b.n	800c6e8 <_dtoa_r+0x9f0>
 800c802:	f000 f8e3 	bl	800c9cc <__multadd>
 800c806:	4639      	mov	r1, r7
 800c808:	4680      	mov	r8, r0
 800c80a:	2300      	movs	r3, #0
 800c80c:	220a      	movs	r2, #10
 800c80e:	4620      	mov	r0, r4
 800c810:	f000 f8dc 	bl	800c9cc <__multadd>
 800c814:	4607      	mov	r7, r0
 800c816:	e7f1      	b.n	800c7fc <_dtoa_r+0xb04>
 800c818:	9b03      	ldr	r3, [sp, #12]
 800c81a:	9302      	str	r3, [sp, #8]
 800c81c:	9d01      	ldr	r5, [sp, #4]
 800c81e:	ee18 0a10 	vmov	r0, s16
 800c822:	4631      	mov	r1, r6
 800c824:	f7ff f9dc 	bl	800bbe0 <quorem>
 800c828:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c82c:	9b01      	ldr	r3, [sp, #4]
 800c82e:	f805 ab01 	strb.w	sl, [r5], #1
 800c832:	1aea      	subs	r2, r5, r3
 800c834:	9b02      	ldr	r3, [sp, #8]
 800c836:	4293      	cmp	r3, r2
 800c838:	dd09      	ble.n	800c84e <_dtoa_r+0xb56>
 800c83a:	ee18 1a10 	vmov	r1, s16
 800c83e:	2300      	movs	r3, #0
 800c840:	220a      	movs	r2, #10
 800c842:	4620      	mov	r0, r4
 800c844:	f000 f8c2 	bl	800c9cc <__multadd>
 800c848:	ee08 0a10 	vmov	s16, r0
 800c84c:	e7e7      	b.n	800c81e <_dtoa_r+0xb26>
 800c84e:	9b02      	ldr	r3, [sp, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	bfc8      	it	gt
 800c854:	461d      	movgt	r5, r3
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	bfd8      	it	le
 800c85a:	2501      	movle	r5, #1
 800c85c:	441d      	add	r5, r3
 800c85e:	f04f 0800 	mov.w	r8, #0
 800c862:	ee18 1a10 	vmov	r1, s16
 800c866:	2201      	movs	r2, #1
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 fa5f 	bl	800cd2c <__lshift>
 800c86e:	4631      	mov	r1, r6
 800c870:	ee08 0a10 	vmov	s16, r0
 800c874:	f000 faca 	bl	800ce0c <__mcmp>
 800c878:	2800      	cmp	r0, #0
 800c87a:	dc91      	bgt.n	800c7a0 <_dtoa_r+0xaa8>
 800c87c:	d102      	bne.n	800c884 <_dtoa_r+0xb8c>
 800c87e:	f01a 0f01 	tst.w	sl, #1
 800c882:	d18d      	bne.n	800c7a0 <_dtoa_r+0xaa8>
 800c884:	462b      	mov	r3, r5
 800c886:	461d      	mov	r5, r3
 800c888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c88c:	2a30      	cmp	r2, #48	; 0x30
 800c88e:	d0fa      	beq.n	800c886 <_dtoa_r+0xb8e>
 800c890:	e6d7      	b.n	800c642 <_dtoa_r+0x94a>
 800c892:	9a01      	ldr	r2, [sp, #4]
 800c894:	429a      	cmp	r2, r3
 800c896:	d184      	bne.n	800c7a2 <_dtoa_r+0xaaa>
 800c898:	9b00      	ldr	r3, [sp, #0]
 800c89a:	3301      	adds	r3, #1
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	2331      	movs	r3, #49	; 0x31
 800c8a0:	7013      	strb	r3, [r2, #0]
 800c8a2:	e6ce      	b.n	800c642 <_dtoa_r+0x94a>
 800c8a4:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <_dtoa_r+0xbd4>)
 800c8a6:	f7ff ba95 	b.w	800bdd4 <_dtoa_r+0xdc>
 800c8aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f47f aa6e 	bne.w	800bd8e <_dtoa_r+0x96>
 800c8b2:	4b07      	ldr	r3, [pc, #28]	; (800c8d0 <_dtoa_r+0xbd8>)
 800c8b4:	f7ff ba8e 	b.w	800bdd4 <_dtoa_r+0xdc>
 800c8b8:	9b02      	ldr	r3, [sp, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	dcae      	bgt.n	800c81c <_dtoa_r+0xb24>
 800c8be:	9b06      	ldr	r3, [sp, #24]
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	f73f aea8 	bgt.w	800c616 <_dtoa_r+0x91e>
 800c8c6:	e7a9      	b.n	800c81c <_dtoa_r+0xb24>
 800c8c8:	0800f75b 	.word	0x0800f75b
 800c8cc:	0800f6b8 	.word	0x0800f6b8
 800c8d0:	0800f6dc 	.word	0x0800f6dc

0800c8d4 <_localeconv_r>:
 800c8d4:	4800      	ldr	r0, [pc, #0]	; (800c8d8 <_localeconv_r+0x4>)
 800c8d6:	4770      	bx	lr
 800c8d8:	200001ec 	.word	0x200001ec

0800c8dc <malloc>:
 800c8dc:	4b02      	ldr	r3, [pc, #8]	; (800c8e8 <malloc+0xc>)
 800c8de:	4601      	mov	r1, r0
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	f000 bc17 	b.w	800d114 <_malloc_r>
 800c8e6:	bf00      	nop
 800c8e8:	20000098 	.word	0x20000098

0800c8ec <memcpy>:
 800c8ec:	440a      	add	r2, r1
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8f4:	d100      	bne.n	800c8f8 <memcpy+0xc>
 800c8f6:	4770      	bx	lr
 800c8f8:	b510      	push	{r4, lr}
 800c8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c902:	4291      	cmp	r1, r2
 800c904:	d1f9      	bne.n	800c8fa <memcpy+0xe>
 800c906:	bd10      	pop	{r4, pc}

0800c908 <_Balloc>:
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c90c:	4604      	mov	r4, r0
 800c90e:	460d      	mov	r5, r1
 800c910:	b976      	cbnz	r6, 800c930 <_Balloc+0x28>
 800c912:	2010      	movs	r0, #16
 800c914:	f7ff ffe2 	bl	800c8dc <malloc>
 800c918:	4602      	mov	r2, r0
 800c91a:	6260      	str	r0, [r4, #36]	; 0x24
 800c91c:	b920      	cbnz	r0, 800c928 <_Balloc+0x20>
 800c91e:	4b18      	ldr	r3, [pc, #96]	; (800c980 <_Balloc+0x78>)
 800c920:	4818      	ldr	r0, [pc, #96]	; (800c984 <_Balloc+0x7c>)
 800c922:	2166      	movs	r1, #102	; 0x66
 800c924:	f000 fdd6 	bl	800d4d4 <__assert_func>
 800c928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c92c:	6006      	str	r6, [r0, #0]
 800c92e:	60c6      	str	r6, [r0, #12]
 800c930:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c932:	68f3      	ldr	r3, [r6, #12]
 800c934:	b183      	cbz	r3, 800c958 <_Balloc+0x50>
 800c936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c93e:	b9b8      	cbnz	r0, 800c970 <_Balloc+0x68>
 800c940:	2101      	movs	r1, #1
 800c942:	fa01 f605 	lsl.w	r6, r1, r5
 800c946:	1d72      	adds	r2, r6, #5
 800c948:	0092      	lsls	r2, r2, #2
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 fb60 	bl	800d010 <_calloc_r>
 800c950:	b160      	cbz	r0, 800c96c <_Balloc+0x64>
 800c952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c956:	e00e      	b.n	800c976 <_Balloc+0x6e>
 800c958:	2221      	movs	r2, #33	; 0x21
 800c95a:	2104      	movs	r1, #4
 800c95c:	4620      	mov	r0, r4
 800c95e:	f000 fb57 	bl	800d010 <_calloc_r>
 800c962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c964:	60f0      	str	r0, [r6, #12]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e4      	bne.n	800c936 <_Balloc+0x2e>
 800c96c:	2000      	movs	r0, #0
 800c96e:	bd70      	pop	{r4, r5, r6, pc}
 800c970:	6802      	ldr	r2, [r0, #0]
 800c972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c976:	2300      	movs	r3, #0
 800c978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c97c:	e7f7      	b.n	800c96e <_Balloc+0x66>
 800c97e:	bf00      	nop
 800c980:	0800f6e9 	.word	0x0800f6e9
 800c984:	0800f76c 	.word	0x0800f76c

0800c988 <_Bfree>:
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c98c:	4605      	mov	r5, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	b976      	cbnz	r6, 800c9b0 <_Bfree+0x28>
 800c992:	2010      	movs	r0, #16
 800c994:	f7ff ffa2 	bl	800c8dc <malloc>
 800c998:	4602      	mov	r2, r0
 800c99a:	6268      	str	r0, [r5, #36]	; 0x24
 800c99c:	b920      	cbnz	r0, 800c9a8 <_Bfree+0x20>
 800c99e:	4b09      	ldr	r3, [pc, #36]	; (800c9c4 <_Bfree+0x3c>)
 800c9a0:	4809      	ldr	r0, [pc, #36]	; (800c9c8 <_Bfree+0x40>)
 800c9a2:	218a      	movs	r1, #138	; 0x8a
 800c9a4:	f000 fd96 	bl	800d4d4 <__assert_func>
 800c9a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9ac:	6006      	str	r6, [r0, #0]
 800c9ae:	60c6      	str	r6, [r0, #12]
 800c9b0:	b13c      	cbz	r4, 800c9c2 <_Bfree+0x3a>
 800c9b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9b4:	6862      	ldr	r2, [r4, #4]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9bc:	6021      	str	r1, [r4, #0]
 800c9be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	0800f6e9 	.word	0x0800f6e9
 800c9c8:	0800f76c 	.word	0x0800f76c

0800c9cc <__multadd>:
 800c9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d0:	690d      	ldr	r5, [r1, #16]
 800c9d2:	4607      	mov	r7, r0
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	461e      	mov	r6, r3
 800c9d8:	f101 0c14 	add.w	ip, r1, #20
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f8dc 3000 	ldr.w	r3, [ip]
 800c9e2:	b299      	uxth	r1, r3
 800c9e4:	fb02 6101 	mla	r1, r2, r1, r6
 800c9e8:	0c1e      	lsrs	r6, r3, #16
 800c9ea:	0c0b      	lsrs	r3, r1, #16
 800c9ec:	fb02 3306 	mla	r3, r2, r6, r3
 800c9f0:	b289      	uxth	r1, r1
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9f8:	4285      	cmp	r5, r0
 800c9fa:	f84c 1b04 	str.w	r1, [ip], #4
 800c9fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca02:	dcec      	bgt.n	800c9de <__multadd+0x12>
 800ca04:	b30e      	cbz	r6, 800ca4a <__multadd+0x7e>
 800ca06:	68a3      	ldr	r3, [r4, #8]
 800ca08:	42ab      	cmp	r3, r5
 800ca0a:	dc19      	bgt.n	800ca40 <__multadd+0x74>
 800ca0c:	6861      	ldr	r1, [r4, #4]
 800ca0e:	4638      	mov	r0, r7
 800ca10:	3101      	adds	r1, #1
 800ca12:	f7ff ff79 	bl	800c908 <_Balloc>
 800ca16:	4680      	mov	r8, r0
 800ca18:	b928      	cbnz	r0, 800ca26 <__multadd+0x5a>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	4b0c      	ldr	r3, [pc, #48]	; (800ca50 <__multadd+0x84>)
 800ca1e:	480d      	ldr	r0, [pc, #52]	; (800ca54 <__multadd+0x88>)
 800ca20:	21b5      	movs	r1, #181	; 0xb5
 800ca22:	f000 fd57 	bl	800d4d4 <__assert_func>
 800ca26:	6922      	ldr	r2, [r4, #16]
 800ca28:	3202      	adds	r2, #2
 800ca2a:	f104 010c 	add.w	r1, r4, #12
 800ca2e:	0092      	lsls	r2, r2, #2
 800ca30:	300c      	adds	r0, #12
 800ca32:	f7ff ff5b 	bl	800c8ec <memcpy>
 800ca36:	4621      	mov	r1, r4
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ffa5 	bl	800c988 <_Bfree>
 800ca3e:	4644      	mov	r4, r8
 800ca40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca44:	3501      	adds	r5, #1
 800ca46:	615e      	str	r6, [r3, #20]
 800ca48:	6125      	str	r5, [r4, #16]
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca50:	0800f75b 	.word	0x0800f75b
 800ca54:	0800f76c 	.word	0x0800f76c

0800ca58 <__hi0bits>:
 800ca58:	0c03      	lsrs	r3, r0, #16
 800ca5a:	041b      	lsls	r3, r3, #16
 800ca5c:	b9d3      	cbnz	r3, 800ca94 <__hi0bits+0x3c>
 800ca5e:	0400      	lsls	r0, r0, #16
 800ca60:	2310      	movs	r3, #16
 800ca62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca66:	bf04      	itt	eq
 800ca68:	0200      	lsleq	r0, r0, #8
 800ca6a:	3308      	addeq	r3, #8
 800ca6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca70:	bf04      	itt	eq
 800ca72:	0100      	lsleq	r0, r0, #4
 800ca74:	3304      	addeq	r3, #4
 800ca76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca7a:	bf04      	itt	eq
 800ca7c:	0080      	lsleq	r0, r0, #2
 800ca7e:	3302      	addeq	r3, #2
 800ca80:	2800      	cmp	r0, #0
 800ca82:	db05      	blt.n	800ca90 <__hi0bits+0x38>
 800ca84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca88:	f103 0301 	add.w	r3, r3, #1
 800ca8c:	bf08      	it	eq
 800ca8e:	2320      	moveq	r3, #32
 800ca90:	4618      	mov	r0, r3
 800ca92:	4770      	bx	lr
 800ca94:	2300      	movs	r3, #0
 800ca96:	e7e4      	b.n	800ca62 <__hi0bits+0xa>

0800ca98 <__lo0bits>:
 800ca98:	6803      	ldr	r3, [r0, #0]
 800ca9a:	f013 0207 	ands.w	r2, r3, #7
 800ca9e:	4601      	mov	r1, r0
 800caa0:	d00b      	beq.n	800caba <__lo0bits+0x22>
 800caa2:	07da      	lsls	r2, r3, #31
 800caa4:	d423      	bmi.n	800caee <__lo0bits+0x56>
 800caa6:	0798      	lsls	r0, r3, #30
 800caa8:	bf49      	itett	mi
 800caaa:	085b      	lsrmi	r3, r3, #1
 800caac:	089b      	lsrpl	r3, r3, #2
 800caae:	2001      	movmi	r0, #1
 800cab0:	600b      	strmi	r3, [r1, #0]
 800cab2:	bf5c      	itt	pl
 800cab4:	600b      	strpl	r3, [r1, #0]
 800cab6:	2002      	movpl	r0, #2
 800cab8:	4770      	bx	lr
 800caba:	b298      	uxth	r0, r3
 800cabc:	b9a8      	cbnz	r0, 800caea <__lo0bits+0x52>
 800cabe:	0c1b      	lsrs	r3, r3, #16
 800cac0:	2010      	movs	r0, #16
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	b90a      	cbnz	r2, 800caca <__lo0bits+0x32>
 800cac6:	3008      	adds	r0, #8
 800cac8:	0a1b      	lsrs	r3, r3, #8
 800caca:	071a      	lsls	r2, r3, #28
 800cacc:	bf04      	itt	eq
 800cace:	091b      	lsreq	r3, r3, #4
 800cad0:	3004      	addeq	r0, #4
 800cad2:	079a      	lsls	r2, r3, #30
 800cad4:	bf04      	itt	eq
 800cad6:	089b      	lsreq	r3, r3, #2
 800cad8:	3002      	addeq	r0, #2
 800cada:	07da      	lsls	r2, r3, #31
 800cadc:	d403      	bmi.n	800cae6 <__lo0bits+0x4e>
 800cade:	085b      	lsrs	r3, r3, #1
 800cae0:	f100 0001 	add.w	r0, r0, #1
 800cae4:	d005      	beq.n	800caf2 <__lo0bits+0x5a>
 800cae6:	600b      	str	r3, [r1, #0]
 800cae8:	4770      	bx	lr
 800caea:	4610      	mov	r0, r2
 800caec:	e7e9      	b.n	800cac2 <__lo0bits+0x2a>
 800caee:	2000      	movs	r0, #0
 800caf0:	4770      	bx	lr
 800caf2:	2020      	movs	r0, #32
 800caf4:	4770      	bx	lr
	...

0800caf8 <__i2b>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	460c      	mov	r4, r1
 800cafc:	2101      	movs	r1, #1
 800cafe:	f7ff ff03 	bl	800c908 <_Balloc>
 800cb02:	4602      	mov	r2, r0
 800cb04:	b928      	cbnz	r0, 800cb12 <__i2b+0x1a>
 800cb06:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <__i2b+0x24>)
 800cb08:	4805      	ldr	r0, [pc, #20]	; (800cb20 <__i2b+0x28>)
 800cb0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb0e:	f000 fce1 	bl	800d4d4 <__assert_func>
 800cb12:	2301      	movs	r3, #1
 800cb14:	6144      	str	r4, [r0, #20]
 800cb16:	6103      	str	r3, [r0, #16]
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	bf00      	nop
 800cb1c:	0800f75b 	.word	0x0800f75b
 800cb20:	0800f76c 	.word	0x0800f76c

0800cb24 <__multiply>:
 800cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	4691      	mov	r9, r2
 800cb2a:	690a      	ldr	r2, [r1, #16]
 800cb2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	bfb8      	it	lt
 800cb34:	460b      	movlt	r3, r1
 800cb36:	460c      	mov	r4, r1
 800cb38:	bfbc      	itt	lt
 800cb3a:	464c      	movlt	r4, r9
 800cb3c:	4699      	movlt	r9, r3
 800cb3e:	6927      	ldr	r7, [r4, #16]
 800cb40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb44:	68a3      	ldr	r3, [r4, #8]
 800cb46:	6861      	ldr	r1, [r4, #4]
 800cb48:	eb07 060a 	add.w	r6, r7, sl
 800cb4c:	42b3      	cmp	r3, r6
 800cb4e:	b085      	sub	sp, #20
 800cb50:	bfb8      	it	lt
 800cb52:	3101      	addlt	r1, #1
 800cb54:	f7ff fed8 	bl	800c908 <_Balloc>
 800cb58:	b930      	cbnz	r0, 800cb68 <__multiply+0x44>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	4b44      	ldr	r3, [pc, #272]	; (800cc70 <__multiply+0x14c>)
 800cb5e:	4845      	ldr	r0, [pc, #276]	; (800cc74 <__multiply+0x150>)
 800cb60:	f240 115d 	movw	r1, #349	; 0x15d
 800cb64:	f000 fcb6 	bl	800d4d4 <__assert_func>
 800cb68:	f100 0514 	add.w	r5, r0, #20
 800cb6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb70:	462b      	mov	r3, r5
 800cb72:	2200      	movs	r2, #0
 800cb74:	4543      	cmp	r3, r8
 800cb76:	d321      	bcc.n	800cbbc <__multiply+0x98>
 800cb78:	f104 0314 	add.w	r3, r4, #20
 800cb7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb80:	f109 0314 	add.w	r3, r9, #20
 800cb84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cb88:	9202      	str	r2, [sp, #8]
 800cb8a:	1b3a      	subs	r2, r7, r4
 800cb8c:	3a15      	subs	r2, #21
 800cb8e:	f022 0203 	bic.w	r2, r2, #3
 800cb92:	3204      	adds	r2, #4
 800cb94:	f104 0115 	add.w	r1, r4, #21
 800cb98:	428f      	cmp	r7, r1
 800cb9a:	bf38      	it	cc
 800cb9c:	2204      	movcc	r2, #4
 800cb9e:	9201      	str	r2, [sp, #4]
 800cba0:	9a02      	ldr	r2, [sp, #8]
 800cba2:	9303      	str	r3, [sp, #12]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d80c      	bhi.n	800cbc2 <__multiply+0x9e>
 800cba8:	2e00      	cmp	r6, #0
 800cbaa:	dd03      	ble.n	800cbb4 <__multiply+0x90>
 800cbac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d05a      	beq.n	800cc6a <__multiply+0x146>
 800cbb4:	6106      	str	r6, [r0, #16]
 800cbb6:	b005      	add	sp, #20
 800cbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbbc:	f843 2b04 	str.w	r2, [r3], #4
 800cbc0:	e7d8      	b.n	800cb74 <__multiply+0x50>
 800cbc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbc6:	f1ba 0f00 	cmp.w	sl, #0
 800cbca:	d024      	beq.n	800cc16 <__multiply+0xf2>
 800cbcc:	f104 0e14 	add.w	lr, r4, #20
 800cbd0:	46a9      	mov	r9, r5
 800cbd2:	f04f 0c00 	mov.w	ip, #0
 800cbd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cbda:	f8d9 1000 	ldr.w	r1, [r9]
 800cbde:	fa1f fb82 	uxth.w	fp, r2
 800cbe2:	b289      	uxth	r1, r1
 800cbe4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cbe8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cbec:	f8d9 2000 	ldr.w	r2, [r9]
 800cbf0:	4461      	add	r1, ip
 800cbf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cbf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cbfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cbfe:	b289      	uxth	r1, r1
 800cc00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc04:	4577      	cmp	r7, lr
 800cc06:	f849 1b04 	str.w	r1, [r9], #4
 800cc0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc0e:	d8e2      	bhi.n	800cbd6 <__multiply+0xb2>
 800cc10:	9a01      	ldr	r2, [sp, #4]
 800cc12:	f845 c002 	str.w	ip, [r5, r2]
 800cc16:	9a03      	ldr	r2, [sp, #12]
 800cc18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	f1b9 0f00 	cmp.w	r9, #0
 800cc22:	d020      	beq.n	800cc66 <__multiply+0x142>
 800cc24:	6829      	ldr	r1, [r5, #0]
 800cc26:	f104 0c14 	add.w	ip, r4, #20
 800cc2a:	46ae      	mov	lr, r5
 800cc2c:	f04f 0a00 	mov.w	sl, #0
 800cc30:	f8bc b000 	ldrh.w	fp, [ip]
 800cc34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc38:	fb09 220b 	mla	r2, r9, fp, r2
 800cc3c:	4492      	add	sl, r2
 800cc3e:	b289      	uxth	r1, r1
 800cc40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cc44:	f84e 1b04 	str.w	r1, [lr], #4
 800cc48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc4c:	f8be 1000 	ldrh.w	r1, [lr]
 800cc50:	0c12      	lsrs	r2, r2, #16
 800cc52:	fb09 1102 	mla	r1, r9, r2, r1
 800cc56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc5a:	4567      	cmp	r7, ip
 800cc5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc60:	d8e6      	bhi.n	800cc30 <__multiply+0x10c>
 800cc62:	9a01      	ldr	r2, [sp, #4]
 800cc64:	50a9      	str	r1, [r5, r2]
 800cc66:	3504      	adds	r5, #4
 800cc68:	e79a      	b.n	800cba0 <__multiply+0x7c>
 800cc6a:	3e01      	subs	r6, #1
 800cc6c:	e79c      	b.n	800cba8 <__multiply+0x84>
 800cc6e:	bf00      	nop
 800cc70:	0800f75b 	.word	0x0800f75b
 800cc74:	0800f76c 	.word	0x0800f76c

0800cc78 <__pow5mult>:
 800cc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc7c:	4615      	mov	r5, r2
 800cc7e:	f012 0203 	ands.w	r2, r2, #3
 800cc82:	4606      	mov	r6, r0
 800cc84:	460f      	mov	r7, r1
 800cc86:	d007      	beq.n	800cc98 <__pow5mult+0x20>
 800cc88:	4c25      	ldr	r4, [pc, #148]	; (800cd20 <__pow5mult+0xa8>)
 800cc8a:	3a01      	subs	r2, #1
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc92:	f7ff fe9b 	bl	800c9cc <__multadd>
 800cc96:	4607      	mov	r7, r0
 800cc98:	10ad      	asrs	r5, r5, #2
 800cc9a:	d03d      	beq.n	800cd18 <__pow5mult+0xa0>
 800cc9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc9e:	b97c      	cbnz	r4, 800ccc0 <__pow5mult+0x48>
 800cca0:	2010      	movs	r0, #16
 800cca2:	f7ff fe1b 	bl	800c8dc <malloc>
 800cca6:	4602      	mov	r2, r0
 800cca8:	6270      	str	r0, [r6, #36]	; 0x24
 800ccaa:	b928      	cbnz	r0, 800ccb8 <__pow5mult+0x40>
 800ccac:	4b1d      	ldr	r3, [pc, #116]	; (800cd24 <__pow5mult+0xac>)
 800ccae:	481e      	ldr	r0, [pc, #120]	; (800cd28 <__pow5mult+0xb0>)
 800ccb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ccb4:	f000 fc0e 	bl	800d4d4 <__assert_func>
 800ccb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccbc:	6004      	str	r4, [r0, #0]
 800ccbe:	60c4      	str	r4, [r0, #12]
 800ccc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ccc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ccc8:	b94c      	cbnz	r4, 800ccde <__pow5mult+0x66>
 800ccca:	f240 2171 	movw	r1, #625	; 0x271
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f7ff ff12 	bl	800caf8 <__i2b>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccda:	4604      	mov	r4, r0
 800ccdc:	6003      	str	r3, [r0, #0]
 800ccde:	f04f 0900 	mov.w	r9, #0
 800cce2:	07eb      	lsls	r3, r5, #31
 800cce4:	d50a      	bpl.n	800ccfc <__pow5mult+0x84>
 800cce6:	4639      	mov	r1, r7
 800cce8:	4622      	mov	r2, r4
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff ff1a 	bl	800cb24 <__multiply>
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	4680      	mov	r8, r0
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7ff fe47 	bl	800c988 <_Bfree>
 800ccfa:	4647      	mov	r7, r8
 800ccfc:	106d      	asrs	r5, r5, #1
 800ccfe:	d00b      	beq.n	800cd18 <__pow5mult+0xa0>
 800cd00:	6820      	ldr	r0, [r4, #0]
 800cd02:	b938      	cbnz	r0, 800cd14 <__pow5mult+0x9c>
 800cd04:	4622      	mov	r2, r4
 800cd06:	4621      	mov	r1, r4
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f7ff ff0b 	bl	800cb24 <__multiply>
 800cd0e:	6020      	str	r0, [r4, #0]
 800cd10:	f8c0 9000 	str.w	r9, [r0]
 800cd14:	4604      	mov	r4, r0
 800cd16:	e7e4      	b.n	800cce2 <__pow5mult+0x6a>
 800cd18:	4638      	mov	r0, r7
 800cd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd1e:	bf00      	nop
 800cd20:	0800f8b8 	.word	0x0800f8b8
 800cd24:	0800f6e9 	.word	0x0800f6e9
 800cd28:	0800f76c 	.word	0x0800f76c

0800cd2c <__lshift>:
 800cd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd30:	460c      	mov	r4, r1
 800cd32:	6849      	ldr	r1, [r1, #4]
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd3a:	68a3      	ldr	r3, [r4, #8]
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	4691      	mov	r9, r2
 800cd40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd44:	f108 0601 	add.w	r6, r8, #1
 800cd48:	42b3      	cmp	r3, r6
 800cd4a:	db0b      	blt.n	800cd64 <__lshift+0x38>
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f7ff fddb 	bl	800c908 <_Balloc>
 800cd52:	4605      	mov	r5, r0
 800cd54:	b948      	cbnz	r0, 800cd6a <__lshift+0x3e>
 800cd56:	4602      	mov	r2, r0
 800cd58:	4b2a      	ldr	r3, [pc, #168]	; (800ce04 <__lshift+0xd8>)
 800cd5a:	482b      	ldr	r0, [pc, #172]	; (800ce08 <__lshift+0xdc>)
 800cd5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd60:	f000 fbb8 	bl	800d4d4 <__assert_func>
 800cd64:	3101      	adds	r1, #1
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	e7ee      	b.n	800cd48 <__lshift+0x1c>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f100 0114 	add.w	r1, r0, #20
 800cd70:	f100 0210 	add.w	r2, r0, #16
 800cd74:	4618      	mov	r0, r3
 800cd76:	4553      	cmp	r3, sl
 800cd78:	db37      	blt.n	800cdea <__lshift+0xbe>
 800cd7a:	6920      	ldr	r0, [r4, #16]
 800cd7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd80:	f104 0314 	add.w	r3, r4, #20
 800cd84:	f019 091f 	ands.w	r9, r9, #31
 800cd88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd90:	d02f      	beq.n	800cdf2 <__lshift+0xc6>
 800cd92:	f1c9 0e20 	rsb	lr, r9, #32
 800cd96:	468a      	mov	sl, r1
 800cd98:	f04f 0c00 	mov.w	ip, #0
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	fa02 f209 	lsl.w	r2, r2, r9
 800cda2:	ea42 020c 	orr.w	r2, r2, ip
 800cda6:	f84a 2b04 	str.w	r2, [sl], #4
 800cdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdae:	4298      	cmp	r0, r3
 800cdb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cdb4:	d8f2      	bhi.n	800cd9c <__lshift+0x70>
 800cdb6:	1b03      	subs	r3, r0, r4
 800cdb8:	3b15      	subs	r3, #21
 800cdba:	f023 0303 	bic.w	r3, r3, #3
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	f104 0215 	add.w	r2, r4, #21
 800cdc4:	4290      	cmp	r0, r2
 800cdc6:	bf38      	it	cc
 800cdc8:	2304      	movcc	r3, #4
 800cdca:	f841 c003 	str.w	ip, [r1, r3]
 800cdce:	f1bc 0f00 	cmp.w	ip, #0
 800cdd2:	d001      	beq.n	800cdd8 <__lshift+0xac>
 800cdd4:	f108 0602 	add.w	r6, r8, #2
 800cdd8:	3e01      	subs	r6, #1
 800cdda:	4638      	mov	r0, r7
 800cddc:	612e      	str	r6, [r5, #16]
 800cdde:	4621      	mov	r1, r4
 800cde0:	f7ff fdd2 	bl	800c988 <_Bfree>
 800cde4:	4628      	mov	r0, r5
 800cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdea:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdee:	3301      	adds	r3, #1
 800cdf0:	e7c1      	b.n	800cd76 <__lshift+0x4a>
 800cdf2:	3904      	subs	r1, #4
 800cdf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cdfc:	4298      	cmp	r0, r3
 800cdfe:	d8f9      	bhi.n	800cdf4 <__lshift+0xc8>
 800ce00:	e7ea      	b.n	800cdd8 <__lshift+0xac>
 800ce02:	bf00      	nop
 800ce04:	0800f75b 	.word	0x0800f75b
 800ce08:	0800f76c 	.word	0x0800f76c

0800ce0c <__mcmp>:
 800ce0c:	b530      	push	{r4, r5, lr}
 800ce0e:	6902      	ldr	r2, [r0, #16]
 800ce10:	690c      	ldr	r4, [r1, #16]
 800ce12:	1b12      	subs	r2, r2, r4
 800ce14:	d10e      	bne.n	800ce34 <__mcmp+0x28>
 800ce16:	f100 0314 	add.w	r3, r0, #20
 800ce1a:	3114      	adds	r1, #20
 800ce1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce2c:	42a5      	cmp	r5, r4
 800ce2e:	d003      	beq.n	800ce38 <__mcmp+0x2c>
 800ce30:	d305      	bcc.n	800ce3e <__mcmp+0x32>
 800ce32:	2201      	movs	r2, #1
 800ce34:	4610      	mov	r0, r2
 800ce36:	bd30      	pop	{r4, r5, pc}
 800ce38:	4283      	cmp	r3, r0
 800ce3a:	d3f3      	bcc.n	800ce24 <__mcmp+0x18>
 800ce3c:	e7fa      	b.n	800ce34 <__mcmp+0x28>
 800ce3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce42:	e7f7      	b.n	800ce34 <__mcmp+0x28>

0800ce44 <__mdiff>:
 800ce44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	460c      	mov	r4, r1
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4620      	mov	r0, r4
 800ce50:	4690      	mov	r8, r2
 800ce52:	f7ff ffdb 	bl	800ce0c <__mcmp>
 800ce56:	1e05      	subs	r5, r0, #0
 800ce58:	d110      	bne.n	800ce7c <__mdiff+0x38>
 800ce5a:	4629      	mov	r1, r5
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7ff fd53 	bl	800c908 <_Balloc>
 800ce62:	b930      	cbnz	r0, 800ce72 <__mdiff+0x2e>
 800ce64:	4b3a      	ldr	r3, [pc, #232]	; (800cf50 <__mdiff+0x10c>)
 800ce66:	4602      	mov	r2, r0
 800ce68:	f240 2132 	movw	r1, #562	; 0x232
 800ce6c:	4839      	ldr	r0, [pc, #228]	; (800cf54 <__mdiff+0x110>)
 800ce6e:	f000 fb31 	bl	800d4d4 <__assert_func>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7c:	bfa4      	itt	ge
 800ce7e:	4643      	movge	r3, r8
 800ce80:	46a0      	movge	r8, r4
 800ce82:	4630      	mov	r0, r6
 800ce84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ce88:	bfa6      	itte	ge
 800ce8a:	461c      	movge	r4, r3
 800ce8c:	2500      	movge	r5, #0
 800ce8e:	2501      	movlt	r5, #1
 800ce90:	f7ff fd3a 	bl	800c908 <_Balloc>
 800ce94:	b920      	cbnz	r0, 800cea0 <__mdiff+0x5c>
 800ce96:	4b2e      	ldr	r3, [pc, #184]	; (800cf50 <__mdiff+0x10c>)
 800ce98:	4602      	mov	r2, r0
 800ce9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce9e:	e7e5      	b.n	800ce6c <__mdiff+0x28>
 800cea0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cea4:	6926      	ldr	r6, [r4, #16]
 800cea6:	60c5      	str	r5, [r0, #12]
 800cea8:	f104 0914 	add.w	r9, r4, #20
 800ceac:	f108 0514 	add.w	r5, r8, #20
 800ceb0:	f100 0e14 	add.w	lr, r0, #20
 800ceb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ceb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cebc:	f108 0210 	add.w	r2, r8, #16
 800cec0:	46f2      	mov	sl, lr
 800cec2:	2100      	movs	r1, #0
 800cec4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cecc:	fa1f f883 	uxth.w	r8, r3
 800ced0:	fa11 f18b 	uxtah	r1, r1, fp
 800ced4:	0c1b      	lsrs	r3, r3, #16
 800ced6:	eba1 0808 	sub.w	r8, r1, r8
 800ceda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cee2:	fa1f f888 	uxth.w	r8, r8
 800cee6:	1419      	asrs	r1, r3, #16
 800cee8:	454e      	cmp	r6, r9
 800ceea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ceee:	f84a 3b04 	str.w	r3, [sl], #4
 800cef2:	d8e7      	bhi.n	800cec4 <__mdiff+0x80>
 800cef4:	1b33      	subs	r3, r6, r4
 800cef6:	3b15      	subs	r3, #21
 800cef8:	f023 0303 	bic.w	r3, r3, #3
 800cefc:	3304      	adds	r3, #4
 800cefe:	3415      	adds	r4, #21
 800cf00:	42a6      	cmp	r6, r4
 800cf02:	bf38      	it	cc
 800cf04:	2304      	movcc	r3, #4
 800cf06:	441d      	add	r5, r3
 800cf08:	4473      	add	r3, lr
 800cf0a:	469e      	mov	lr, r3
 800cf0c:	462e      	mov	r6, r5
 800cf0e:	4566      	cmp	r6, ip
 800cf10:	d30e      	bcc.n	800cf30 <__mdiff+0xec>
 800cf12:	f10c 0203 	add.w	r2, ip, #3
 800cf16:	1b52      	subs	r2, r2, r5
 800cf18:	f022 0203 	bic.w	r2, r2, #3
 800cf1c:	3d03      	subs	r5, #3
 800cf1e:	45ac      	cmp	ip, r5
 800cf20:	bf38      	it	cc
 800cf22:	2200      	movcc	r2, #0
 800cf24:	441a      	add	r2, r3
 800cf26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf2a:	b17b      	cbz	r3, 800cf4c <__mdiff+0x108>
 800cf2c:	6107      	str	r7, [r0, #16]
 800cf2e:	e7a3      	b.n	800ce78 <__mdiff+0x34>
 800cf30:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf34:	fa11 f288 	uxtah	r2, r1, r8
 800cf38:	1414      	asrs	r4, r2, #16
 800cf3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cf3e:	b292      	uxth	r2, r2
 800cf40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf44:	f84e 2b04 	str.w	r2, [lr], #4
 800cf48:	1421      	asrs	r1, r4, #16
 800cf4a:	e7e0      	b.n	800cf0e <__mdiff+0xca>
 800cf4c:	3f01      	subs	r7, #1
 800cf4e:	e7ea      	b.n	800cf26 <__mdiff+0xe2>
 800cf50:	0800f75b 	.word	0x0800f75b
 800cf54:	0800f76c 	.word	0x0800f76c

0800cf58 <__d2b>:
 800cf58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf5c:	4689      	mov	r9, r1
 800cf5e:	2101      	movs	r1, #1
 800cf60:	ec57 6b10 	vmov	r6, r7, d0
 800cf64:	4690      	mov	r8, r2
 800cf66:	f7ff fccf 	bl	800c908 <_Balloc>
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	b930      	cbnz	r0, 800cf7c <__d2b+0x24>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	4b25      	ldr	r3, [pc, #148]	; (800d008 <__d2b+0xb0>)
 800cf72:	4826      	ldr	r0, [pc, #152]	; (800d00c <__d2b+0xb4>)
 800cf74:	f240 310a 	movw	r1, #778	; 0x30a
 800cf78:	f000 faac 	bl	800d4d4 <__assert_func>
 800cf7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cf80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf84:	bb35      	cbnz	r5, 800cfd4 <__d2b+0x7c>
 800cf86:	2e00      	cmp	r6, #0
 800cf88:	9301      	str	r3, [sp, #4]
 800cf8a:	d028      	beq.n	800cfde <__d2b+0x86>
 800cf8c:	4668      	mov	r0, sp
 800cf8e:	9600      	str	r6, [sp, #0]
 800cf90:	f7ff fd82 	bl	800ca98 <__lo0bits>
 800cf94:	9900      	ldr	r1, [sp, #0]
 800cf96:	b300      	cbz	r0, 800cfda <__d2b+0x82>
 800cf98:	9a01      	ldr	r2, [sp, #4]
 800cf9a:	f1c0 0320 	rsb	r3, r0, #32
 800cf9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa2:	430b      	orrs	r3, r1
 800cfa4:	40c2      	lsrs	r2, r0
 800cfa6:	6163      	str	r3, [r4, #20]
 800cfa8:	9201      	str	r2, [sp, #4]
 800cfaa:	9b01      	ldr	r3, [sp, #4]
 800cfac:	61a3      	str	r3, [r4, #24]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bf14      	ite	ne
 800cfb2:	2202      	movne	r2, #2
 800cfb4:	2201      	moveq	r2, #1
 800cfb6:	6122      	str	r2, [r4, #16]
 800cfb8:	b1d5      	cbz	r5, 800cff0 <__d2b+0x98>
 800cfba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cfbe:	4405      	add	r5, r0
 800cfc0:	f8c9 5000 	str.w	r5, [r9]
 800cfc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cfc8:	f8c8 0000 	str.w	r0, [r8]
 800cfcc:	4620      	mov	r0, r4
 800cfce:	b003      	add	sp, #12
 800cfd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfd8:	e7d5      	b.n	800cf86 <__d2b+0x2e>
 800cfda:	6161      	str	r1, [r4, #20]
 800cfdc:	e7e5      	b.n	800cfaa <__d2b+0x52>
 800cfde:	a801      	add	r0, sp, #4
 800cfe0:	f7ff fd5a 	bl	800ca98 <__lo0bits>
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	6163      	str	r3, [r4, #20]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	6122      	str	r2, [r4, #16]
 800cfec:	3020      	adds	r0, #32
 800cfee:	e7e3      	b.n	800cfb8 <__d2b+0x60>
 800cff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cff8:	f8c9 0000 	str.w	r0, [r9]
 800cffc:	6918      	ldr	r0, [r3, #16]
 800cffe:	f7ff fd2b 	bl	800ca58 <__hi0bits>
 800d002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d006:	e7df      	b.n	800cfc8 <__d2b+0x70>
 800d008:	0800f75b 	.word	0x0800f75b
 800d00c:	0800f76c 	.word	0x0800f76c

0800d010 <_calloc_r>:
 800d010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d012:	fba1 2402 	umull	r2, r4, r1, r2
 800d016:	b94c      	cbnz	r4, 800d02c <_calloc_r+0x1c>
 800d018:	4611      	mov	r1, r2
 800d01a:	9201      	str	r2, [sp, #4]
 800d01c:	f000 f87a 	bl	800d114 <_malloc_r>
 800d020:	9a01      	ldr	r2, [sp, #4]
 800d022:	4605      	mov	r5, r0
 800d024:	b930      	cbnz	r0, 800d034 <_calloc_r+0x24>
 800d026:	4628      	mov	r0, r5
 800d028:	b003      	add	sp, #12
 800d02a:	bd30      	pop	{r4, r5, pc}
 800d02c:	220c      	movs	r2, #12
 800d02e:	6002      	str	r2, [r0, #0]
 800d030:	2500      	movs	r5, #0
 800d032:	e7f8      	b.n	800d026 <_calloc_r+0x16>
 800d034:	4621      	mov	r1, r4
 800d036:	f7fe f941 	bl	800b2bc <memset>
 800d03a:	e7f4      	b.n	800d026 <_calloc_r+0x16>

0800d03c <_free_r>:
 800d03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d03e:	2900      	cmp	r1, #0
 800d040:	d044      	beq.n	800d0cc <_free_r+0x90>
 800d042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d046:	9001      	str	r0, [sp, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f1a1 0404 	sub.w	r4, r1, #4
 800d04e:	bfb8      	it	lt
 800d050:	18e4      	addlt	r4, r4, r3
 800d052:	f000 fa9b 	bl	800d58c <__malloc_lock>
 800d056:	4a1e      	ldr	r2, [pc, #120]	; (800d0d0 <_free_r+0x94>)
 800d058:	9801      	ldr	r0, [sp, #4]
 800d05a:	6813      	ldr	r3, [r2, #0]
 800d05c:	b933      	cbnz	r3, 800d06c <_free_r+0x30>
 800d05e:	6063      	str	r3, [r4, #4]
 800d060:	6014      	str	r4, [r2, #0]
 800d062:	b003      	add	sp, #12
 800d064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d068:	f000 ba96 	b.w	800d598 <__malloc_unlock>
 800d06c:	42a3      	cmp	r3, r4
 800d06e:	d908      	bls.n	800d082 <_free_r+0x46>
 800d070:	6825      	ldr	r5, [r4, #0]
 800d072:	1961      	adds	r1, r4, r5
 800d074:	428b      	cmp	r3, r1
 800d076:	bf01      	itttt	eq
 800d078:	6819      	ldreq	r1, [r3, #0]
 800d07a:	685b      	ldreq	r3, [r3, #4]
 800d07c:	1949      	addeq	r1, r1, r5
 800d07e:	6021      	streq	r1, [r4, #0]
 800d080:	e7ed      	b.n	800d05e <_free_r+0x22>
 800d082:	461a      	mov	r2, r3
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	b10b      	cbz	r3, 800d08c <_free_r+0x50>
 800d088:	42a3      	cmp	r3, r4
 800d08a:	d9fa      	bls.n	800d082 <_free_r+0x46>
 800d08c:	6811      	ldr	r1, [r2, #0]
 800d08e:	1855      	adds	r5, r2, r1
 800d090:	42a5      	cmp	r5, r4
 800d092:	d10b      	bne.n	800d0ac <_free_r+0x70>
 800d094:	6824      	ldr	r4, [r4, #0]
 800d096:	4421      	add	r1, r4
 800d098:	1854      	adds	r4, r2, r1
 800d09a:	42a3      	cmp	r3, r4
 800d09c:	6011      	str	r1, [r2, #0]
 800d09e:	d1e0      	bne.n	800d062 <_free_r+0x26>
 800d0a0:	681c      	ldr	r4, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	6053      	str	r3, [r2, #4]
 800d0a6:	4421      	add	r1, r4
 800d0a8:	6011      	str	r1, [r2, #0]
 800d0aa:	e7da      	b.n	800d062 <_free_r+0x26>
 800d0ac:	d902      	bls.n	800d0b4 <_free_r+0x78>
 800d0ae:	230c      	movs	r3, #12
 800d0b0:	6003      	str	r3, [r0, #0]
 800d0b2:	e7d6      	b.n	800d062 <_free_r+0x26>
 800d0b4:	6825      	ldr	r5, [r4, #0]
 800d0b6:	1961      	adds	r1, r4, r5
 800d0b8:	428b      	cmp	r3, r1
 800d0ba:	bf04      	itt	eq
 800d0bc:	6819      	ldreq	r1, [r3, #0]
 800d0be:	685b      	ldreq	r3, [r3, #4]
 800d0c0:	6063      	str	r3, [r4, #4]
 800d0c2:	bf04      	itt	eq
 800d0c4:	1949      	addeq	r1, r1, r5
 800d0c6:	6021      	streq	r1, [r4, #0]
 800d0c8:	6054      	str	r4, [r2, #4]
 800d0ca:	e7ca      	b.n	800d062 <_free_r+0x26>
 800d0cc:	b003      	add	sp, #12
 800d0ce:	bd30      	pop	{r4, r5, pc}
 800d0d0:	20000b7c 	.word	0x20000b7c

0800d0d4 <sbrk_aligned>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	4e0e      	ldr	r6, [pc, #56]	; (800d110 <sbrk_aligned+0x3c>)
 800d0d8:	460c      	mov	r4, r1
 800d0da:	6831      	ldr	r1, [r6, #0]
 800d0dc:	4605      	mov	r5, r0
 800d0de:	b911      	cbnz	r1, 800d0e6 <sbrk_aligned+0x12>
 800d0e0:	f000 f9e8 	bl	800d4b4 <_sbrk_r>
 800d0e4:	6030      	str	r0, [r6, #0]
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	f000 f9e3 	bl	800d4b4 <_sbrk_r>
 800d0ee:	1c43      	adds	r3, r0, #1
 800d0f0:	d00a      	beq.n	800d108 <sbrk_aligned+0x34>
 800d0f2:	1cc4      	adds	r4, r0, #3
 800d0f4:	f024 0403 	bic.w	r4, r4, #3
 800d0f8:	42a0      	cmp	r0, r4
 800d0fa:	d007      	beq.n	800d10c <sbrk_aligned+0x38>
 800d0fc:	1a21      	subs	r1, r4, r0
 800d0fe:	4628      	mov	r0, r5
 800d100:	f000 f9d8 	bl	800d4b4 <_sbrk_r>
 800d104:	3001      	adds	r0, #1
 800d106:	d101      	bne.n	800d10c <sbrk_aligned+0x38>
 800d108:	f04f 34ff 	mov.w	r4, #4294967295
 800d10c:	4620      	mov	r0, r4
 800d10e:	bd70      	pop	{r4, r5, r6, pc}
 800d110:	20000b80 	.word	0x20000b80

0800d114 <_malloc_r>:
 800d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d118:	1ccd      	adds	r5, r1, #3
 800d11a:	f025 0503 	bic.w	r5, r5, #3
 800d11e:	3508      	adds	r5, #8
 800d120:	2d0c      	cmp	r5, #12
 800d122:	bf38      	it	cc
 800d124:	250c      	movcc	r5, #12
 800d126:	2d00      	cmp	r5, #0
 800d128:	4607      	mov	r7, r0
 800d12a:	db01      	blt.n	800d130 <_malloc_r+0x1c>
 800d12c:	42a9      	cmp	r1, r5
 800d12e:	d905      	bls.n	800d13c <_malloc_r+0x28>
 800d130:	230c      	movs	r3, #12
 800d132:	603b      	str	r3, [r7, #0]
 800d134:	2600      	movs	r6, #0
 800d136:	4630      	mov	r0, r6
 800d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d13c:	4e2e      	ldr	r6, [pc, #184]	; (800d1f8 <_malloc_r+0xe4>)
 800d13e:	f000 fa25 	bl	800d58c <__malloc_lock>
 800d142:	6833      	ldr	r3, [r6, #0]
 800d144:	461c      	mov	r4, r3
 800d146:	bb34      	cbnz	r4, 800d196 <_malloc_r+0x82>
 800d148:	4629      	mov	r1, r5
 800d14a:	4638      	mov	r0, r7
 800d14c:	f7ff ffc2 	bl	800d0d4 <sbrk_aligned>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	4604      	mov	r4, r0
 800d154:	d14d      	bne.n	800d1f2 <_malloc_r+0xde>
 800d156:	6834      	ldr	r4, [r6, #0]
 800d158:	4626      	mov	r6, r4
 800d15a:	2e00      	cmp	r6, #0
 800d15c:	d140      	bne.n	800d1e0 <_malloc_r+0xcc>
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	4631      	mov	r1, r6
 800d162:	4638      	mov	r0, r7
 800d164:	eb04 0803 	add.w	r8, r4, r3
 800d168:	f000 f9a4 	bl	800d4b4 <_sbrk_r>
 800d16c:	4580      	cmp	r8, r0
 800d16e:	d13a      	bne.n	800d1e6 <_malloc_r+0xd2>
 800d170:	6821      	ldr	r1, [r4, #0]
 800d172:	3503      	adds	r5, #3
 800d174:	1a6d      	subs	r5, r5, r1
 800d176:	f025 0503 	bic.w	r5, r5, #3
 800d17a:	3508      	adds	r5, #8
 800d17c:	2d0c      	cmp	r5, #12
 800d17e:	bf38      	it	cc
 800d180:	250c      	movcc	r5, #12
 800d182:	4629      	mov	r1, r5
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff ffa5 	bl	800d0d4 <sbrk_aligned>
 800d18a:	3001      	adds	r0, #1
 800d18c:	d02b      	beq.n	800d1e6 <_malloc_r+0xd2>
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	442b      	add	r3, r5
 800d192:	6023      	str	r3, [r4, #0]
 800d194:	e00e      	b.n	800d1b4 <_malloc_r+0xa0>
 800d196:	6822      	ldr	r2, [r4, #0]
 800d198:	1b52      	subs	r2, r2, r5
 800d19a:	d41e      	bmi.n	800d1da <_malloc_r+0xc6>
 800d19c:	2a0b      	cmp	r2, #11
 800d19e:	d916      	bls.n	800d1ce <_malloc_r+0xba>
 800d1a0:	1961      	adds	r1, r4, r5
 800d1a2:	42a3      	cmp	r3, r4
 800d1a4:	6025      	str	r5, [r4, #0]
 800d1a6:	bf18      	it	ne
 800d1a8:	6059      	strne	r1, [r3, #4]
 800d1aa:	6863      	ldr	r3, [r4, #4]
 800d1ac:	bf08      	it	eq
 800d1ae:	6031      	streq	r1, [r6, #0]
 800d1b0:	5162      	str	r2, [r4, r5]
 800d1b2:	604b      	str	r3, [r1, #4]
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	f104 060b 	add.w	r6, r4, #11
 800d1ba:	f000 f9ed 	bl	800d598 <__malloc_unlock>
 800d1be:	f026 0607 	bic.w	r6, r6, #7
 800d1c2:	1d23      	adds	r3, r4, #4
 800d1c4:	1af2      	subs	r2, r6, r3
 800d1c6:	d0b6      	beq.n	800d136 <_malloc_r+0x22>
 800d1c8:	1b9b      	subs	r3, r3, r6
 800d1ca:	50a3      	str	r3, [r4, r2]
 800d1cc:	e7b3      	b.n	800d136 <_malloc_r+0x22>
 800d1ce:	6862      	ldr	r2, [r4, #4]
 800d1d0:	42a3      	cmp	r3, r4
 800d1d2:	bf0c      	ite	eq
 800d1d4:	6032      	streq	r2, [r6, #0]
 800d1d6:	605a      	strne	r2, [r3, #4]
 800d1d8:	e7ec      	b.n	800d1b4 <_malloc_r+0xa0>
 800d1da:	4623      	mov	r3, r4
 800d1dc:	6864      	ldr	r4, [r4, #4]
 800d1de:	e7b2      	b.n	800d146 <_malloc_r+0x32>
 800d1e0:	4634      	mov	r4, r6
 800d1e2:	6876      	ldr	r6, [r6, #4]
 800d1e4:	e7b9      	b.n	800d15a <_malloc_r+0x46>
 800d1e6:	230c      	movs	r3, #12
 800d1e8:	603b      	str	r3, [r7, #0]
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	f000 f9d4 	bl	800d598 <__malloc_unlock>
 800d1f0:	e7a1      	b.n	800d136 <_malloc_r+0x22>
 800d1f2:	6025      	str	r5, [r4, #0]
 800d1f4:	e7de      	b.n	800d1b4 <_malloc_r+0xa0>
 800d1f6:	bf00      	nop
 800d1f8:	20000b7c 	.word	0x20000b7c

0800d1fc <__ssputs_r>:
 800d1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d200:	688e      	ldr	r6, [r1, #8]
 800d202:	429e      	cmp	r6, r3
 800d204:	4682      	mov	sl, r0
 800d206:	460c      	mov	r4, r1
 800d208:	4690      	mov	r8, r2
 800d20a:	461f      	mov	r7, r3
 800d20c:	d838      	bhi.n	800d280 <__ssputs_r+0x84>
 800d20e:	898a      	ldrh	r2, [r1, #12]
 800d210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d214:	d032      	beq.n	800d27c <__ssputs_r+0x80>
 800d216:	6825      	ldr	r5, [r4, #0]
 800d218:	6909      	ldr	r1, [r1, #16]
 800d21a:	eba5 0901 	sub.w	r9, r5, r1
 800d21e:	6965      	ldr	r5, [r4, #20]
 800d220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d228:	3301      	adds	r3, #1
 800d22a:	444b      	add	r3, r9
 800d22c:	106d      	asrs	r5, r5, #1
 800d22e:	429d      	cmp	r5, r3
 800d230:	bf38      	it	cc
 800d232:	461d      	movcc	r5, r3
 800d234:	0553      	lsls	r3, r2, #21
 800d236:	d531      	bpl.n	800d29c <__ssputs_r+0xa0>
 800d238:	4629      	mov	r1, r5
 800d23a:	f7ff ff6b 	bl	800d114 <_malloc_r>
 800d23e:	4606      	mov	r6, r0
 800d240:	b950      	cbnz	r0, 800d258 <__ssputs_r+0x5c>
 800d242:	230c      	movs	r3, #12
 800d244:	f8ca 3000 	str.w	r3, [sl]
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	6921      	ldr	r1, [r4, #16]
 800d25a:	464a      	mov	r2, r9
 800d25c:	f7ff fb46 	bl	800c8ec <memcpy>
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d26a:	81a3      	strh	r3, [r4, #12]
 800d26c:	6126      	str	r6, [r4, #16]
 800d26e:	6165      	str	r5, [r4, #20]
 800d270:	444e      	add	r6, r9
 800d272:	eba5 0509 	sub.w	r5, r5, r9
 800d276:	6026      	str	r6, [r4, #0]
 800d278:	60a5      	str	r5, [r4, #8]
 800d27a:	463e      	mov	r6, r7
 800d27c:	42be      	cmp	r6, r7
 800d27e:	d900      	bls.n	800d282 <__ssputs_r+0x86>
 800d280:	463e      	mov	r6, r7
 800d282:	6820      	ldr	r0, [r4, #0]
 800d284:	4632      	mov	r2, r6
 800d286:	4641      	mov	r1, r8
 800d288:	f000 f966 	bl	800d558 <memmove>
 800d28c:	68a3      	ldr	r3, [r4, #8]
 800d28e:	1b9b      	subs	r3, r3, r6
 800d290:	60a3      	str	r3, [r4, #8]
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	4433      	add	r3, r6
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	2000      	movs	r0, #0
 800d29a:	e7db      	b.n	800d254 <__ssputs_r+0x58>
 800d29c:	462a      	mov	r2, r5
 800d29e:	f000 f981 	bl	800d5a4 <_realloc_r>
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d1e1      	bne.n	800d26c <__ssputs_r+0x70>
 800d2a8:	6921      	ldr	r1, [r4, #16]
 800d2aa:	4650      	mov	r0, sl
 800d2ac:	f7ff fec6 	bl	800d03c <_free_r>
 800d2b0:	e7c7      	b.n	800d242 <__ssputs_r+0x46>
	...

0800d2b4 <_svfiprintf_r>:
 800d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b8:	4698      	mov	r8, r3
 800d2ba:	898b      	ldrh	r3, [r1, #12]
 800d2bc:	061b      	lsls	r3, r3, #24
 800d2be:	b09d      	sub	sp, #116	; 0x74
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	460d      	mov	r5, r1
 800d2c4:	4614      	mov	r4, r2
 800d2c6:	d50e      	bpl.n	800d2e6 <_svfiprintf_r+0x32>
 800d2c8:	690b      	ldr	r3, [r1, #16]
 800d2ca:	b963      	cbnz	r3, 800d2e6 <_svfiprintf_r+0x32>
 800d2cc:	2140      	movs	r1, #64	; 0x40
 800d2ce:	f7ff ff21 	bl	800d114 <_malloc_r>
 800d2d2:	6028      	str	r0, [r5, #0]
 800d2d4:	6128      	str	r0, [r5, #16]
 800d2d6:	b920      	cbnz	r0, 800d2e2 <_svfiprintf_r+0x2e>
 800d2d8:	230c      	movs	r3, #12
 800d2da:	603b      	str	r3, [r7, #0]
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	e0d1      	b.n	800d486 <_svfiprintf_r+0x1d2>
 800d2e2:	2340      	movs	r3, #64	; 0x40
 800d2e4:	616b      	str	r3, [r5, #20]
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ea:	2320      	movs	r3, #32
 800d2ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2f4:	2330      	movs	r3, #48	; 0x30
 800d2f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4a0 <_svfiprintf_r+0x1ec>
 800d2fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2fe:	f04f 0901 	mov.w	r9, #1
 800d302:	4623      	mov	r3, r4
 800d304:	469a      	mov	sl, r3
 800d306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d30a:	b10a      	cbz	r2, 800d310 <_svfiprintf_r+0x5c>
 800d30c:	2a25      	cmp	r2, #37	; 0x25
 800d30e:	d1f9      	bne.n	800d304 <_svfiprintf_r+0x50>
 800d310:	ebba 0b04 	subs.w	fp, sl, r4
 800d314:	d00b      	beq.n	800d32e <_svfiprintf_r+0x7a>
 800d316:	465b      	mov	r3, fp
 800d318:	4622      	mov	r2, r4
 800d31a:	4629      	mov	r1, r5
 800d31c:	4638      	mov	r0, r7
 800d31e:	f7ff ff6d 	bl	800d1fc <__ssputs_r>
 800d322:	3001      	adds	r0, #1
 800d324:	f000 80aa 	beq.w	800d47c <_svfiprintf_r+0x1c8>
 800d328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d32a:	445a      	add	r2, fp
 800d32c:	9209      	str	r2, [sp, #36]	; 0x24
 800d32e:	f89a 3000 	ldrb.w	r3, [sl]
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 80a2 	beq.w	800d47c <_svfiprintf_r+0x1c8>
 800d338:	2300      	movs	r3, #0
 800d33a:	f04f 32ff 	mov.w	r2, #4294967295
 800d33e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d342:	f10a 0a01 	add.w	sl, sl, #1
 800d346:	9304      	str	r3, [sp, #16]
 800d348:	9307      	str	r3, [sp, #28]
 800d34a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d34e:	931a      	str	r3, [sp, #104]	; 0x68
 800d350:	4654      	mov	r4, sl
 800d352:	2205      	movs	r2, #5
 800d354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d358:	4851      	ldr	r0, [pc, #324]	; (800d4a0 <_svfiprintf_r+0x1ec>)
 800d35a:	f7f2 ff61 	bl	8000220 <memchr>
 800d35e:	9a04      	ldr	r2, [sp, #16]
 800d360:	b9d8      	cbnz	r0, 800d39a <_svfiprintf_r+0xe6>
 800d362:	06d0      	lsls	r0, r2, #27
 800d364:	bf44      	itt	mi
 800d366:	2320      	movmi	r3, #32
 800d368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d36c:	0711      	lsls	r1, r2, #28
 800d36e:	bf44      	itt	mi
 800d370:	232b      	movmi	r3, #43	; 0x2b
 800d372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d376:	f89a 3000 	ldrb.w	r3, [sl]
 800d37a:	2b2a      	cmp	r3, #42	; 0x2a
 800d37c:	d015      	beq.n	800d3aa <_svfiprintf_r+0xf6>
 800d37e:	9a07      	ldr	r2, [sp, #28]
 800d380:	4654      	mov	r4, sl
 800d382:	2000      	movs	r0, #0
 800d384:	f04f 0c0a 	mov.w	ip, #10
 800d388:	4621      	mov	r1, r4
 800d38a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d38e:	3b30      	subs	r3, #48	; 0x30
 800d390:	2b09      	cmp	r3, #9
 800d392:	d94e      	bls.n	800d432 <_svfiprintf_r+0x17e>
 800d394:	b1b0      	cbz	r0, 800d3c4 <_svfiprintf_r+0x110>
 800d396:	9207      	str	r2, [sp, #28]
 800d398:	e014      	b.n	800d3c4 <_svfiprintf_r+0x110>
 800d39a:	eba0 0308 	sub.w	r3, r0, r8
 800d39e:	fa09 f303 	lsl.w	r3, r9, r3
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	9304      	str	r3, [sp, #16]
 800d3a6:	46a2      	mov	sl, r4
 800d3a8:	e7d2      	b.n	800d350 <_svfiprintf_r+0x9c>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	1d19      	adds	r1, r3, #4
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	9103      	str	r1, [sp, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	bfbb      	ittet	lt
 800d3b6:	425b      	neglt	r3, r3
 800d3b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d3bc:	9307      	strge	r3, [sp, #28]
 800d3be:	9307      	strlt	r3, [sp, #28]
 800d3c0:	bfb8      	it	lt
 800d3c2:	9204      	strlt	r2, [sp, #16]
 800d3c4:	7823      	ldrb	r3, [r4, #0]
 800d3c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d3c8:	d10c      	bne.n	800d3e4 <_svfiprintf_r+0x130>
 800d3ca:	7863      	ldrb	r3, [r4, #1]
 800d3cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ce:	d135      	bne.n	800d43c <_svfiprintf_r+0x188>
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	1d1a      	adds	r2, r3, #4
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	9203      	str	r2, [sp, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	bfb8      	it	lt
 800d3dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3e0:	3402      	adds	r4, #2
 800d3e2:	9305      	str	r3, [sp, #20]
 800d3e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4b0 <_svfiprintf_r+0x1fc>
 800d3e8:	7821      	ldrb	r1, [r4, #0]
 800d3ea:	2203      	movs	r2, #3
 800d3ec:	4650      	mov	r0, sl
 800d3ee:	f7f2 ff17 	bl	8000220 <memchr>
 800d3f2:	b140      	cbz	r0, 800d406 <_svfiprintf_r+0x152>
 800d3f4:	2340      	movs	r3, #64	; 0x40
 800d3f6:	eba0 000a 	sub.w	r0, r0, sl
 800d3fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d3fe:	9b04      	ldr	r3, [sp, #16]
 800d400:	4303      	orrs	r3, r0
 800d402:	3401      	adds	r4, #1
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d40a:	4826      	ldr	r0, [pc, #152]	; (800d4a4 <_svfiprintf_r+0x1f0>)
 800d40c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d410:	2206      	movs	r2, #6
 800d412:	f7f2 ff05 	bl	8000220 <memchr>
 800d416:	2800      	cmp	r0, #0
 800d418:	d038      	beq.n	800d48c <_svfiprintf_r+0x1d8>
 800d41a:	4b23      	ldr	r3, [pc, #140]	; (800d4a8 <_svfiprintf_r+0x1f4>)
 800d41c:	bb1b      	cbnz	r3, 800d466 <_svfiprintf_r+0x1b2>
 800d41e:	9b03      	ldr	r3, [sp, #12]
 800d420:	3307      	adds	r3, #7
 800d422:	f023 0307 	bic.w	r3, r3, #7
 800d426:	3308      	adds	r3, #8
 800d428:	9303      	str	r3, [sp, #12]
 800d42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d42c:	4433      	add	r3, r6
 800d42e:	9309      	str	r3, [sp, #36]	; 0x24
 800d430:	e767      	b.n	800d302 <_svfiprintf_r+0x4e>
 800d432:	fb0c 3202 	mla	r2, ip, r2, r3
 800d436:	460c      	mov	r4, r1
 800d438:	2001      	movs	r0, #1
 800d43a:	e7a5      	b.n	800d388 <_svfiprintf_r+0xd4>
 800d43c:	2300      	movs	r3, #0
 800d43e:	3401      	adds	r4, #1
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	4619      	mov	r1, r3
 800d444:	f04f 0c0a 	mov.w	ip, #10
 800d448:	4620      	mov	r0, r4
 800d44a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d44e:	3a30      	subs	r2, #48	; 0x30
 800d450:	2a09      	cmp	r2, #9
 800d452:	d903      	bls.n	800d45c <_svfiprintf_r+0x1a8>
 800d454:	2b00      	cmp	r3, #0
 800d456:	d0c5      	beq.n	800d3e4 <_svfiprintf_r+0x130>
 800d458:	9105      	str	r1, [sp, #20]
 800d45a:	e7c3      	b.n	800d3e4 <_svfiprintf_r+0x130>
 800d45c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d460:	4604      	mov	r4, r0
 800d462:	2301      	movs	r3, #1
 800d464:	e7f0      	b.n	800d448 <_svfiprintf_r+0x194>
 800d466:	ab03      	add	r3, sp, #12
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	462a      	mov	r2, r5
 800d46c:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <_svfiprintf_r+0x1f8>)
 800d46e:	a904      	add	r1, sp, #16
 800d470:	4638      	mov	r0, r7
 800d472:	f7fd ffcb 	bl	800b40c <_printf_float>
 800d476:	1c42      	adds	r2, r0, #1
 800d478:	4606      	mov	r6, r0
 800d47a:	d1d6      	bne.n	800d42a <_svfiprintf_r+0x176>
 800d47c:	89ab      	ldrh	r3, [r5, #12]
 800d47e:	065b      	lsls	r3, r3, #25
 800d480:	f53f af2c 	bmi.w	800d2dc <_svfiprintf_r+0x28>
 800d484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d486:	b01d      	add	sp, #116	; 0x74
 800d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	ab03      	add	r3, sp, #12
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	462a      	mov	r2, r5
 800d492:	4b06      	ldr	r3, [pc, #24]	; (800d4ac <_svfiprintf_r+0x1f8>)
 800d494:	a904      	add	r1, sp, #16
 800d496:	4638      	mov	r0, r7
 800d498:	f7fe fa5c 	bl	800b954 <_printf_i>
 800d49c:	e7eb      	b.n	800d476 <_svfiprintf_r+0x1c2>
 800d49e:	bf00      	nop
 800d4a0:	0800f8c4 	.word	0x0800f8c4
 800d4a4:	0800f8ce 	.word	0x0800f8ce
 800d4a8:	0800b40d 	.word	0x0800b40d
 800d4ac:	0800d1fd 	.word	0x0800d1fd
 800d4b0:	0800f8ca 	.word	0x0800f8ca

0800d4b4 <_sbrk_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	4d06      	ldr	r5, [pc, #24]	; (800d4d0 <_sbrk_r+0x1c>)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	f7f8 f934 	bl	800572c <_sbrk>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d102      	bne.n	800d4ce <_sbrk_r+0x1a>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	b103      	cbz	r3, 800d4ce <_sbrk_r+0x1a>
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	20000b84 	.word	0x20000b84

0800d4d4 <__assert_func>:
 800d4d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4d6:	4614      	mov	r4, r2
 800d4d8:	461a      	mov	r2, r3
 800d4da:	4b09      	ldr	r3, [pc, #36]	; (800d500 <__assert_func+0x2c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4605      	mov	r5, r0
 800d4e0:	68d8      	ldr	r0, [r3, #12]
 800d4e2:	b14c      	cbz	r4, 800d4f8 <__assert_func+0x24>
 800d4e4:	4b07      	ldr	r3, [pc, #28]	; (800d504 <__assert_func+0x30>)
 800d4e6:	9100      	str	r1, [sp, #0]
 800d4e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4ec:	4906      	ldr	r1, [pc, #24]	; (800d508 <__assert_func+0x34>)
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	f000 f80e 	bl	800d510 <fiprintf>
 800d4f4:	f000 faac 	bl	800da50 <abort>
 800d4f8:	4b04      	ldr	r3, [pc, #16]	; (800d50c <__assert_func+0x38>)
 800d4fa:	461c      	mov	r4, r3
 800d4fc:	e7f3      	b.n	800d4e6 <__assert_func+0x12>
 800d4fe:	bf00      	nop
 800d500:	20000098 	.word	0x20000098
 800d504:	0800f8d5 	.word	0x0800f8d5
 800d508:	0800f8e2 	.word	0x0800f8e2
 800d50c:	0800f910 	.word	0x0800f910

0800d510 <fiprintf>:
 800d510:	b40e      	push	{r1, r2, r3}
 800d512:	b503      	push	{r0, r1, lr}
 800d514:	4601      	mov	r1, r0
 800d516:	ab03      	add	r3, sp, #12
 800d518:	4805      	ldr	r0, [pc, #20]	; (800d530 <fiprintf+0x20>)
 800d51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d51e:	6800      	ldr	r0, [r0, #0]
 800d520:	9301      	str	r3, [sp, #4]
 800d522:	f000 f897 	bl	800d654 <_vfiprintf_r>
 800d526:	b002      	add	sp, #8
 800d528:	f85d eb04 	ldr.w	lr, [sp], #4
 800d52c:	b003      	add	sp, #12
 800d52e:	4770      	bx	lr
 800d530:	20000098 	.word	0x20000098

0800d534 <__ascii_mbtowc>:
 800d534:	b082      	sub	sp, #8
 800d536:	b901      	cbnz	r1, 800d53a <__ascii_mbtowc+0x6>
 800d538:	a901      	add	r1, sp, #4
 800d53a:	b142      	cbz	r2, 800d54e <__ascii_mbtowc+0x1a>
 800d53c:	b14b      	cbz	r3, 800d552 <__ascii_mbtowc+0x1e>
 800d53e:	7813      	ldrb	r3, [r2, #0]
 800d540:	600b      	str	r3, [r1, #0]
 800d542:	7812      	ldrb	r2, [r2, #0]
 800d544:	1e10      	subs	r0, r2, #0
 800d546:	bf18      	it	ne
 800d548:	2001      	movne	r0, #1
 800d54a:	b002      	add	sp, #8
 800d54c:	4770      	bx	lr
 800d54e:	4610      	mov	r0, r2
 800d550:	e7fb      	b.n	800d54a <__ascii_mbtowc+0x16>
 800d552:	f06f 0001 	mvn.w	r0, #1
 800d556:	e7f8      	b.n	800d54a <__ascii_mbtowc+0x16>

0800d558 <memmove>:
 800d558:	4288      	cmp	r0, r1
 800d55a:	b510      	push	{r4, lr}
 800d55c:	eb01 0402 	add.w	r4, r1, r2
 800d560:	d902      	bls.n	800d568 <memmove+0x10>
 800d562:	4284      	cmp	r4, r0
 800d564:	4623      	mov	r3, r4
 800d566:	d807      	bhi.n	800d578 <memmove+0x20>
 800d568:	1e43      	subs	r3, r0, #1
 800d56a:	42a1      	cmp	r1, r4
 800d56c:	d008      	beq.n	800d580 <memmove+0x28>
 800d56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d572:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d576:	e7f8      	b.n	800d56a <memmove+0x12>
 800d578:	4402      	add	r2, r0
 800d57a:	4601      	mov	r1, r0
 800d57c:	428a      	cmp	r2, r1
 800d57e:	d100      	bne.n	800d582 <memmove+0x2a>
 800d580:	bd10      	pop	{r4, pc}
 800d582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d58a:	e7f7      	b.n	800d57c <memmove+0x24>

0800d58c <__malloc_lock>:
 800d58c:	4801      	ldr	r0, [pc, #4]	; (800d594 <__malloc_lock+0x8>)
 800d58e:	f000 bc1f 	b.w	800ddd0 <__retarget_lock_acquire_recursive>
 800d592:	bf00      	nop
 800d594:	20000b88 	.word	0x20000b88

0800d598 <__malloc_unlock>:
 800d598:	4801      	ldr	r0, [pc, #4]	; (800d5a0 <__malloc_unlock+0x8>)
 800d59a:	f000 bc1a 	b.w	800ddd2 <__retarget_lock_release_recursive>
 800d59e:	bf00      	nop
 800d5a0:	20000b88 	.word	0x20000b88

0800d5a4 <_realloc_r>:
 800d5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a8:	4680      	mov	r8, r0
 800d5aa:	4614      	mov	r4, r2
 800d5ac:	460e      	mov	r6, r1
 800d5ae:	b921      	cbnz	r1, 800d5ba <_realloc_r+0x16>
 800d5b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	f7ff bdad 	b.w	800d114 <_malloc_r>
 800d5ba:	b92a      	cbnz	r2, 800d5c8 <_realloc_r+0x24>
 800d5bc:	f7ff fd3e 	bl	800d03c <_free_r>
 800d5c0:	4625      	mov	r5, r4
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c8:	f000 fc6a 	bl	800dea0 <_malloc_usable_size_r>
 800d5cc:	4284      	cmp	r4, r0
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	d802      	bhi.n	800d5d8 <_realloc_r+0x34>
 800d5d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5d6:	d812      	bhi.n	800d5fe <_realloc_r+0x5a>
 800d5d8:	4621      	mov	r1, r4
 800d5da:	4640      	mov	r0, r8
 800d5dc:	f7ff fd9a 	bl	800d114 <_malloc_r>
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d0ed      	beq.n	800d5c2 <_realloc_r+0x1e>
 800d5e6:	42bc      	cmp	r4, r7
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	bf28      	it	cs
 800d5ee:	463a      	movcs	r2, r7
 800d5f0:	f7ff f97c 	bl	800c8ec <memcpy>
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	f7ff fd20 	bl	800d03c <_free_r>
 800d5fc:	e7e1      	b.n	800d5c2 <_realloc_r+0x1e>
 800d5fe:	4635      	mov	r5, r6
 800d600:	e7df      	b.n	800d5c2 <_realloc_r+0x1e>

0800d602 <__sfputc_r>:
 800d602:	6893      	ldr	r3, [r2, #8]
 800d604:	3b01      	subs	r3, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	b410      	push	{r4}
 800d60a:	6093      	str	r3, [r2, #8]
 800d60c:	da08      	bge.n	800d620 <__sfputc_r+0x1e>
 800d60e:	6994      	ldr	r4, [r2, #24]
 800d610:	42a3      	cmp	r3, r4
 800d612:	db01      	blt.n	800d618 <__sfputc_r+0x16>
 800d614:	290a      	cmp	r1, #10
 800d616:	d103      	bne.n	800d620 <__sfputc_r+0x1e>
 800d618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d61c:	f000 b94a 	b.w	800d8b4 <__swbuf_r>
 800d620:	6813      	ldr	r3, [r2, #0]
 800d622:	1c58      	adds	r0, r3, #1
 800d624:	6010      	str	r0, [r2, #0]
 800d626:	7019      	strb	r1, [r3, #0]
 800d628:	4608      	mov	r0, r1
 800d62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <__sfputs_r>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	4606      	mov	r6, r0
 800d634:	460f      	mov	r7, r1
 800d636:	4614      	mov	r4, r2
 800d638:	18d5      	adds	r5, r2, r3
 800d63a:	42ac      	cmp	r4, r5
 800d63c:	d101      	bne.n	800d642 <__sfputs_r+0x12>
 800d63e:	2000      	movs	r0, #0
 800d640:	e007      	b.n	800d652 <__sfputs_r+0x22>
 800d642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d646:	463a      	mov	r2, r7
 800d648:	4630      	mov	r0, r6
 800d64a:	f7ff ffda 	bl	800d602 <__sfputc_r>
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	d1f3      	bne.n	800d63a <__sfputs_r+0xa>
 800d652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d654 <_vfiprintf_r>:
 800d654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d658:	460d      	mov	r5, r1
 800d65a:	b09d      	sub	sp, #116	; 0x74
 800d65c:	4614      	mov	r4, r2
 800d65e:	4698      	mov	r8, r3
 800d660:	4606      	mov	r6, r0
 800d662:	b118      	cbz	r0, 800d66c <_vfiprintf_r+0x18>
 800d664:	6983      	ldr	r3, [r0, #24]
 800d666:	b90b      	cbnz	r3, 800d66c <_vfiprintf_r+0x18>
 800d668:	f000 fb14 	bl	800dc94 <__sinit>
 800d66c:	4b89      	ldr	r3, [pc, #548]	; (800d894 <_vfiprintf_r+0x240>)
 800d66e:	429d      	cmp	r5, r3
 800d670:	d11b      	bne.n	800d6aa <_vfiprintf_r+0x56>
 800d672:	6875      	ldr	r5, [r6, #4]
 800d674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d676:	07d9      	lsls	r1, r3, #31
 800d678:	d405      	bmi.n	800d686 <_vfiprintf_r+0x32>
 800d67a:	89ab      	ldrh	r3, [r5, #12]
 800d67c:	059a      	lsls	r2, r3, #22
 800d67e:	d402      	bmi.n	800d686 <_vfiprintf_r+0x32>
 800d680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d682:	f000 fba5 	bl	800ddd0 <__retarget_lock_acquire_recursive>
 800d686:	89ab      	ldrh	r3, [r5, #12]
 800d688:	071b      	lsls	r3, r3, #28
 800d68a:	d501      	bpl.n	800d690 <_vfiprintf_r+0x3c>
 800d68c:	692b      	ldr	r3, [r5, #16]
 800d68e:	b9eb      	cbnz	r3, 800d6cc <_vfiprintf_r+0x78>
 800d690:	4629      	mov	r1, r5
 800d692:	4630      	mov	r0, r6
 800d694:	f000 f96e 	bl	800d974 <__swsetup_r>
 800d698:	b1c0      	cbz	r0, 800d6cc <_vfiprintf_r+0x78>
 800d69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d69c:	07dc      	lsls	r4, r3, #31
 800d69e:	d50e      	bpl.n	800d6be <_vfiprintf_r+0x6a>
 800d6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a4:	b01d      	add	sp, #116	; 0x74
 800d6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6aa:	4b7b      	ldr	r3, [pc, #492]	; (800d898 <_vfiprintf_r+0x244>)
 800d6ac:	429d      	cmp	r5, r3
 800d6ae:	d101      	bne.n	800d6b4 <_vfiprintf_r+0x60>
 800d6b0:	68b5      	ldr	r5, [r6, #8]
 800d6b2:	e7df      	b.n	800d674 <_vfiprintf_r+0x20>
 800d6b4:	4b79      	ldr	r3, [pc, #484]	; (800d89c <_vfiprintf_r+0x248>)
 800d6b6:	429d      	cmp	r5, r3
 800d6b8:	bf08      	it	eq
 800d6ba:	68f5      	ldreq	r5, [r6, #12]
 800d6bc:	e7da      	b.n	800d674 <_vfiprintf_r+0x20>
 800d6be:	89ab      	ldrh	r3, [r5, #12]
 800d6c0:	0598      	lsls	r0, r3, #22
 800d6c2:	d4ed      	bmi.n	800d6a0 <_vfiprintf_r+0x4c>
 800d6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6c6:	f000 fb84 	bl	800ddd2 <__retarget_lock_release_recursive>
 800d6ca:	e7e9      	b.n	800d6a0 <_vfiprintf_r+0x4c>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d0:	2320      	movs	r3, #32
 800d6d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6da:	2330      	movs	r3, #48	; 0x30
 800d6dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8a0 <_vfiprintf_r+0x24c>
 800d6e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6e4:	f04f 0901 	mov.w	r9, #1
 800d6e8:	4623      	mov	r3, r4
 800d6ea:	469a      	mov	sl, r3
 800d6ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f0:	b10a      	cbz	r2, 800d6f6 <_vfiprintf_r+0xa2>
 800d6f2:	2a25      	cmp	r2, #37	; 0x25
 800d6f4:	d1f9      	bne.n	800d6ea <_vfiprintf_r+0x96>
 800d6f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6fa:	d00b      	beq.n	800d714 <_vfiprintf_r+0xc0>
 800d6fc:	465b      	mov	r3, fp
 800d6fe:	4622      	mov	r2, r4
 800d700:	4629      	mov	r1, r5
 800d702:	4630      	mov	r0, r6
 800d704:	f7ff ff94 	bl	800d630 <__sfputs_r>
 800d708:	3001      	adds	r0, #1
 800d70a:	f000 80aa 	beq.w	800d862 <_vfiprintf_r+0x20e>
 800d70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d710:	445a      	add	r2, fp
 800d712:	9209      	str	r2, [sp, #36]	; 0x24
 800d714:	f89a 3000 	ldrb.w	r3, [sl]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 80a2 	beq.w	800d862 <_vfiprintf_r+0x20e>
 800d71e:	2300      	movs	r3, #0
 800d720:	f04f 32ff 	mov.w	r2, #4294967295
 800d724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d728:	f10a 0a01 	add.w	sl, sl, #1
 800d72c:	9304      	str	r3, [sp, #16]
 800d72e:	9307      	str	r3, [sp, #28]
 800d730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d734:	931a      	str	r3, [sp, #104]	; 0x68
 800d736:	4654      	mov	r4, sl
 800d738:	2205      	movs	r2, #5
 800d73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73e:	4858      	ldr	r0, [pc, #352]	; (800d8a0 <_vfiprintf_r+0x24c>)
 800d740:	f7f2 fd6e 	bl	8000220 <memchr>
 800d744:	9a04      	ldr	r2, [sp, #16]
 800d746:	b9d8      	cbnz	r0, 800d780 <_vfiprintf_r+0x12c>
 800d748:	06d1      	lsls	r1, r2, #27
 800d74a:	bf44      	itt	mi
 800d74c:	2320      	movmi	r3, #32
 800d74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d752:	0713      	lsls	r3, r2, #28
 800d754:	bf44      	itt	mi
 800d756:	232b      	movmi	r3, #43	; 0x2b
 800d758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d75c:	f89a 3000 	ldrb.w	r3, [sl]
 800d760:	2b2a      	cmp	r3, #42	; 0x2a
 800d762:	d015      	beq.n	800d790 <_vfiprintf_r+0x13c>
 800d764:	9a07      	ldr	r2, [sp, #28]
 800d766:	4654      	mov	r4, sl
 800d768:	2000      	movs	r0, #0
 800d76a:	f04f 0c0a 	mov.w	ip, #10
 800d76e:	4621      	mov	r1, r4
 800d770:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d774:	3b30      	subs	r3, #48	; 0x30
 800d776:	2b09      	cmp	r3, #9
 800d778:	d94e      	bls.n	800d818 <_vfiprintf_r+0x1c4>
 800d77a:	b1b0      	cbz	r0, 800d7aa <_vfiprintf_r+0x156>
 800d77c:	9207      	str	r2, [sp, #28]
 800d77e:	e014      	b.n	800d7aa <_vfiprintf_r+0x156>
 800d780:	eba0 0308 	sub.w	r3, r0, r8
 800d784:	fa09 f303 	lsl.w	r3, r9, r3
 800d788:	4313      	orrs	r3, r2
 800d78a:	9304      	str	r3, [sp, #16]
 800d78c:	46a2      	mov	sl, r4
 800d78e:	e7d2      	b.n	800d736 <_vfiprintf_r+0xe2>
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	1d19      	adds	r1, r3, #4
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	9103      	str	r1, [sp, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bfbb      	ittet	lt
 800d79c:	425b      	neglt	r3, r3
 800d79e:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a2:	9307      	strge	r3, [sp, #28]
 800d7a4:	9307      	strlt	r3, [sp, #28]
 800d7a6:	bfb8      	it	lt
 800d7a8:	9204      	strlt	r2, [sp, #16]
 800d7aa:	7823      	ldrb	r3, [r4, #0]
 800d7ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d7ae:	d10c      	bne.n	800d7ca <_vfiprintf_r+0x176>
 800d7b0:	7863      	ldrb	r3, [r4, #1]
 800d7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b4:	d135      	bne.n	800d822 <_vfiprintf_r+0x1ce>
 800d7b6:	9b03      	ldr	r3, [sp, #12]
 800d7b8:	1d1a      	adds	r2, r3, #4
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	9203      	str	r2, [sp, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	bfb8      	it	lt
 800d7c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7c6:	3402      	adds	r4, #2
 800d7c8:	9305      	str	r3, [sp, #20]
 800d7ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8b0 <_vfiprintf_r+0x25c>
 800d7ce:	7821      	ldrb	r1, [r4, #0]
 800d7d0:	2203      	movs	r2, #3
 800d7d2:	4650      	mov	r0, sl
 800d7d4:	f7f2 fd24 	bl	8000220 <memchr>
 800d7d8:	b140      	cbz	r0, 800d7ec <_vfiprintf_r+0x198>
 800d7da:	2340      	movs	r3, #64	; 0x40
 800d7dc:	eba0 000a 	sub.w	r0, r0, sl
 800d7e0:	fa03 f000 	lsl.w	r0, r3, r0
 800d7e4:	9b04      	ldr	r3, [sp, #16]
 800d7e6:	4303      	orrs	r3, r0
 800d7e8:	3401      	adds	r4, #1
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f0:	482c      	ldr	r0, [pc, #176]	; (800d8a4 <_vfiprintf_r+0x250>)
 800d7f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7f6:	2206      	movs	r2, #6
 800d7f8:	f7f2 fd12 	bl	8000220 <memchr>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d03f      	beq.n	800d880 <_vfiprintf_r+0x22c>
 800d800:	4b29      	ldr	r3, [pc, #164]	; (800d8a8 <_vfiprintf_r+0x254>)
 800d802:	bb1b      	cbnz	r3, 800d84c <_vfiprintf_r+0x1f8>
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	3307      	adds	r3, #7
 800d808:	f023 0307 	bic.w	r3, r3, #7
 800d80c:	3308      	adds	r3, #8
 800d80e:	9303      	str	r3, [sp, #12]
 800d810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d812:	443b      	add	r3, r7
 800d814:	9309      	str	r3, [sp, #36]	; 0x24
 800d816:	e767      	b.n	800d6e8 <_vfiprintf_r+0x94>
 800d818:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81c:	460c      	mov	r4, r1
 800d81e:	2001      	movs	r0, #1
 800d820:	e7a5      	b.n	800d76e <_vfiprintf_r+0x11a>
 800d822:	2300      	movs	r3, #0
 800d824:	3401      	adds	r4, #1
 800d826:	9305      	str	r3, [sp, #20]
 800d828:	4619      	mov	r1, r3
 800d82a:	f04f 0c0a 	mov.w	ip, #10
 800d82e:	4620      	mov	r0, r4
 800d830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d834:	3a30      	subs	r2, #48	; 0x30
 800d836:	2a09      	cmp	r2, #9
 800d838:	d903      	bls.n	800d842 <_vfiprintf_r+0x1ee>
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d0c5      	beq.n	800d7ca <_vfiprintf_r+0x176>
 800d83e:	9105      	str	r1, [sp, #20]
 800d840:	e7c3      	b.n	800d7ca <_vfiprintf_r+0x176>
 800d842:	fb0c 2101 	mla	r1, ip, r1, r2
 800d846:	4604      	mov	r4, r0
 800d848:	2301      	movs	r3, #1
 800d84a:	e7f0      	b.n	800d82e <_vfiprintf_r+0x1da>
 800d84c:	ab03      	add	r3, sp, #12
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	462a      	mov	r2, r5
 800d852:	4b16      	ldr	r3, [pc, #88]	; (800d8ac <_vfiprintf_r+0x258>)
 800d854:	a904      	add	r1, sp, #16
 800d856:	4630      	mov	r0, r6
 800d858:	f7fd fdd8 	bl	800b40c <_printf_float>
 800d85c:	4607      	mov	r7, r0
 800d85e:	1c78      	adds	r0, r7, #1
 800d860:	d1d6      	bne.n	800d810 <_vfiprintf_r+0x1bc>
 800d862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d864:	07d9      	lsls	r1, r3, #31
 800d866:	d405      	bmi.n	800d874 <_vfiprintf_r+0x220>
 800d868:	89ab      	ldrh	r3, [r5, #12]
 800d86a:	059a      	lsls	r2, r3, #22
 800d86c:	d402      	bmi.n	800d874 <_vfiprintf_r+0x220>
 800d86e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d870:	f000 faaf 	bl	800ddd2 <__retarget_lock_release_recursive>
 800d874:	89ab      	ldrh	r3, [r5, #12]
 800d876:	065b      	lsls	r3, r3, #25
 800d878:	f53f af12 	bmi.w	800d6a0 <_vfiprintf_r+0x4c>
 800d87c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d87e:	e711      	b.n	800d6a4 <_vfiprintf_r+0x50>
 800d880:	ab03      	add	r3, sp, #12
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	462a      	mov	r2, r5
 800d886:	4b09      	ldr	r3, [pc, #36]	; (800d8ac <_vfiprintf_r+0x258>)
 800d888:	a904      	add	r1, sp, #16
 800d88a:	4630      	mov	r0, r6
 800d88c:	f7fe f862 	bl	800b954 <_printf_i>
 800d890:	e7e4      	b.n	800d85c <_vfiprintf_r+0x208>
 800d892:	bf00      	nop
 800d894:	0800fa3c 	.word	0x0800fa3c
 800d898:	0800fa5c 	.word	0x0800fa5c
 800d89c:	0800fa1c 	.word	0x0800fa1c
 800d8a0:	0800f8c4 	.word	0x0800f8c4
 800d8a4:	0800f8ce 	.word	0x0800f8ce
 800d8a8:	0800b40d 	.word	0x0800b40d
 800d8ac:	0800d631 	.word	0x0800d631
 800d8b0:	0800f8ca 	.word	0x0800f8ca

0800d8b4 <__swbuf_r>:
 800d8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b6:	460e      	mov	r6, r1
 800d8b8:	4614      	mov	r4, r2
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	b118      	cbz	r0, 800d8c6 <__swbuf_r+0x12>
 800d8be:	6983      	ldr	r3, [r0, #24]
 800d8c0:	b90b      	cbnz	r3, 800d8c6 <__swbuf_r+0x12>
 800d8c2:	f000 f9e7 	bl	800dc94 <__sinit>
 800d8c6:	4b21      	ldr	r3, [pc, #132]	; (800d94c <__swbuf_r+0x98>)
 800d8c8:	429c      	cmp	r4, r3
 800d8ca:	d12b      	bne.n	800d924 <__swbuf_r+0x70>
 800d8cc:	686c      	ldr	r4, [r5, #4]
 800d8ce:	69a3      	ldr	r3, [r4, #24]
 800d8d0:	60a3      	str	r3, [r4, #8]
 800d8d2:	89a3      	ldrh	r3, [r4, #12]
 800d8d4:	071a      	lsls	r2, r3, #28
 800d8d6:	d52f      	bpl.n	800d938 <__swbuf_r+0x84>
 800d8d8:	6923      	ldr	r3, [r4, #16]
 800d8da:	b36b      	cbz	r3, 800d938 <__swbuf_r+0x84>
 800d8dc:	6923      	ldr	r3, [r4, #16]
 800d8de:	6820      	ldr	r0, [r4, #0]
 800d8e0:	1ac0      	subs	r0, r0, r3
 800d8e2:	6963      	ldr	r3, [r4, #20]
 800d8e4:	b2f6      	uxtb	r6, r6
 800d8e6:	4283      	cmp	r3, r0
 800d8e8:	4637      	mov	r7, r6
 800d8ea:	dc04      	bgt.n	800d8f6 <__swbuf_r+0x42>
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f000 f93c 	bl	800db6c <_fflush_r>
 800d8f4:	bb30      	cbnz	r0, 800d944 <__swbuf_r+0x90>
 800d8f6:	68a3      	ldr	r3, [r4, #8]
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	60a3      	str	r3, [r4, #8]
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	1c5a      	adds	r2, r3, #1
 800d900:	6022      	str	r2, [r4, #0]
 800d902:	701e      	strb	r6, [r3, #0]
 800d904:	6963      	ldr	r3, [r4, #20]
 800d906:	3001      	adds	r0, #1
 800d908:	4283      	cmp	r3, r0
 800d90a:	d004      	beq.n	800d916 <__swbuf_r+0x62>
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	07db      	lsls	r3, r3, #31
 800d910:	d506      	bpl.n	800d920 <__swbuf_r+0x6c>
 800d912:	2e0a      	cmp	r6, #10
 800d914:	d104      	bne.n	800d920 <__swbuf_r+0x6c>
 800d916:	4621      	mov	r1, r4
 800d918:	4628      	mov	r0, r5
 800d91a:	f000 f927 	bl	800db6c <_fflush_r>
 800d91e:	b988      	cbnz	r0, 800d944 <__swbuf_r+0x90>
 800d920:	4638      	mov	r0, r7
 800d922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d924:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <__swbuf_r+0x9c>)
 800d926:	429c      	cmp	r4, r3
 800d928:	d101      	bne.n	800d92e <__swbuf_r+0x7a>
 800d92a:	68ac      	ldr	r4, [r5, #8]
 800d92c:	e7cf      	b.n	800d8ce <__swbuf_r+0x1a>
 800d92e:	4b09      	ldr	r3, [pc, #36]	; (800d954 <__swbuf_r+0xa0>)
 800d930:	429c      	cmp	r4, r3
 800d932:	bf08      	it	eq
 800d934:	68ec      	ldreq	r4, [r5, #12]
 800d936:	e7ca      	b.n	800d8ce <__swbuf_r+0x1a>
 800d938:	4621      	mov	r1, r4
 800d93a:	4628      	mov	r0, r5
 800d93c:	f000 f81a 	bl	800d974 <__swsetup_r>
 800d940:	2800      	cmp	r0, #0
 800d942:	d0cb      	beq.n	800d8dc <__swbuf_r+0x28>
 800d944:	f04f 37ff 	mov.w	r7, #4294967295
 800d948:	e7ea      	b.n	800d920 <__swbuf_r+0x6c>
 800d94a:	bf00      	nop
 800d94c:	0800fa3c 	.word	0x0800fa3c
 800d950:	0800fa5c 	.word	0x0800fa5c
 800d954:	0800fa1c 	.word	0x0800fa1c

0800d958 <__ascii_wctomb>:
 800d958:	b149      	cbz	r1, 800d96e <__ascii_wctomb+0x16>
 800d95a:	2aff      	cmp	r2, #255	; 0xff
 800d95c:	bf85      	ittet	hi
 800d95e:	238a      	movhi	r3, #138	; 0x8a
 800d960:	6003      	strhi	r3, [r0, #0]
 800d962:	700a      	strbls	r2, [r1, #0]
 800d964:	f04f 30ff 	movhi.w	r0, #4294967295
 800d968:	bf98      	it	ls
 800d96a:	2001      	movls	r0, #1
 800d96c:	4770      	bx	lr
 800d96e:	4608      	mov	r0, r1
 800d970:	4770      	bx	lr
	...

0800d974 <__swsetup_r>:
 800d974:	4b32      	ldr	r3, [pc, #200]	; (800da40 <__swsetup_r+0xcc>)
 800d976:	b570      	push	{r4, r5, r6, lr}
 800d978:	681d      	ldr	r5, [r3, #0]
 800d97a:	4606      	mov	r6, r0
 800d97c:	460c      	mov	r4, r1
 800d97e:	b125      	cbz	r5, 800d98a <__swsetup_r+0x16>
 800d980:	69ab      	ldr	r3, [r5, #24]
 800d982:	b913      	cbnz	r3, 800d98a <__swsetup_r+0x16>
 800d984:	4628      	mov	r0, r5
 800d986:	f000 f985 	bl	800dc94 <__sinit>
 800d98a:	4b2e      	ldr	r3, [pc, #184]	; (800da44 <__swsetup_r+0xd0>)
 800d98c:	429c      	cmp	r4, r3
 800d98e:	d10f      	bne.n	800d9b0 <__swsetup_r+0x3c>
 800d990:	686c      	ldr	r4, [r5, #4]
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d998:	0719      	lsls	r1, r3, #28
 800d99a:	d42c      	bmi.n	800d9f6 <__swsetup_r+0x82>
 800d99c:	06dd      	lsls	r5, r3, #27
 800d99e:	d411      	bmi.n	800d9c4 <__swsetup_r+0x50>
 800d9a0:	2309      	movs	r3, #9
 800d9a2:	6033      	str	r3, [r6, #0]
 800d9a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ae:	e03e      	b.n	800da2e <__swsetup_r+0xba>
 800d9b0:	4b25      	ldr	r3, [pc, #148]	; (800da48 <__swsetup_r+0xd4>)
 800d9b2:	429c      	cmp	r4, r3
 800d9b4:	d101      	bne.n	800d9ba <__swsetup_r+0x46>
 800d9b6:	68ac      	ldr	r4, [r5, #8]
 800d9b8:	e7eb      	b.n	800d992 <__swsetup_r+0x1e>
 800d9ba:	4b24      	ldr	r3, [pc, #144]	; (800da4c <__swsetup_r+0xd8>)
 800d9bc:	429c      	cmp	r4, r3
 800d9be:	bf08      	it	eq
 800d9c0:	68ec      	ldreq	r4, [r5, #12]
 800d9c2:	e7e6      	b.n	800d992 <__swsetup_r+0x1e>
 800d9c4:	0758      	lsls	r0, r3, #29
 800d9c6:	d512      	bpl.n	800d9ee <__swsetup_r+0x7a>
 800d9c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9ca:	b141      	cbz	r1, 800d9de <__swsetup_r+0x6a>
 800d9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9d0:	4299      	cmp	r1, r3
 800d9d2:	d002      	beq.n	800d9da <__swsetup_r+0x66>
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f7ff fb31 	bl	800d03c <_free_r>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	6363      	str	r3, [r4, #52]	; 0x34
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	6063      	str	r3, [r4, #4]
 800d9ea:	6923      	ldr	r3, [r4, #16]
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	f043 0308 	orr.w	r3, r3, #8
 800d9f4:	81a3      	strh	r3, [r4, #12]
 800d9f6:	6923      	ldr	r3, [r4, #16]
 800d9f8:	b94b      	cbnz	r3, 800da0e <__swsetup_r+0x9a>
 800d9fa:	89a3      	ldrh	r3, [r4, #12]
 800d9fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da04:	d003      	beq.n	800da0e <__swsetup_r+0x9a>
 800da06:	4621      	mov	r1, r4
 800da08:	4630      	mov	r0, r6
 800da0a:	f000 fa09 	bl	800de20 <__smakebuf_r>
 800da0e:	89a0      	ldrh	r0, [r4, #12]
 800da10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da14:	f010 0301 	ands.w	r3, r0, #1
 800da18:	d00a      	beq.n	800da30 <__swsetup_r+0xbc>
 800da1a:	2300      	movs	r3, #0
 800da1c:	60a3      	str	r3, [r4, #8]
 800da1e:	6963      	ldr	r3, [r4, #20]
 800da20:	425b      	negs	r3, r3
 800da22:	61a3      	str	r3, [r4, #24]
 800da24:	6923      	ldr	r3, [r4, #16]
 800da26:	b943      	cbnz	r3, 800da3a <__swsetup_r+0xc6>
 800da28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da2c:	d1ba      	bne.n	800d9a4 <__swsetup_r+0x30>
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	0781      	lsls	r1, r0, #30
 800da32:	bf58      	it	pl
 800da34:	6963      	ldrpl	r3, [r4, #20]
 800da36:	60a3      	str	r3, [r4, #8]
 800da38:	e7f4      	b.n	800da24 <__swsetup_r+0xb0>
 800da3a:	2000      	movs	r0, #0
 800da3c:	e7f7      	b.n	800da2e <__swsetup_r+0xba>
 800da3e:	bf00      	nop
 800da40:	20000098 	.word	0x20000098
 800da44:	0800fa3c 	.word	0x0800fa3c
 800da48:	0800fa5c 	.word	0x0800fa5c
 800da4c:	0800fa1c 	.word	0x0800fa1c

0800da50 <abort>:
 800da50:	b508      	push	{r3, lr}
 800da52:	2006      	movs	r0, #6
 800da54:	f000 fa54 	bl	800df00 <raise>
 800da58:	2001      	movs	r0, #1
 800da5a:	f7f7 fdef 	bl	800563c <_exit>
	...

0800da60 <__sflush_r>:
 800da60:	898a      	ldrh	r2, [r1, #12]
 800da62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da66:	4605      	mov	r5, r0
 800da68:	0710      	lsls	r0, r2, #28
 800da6a:	460c      	mov	r4, r1
 800da6c:	d458      	bmi.n	800db20 <__sflush_r+0xc0>
 800da6e:	684b      	ldr	r3, [r1, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	dc05      	bgt.n	800da80 <__sflush_r+0x20>
 800da74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da76:	2b00      	cmp	r3, #0
 800da78:	dc02      	bgt.n	800da80 <__sflush_r+0x20>
 800da7a:	2000      	movs	r0, #0
 800da7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da82:	2e00      	cmp	r6, #0
 800da84:	d0f9      	beq.n	800da7a <__sflush_r+0x1a>
 800da86:	2300      	movs	r3, #0
 800da88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da8c:	682f      	ldr	r7, [r5, #0]
 800da8e:	602b      	str	r3, [r5, #0]
 800da90:	d032      	beq.n	800daf8 <__sflush_r+0x98>
 800da92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	075a      	lsls	r2, r3, #29
 800da98:	d505      	bpl.n	800daa6 <__sflush_r+0x46>
 800da9a:	6863      	ldr	r3, [r4, #4]
 800da9c:	1ac0      	subs	r0, r0, r3
 800da9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800daa0:	b10b      	cbz	r3, 800daa6 <__sflush_r+0x46>
 800daa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800daa4:	1ac0      	subs	r0, r0, r3
 800daa6:	2300      	movs	r3, #0
 800daa8:	4602      	mov	r2, r0
 800daaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800daac:	6a21      	ldr	r1, [r4, #32]
 800daae:	4628      	mov	r0, r5
 800dab0:	47b0      	blx	r6
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	d106      	bne.n	800dac6 <__sflush_r+0x66>
 800dab8:	6829      	ldr	r1, [r5, #0]
 800daba:	291d      	cmp	r1, #29
 800dabc:	d82c      	bhi.n	800db18 <__sflush_r+0xb8>
 800dabe:	4a2a      	ldr	r2, [pc, #168]	; (800db68 <__sflush_r+0x108>)
 800dac0:	40ca      	lsrs	r2, r1
 800dac2:	07d6      	lsls	r6, r2, #31
 800dac4:	d528      	bpl.n	800db18 <__sflush_r+0xb8>
 800dac6:	2200      	movs	r2, #0
 800dac8:	6062      	str	r2, [r4, #4]
 800daca:	04d9      	lsls	r1, r3, #19
 800dacc:	6922      	ldr	r2, [r4, #16]
 800dace:	6022      	str	r2, [r4, #0]
 800dad0:	d504      	bpl.n	800dadc <__sflush_r+0x7c>
 800dad2:	1c42      	adds	r2, r0, #1
 800dad4:	d101      	bne.n	800dada <__sflush_r+0x7a>
 800dad6:	682b      	ldr	r3, [r5, #0]
 800dad8:	b903      	cbnz	r3, 800dadc <__sflush_r+0x7c>
 800dada:	6560      	str	r0, [r4, #84]	; 0x54
 800dadc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dade:	602f      	str	r7, [r5, #0]
 800dae0:	2900      	cmp	r1, #0
 800dae2:	d0ca      	beq.n	800da7a <__sflush_r+0x1a>
 800dae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dae8:	4299      	cmp	r1, r3
 800daea:	d002      	beq.n	800daf2 <__sflush_r+0x92>
 800daec:	4628      	mov	r0, r5
 800daee:	f7ff faa5 	bl	800d03c <_free_r>
 800daf2:	2000      	movs	r0, #0
 800daf4:	6360      	str	r0, [r4, #52]	; 0x34
 800daf6:	e7c1      	b.n	800da7c <__sflush_r+0x1c>
 800daf8:	6a21      	ldr	r1, [r4, #32]
 800dafa:	2301      	movs	r3, #1
 800dafc:	4628      	mov	r0, r5
 800dafe:	47b0      	blx	r6
 800db00:	1c41      	adds	r1, r0, #1
 800db02:	d1c7      	bne.n	800da94 <__sflush_r+0x34>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d0c4      	beq.n	800da94 <__sflush_r+0x34>
 800db0a:	2b1d      	cmp	r3, #29
 800db0c:	d001      	beq.n	800db12 <__sflush_r+0xb2>
 800db0e:	2b16      	cmp	r3, #22
 800db10:	d101      	bne.n	800db16 <__sflush_r+0xb6>
 800db12:	602f      	str	r7, [r5, #0]
 800db14:	e7b1      	b.n	800da7a <__sflush_r+0x1a>
 800db16:	89a3      	ldrh	r3, [r4, #12]
 800db18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db1c:	81a3      	strh	r3, [r4, #12]
 800db1e:	e7ad      	b.n	800da7c <__sflush_r+0x1c>
 800db20:	690f      	ldr	r7, [r1, #16]
 800db22:	2f00      	cmp	r7, #0
 800db24:	d0a9      	beq.n	800da7a <__sflush_r+0x1a>
 800db26:	0793      	lsls	r3, r2, #30
 800db28:	680e      	ldr	r6, [r1, #0]
 800db2a:	bf08      	it	eq
 800db2c:	694b      	ldreq	r3, [r1, #20]
 800db2e:	600f      	str	r7, [r1, #0]
 800db30:	bf18      	it	ne
 800db32:	2300      	movne	r3, #0
 800db34:	eba6 0807 	sub.w	r8, r6, r7
 800db38:	608b      	str	r3, [r1, #8]
 800db3a:	f1b8 0f00 	cmp.w	r8, #0
 800db3e:	dd9c      	ble.n	800da7a <__sflush_r+0x1a>
 800db40:	6a21      	ldr	r1, [r4, #32]
 800db42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db44:	4643      	mov	r3, r8
 800db46:	463a      	mov	r2, r7
 800db48:	4628      	mov	r0, r5
 800db4a:	47b0      	blx	r6
 800db4c:	2800      	cmp	r0, #0
 800db4e:	dc06      	bgt.n	800db5e <__sflush_r+0xfe>
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db56:	81a3      	strh	r3, [r4, #12]
 800db58:	f04f 30ff 	mov.w	r0, #4294967295
 800db5c:	e78e      	b.n	800da7c <__sflush_r+0x1c>
 800db5e:	4407      	add	r7, r0
 800db60:	eba8 0800 	sub.w	r8, r8, r0
 800db64:	e7e9      	b.n	800db3a <__sflush_r+0xda>
 800db66:	bf00      	nop
 800db68:	20400001 	.word	0x20400001

0800db6c <_fflush_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	690b      	ldr	r3, [r1, #16]
 800db70:	4605      	mov	r5, r0
 800db72:	460c      	mov	r4, r1
 800db74:	b913      	cbnz	r3, 800db7c <_fflush_r+0x10>
 800db76:	2500      	movs	r5, #0
 800db78:	4628      	mov	r0, r5
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
 800db7c:	b118      	cbz	r0, 800db86 <_fflush_r+0x1a>
 800db7e:	6983      	ldr	r3, [r0, #24]
 800db80:	b90b      	cbnz	r3, 800db86 <_fflush_r+0x1a>
 800db82:	f000 f887 	bl	800dc94 <__sinit>
 800db86:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <_fflush_r+0x6c>)
 800db88:	429c      	cmp	r4, r3
 800db8a:	d11b      	bne.n	800dbc4 <_fflush_r+0x58>
 800db8c:	686c      	ldr	r4, [r5, #4]
 800db8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0ef      	beq.n	800db76 <_fflush_r+0xa>
 800db96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db98:	07d0      	lsls	r0, r2, #31
 800db9a:	d404      	bmi.n	800dba6 <_fflush_r+0x3a>
 800db9c:	0599      	lsls	r1, r3, #22
 800db9e:	d402      	bmi.n	800dba6 <_fflush_r+0x3a>
 800dba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba2:	f000 f915 	bl	800ddd0 <__retarget_lock_acquire_recursive>
 800dba6:	4628      	mov	r0, r5
 800dba8:	4621      	mov	r1, r4
 800dbaa:	f7ff ff59 	bl	800da60 <__sflush_r>
 800dbae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbb0:	07da      	lsls	r2, r3, #31
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	d4e0      	bmi.n	800db78 <_fflush_r+0xc>
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	059b      	lsls	r3, r3, #22
 800dbba:	d4dd      	bmi.n	800db78 <_fflush_r+0xc>
 800dbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbbe:	f000 f908 	bl	800ddd2 <__retarget_lock_release_recursive>
 800dbc2:	e7d9      	b.n	800db78 <_fflush_r+0xc>
 800dbc4:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <_fflush_r+0x70>)
 800dbc6:	429c      	cmp	r4, r3
 800dbc8:	d101      	bne.n	800dbce <_fflush_r+0x62>
 800dbca:	68ac      	ldr	r4, [r5, #8]
 800dbcc:	e7df      	b.n	800db8e <_fflush_r+0x22>
 800dbce:	4b04      	ldr	r3, [pc, #16]	; (800dbe0 <_fflush_r+0x74>)
 800dbd0:	429c      	cmp	r4, r3
 800dbd2:	bf08      	it	eq
 800dbd4:	68ec      	ldreq	r4, [r5, #12]
 800dbd6:	e7da      	b.n	800db8e <_fflush_r+0x22>
 800dbd8:	0800fa3c 	.word	0x0800fa3c
 800dbdc:	0800fa5c 	.word	0x0800fa5c
 800dbe0:	0800fa1c 	.word	0x0800fa1c

0800dbe4 <std>:
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	b510      	push	{r4, lr}
 800dbe8:	4604      	mov	r4, r0
 800dbea:	e9c0 3300 	strd	r3, r3, [r0]
 800dbee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbf2:	6083      	str	r3, [r0, #8]
 800dbf4:	8181      	strh	r1, [r0, #12]
 800dbf6:	6643      	str	r3, [r0, #100]	; 0x64
 800dbf8:	81c2      	strh	r2, [r0, #14]
 800dbfa:	6183      	str	r3, [r0, #24]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	2208      	movs	r2, #8
 800dc00:	305c      	adds	r0, #92	; 0x5c
 800dc02:	f7fd fb5b 	bl	800b2bc <memset>
 800dc06:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <std+0x38>)
 800dc08:	6263      	str	r3, [r4, #36]	; 0x24
 800dc0a:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <std+0x3c>)
 800dc0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc0e:	4b05      	ldr	r3, [pc, #20]	; (800dc24 <std+0x40>)
 800dc10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc12:	4b05      	ldr	r3, [pc, #20]	; (800dc28 <std+0x44>)
 800dc14:	6224      	str	r4, [r4, #32]
 800dc16:	6323      	str	r3, [r4, #48]	; 0x30
 800dc18:	bd10      	pop	{r4, pc}
 800dc1a:	bf00      	nop
 800dc1c:	0800df39 	.word	0x0800df39
 800dc20:	0800df5b 	.word	0x0800df5b
 800dc24:	0800df93 	.word	0x0800df93
 800dc28:	0800dfb7 	.word	0x0800dfb7

0800dc2c <_cleanup_r>:
 800dc2c:	4901      	ldr	r1, [pc, #4]	; (800dc34 <_cleanup_r+0x8>)
 800dc2e:	f000 b8af 	b.w	800dd90 <_fwalk_reent>
 800dc32:	bf00      	nop
 800dc34:	0800db6d 	.word	0x0800db6d

0800dc38 <__sfmoreglue>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	2268      	movs	r2, #104	; 0x68
 800dc3c:	1e4d      	subs	r5, r1, #1
 800dc3e:	4355      	muls	r5, r2
 800dc40:	460e      	mov	r6, r1
 800dc42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc46:	f7ff fa65 	bl	800d114 <_malloc_r>
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	b140      	cbz	r0, 800dc60 <__sfmoreglue+0x28>
 800dc4e:	2100      	movs	r1, #0
 800dc50:	e9c0 1600 	strd	r1, r6, [r0]
 800dc54:	300c      	adds	r0, #12
 800dc56:	60a0      	str	r0, [r4, #8]
 800dc58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc5c:	f7fd fb2e 	bl	800b2bc <memset>
 800dc60:	4620      	mov	r0, r4
 800dc62:	bd70      	pop	{r4, r5, r6, pc}

0800dc64 <__sfp_lock_acquire>:
 800dc64:	4801      	ldr	r0, [pc, #4]	; (800dc6c <__sfp_lock_acquire+0x8>)
 800dc66:	f000 b8b3 	b.w	800ddd0 <__retarget_lock_acquire_recursive>
 800dc6a:	bf00      	nop
 800dc6c:	20000b89 	.word	0x20000b89

0800dc70 <__sfp_lock_release>:
 800dc70:	4801      	ldr	r0, [pc, #4]	; (800dc78 <__sfp_lock_release+0x8>)
 800dc72:	f000 b8ae 	b.w	800ddd2 <__retarget_lock_release_recursive>
 800dc76:	bf00      	nop
 800dc78:	20000b89 	.word	0x20000b89

0800dc7c <__sinit_lock_acquire>:
 800dc7c:	4801      	ldr	r0, [pc, #4]	; (800dc84 <__sinit_lock_acquire+0x8>)
 800dc7e:	f000 b8a7 	b.w	800ddd0 <__retarget_lock_acquire_recursive>
 800dc82:	bf00      	nop
 800dc84:	20000b8a 	.word	0x20000b8a

0800dc88 <__sinit_lock_release>:
 800dc88:	4801      	ldr	r0, [pc, #4]	; (800dc90 <__sinit_lock_release+0x8>)
 800dc8a:	f000 b8a2 	b.w	800ddd2 <__retarget_lock_release_recursive>
 800dc8e:	bf00      	nop
 800dc90:	20000b8a 	.word	0x20000b8a

0800dc94 <__sinit>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	4604      	mov	r4, r0
 800dc98:	f7ff fff0 	bl	800dc7c <__sinit_lock_acquire>
 800dc9c:	69a3      	ldr	r3, [r4, #24]
 800dc9e:	b11b      	cbz	r3, 800dca8 <__sinit+0x14>
 800dca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dca4:	f7ff bff0 	b.w	800dc88 <__sinit_lock_release>
 800dca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dcac:	6523      	str	r3, [r4, #80]	; 0x50
 800dcae:	4b13      	ldr	r3, [pc, #76]	; (800dcfc <__sinit+0x68>)
 800dcb0:	4a13      	ldr	r2, [pc, #76]	; (800dd00 <__sinit+0x6c>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	bf04      	itt	eq
 800dcba:	2301      	moveq	r3, #1
 800dcbc:	61a3      	streq	r3, [r4, #24]
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 f820 	bl	800dd04 <__sfp>
 800dcc4:	6060      	str	r0, [r4, #4]
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 f81c 	bl	800dd04 <__sfp>
 800dccc:	60a0      	str	r0, [r4, #8]
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f000 f818 	bl	800dd04 <__sfp>
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	60e0      	str	r0, [r4, #12]
 800dcd8:	2104      	movs	r1, #4
 800dcda:	6860      	ldr	r0, [r4, #4]
 800dcdc:	f7ff ff82 	bl	800dbe4 <std>
 800dce0:	68a0      	ldr	r0, [r4, #8]
 800dce2:	2201      	movs	r2, #1
 800dce4:	2109      	movs	r1, #9
 800dce6:	f7ff ff7d 	bl	800dbe4 <std>
 800dcea:	68e0      	ldr	r0, [r4, #12]
 800dcec:	2202      	movs	r2, #2
 800dcee:	2112      	movs	r1, #18
 800dcf0:	f7ff ff78 	bl	800dbe4 <std>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	61a3      	str	r3, [r4, #24]
 800dcf8:	e7d2      	b.n	800dca0 <__sinit+0xc>
 800dcfa:	bf00      	nop
 800dcfc:	0800f6a4 	.word	0x0800f6a4
 800dd00:	0800dc2d 	.word	0x0800dc2d

0800dd04 <__sfp>:
 800dd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd06:	4607      	mov	r7, r0
 800dd08:	f7ff ffac 	bl	800dc64 <__sfp_lock_acquire>
 800dd0c:	4b1e      	ldr	r3, [pc, #120]	; (800dd88 <__sfp+0x84>)
 800dd0e:	681e      	ldr	r6, [r3, #0]
 800dd10:	69b3      	ldr	r3, [r6, #24]
 800dd12:	b913      	cbnz	r3, 800dd1a <__sfp+0x16>
 800dd14:	4630      	mov	r0, r6
 800dd16:	f7ff ffbd 	bl	800dc94 <__sinit>
 800dd1a:	3648      	adds	r6, #72	; 0x48
 800dd1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	d503      	bpl.n	800dd2c <__sfp+0x28>
 800dd24:	6833      	ldr	r3, [r6, #0]
 800dd26:	b30b      	cbz	r3, 800dd6c <__sfp+0x68>
 800dd28:	6836      	ldr	r6, [r6, #0]
 800dd2a:	e7f7      	b.n	800dd1c <__sfp+0x18>
 800dd2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd30:	b9d5      	cbnz	r5, 800dd68 <__sfp+0x64>
 800dd32:	4b16      	ldr	r3, [pc, #88]	; (800dd8c <__sfp+0x88>)
 800dd34:	60e3      	str	r3, [r4, #12]
 800dd36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd3a:	6665      	str	r5, [r4, #100]	; 0x64
 800dd3c:	f000 f847 	bl	800ddce <__retarget_lock_init_recursive>
 800dd40:	f7ff ff96 	bl	800dc70 <__sfp_lock_release>
 800dd44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd4c:	6025      	str	r5, [r4, #0]
 800dd4e:	61a5      	str	r5, [r4, #24]
 800dd50:	2208      	movs	r2, #8
 800dd52:	4629      	mov	r1, r5
 800dd54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd58:	f7fd fab0 	bl	800b2bc <memset>
 800dd5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd64:	4620      	mov	r0, r4
 800dd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd68:	3468      	adds	r4, #104	; 0x68
 800dd6a:	e7d9      	b.n	800dd20 <__sfp+0x1c>
 800dd6c:	2104      	movs	r1, #4
 800dd6e:	4638      	mov	r0, r7
 800dd70:	f7ff ff62 	bl	800dc38 <__sfmoreglue>
 800dd74:	4604      	mov	r4, r0
 800dd76:	6030      	str	r0, [r6, #0]
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d1d5      	bne.n	800dd28 <__sfp+0x24>
 800dd7c:	f7ff ff78 	bl	800dc70 <__sfp_lock_release>
 800dd80:	230c      	movs	r3, #12
 800dd82:	603b      	str	r3, [r7, #0]
 800dd84:	e7ee      	b.n	800dd64 <__sfp+0x60>
 800dd86:	bf00      	nop
 800dd88:	0800f6a4 	.word	0x0800f6a4
 800dd8c:	ffff0001 	.word	0xffff0001

0800dd90 <_fwalk_reent>:
 800dd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd94:	4606      	mov	r6, r0
 800dd96:	4688      	mov	r8, r1
 800dd98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd9c:	2700      	movs	r7, #0
 800dd9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dda2:	f1b9 0901 	subs.w	r9, r9, #1
 800dda6:	d505      	bpl.n	800ddb4 <_fwalk_reent+0x24>
 800dda8:	6824      	ldr	r4, [r4, #0]
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	d1f7      	bne.n	800dd9e <_fwalk_reent+0xe>
 800ddae:	4638      	mov	r0, r7
 800ddb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb4:	89ab      	ldrh	r3, [r5, #12]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d907      	bls.n	800ddca <_fwalk_reent+0x3a>
 800ddba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	d003      	beq.n	800ddca <_fwalk_reent+0x3a>
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	47c0      	blx	r8
 800ddc8:	4307      	orrs	r7, r0
 800ddca:	3568      	adds	r5, #104	; 0x68
 800ddcc:	e7e9      	b.n	800dda2 <_fwalk_reent+0x12>

0800ddce <__retarget_lock_init_recursive>:
 800ddce:	4770      	bx	lr

0800ddd0 <__retarget_lock_acquire_recursive>:
 800ddd0:	4770      	bx	lr

0800ddd2 <__retarget_lock_release_recursive>:
 800ddd2:	4770      	bx	lr

0800ddd4 <__swhatbuf_r>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	460e      	mov	r6, r1
 800ddd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dddc:	2900      	cmp	r1, #0
 800ddde:	b096      	sub	sp, #88	; 0x58
 800dde0:	4614      	mov	r4, r2
 800dde2:	461d      	mov	r5, r3
 800dde4:	da08      	bge.n	800ddf8 <__swhatbuf_r+0x24>
 800dde6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	602a      	str	r2, [r5, #0]
 800ddee:	061a      	lsls	r2, r3, #24
 800ddf0:	d410      	bmi.n	800de14 <__swhatbuf_r+0x40>
 800ddf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddf6:	e00e      	b.n	800de16 <__swhatbuf_r+0x42>
 800ddf8:	466a      	mov	r2, sp
 800ddfa:	f000 f903 	bl	800e004 <_fstat_r>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	dbf1      	blt.n	800dde6 <__swhatbuf_r+0x12>
 800de02:	9a01      	ldr	r2, [sp, #4]
 800de04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de0c:	425a      	negs	r2, r3
 800de0e:	415a      	adcs	r2, r3
 800de10:	602a      	str	r2, [r5, #0]
 800de12:	e7ee      	b.n	800ddf2 <__swhatbuf_r+0x1e>
 800de14:	2340      	movs	r3, #64	; 0x40
 800de16:	2000      	movs	r0, #0
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	b016      	add	sp, #88	; 0x58
 800de1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de20 <__smakebuf_r>:
 800de20:	898b      	ldrh	r3, [r1, #12]
 800de22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de24:	079d      	lsls	r5, r3, #30
 800de26:	4606      	mov	r6, r0
 800de28:	460c      	mov	r4, r1
 800de2a:	d507      	bpl.n	800de3c <__smakebuf_r+0x1c>
 800de2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	6123      	str	r3, [r4, #16]
 800de34:	2301      	movs	r3, #1
 800de36:	6163      	str	r3, [r4, #20]
 800de38:	b002      	add	sp, #8
 800de3a:	bd70      	pop	{r4, r5, r6, pc}
 800de3c:	ab01      	add	r3, sp, #4
 800de3e:	466a      	mov	r2, sp
 800de40:	f7ff ffc8 	bl	800ddd4 <__swhatbuf_r>
 800de44:	9900      	ldr	r1, [sp, #0]
 800de46:	4605      	mov	r5, r0
 800de48:	4630      	mov	r0, r6
 800de4a:	f7ff f963 	bl	800d114 <_malloc_r>
 800de4e:	b948      	cbnz	r0, 800de64 <__smakebuf_r+0x44>
 800de50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de54:	059a      	lsls	r2, r3, #22
 800de56:	d4ef      	bmi.n	800de38 <__smakebuf_r+0x18>
 800de58:	f023 0303 	bic.w	r3, r3, #3
 800de5c:	f043 0302 	orr.w	r3, r3, #2
 800de60:	81a3      	strh	r3, [r4, #12]
 800de62:	e7e3      	b.n	800de2c <__smakebuf_r+0xc>
 800de64:	4b0d      	ldr	r3, [pc, #52]	; (800de9c <__smakebuf_r+0x7c>)
 800de66:	62b3      	str	r3, [r6, #40]	; 0x28
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	6020      	str	r0, [r4, #0]
 800de6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	9b00      	ldr	r3, [sp, #0]
 800de74:	6163      	str	r3, [r4, #20]
 800de76:	9b01      	ldr	r3, [sp, #4]
 800de78:	6120      	str	r0, [r4, #16]
 800de7a:	b15b      	cbz	r3, 800de94 <__smakebuf_r+0x74>
 800de7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de80:	4630      	mov	r0, r6
 800de82:	f000 f8d1 	bl	800e028 <_isatty_r>
 800de86:	b128      	cbz	r0, 800de94 <__smakebuf_r+0x74>
 800de88:	89a3      	ldrh	r3, [r4, #12]
 800de8a:	f023 0303 	bic.w	r3, r3, #3
 800de8e:	f043 0301 	orr.w	r3, r3, #1
 800de92:	81a3      	strh	r3, [r4, #12]
 800de94:	89a0      	ldrh	r0, [r4, #12]
 800de96:	4305      	orrs	r5, r0
 800de98:	81a5      	strh	r5, [r4, #12]
 800de9a:	e7cd      	b.n	800de38 <__smakebuf_r+0x18>
 800de9c:	0800dc2d 	.word	0x0800dc2d

0800dea0 <_malloc_usable_size_r>:
 800dea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dea4:	1f18      	subs	r0, r3, #4
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	bfbc      	itt	lt
 800deaa:	580b      	ldrlt	r3, [r1, r0]
 800deac:	18c0      	addlt	r0, r0, r3
 800deae:	4770      	bx	lr

0800deb0 <_raise_r>:
 800deb0:	291f      	cmp	r1, #31
 800deb2:	b538      	push	{r3, r4, r5, lr}
 800deb4:	4604      	mov	r4, r0
 800deb6:	460d      	mov	r5, r1
 800deb8:	d904      	bls.n	800dec4 <_raise_r+0x14>
 800deba:	2316      	movs	r3, #22
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	f04f 30ff 	mov.w	r0, #4294967295
 800dec2:	bd38      	pop	{r3, r4, r5, pc}
 800dec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dec6:	b112      	cbz	r2, 800dece <_raise_r+0x1e>
 800dec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800decc:	b94b      	cbnz	r3, 800dee2 <_raise_r+0x32>
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 f830 	bl	800df34 <_getpid_r>
 800ded4:	462a      	mov	r2, r5
 800ded6:	4601      	mov	r1, r0
 800ded8:	4620      	mov	r0, r4
 800deda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dede:	f000 b817 	b.w	800df10 <_kill_r>
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d00a      	beq.n	800defc <_raise_r+0x4c>
 800dee6:	1c59      	adds	r1, r3, #1
 800dee8:	d103      	bne.n	800def2 <_raise_r+0x42>
 800deea:	2316      	movs	r3, #22
 800deec:	6003      	str	r3, [r0, #0]
 800deee:	2001      	movs	r0, #1
 800def0:	e7e7      	b.n	800dec2 <_raise_r+0x12>
 800def2:	2400      	movs	r4, #0
 800def4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800def8:	4628      	mov	r0, r5
 800defa:	4798      	blx	r3
 800defc:	2000      	movs	r0, #0
 800defe:	e7e0      	b.n	800dec2 <_raise_r+0x12>

0800df00 <raise>:
 800df00:	4b02      	ldr	r3, [pc, #8]	; (800df0c <raise+0xc>)
 800df02:	4601      	mov	r1, r0
 800df04:	6818      	ldr	r0, [r3, #0]
 800df06:	f7ff bfd3 	b.w	800deb0 <_raise_r>
 800df0a:	bf00      	nop
 800df0c:	20000098 	.word	0x20000098

0800df10 <_kill_r>:
 800df10:	b538      	push	{r3, r4, r5, lr}
 800df12:	4d07      	ldr	r5, [pc, #28]	; (800df30 <_kill_r+0x20>)
 800df14:	2300      	movs	r3, #0
 800df16:	4604      	mov	r4, r0
 800df18:	4608      	mov	r0, r1
 800df1a:	4611      	mov	r1, r2
 800df1c:	602b      	str	r3, [r5, #0]
 800df1e:	f7f7 fb7d 	bl	800561c <_kill>
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	d102      	bne.n	800df2c <_kill_r+0x1c>
 800df26:	682b      	ldr	r3, [r5, #0]
 800df28:	b103      	cbz	r3, 800df2c <_kill_r+0x1c>
 800df2a:	6023      	str	r3, [r4, #0]
 800df2c:	bd38      	pop	{r3, r4, r5, pc}
 800df2e:	bf00      	nop
 800df30:	20000b84 	.word	0x20000b84

0800df34 <_getpid_r>:
 800df34:	f7f7 bb6a 	b.w	800560c <_getpid>

0800df38 <__sread>:
 800df38:	b510      	push	{r4, lr}
 800df3a:	460c      	mov	r4, r1
 800df3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df40:	f000 f894 	bl	800e06c <_read_r>
 800df44:	2800      	cmp	r0, #0
 800df46:	bfab      	itete	ge
 800df48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df4a:	89a3      	ldrhlt	r3, [r4, #12]
 800df4c:	181b      	addge	r3, r3, r0
 800df4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df52:	bfac      	ite	ge
 800df54:	6563      	strge	r3, [r4, #84]	; 0x54
 800df56:	81a3      	strhlt	r3, [r4, #12]
 800df58:	bd10      	pop	{r4, pc}

0800df5a <__swrite>:
 800df5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5e:	461f      	mov	r7, r3
 800df60:	898b      	ldrh	r3, [r1, #12]
 800df62:	05db      	lsls	r3, r3, #23
 800df64:	4605      	mov	r5, r0
 800df66:	460c      	mov	r4, r1
 800df68:	4616      	mov	r6, r2
 800df6a:	d505      	bpl.n	800df78 <__swrite+0x1e>
 800df6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df70:	2302      	movs	r3, #2
 800df72:	2200      	movs	r2, #0
 800df74:	f000 f868 	bl	800e048 <_lseek_r>
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df82:	81a3      	strh	r3, [r4, #12]
 800df84:	4632      	mov	r2, r6
 800df86:	463b      	mov	r3, r7
 800df88:	4628      	mov	r0, r5
 800df8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df8e:	f000 b817 	b.w	800dfc0 <_write_r>

0800df92 <__sseek>:
 800df92:	b510      	push	{r4, lr}
 800df94:	460c      	mov	r4, r1
 800df96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9a:	f000 f855 	bl	800e048 <_lseek_r>
 800df9e:	1c43      	adds	r3, r0, #1
 800dfa0:	89a3      	ldrh	r3, [r4, #12]
 800dfa2:	bf15      	itete	ne
 800dfa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dfa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dfaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dfae:	81a3      	strheq	r3, [r4, #12]
 800dfb0:	bf18      	it	ne
 800dfb2:	81a3      	strhne	r3, [r4, #12]
 800dfb4:	bd10      	pop	{r4, pc}

0800dfb6 <__sclose>:
 800dfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfba:	f000 b813 	b.w	800dfe4 <_close_r>
	...

0800dfc0 <_write_r>:
 800dfc0:	b538      	push	{r3, r4, r5, lr}
 800dfc2:	4d07      	ldr	r5, [pc, #28]	; (800dfe0 <_write_r+0x20>)
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	4608      	mov	r0, r1
 800dfc8:	4611      	mov	r1, r2
 800dfca:	2200      	movs	r2, #0
 800dfcc:	602a      	str	r2, [r5, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	f7f7 fb5b 	bl	800568a <_write>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_write_r+0x1e>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_write_r+0x1e>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	20000b84 	.word	0x20000b84

0800dfe4 <_close_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4d06      	ldr	r5, [pc, #24]	; (800e000 <_close_r+0x1c>)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4604      	mov	r4, r0
 800dfec:	4608      	mov	r0, r1
 800dfee:	602b      	str	r3, [r5, #0]
 800dff0:	f7f7 fb67 	bl	80056c2 <_close>
 800dff4:	1c43      	adds	r3, r0, #1
 800dff6:	d102      	bne.n	800dffe <_close_r+0x1a>
 800dff8:	682b      	ldr	r3, [r5, #0]
 800dffa:	b103      	cbz	r3, 800dffe <_close_r+0x1a>
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	20000b84 	.word	0x20000b84

0800e004 <_fstat_r>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	4d07      	ldr	r5, [pc, #28]	; (800e024 <_fstat_r+0x20>)
 800e008:	2300      	movs	r3, #0
 800e00a:	4604      	mov	r4, r0
 800e00c:	4608      	mov	r0, r1
 800e00e:	4611      	mov	r1, r2
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	f7f7 fb62 	bl	80056da <_fstat>
 800e016:	1c43      	adds	r3, r0, #1
 800e018:	d102      	bne.n	800e020 <_fstat_r+0x1c>
 800e01a:	682b      	ldr	r3, [r5, #0]
 800e01c:	b103      	cbz	r3, 800e020 <_fstat_r+0x1c>
 800e01e:	6023      	str	r3, [r4, #0]
 800e020:	bd38      	pop	{r3, r4, r5, pc}
 800e022:	bf00      	nop
 800e024:	20000b84 	.word	0x20000b84

0800e028 <_isatty_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4d06      	ldr	r5, [pc, #24]	; (800e044 <_isatty_r+0x1c>)
 800e02c:	2300      	movs	r3, #0
 800e02e:	4604      	mov	r4, r0
 800e030:	4608      	mov	r0, r1
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	f7f7 fb61 	bl	80056fa <_isatty>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d102      	bne.n	800e042 <_isatty_r+0x1a>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	b103      	cbz	r3, 800e042 <_isatty_r+0x1a>
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	20000b84 	.word	0x20000b84

0800e048 <_lseek_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d07      	ldr	r5, [pc, #28]	; (800e068 <_lseek_r+0x20>)
 800e04c:	4604      	mov	r4, r0
 800e04e:	4608      	mov	r0, r1
 800e050:	4611      	mov	r1, r2
 800e052:	2200      	movs	r2, #0
 800e054:	602a      	str	r2, [r5, #0]
 800e056:	461a      	mov	r2, r3
 800e058:	f7f7 fb5a 	bl	8005710 <_lseek>
 800e05c:	1c43      	adds	r3, r0, #1
 800e05e:	d102      	bne.n	800e066 <_lseek_r+0x1e>
 800e060:	682b      	ldr	r3, [r5, #0]
 800e062:	b103      	cbz	r3, 800e066 <_lseek_r+0x1e>
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	bd38      	pop	{r3, r4, r5, pc}
 800e068:	20000b84 	.word	0x20000b84

0800e06c <_read_r>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	4d07      	ldr	r5, [pc, #28]	; (800e08c <_read_r+0x20>)
 800e070:	4604      	mov	r4, r0
 800e072:	4608      	mov	r0, r1
 800e074:	4611      	mov	r1, r2
 800e076:	2200      	movs	r2, #0
 800e078:	602a      	str	r2, [r5, #0]
 800e07a:	461a      	mov	r2, r3
 800e07c:	f7f7 fae8 	bl	8005650 <_read>
 800e080:	1c43      	adds	r3, r0, #1
 800e082:	d102      	bne.n	800e08a <_read_r+0x1e>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	b103      	cbz	r3, 800e08a <_read_r+0x1e>
 800e088:	6023      	str	r3, [r4, #0]
 800e08a:	bd38      	pop	{r3, r4, r5, pc}
 800e08c:	20000b84 	.word	0x20000b84

0800e090 <atan>:
 800e090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	ec55 4b10 	vmov	r4, r5, d0
 800e098:	4bc3      	ldr	r3, [pc, #780]	; (800e3a8 <atan+0x318>)
 800e09a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e09e:	429e      	cmp	r6, r3
 800e0a0:	46ab      	mov	fp, r5
 800e0a2:	dd18      	ble.n	800e0d6 <atan+0x46>
 800e0a4:	4bc1      	ldr	r3, [pc, #772]	; (800e3ac <atan+0x31c>)
 800e0a6:	429e      	cmp	r6, r3
 800e0a8:	dc01      	bgt.n	800e0ae <atan+0x1e>
 800e0aa:	d109      	bne.n	800e0c0 <atan+0x30>
 800e0ac:	b144      	cbz	r4, 800e0c0 <atan+0x30>
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	462b      	mov	r3, r5
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	f7f2 f909 	bl	80002cc <__adddf3>
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	460d      	mov	r5, r1
 800e0be:	e006      	b.n	800e0ce <atan+0x3e>
 800e0c0:	f1bb 0f00 	cmp.w	fp, #0
 800e0c4:	f300 8131 	bgt.w	800e32a <atan+0x29a>
 800e0c8:	a59b      	add	r5, pc, #620	; (adr r5, 800e338 <atan+0x2a8>)
 800e0ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e0ce:	ec45 4b10 	vmov	d0, r4, r5
 800e0d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d6:	4bb6      	ldr	r3, [pc, #728]	; (800e3b0 <atan+0x320>)
 800e0d8:	429e      	cmp	r6, r3
 800e0da:	dc14      	bgt.n	800e106 <atan+0x76>
 800e0dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e0e0:	429e      	cmp	r6, r3
 800e0e2:	dc0d      	bgt.n	800e100 <atan+0x70>
 800e0e4:	a396      	add	r3, pc, #600	; (adr r3, 800e340 <atan+0x2b0>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	ee10 0a10 	vmov	r0, s0
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	f7f2 f8ec 	bl	80002cc <__adddf3>
 800e0f4:	4baf      	ldr	r3, [pc, #700]	; (800e3b4 <atan+0x324>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f7f2 fd2e 	bl	8000b58 <__aeabi_dcmpgt>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d1e6      	bne.n	800e0ce <atan+0x3e>
 800e100:	f04f 3aff 	mov.w	sl, #4294967295
 800e104:	e02b      	b.n	800e15e <atan+0xce>
 800e106:	f000 f963 	bl	800e3d0 <fabs>
 800e10a:	4bab      	ldr	r3, [pc, #684]	; (800e3b8 <atan+0x328>)
 800e10c:	429e      	cmp	r6, r3
 800e10e:	ec55 4b10 	vmov	r4, r5, d0
 800e112:	f300 80bf 	bgt.w	800e294 <atan+0x204>
 800e116:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e11a:	429e      	cmp	r6, r3
 800e11c:	f300 80a0 	bgt.w	800e260 <atan+0x1d0>
 800e120:	ee10 2a10 	vmov	r2, s0
 800e124:	ee10 0a10 	vmov	r0, s0
 800e128:	462b      	mov	r3, r5
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7f2 f8ce 	bl	80002cc <__adddf3>
 800e130:	4ba0      	ldr	r3, [pc, #640]	; (800e3b4 <atan+0x324>)
 800e132:	2200      	movs	r2, #0
 800e134:	f7f2 f8c8 	bl	80002c8 <__aeabi_dsub>
 800e138:	2200      	movs	r2, #0
 800e13a:	4606      	mov	r6, r0
 800e13c:	460f      	mov	r7, r1
 800e13e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e142:	4620      	mov	r0, r4
 800e144:	4629      	mov	r1, r5
 800e146:	f7f2 f8c1 	bl	80002cc <__adddf3>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	4630      	mov	r0, r6
 800e150:	4639      	mov	r1, r7
 800e152:	f7f2 fb9b 	bl	800088c <__aeabi_ddiv>
 800e156:	f04f 0a00 	mov.w	sl, #0
 800e15a:	4604      	mov	r4, r0
 800e15c:	460d      	mov	r5, r1
 800e15e:	4622      	mov	r2, r4
 800e160:	462b      	mov	r3, r5
 800e162:	4620      	mov	r0, r4
 800e164:	4629      	mov	r1, r5
 800e166:	f7f2 fa67 	bl	8000638 <__aeabi_dmul>
 800e16a:	4602      	mov	r2, r0
 800e16c:	460b      	mov	r3, r1
 800e16e:	4680      	mov	r8, r0
 800e170:	4689      	mov	r9, r1
 800e172:	f7f2 fa61 	bl	8000638 <__aeabi_dmul>
 800e176:	a374      	add	r3, pc, #464	; (adr r3, 800e348 <atan+0x2b8>)
 800e178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17c:	4606      	mov	r6, r0
 800e17e:	460f      	mov	r7, r1
 800e180:	f7f2 fa5a 	bl	8000638 <__aeabi_dmul>
 800e184:	a372      	add	r3, pc, #456	; (adr r3, 800e350 <atan+0x2c0>)
 800e186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18a:	f7f2 f89f 	bl	80002cc <__adddf3>
 800e18e:	4632      	mov	r2, r6
 800e190:	463b      	mov	r3, r7
 800e192:	f7f2 fa51 	bl	8000638 <__aeabi_dmul>
 800e196:	a370      	add	r3, pc, #448	; (adr r3, 800e358 <atan+0x2c8>)
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	f7f2 f896 	bl	80002cc <__adddf3>
 800e1a0:	4632      	mov	r2, r6
 800e1a2:	463b      	mov	r3, r7
 800e1a4:	f7f2 fa48 	bl	8000638 <__aeabi_dmul>
 800e1a8:	a36d      	add	r3, pc, #436	; (adr r3, 800e360 <atan+0x2d0>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f7f2 f88d 	bl	80002cc <__adddf3>
 800e1b2:	4632      	mov	r2, r6
 800e1b4:	463b      	mov	r3, r7
 800e1b6:	f7f2 fa3f 	bl	8000638 <__aeabi_dmul>
 800e1ba:	a36b      	add	r3, pc, #428	; (adr r3, 800e368 <atan+0x2d8>)
 800e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c0:	f7f2 f884 	bl	80002cc <__adddf3>
 800e1c4:	4632      	mov	r2, r6
 800e1c6:	463b      	mov	r3, r7
 800e1c8:	f7f2 fa36 	bl	8000638 <__aeabi_dmul>
 800e1cc:	a368      	add	r3, pc, #416	; (adr r3, 800e370 <atan+0x2e0>)
 800e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d2:	f7f2 f87b 	bl	80002cc <__adddf3>
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	464b      	mov	r3, r9
 800e1da:	f7f2 fa2d 	bl	8000638 <__aeabi_dmul>
 800e1de:	a366      	add	r3, pc, #408	; (adr r3, 800e378 <atan+0x2e8>)
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	4680      	mov	r8, r0
 800e1e6:	4689      	mov	r9, r1
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	f7f2 fa24 	bl	8000638 <__aeabi_dmul>
 800e1f0:	a363      	add	r3, pc, #396	; (adr r3, 800e380 <atan+0x2f0>)
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	f7f2 f867 	bl	80002c8 <__aeabi_dsub>
 800e1fa:	4632      	mov	r2, r6
 800e1fc:	463b      	mov	r3, r7
 800e1fe:	f7f2 fa1b 	bl	8000638 <__aeabi_dmul>
 800e202:	a361      	add	r3, pc, #388	; (adr r3, 800e388 <atan+0x2f8>)
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	f7f2 f85e 	bl	80002c8 <__aeabi_dsub>
 800e20c:	4632      	mov	r2, r6
 800e20e:	463b      	mov	r3, r7
 800e210:	f7f2 fa12 	bl	8000638 <__aeabi_dmul>
 800e214:	a35e      	add	r3, pc, #376	; (adr r3, 800e390 <atan+0x300>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	f7f2 f855 	bl	80002c8 <__aeabi_dsub>
 800e21e:	4632      	mov	r2, r6
 800e220:	463b      	mov	r3, r7
 800e222:	f7f2 fa09 	bl	8000638 <__aeabi_dmul>
 800e226:	a35c      	add	r3, pc, #368	; (adr r3, 800e398 <atan+0x308>)
 800e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22c:	f7f2 f84c 	bl	80002c8 <__aeabi_dsub>
 800e230:	4632      	mov	r2, r6
 800e232:	463b      	mov	r3, r7
 800e234:	f7f2 fa00 	bl	8000638 <__aeabi_dmul>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4640      	mov	r0, r8
 800e23e:	4649      	mov	r1, r9
 800e240:	f7f2 f844 	bl	80002cc <__adddf3>
 800e244:	4622      	mov	r2, r4
 800e246:	462b      	mov	r3, r5
 800e248:	f7f2 f9f6 	bl	8000638 <__aeabi_dmul>
 800e24c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	d14b      	bne.n	800e2ee <atan+0x25e>
 800e256:	4620      	mov	r0, r4
 800e258:	4629      	mov	r1, r5
 800e25a:	f7f2 f835 	bl	80002c8 <__aeabi_dsub>
 800e25e:	e72c      	b.n	800e0ba <atan+0x2a>
 800e260:	ee10 0a10 	vmov	r0, s0
 800e264:	4b53      	ldr	r3, [pc, #332]	; (800e3b4 <atan+0x324>)
 800e266:	2200      	movs	r2, #0
 800e268:	4629      	mov	r1, r5
 800e26a:	f7f2 f82d 	bl	80002c8 <__aeabi_dsub>
 800e26e:	4b51      	ldr	r3, [pc, #324]	; (800e3b4 <atan+0x324>)
 800e270:	4606      	mov	r6, r0
 800e272:	460f      	mov	r7, r1
 800e274:	2200      	movs	r2, #0
 800e276:	4620      	mov	r0, r4
 800e278:	4629      	mov	r1, r5
 800e27a:	f7f2 f827 	bl	80002cc <__adddf3>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	4630      	mov	r0, r6
 800e284:	4639      	mov	r1, r7
 800e286:	f7f2 fb01 	bl	800088c <__aeabi_ddiv>
 800e28a:	f04f 0a01 	mov.w	sl, #1
 800e28e:	4604      	mov	r4, r0
 800e290:	460d      	mov	r5, r1
 800e292:	e764      	b.n	800e15e <atan+0xce>
 800e294:	4b49      	ldr	r3, [pc, #292]	; (800e3bc <atan+0x32c>)
 800e296:	429e      	cmp	r6, r3
 800e298:	da1d      	bge.n	800e2d6 <atan+0x246>
 800e29a:	ee10 0a10 	vmov	r0, s0
 800e29e:	4b48      	ldr	r3, [pc, #288]	; (800e3c0 <atan+0x330>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	f7f2 f810 	bl	80002c8 <__aeabi_dsub>
 800e2a8:	4b45      	ldr	r3, [pc, #276]	; (800e3c0 <atan+0x330>)
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	460f      	mov	r7, r1
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	4629      	mov	r1, r5
 800e2b4:	f7f2 f9c0 	bl	8000638 <__aeabi_dmul>
 800e2b8:	4b3e      	ldr	r3, [pc, #248]	; (800e3b4 <atan+0x324>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f7f2 f806 	bl	80002cc <__adddf3>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	f7f2 fae0 	bl	800088c <__aeabi_ddiv>
 800e2cc:	f04f 0a02 	mov.w	sl, #2
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	e743      	b.n	800e15e <atan+0xce>
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	ee10 2a10 	vmov	r2, s0
 800e2dc:	4939      	ldr	r1, [pc, #228]	; (800e3c4 <atan+0x334>)
 800e2de:	2000      	movs	r0, #0
 800e2e0:	f7f2 fad4 	bl	800088c <__aeabi_ddiv>
 800e2e4:	f04f 0a03 	mov.w	sl, #3
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	e737      	b.n	800e15e <atan+0xce>
 800e2ee:	4b36      	ldr	r3, [pc, #216]	; (800e3c8 <atan+0x338>)
 800e2f0:	4e36      	ldr	r6, [pc, #216]	; (800e3cc <atan+0x33c>)
 800e2f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e2f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e2fa:	e9da 2300 	ldrd	r2, r3, [sl]
 800e2fe:	f7f1 ffe3 	bl	80002c8 <__aeabi_dsub>
 800e302:	4622      	mov	r2, r4
 800e304:	462b      	mov	r3, r5
 800e306:	f7f1 ffdf 	bl	80002c8 <__aeabi_dsub>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e312:	f7f1 ffd9 	bl	80002c8 <__aeabi_dsub>
 800e316:	f1bb 0f00 	cmp.w	fp, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	460d      	mov	r5, r1
 800e31e:	f6bf aed6 	bge.w	800e0ce <atan+0x3e>
 800e322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e326:	461d      	mov	r5, r3
 800e328:	e6d1      	b.n	800e0ce <atan+0x3e>
 800e32a:	a51d      	add	r5, pc, #116	; (adr r5, 800e3a0 <atan+0x310>)
 800e32c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e330:	e6cd      	b.n	800e0ce <atan+0x3e>
 800e332:	bf00      	nop
 800e334:	f3af 8000 	nop.w
 800e338:	54442d18 	.word	0x54442d18
 800e33c:	bff921fb 	.word	0xbff921fb
 800e340:	8800759c 	.word	0x8800759c
 800e344:	7e37e43c 	.word	0x7e37e43c
 800e348:	e322da11 	.word	0xe322da11
 800e34c:	3f90ad3a 	.word	0x3f90ad3a
 800e350:	24760deb 	.word	0x24760deb
 800e354:	3fa97b4b 	.word	0x3fa97b4b
 800e358:	a0d03d51 	.word	0xa0d03d51
 800e35c:	3fb10d66 	.word	0x3fb10d66
 800e360:	c54c206e 	.word	0xc54c206e
 800e364:	3fb745cd 	.word	0x3fb745cd
 800e368:	920083ff 	.word	0x920083ff
 800e36c:	3fc24924 	.word	0x3fc24924
 800e370:	5555550d 	.word	0x5555550d
 800e374:	3fd55555 	.word	0x3fd55555
 800e378:	2c6a6c2f 	.word	0x2c6a6c2f
 800e37c:	bfa2b444 	.word	0xbfa2b444
 800e380:	52defd9a 	.word	0x52defd9a
 800e384:	3fadde2d 	.word	0x3fadde2d
 800e388:	af749a6d 	.word	0xaf749a6d
 800e38c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e390:	fe231671 	.word	0xfe231671
 800e394:	3fbc71c6 	.word	0x3fbc71c6
 800e398:	9998ebc4 	.word	0x9998ebc4
 800e39c:	3fc99999 	.word	0x3fc99999
 800e3a0:	54442d18 	.word	0x54442d18
 800e3a4:	3ff921fb 	.word	0x3ff921fb
 800e3a8:	440fffff 	.word	0x440fffff
 800e3ac:	7ff00000 	.word	0x7ff00000
 800e3b0:	3fdbffff 	.word	0x3fdbffff
 800e3b4:	3ff00000 	.word	0x3ff00000
 800e3b8:	3ff2ffff 	.word	0x3ff2ffff
 800e3bc:	40038000 	.word	0x40038000
 800e3c0:	3ff80000 	.word	0x3ff80000
 800e3c4:	bff00000 	.word	0xbff00000
 800e3c8:	0800faa0 	.word	0x0800faa0
 800e3cc:	0800fa80 	.word	0x0800fa80

0800e3d0 <fabs>:
 800e3d0:	ec51 0b10 	vmov	r0, r1, d0
 800e3d4:	ee10 2a10 	vmov	r2, s0
 800e3d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3dc:	ec43 2b10 	vmov	d0, r2, r3
 800e3e0:	4770      	bx	lr
 800e3e2:	0000      	movs	r0, r0
 800e3e4:	0000      	movs	r0, r0
	...

0800e3e8 <tan>:
 800e3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3ea:	ec53 2b10 	vmov	r2, r3, d0
 800e3ee:	4816      	ldr	r0, [pc, #88]	; (800e448 <tan+0x60>)
 800e3f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e3f4:	4281      	cmp	r1, r0
 800e3f6:	dc07      	bgt.n	800e408 <tan+0x20>
 800e3f8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800e440 <tan+0x58>
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	b005      	add	sp, #20
 800e400:	f85d eb04 	ldr.w	lr, [sp], #4
 800e404:	f000 bd80 	b.w	800ef08 <__kernel_tan>
 800e408:	4810      	ldr	r0, [pc, #64]	; (800e44c <tan+0x64>)
 800e40a:	4281      	cmp	r1, r0
 800e40c:	dd09      	ble.n	800e422 <tan+0x3a>
 800e40e:	ee10 0a10 	vmov	r0, s0
 800e412:	4619      	mov	r1, r3
 800e414:	f7f1 ff58 	bl	80002c8 <__aeabi_dsub>
 800e418:	ec41 0b10 	vmov	d0, r0, r1
 800e41c:	b005      	add	sp, #20
 800e41e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e422:	4668      	mov	r0, sp
 800e424:	f000 f814 	bl	800e450 <__ieee754_rem_pio2>
 800e428:	0040      	lsls	r0, r0, #1
 800e42a:	f000 0002 	and.w	r0, r0, #2
 800e42e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e432:	ed9d 0b00 	vldr	d0, [sp]
 800e436:	f1c0 0001 	rsb	r0, r0, #1
 800e43a:	f000 fd65 	bl	800ef08 <__kernel_tan>
 800e43e:	e7ed      	b.n	800e41c <tan+0x34>
	...
 800e448:	3fe921fb 	.word	0x3fe921fb
 800e44c:	7fefffff 	.word	0x7fefffff

0800e450 <__ieee754_rem_pio2>:
 800e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	ed2d 8b02 	vpush	{d8}
 800e458:	ec55 4b10 	vmov	r4, r5, d0
 800e45c:	4bca      	ldr	r3, [pc, #808]	; (800e788 <__ieee754_rem_pio2+0x338>)
 800e45e:	b08b      	sub	sp, #44	; 0x2c
 800e460:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e464:	4598      	cmp	r8, r3
 800e466:	4682      	mov	sl, r0
 800e468:	9502      	str	r5, [sp, #8]
 800e46a:	dc08      	bgt.n	800e47e <__ieee754_rem_pio2+0x2e>
 800e46c:	2200      	movs	r2, #0
 800e46e:	2300      	movs	r3, #0
 800e470:	ed80 0b00 	vstr	d0, [r0]
 800e474:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e478:	f04f 0b00 	mov.w	fp, #0
 800e47c:	e028      	b.n	800e4d0 <__ieee754_rem_pio2+0x80>
 800e47e:	4bc3      	ldr	r3, [pc, #780]	; (800e78c <__ieee754_rem_pio2+0x33c>)
 800e480:	4598      	cmp	r8, r3
 800e482:	dc78      	bgt.n	800e576 <__ieee754_rem_pio2+0x126>
 800e484:	9b02      	ldr	r3, [sp, #8]
 800e486:	4ec2      	ldr	r6, [pc, #776]	; (800e790 <__ieee754_rem_pio2+0x340>)
 800e488:	2b00      	cmp	r3, #0
 800e48a:	ee10 0a10 	vmov	r0, s0
 800e48e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e750 <__ieee754_rem_pio2+0x300>)
 800e490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e494:	4629      	mov	r1, r5
 800e496:	dd39      	ble.n	800e50c <__ieee754_rem_pio2+0xbc>
 800e498:	f7f1 ff16 	bl	80002c8 <__aeabi_dsub>
 800e49c:	45b0      	cmp	r8, r6
 800e49e:	4604      	mov	r4, r0
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	d01b      	beq.n	800e4dc <__ieee754_rem_pio2+0x8c>
 800e4a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800e758 <__ieee754_rem_pio2+0x308>)
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	f7f1 ff0d 	bl	80002c8 <__aeabi_dsub>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	e9ca 2300 	strd	r2, r3, [sl]
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	f7f1 ff05 	bl	80002c8 <__aeabi_dsub>
 800e4be:	a3a6      	add	r3, pc, #664	; (adr r3, 800e758 <__ieee754_rem_pio2+0x308>)
 800e4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c4:	f7f1 ff00 	bl	80002c8 <__aeabi_dsub>
 800e4c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4cc:	f04f 0b01 	mov.w	fp, #1
 800e4d0:	4658      	mov	r0, fp
 800e4d2:	b00b      	add	sp, #44	; 0x2c
 800e4d4:	ecbd 8b02 	vpop	{d8}
 800e4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800e760 <__ieee754_rem_pio2+0x310>)
 800e4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e2:	f7f1 fef1 	bl	80002c8 <__aeabi_dsub>
 800e4e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e768 <__ieee754_rem_pio2+0x318>)
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	460d      	mov	r5, r1
 800e4f0:	f7f1 feea 	bl	80002c8 <__aeabi_dsub>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	e9ca 2300 	strd	r2, r3, [sl]
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	f7f1 fee2 	bl	80002c8 <__aeabi_dsub>
 800e504:	a398      	add	r3, pc, #608	; (adr r3, 800e768 <__ieee754_rem_pio2+0x318>)
 800e506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50a:	e7db      	b.n	800e4c4 <__ieee754_rem_pio2+0x74>
 800e50c:	f7f1 fede 	bl	80002cc <__adddf3>
 800e510:	45b0      	cmp	r8, r6
 800e512:	4604      	mov	r4, r0
 800e514:	460d      	mov	r5, r1
 800e516:	d016      	beq.n	800e546 <__ieee754_rem_pio2+0xf6>
 800e518:	a38f      	add	r3, pc, #572	; (adr r3, 800e758 <__ieee754_rem_pio2+0x308>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f1 fed5 	bl	80002cc <__adddf3>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	e9ca 2300 	strd	r2, r3, [sl]
 800e52a:	4620      	mov	r0, r4
 800e52c:	4629      	mov	r1, r5
 800e52e:	f7f1 fecb 	bl	80002c8 <__aeabi_dsub>
 800e532:	a389      	add	r3, pc, #548	; (adr r3, 800e758 <__ieee754_rem_pio2+0x308>)
 800e534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e538:	f7f1 fec8 	bl	80002cc <__adddf3>
 800e53c:	f04f 3bff 	mov.w	fp, #4294967295
 800e540:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e544:	e7c4      	b.n	800e4d0 <__ieee754_rem_pio2+0x80>
 800e546:	a386      	add	r3, pc, #536	; (adr r3, 800e760 <__ieee754_rem_pio2+0x310>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f1 febe 	bl	80002cc <__adddf3>
 800e550:	a385      	add	r3, pc, #532	; (adr r3, 800e768 <__ieee754_rem_pio2+0x318>)
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	4604      	mov	r4, r0
 800e558:	460d      	mov	r5, r1
 800e55a:	f7f1 feb7 	bl	80002cc <__adddf3>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	e9ca 2300 	strd	r2, r3, [sl]
 800e566:	4620      	mov	r0, r4
 800e568:	4629      	mov	r1, r5
 800e56a:	f7f1 fead 	bl	80002c8 <__aeabi_dsub>
 800e56e:	a37e      	add	r3, pc, #504	; (adr r3, 800e768 <__ieee754_rem_pio2+0x318>)
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	e7e0      	b.n	800e538 <__ieee754_rem_pio2+0xe8>
 800e576:	4b87      	ldr	r3, [pc, #540]	; (800e794 <__ieee754_rem_pio2+0x344>)
 800e578:	4598      	cmp	r8, r3
 800e57a:	f300 80d9 	bgt.w	800e730 <__ieee754_rem_pio2+0x2e0>
 800e57e:	f7ff ff27 	bl	800e3d0 <fabs>
 800e582:	ec55 4b10 	vmov	r4, r5, d0
 800e586:	ee10 0a10 	vmov	r0, s0
 800e58a:	a379      	add	r3, pc, #484	; (adr r3, 800e770 <__ieee754_rem_pio2+0x320>)
 800e58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e590:	4629      	mov	r1, r5
 800e592:	f7f2 f851 	bl	8000638 <__aeabi_dmul>
 800e596:	4b80      	ldr	r3, [pc, #512]	; (800e798 <__ieee754_rem_pio2+0x348>)
 800e598:	2200      	movs	r2, #0
 800e59a:	f7f1 fe97 	bl	80002cc <__adddf3>
 800e59e:	f7f2 fafb 	bl	8000b98 <__aeabi_d2iz>
 800e5a2:	4683      	mov	fp, r0
 800e5a4:	f7f1 ffde 	bl	8000564 <__aeabi_i2d>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	ec43 2b18 	vmov	d8, r2, r3
 800e5b0:	a367      	add	r3, pc, #412	; (adr r3, 800e750 <__ieee754_rem_pio2+0x300>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f7f2 f83f 	bl	8000638 <__aeabi_dmul>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4620      	mov	r0, r4
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	f7f1 fe81 	bl	80002c8 <__aeabi_dsub>
 800e5c6:	a364      	add	r3, pc, #400	; (adr r3, 800e758 <__ieee754_rem_pio2+0x308>)
 800e5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	460f      	mov	r7, r1
 800e5d0:	ec51 0b18 	vmov	r0, r1, d8
 800e5d4:	f7f2 f830 	bl	8000638 <__aeabi_dmul>
 800e5d8:	f1bb 0f1f 	cmp.w	fp, #31
 800e5dc:	4604      	mov	r4, r0
 800e5de:	460d      	mov	r5, r1
 800e5e0:	dc0d      	bgt.n	800e5fe <__ieee754_rem_pio2+0x1ae>
 800e5e2:	4b6e      	ldr	r3, [pc, #440]	; (800e79c <__ieee754_rem_pio2+0x34c>)
 800e5e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ec:	4543      	cmp	r3, r8
 800e5ee:	d006      	beq.n	800e5fe <__ieee754_rem_pio2+0x1ae>
 800e5f0:	4622      	mov	r2, r4
 800e5f2:	462b      	mov	r3, r5
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	f7f1 fe66 	bl	80002c8 <__aeabi_dsub>
 800e5fc:	e00f      	b.n	800e61e <__ieee754_rem_pio2+0x1ce>
 800e5fe:	462b      	mov	r3, r5
 800e600:	4622      	mov	r2, r4
 800e602:	4630      	mov	r0, r6
 800e604:	4639      	mov	r1, r7
 800e606:	f7f1 fe5f 	bl	80002c8 <__aeabi_dsub>
 800e60a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e60e:	9303      	str	r3, [sp, #12]
 800e610:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e614:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e618:	f1b8 0f10 	cmp.w	r8, #16
 800e61c:	dc02      	bgt.n	800e624 <__ieee754_rem_pio2+0x1d4>
 800e61e:	e9ca 0100 	strd	r0, r1, [sl]
 800e622:	e039      	b.n	800e698 <__ieee754_rem_pio2+0x248>
 800e624:	a34e      	add	r3, pc, #312	; (adr r3, 800e760 <__ieee754_rem_pio2+0x310>)
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	ec51 0b18 	vmov	r0, r1, d8
 800e62e:	f7f2 f803 	bl	8000638 <__aeabi_dmul>
 800e632:	4604      	mov	r4, r0
 800e634:	460d      	mov	r5, r1
 800e636:	4602      	mov	r2, r0
 800e638:	460b      	mov	r3, r1
 800e63a:	4630      	mov	r0, r6
 800e63c:	4639      	mov	r1, r7
 800e63e:	f7f1 fe43 	bl	80002c8 <__aeabi_dsub>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4680      	mov	r8, r0
 800e648:	4689      	mov	r9, r1
 800e64a:	4630      	mov	r0, r6
 800e64c:	4639      	mov	r1, r7
 800e64e:	f7f1 fe3b 	bl	80002c8 <__aeabi_dsub>
 800e652:	4622      	mov	r2, r4
 800e654:	462b      	mov	r3, r5
 800e656:	f7f1 fe37 	bl	80002c8 <__aeabi_dsub>
 800e65a:	a343      	add	r3, pc, #268	; (adr r3, 800e768 <__ieee754_rem_pio2+0x318>)
 800e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e660:	4604      	mov	r4, r0
 800e662:	460d      	mov	r5, r1
 800e664:	ec51 0b18 	vmov	r0, r1, d8
 800e668:	f7f1 ffe6 	bl	8000638 <__aeabi_dmul>
 800e66c:	4622      	mov	r2, r4
 800e66e:	462b      	mov	r3, r5
 800e670:	f7f1 fe2a 	bl	80002c8 <__aeabi_dsub>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4604      	mov	r4, r0
 800e67a:	460d      	mov	r5, r1
 800e67c:	4640      	mov	r0, r8
 800e67e:	4649      	mov	r1, r9
 800e680:	f7f1 fe22 	bl	80002c8 <__aeabi_dsub>
 800e684:	9a03      	ldr	r2, [sp, #12]
 800e686:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	2b31      	cmp	r3, #49	; 0x31
 800e68e:	dc24      	bgt.n	800e6da <__ieee754_rem_pio2+0x28a>
 800e690:	e9ca 0100 	strd	r0, r1, [sl]
 800e694:	4646      	mov	r6, r8
 800e696:	464f      	mov	r7, r9
 800e698:	e9da 8900 	ldrd	r8, r9, [sl]
 800e69c:	4630      	mov	r0, r6
 800e69e:	4642      	mov	r2, r8
 800e6a0:	464b      	mov	r3, r9
 800e6a2:	4639      	mov	r1, r7
 800e6a4:	f7f1 fe10 	bl	80002c8 <__aeabi_dsub>
 800e6a8:	462b      	mov	r3, r5
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	f7f1 fe0c 	bl	80002c8 <__aeabi_dsub>
 800e6b0:	9b02      	ldr	r3, [sp, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6b8:	f6bf af0a 	bge.w	800e4d0 <__ieee754_rem_pio2+0x80>
 800e6bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e6c0:	f8ca 3004 	str.w	r3, [sl, #4]
 800e6c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6c8:	f8ca 8000 	str.w	r8, [sl]
 800e6cc:	f8ca 0008 	str.w	r0, [sl, #8]
 800e6d0:	f8ca 300c 	str.w	r3, [sl, #12]
 800e6d4:	f1cb 0b00 	rsb	fp, fp, #0
 800e6d8:	e6fa      	b.n	800e4d0 <__ieee754_rem_pio2+0x80>
 800e6da:	a327      	add	r3, pc, #156	; (adr r3, 800e778 <__ieee754_rem_pio2+0x328>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	ec51 0b18 	vmov	r0, r1, d8
 800e6e4:	f7f1 ffa8 	bl	8000638 <__aeabi_dmul>
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	f7f1 fde8 	bl	80002c8 <__aeabi_dsub>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4606      	mov	r6, r0
 800e6fe:	460f      	mov	r7, r1
 800e700:	4640      	mov	r0, r8
 800e702:	4649      	mov	r1, r9
 800e704:	f7f1 fde0 	bl	80002c8 <__aeabi_dsub>
 800e708:	4622      	mov	r2, r4
 800e70a:	462b      	mov	r3, r5
 800e70c:	f7f1 fddc 	bl	80002c8 <__aeabi_dsub>
 800e710:	a31b      	add	r3, pc, #108	; (adr r3, 800e780 <__ieee754_rem_pio2+0x330>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	4604      	mov	r4, r0
 800e718:	460d      	mov	r5, r1
 800e71a:	ec51 0b18 	vmov	r0, r1, d8
 800e71e:	f7f1 ff8b 	bl	8000638 <__aeabi_dmul>
 800e722:	4622      	mov	r2, r4
 800e724:	462b      	mov	r3, r5
 800e726:	f7f1 fdcf 	bl	80002c8 <__aeabi_dsub>
 800e72a:	4604      	mov	r4, r0
 800e72c:	460d      	mov	r5, r1
 800e72e:	e75f      	b.n	800e5f0 <__ieee754_rem_pio2+0x1a0>
 800e730:	4b1b      	ldr	r3, [pc, #108]	; (800e7a0 <__ieee754_rem_pio2+0x350>)
 800e732:	4598      	cmp	r8, r3
 800e734:	dd36      	ble.n	800e7a4 <__ieee754_rem_pio2+0x354>
 800e736:	ee10 2a10 	vmov	r2, s0
 800e73a:	462b      	mov	r3, r5
 800e73c:	4620      	mov	r0, r4
 800e73e:	4629      	mov	r1, r5
 800e740:	f7f1 fdc2 	bl	80002c8 <__aeabi_dsub>
 800e744:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e748:	e9ca 0100 	strd	r0, r1, [sl]
 800e74c:	e694      	b.n	800e478 <__ieee754_rem_pio2+0x28>
 800e74e:	bf00      	nop
 800e750:	54400000 	.word	0x54400000
 800e754:	3ff921fb 	.word	0x3ff921fb
 800e758:	1a626331 	.word	0x1a626331
 800e75c:	3dd0b461 	.word	0x3dd0b461
 800e760:	1a600000 	.word	0x1a600000
 800e764:	3dd0b461 	.word	0x3dd0b461
 800e768:	2e037073 	.word	0x2e037073
 800e76c:	3ba3198a 	.word	0x3ba3198a
 800e770:	6dc9c883 	.word	0x6dc9c883
 800e774:	3fe45f30 	.word	0x3fe45f30
 800e778:	2e000000 	.word	0x2e000000
 800e77c:	3ba3198a 	.word	0x3ba3198a
 800e780:	252049c1 	.word	0x252049c1
 800e784:	397b839a 	.word	0x397b839a
 800e788:	3fe921fb 	.word	0x3fe921fb
 800e78c:	4002d97b 	.word	0x4002d97b
 800e790:	3ff921fb 	.word	0x3ff921fb
 800e794:	413921fb 	.word	0x413921fb
 800e798:	3fe00000 	.word	0x3fe00000
 800e79c:	0800fac0 	.word	0x0800fac0
 800e7a0:	7fefffff 	.word	0x7fefffff
 800e7a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e7a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e7ac:	ee10 0a10 	vmov	r0, s0
 800e7b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e7b4:	ee10 6a10 	vmov	r6, s0
 800e7b8:	460f      	mov	r7, r1
 800e7ba:	f7f2 f9ed 	bl	8000b98 <__aeabi_d2iz>
 800e7be:	f7f1 fed1 	bl	8000564 <__aeabi_i2d>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e7ce:	f7f1 fd7b 	bl	80002c8 <__aeabi_dsub>
 800e7d2:	4b23      	ldr	r3, [pc, #140]	; (800e860 <__ieee754_rem_pio2+0x410>)
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f7f1 ff2f 	bl	8000638 <__aeabi_dmul>
 800e7da:	460f      	mov	r7, r1
 800e7dc:	4606      	mov	r6, r0
 800e7de:	f7f2 f9db 	bl	8000b98 <__aeabi_d2iz>
 800e7e2:	f7f1 febf 	bl	8000564 <__aeabi_i2d>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	4639      	mov	r1, r7
 800e7ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e7f2:	f7f1 fd69 	bl	80002c8 <__aeabi_dsub>
 800e7f6:	4b1a      	ldr	r3, [pc, #104]	; (800e860 <__ieee754_rem_pio2+0x410>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f7f1 ff1d 	bl	8000638 <__aeabi_dmul>
 800e7fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e802:	ad04      	add	r5, sp, #16
 800e804:	f04f 0803 	mov.w	r8, #3
 800e808:	46a9      	mov	r9, r5
 800e80a:	2600      	movs	r6, #0
 800e80c:	2700      	movs	r7, #0
 800e80e:	4632      	mov	r2, r6
 800e810:	463b      	mov	r3, r7
 800e812:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e816:	46c3      	mov	fp, r8
 800e818:	3d08      	subs	r5, #8
 800e81a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e81e:	f7f2 f973 	bl	8000b08 <__aeabi_dcmpeq>
 800e822:	2800      	cmp	r0, #0
 800e824:	d1f3      	bne.n	800e80e <__ieee754_rem_pio2+0x3be>
 800e826:	4b0f      	ldr	r3, [pc, #60]	; (800e864 <__ieee754_rem_pio2+0x414>)
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	2302      	movs	r3, #2
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	4622      	mov	r2, r4
 800e830:	465b      	mov	r3, fp
 800e832:	4651      	mov	r1, sl
 800e834:	4648      	mov	r0, r9
 800e836:	f000 f817 	bl	800e868 <__kernel_rem_pio2>
 800e83a:	9b02      	ldr	r3, [sp, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	4683      	mov	fp, r0
 800e840:	f6bf ae46 	bge.w	800e4d0 <__ieee754_rem_pio2+0x80>
 800e844:	e9da 2100 	ldrd	r2, r1, [sl]
 800e848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e84c:	e9ca 2300 	strd	r2, r3, [sl]
 800e850:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e858:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e85c:	e73a      	b.n	800e6d4 <__ieee754_rem_pio2+0x284>
 800e85e:	bf00      	nop
 800e860:	41700000 	.word	0x41700000
 800e864:	0800fb40 	.word	0x0800fb40

0800e868 <__kernel_rem_pio2>:
 800e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	ed2d 8b02 	vpush	{d8}
 800e870:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e874:	f112 0f14 	cmn.w	r2, #20
 800e878:	9308      	str	r3, [sp, #32]
 800e87a:	9101      	str	r1, [sp, #4]
 800e87c:	4bc4      	ldr	r3, [pc, #784]	; (800eb90 <__kernel_rem_pio2+0x328>)
 800e87e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e880:	900b      	str	r0, [sp, #44]	; 0x2c
 800e882:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e886:	9302      	str	r3, [sp, #8]
 800e888:	9b08      	ldr	r3, [sp, #32]
 800e88a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e88e:	bfa8      	it	ge
 800e890:	1ed4      	subge	r4, r2, #3
 800e892:	9306      	str	r3, [sp, #24]
 800e894:	bfb2      	itee	lt
 800e896:	2400      	movlt	r4, #0
 800e898:	2318      	movge	r3, #24
 800e89a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e89e:	f06f 0317 	mvn.w	r3, #23
 800e8a2:	fb04 3303 	mla	r3, r4, r3, r3
 800e8a6:	eb03 0a02 	add.w	sl, r3, r2
 800e8aa:	9b02      	ldr	r3, [sp, #8]
 800e8ac:	9a06      	ldr	r2, [sp, #24]
 800e8ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800eb80 <__kernel_rem_pio2+0x318>
 800e8b2:	eb03 0802 	add.w	r8, r3, r2
 800e8b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e8b8:	1aa7      	subs	r7, r4, r2
 800e8ba:	ae22      	add	r6, sp, #136	; 0x88
 800e8bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e8c0:	2500      	movs	r5, #0
 800e8c2:	4545      	cmp	r5, r8
 800e8c4:	dd13      	ble.n	800e8ee <__kernel_rem_pio2+0x86>
 800e8c6:	9b08      	ldr	r3, [sp, #32]
 800e8c8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800eb80 <__kernel_rem_pio2+0x318>
 800e8cc:	aa22      	add	r2, sp, #136	; 0x88
 800e8ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e8d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	9b02      	ldr	r3, [sp, #8]
 800e8dc:	4598      	cmp	r8, r3
 800e8de:	dc2f      	bgt.n	800e940 <__kernel_rem_pio2+0xd8>
 800e8e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e8e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e8e8:	462f      	mov	r7, r5
 800e8ea:	2600      	movs	r6, #0
 800e8ec:	e01b      	b.n	800e926 <__kernel_rem_pio2+0xbe>
 800e8ee:	42ef      	cmn	r7, r5
 800e8f0:	d407      	bmi.n	800e902 <__kernel_rem_pio2+0x9a>
 800e8f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e8f6:	f7f1 fe35 	bl	8000564 <__aeabi_i2d>
 800e8fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e8fe:	3501      	adds	r5, #1
 800e900:	e7df      	b.n	800e8c2 <__kernel_rem_pio2+0x5a>
 800e902:	ec51 0b18 	vmov	r0, r1, d8
 800e906:	e7f8      	b.n	800e8fa <__kernel_rem_pio2+0x92>
 800e908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e90c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e910:	f7f1 fe92 	bl	8000638 <__aeabi_dmul>
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e91c:	f7f1 fcd6 	bl	80002cc <__adddf3>
 800e920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e924:	3601      	adds	r6, #1
 800e926:	9b06      	ldr	r3, [sp, #24]
 800e928:	429e      	cmp	r6, r3
 800e92a:	f1a7 0708 	sub.w	r7, r7, #8
 800e92e:	ddeb      	ble.n	800e908 <__kernel_rem_pio2+0xa0>
 800e930:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e934:	f108 0801 	add.w	r8, r8, #1
 800e938:	ecab 7b02 	vstmia	fp!, {d7}
 800e93c:	3508      	adds	r5, #8
 800e93e:	e7cc      	b.n	800e8da <__kernel_rem_pio2+0x72>
 800e940:	9b02      	ldr	r3, [sp, #8]
 800e942:	aa0e      	add	r2, sp, #56	; 0x38
 800e944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e948:	930d      	str	r3, [sp, #52]	; 0x34
 800e94a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e94c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e950:	9c02      	ldr	r4, [sp, #8]
 800e952:	930c      	str	r3, [sp, #48]	; 0x30
 800e954:	00e3      	lsls	r3, r4, #3
 800e956:	930a      	str	r3, [sp, #40]	; 0x28
 800e958:	ab9a      	add	r3, sp, #616	; 0x268
 800e95a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e95e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e962:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e966:	ab72      	add	r3, sp, #456	; 0x1c8
 800e968:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e96c:	46c3      	mov	fp, r8
 800e96e:	46a1      	mov	r9, r4
 800e970:	f1b9 0f00 	cmp.w	r9, #0
 800e974:	f1a5 0508 	sub.w	r5, r5, #8
 800e978:	dc77      	bgt.n	800ea6a <__kernel_rem_pio2+0x202>
 800e97a:	ec47 6b10 	vmov	d0, r6, r7
 800e97e:	4650      	mov	r0, sl
 800e980:	f000 fd4e 	bl	800f420 <scalbn>
 800e984:	ec57 6b10 	vmov	r6, r7, d0
 800e988:	2200      	movs	r2, #0
 800e98a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e98e:	ee10 0a10 	vmov	r0, s0
 800e992:	4639      	mov	r1, r7
 800e994:	f7f1 fe50 	bl	8000638 <__aeabi_dmul>
 800e998:	ec41 0b10 	vmov	d0, r0, r1
 800e99c:	f000 fcc0 	bl	800f320 <floor>
 800e9a0:	4b7c      	ldr	r3, [pc, #496]	; (800eb94 <__kernel_rem_pio2+0x32c>)
 800e9a2:	ec51 0b10 	vmov	r0, r1, d0
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f7f1 fe46 	bl	8000638 <__aeabi_dmul>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	f7f1 fc88 	bl	80002c8 <__aeabi_dsub>
 800e9b8:	460f      	mov	r7, r1
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	f7f2 f8ec 	bl	8000b98 <__aeabi_d2iz>
 800e9c0:	9004      	str	r0, [sp, #16]
 800e9c2:	f7f1 fdcf 	bl	8000564 <__aeabi_i2d>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	f7f1 fc7b 	bl	80002c8 <__aeabi_dsub>
 800e9d2:	f1ba 0f00 	cmp.w	sl, #0
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	460f      	mov	r7, r1
 800e9da:	dd6d      	ble.n	800eab8 <__kernel_rem_pio2+0x250>
 800e9dc:	1e62      	subs	r2, r4, #1
 800e9de:	ab0e      	add	r3, sp, #56	; 0x38
 800e9e0:	9d04      	ldr	r5, [sp, #16]
 800e9e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e9e6:	f1ca 0118 	rsb	r1, sl, #24
 800e9ea:	fa40 f301 	asr.w	r3, r0, r1
 800e9ee:	441d      	add	r5, r3
 800e9f0:	408b      	lsls	r3, r1
 800e9f2:	1ac0      	subs	r0, r0, r3
 800e9f4:	ab0e      	add	r3, sp, #56	; 0x38
 800e9f6:	9504      	str	r5, [sp, #16]
 800e9f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e9fc:	f1ca 0317 	rsb	r3, sl, #23
 800ea00:	fa40 fb03 	asr.w	fp, r0, r3
 800ea04:	f1bb 0f00 	cmp.w	fp, #0
 800ea08:	dd65      	ble.n	800ead6 <__kernel_rem_pio2+0x26e>
 800ea0a:	9b04      	ldr	r3, [sp, #16]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	3301      	adds	r3, #1
 800ea10:	9304      	str	r3, [sp, #16]
 800ea12:	4615      	mov	r5, r2
 800ea14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ea18:	4294      	cmp	r4, r2
 800ea1a:	f300 809c 	bgt.w	800eb56 <__kernel_rem_pio2+0x2ee>
 800ea1e:	f1ba 0f00 	cmp.w	sl, #0
 800ea22:	dd07      	ble.n	800ea34 <__kernel_rem_pio2+0x1cc>
 800ea24:	f1ba 0f01 	cmp.w	sl, #1
 800ea28:	f000 80c0 	beq.w	800ebac <__kernel_rem_pio2+0x344>
 800ea2c:	f1ba 0f02 	cmp.w	sl, #2
 800ea30:	f000 80c6 	beq.w	800ebc0 <__kernel_rem_pio2+0x358>
 800ea34:	f1bb 0f02 	cmp.w	fp, #2
 800ea38:	d14d      	bne.n	800ead6 <__kernel_rem_pio2+0x26e>
 800ea3a:	4632      	mov	r2, r6
 800ea3c:	463b      	mov	r3, r7
 800ea3e:	4956      	ldr	r1, [pc, #344]	; (800eb98 <__kernel_rem_pio2+0x330>)
 800ea40:	2000      	movs	r0, #0
 800ea42:	f7f1 fc41 	bl	80002c8 <__aeabi_dsub>
 800ea46:	4606      	mov	r6, r0
 800ea48:	460f      	mov	r7, r1
 800ea4a:	2d00      	cmp	r5, #0
 800ea4c:	d043      	beq.n	800ead6 <__kernel_rem_pio2+0x26e>
 800ea4e:	4650      	mov	r0, sl
 800ea50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800eb88 <__kernel_rem_pio2+0x320>
 800ea54:	f000 fce4 	bl	800f420 <scalbn>
 800ea58:	4630      	mov	r0, r6
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	ec53 2b10 	vmov	r2, r3, d0
 800ea60:	f7f1 fc32 	bl	80002c8 <__aeabi_dsub>
 800ea64:	4606      	mov	r6, r0
 800ea66:	460f      	mov	r7, r1
 800ea68:	e035      	b.n	800ead6 <__kernel_rem_pio2+0x26e>
 800ea6a:	4b4c      	ldr	r3, [pc, #304]	; (800eb9c <__kernel_rem_pio2+0x334>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	4630      	mov	r0, r6
 800ea70:	4639      	mov	r1, r7
 800ea72:	f7f1 fde1 	bl	8000638 <__aeabi_dmul>
 800ea76:	f7f2 f88f 	bl	8000b98 <__aeabi_d2iz>
 800ea7a:	f7f1 fd73 	bl	8000564 <__aeabi_i2d>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	ec43 2b18 	vmov	d8, r2, r3
 800ea86:	4b46      	ldr	r3, [pc, #280]	; (800eba0 <__kernel_rem_pio2+0x338>)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f7f1 fdd5 	bl	8000638 <__aeabi_dmul>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	460b      	mov	r3, r1
 800ea92:	4630      	mov	r0, r6
 800ea94:	4639      	mov	r1, r7
 800ea96:	f7f1 fc17 	bl	80002c8 <__aeabi_dsub>
 800ea9a:	f7f2 f87d 	bl	8000b98 <__aeabi_d2iz>
 800ea9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaa2:	f84b 0b04 	str.w	r0, [fp], #4
 800eaa6:	ec51 0b18 	vmov	r0, r1, d8
 800eaaa:	f7f1 fc0f 	bl	80002cc <__adddf3>
 800eaae:	f109 39ff 	add.w	r9, r9, #4294967295
 800eab2:	4606      	mov	r6, r0
 800eab4:	460f      	mov	r7, r1
 800eab6:	e75b      	b.n	800e970 <__kernel_rem_pio2+0x108>
 800eab8:	d106      	bne.n	800eac8 <__kernel_rem_pio2+0x260>
 800eaba:	1e63      	subs	r3, r4, #1
 800eabc:	aa0e      	add	r2, sp, #56	; 0x38
 800eabe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eac2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800eac6:	e79d      	b.n	800ea04 <__kernel_rem_pio2+0x19c>
 800eac8:	4b36      	ldr	r3, [pc, #216]	; (800eba4 <__kernel_rem_pio2+0x33c>)
 800eaca:	2200      	movs	r2, #0
 800eacc:	f7f2 f83a 	bl	8000b44 <__aeabi_dcmpge>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	d13d      	bne.n	800eb50 <__kernel_rem_pio2+0x2e8>
 800ead4:	4683      	mov	fp, r0
 800ead6:	2200      	movs	r2, #0
 800ead8:	2300      	movs	r3, #0
 800eada:	4630      	mov	r0, r6
 800eadc:	4639      	mov	r1, r7
 800eade:	f7f2 f813 	bl	8000b08 <__aeabi_dcmpeq>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	f000 80c0 	beq.w	800ec68 <__kernel_rem_pio2+0x400>
 800eae8:	1e65      	subs	r5, r4, #1
 800eaea:	462b      	mov	r3, r5
 800eaec:	2200      	movs	r2, #0
 800eaee:	9902      	ldr	r1, [sp, #8]
 800eaf0:	428b      	cmp	r3, r1
 800eaf2:	da6c      	bge.n	800ebce <__kernel_rem_pio2+0x366>
 800eaf4:	2a00      	cmp	r2, #0
 800eaf6:	f000 8089 	beq.w	800ec0c <__kernel_rem_pio2+0x3a4>
 800eafa:	ab0e      	add	r3, sp, #56	; 0x38
 800eafc:	f1aa 0a18 	sub.w	sl, sl, #24
 800eb00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 80ad 	beq.w	800ec64 <__kernel_rem_pio2+0x3fc>
 800eb0a:	4650      	mov	r0, sl
 800eb0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800eb88 <__kernel_rem_pio2+0x320>
 800eb10:	f000 fc86 	bl	800f420 <scalbn>
 800eb14:	ab9a      	add	r3, sp, #616	; 0x268
 800eb16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb1a:	ec57 6b10 	vmov	r6, r7, d0
 800eb1e:	00ec      	lsls	r4, r5, #3
 800eb20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800eb24:	46aa      	mov	sl, r5
 800eb26:	f1ba 0f00 	cmp.w	sl, #0
 800eb2a:	f280 80d6 	bge.w	800ecda <__kernel_rem_pio2+0x472>
 800eb2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800eb80 <__kernel_rem_pio2+0x318>
 800eb32:	462e      	mov	r6, r5
 800eb34:	2e00      	cmp	r6, #0
 800eb36:	f2c0 8104 	blt.w	800ed42 <__kernel_rem_pio2+0x4da>
 800eb3a:	ab72      	add	r3, sp, #456	; 0x1c8
 800eb3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800eb40:	f8df a064 	ldr.w	sl, [pc, #100]	; 800eba8 <__kernel_rem_pio2+0x340>
 800eb44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800eb48:	f04f 0800 	mov.w	r8, #0
 800eb4c:	1baf      	subs	r7, r5, r6
 800eb4e:	e0ea      	b.n	800ed26 <__kernel_rem_pio2+0x4be>
 800eb50:	f04f 0b02 	mov.w	fp, #2
 800eb54:	e759      	b.n	800ea0a <__kernel_rem_pio2+0x1a2>
 800eb56:	f8d8 3000 	ldr.w	r3, [r8]
 800eb5a:	b955      	cbnz	r5, 800eb72 <__kernel_rem_pio2+0x30a>
 800eb5c:	b123      	cbz	r3, 800eb68 <__kernel_rem_pio2+0x300>
 800eb5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eb62:	f8c8 3000 	str.w	r3, [r8]
 800eb66:	2301      	movs	r3, #1
 800eb68:	3201      	adds	r2, #1
 800eb6a:	f108 0804 	add.w	r8, r8, #4
 800eb6e:	461d      	mov	r5, r3
 800eb70:	e752      	b.n	800ea18 <__kernel_rem_pio2+0x1b0>
 800eb72:	1acb      	subs	r3, r1, r3
 800eb74:	f8c8 3000 	str.w	r3, [r8]
 800eb78:	462b      	mov	r3, r5
 800eb7a:	e7f5      	b.n	800eb68 <__kernel_rem_pio2+0x300>
 800eb7c:	f3af 8000 	nop.w
	...
 800eb8c:	3ff00000 	.word	0x3ff00000
 800eb90:	0800fc88 	.word	0x0800fc88
 800eb94:	40200000 	.word	0x40200000
 800eb98:	3ff00000 	.word	0x3ff00000
 800eb9c:	3e700000 	.word	0x3e700000
 800eba0:	41700000 	.word	0x41700000
 800eba4:	3fe00000 	.word	0x3fe00000
 800eba8:	0800fc48 	.word	0x0800fc48
 800ebac:	1e62      	subs	r2, r4, #1
 800ebae:	ab0e      	add	r3, sp, #56	; 0x38
 800ebb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ebb8:	a90e      	add	r1, sp, #56	; 0x38
 800ebba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ebbe:	e739      	b.n	800ea34 <__kernel_rem_pio2+0x1cc>
 800ebc0:	1e62      	subs	r2, r4, #1
 800ebc2:	ab0e      	add	r3, sp, #56	; 0x38
 800ebc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ebcc:	e7f4      	b.n	800ebb8 <__kernel_rem_pio2+0x350>
 800ebce:	a90e      	add	r1, sp, #56	; 0x38
 800ebd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	430a      	orrs	r2, r1
 800ebd8:	e789      	b.n	800eaee <__kernel_rem_pio2+0x286>
 800ebda:	3301      	adds	r3, #1
 800ebdc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ebe0:	2900      	cmp	r1, #0
 800ebe2:	d0fa      	beq.n	800ebda <__kernel_rem_pio2+0x372>
 800ebe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebe6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ebea:	446a      	add	r2, sp
 800ebec:	3a98      	subs	r2, #152	; 0x98
 800ebee:	920a      	str	r2, [sp, #40]	; 0x28
 800ebf0:	9a08      	ldr	r2, [sp, #32]
 800ebf2:	18e3      	adds	r3, r4, r3
 800ebf4:	18a5      	adds	r5, r4, r2
 800ebf6:	aa22      	add	r2, sp, #136	; 0x88
 800ebf8:	f104 0801 	add.w	r8, r4, #1
 800ebfc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ec00:	9304      	str	r3, [sp, #16]
 800ec02:	9b04      	ldr	r3, [sp, #16]
 800ec04:	4543      	cmp	r3, r8
 800ec06:	da04      	bge.n	800ec12 <__kernel_rem_pio2+0x3aa>
 800ec08:	461c      	mov	r4, r3
 800ec0a:	e6a3      	b.n	800e954 <__kernel_rem_pio2+0xec>
 800ec0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e7e4      	b.n	800ebdc <__kernel_rem_pio2+0x374>
 800ec12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ec18:	f7f1 fca4 	bl	8000564 <__aeabi_i2d>
 800ec1c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ec20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec22:	46ab      	mov	fp, r5
 800ec24:	461c      	mov	r4, r3
 800ec26:	f04f 0900 	mov.w	r9, #0
 800ec2a:	2600      	movs	r6, #0
 800ec2c:	2700      	movs	r7, #0
 800ec2e:	9b06      	ldr	r3, [sp, #24]
 800ec30:	4599      	cmp	r9, r3
 800ec32:	dd06      	ble.n	800ec42 <__kernel_rem_pio2+0x3da>
 800ec34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec36:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ec3a:	f108 0801 	add.w	r8, r8, #1
 800ec3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec40:	e7df      	b.n	800ec02 <__kernel_rem_pio2+0x39a>
 800ec42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ec46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ec4a:	f7f1 fcf5 	bl	8000638 <__aeabi_dmul>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4630      	mov	r0, r6
 800ec54:	4639      	mov	r1, r7
 800ec56:	f7f1 fb39 	bl	80002cc <__adddf3>
 800ec5a:	f109 0901 	add.w	r9, r9, #1
 800ec5e:	4606      	mov	r6, r0
 800ec60:	460f      	mov	r7, r1
 800ec62:	e7e4      	b.n	800ec2e <__kernel_rem_pio2+0x3c6>
 800ec64:	3d01      	subs	r5, #1
 800ec66:	e748      	b.n	800eafa <__kernel_rem_pio2+0x292>
 800ec68:	ec47 6b10 	vmov	d0, r6, r7
 800ec6c:	f1ca 0000 	rsb	r0, sl, #0
 800ec70:	f000 fbd6 	bl	800f420 <scalbn>
 800ec74:	ec57 6b10 	vmov	r6, r7, d0
 800ec78:	4ba0      	ldr	r3, [pc, #640]	; (800eefc <__kernel_rem_pio2+0x694>)
 800ec7a:	ee10 0a10 	vmov	r0, s0
 800ec7e:	2200      	movs	r2, #0
 800ec80:	4639      	mov	r1, r7
 800ec82:	f7f1 ff5f 	bl	8000b44 <__aeabi_dcmpge>
 800ec86:	b1f8      	cbz	r0, 800ecc8 <__kernel_rem_pio2+0x460>
 800ec88:	4b9d      	ldr	r3, [pc, #628]	; (800ef00 <__kernel_rem_pio2+0x698>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	4639      	mov	r1, r7
 800ec90:	f7f1 fcd2 	bl	8000638 <__aeabi_dmul>
 800ec94:	f7f1 ff80 	bl	8000b98 <__aeabi_d2iz>
 800ec98:	4680      	mov	r8, r0
 800ec9a:	f7f1 fc63 	bl	8000564 <__aeabi_i2d>
 800ec9e:	4b97      	ldr	r3, [pc, #604]	; (800eefc <__kernel_rem_pio2+0x694>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	f7f1 fcc9 	bl	8000638 <__aeabi_dmul>
 800eca6:	460b      	mov	r3, r1
 800eca8:	4602      	mov	r2, r0
 800ecaa:	4639      	mov	r1, r7
 800ecac:	4630      	mov	r0, r6
 800ecae:	f7f1 fb0b 	bl	80002c8 <__aeabi_dsub>
 800ecb2:	f7f1 ff71 	bl	8000b98 <__aeabi_d2iz>
 800ecb6:	1c65      	adds	r5, r4, #1
 800ecb8:	ab0e      	add	r3, sp, #56	; 0x38
 800ecba:	f10a 0a18 	add.w	sl, sl, #24
 800ecbe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecc2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ecc6:	e720      	b.n	800eb0a <__kernel_rem_pio2+0x2a2>
 800ecc8:	4630      	mov	r0, r6
 800ecca:	4639      	mov	r1, r7
 800eccc:	f7f1 ff64 	bl	8000b98 <__aeabi_d2iz>
 800ecd0:	ab0e      	add	r3, sp, #56	; 0x38
 800ecd2:	4625      	mov	r5, r4
 800ecd4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecd8:	e717      	b.n	800eb0a <__kernel_rem_pio2+0x2a2>
 800ecda:	ab0e      	add	r3, sp, #56	; 0x38
 800ecdc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ece0:	f7f1 fc40 	bl	8000564 <__aeabi_i2d>
 800ece4:	4632      	mov	r2, r6
 800ece6:	463b      	mov	r3, r7
 800ece8:	f7f1 fca6 	bl	8000638 <__aeabi_dmul>
 800ecec:	4b84      	ldr	r3, [pc, #528]	; (800ef00 <__kernel_rem_pio2+0x698>)
 800ecee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	f7f1 fc9e 	bl	8000638 <__aeabi_dmul>
 800ecfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed00:	4606      	mov	r6, r0
 800ed02:	460f      	mov	r7, r1
 800ed04:	e70f      	b.n	800eb26 <__kernel_rem_pio2+0x2be>
 800ed06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ed0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ed0e:	f7f1 fc93 	bl	8000638 <__aeabi_dmul>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed1a:	f7f1 fad7 	bl	80002cc <__adddf3>
 800ed1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed22:	f108 0801 	add.w	r8, r8, #1
 800ed26:	9b02      	ldr	r3, [sp, #8]
 800ed28:	4598      	cmp	r8, r3
 800ed2a:	dc01      	bgt.n	800ed30 <__kernel_rem_pio2+0x4c8>
 800ed2c:	45b8      	cmp	r8, r7
 800ed2e:	ddea      	ble.n	800ed06 <__kernel_rem_pio2+0x49e>
 800ed30:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ed34:	ab4a      	add	r3, sp, #296	; 0x128
 800ed36:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ed3a:	ed87 7b00 	vstr	d7, [r7]
 800ed3e:	3e01      	subs	r6, #1
 800ed40:	e6f8      	b.n	800eb34 <__kernel_rem_pio2+0x2cc>
 800ed42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	dc0b      	bgt.n	800ed60 <__kernel_rem_pio2+0x4f8>
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	dc35      	bgt.n	800edb8 <__kernel_rem_pio2+0x550>
 800ed4c:	d059      	beq.n	800ee02 <__kernel_rem_pio2+0x59a>
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	f003 0007 	and.w	r0, r3, #7
 800ed54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ed58:	ecbd 8b02 	vpop	{d8}
 800ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ed62:	2b03      	cmp	r3, #3
 800ed64:	d1f3      	bne.n	800ed4e <__kernel_rem_pio2+0x4e6>
 800ed66:	ab4a      	add	r3, sp, #296	; 0x128
 800ed68:	4423      	add	r3, r4
 800ed6a:	9306      	str	r3, [sp, #24]
 800ed6c:	461c      	mov	r4, r3
 800ed6e:	469a      	mov	sl, r3
 800ed70:	9502      	str	r5, [sp, #8]
 800ed72:	9b02      	ldr	r3, [sp, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f1aa 0a08 	sub.w	sl, sl, #8
 800ed7a:	dc6b      	bgt.n	800ee54 <__kernel_rem_pio2+0x5ec>
 800ed7c:	46aa      	mov	sl, r5
 800ed7e:	f1ba 0f01 	cmp.w	sl, #1
 800ed82:	f1a4 0408 	sub.w	r4, r4, #8
 800ed86:	f300 8085 	bgt.w	800ee94 <__kernel_rem_pio2+0x62c>
 800ed8a:	9c06      	ldr	r4, [sp, #24]
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	3408      	adds	r4, #8
 800ed90:	2100      	movs	r1, #0
 800ed92:	2d01      	cmp	r5, #1
 800ed94:	f300 809d 	bgt.w	800eed2 <__kernel_rem_pio2+0x66a>
 800ed98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ed9c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800eda0:	f1bb 0f00 	cmp.w	fp, #0
 800eda4:	f040 809b 	bne.w	800eede <__kernel_rem_pio2+0x676>
 800eda8:	9b01      	ldr	r3, [sp, #4]
 800edaa:	e9c3 5600 	strd	r5, r6, [r3]
 800edae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800edb2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800edb6:	e7ca      	b.n	800ed4e <__kernel_rem_pio2+0x4e6>
 800edb8:	3408      	adds	r4, #8
 800edba:	ab4a      	add	r3, sp, #296	; 0x128
 800edbc:	441c      	add	r4, r3
 800edbe:	462e      	mov	r6, r5
 800edc0:	2000      	movs	r0, #0
 800edc2:	2100      	movs	r1, #0
 800edc4:	2e00      	cmp	r6, #0
 800edc6:	da36      	bge.n	800ee36 <__kernel_rem_pio2+0x5ce>
 800edc8:	f1bb 0f00 	cmp.w	fp, #0
 800edcc:	d039      	beq.n	800ee42 <__kernel_rem_pio2+0x5da>
 800edce:	4602      	mov	r2, r0
 800edd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edd4:	9c01      	ldr	r4, [sp, #4]
 800edd6:	e9c4 2300 	strd	r2, r3, [r4]
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ede2:	f7f1 fa71 	bl	80002c8 <__aeabi_dsub>
 800ede6:	ae4c      	add	r6, sp, #304	; 0x130
 800ede8:	2401      	movs	r4, #1
 800edea:	42a5      	cmp	r5, r4
 800edec:	da2c      	bge.n	800ee48 <__kernel_rem_pio2+0x5e0>
 800edee:	f1bb 0f00 	cmp.w	fp, #0
 800edf2:	d002      	beq.n	800edfa <__kernel_rem_pio2+0x592>
 800edf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edf8:	4619      	mov	r1, r3
 800edfa:	9b01      	ldr	r3, [sp, #4]
 800edfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ee00:	e7a5      	b.n	800ed4e <__kernel_rem_pio2+0x4e6>
 800ee02:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ee06:	eb0d 0403 	add.w	r4, sp, r3
 800ee0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ee0e:	2000      	movs	r0, #0
 800ee10:	2100      	movs	r1, #0
 800ee12:	2d00      	cmp	r5, #0
 800ee14:	da09      	bge.n	800ee2a <__kernel_rem_pio2+0x5c2>
 800ee16:	f1bb 0f00 	cmp.w	fp, #0
 800ee1a:	d002      	beq.n	800ee22 <__kernel_rem_pio2+0x5ba>
 800ee1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee20:	4619      	mov	r1, r3
 800ee22:	9b01      	ldr	r3, [sp, #4]
 800ee24:	e9c3 0100 	strd	r0, r1, [r3]
 800ee28:	e791      	b.n	800ed4e <__kernel_rem_pio2+0x4e6>
 800ee2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee2e:	f7f1 fa4d 	bl	80002cc <__adddf3>
 800ee32:	3d01      	subs	r5, #1
 800ee34:	e7ed      	b.n	800ee12 <__kernel_rem_pio2+0x5aa>
 800ee36:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee3a:	f7f1 fa47 	bl	80002cc <__adddf3>
 800ee3e:	3e01      	subs	r6, #1
 800ee40:	e7c0      	b.n	800edc4 <__kernel_rem_pio2+0x55c>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	e7c5      	b.n	800edd4 <__kernel_rem_pio2+0x56c>
 800ee48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ee4c:	f7f1 fa3e 	bl	80002cc <__adddf3>
 800ee50:	3401      	adds	r4, #1
 800ee52:	e7ca      	b.n	800edea <__kernel_rem_pio2+0x582>
 800ee54:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ee5c:	9b02      	ldr	r3, [sp, #8]
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	9302      	str	r3, [sp, #8]
 800ee62:	4632      	mov	r2, r6
 800ee64:	463b      	mov	r3, r7
 800ee66:	4640      	mov	r0, r8
 800ee68:	4649      	mov	r1, r9
 800ee6a:	f7f1 fa2f 	bl	80002cc <__adddf3>
 800ee6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee72:	4602      	mov	r2, r0
 800ee74:	460b      	mov	r3, r1
 800ee76:	4640      	mov	r0, r8
 800ee78:	4649      	mov	r1, r9
 800ee7a:	f7f1 fa25 	bl	80002c8 <__aeabi_dsub>
 800ee7e:	4632      	mov	r2, r6
 800ee80:	463b      	mov	r3, r7
 800ee82:	f7f1 fa23 	bl	80002cc <__adddf3>
 800ee86:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ee8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee8e:	ed8a 7b00 	vstr	d7, [sl]
 800ee92:	e76e      	b.n	800ed72 <__kernel_rem_pio2+0x50a>
 800ee94:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ee9c:	4640      	mov	r0, r8
 800ee9e:	4632      	mov	r2, r6
 800eea0:	463b      	mov	r3, r7
 800eea2:	4649      	mov	r1, r9
 800eea4:	f7f1 fa12 	bl	80002cc <__adddf3>
 800eea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeac:	4602      	mov	r2, r0
 800eeae:	460b      	mov	r3, r1
 800eeb0:	4640      	mov	r0, r8
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	f7f1 fa08 	bl	80002c8 <__aeabi_dsub>
 800eeb8:	4632      	mov	r2, r6
 800eeba:	463b      	mov	r3, r7
 800eebc:	f7f1 fa06 	bl	80002cc <__adddf3>
 800eec0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eec4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eec8:	ed84 7b00 	vstr	d7, [r4]
 800eecc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eed0:	e755      	b.n	800ed7e <__kernel_rem_pio2+0x516>
 800eed2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eed6:	f7f1 f9f9 	bl	80002cc <__adddf3>
 800eeda:	3d01      	subs	r5, #1
 800eedc:	e759      	b.n	800ed92 <__kernel_rem_pio2+0x52a>
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	9a01      	ldr	r2, [sp, #4]
 800eee2:	601d      	str	r5, [r3, #0]
 800eee4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800eee8:	605c      	str	r4, [r3, #4]
 800eeea:	609f      	str	r7, [r3, #8]
 800eeec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800eef0:	60d3      	str	r3, [r2, #12]
 800eef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eef6:	6110      	str	r0, [r2, #16]
 800eef8:	6153      	str	r3, [r2, #20]
 800eefa:	e728      	b.n	800ed4e <__kernel_rem_pio2+0x4e6>
 800eefc:	41700000 	.word	0x41700000
 800ef00:	3e700000 	.word	0x3e700000
 800ef04:	00000000 	.word	0x00000000

0800ef08 <__kernel_tan>:
 800ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	ed2d 8b06 	vpush	{d8-d10}
 800ef10:	ec5b ab10 	vmov	sl, fp, d0
 800ef14:	4be0      	ldr	r3, [pc, #896]	; (800f298 <__kernel_tan+0x390>)
 800ef16:	b083      	sub	sp, #12
 800ef18:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800ef1c:	429f      	cmp	r7, r3
 800ef1e:	ec59 8b11 	vmov	r8, r9, d1
 800ef22:	4606      	mov	r6, r0
 800ef24:	f8cd b000 	str.w	fp, [sp]
 800ef28:	dc61      	bgt.n	800efee <__kernel_tan+0xe6>
 800ef2a:	ee10 0a10 	vmov	r0, s0
 800ef2e:	4659      	mov	r1, fp
 800ef30:	f7f1 fe32 	bl	8000b98 <__aeabi_d2iz>
 800ef34:	4605      	mov	r5, r0
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f040 8083 	bne.w	800f042 <__kernel_tan+0x13a>
 800ef3c:	1c73      	adds	r3, r6, #1
 800ef3e:	4652      	mov	r2, sl
 800ef40:	4313      	orrs	r3, r2
 800ef42:	433b      	orrs	r3, r7
 800ef44:	d112      	bne.n	800ef6c <__kernel_tan+0x64>
 800ef46:	ec4b ab10 	vmov	d0, sl, fp
 800ef4a:	f7ff fa41 	bl	800e3d0 <fabs>
 800ef4e:	49d3      	ldr	r1, [pc, #844]	; (800f29c <__kernel_tan+0x394>)
 800ef50:	ec53 2b10 	vmov	r2, r3, d0
 800ef54:	2000      	movs	r0, #0
 800ef56:	f7f1 fc99 	bl	800088c <__aeabi_ddiv>
 800ef5a:	4682      	mov	sl, r0
 800ef5c:	468b      	mov	fp, r1
 800ef5e:	ec4b ab10 	vmov	d0, sl, fp
 800ef62:	b003      	add	sp, #12
 800ef64:	ecbd 8b06 	vpop	{d8-d10}
 800ef68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6c:	2e01      	cmp	r6, #1
 800ef6e:	d0f6      	beq.n	800ef5e <__kernel_tan+0x56>
 800ef70:	4642      	mov	r2, r8
 800ef72:	464b      	mov	r3, r9
 800ef74:	4650      	mov	r0, sl
 800ef76:	4659      	mov	r1, fp
 800ef78:	f7f1 f9a8 	bl	80002cc <__adddf3>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	460b      	mov	r3, r1
 800ef80:	460f      	mov	r7, r1
 800ef82:	2000      	movs	r0, #0
 800ef84:	49c6      	ldr	r1, [pc, #792]	; (800f2a0 <__kernel_tan+0x398>)
 800ef86:	f7f1 fc81 	bl	800088c <__aeabi_ddiv>
 800ef8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ef8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef92:	462e      	mov	r6, r5
 800ef94:	4652      	mov	r2, sl
 800ef96:	462c      	mov	r4, r5
 800ef98:	4630      	mov	r0, r6
 800ef9a:	461d      	mov	r5, r3
 800ef9c:	4639      	mov	r1, r7
 800ef9e:	465b      	mov	r3, fp
 800efa0:	f7f1 f992 	bl	80002c8 <__aeabi_dsub>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4640      	mov	r0, r8
 800efaa:	4649      	mov	r1, r9
 800efac:	f7f1 f98c 	bl	80002c8 <__aeabi_dsub>
 800efb0:	4632      	mov	r2, r6
 800efb2:	462b      	mov	r3, r5
 800efb4:	f7f1 fb40 	bl	8000638 <__aeabi_dmul>
 800efb8:	4632      	mov	r2, r6
 800efba:	4680      	mov	r8, r0
 800efbc:	4689      	mov	r9, r1
 800efbe:	462b      	mov	r3, r5
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7f1 fb38 	bl	8000638 <__aeabi_dmul>
 800efc8:	4bb4      	ldr	r3, [pc, #720]	; (800f29c <__kernel_tan+0x394>)
 800efca:	2200      	movs	r2, #0
 800efcc:	f7f1 f97e 	bl	80002cc <__adddf3>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4640      	mov	r0, r8
 800efd6:	4649      	mov	r1, r9
 800efd8:	f7f1 f978 	bl	80002cc <__adddf3>
 800efdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efe0:	f7f1 fb2a 	bl	8000638 <__aeabi_dmul>
 800efe4:	4622      	mov	r2, r4
 800efe6:	462b      	mov	r3, r5
 800efe8:	f7f1 f970 	bl	80002cc <__adddf3>
 800efec:	e7b5      	b.n	800ef5a <__kernel_tan+0x52>
 800efee:	4bad      	ldr	r3, [pc, #692]	; (800f2a4 <__kernel_tan+0x39c>)
 800eff0:	429f      	cmp	r7, r3
 800eff2:	dd26      	ble.n	800f042 <__kernel_tan+0x13a>
 800eff4:	9b00      	ldr	r3, [sp, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	da09      	bge.n	800f00e <__kernel_tan+0x106>
 800effa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800effe:	469b      	mov	fp, r3
 800f000:	ee10 aa10 	vmov	sl, s0
 800f004:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f008:	ee11 8a10 	vmov	r8, s2
 800f00c:	4699      	mov	r9, r3
 800f00e:	4652      	mov	r2, sl
 800f010:	465b      	mov	r3, fp
 800f012:	a183      	add	r1, pc, #524	; (adr r1, 800f220 <__kernel_tan+0x318>)
 800f014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f018:	f7f1 f956 	bl	80002c8 <__aeabi_dsub>
 800f01c:	4642      	mov	r2, r8
 800f01e:	464b      	mov	r3, r9
 800f020:	4604      	mov	r4, r0
 800f022:	460d      	mov	r5, r1
 800f024:	a180      	add	r1, pc, #512	; (adr r1, 800f228 <__kernel_tan+0x320>)
 800f026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f02a:	f7f1 f94d 	bl	80002c8 <__aeabi_dsub>
 800f02e:	4622      	mov	r2, r4
 800f030:	462b      	mov	r3, r5
 800f032:	f7f1 f94b 	bl	80002cc <__adddf3>
 800f036:	f04f 0800 	mov.w	r8, #0
 800f03a:	4682      	mov	sl, r0
 800f03c:	468b      	mov	fp, r1
 800f03e:	f04f 0900 	mov.w	r9, #0
 800f042:	4652      	mov	r2, sl
 800f044:	465b      	mov	r3, fp
 800f046:	4650      	mov	r0, sl
 800f048:	4659      	mov	r1, fp
 800f04a:	f7f1 faf5 	bl	8000638 <__aeabi_dmul>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	ec43 2b18 	vmov	d8, r2, r3
 800f056:	f7f1 faef 	bl	8000638 <__aeabi_dmul>
 800f05a:	ec53 2b18 	vmov	r2, r3, d8
 800f05e:	4604      	mov	r4, r0
 800f060:	460d      	mov	r5, r1
 800f062:	4650      	mov	r0, sl
 800f064:	4659      	mov	r1, fp
 800f066:	f7f1 fae7 	bl	8000638 <__aeabi_dmul>
 800f06a:	a371      	add	r3, pc, #452	; (adr r3, 800f230 <__kernel_tan+0x328>)
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	ec41 0b19 	vmov	d9, r0, r1
 800f074:	4620      	mov	r0, r4
 800f076:	4629      	mov	r1, r5
 800f078:	f7f1 fade 	bl	8000638 <__aeabi_dmul>
 800f07c:	a36e      	add	r3, pc, #440	; (adr r3, 800f238 <__kernel_tan+0x330>)
 800f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f082:	f7f1 f923 	bl	80002cc <__adddf3>
 800f086:	4622      	mov	r2, r4
 800f088:	462b      	mov	r3, r5
 800f08a:	f7f1 fad5 	bl	8000638 <__aeabi_dmul>
 800f08e:	a36c      	add	r3, pc, #432	; (adr r3, 800f240 <__kernel_tan+0x338>)
 800f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f094:	f7f1 f91a 	bl	80002cc <__adddf3>
 800f098:	4622      	mov	r2, r4
 800f09a:	462b      	mov	r3, r5
 800f09c:	f7f1 facc 	bl	8000638 <__aeabi_dmul>
 800f0a0:	a369      	add	r3, pc, #420	; (adr r3, 800f248 <__kernel_tan+0x340>)
 800f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a6:	f7f1 f911 	bl	80002cc <__adddf3>
 800f0aa:	4622      	mov	r2, r4
 800f0ac:	462b      	mov	r3, r5
 800f0ae:	f7f1 fac3 	bl	8000638 <__aeabi_dmul>
 800f0b2:	a367      	add	r3, pc, #412	; (adr r3, 800f250 <__kernel_tan+0x348>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	f7f1 f908 	bl	80002cc <__adddf3>
 800f0bc:	4622      	mov	r2, r4
 800f0be:	462b      	mov	r3, r5
 800f0c0:	f7f1 faba 	bl	8000638 <__aeabi_dmul>
 800f0c4:	a364      	add	r3, pc, #400	; (adr r3, 800f258 <__kernel_tan+0x350>)
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	f7f1 f8ff 	bl	80002cc <__adddf3>
 800f0ce:	ec53 2b18 	vmov	r2, r3, d8
 800f0d2:	f7f1 fab1 	bl	8000638 <__aeabi_dmul>
 800f0d6:	a362      	add	r3, pc, #392	; (adr r3, 800f260 <__kernel_tan+0x358>)
 800f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0dc:	ec41 0b1a 	vmov	d10, r0, r1
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	4629      	mov	r1, r5
 800f0e4:	f7f1 faa8 	bl	8000638 <__aeabi_dmul>
 800f0e8:	a35f      	add	r3, pc, #380	; (adr r3, 800f268 <__kernel_tan+0x360>)
 800f0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ee:	f7f1 f8ed 	bl	80002cc <__adddf3>
 800f0f2:	4622      	mov	r2, r4
 800f0f4:	462b      	mov	r3, r5
 800f0f6:	f7f1 fa9f 	bl	8000638 <__aeabi_dmul>
 800f0fa:	a35d      	add	r3, pc, #372	; (adr r3, 800f270 <__kernel_tan+0x368>)
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	f7f1 f8e4 	bl	80002cc <__adddf3>
 800f104:	4622      	mov	r2, r4
 800f106:	462b      	mov	r3, r5
 800f108:	f7f1 fa96 	bl	8000638 <__aeabi_dmul>
 800f10c:	a35a      	add	r3, pc, #360	; (adr r3, 800f278 <__kernel_tan+0x370>)
 800f10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f112:	f7f1 f8db 	bl	80002cc <__adddf3>
 800f116:	4622      	mov	r2, r4
 800f118:	462b      	mov	r3, r5
 800f11a:	f7f1 fa8d 	bl	8000638 <__aeabi_dmul>
 800f11e:	a358      	add	r3, pc, #352	; (adr r3, 800f280 <__kernel_tan+0x378>)
 800f120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f124:	f7f1 f8d2 	bl	80002cc <__adddf3>
 800f128:	4622      	mov	r2, r4
 800f12a:	462b      	mov	r3, r5
 800f12c:	f7f1 fa84 	bl	8000638 <__aeabi_dmul>
 800f130:	a355      	add	r3, pc, #340	; (adr r3, 800f288 <__kernel_tan+0x380>)
 800f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f136:	f7f1 f8c9 	bl	80002cc <__adddf3>
 800f13a:	4602      	mov	r2, r0
 800f13c:	460b      	mov	r3, r1
 800f13e:	ec51 0b1a 	vmov	r0, r1, d10
 800f142:	f7f1 f8c3 	bl	80002cc <__adddf3>
 800f146:	ec53 2b19 	vmov	r2, r3, d9
 800f14a:	f7f1 fa75 	bl	8000638 <__aeabi_dmul>
 800f14e:	4642      	mov	r2, r8
 800f150:	464b      	mov	r3, r9
 800f152:	f7f1 f8bb 	bl	80002cc <__adddf3>
 800f156:	ec53 2b18 	vmov	r2, r3, d8
 800f15a:	f7f1 fa6d 	bl	8000638 <__aeabi_dmul>
 800f15e:	4642      	mov	r2, r8
 800f160:	464b      	mov	r3, r9
 800f162:	f7f1 f8b3 	bl	80002cc <__adddf3>
 800f166:	a34a      	add	r3, pc, #296	; (adr r3, 800f290 <__kernel_tan+0x388>)
 800f168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16c:	4604      	mov	r4, r0
 800f16e:	460d      	mov	r5, r1
 800f170:	ec51 0b19 	vmov	r0, r1, d9
 800f174:	f7f1 fa60 	bl	8000638 <__aeabi_dmul>
 800f178:	4622      	mov	r2, r4
 800f17a:	462b      	mov	r3, r5
 800f17c:	f7f1 f8a6 	bl	80002cc <__adddf3>
 800f180:	460b      	mov	r3, r1
 800f182:	ec41 0b18 	vmov	d8, r0, r1
 800f186:	4602      	mov	r2, r0
 800f188:	4659      	mov	r1, fp
 800f18a:	4650      	mov	r0, sl
 800f18c:	f7f1 f89e 	bl	80002cc <__adddf3>
 800f190:	4b44      	ldr	r3, [pc, #272]	; (800f2a4 <__kernel_tan+0x39c>)
 800f192:	429f      	cmp	r7, r3
 800f194:	4604      	mov	r4, r0
 800f196:	460d      	mov	r5, r1
 800f198:	f340 8086 	ble.w	800f2a8 <__kernel_tan+0x3a0>
 800f19c:	4630      	mov	r0, r6
 800f19e:	f7f1 f9e1 	bl	8000564 <__aeabi_i2d>
 800f1a2:	4622      	mov	r2, r4
 800f1a4:	4680      	mov	r8, r0
 800f1a6:	4689      	mov	r9, r1
 800f1a8:	462b      	mov	r3, r5
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	f7f1 fa43 	bl	8000638 <__aeabi_dmul>
 800f1b2:	4642      	mov	r2, r8
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	460f      	mov	r7, r1
 800f1b8:	464b      	mov	r3, r9
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	4629      	mov	r1, r5
 800f1be:	f7f1 f885 	bl	80002cc <__adddf3>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	f7f1 fb5f 	bl	800088c <__aeabi_ddiv>
 800f1ce:	ec53 2b18 	vmov	r2, r3, d8
 800f1d2:	f7f1 f879 	bl	80002c8 <__aeabi_dsub>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	4650      	mov	r0, sl
 800f1dc:	4659      	mov	r1, fp
 800f1de:	f7f1 f873 	bl	80002c8 <__aeabi_dsub>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	f7f1 f871 	bl	80002cc <__adddf3>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	f7f1 f869 	bl	80002c8 <__aeabi_dsub>
 800f1f6:	9b00      	ldr	r3, [sp, #0]
 800f1f8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f1fc:	f00a 0a02 	and.w	sl, sl, #2
 800f200:	4604      	mov	r4, r0
 800f202:	f1ca 0001 	rsb	r0, sl, #1
 800f206:	460d      	mov	r5, r1
 800f208:	f7f1 f9ac 	bl	8000564 <__aeabi_i2d>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	4620      	mov	r0, r4
 800f212:	4629      	mov	r1, r5
 800f214:	f7f1 fa10 	bl	8000638 <__aeabi_dmul>
 800f218:	e69f      	b.n	800ef5a <__kernel_tan+0x52>
 800f21a:	bf00      	nop
 800f21c:	f3af 8000 	nop.w
 800f220:	54442d18 	.word	0x54442d18
 800f224:	3fe921fb 	.word	0x3fe921fb
 800f228:	33145c07 	.word	0x33145c07
 800f22c:	3c81a626 	.word	0x3c81a626
 800f230:	74bf7ad4 	.word	0x74bf7ad4
 800f234:	3efb2a70 	.word	0x3efb2a70
 800f238:	32f0a7e9 	.word	0x32f0a7e9
 800f23c:	3f12b80f 	.word	0x3f12b80f
 800f240:	1a8d1068 	.word	0x1a8d1068
 800f244:	3f3026f7 	.word	0x3f3026f7
 800f248:	fee08315 	.word	0xfee08315
 800f24c:	3f57dbc8 	.word	0x3f57dbc8
 800f250:	e96e8493 	.word	0xe96e8493
 800f254:	3f8226e3 	.word	0x3f8226e3
 800f258:	1bb341fe 	.word	0x1bb341fe
 800f25c:	3faba1ba 	.word	0x3faba1ba
 800f260:	db605373 	.word	0xdb605373
 800f264:	bef375cb 	.word	0xbef375cb
 800f268:	a03792a6 	.word	0xa03792a6
 800f26c:	3f147e88 	.word	0x3f147e88
 800f270:	f2f26501 	.word	0xf2f26501
 800f274:	3f4344d8 	.word	0x3f4344d8
 800f278:	c9560328 	.word	0xc9560328
 800f27c:	3f6d6d22 	.word	0x3f6d6d22
 800f280:	8406d637 	.word	0x8406d637
 800f284:	3f9664f4 	.word	0x3f9664f4
 800f288:	1110fe7a 	.word	0x1110fe7a
 800f28c:	3fc11111 	.word	0x3fc11111
 800f290:	55555563 	.word	0x55555563
 800f294:	3fd55555 	.word	0x3fd55555
 800f298:	3e2fffff 	.word	0x3e2fffff
 800f29c:	3ff00000 	.word	0x3ff00000
 800f2a0:	bff00000 	.word	0xbff00000
 800f2a4:	3fe59427 	.word	0x3fe59427
 800f2a8:	2e01      	cmp	r6, #1
 800f2aa:	d02f      	beq.n	800f30c <__kernel_tan+0x404>
 800f2ac:	460f      	mov	r7, r1
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	4689      	mov	r9, r1
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	4917      	ldr	r1, [pc, #92]	; (800f314 <__kernel_tan+0x40c>)
 800f2b8:	f7f1 fae8 	bl	800088c <__aeabi_ddiv>
 800f2bc:	2600      	movs	r6, #0
 800f2be:	e9cd 0100 	strd	r0, r1, [sp]
 800f2c2:	4652      	mov	r2, sl
 800f2c4:	465b      	mov	r3, fp
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	4639      	mov	r1, r7
 800f2ca:	f7f0 fffd 	bl	80002c8 <__aeabi_dsub>
 800f2ce:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	ec51 0b18 	vmov	r0, r1, d8
 800f2da:	f7f0 fff5 	bl	80002c8 <__aeabi_dsub>
 800f2de:	4632      	mov	r2, r6
 800f2e0:	462b      	mov	r3, r5
 800f2e2:	f7f1 f9a9 	bl	8000638 <__aeabi_dmul>
 800f2e6:	46b0      	mov	r8, r6
 800f2e8:	460f      	mov	r7, r1
 800f2ea:	4642      	mov	r2, r8
 800f2ec:	462b      	mov	r3, r5
 800f2ee:	4634      	mov	r4, r6
 800f2f0:	4649      	mov	r1, r9
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	f7f1 f99f 	bl	8000638 <__aeabi_dmul>
 800f2fa:	4b07      	ldr	r3, [pc, #28]	; (800f318 <__kernel_tan+0x410>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f7f0 ffe5 	bl	80002cc <__adddf3>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4630      	mov	r0, r6
 800f308:	4639      	mov	r1, r7
 800f30a:	e665      	b.n	800efd8 <__kernel_tan+0xd0>
 800f30c:	4682      	mov	sl, r0
 800f30e:	468b      	mov	fp, r1
 800f310:	e625      	b.n	800ef5e <__kernel_tan+0x56>
 800f312:	bf00      	nop
 800f314:	bff00000 	.word	0xbff00000
 800f318:	3ff00000 	.word	0x3ff00000
 800f31c:	00000000 	.word	0x00000000

0800f320 <floor>:
 800f320:	ec51 0b10 	vmov	r0, r1, d0
 800f324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f328:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f32c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f330:	2e13      	cmp	r6, #19
 800f332:	ee10 5a10 	vmov	r5, s0
 800f336:	ee10 8a10 	vmov	r8, s0
 800f33a:	460c      	mov	r4, r1
 800f33c:	dc32      	bgt.n	800f3a4 <floor+0x84>
 800f33e:	2e00      	cmp	r6, #0
 800f340:	da14      	bge.n	800f36c <floor+0x4c>
 800f342:	a333      	add	r3, pc, #204	; (adr r3, 800f410 <floor+0xf0>)
 800f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f348:	f7f0 ffc0 	bl	80002cc <__adddf3>
 800f34c:	2200      	movs	r2, #0
 800f34e:	2300      	movs	r3, #0
 800f350:	f7f1 fc02 	bl	8000b58 <__aeabi_dcmpgt>
 800f354:	b138      	cbz	r0, 800f366 <floor+0x46>
 800f356:	2c00      	cmp	r4, #0
 800f358:	da57      	bge.n	800f40a <floor+0xea>
 800f35a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f35e:	431d      	orrs	r5, r3
 800f360:	d001      	beq.n	800f366 <floor+0x46>
 800f362:	4c2d      	ldr	r4, [pc, #180]	; (800f418 <floor+0xf8>)
 800f364:	2500      	movs	r5, #0
 800f366:	4621      	mov	r1, r4
 800f368:	4628      	mov	r0, r5
 800f36a:	e025      	b.n	800f3b8 <floor+0x98>
 800f36c:	4f2b      	ldr	r7, [pc, #172]	; (800f41c <floor+0xfc>)
 800f36e:	4137      	asrs	r7, r6
 800f370:	ea01 0307 	and.w	r3, r1, r7
 800f374:	4303      	orrs	r3, r0
 800f376:	d01f      	beq.n	800f3b8 <floor+0x98>
 800f378:	a325      	add	r3, pc, #148	; (adr r3, 800f410 <floor+0xf0>)
 800f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37e:	f7f0 ffa5 	bl	80002cc <__adddf3>
 800f382:	2200      	movs	r2, #0
 800f384:	2300      	movs	r3, #0
 800f386:	f7f1 fbe7 	bl	8000b58 <__aeabi_dcmpgt>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d0eb      	beq.n	800f366 <floor+0x46>
 800f38e:	2c00      	cmp	r4, #0
 800f390:	bfbe      	ittt	lt
 800f392:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f396:	fa43 f606 	asrlt.w	r6, r3, r6
 800f39a:	19a4      	addlt	r4, r4, r6
 800f39c:	ea24 0407 	bic.w	r4, r4, r7
 800f3a0:	2500      	movs	r5, #0
 800f3a2:	e7e0      	b.n	800f366 <floor+0x46>
 800f3a4:	2e33      	cmp	r6, #51	; 0x33
 800f3a6:	dd0b      	ble.n	800f3c0 <floor+0xa0>
 800f3a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f3ac:	d104      	bne.n	800f3b8 <floor+0x98>
 800f3ae:	ee10 2a10 	vmov	r2, s0
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	f7f0 ff8a 	bl	80002cc <__adddf3>
 800f3b8:	ec41 0b10 	vmov	d0, r0, r1
 800f3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c8:	fa23 f707 	lsr.w	r7, r3, r7
 800f3cc:	4207      	tst	r7, r0
 800f3ce:	d0f3      	beq.n	800f3b8 <floor+0x98>
 800f3d0:	a30f      	add	r3, pc, #60	; (adr r3, 800f410 <floor+0xf0>)
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	f7f0 ff79 	bl	80002cc <__adddf3>
 800f3da:	2200      	movs	r2, #0
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f7f1 fbbb 	bl	8000b58 <__aeabi_dcmpgt>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d0bf      	beq.n	800f366 <floor+0x46>
 800f3e6:	2c00      	cmp	r4, #0
 800f3e8:	da02      	bge.n	800f3f0 <floor+0xd0>
 800f3ea:	2e14      	cmp	r6, #20
 800f3ec:	d103      	bne.n	800f3f6 <floor+0xd6>
 800f3ee:	3401      	adds	r4, #1
 800f3f0:	ea25 0507 	bic.w	r5, r5, r7
 800f3f4:	e7b7      	b.n	800f366 <floor+0x46>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f3fc:	fa03 f606 	lsl.w	r6, r3, r6
 800f400:	4435      	add	r5, r6
 800f402:	4545      	cmp	r5, r8
 800f404:	bf38      	it	cc
 800f406:	18e4      	addcc	r4, r4, r3
 800f408:	e7f2      	b.n	800f3f0 <floor+0xd0>
 800f40a:	2500      	movs	r5, #0
 800f40c:	462c      	mov	r4, r5
 800f40e:	e7aa      	b.n	800f366 <floor+0x46>
 800f410:	8800759c 	.word	0x8800759c
 800f414:	7e37e43c 	.word	0x7e37e43c
 800f418:	bff00000 	.word	0xbff00000
 800f41c:	000fffff 	.word	0x000fffff

0800f420 <scalbn>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	ec55 4b10 	vmov	r4, r5, d0
 800f426:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f42a:	4606      	mov	r6, r0
 800f42c:	462b      	mov	r3, r5
 800f42e:	b99a      	cbnz	r2, 800f458 <scalbn+0x38>
 800f430:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f434:	4323      	orrs	r3, r4
 800f436:	d036      	beq.n	800f4a6 <scalbn+0x86>
 800f438:	4b39      	ldr	r3, [pc, #228]	; (800f520 <scalbn+0x100>)
 800f43a:	4629      	mov	r1, r5
 800f43c:	ee10 0a10 	vmov	r0, s0
 800f440:	2200      	movs	r2, #0
 800f442:	f7f1 f8f9 	bl	8000638 <__aeabi_dmul>
 800f446:	4b37      	ldr	r3, [pc, #220]	; (800f524 <scalbn+0x104>)
 800f448:	429e      	cmp	r6, r3
 800f44a:	4604      	mov	r4, r0
 800f44c:	460d      	mov	r5, r1
 800f44e:	da10      	bge.n	800f472 <scalbn+0x52>
 800f450:	a32b      	add	r3, pc, #172	; (adr r3, 800f500 <scalbn+0xe0>)
 800f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f456:	e03a      	b.n	800f4ce <scalbn+0xae>
 800f458:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f45c:	428a      	cmp	r2, r1
 800f45e:	d10c      	bne.n	800f47a <scalbn+0x5a>
 800f460:	ee10 2a10 	vmov	r2, s0
 800f464:	4620      	mov	r0, r4
 800f466:	4629      	mov	r1, r5
 800f468:	f7f0 ff30 	bl	80002cc <__adddf3>
 800f46c:	4604      	mov	r4, r0
 800f46e:	460d      	mov	r5, r1
 800f470:	e019      	b.n	800f4a6 <scalbn+0x86>
 800f472:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f476:	460b      	mov	r3, r1
 800f478:	3a36      	subs	r2, #54	; 0x36
 800f47a:	4432      	add	r2, r6
 800f47c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f480:	428a      	cmp	r2, r1
 800f482:	dd08      	ble.n	800f496 <scalbn+0x76>
 800f484:	2d00      	cmp	r5, #0
 800f486:	a120      	add	r1, pc, #128	; (adr r1, 800f508 <scalbn+0xe8>)
 800f488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f48c:	da1c      	bge.n	800f4c8 <scalbn+0xa8>
 800f48e:	a120      	add	r1, pc, #128	; (adr r1, 800f510 <scalbn+0xf0>)
 800f490:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f494:	e018      	b.n	800f4c8 <scalbn+0xa8>
 800f496:	2a00      	cmp	r2, #0
 800f498:	dd08      	ble.n	800f4ac <scalbn+0x8c>
 800f49a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f49e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4a6:	ec45 4b10 	vmov	d0, r4, r5
 800f4aa:	bd70      	pop	{r4, r5, r6, pc}
 800f4ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f4b0:	da19      	bge.n	800f4e6 <scalbn+0xc6>
 800f4b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4b6:	429e      	cmp	r6, r3
 800f4b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f4bc:	dd0a      	ble.n	800f4d4 <scalbn+0xb4>
 800f4be:	a112      	add	r1, pc, #72	; (adr r1, 800f508 <scalbn+0xe8>)
 800f4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1e2      	bne.n	800f48e <scalbn+0x6e>
 800f4c8:	a30f      	add	r3, pc, #60	; (adr r3, 800f508 <scalbn+0xe8>)
 800f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ce:	f7f1 f8b3 	bl	8000638 <__aeabi_dmul>
 800f4d2:	e7cb      	b.n	800f46c <scalbn+0x4c>
 800f4d4:	a10a      	add	r1, pc, #40	; (adr r1, 800f500 <scalbn+0xe0>)
 800f4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d0b8      	beq.n	800f450 <scalbn+0x30>
 800f4de:	a10e      	add	r1, pc, #56	; (adr r1, 800f518 <scalbn+0xf8>)
 800f4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4e4:	e7b4      	b.n	800f450 <scalbn+0x30>
 800f4e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4ea:	3236      	adds	r2, #54	; 0x36
 800f4ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4b0c      	ldr	r3, [pc, #48]	; (800f528 <scalbn+0x108>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	e7e8      	b.n	800f4ce <scalbn+0xae>
 800f4fc:	f3af 8000 	nop.w
 800f500:	c2f8f359 	.word	0xc2f8f359
 800f504:	01a56e1f 	.word	0x01a56e1f
 800f508:	8800759c 	.word	0x8800759c
 800f50c:	7e37e43c 	.word	0x7e37e43c
 800f510:	8800759c 	.word	0x8800759c
 800f514:	fe37e43c 	.word	0xfe37e43c
 800f518:	c2f8f359 	.word	0xc2f8f359
 800f51c:	81a56e1f 	.word	0x81a56e1f
 800f520:	43500000 	.word	0x43500000
 800f524:	ffff3cb0 	.word	0xffff3cb0
 800f528:	3c900000 	.word	0x3c900000

0800f52c <_init>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	bf00      	nop
 800f530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f532:	bc08      	pop	{r3}
 800f534:	469e      	mov	lr, r3
 800f536:	4770      	bx	lr

0800f538 <_fini>:
 800f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53a:	bf00      	nop
 800f53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f53e:	bc08      	pop	{r3}
 800f540:	469e      	mov	lr, r3
 800f542:	4770      	bx	lr
