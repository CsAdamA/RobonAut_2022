
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d894  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800da68  0800da68  0001da68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e118  0800e118  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800e118  0800e118  0001e118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e120  0800e120  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e120  0800e120  0001e120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e124  0800e124  0001e124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800e128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000230  0800e358  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  0800e358  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017807  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ea  00000000  00000000  00037a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0003b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261a2  00000000  00000000  0003d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018147  00000000  00000000  00063762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0f17  00000000  00000000  0007b8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c7c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f84  00000000  00000000  0015c810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da4c 	.word	0x0800da4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	0800da4c 	.word	0x0800da4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0c      	blt.n	8000ff4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_ClearPendingIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	3360      	adds	r3, #96	; 0x60
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
}
 800100c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <__NVIC_SystemReset+0x24>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001016:	4904      	ldr	r1, [pc, #16]	; (8001028 <__NVIC_SystemReset+0x24>)
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_SystemReset+0x28>)
 800101a:	4313      	orrs	r3, r2
 800101c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800101e:	f3bf 8f4f 	dsb	sy
}
 8001022:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <__NVIC_SystemReset+0x20>
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	05fa0004 	.word	0x05fa0004

08001030 <F4_Basic_Init>:
volatile uint8_t fromPC[1];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo, TIM_HandleTypeDef *htim_encoder)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	; 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001044:	483a      	ldr	r0, [pc, #232]	; (8001130 <F4_Basic_Init+0x100>)
 8001046:	f004 fd87 	bl	8005b58 <HAL_GPIO_WritePin>
	LED_B(0);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	4837      	ldr	r0, [pc, #220]	; (8001130 <F4_Basic_Init+0x100>)
 8001052:	f004 fd81 	bl	8005b58 <HAL_GPIO_WritePin>
	LED_G(0);
 8001056:	2201      	movs	r2, #1
 8001058:	2102      	movs	r1, #2
 800105a:	4835      	ldr	r0, [pc, #212]	; (8001130 <F4_Basic_Init+0x100>)
 800105c:	f004 fd7c 	bl	8005b58 <HAL_GPIO_WritePin>
	LED_Y(0);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001066:	4832      	ldr	r0, [pc, #200]	; (8001130 <F4_Basic_Init+0x100>)
 8001068:	f004 fd76 	bl	8005b58 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 800106c:	2200      	movs	r2, #0
 800106e:	2120      	movs	r1, #32
 8001070:	4830      	ldr	r0, [pc, #192]	; (8001134 <F4_Basic_Init+0x104>)
 8001072:	f004 fd71 	bl	8005b58 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	492f      	ldr	r1, [pc, #188]	; (8001138 <F4_Basic_Init+0x108>)
 800107c:	4618      	mov	r0, r3
 800107e:	f009 f81f 	bl	800a0c0 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8c2 	bl	8000210 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f107 0110 	add.w	r1, r7, #16
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f007 fb17 	bl	80086ca <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <F4_Basic_Init+0x10c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <F4_Basic_Init+0x110>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]

	NVIC_ClearPendingIRQ(On_Board_Button_EXTI_IRQn);
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f7ff ff8d 	bl	8000fc8 <__NVIC_ClearPendingIRQ>
	swState[0] = swState[1] = 0;
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <F4_Basic_Init+0x114>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	705a      	strb	r2, [r3, #1]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <F4_Basic_Init+0x114>)
 80010b6:	785a      	ldrb	r2, [r3, #1]
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <F4_Basic_Init+0x114>)
 80010ba:	701a      	strb	r2, [r3, #0]
	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 80010bc:	2200      	movs	r2, #0
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <F4_Basic_Init+0x118>)
 80010c0:	4611      	mov	r1, r2
 80010c2:	7099      	strb	r1, [r3, #2]
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <F4_Basic_Init+0x118>)
 80010c6:	4611      	mov	r1, r2
 80010c8:	7059      	strb	r1, [r3, #1]
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <F4_Basic_Init+0x118>)
 80010cc:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <F4_Basic_Init+0x11c>)
 80010d0:	2296      	movs	r2, #150	; 0x96
 80010d2:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <F4_Basic_Init+0x120>)
 80010d6:	2252      	movs	r2, #82	; 0x52
 80010d8:	701a      	strb	r2, [r3, #0]
	v_ref = 500;
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <F4_Basic_Init+0x124>)
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <F4_Basic_Init+0x128>)
 80010de:	601a      	str	r2, [r3, #0]
	v=0;
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <F4_Basic_Init+0x12c>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM2->CCR1=684; //servot középre
 80010e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ec:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <F4_Basic_Init+0x130>)
 80010f4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <F4_Basic_Init+0x130>)
 80010fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001100:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f005 fbfc 	bl	8006900 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 8001108:	2100      	movs	r1, #0
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f005 fcb0 	bl	8006a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 8001110:	2104      	movs	r1, #4
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f005 fcac 	bl	8006a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo, TIM_CHANNEL_1); //servo RC pwm elindítása
 8001118:	2100      	movs	r1, #0
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f005 fca8 	bl	8006a70 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 8001120:	213c      	movs	r1, #60	; 0x3c
 8001122:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001124:	f006 f886 	bl	8007234 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	//HAL_UART_Receive_IT(huart_debugg, fromPC, 1);
}
 8001128:	bf00      	nop
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40020400 	.word	0x40020400
 8001134:	40020000 	.word	0x40020000
 8001138:	0800da68 	.word	0x0800da68
 800113c:	20000688 	.word	0x20000688
 8001140:	20000689 	.word	0x20000689
 8001144:	2000024c 	.word	0x2000024c
 8001148:	20000250 	.word	0x20000250
 800114c:	20000254 	.word	0x20000254
 8001150:	20000255 	.word	0x20000255
 8001154:	20000258 	.word	0x20000258
 8001158:	43fa0000 	.word	0x43fa0000
 800115c:	20000284 	.word	0x20000284
 8001160:	40000400 	.word	0x40000400

08001164 <HDI_Read_Task>:


void HDI_Read_Task(TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
	static uint32_t hdi_read_task_tick=0;
	static uint8_t b1_state=0;

	if(hdi_read_task_tick>tick) return;
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HDI_Read_Task+0x150>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	429a      	cmp	r2, r3
 8001178:	f0c0 8097 	bcc.w	80012aa <HDI_Read_Task+0x146>
	hdi_read_task_tick = tick + period;
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HDI_Read_Task+0x150>)
 8001184:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 8001186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118a:	484b      	ldr	r0, [pc, #300]	; (80012b8 <HDI_Read_Task+0x154>)
 800118c:	f004 fccc 	bl	8005b28 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <HDI_Read_Task+0x158>)
 8001196:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119c:	4848      	ldr	r0, [pc, #288]	; (80012c0 <HDI_Read_Task+0x15c>)
 800119e:	f004 fcc3 	bl	8005b28 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HDI_Read_Task+0x158>)
 80011a8:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <HDI_Read_Task+0x158>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <HDI_Read_Task+0x60>
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HDI_Read_Task+0x160>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b3f      	cmp	r3, #63	; 0x3f
 80011b8:	d104      	bne.n	80011c4 <HDI_Read_Task+0x60>
 80011ba:	2200      	movs	r2, #0
 80011bc:	2102      	movs	r1, #2
 80011be:	4840      	ldr	r0, [pc, #256]	; (80012c0 <HDI_Read_Task+0x15c>)
 80011c0:	f004 fcca 	bl	8005b58 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HDI_Read_Task+0x158>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d108      	bne.n	80011de <HDI_Read_Task+0x7a>
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HDI_Read_Task+0x160>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b3f      	cmp	r3, #63	; 0x3f
 80011d2:	d104      	bne.n	80011de <HDI_Read_Task+0x7a>
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	4839      	ldr	r0, [pc, #228]	; (80012c0 <HDI_Read_Task+0x15c>)
 80011da:	f004 fcbd 	bl	8005b58 <HAL_GPIO_WritePin>
	/*if(swState[1]) LED_B(1);
	else LED_B(0);*/

	if(bFlag[0])
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HDI_Read_Task+0x164>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d031      	beq.n	800124c <HDI_Read_Task+0xe8>
	{
		bFlag[0]=0;
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HDI_Read_Task+0x164>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
		//Milyen módban voltunk eddig?
		HAL_FLASH_Unlock();
 80011ee:	f004 f94d 	bl	800548c <HAL_FLASH_Unlock>
		mode= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7;
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HDI_Read_Task+0x168>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HDI_Read_Task+0x160>)
 80011fa:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Lock();
 80011fc:	f004 f968 	bl	80054d0 <HAL_FLASH_Lock>

		//section 7 törlése, hogy újraírhassuk a módot jelző bytot
		HAL_FLASH_Unlock();
 8001200:	f004 f944 	bl	800548c <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001204:	2102      	movs	r1, #2
 8001206:	2007      	movs	r0, #7
 8001208:	f004 fab2 	bl	8005770 <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 800120c:	f004 f960 	bl	80054d0 <HAL_FLASH_Lock>
		HAL_Delay(200);
 8001210:	20c8      	movs	r0, #200	; 0xc8
 8001212:	f002 fe07 	bl	8003e24 <HAL_Delay>

		//Állítsuk át a módot
		HAL_FLASH_Unlock();
 8001216:	f004 f939 	bl	800548c <HAL_FLASH_Unlock>
		if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, FAST);
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HDI_Read_Task+0x160>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b52      	cmp	r3, #82	; 0x52
 8001220:	d108      	bne.n	8001234 <HDI_Read_Task+0xd0>
 8001222:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	4928      	ldr	r1, [pc, #160]	; (80012cc <HDI_Read_Task+0x168>)
 800122c:	2000      	movs	r0, #0
 800122e:	f004 f8d9 	bl	80053e4 <HAL_FLASH_Program>
 8001232:	e007      	b.n	8001244 <HDI_Read_Task+0xe0>
		else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, SKILL);
 8001234:	f04f 0252 	mov.w	r2, #82	; 0x52
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	4923      	ldr	r1, [pc, #140]	; (80012cc <HDI_Read_Task+0x168>)
 800123e:	2000      	movs	r0, #0
 8001240:	f004 f8d0 	bl	80053e4 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8001244:	f004 f944 	bl	80054d0 <HAL_FLASH_Lock>

		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 8001248:	f7ff fedc 	bl	8001004 <__NVIC_SystemReset>
	}

	if(bFlag[1])
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HDI_Read_Task+0x164>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d02a      	beq.n	80012ac <HDI_Read_Task+0x148>
	{
		if(b1_state) HAL_TIM_PWM_Start(htim_servo, TIM_CHANNEL_1);
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HDI_Read_Task+0x16c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HDI_Read_Task+0x104>
 800125e:	2100      	movs	r1, #0
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f005 fc05 	bl	8006a70 <HAL_TIM_PWM_Start>
 8001266:	e003      	b.n	8001270 <HDI_Read_Task+0x10c>
		else HAL_TIM_PWM_Stop(htim_servo, TIM_CHANNEL_1);
 8001268:	2100      	movs	r1, #0
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f005 fcc8 	bl	8006c00 <HAL_TIM_PWM_Stop>
		LED_Y_TOGGLE;
 8001270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <HDI_Read_Task+0x15c>)
 8001276:	f004 fc88 	bl	8005b8a <HAL_GPIO_TogglePin>
		b1_state = !b1_state;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HDI_Read_Task+0x16c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HDI_Read_Task+0x16c>)
 800128c:	701a      	strb	r2, [r3, #0]
		bFlag[1]=0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HDI_Read_Task+0x164>)
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
		HAL_Delay(800);
 8001294:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001298:	f002 fdc4 	bl	8003e24 <HAL_Delay>
		NVIC_ClearPendingIRQ(B1_EXTI_IRQn);
 800129c:	200a      	movs	r0, #10
 800129e:	f7ff fe93 	bl	8000fc8 <__NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(B1_EXTI_IRQn);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f7ff fe72 	bl	8000f8c <__NVIC_EnableIRQ>
 80012a8:	e000      	b.n	80012ac <HDI_Read_Task+0x148>
	if(hdi_read_task_tick>tick) return;
 80012aa:	bf00      	nop
	}

}
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000025c 	.word	0x2000025c
 80012b8:	40020000 	.word	0x40020000
 80012bc:	2000024c 	.word	0x2000024c
 80012c0:	40020400 	.word	0x40020400
 80012c4:	20000255 	.word	0x20000255
 80012c8:	20000250 	.word	0x20000250
 80012cc:	08060000 	.word	0x08060000
 80012d0:	20000260 	.word	0x20000260

080012d4 <Mode_Selector>:
uint8_t pirate_pos[6];
volatile uint8_t uartThunder[6];
volatile uint8_t thunderboardFlag=0;

void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint32_t tmp=0;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_FLASH_Unlock();
 80012e2:	f004 f8d3 	bl	800548c <HAL_FLASH_Unlock>
	tmp= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <Mode_Selector+0x13c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_FLASH_Lock();
 80012ec:	f004 f8f0 	bl	80054d0 <HAL_FLASH_Lock>
	mode = (uint8_t)tmp;
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b47      	ldr	r3, [pc, #284]	; (8001414 <Mode_Selector+0x140>)
 80012f6:	701a      	strb	r2, [r3, #0]

	if(mode==SKILL)
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <Mode_Selector+0x140>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b52      	cmp	r3, #82	; 0x52
 80012fe:	d135      	bne.n	800136c <Mode_Selector+0x98>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 8001300:	2352      	movs	r3, #82	; 0x52
 8001302:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001304:	f107 010c 	add.w	r1, r7, #12
 8001308:	230a      	movs	r3, #10
 800130a:	2201      	movs	r2, #1
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f007 f9dc 	bl	80086ca <HAL_UART_Transmit>
		HAL_Delay(10);
 8001312:	200a      	movs	r0, #10
 8001314:	f002 fd86 	bl	8003e24 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 8001318:	f107 010c 	add.w	r1, r7, #12
 800131c:	230a      	movs	r3, #10
 800131e:	2201      	movs	r2, #1
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f007 f9d2 	bl	80086ca <HAL_UART_Transmit>
		HAL_Delay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f002 fd7c 	bl	8003e24 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800132c:	f107 010c 	add.w	r1, r7, #12
 8001330:	230a      	movs	r3, #10
 8001332:	2201      	movs	r2, #1
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f007 f9c8 	bl	80086ca <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4936      	ldr	r1, [pc, #216]	; (8001418 <Mode_Selector+0x144>)
 8001340:	4618      	mov	r0, r3
 8001342:	f008 febd 	bl	800a0c0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ff60 	bl	8000210 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 010c 	add.w	r1, r7, #12
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f007 f9b5 	bl	80086ca <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 8001360:	2201      	movs	r2, #1
 8001362:	2120      	movs	r1, #32
 8001364:	482d      	ldr	r0, [pc, #180]	; (800141c <Mode_Selector+0x148>)
 8001366:	f004 fbf7 	bl	8005b58 <HAL_GPIO_WritePin>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}


}
 800136a:	e04c      	b.n	8001406 <Mode_Selector+0x132>
	else if(mode==FAST)
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <Mode_Selector+0x140>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b3f      	cmp	r3, #63	; 0x3f
 8001372:	d135      	bne.n	80013e0 <Mode_Selector+0x10c>
		buffer[0] = CMD_MODE_FAST;
 8001374:	233f      	movs	r3, #63	; 0x3f
 8001376:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	230a      	movs	r3, #10
 800137e:	2201      	movs	r2, #1
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	f007 f9a2 	bl	80086ca <HAL_UART_Transmit>
		HAL_Delay(10);
 8001386:	200a      	movs	r0, #10
 8001388:	f002 fd4c 	bl	8003e24 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800138c:	f107 010c 	add.w	r1, r7, #12
 8001390:	230a      	movs	r3, #10
 8001392:	2201      	movs	r2, #1
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f007 f998 	bl	80086ca <HAL_UART_Transmit>
		HAL_Delay(10);
 800139a:	200a      	movs	r0, #10
 800139c:	f002 fd42 	bl	8003e24 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80013a0:	f107 010c 	add.w	r1, r7, #12
 80013a4:	230a      	movs	r3, #10
 80013a6:	2201      	movs	r2, #1
 80013a8:	6838      	ldr	r0, [r7, #0]
 80013aa:	f007 f98e 	bl	80086ca <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	491b      	ldr	r1, [pc, #108]	; (8001420 <Mode_Selector+0x14c>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f008 fe83 	bl	800a0c0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff26 	bl	8000210 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f107 010c 	add.w	r1, r7, #12
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f007 f97b 	bl	80086ca <HAL_UART_Transmit>
		LED_NUCLEO(0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2120      	movs	r1, #32
 80013d8:	4810      	ldr	r0, [pc, #64]	; (800141c <Mode_Selector+0x148>)
 80013da:	f004 fbbd 	bl	8005b58 <HAL_GPIO_WritePin>
}
 80013de:	e012      	b.n	8001406 <Mode_Selector+0x132>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	490f      	ldr	r1, [pc, #60]	; (8001424 <Mode_Selector+0x150>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f008 fe6a 	bl	800a0c0 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe ff0d 	bl	8000210 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f107 010c 	add.w	r1, r7, #12
 80013fe:	2364      	movs	r3, #100	; 0x64
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f007 f962 	bl	80086ca <HAL_UART_Transmit>
}
 8001406:	bf00      	nop
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	08060000 	.word	0x08060000
 8001414:	20000255 	.word	0x20000255
 8001418:	0800da8c 	.word	0x0800da8c
 800141c:	40020000 	.word	0x40020000
 8001420:	0800da9c 	.word	0x0800da9c
 8001424:	0800daac 	.word	0x0800daac

08001428 <Skill_Mode>:

//bemenet detect, kalozrobpoz; kimenet direction
float Skill_Mode(UART_HandleTypeDef *huart_debugg)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	static int tmp1,tmp2;
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/
	if(rxBuf[1]>3 || ignore)
 8001430:	4b8f      	ldr	r3, [pc, #572]	; (8001670 <Skill_Mode+0x248>)
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d803      	bhi.n	8001440 <Skill_Mode+0x18>
 8001438:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <Skill_Mode+0x24c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d032      	beq.n	80014a6 <Skill_Mode+0x7e>
	{
		x_elso=0;
 8001440:	4b8d      	ldr	r3, [pc, #564]	; (8001678 <Skill_Mode+0x250>)
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
		for(i=0;i<rxBuf[1];i++)
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e012      	b.n	8001474 <Skill_Mode+0x4c>
		{
			x_elso += (float)rxBuf[i+2];
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3302      	adds	r3, #2
 8001452:	4a87      	ldr	r2, [pc, #540]	; (8001670 <Skill_Mode+0x248>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800145e:	4b86      	ldr	r3, [pc, #536]	; (8001678 <Skill_Mode+0x250>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	4b83      	ldr	r3, [pc, #524]	; (8001678 <Skill_Mode+0x250>)
 800146a:	edc3 7a00 	vstr	s15, [r3]
		for(i=0;i<rxBuf[1];i++)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <Skill_Mode+0x248>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4293      	cmp	r3, r2
 800147e:	dbe6      	blt.n	800144e <Skill_Mode+0x26>
		}

		if(rxBuf[1]) x_elso /= rxBuf[1];
 8001480:	4b7b      	ldr	r3, [pc, #492]	; (8001670 <Skill_Mode+0x248>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d07a      	beq.n	800157e <Skill_Mode+0x156>
 8001488:	4b7b      	ldr	r3, [pc, #492]	; (8001678 <Skill_Mode+0x250>)
 800148a:	edd3 6a00 	vldr	s13, [r3]
 800148e:	4b78      	ldr	r3, [pc, #480]	; (8001670 <Skill_Mode+0x248>)
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149e:	4b76      	ldr	r3, [pc, #472]	; (8001678 <Skill_Mode+0x250>)
 80014a0:	edc3 7a00 	vstr	s15, [r3]
 80014a4:	e06b      	b.n	800157e <Skill_Mode+0x156>
	}
	else if(!dir)x_elso = rxBuf[2];
 80014a6:	4b75      	ldr	r3, [pc, #468]	; (800167c <Skill_Mode+0x254>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <Skill_Mode+0x9a>
 80014ae:	4b70      	ldr	r3, [pc, #448]	; (8001670 <Skill_Mode+0x248>)
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ba:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <Skill_Mode+0x250>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]
 80014c0:	e05d      	b.n	800157e <Skill_Mode+0x156>
	else if(dir==2) x_elso = rxBuf[1+rxBuf[1]];
 80014c2:	4b6e      	ldr	r3, [pc, #440]	; (800167c <Skill_Mode+0x254>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d10c      	bne.n	80014e4 <Skill_Mode+0xbc>
 80014ca:	4b69      	ldr	r3, [pc, #420]	; (8001670 <Skill_Mode+0x248>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a67      	ldr	r2, [pc, #412]	; (8001670 <Skill_Mode+0x248>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014dc:	4b66      	ldr	r3, [pc, #408]	; (8001678 <Skill_Mode+0x250>)
 80014de:	edc3 7a00 	vstr	s15, [r3]
 80014e2:	e04c      	b.n	800157e <Skill_Mode+0x156>
	else if(dir==1)
 80014e4:	4b65      	ldr	r3, [pc, #404]	; (800167c <Skill_Mode+0x254>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d148      	bne.n	800157e <Skill_Mode+0x156>
	{
		if(rxBuf[1]==1)x_elso = rxBuf[2];
 80014ec:	4b60      	ldr	r3, [pc, #384]	; (8001670 <Skill_Mode+0x248>)
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d109      	bne.n	8001508 <Skill_Mode+0xe0>
 80014f4:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <Skill_Mode+0x248>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001500:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <Skill_Mode+0x250>)
 8001502:	edc3 7a00 	vstr	s15, [r3]
 8001506:	e03a      	b.n	800157e <Skill_Mode+0x156>
		else if(rxBuf[1]==3)
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <Skill_Mode+0x248>)
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d119      	bne.n	8001544 <Skill_Mode+0x11c>
		{
			x_elso = rxBuf[3];
 8001510:	4b57      	ldr	r3, [pc, #348]	; (8001670 <Skill_Mode+0x248>)
 8001512:	78db      	ldrb	r3, [r3, #3]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151c:	4b56      	ldr	r3, [pc, #344]	; (8001678 <Skill_Mode+0x250>)
 800151e:	edc3 7a00 	vstr	s15, [r3]
			tmp1=abs((int)rxBuf[2]-123);
 8001522:	4b53      	ldr	r3, [pc, #332]	; (8001670 <Skill_Mode+0x248>)
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	3b7b      	subs	r3, #123	; 0x7b
 8001528:	2b00      	cmp	r3, #0
 800152a:	bfb8      	it	lt
 800152c:	425b      	neglt	r3, r3
 800152e:	4a54      	ldr	r2, [pc, #336]	; (8001680 <Skill_Mode+0x258>)
 8001530:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)rxBuf[4]-123);
 8001532:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <Skill_Mode+0x248>)
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	3b7b      	subs	r3, #123	; 0x7b
 8001538:	2b00      	cmp	r3, #0
 800153a:	bfb8      	it	lt
 800153c:	425b      	neglt	r3, r3
 800153e:	4a51      	ldr	r2, [pc, #324]	; (8001684 <Skill_Mode+0x25c>)
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01c      	b.n	800157e <Skill_Mode+0x156>
		}
		else if(rxBuf[1]==2)
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <Skill_Mode+0x248>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d118      	bne.n	800157e <Skill_Mode+0x156>
		{
			if(tmp1<tmp2)x_elso = rxBuf[2];
 800154c:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <Skill_Mode+0x258>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <Skill_Mode+0x25c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	da09      	bge.n	800156c <Skill_Mode+0x144>
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <Skill_Mode+0x248>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001564:	4b44      	ldr	r3, [pc, #272]	; (8001678 <Skill_Mode+0x250>)
 8001566:	edc3 7a00 	vstr	s15, [r3]
 800156a:	e008      	b.n	800157e <Skill_Mode+0x156>
			else x_elso = rxBuf[3];
 800156c:	4b40      	ldr	r3, [pc, #256]	; (8001670 <Skill_Mode+0x248>)
 800156e:	78db      	ldrb	r3, [r3, #3]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <Skill_Mode+0x250>)
 800157a:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	x_elso = x_elso * 204/248.0-102;
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <Skill_Mode+0x250>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001688 <Skill_Mode+0x260>
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	ee17 0a90 	vmov	r0, s15
 8001590:	f7fe fffa 	bl	8000588 <__aeabi_f2d>
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <Skill_Mode+0x264>)
 800159a:	f7ff f977 	bl	800088c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <Skill_Mode+0x268>)
 80015ac:	f7fe fe8c 	bl	80002c8 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fb16 	bl	8000be8 <__aeabi_d2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <Skill_Mode+0x250>)
 80015c0:	6013      	str	r3, [r2, #0]


	if(v>100)k_p =  -4/v;
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <Skill_Mode+0x26c>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001698 <Skill_Mode+0x270>
 80015cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	dd09      	ble.n	80015ea <Skill_Mode+0x1c2>
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <Skill_Mode+0x26c>)
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	eef9 6a00 	vmov.f32	s13, #144	; 0xc0800000 -4.0
 80015e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <Skill_Mode+0x274>)
 80015e6:	edc3 7a00 	vstr	s15, [r3]
	//k_p =  -0.005;

	gamma = -k_p * x_elso  - K_D*(x_elso-x_elso_prev);
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <Skill_Mode+0x274>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	eeb1 7a67 	vneg.f32	s14, s15
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <Skill_Mode+0x250>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	ee17 0a90 	vmov	r0, s15
 8001602:	f7fe ffc1 	bl	8000588 <__aeabi_f2d>
 8001606:	4604      	mov	r4, r0
 8001608:	460d      	mov	r5, r1
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <Skill_Mode+0x250>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <Skill_Mode+0x278>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	a311      	add	r3, pc, #68	; (adr r3, 8001668 <Skill_Mode+0x240>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f806 	bl	8000638 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fe4a 	bl	80002cc <__adddf3>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fad2 	bl	8000be8 <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <Skill_Mode+0x27c>)
 8001648:	6013      	str	r3, [r2, #0]
	x_elso_prev = x_elso;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <Skill_Mode+0x250>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <Skill_Mode+0x278>)
 8001650:	6013      	str	r3, [r2, #0]


	return gamma;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <Skill_Mode+0x27c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	ee07 3a90 	vmov	s15, r3
}
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bdb0      	pop	{r4, r5, r7, pc}
 8001664:	f3af 8000 	nop.w
 8001668:	9999999a 	.word	0x9999999a
 800166c:	3f999999 	.word	0x3f999999
 8001670:	2000029c 	.word	0x2000029c
 8001674:	20000261 	.word	0x20000261
 8001678:	20000264 	.word	0x20000264
 800167c:	20000000 	.word	0x20000000
 8001680:	20000268 	.word	0x20000268
 8001684:	2000026c 	.word	0x2000026c
 8001688:	434c0000 	.word	0x434c0000
 800168c:	406f0000 	.word	0x406f0000
 8001690:	40598000 	.word	0x40598000
 8001694:	20000284 	.word	0x20000284
 8001698:	42c80000 	.word	0x42c80000
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000270 	.word	0x20000270
 80016a4:	20000274 	.word	0x20000274

080016a8 <Detect_Node2>:

	}
}

void Detect_Node2(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]


	sprintf(str,"%2d\r\n",rxBuf[1]);
	HAL_UART_Transmit(huart_debugg, str, 4, 10);
*/
	if (LINE_CNT<1 || LINE_CNT > 4)
 80016b2:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <Detect_Node2+0x17c>)
 80016b4:	785b      	ldrb	r3, [r3, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <Detect_Node2+0x1a>
 80016ba:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <Detect_Node2+0x17c>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d908      	bls.n	80016d4 <Detect_Node2+0x2c>
	{
		t_prev=t;
 80016c2:	4a59      	ldr	r2, [pc, #356]	; (8001828 <Detect_Node2+0x180>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6013      	str	r3, [r2, #0]
		detect_node_state=STEADY;
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <Detect_Node2+0x184>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		val=4;
 80016ce:	4b58      	ldr	r3, [pc, #352]	; (8001830 <Detect_Node2+0x188>)
 80016d0:	2204      	movs	r2, #4
 80016d2:	701a      	strb	r2, [r3, #0]
	}
	switch(detect_node_state)
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <Detect_Node2+0x184>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <Detect_Node2+0x3a>
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d02e      	beq.n	800173e <Detect_Node2+0x96>
			val=0;
		}
		break;
	}

}
 80016e0:	e09c      	b.n	800181c <Detect_Node2+0x174>
		if(rxBuf[1]==4)
 80016e2:	4b50      	ldr	r3, [pc, #320]	; (8001824 <Detect_Node2+0x17c>)
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d122      	bne.n	8001730 <Detect_Node2+0x88>
			dt = t-t_prev;//mennyi ideje van alattunk 4 vonal
 80016ea:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <Detect_Node2+0x180>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	4a50      	ldr	r2, [pc, #320]	; (8001834 <Detect_Node2+0x18c>)
 80016f4:	6013      	str	r3, [r2, #0]
			if(dt > TH_MIN(70))
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <Detect_Node2+0x190>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001700:	ee17 3a90 	vmov	r3, s15
 8001704:	2b00      	cmp	r3, #0
 8001706:	bfb8      	it	lt
 8001708:	425b      	neglt	r3, r3
 800170a:	f24a 4210 	movw	r2, #42000	; 0xa410
 800170e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4b47      	ldr	r3, [pc, #284]	; (8001834 <Detect_Node2+0x18c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d205      	bcs.n	8001728 <Detect_Node2+0x80>
				detect_node_state=QUAD_LINE_DETECTED;
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <Detect_Node2+0x184>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
				ignore=1;
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <Detect_Node2+0x194>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
			val=0;
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <Detect_Node2+0x188>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
		break;
 800172e:	e075      	b.n	800181c <Detect_Node2+0x174>
			t_prev=t;
 8001730:	4a3d      	ldr	r2, [pc, #244]	; (8001828 <Detect_Node2+0x180>)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6013      	str	r3, [r2, #0]
			ignore=0;
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <Detect_Node2+0x194>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
		break;
 800173c:	e06e      	b.n	800181c <Detect_Node2+0x174>
		if(rxBuf[1]==2 && !val) val=1; //horizontal node lehetséges
 800173e:	4b39      	ldr	r3, [pc, #228]	; (8001824 <Detect_Node2+0x17c>)
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d107      	bne.n	8001756 <Detect_Node2+0xae>
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <Detect_Node2+0x188>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <Detect_Node2+0xae>
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <Detect_Node2+0x188>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e00a      	b.n	800176c <Detect_Node2+0xc4>
		else if(rxBuf[1]==4 && val==1) val=2; //horizontal node tuti
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <Detect_Node2+0x17c>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d106      	bne.n	800176c <Detect_Node2+0xc4>
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <Detect_Node2+0x188>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <Detect_Node2+0xc4>
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <Detect_Node2+0x188>)
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
		dt=t-t_prev;
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <Detect_Node2+0x180>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <Detect_Node2+0x18c>)
 8001776:	6013      	str	r3, [r2, #0]
		if(dt> TH(170) && rxBuf[1]==4 && !val)val=3;
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <Detect_Node2+0x190>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfb8      	it	lt
 800178a:	425b      	neglt	r3, r3
 800178c:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <Detect_Node2+0x198>)
 800178e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <Detect_Node2+0x18c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d20a      	bcs.n	80017b2 <Detect_Node2+0x10a>
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <Detect_Node2+0x17c>)
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d106      	bne.n	80017b2 <Detect_Node2+0x10a>
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <Detect_Node2+0x188>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <Detect_Node2+0x10a>
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <Detect_Node2+0x188>)
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
		if(dt> TH_MAX(200))
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <Detect_Node2+0x190>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfb8      	it	lt
 80017c4:	425b      	neglt	r3, r3
 80017c6:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <Detect_Node2+0x19c>)
 80017c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <Detect_Node2+0x18c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d221      	bcs.n	800181a <Detect_Node2+0x172>
			if(val==3 && rxBuf[1]==1)LED_G(1);//vert node
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <Detect_Node2+0x188>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d109      	bne.n	80017f2 <Detect_Node2+0x14a>
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <Detect_Node2+0x17c>)
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <Detect_Node2+0x14a>
 80017e6:	2200      	movs	r2, #0
 80017e8:	2102      	movs	r1, #2
 80017ea:	4817      	ldr	r0, [pc, #92]	; (8001848 <Detect_Node2+0x1a0>)
 80017ec:	f004 f9b4 	bl	8005b58 <HAL_GPIO_WritePin>
 80017f0:	e00d      	b.n	800180e <Detect_Node2+0x166>
			else if(val==2 && rxBuf[1]==1)LED_B(1); //horizont node
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <Detect_Node2+0x188>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d109      	bne.n	800180e <Detect_Node2+0x166>
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <Detect_Node2+0x17c>)
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d105      	bne.n	800180e <Detect_Node2+0x166>
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <Detect_Node2+0x1a0>)
 800180a:	f004 f9a5 	bl	8005b58 <HAL_GPIO_WritePin>
			detect_node_state=STEADY;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <Detect_Node2+0x184>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
			val=0;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <Detect_Node2+0x188>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
		break;
 800181a:	bf00      	nop
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000029c 	.word	0x2000029c
 8001828:	20000278 	.word	0x20000278
 800182c:	2000027c 	.word	0x2000027c
 8001830:	2000027d 	.word	0x2000027d
 8001834:	20000280 	.word	0x20000280
 8001838:	20000284 	.word	0x20000284
 800183c:	20000261 	.word	0x20000261
 8001840:	00029810 	.word	0x00029810
 8001844:	000445c0 	.word	0x000445c0
 8001848:	40020400 	.word	0x40020400
 800184c:	00000000 	.word	0x00000000

08001850 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b090      	sub	sp, #64	; 0x40
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 800185c:	2300      	movs	r3, #0
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
 8001864:	e016      	b.n	8001894 <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f002 fb44 	bl	8003ef4 <HAL_ADC_Start>
		HAL_Delay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f002 fad9 	bl	8003e24 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8001872:	2114      	movs	r1, #20
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f002 fc0f 	bl	8004098 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 800187a:	200a      	movs	r0, #10
 800187c:	f002 fad2 	bl	8003e24 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f002 fc94 	bl	80041ae <HAL_ADC_GetValue>
 8001886:	4602      	mov	r2, r0
 8001888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188a:	4413      	add	r3, r2
 800188c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001890:	3301      	adds	r3, #1
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
 8001894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001896:	2b13      	cmp	r3, #19
 8001898:	dde5      	ble.n	8001866 <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 800189a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a4:	ee17 0a90 	vmov	r0, s15
 80018a8:	f7fe fe6e 	bl	8000588 <__aeabi_f2d>
 80018ac:	a37b      	add	r3, pc, #492	; (adr r3, 8001a9c <Battery_Voltage_Compensate+0x24c>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fec1 	bl	8000638 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b71      	ldr	r3, [pc, #452]	; (8001a88 <Battery_Voltage_Compensate+0x238>)
 80018c4:	f7fe ffe2 	bl	800088c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f98a 	bl	8000be8 <__aeabi_d2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 80018d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018da:	f7fe fe55 	bl	8000588 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	f107 0014 	add.w	r0, r7, #20
 80018e6:	4969      	ldr	r1, [pc, #420]	; (8001a8c <Battery_Voltage_Compensate+0x23c>)
 80018e8:	f008 fbea 	bl	800a0c0 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc8d 	bl	8000210 <strlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f107 0114 	add.w	r1, r7, #20
 80018fe:	230a      	movs	r3, #10
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f006 fee2 	bl	80086ca <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 8001906:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800190a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	d009      	beq.n	8001928 <Battery_Voltage_Compensate+0xd8>
 8001914:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 8001918:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800191c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001920:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <Battery_Voltage_Compensate+0x240>)
 8001922:	edc3 7a00 	vstr	s15, [r3]
 8001926:	e003      	b.n	8001930 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <Battery_Voltage_Compensate+0x240>)
 800192a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800192e:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 8001930:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001932:	f7fe fe29 	bl	8000588 <__aeabi_f2d>
 8001936:	a34e      	add	r3, pc, #312	; (adr r3, 8001a70 <Battery_Voltage_Compensate+0x220>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7ff f8ee 	bl	8000b1c <__aeabi_dcmplt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d010      	beq.n	8001968 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8001946:	2300      	movs	r3, #0
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
 800194a:	e00a      	b.n	8001962 <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 800194c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001950:	4850      	ldr	r0, [pc, #320]	; (8001a94 <Battery_Voltage_Compensate+0x244>)
 8001952:	f004 f91a 	bl	8005b8a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001956:	20c8      	movs	r0, #200	; 0xc8
 8001958:	f002 fa64 	bl	8003e24 <HAL_Delay>
		for(i=0;i<10;i++)
 800195c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195e:	3301      	adds	r3, #1
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
 8001962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001964:	2b09      	cmp	r3, #9
 8001966:	ddf1      	ble.n	800194c <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8001968:	2300      	movs	r3, #0
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800196c:	2300      	movs	r3, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001970:	e016      	b.n	80019a0 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	f002 fabe 	bl	8003ef4 <HAL_ADC_Start>
		HAL_Delay(10);
 8001978:	200a      	movs	r0, #10
 800197a:	f002 fa53 	bl	8003e24 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 800197e:	2114      	movs	r1, #20
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f002 fb89 	bl	8004098 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8001986:	200a      	movs	r0, #10
 8001988:	f002 fa4c 	bl	8003e24 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 800198c:	68b8      	ldr	r0, [r7, #8]
 800198e:	f002 fc0e 	bl	80041ae <HAL_ADC_GetValue>
 8001992:	4602      	mov	r2, r0
 8001994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001996:	4413      	add	r3, r2
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800199a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199c:	3301      	adds	r3, #1
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a2:	2b13      	cmp	r3, #19
 80019a4:	dde5      	ble.n	8001972 <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b0:	ee17 0a90 	vmov	r0, s15
 80019b4:	f7fe fde8 	bl	8000588 <__aeabi_f2d>
 80019b8:	a32f      	add	r3, pc, #188	; (adr r3, 8001a78 <Battery_Voltage_Compensate+0x228>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe3b 	bl	8000638 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <Battery_Voltage_Compensate+0x238>)
 80019d0:	f7fe ff5c 	bl	800088c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	a328      	add	r3, pc, #160	; (adr r3, 8001a80 <Battery_Voltage_Compensate+0x230>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fc73 	bl	80002cc <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8fb 	bl	8000be8 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 80019f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f8:	f7fe fdc6 	bl	8000588 <__aeabi_f2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	f107 0014 	add.w	r0, r7, #20
 8001a04:	4924      	ldr	r1, [pc, #144]	; (8001a98 <Battery_Voltage_Compensate+0x248>)
 8001a06:	f008 fb5b 	bl	800a0c0 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fbfe 	bl	8000210 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f107 0114 	add.w	r1, r7, #20
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f006 fe53 	bl	80086ca <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 8001a24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d510      	bpl.n	8001a58 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a3a:	e00a      	b.n	8001a52 <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 8001a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a40:	4814      	ldr	r0, [pc, #80]	; (8001a94 <Battery_Voltage_Compensate+0x244>)
 8001a42:	f004 f8a2 	bl	8005b8a <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001a46:	20c8      	movs	r0, #200	; 0xc8
 8001a48:	f002 f9ec 	bl	8003e24 <HAL_Delay>
		for(i=0;i<20;i++)
 8001a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4e:	3301      	adds	r3, #1
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a54:	2b13      	cmp	r3, #19
 8001a56:	ddf1      	ble.n	8001a3c <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <Battery_Voltage_Compensate+0x244>)
 8001a60:	f004 f87a 	bl	8005b58 <HAL_GPIO_WritePin>

}
 8001a64:	bf00      	nop
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	f3af 8000 	nop.w
 8001a70:	cccccccd 	.word	0xcccccccd
 8001a74:	401ccccc 	.word	0x401ccccc
 8001a78:	8c6df334 	.word	0x8c6df334
 8001a7c:	3f6a8d60 	.word	0x3f6a8d60
 8001a80:	47ae147b 	.word	0x47ae147b
 8001a84:	3f947ae1 	.word	0x3f947ae1
 8001a88:	40340000 	.word	0x40340000
 8001a8c:	0800dad0 	.word	0x0800dad0
 8001a90:	20000008 	.word	0x20000008
 8001a94:	40020400 	.word	0x40020400
 8001a98:	0800dae8 	.word	0x0800dae8
 8001a9c:	99fa11a9 	.word	0x99fa11a9
 8001aa0:	3f72dd7a 	.word	0x3f72dd7a
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <Measure_Velocity_Task+0xd8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d354      	bcc.n	8001b6e <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a2d      	ldr	r2, [pc, #180]	; (8001b80 <Measure_Velocity_Task+0xd8>)
 8001acc:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <Measure_Velocity_Task+0xdc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <Measure_Velocity_Task+0xdc>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	6013      	str	r3, [r2, #0]
		return;
 8001adc:	e048      	b.n	8001b70 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aec:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001b88 <Measure_Velocity_Task+0xe0>
 8001af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af4:	ee17 0a90 	vmov	r0, s15
 8001af8:	f7fe fd46 	bl	8000588 <__aeabi_f2d>
 8001afc:	a31e      	add	r3, pc, #120	; (adr r3, 8001b78 <Measure_Velocity_Task+0xd0>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd99 	bl	8000638 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b18:	ee17 0a90 	vmov	r0, s15
 8001b1c:	f7fe fd34 	bl	8000588 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe feb0 	bl	800088c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f858 	bl	8000be8 <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <Measure_Velocity_Task+0xe4>)
 8001b3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <Measure_Velocity_Task+0xe8>)
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <Measure_Velocity_Task+0xec>)
 8001b54:	edd3 6a00 	vldr	s13, [r3]
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <Measure_Velocity_Task+0xf0>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <Measure_Velocity_Task+0xf0>)
 8001b68:	edc3 7a00 	vstr	s15, [r3]
 8001b6c:	e000      	b.n	8001b70 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 8001b6e:	bf00      	nop
}
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bdb0      	pop	{r4, r5, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	8f5c28f6 	.word	0x8f5c28f6
 8001b7c:	401df5c2 	.word	0x401df5c2
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000288 	.word	0x20000288
 8001b88:	47000000 	.word	0x47000000
 8001b8c:	40010400 	.word	0x40010400
 8001b90:	20000010 	.word	0x20000010
 8001b94:	20000014 	.word	0x20000014
 8001b98:	20000284 	.word	0x20000284
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <Motor_Drive_Task+0x230>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f0c0 80f8 	bcc.w	8001daa <Motor_Drive_Task+0x20a>
	motor_drive_task_tick= tick + period;
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a83      	ldr	r2, [pc, #524]	; (8001dd0 <Motor_Drive_Task+0x230>)
 8001bc2:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8001bc4:	4b83      	ldr	r3, [pc, #524]	; (8001dd4 <Motor_Drive_Task+0x234>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80b4 	beq.w	8001d36 <Motor_Drive_Task+0x196>
 8001bce:	4b82      	ldr	r3, [pc, #520]	; (8001dd8 <Motor_Drive_Task+0x238>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80af 	beq.w	8001d36 <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8001bd8:	4b80      	ldr	r3, [pc, #512]	; (8001ddc <Motor_Drive_Task+0x23c>)
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	4b80      	ldr	r3, [pc, #512]	; (8001de0 <Motor_Drive_Task+0x240>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fccc 	bl	8000588 <__aeabi_f2d>
 8001bf0:	a371      	add	r3, pc, #452	; (adr r3, 8001db8 <Motor_Drive_Task+0x218>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fd1f 	bl	8000638 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <Motor_Drive_Task+0x244>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fcbe 	bl	8000588 <__aeabi_f2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fd10 	bl	8000638 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <Motor_Drive_Task+0x248>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fcaf 	bl	8000588 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fb4b 	bl	80002cc <__adddf3>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe ffd3 	bl	8000be8 <__aeabi_d2f>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a69      	ldr	r2, [pc, #420]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001c46:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001df0 <Motor_Drive_Task+0x250>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	dd03      	ble.n	8001c64 <Motor_Drive_Task+0xc4>
 8001c5c:	4b63      	ldr	r3, [pc, #396]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001c5e:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <Motor_Drive_Task+0x254>)
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e00c      	b.n	8001c7e <Motor_Drive_Task+0xde>
		else if(u<-200)u=-200;
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001df8 <Motor_Drive_Task+0x258>
 8001c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	d502      	bpl.n	8001c7e <Motor_Drive_Task+0xde>
 8001c78:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001c7a:	4a60      	ldr	r2, [pc, #384]	; (8001dfc <Motor_Drive_Task+0x25c>)
 8001c7c:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <Motor_Drive_Task+0x248>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc80 	bl	8000588 <__aeabi_f2d>
 8001c88:	a34d      	add	r3, pc, #308	; (adr r3, 8001dc0 <Motor_Drive_Task+0x220>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fcd3 	bl	8000638 <__aeabi_dmul>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	4b54      	ldr	r3, [pc, #336]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc72 	bl	8000588 <__aeabi_f2d>
 8001ca4:	a348      	add	r3, pc, #288	; (adr r3, 8001dc8 <Motor_Drive_Task+0x228>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fcc5 	bl	8000638 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fb09 	bl	80002cc <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff91 	bl	8000be8 <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <Motor_Drive_Task+0x248>)
 8001cca:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 8001ccc:	4b47      	ldr	r3, [pc, #284]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	dd0a      	ble.n	8001cf2 <Motor_Drive_Task+0x152>
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce6:	ee17 3a90 	vmov	r3, s15
 8001cea:	3346      	adds	r3, #70	; 0x46
 8001cec:	4a44      	ldr	r2, [pc, #272]	; (8001e00 <Motor_Drive_Task+0x260>)
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e01b      	b.n	8001d2a <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	d50a      	bpl.n	8001d18 <Motor_Drive_Task+0x178>
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0c:	ee17 3a90 	vmov	r3, s15
 8001d10:	3b46      	subs	r3, #70	; 0x46
 8001d12:	4a3b      	ldr	r2, [pc, #236]	; (8001e00 <Motor_Drive_Task+0x260>)
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e008      	b.n	8001d2a <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8001d18:	4b34      	ldr	r3, [pc, #208]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d22:	ee17 2a90 	vmov	r2, s15
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <Motor_Drive_Task+0x260>)
 8001d28:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2140      	movs	r1, #64	; 0x40
 8001d2e:	4835      	ldr	r0, [pc, #212]	; (8001e04 <Motor_Drive_Task+0x264>)
 8001d30:	f003 ff12 	bl	8005b58 <HAL_GPIO_WritePin>
 8001d34:	e00c      	b.n	8001d50 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <Motor_Drive_Task+0x24c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <Motor_Drive_Task+0x248>)
 8001d44:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 8001d46:	2200      	movs	r2, #0
 8001d48:	2140      	movs	r1, #64	; 0x40
 8001d4a:	482e      	ldr	r0, [pc, #184]	; (8001e04 <Motor_Drive_Task+0x264>)
 8001d4c:	f003 ff04 	bl	8005b58 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <Motor_Drive_Task+0x260>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <Motor_Drive_Task+0x268>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d021      	beq.n	8001da0 <Motor_Drive_Task+0x200>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <Motor_Drive_Task+0x260>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d64:	0fda      	lsrs	r2, r3, #31
 8001d66:	4413      	add	r3, r2
 8001d68:	105b      	asrs	r3, r3, #1
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001d74:	4293      	cmp	r3, r2
 8001d76:	dd02      	ble.n	8001d7e <Motor_Drive_Task+0x1de>
 8001d78:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001d7c:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <Motor_Drive_Task+0x26c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	da01      	bge.n	8001d8a <Motor_Drive_Task+0x1ea>
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <Motor_Drive_Task+0x26c>)
 8001d88:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8001d90:	3302      	adds	r3, #2
 8001d92:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 8001d94:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <Motor_Drive_Task+0x270>)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <Motor_Drive_Task+0x270>)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <Motor_Drive_Task+0x260>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <Motor_Drive_Task+0x268>)
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e000      	b.n	8001dac <Motor_Drive_Task+0x20c>
	if(motor_drive_task_tick>tick) return;
 8001daa:	bf00      	nop
}
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bdb0      	pop	{r4, r5, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	f3af 8000 	nop.w
 8001db8:	30be0ded 	.word	0x30be0ded
 8001dbc:	3fd02a99 	.word	0x3fd02a99
 8001dc0:	9b3d07c8 	.word	0x9b3d07c8
 8001dc4:	3fef9f55 	.word	0x3fef9f55
 8001dc8:	30be0e00 	.word	0x30be0e00
 8001dcc:	3f882a99 	.word	0x3f882a99
 8001dd0:	20000018 	.word	0x20000018
 8001dd4:	20000688 	.word	0x20000688
 8001dd8:	20000689 	.word	0x20000689
 8001ddc:	20000258 	.word	0x20000258
 8001de0:	20000284 	.word	0x20000284
 8001de4:	20000008 	.word	0x20000008
 8001de8:	2000028c 	.word	0x2000028c
 8001dec:	20000290 	.word	0x20000290
 8001df0:	445c0000 	.word	0x445c0000
 8001df4:	445c0000 	.word	0x445c0000
 8001df8:	c3480000 	.word	0xc3480000
 8001dfc:	c3480000 	.word	0xc3480000
 8001e00:	20000294 	.word	0x20000294
 8001e04:	40020400 	.word	0x40020400
 8001e08:	20000298 	.word	0x20000298
 8001e0c:	fffffc4a 	.word	0xfffffc4a
 8001e10:	40000400 	.word	0x40000400

08001e14 <G0_Read_Fast>:
uint8_t txBuf[]={CMD_READ_SKILL};
uint8_t rxBuf[10];


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <G0_Read_Fast+0x5c>)
 8001e24:	222a      	movs	r2, #42	; 0x2a
 8001e26:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4910      	ldr	r1, [pc, #64]	; (8001e70 <G0_Read_Fast+0x5c>)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f006 fc4b 	bl	80086ca <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 2);
 8001e34:	2302      	movs	r3, #2
 8001e36:	2208      	movs	r2, #8
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <G0_Read_Fast+0x60>)
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f006 fcd7 	bl	80087ee <HAL_UART_Receive>
 8001e40:	4603      	mov	r3, r0
 8001e42:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <G0_Read_Fast+0x64>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <G0_Read_Fast+0x50>
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <G0_Read_Fast+0x60>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b17      	cmp	r3, #23
 8001e56:	d105      	bne.n	8001e64 <G0_Read_Fast+0x50>
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <G0_Read_Fast+0x60>)
 8001e5a:	79db      	ldrb	r3, [r3, #7]
 8001e5c:	2b12      	cmp	r3, #18
 8001e5e:	d101      	bne.n	8001e64 <G0_Read_Fast+0x50>
	{
		return 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001e64:	2301      	movs	r3, #1
	}
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000001c 	.word	0x2000001c
 8001e74:	2000029c 	.word	0x2000029c
 8001e78:	20000689 	.word	0x20000689

08001e7c <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	uint8_t state=1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_SKILL;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <G0_Read_Skill+0x5c>)
 8001e8c:	2239      	movs	r2, #57	; 0x39
 8001e8e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8001e90:	2301      	movs	r3, #1
 8001e92:	2201      	movs	r2, #1
 8001e94:	4910      	ldr	r1, [pc, #64]	; (8001ed8 <G0_Read_Skill+0x5c>)
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f006 fc17 	bl	80086ca <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 10, 2);
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	220a      	movs	r2, #10
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <G0_Read_Skill+0x60>)
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f006 fca3 	bl	80087ee <HAL_UART_Receive>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <G0_Read_Skill+0x64>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <G0_Read_Skill+0x50>
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <G0_Read_Skill+0x60>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b17      	cmp	r3, #23
 8001ebe:	d105      	bne.n	8001ecc <G0_Read_Skill+0x50>
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <G0_Read_Skill+0x60>)
 8001ec2:	7a5b      	ldrb	r3, [r3, #9]
 8001ec4:	2b12      	cmp	r3, #18
 8001ec6:	d101      	bne.n	8001ecc <G0_Read_Skill+0x50>
	{
		return 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e000      	b.n	8001ece <G0_Read_Skill+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001ecc:	2301      	movs	r3, #1
	}
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000001c 	.word	0x2000001c
 8001edc:	2000029c 	.word	0x2000029c
 8001ee0:	20000689 	.word	0x20000689
 8001ee4:	00000000 	.word	0x00000000

08001ee8 <Line_Track_Task>:

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
	static uint32_t line_track_task_tick=0;
	static int32_t ccr = SERVO_CCR_MIDDLE;
	static float PHI;
	static float gamma=0;

	if(line_track_task_tick>tick) return;
 8001ef6:	4b54      	ldr	r3, [pc, #336]	; (8002048 <Line_Track_Task+0x160>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f0c0 8092 	bcc.w	8002026 <Line_Track_Task+0x13e>
	line_track_task_tick = tick + period;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <Line_Track_Task+0x160>)
 8001f0a:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 8001f0c:	4b4f      	ldr	r3, [pc, #316]	; (800204c <Line_Track_Task+0x164>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b52      	cmp	r3, #82	; 0x52
 8001f12:	d11b      	bne.n	8001f4c <Line_Track_Task+0x64>
	{
		if(G0_Read_Skill(huart_stm, huart_debugg));// return;
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff ffb0 	bl	8001e7c <G0_Read_Skill>
		v_ref=1000;
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <Line_Track_Task+0x168>)
 8001f1e:	4a4d      	ldr	r2, [pc, #308]	; (8002054 <Line_Track_Task+0x16c>)
 8001f20:	601a      	str	r2, [r3, #0]
		Detect_Node2(huart_debugg, tick);
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68b8      	ldr	r0, [r7, #8]
 8001f26:	f7ff fbbf 	bl	80016a8 <Detect_Node2>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <Line_Track_Task+0x170>)
 8001f2c:	785b      	ldrb	r3, [r3, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d07b      	beq.n	800202a <Line_Track_Task+0x142>
 8001f32:	4b49      	ldr	r3, [pc, #292]	; (8002058 <Line_Track_Task+0x170>)
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d877      	bhi.n	800202a <Line_Track_Task+0x142>
		gamma = Skill_Mode(huart_debugg);
 8001f3a:	68b8      	ldr	r0, [r7, #8]
 8001f3c:	f7ff fa74 	bl	8001428 <Skill_Mode>
 8001f40:	eef0 7a40 	vmov.f32	s15, s0
 8001f44:	4b45      	ldr	r3, [pc, #276]	; (800205c <Line_Track_Task+0x174>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
 8001f4a:	e01b      	b.n	8001f84 <Line_Track_Task+0x9c>
	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <Line_Track_Task+0x164>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b3f      	cmp	r3, #63	; 0x3f
 8001f52:	d117      	bne.n	8001f84 <Line_Track_Task+0x9c>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff ff5c 	bl	8001e14 <G0_Read_Fast>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d165      	bne.n	800202e <Line_Track_Task+0x146>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <Line_Track_Task+0x170>)
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <Line_Track_Task+0x14a>
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <Line_Track_Task+0x170>)
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d85f      	bhi.n	8002032 <Line_Track_Task+0x14a>
		gamma = Fast_Mode(huart_debugg,tick);
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	68b8      	ldr	r0, [r7, #8]
 8001f76:	f000 f87b 	bl	8002070 <Fast_Mode>
 8001f7a:	eef0 7a40 	vmov.f32	s15, s0
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <Line_Track_Task+0x174>)
 8001f80:	edc3 7a00 	vstr	s15, [r3]
	}

	PHI = atan((L/(L+D))*tan(gamma));
 8001f84:	4b35      	ldr	r3, [pc, #212]	; (800205c <Line_Track_Task+0x174>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fafd 	bl	8000588 <__aeabi_f2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	ec43 2b10 	vmov	d0, r2, r3
 8001f96:	f00a fcb7 	bl	800c908 <tan>
 8001f9a:	ec51 0b10 	vmov	r0, r1, d0
 8001f9e:	a328      	add	r3, pc, #160	; (adr r3, 8002040 <Line_Track_Task+0x158>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fb48 	bl	8000638 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	ec43 2b17 	vmov	d7, r2, r3
 8001fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb4:	eef0 0a67 	vmov.f32	s1, s15
 8001fb8:	f00a fafa 	bl	800c5b0 <atan>
 8001fbc:	ec53 2b10 	vmov	r2, r3, d0
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fe10 	bl	8000be8 <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <Line_Track_Task+0x178>)
 8001fcc:	6013      	str	r3, [r2, #0]
	ccr = (uint16_t)(-SERVO_M * PHI + SERVO_CCR_MIDDLE);//balra kanyarodás
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <Line_Track_Task+0x178>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002064 <Line_Track_Task+0x17c>
 8001fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fdc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002068 <Line_Track_Task+0x180>
 8001fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <Line_Track_Task+0x184>)
 8001ff2:	601a      	str	r2, [r3, #0]

	//if(PHI<0) ccr = (uint16_t)(-SERVO_M * PHI + SERVO_CCR_MIDDLE);//balra kanyarodás
	//else ccr = (uint16_t) (-SERVO_M  * PHI + SERVO_CCR_MIDDLE); //jobbra kanyrodás

	if(ccr > CCR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <Line_Track_Task+0x184>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001ffc:	dd04      	ble.n	8002008 <Line_Track_Task+0x120>
	{
		ccr = CCR_MAX;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <Line_Track_Task+0x184>)
 8002000:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e008      	b.n	800201a <Line_Track_Task+0x132>
	}
	else if(ccr < CCR_MIN)//egyik irányba se
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <Line_Track_Task+0x184>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002010:	da03      	bge.n	800201a <Line_Track_Task+0x132>
	{
		ccr = CCR_MIN;
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <Line_Track_Task+0x184>)
 8002014:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002018:	601a      	str	r2, [r3, #0]
	}
	TIM2->CCR1 = ccr;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <Line_Track_Task+0x184>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
 8002024:	e006      	b.n	8002034 <Line_Track_Task+0x14c>
	if(line_track_task_tick>tick) return;
 8002026:	bf00      	nop
 8002028:	e004      	b.n	8002034 <Line_Track_Task+0x14c>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 800202a:	bf00      	nop
 800202c:	e002      	b.n	8002034 <Line_Track_Task+0x14c>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 800202e:	bf00      	nop
 8002030:	e000      	b.n	8002034 <Line_Track_Task+0x14c>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8002032:	bf00      	nop
}
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	f3af 8000 	nop.w
 8002040:	92ac7a3a 	.word	0x92ac7a3a
 8002044:	3fe71668 	.word	0x3fe71668
 8002048:	200002a8 	.word	0x200002a8
 800204c:	20000255 	.word	0x20000255
 8002050:	20000258 	.word	0x20000258
 8002054:	447a0000 	.word	0x447a0000
 8002058:	2000029c 	.word	0x2000029c
 800205c:	200002ac 	.word	0x200002ac
 8002060:	200002b0 	.word	0x200002b0
 8002064:	c4af0000 	.word	0xc4af0000
 8002068:	442b0000 	.word	0x442b0000
 800206c:	20000020 	.word	0x20000020

08002070 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	static float x_elso_prev=0;
	static float x_hatso;
	static float delta;
	static float gamma;

	uint32_t sum=0;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <Fast_Mode+0x124>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d171      	bne.n	800216e <Fast_Mode+0xfe>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2)) //ha változik az alattunk lévő vonalak száma
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <Fast_Mode+0x128>)
 800208c:	785a      	ldrb	r2, [r3, #1]
 800208e:	4b43      	ldr	r3, [pc, #268]	; (800219c <Fast_Mode+0x12c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d044      	beq.n	8002120 <Fast_Mode+0xb0>
 8002096:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <Fast_Mode+0x130>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <Fast_Mode+0x36>
 800209e:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <Fast_Mode+0x130>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d13c      	bne.n	8002120 <Fast_Mode+0xb0>
		{
			dt[index] = t - t_prev;
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <Fast_Mode+0x134>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <Fast_Mode+0x138>)
 80020ac:	7812      	ldrb	r2, [r2, #0]
 80020ae:	4611      	mov	r1, r2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a3d      	ldr	r2, [pc, #244]	; (80021ac <Fast_Mode+0x13c>)
 80020b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <Fast_Mode+0x13c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <Fast_Mode+0x13c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	441a      	add	r2, r3
 80020c4:	4b39      	ldr	r3, [pc, #228]	; (80021ac <Fast_Mode+0x13c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	441a      	add	r2, r3
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <Fast_Mode+0x13c>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	441a      	add	r2, r3
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <Fast_Mode+0x13c>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
			if((sum > 300) && (sum < 700))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020de:	d90f      	bls.n	8002100 <Fast_Mode+0x90>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80020e6:	d20b      	bcs.n	8002100 <Fast_Mode+0x90>
			{
				v_ref=4200;
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <Fast_Mode+0x140>)
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <Fast_Mode+0x144>)
 80020ec:	601a      	str	r2, [r3, #0]
				LED_B(1);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020f4:	4830      	ldr	r0, [pc, #192]	; (80021b8 <Fast_Mode+0x148>)
 80020f6:	f003 fd2f 	bl	8005b58 <HAL_GPIO_WritePin>
				Free_Run_State=1;
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <Fast_Mode+0x130>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
			}
			index++;
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <Fast_Mode+0x138>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <Fast_Mode+0x138>)
 800210a:	701a      	strb	r2, [r3, #0]
			if(index>4) index=0;
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <Fast_Mode+0x138>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d902      	bls.n	800211a <Fast_Mode+0xaa>
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <Fast_Mode+0x138>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 800211a:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <Fast_Mode+0x134>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <Fast_Mode+0x128>)
 8002122:	785a      	ldrb	r2, [r3, #1]
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <Fast_Mode+0x12c>)
 8002126:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <Fast_Mode+0x128>)
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d91a      	bls.n	8002166 <Fast_Mode+0xf6>
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <Fast_Mode+0x130>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <Fast_Mode+0xd0>
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <Fast_Mode+0x130>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d112      	bne.n	8002166 <Fast_Mode+0xf6>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <Fast_Mode+0x14c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	338c      	adds	r3, #140	; 0x8c
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d94d      	bls.n	80021e8 <Fast_Mode+0x178>
			{
				v_ref = 1100;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <Fast_Mode+0x140>)
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <Fast_Mode+0x150>)
 8002150:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <Fast_Mode+0x130>)
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 8002158:	2201      	movs	r2, #1
 800215a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215e:	4816      	ldr	r0, [pc, #88]	; (80021b8 <Fast_Mode+0x148>)
 8002160:	f003 fcfa 	bl	8005b58 <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8002164:	e040      	b.n	80021e8 <Fast_Mode+0x178>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <Fast_Mode+0x14c>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e03c      	b.n	80021e8 <Fast_Mode+0x178>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <Fast_Mode+0x124>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d138      	bne.n	80021e8 <Fast_Mode+0x178>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <Fast_Mode+0x128>)
 8002178:	795b      	ldrb	r3, [r3, #5]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <Fast_Mode+0x128>)
 800217e:	7992      	ldrb	r2, [r2, #6]
 8002180:	4313      	orrs	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
		if(dist>1000) v_ref=1500;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218a:	d91f      	bls.n	80021cc <Fast_Mode+0x15c>
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <Fast_Mode+0x140>)
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <Fast_Mode+0x154>)
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e029      	b.n	80021e8 <Fast_Mode+0x178>
 8002194:	2000024c 	.word	0x2000024c
 8002198:	2000029c 	.word	0x2000029c
 800219c:	20000024 	.word	0x20000024
 80021a0:	200002b4 	.word	0x200002b4
 80021a4:	200002b8 	.word	0x200002b8
 80021a8:	200002bc 	.word	0x200002bc
 80021ac:	20000028 	.word	0x20000028
 80021b0:	20000258 	.word	0x20000258
 80021b4:	45834000 	.word	0x45834000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	200002c0 	.word	0x200002c0
 80021c0:	44898000 	.word	0x44898000
 80021c4:	44bb8000 	.word	0x44bb8000
 80021c8:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021da:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80021c8 <Fast_Mode+0x158>
 80021de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021e2:	4bc5      	ldr	r3, [pc, #788]	; (80024f8 <Fast_Mode+0x488>)
 80021e4:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/248.0-102;;
 80021e8:	4bc4      	ldr	r3, [pc, #784]	; (80024fc <Fast_Mode+0x48c>)
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f4:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8002500 <Fast_Mode+0x490>
 80021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f9c2 	bl	8000588 <__aeabi_f2d>
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4bbe      	ldr	r3, [pc, #760]	; (8002504 <Fast_Mode+0x494>)
 800220a:	f7fe fb3f 	bl	800088c <__aeabi_ddiv>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4bbb      	ldr	r3, [pc, #748]	; (8002508 <Fast_Mode+0x498>)
 800221c:	f7fe f854 	bl	80002c8 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fcde 	bl	8000be8 <__aeabi_d2f>
 800222c:	4603      	mov	r3, r0
 800222e:	4ab7      	ldr	r2, [pc, #732]	; (800250c <Fast_Mode+0x49c>)
 8002230:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/244.0-102;
 8002232:	4bb2      	ldr	r3, [pc, #712]	; (80024fc <Fast_Mode+0x48c>)
 8002234:	78db      	ldrb	r3, [r3, #3]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223e:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002500 <Fast_Mode+0x490>
 8002242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002246:	ee17 0a90 	vmov	r0, s15
 800224a:	f7fe f99d 	bl	8000588 <__aeabi_f2d>
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4baf      	ldr	r3, [pc, #700]	; (8002510 <Fast_Mode+0x4a0>)
 8002254:	f7fe fb1a 	bl	800088c <__aeabi_ddiv>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4ba8      	ldr	r3, [pc, #672]	; (8002508 <Fast_Mode+0x498>)
 8002266:	f7fe f82f 	bl	80002c8 <__aeabi_dsub>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fcb9 	bl	8000be8 <__aeabi_d2f>
 8002276:	4603      	mov	r3, r0
 8002278:	4aa6      	ldr	r2, [pc, #664]	; (8002514 <Fast_Mode+0x4a4>)
 800227a:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 800227c:	4ba3      	ldr	r3, [pc, #652]	; (800250c <Fast_Mode+0x49c>)
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	4ba4      	ldr	r3, [pc, #656]	; (8002514 <Fast_Mode+0x4a4>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228c:	ee17 0a90 	vmov	r0, s15
 8002290:	f7fe f97a 	bl	8000588 <__aeabi_f2d>
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4b9f      	ldr	r3, [pc, #636]	; (8002518 <Fast_Mode+0x4a8>)
 800229a:	f7fe faf7 	bl	800088c <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	ec43 2b17 	vmov	d7, r2, r3
 80022a6:	eeb0 0a47 	vmov.f32	s0, s14
 80022aa:	eef0 0a67 	vmov.f32	s1, s15
 80022ae:	f00a f97f 	bl	800c5b0 <atan>
 80022b2:	ec53 2b10 	vmov	r2, r3, d0
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc95 	bl	8000be8 <__aeabi_d2f>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a96      	ldr	r2, [pc, #600]	; (800251c <Fast_Mode+0x4ac>)
 80022c2:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100)
 80022c4:	4b96      	ldr	r3, [pc, #600]	; (8002520 <Fast_Mode+0x4b0>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002524 <Fast_Mode+0x4b4>
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	f340 80b6 	ble.w	8002446 <Fast_Mode+0x3d6>
	{
		if(v<2000)
 80022da:	4b91      	ldr	r3, [pc, #580]	; (8002520 <Fast_Mode+0x4b0>)
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002528 <Fast_Mode+0x4b8>
 80022e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	d554      	bpl.n	8002398 <Fast_Mode+0x328>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 80022ee:	4b8c      	ldr	r3, [pc, #560]	; (8002520 <Fast_Mode+0x4b0>)
 80022f0:	ed93 7a00 	vldr	s14, [r3]
 80022f4:	4b8a      	ldr	r3, [pc, #552]	; (8002520 <Fast_Mode+0x4b0>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fe:	ee17 0a90 	vmov	r0, s15
 8002302:	f7fe f941 	bl	8000588 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	f04f 0000 	mov.w	r0, #0
 800230e:	4987      	ldr	r1, [pc, #540]	; (800252c <Fast_Mode+0x4bc>)
 8002310:	f7fe fabc 	bl	800088c <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	a36e      	add	r3, pc, #440	; (adr r3, 80024d8 <Fast_Mode+0x468>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f989 	bl	8000638 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fc5b 	bl	8000be8 <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	4a7e      	ldr	r2, [pc, #504]	; (8002530 <Fast_Mode+0x4c0>)
 8002336:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8002338:	4b79      	ldr	r3, [pc, #484]	; (8002520 <Fast_Mode+0x4b0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f923 	bl	8000588 <__aeabi_f2d>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	f04f 0000 	mov.w	r0, #0
 800234a:	497a      	ldr	r1, [pc, #488]	; (8002534 <Fast_Mode+0x4c4>)
 800234c:	f7fe fa9e 	bl	800088c <__aeabi_ddiv>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4614      	mov	r4, r2
 8002356:	461d      	mov	r5, r3
 8002358:	4b71      	ldr	r3, [pc, #452]	; (8002520 <Fast_Mode+0x4b0>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	4b74      	ldr	r3, [pc, #464]	; (8002530 <Fast_Mode+0x4c0>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 800236c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002370:	ee17 0a90 	vmov	r0, s15
 8002374:	f7fe f908 	bl	8000588 <__aeabi_f2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fe f95a 	bl	8000638 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fc2c 	bl	8000be8 <__aeabi_d2f>
 8002390:	4603      	mov	r3, r0
 8002392:	4a69      	ldr	r2, [pc, #420]	; (8002538 <Fast_Mode+0x4c8>)
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e056      	b.n	8002446 <Fast_Mode+0x3d6>
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_FAST;
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <Fast_Mode+0x4b0>)
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	4b60      	ldr	r3, [pc, #384]	; (8002520 <Fast_Mode+0x4b0>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a8:	ee17 0a90 	vmov	r0, s15
 80023ac:	f7fe f8ec 	bl	8000588 <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	495c      	ldr	r1, [pc, #368]	; (800252c <Fast_Mode+0x4bc>)
 80023ba:	f7fe fa67 	bl	800088c <__aeabi_ddiv>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	a346      	add	r3, pc, #280	; (adr r3, 80024e0 <Fast_Mode+0x470>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe f934 	bl	8000638 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fc06 	bl	8000be8 <__aeabi_d2f>
 80023dc:	4603      	mov	r3, r0
 80023de:	4a54      	ldr	r2, [pc, #336]	; (8002530 <Fast_Mode+0x4c0>)
 80023e0:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_FAST-v*k_p);
 80023e2:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <Fast_Mode+0x4b0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8ce 	bl	8000588 <__aeabi_f2d>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	f04f 0000 	mov.w	r0, #0
 80023f4:	494f      	ldr	r1, [pc, #316]	; (8002534 <Fast_Mode+0x4c4>)
 80023f6:	f7fe fa49 	bl	800088c <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4614      	mov	r4, r2
 8002400:	461d      	mov	r5, r3
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <Fast_Mode+0x4b0>)
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	4b49      	ldr	r3, [pc, #292]	; (8002530 <Fast_Mode+0x4c0>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	ee17 0a90 	vmov	r0, s15
 8002416:	f7fe f8b7 	bl	8000588 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	a132      	add	r1, pc, #200	; (adr r1, 80024e8 <Fast_Mode+0x478>)
 8002420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002424:	f7fd ff50 	bl	80002c8 <__aeabi_dsub>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fe f902 	bl	8000638 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fbd4 	bl	8000be8 <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	4a3d      	ldr	r2, [pc, #244]	; (8002538 <Fast_Mode+0x4c8>)
 8002444:	6013      	str	r3, [r2, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - K_D * (x_elso-x_elso_prev);
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <Fast_Mode+0x4c0>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eeb1 7a67 	vneg.f32	s14, s15
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <Fast_Mode+0x49c>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245a:	4b37      	ldr	r3, [pc, #220]	; (8002538 <Fast_Mode+0x4c8>)
 800245c:	edd3 6a00 	vldr	s13, [r3]
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <Fast_Mode+0x4ac>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246e:	ee17 0a90 	vmov	r0, s15
 8002472:	f7fe f889 	bl	8000588 <__aeabi_f2d>
 8002476:	4604      	mov	r4, r0
 8002478:	460d      	mov	r5, r1
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <Fast_Mode+0x49c>)
 800247c:	ed93 7a00 	vldr	s14, [r3]
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <Fast_Mode+0x4cc>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	ee17 0a90 	vmov	r0, s15
 800248e:	f7fe f87b 	bl	8000588 <__aeabi_f2d>
 8002492:	a317      	add	r3, pc, #92	; (adr r3, 80024f0 <Fast_Mode+0x480>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8ce 	bl	8000638 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd ff12 	bl	80002cc <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb9a 	bl	8000be8 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a22      	ldr	r2, [pc, #136]	; (8002540 <Fast_Mode+0x4d0>)
 80024b8:	6013      	str	r3, [r2, #0]
	x_elso_prev = x_elso;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <Fast_Mode+0x49c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1f      	ldr	r2, [pc, #124]	; (800253c <Fast_Mode+0x4cc>)
 80024c0:	6013      	str	r3, [r2, #0]

	return gamma;
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <Fast_Mode+0x4d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	ee07 3a90 	vmov	s15, r3
}
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdb0      	pop	{r4, r5, r7, pc}
 80024d4:	f3af 8000 	nop.w
 80024d8:	fd21ff2e 	.word	0xfd21ff2e
 80024dc:	402275f6 	.word	0x402275f6
 80024e0:	ab367a10 	.word	0xab367a10
 80024e4:	402d573e 	.word	0x402d573e
 80024e8:	66666666 	.word	0x66666666
 80024ec:	c01e6666 	.word	0xc01e6666
 80024f0:	9999999a 	.word	0x9999999a
 80024f4:	3f999999 	.word	0x3f999999
 80024f8:	20000258 	.word	0x20000258
 80024fc:	2000029c 	.word	0x2000029c
 8002500:	434c0000 	.word	0x434c0000
 8002504:	406f0000 	.word	0x406f0000
 8002508:	40598000 	.word	0x40598000
 800250c:	200002c4 	.word	0x200002c4
 8002510:	406e8000 	.word	0x406e8000
 8002514:	200002c8 	.word	0x200002c8
 8002518:	407c4000 	.word	0x407c4000
 800251c:	200002cc 	.word	0x200002cc
 8002520:	20000284 	.word	0x20000284
 8002524:	42c80000 	.word	0x42c80000
 8002528:	44fa0000 	.word	0x44fa0000
 800252c:	c0710000 	.word	0xc0710000
 8002530:	2000003c 	.word	0x2000003c
 8002534:	40710000 	.word	0x40710000
 8002538:	20000040 	.word	0x20000040
 800253c:	200002d0 	.word	0x200002d0
 8002540:	200002d4 	.word	0x200002d4

08002544 <__NVIC_DisableIRQ>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db12      	blt.n	800257c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	490a      	ldr	r1, [pc, #40]	; (8002588 <__NVIC_DisableIRQ+0x44>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	3320      	adds	r3, #32
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002570:	f3bf 8f4f 	dsb	sy
}
 8002574:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002576:	f3bf 8f6f 	isb	sy
}
 800257a:	bf00      	nop
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100

0800258c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002592:	f001 fbd5 	bl	8003d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002596:	f000 f86f 	bl	8002678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800259a:	f000 fd27 	bl	8002fec <MX_GPIO_Init>
  MX_DMA_Init();
 800259e:	f000 fd05 	bl	8002fac <MX_DMA_Init>
  MX_TIM2_Init();
 80025a2:	f000 fa41 	bl	8002a28 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80025a6:	f000 fc83 	bl	8002eb0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80025aa:	f000 fb35 	bl	8002c18 <MX_TIM4_Init>
  MX_ADC2_Init();
 80025ae:	f000 f967 	bl	8002880 <MX_ADC2_Init>
  MX_TIM3_Init();
 80025b2:	f000 faaf 	bl	8002b14 <MX_TIM3_Init>
  MX_UART5_Init();
 80025b6:	f000 fc51 	bl	8002e5c <MX_UART5_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fca3 	bl	8002f04 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80025be:	f000 fbf5 	bl	8002dac <MX_TIM8_Init>
  MX_ADC1_Init();
 80025c2:	f000 f8cb 	bl	800275c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80025c6:	f000 fcc7 	bl	8002f58 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80025ca:	f000 fba1 	bl	8002d10 <MX_TIM5_Init>
  MX_TIM1_Init();
 80025ce:	f000 f9a9 	bl	8002924 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim8);
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <main+0xc8>)
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <main+0xcc>)
 80025d8:	4a20      	ldr	r2, [pc, #128]	; (800265c <main+0xd0>)
 80025da:	4921      	ldr	r1, [pc, #132]	; (8002660 <main+0xd4>)
 80025dc:	4821      	ldr	r0, [pc, #132]	; (8002664 <main+0xd8>)
 80025de:	f7fe fd27 	bl	8001030 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 80025e2:	2108      	movs	r1, #8
 80025e4:	4820      	ldr	r0, [pc, #128]	; (8002668 <main+0xdc>)
 80025e6:	f000 fe0d 	bl	8003204 <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 80025ea:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <main+0xd8>)
 80025ec:	491f      	ldr	r1, [pc, #124]	; (800266c <main+0xe0>)
 80025ee:	4820      	ldr	r0, [pc, #128]	; (8002670 <main+0xe4>)
 80025f0:	f7ff f92e 	bl	8001850 <Battery_Voltage_Compensate>
  Mode_Selector(&huart1, &huart5);
 80025f4:	491f      	ldr	r1, [pc, #124]	; (8002674 <main+0xe8>)
 80025f6:	481b      	ldr	r0, [pc, #108]	; (8002664 <main+0xd8>)
 80025f8:	f7fe fe6c 	bl	80012d4 <Mode_Selector>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measure_Velocity_Task(&htim8,TICK, 4);
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <main+0xd4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	2204      	movs	r2, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4813      	ldr	r0, [pc, #76]	; (8002654 <main+0xc8>)
 8002608:	f7ff fa4e 	bl	8001aa8 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <main+0xd4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002612:	230a      	movs	r3, #10
 8002614:	4913      	ldr	r1, [pc, #76]	; (8002664 <main+0xd8>)
 8002616:	4811      	ldr	r0, [pc, #68]	; (800265c <main+0xd0>)
 8002618:	f7ff fac2 	bl	8001ba0 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 8);
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <main+0xd4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002622:	2308      	movs	r3, #8
 8002624:	490f      	ldr	r1, [pc, #60]	; (8002664 <main+0xd8>)
 8002626:	4813      	ldr	r0, [pc, #76]	; (8002674 <main+0xe8>)
 8002628:	f7ff fc5e 	bl	8001ee8 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <main+0xd4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	221d      	movs	r2, #29
 8002634:	9200      	str	r2, [sp, #0]
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <main+0xd8>)
 8002638:	2108      	movs	r1, #8
 800263a:	480b      	ldr	r0, [pc, #44]	; (8002668 <main+0xdc>)
 800263c:	f000 fdfe 	bl	800323c <Remote_Control_Task>
	  HDI_Read_Task(&htim2,TICK, 200);
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <main+0xd4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	22c8      	movs	r2, #200	; 0xc8
 8002648:	4619      	mov	r1, r3
 800264a:	4803      	ldr	r0, [pc, #12]	; (8002658 <main+0xcc>)
 800264c:	f7fe fd8a 	bl	8001164 <HDI_Read_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 8002650:	e7d4      	b.n	80025fc <main+0x70>
 8002652:	bf00      	nop
 8002654:	200004d0 	.word	0x200004d0
 8002658:	200003b0 	.word	0x200003b0
 800265c:	200003f8 	.word	0x200003f8
 8002660:	20000488 	.word	0x20000488
 8002664:	200005bc 	.word	0x200005bc
 8002668:	20000440 	.word	0x20000440
 800266c:	200002d8 	.word	0x200002d8
 8002670:	20000320 	.word	0x20000320
 8002674:	20000578 	.word	0x20000578

08002678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b094      	sub	sp, #80	; 0x50
 800267c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	2234      	movs	r2, #52	; 0x34
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f007 f8a8 	bl	80097dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	2300      	movs	r3, #0
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <SystemClock_Config+0xdc>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <SystemClock_Config+0xdc>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6413      	str	r3, [r2, #64]	; 0x40
 80026ac:	4b29      	ldr	r3, [pc, #164]	; (8002754 <SystemClock_Config+0xdc>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b8:	2300      	movs	r3, #0
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	4b26      	ldr	r3, [pc, #152]	; (8002758 <SystemClock_Config+0xe0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a25      	ldr	r2, [pc, #148]	; (8002758 <SystemClock_Config+0xe0>)
 80026c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <SystemClock_Config+0xe0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026de:	2302      	movs	r3, #2
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026e8:	2304      	movs	r3, #4
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80026ec:	23b4      	movs	r3, #180	; 0xb4
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f0:	2302      	movs	r3, #2
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026f4:	2302      	movs	r3, #2
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026f8:	2302      	movs	r3, #2
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fe0f 	bl	8006324 <HAL_RCC_OscConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800270c:	f000 fd74 	bl	80031f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002710:	f003 fa6e 	bl	8005bf0 <HAL_PWREx_EnableOverDrive>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800271a:	f000 fd6d 	bl	80031f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800271e:	230f      	movs	r3, #15
 8002720:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002722:	2302      	movs	r3, #2
 8002724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800272a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800272e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002734:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	2105      	movs	r1, #5
 800273c:	4618      	mov	r0, r3
 800273e:	f003 faa7 	bl	8005c90 <HAL_RCC_ClockConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002748:	f000 fd56 	bl	80031f8 <Error_Handler>
  }
}
 800274c:	bf00      	nop
 800274e:	3750      	adds	r7, #80	; 0x50
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000

0800275c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002762:	f107 0320 	add.w	r3, r7, #32
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002770:	463b      	mov	r3, r7
 8002772:	2220      	movs	r2, #32
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f007 f830 	bl	80097dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800277c:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <MX_ADC1_Init+0x114>)
 800277e:	4a3d      	ldr	r2, [pc, #244]	; (8002874 <MX_ADC1_Init+0x118>)
 8002780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002782:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <MX_ADC1_Init+0x114>)
 8002784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800278a:	4b39      	ldr	r3, [pc, #228]	; (8002870 <MX_ADC1_Init+0x114>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002790:	4b37      	ldr	r3, [pc, #220]	; (8002870 <MX_ADC1_Init+0x114>)
 8002792:	2201      	movs	r2, #1
 8002794:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002796:	4b36      	ldr	r3, [pc, #216]	; (8002870 <MX_ADC1_Init+0x114>)
 8002798:	2200      	movs	r2, #0
 800279a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <MX_ADC1_Init+0x114>)
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <MX_ADC1_Init+0x114>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <MX_ADC1_Init+0x114>)
 80027ac:	4a32      	ldr	r2, [pc, #200]	; (8002878 <MX_ADC1_Init+0x11c>)
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027b0:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <MX_ADC1_Init+0x114>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <MX_ADC1_Init+0x114>)
 80027b8:	2203      	movs	r2, #3
 80027ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <MX_ADC1_Init+0x114>)
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <MX_ADC1_Init+0x114>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027ca:	4829      	ldr	r0, [pc, #164]	; (8002870 <MX_ADC1_Init+0x114>)
 80027cc:	f001 fb4e 	bl	8003e6c <HAL_ADC_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80027d6:	f000 fd0f 	bl	80031f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027da:	2308      	movs	r3, #8
 80027dc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80027e2:	2307      	movs	r3, #7
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e6:	f107 0320 	add.w	r3, r7, #32
 80027ea:	4619      	mov	r1, r3
 80027ec:	4820      	ldr	r0, [pc, #128]	; (8002870 <MX_ADC1_Init+0x114>)
 80027ee:	f001 fceb 	bl	80041c8 <HAL_ADC_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80027f8:	f000 fcfe 	bl	80031f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80027fc:	2302      	movs	r3, #2
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002800:	f107 0320 	add.w	r3, r7, #32
 8002804:	4619      	mov	r1, r3
 8002806:	481a      	ldr	r0, [pc, #104]	; (8002870 <MX_ADC1_Init+0x114>)
 8002808:	f001 fcde 	bl	80041c8 <HAL_ADC_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8002812:	f000 fcf1 	bl	80031f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8002816:	2303      	movs	r3, #3
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800281a:	f107 0320 	add.w	r3, r7, #32
 800281e:	4619      	mov	r1, r3
 8002820:	4813      	ldr	r0, [pc, #76]	; (8002870 <MX_ADC1_Init+0x114>)
 8002822:	f001 fcd1 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800282c:	f000 fce4 	bl	80031f8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8002830:	2308      	movs	r3, #8
 8002832:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002834:	2301      	movs	r3, #1
 8002836:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <MX_ADC1_Init+0x120>)
 8002846:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002854:	463b      	mov	r3, r7
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <MX_ADC1_Init+0x114>)
 800285a:	f001 fee3 	bl	8004624 <HAL_ADCEx_InjectedConfigChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002864:	f000 fcc8 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200002d8 	.word	0x200002d8
 8002874:	40012000 	.word	0x40012000
 8002878:	0f000001 	.word	0x0f000001
 800287c:	000f0001 	.word	0x000f0001

08002880 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002886:	463b      	mov	r3, r7
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <MX_ADC2_Init+0x98>)
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <MX_ADC2_Init+0x9c>)
 8002896:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <MX_ADC2_Init+0x98>)
 800289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <MX_ADC2_Init+0x98>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <MX_ADC2_Init+0x98>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <MX_ADC2_Init+0x98>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <MX_ADC2_Init+0x98>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <MX_ADC2_Init+0x98>)
 80028bc:	2200      	movs	r2, #0
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <MX_ADC2_Init+0x98>)
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <MX_ADC2_Init+0xa0>)
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <MX_ADC2_Init+0x98>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <MX_ADC2_Init+0x98>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_ADC2_Init+0x98>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <MX_ADC2_Init+0x98>)
 80028dc:	2201      	movs	r2, #1
 80028de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028e0:	480d      	ldr	r0, [pc, #52]	; (8002918 <MX_ADC2_Init+0x98>)
 80028e2:	f001 fac3 	bl	8003e6c <HAL_ADC_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80028ec:	f000 fc84 	bl	80031f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80028f0:	230d      	movs	r3, #13
 80028f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80028f8:	2307      	movs	r3, #7
 80028fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_ADC2_Init+0x98>)
 8002902:	f001 fc61 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800290c:	f000 fc74 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000320 	.word	0x20000320
 800291c:	40012100 	.word	0x40012100
 8002920:	0f000001 	.word	0x0f000001

08002924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b092      	sub	sp, #72	; 0x48
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
 8002944:	615a      	str	r2, [r3, #20]
 8002946:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2220      	movs	r2, #32
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f006 ff44 	bl	80097dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002956:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <MX_TIM1_Init+0x100>)
 8002958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800295a:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <MX_TIM1_Init+0xfc>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002966:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800296c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002976:	2200      	movs	r2, #0
 8002978:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <MX_TIM1_Init+0xfc>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002980:	4827      	ldr	r0, [pc, #156]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002982:	f004 f825 	bl	80069d0 <HAL_TIM_PWM_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800298c:	f000 fc34 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800299c:	4619      	mov	r1, r3
 800299e:	4820      	ldr	r0, [pc, #128]	; (8002a20 <MX_TIM1_Init+0xfc>)
 80029a0:	f005 fd64 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80029aa:	f000 fc25 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ae:	2360      	movs	r3, #96	; 0x60
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	220c      	movs	r2, #12
 80029cc:	4619      	mov	r1, r3
 80029ce:	4814      	ldr	r0, [pc, #80]	; (8002a20 <MX_TIM1_Init+0xfc>)
 80029d0:	f004 fe62 	bl	8007698 <HAL_TIM_PWM_ConfigChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80029da:	f000 fc0d 	bl	80031f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4807      	ldr	r0, [pc, #28]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002a02:	f005 fdaf 	bl	8008564 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002a0c:	f000 fbf4 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <MX_TIM1_Init+0xfc>)
 8002a12:	f000 fea5 	bl	8003760 <HAL_TIM_MspPostInit>

}
 8002a16:	bf00      	nop
 8002a18:	3748      	adds	r7, #72	; 0x48
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000368 	.word	0x20000368
 8002a24:	40010000 	.word	0x40010000

08002a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	; 0x38
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3c:	f107 0320 	add.w	r3, r7, #32
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
 8002a54:	615a      	str	r2, [r3, #20]
 8002a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002a60:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a62:	2259      	movs	r2, #89	; 0x59
 8002a64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a74:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a7a:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a80:	4823      	ldr	r0, [pc, #140]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a82:	f003 feed 	bl	8006860 <HAL_TIM_Base_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a8c:	f000 fbb4 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481c      	ldr	r0, [pc, #112]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002a9e:	f004 febd 	bl	800781c <HAL_TIM_ConfigClockSource>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002aa8:	f000 fba6 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002aac:	4818      	ldr	r0, [pc, #96]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002aae:	f003 ff8f 	bl	80069d0 <HAL_TIM_PWM_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ab8:	f000 fb9e 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4811      	ldr	r0, [pc, #68]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002acc:	f005 fcce 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ad6:	f000 fb8f 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ada:	2360      	movs	r3, #96	; 0x60
 8002adc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8002ade:	f240 23ed 	movw	r3, #749	; 0x2ed
 8002ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	2200      	movs	r2, #0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002af4:	f004 fdd0 	bl	8007698 <HAL_TIM_PWM_ConfigChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002afe:	f000 fb7b 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b02:	4803      	ldr	r0, [pc, #12]	; (8002b10 <MX_TIM2_Init+0xe8>)
 8002b04:	f000 fe2c 	bl	8003760 <HAL_TIM_MspPostInit>

}
 8002b08:	bf00      	nop
 8002b0a:	3738      	adds	r7, #56	; 0x38
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200003b0 	.word	0x200003b0

08002b14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b28:	f107 0320 	add.w	r3, r7, #32
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
 8002b40:	615a      	str	r2, [r3, #20]
 8002b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b46:	4a33      	ldr	r2, [pc, #204]	; (8002c14 <MX_TIM3_Init+0x100>)
 8002b48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b52:	2260      	movs	r2, #96	; 0x60
 8002b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b6a:	4829      	ldr	r0, [pc, #164]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b6c:	f003 fe78 	bl	8006860 <HAL_TIM_Base_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b76:	f000 fb3f 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b84:	4619      	mov	r1, r3
 8002b86:	4822      	ldr	r0, [pc, #136]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b88:	f004 fe48 	bl	800781c <HAL_TIM_ConfigClockSource>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b92:	f000 fb31 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b96:	481e      	ldr	r0, [pc, #120]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002b98:	f003 ff1a 	bl	80069d0 <HAL_TIM_PWM_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002ba2:	f000 fb29 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bae:	f107 0320 	add.w	r3, r7, #32
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4816      	ldr	r0, [pc, #88]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002bb6:	f005 fc59 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002bc0:	f000 fb1a 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc4:	2360      	movs	r3, #96	; 0x60
 8002bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480d      	ldr	r0, [pc, #52]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002bdc:	f004 fd5c 	bl	8007698 <HAL_TIM_PWM_ConfigChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002be6:	f000 fb07 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2204      	movs	r2, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002bf2:	f004 fd51 	bl	8007698 <HAL_TIM_PWM_ConfigChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002bfc:	f000 fafc 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c00:	4803      	ldr	r0, [pc, #12]	; (8002c10 <MX_TIM3_Init+0xfc>)
 8002c02:	f000 fdad 	bl	8003760 <HAL_TIM_MspPostInit>

}
 8002c06:	bf00      	nop
 8002c08:	3738      	adds	r7, #56	; 0x38
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200003f8 	.word	0x200003f8
 8002c14:	40000400 	.word	0x40000400

08002c18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1e:	f107 0318 	add.w	r3, r7, #24
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c36:	463b      	mov	r3, r7
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c44:	4a31      	ldr	r2, [pc, #196]	; (8002d0c <MX_TIM4_Init+0xf4>)
 8002c46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c4a:	f240 321f 	movw	r2, #799	; 0x31f
 8002c4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c6a:	4827      	ldr	r0, [pc, #156]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c6c:	f003 fdf8 	bl	8006860 <HAL_TIM_Base_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002c76:	f000 fabf 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c80:	f107 0318 	add.w	r3, r7, #24
 8002c84:	4619      	mov	r1, r3
 8002c86:	4820      	ldr	r0, [pc, #128]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c88:	f004 fdc8 	bl	800781c <HAL_TIM_ConfigClockSource>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002c92:	f000 fab1 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c96:	481c      	ldr	r0, [pc, #112]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002c98:	f004 f822 	bl	8006ce0 <HAL_TIM_IC_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002ca2:	f000 faa9 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4814      	ldr	r0, [pc, #80]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002cb6:	f005 fbd9 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002cc0:	f000 fa9a 	bl	80031f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	4619      	mov	r1, r3
 8002cda:	480b      	ldr	r0, [pc, #44]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002cdc:	f004 fc40 	bl	8007560 <HAL_TIM_IC_ConfigChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002ce6:	f000 fa87 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002cea:	463b      	mov	r3, r7
 8002cec:	220c      	movs	r2, #12
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_TIM4_Init+0xf0>)
 8002cf2:	f004 fc35 	bl	8007560 <HAL_TIM_IC_ConfigChannel>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8002cfc:	f000 fa7c 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d00:	bf00      	nop
 8002d02:	3728      	adds	r7, #40	; 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000440 	.word	0x20000440
 8002d0c:	40000800 	.word	0x40000800

08002d10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d16:	f107 0308 	add.w	r3, r7, #8
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	463b      	mov	r3, r7
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <MX_TIM5_Init+0x98>)
 8002d30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d34:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002d38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295
 8002d46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d54:	4813      	ldr	r0, [pc, #76]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d56:	f003 fd83 	bl	8006860 <HAL_TIM_Base_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002d60:	f000 fa4a 	bl	80031f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	4619      	mov	r1, r3
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d72:	f004 fd53 	bl	800781c <HAL_TIM_ConfigClockSource>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002d7c:	f000 fa3c 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d88:	463b      	mov	r3, r7
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4805      	ldr	r0, [pc, #20]	; (8002da4 <MX_TIM5_Init+0x94>)
 8002d8e:	f005 fb6d 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002d98:	f000 fa2e 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d9c:	bf00      	nop
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000488 	.word	0x20000488
 8002da8:	40000c00 	.word	0x40000c00

08002dac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f006 fd0e 	bl	80097dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dc8:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002dca:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <MX_TIM8_Init+0xac>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002de8:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002df4:	2303      	movs	r3, #3
 8002df6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8002e04:	230c      	movs	r3, #12
 8002e06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8002e14:	230c      	movs	r3, #12
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480d      	ldr	r0, [pc, #52]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002e20:	f004 f962 	bl	80070e8 <HAL_TIM_Encoder_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002e2a:	f000 f9e5 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4806      	ldr	r0, [pc, #24]	; (8002e54 <MX_TIM8_Init+0xa8>)
 8002e3c:	f005 fb16 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002e46:	f000 f9d7 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002e4a:	bf00      	nop
 8002e4c:	3730      	adds	r7, #48	; 0x30
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200004d0 	.word	0x200004d0
 8002e58:	40010400 	.word	0x40010400

08002e5c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <MX_UART5_Init+0x50>)
 8002e64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e68:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002e6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e82:	220c      	movs	r2, #12
 8002e84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e92:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e94:	f005 fbcc 	bl	8008630 <HAL_UART_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002e9e:	f000 f9ab 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000578 	.word	0x20000578
 8002eac:	40005000 	.word	0x40005000

08002eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <MX_USART1_UART_Init+0x50>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee8:	f005 fba2 	bl	8008630 <HAL_UART_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ef2:	f000 f981 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200005bc 	.word	0x200005bc
 8002f00:	40011000 	.word	0x40011000

08002f04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <MX_USART2_UART_Init+0x50>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f3a:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f3c:	f005 fb78 	bl	8008630 <HAL_UART_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f46:	f000 f957 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000600 	.word	0x20000600
 8002f54:	40004400 	.word	0x40004400

08002f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <MX_USART3_UART_Init+0x50>)
 8002f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f7e:	220c      	movs	r2, #12
 8002f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f90:	f005 fb4e 	bl	8008630 <HAL_UART_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f9a:	f000 f92d 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000644 	.word	0x20000644
 8002fa8:	40004800 	.word	0x40004800

08002fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <MX_DMA_Init+0x3c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <MX_DMA_Init+0x3c>)
 8002fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MX_DMA_Init+0x3c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	202f      	movs	r0, #47	; 0x2f
 8002fd4:	f001 fdbf 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002fd8:	202f      	movs	r0, #47	; 0x2f
 8002fda:	f001 fdd8 	bl	8004b8e <HAL_NVIC_EnableIRQ>

}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	60da      	str	r2, [r3, #12]
 8003000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	4b64      	ldr	r3, [pc, #400]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a63      	ldr	r2, [pc, #396]	; (8003198 <MX_GPIO_Init+0x1ac>)
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b61      	ldr	r3, [pc, #388]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	4b5d      	ldr	r3, [pc, #372]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b5a      	ldr	r3, [pc, #360]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a55      	ldr	r2, [pc, #340]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b53      	ldr	r3, [pc, #332]	; (8003198 <MX_GPIO_Init+0x1ac>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <MX_GPIO_Init+0x1ac>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4b48      	ldr	r3, [pc, #288]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a47      	ldr	r2, [pc, #284]	; (8003198 <MX_GPIO_Init+0x1ac>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b45      	ldr	r3, [pc, #276]	; (8003198 <MX_GPIO_Init+0x1ac>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 800308e:	2200      	movs	r2, #0
 8003090:	2102      	movs	r1, #2
 8003092:	4842      	ldr	r0, [pc, #264]	; (800319c <MX_GPIO_Init+0x1b0>)
 8003094:	f002 fd60 	bl	8005b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8003098:	2200      	movs	r2, #0
 800309a:	2122      	movs	r1, #34	; 0x22
 800309c:	4840      	ldr	r0, [pc, #256]	; (80031a0 <MX_GPIO_Init+0x1b4>)
 800309e:	f002 fd5b 	bl	8005b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80030a2:	2200      	movs	r2, #0
 80030a4:	f24e 0142 	movw	r1, #57410	; 0xe042
 80030a8:	483e      	ldr	r0, [pc, #248]	; (80031a4 <MX_GPIO_Init+0x1b8>)
 80030aa:	f002 fd55 	bl	8005b58 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 80030ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	4835      	ldr	r0, [pc, #212]	; (800319c <MX_GPIO_Init+0x1b0>)
 80030c6:	f002 fb9b 	bl	8005800 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 80030ca:	2302      	movs	r3, #2
 80030cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	482e      	ldr	r0, [pc, #184]	; (800319c <MX_GPIO_Init+0x1b0>)
 80030e2:	f002 fb8d 	bl	8005800 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 80030e6:	2322      	movs	r3, #34	; 0x22
 80030e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	4828      	ldr	r0, [pc, #160]	; (80031a0 <MX_GPIO_Init+0x1b4>)
 80030fe:	f002 fb7f 	bl	8005800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8003102:	f24e 0342 	movw	r3, #57410	; 0xe042
 8003106:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2301      	movs	r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	4619      	mov	r1, r3
 800311a:	4822      	ldr	r0, [pc, #136]	; (80031a4 <MX_GPIO_Init+0x1b8>)
 800311c:	f002 fb70 	bl	8005800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 8003120:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8003124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4619      	mov	r1, r3
 8003134:	481b      	ldr	r0, [pc, #108]	; (80031a4 <MX_GPIO_Init+0x1b8>)
 8003136:	f002 fb63 	bl	8005800 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800313a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4619      	mov	r1, r3
 800314e:	4814      	ldr	r0, [pc, #80]	; (80031a0 <MX_GPIO_Init+0x1b4>)
 8003150:	f002 fb56 	bl	8005800 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003154:	2310      	movs	r3, #16
 8003156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003158:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800315c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	480e      	ldr	r0, [pc, #56]	; (80031a4 <MX_GPIO_Init+0x1b8>)
 800316a:	f002 fb49 	bl	8005800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	200a      	movs	r0, #10
 8003174:	f001 fcef 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003178:	200a      	movs	r0, #10
 800317a:	f001 fd08 	bl	8004b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	2028      	movs	r0, #40	; 0x28
 8003184:	f001 fce7 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003188:	2028      	movs	r0, #40	; 0x28
 800318a:	f001 fd00 	bl	8004b8e <HAL_NVIC_EnableIRQ>

}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	; 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	40020800 	.word	0x40020800
 80031a0:	40020000 	.word	0x40020000
 80031a4:	40020400 	.word	0x40020400

080031a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b8:	d105      	bne.n	80031c6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		bFlag[0]=1;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
		NVIC_DisableIRQ(On_Board_Button_EXTI_IRQn);
 80031c0:	2028      	movs	r0, #40	; 0x28
 80031c2:	f7ff f9bf 	bl	8002544 <__NVIC_DisableIRQ>
	}
	if(GPIO_Pin == B1_Pin)
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d105      	bne.n	80031d8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		bFlag[1]=1;
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	705a      	strb	r2, [r3, #1]
		NVIC_DisableIRQ(B1_EXTI_IRQn);
 80031d2:	200a      	movs	r0, #10
 80031d4:	f7ff f9b6 	bl	8002544 <__NVIC_DisableIRQ>
	}
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000250 	.word	0x20000250

080031e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	//if(huart == &huart1)Uart_Receive_From_PC_ISR(huart);
	//else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(huart);
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031fc:	b672      	cpsid	i
}
 80031fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003200:	e7fe      	b.n	8003200 <Error_Handler+0x8>
	...

08003204 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <Remote_Control_Init+0x34>)
 8003210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003214:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <Remote_Control_Init+0x34>)
 8003218:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800321c:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <Remote_Control_Init+0x34>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8003224:	2303      	movs	r3, #3
 8003226:	4a04      	ldr	r2, [pc, #16]	; (8003238 <Remote_Control_Init+0x34>)
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f003 fdb2 	bl	8006d94 <HAL_TIM_IC_Start_DMA>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	2000068c 	.word	0x2000068c

0800323c <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <Remote_Control_Task+0x168>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	f0c0 80a2 	bcc.w	800339a <Remote_Control_Task+0x15e>
	remote_control_tick = tick + period;
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4413      	add	r3, r2
 800325c:	4a51      	ldr	r2, [pc, #324]	; (80033a4 <Remote_Control_Task+0x168>)
 800325e:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8003260:	201e      	movs	r0, #30
 8003262:	f001 fca2 	bl	8004baa <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 8003266:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <Remote_Control_Task+0x16c>)
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <Remote_Control_Task+0x16c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	bfb8      	it	lt
 8003274:	425b      	neglt	r3, r3
 8003276:	4a4d      	ldr	r2, [pc, #308]	; (80033ac <Remote_Control_Task+0x170>)
 8003278:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 800327a:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <Remote_Control_Task+0x16c>)
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <Remote_Control_Task+0x16c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	bfb8      	it	lt
 8003288:	425b      	neglt	r3, r3
 800328a:	4a49      	ldr	r2, [pc, #292]	; (80033b0 <Remote_Control_Task+0x174>)
 800328c:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 800328e:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <Remote_Control_Task+0x16c>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <Remote_Control_Task+0x16c>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bfb8      	it	lt
 800329c:	425b      	neglt	r3, r3
 800329e:	4a45      	ldr	r2, [pc, #276]	; (80033b4 <Remote_Control_Task+0x178>)
 80032a0:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 80032a2:	201e      	movs	r0, #30
 80032a4:	f001 fc73 	bl	8004b8e <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 80032a8:	4b40      	ldr	r3, [pc, #256]	; (80033ac <Remote_Control_Task+0x170>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	dd06      	ble.n	80032c2 <Remote_Control_Task+0x86>
 80032b4:	4b3d      	ldr	r3, [pc, #244]	; (80033ac <Remote_Control_Task+0x170>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80032bc:	33ff      	adds	r3, #255	; 0xff
 80032be:	4a3b      	ldr	r2, [pc, #236]	; (80033ac <Remote_Control_Task+0x170>)
 80032c0:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <Remote_Control_Task+0x174>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	dd06      	ble.n	80032dc <Remote_Control_Task+0xa0>
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <Remote_Control_Task+0x174>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80032d6:	33ff      	adds	r3, #255	; 0xff
 80032d8:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <Remote_Control_Task+0x174>)
 80032da:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 80032dc:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <Remote_Control_Task+0x178>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	dd06      	ble.n	80032f6 <Remote_Control_Task+0xba>
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <Remote_Control_Task+0x178>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80032f0:	33ff      	adds	r3, #255	; 0xff
 80032f2:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <Remote_Control_Task+0x178>)
 80032f4:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <Remote_Control_Task+0x170>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <Remote_Control_Task+0x174>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	da0b      	bge.n	800331a <Remote_Control_Task+0xde>
 8003302:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <Remote_Control_Task+0x170>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <Remote_Control_Task+0x178>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	da05      	bge.n	800331a <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <Remote_Control_Task+0x170>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <Remote_Control_Task+0x17c>)
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	e016      	b.n	8003348 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <Remote_Control_Task+0x174>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <Remote_Control_Task+0x170>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	da0b      	bge.n	800333e <Remote_Control_Task+0x102>
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <Remote_Control_Task+0x174>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <Remote_Control_Task+0x178>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	da05      	bge.n	800333e <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8003332:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <Remote_Control_Task+0x174>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <Remote_Control_Task+0x17c>)
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e004      	b.n	8003348 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 800333e:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <Remote_Control_Task+0x178>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <Remote_Control_Task+0x17c>)
 8003346:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <Remote_Control_Task+0x17c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b46      	cmp	r3, #70	; 0x46
 800334e:	d903      	bls.n	8003358 <Remote_Control_Task+0x11c>
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <Remote_Control_Task+0x17c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b63      	cmp	r3, #99	; 0x63
 8003356:	d904      	bls.n	8003362 <Remote_Control_Task+0x126>
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <Remote_Control_Task+0x17c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003360:	d109      	bne.n	8003376 <Remote_Control_Task+0x13a>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003368:	4814      	ldr	r0, [pc, #80]	; (80033bc <Remote_Control_Task+0x180>)
 800336a:	f002 fbf5 	bl	8005b58 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <Remote_Control_Task+0x184>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e012      	b.n	800339c <Remote_Control_Task+0x160>
	}
	else
	{
		LED_R(0);
 8003376:	2201      	movs	r2, #1
 8003378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800337c:	480f      	ldr	r0, [pc, #60]	; (80033bc <Remote_Control_Task+0x180>)
 800337e:	f002 fbeb 	bl	8005b58 <HAL_GPIO_WritePin>
		if(tLow <= 70) motorEnRemote=1;
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <Remote_Control_Task+0x17c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b46      	cmp	r3, #70	; 0x46
 8003388:	d803      	bhi.n	8003392 <Remote_Control_Task+0x156>
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <Remote_Control_Task+0x184>)
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e004      	b.n	800339c <Remote_Control_Task+0x160>
		else motorEnRemote=2;
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <Remote_Control_Task+0x184>)
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e000      	b.n	800339c <Remote_Control_Task+0x160>
	if(remote_control_tick>tick) return;
 800339a:	bf00      	nop

	}
}
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000698 	.word	0x20000698
 80033a8:	2000068c 	.word	0x2000068c
 80033ac:	20000044 	.word	0x20000044
 80033b0:	20000048 	.word	0x20000048
 80033b4:	2000004c 	.word	0x2000004c
 80033b8:	20000050 	.word	0x20000050
 80033bc:	40020400 	.word	0x40020400
 80033c0:	20000688 	.word	0x20000688

080033c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_MspInit+0x4c>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_MspInit+0x4c>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_MspInit+0x4c>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_MspInit+0x4c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <HAL_MspInit+0x4c>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_MspInit+0x4c>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003402:	2007      	movs	r0, #7
 8003404:	f001 fb9c 	bl	8004b40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	; 0x30
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 031c 	add.w	r3, r7, #28
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2e      	ldr	r2, [pc, #184]	; (80034ec <HAL_ADC_MspInit+0xd8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d128      	bne.n	8003488 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 8003440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003472:	2303      	movs	r3, #3
 8003474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 800347a:	f107 031c 	add.w	r3, r7, #28
 800347e:	4619      	mov	r1, r3
 8003480:	481c      	ldr	r0, [pc, #112]	; (80034f4 <HAL_ADC_MspInit+0xe0>)
 8003482:	f002 f9bd 	bl	8005800 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003486:	e02c      	b.n	80034e2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_ADC_MspInit+0xe4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d127      	bne.n	80034e2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 800349c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a0:	6453      	str	r3, [r2, #68]	; 0x44
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_ADC_MspInit+0xdc>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 80034ca:	2308      	movs	r3, #8
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 80034d6:	f107 031c 	add.w	r3, r7, #28
 80034da:	4619      	mov	r1, r3
 80034dc:	4807      	ldr	r0, [pc, #28]	; (80034fc <HAL_ADC_MspInit+0xe8>)
 80034de:	f002 f98f 	bl	8005800 <HAL_GPIO_Init>
}
 80034e2:	bf00      	nop
 80034e4:	3730      	adds	r7, #48	; 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40012000 	.word	0x40012000
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40012100 	.word	0x40012100
 80034fc:	40020800 	.word	0x40020800

08003500 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0b      	ldr	r2, [pc, #44]	; (800353c <HAL_TIM_PWM_MspInit+0x3c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_TIM_PWM_MspInit+0x40>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_TIM_PWM_MspInit+0x40>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6453      	str	r3, [r2, #68]	; 0x44
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_TIM_PWM_MspInit+0x40>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	; 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d116      	bne.n	8003594 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	4b52      	ldr	r3, [pc, #328]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a51      	ldr	r2, [pc, #324]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	2100      	movs	r1, #0
 8003586:	201c      	movs	r0, #28
 8003588:	f001 fae5 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800358c:	201c      	movs	r0, #28
 800358e:	f001 fafe 	bl	8004b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003592:	e08b      	b.n	80036ac <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a47      	ldr	r2, [pc, #284]	; (80036b8 <HAL_TIM_Base_MspInit+0x174>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
}
 80035ba:	e077      	b.n	80036ac <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3e      	ldr	r2, [pc, #248]	; (80036bc <HAL_TIM_Base_MspInit+0x178>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d15f      	bne.n	8003686 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a39      	ldr	r2, [pc, #228]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 80035fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	2300      	movs	r3, #0
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003610:	2302      	movs	r3, #2
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	f107 031c 	add.w	r3, r7, #28
 8003618:	4619      	mov	r1, r3
 800361a:	4829      	ldr	r0, [pc, #164]	; (80036c0 <HAL_TIM_Base_MspInit+0x17c>)
 800361c:	f002 f8f0 	bl	8005800 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003622:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <HAL_TIM_Base_MspInit+0x184>)
 8003624:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003626:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003628:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800362c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362e:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 800363c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003640:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003648:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 800364c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003650:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003658:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 800365c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003660:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003664:	2200      	movs	r2, #0
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003668:	4816      	ldr	r0, [pc, #88]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 800366a:	f001 fab9 	bl	8004be0 <HAL_DMA_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8003674:	f7ff fdc0 	bl	80031f8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
 800367e:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <HAL_TIM_Base_MspInit+0x180>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003684:	e012      	b.n	80036ac <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM5)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_TIM_Base_MspInit+0x188>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10d      	bne.n	80036ac <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 800369a:	f043 0308 	orr.w	r3, r3, #8
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_TIM_Base_MspInit+0x170>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
}
 80036ac:	bf00      	nop
 80036ae:	3730      	adds	r7, #48	; 0x30
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40020400 	.word	0x40020400
 80036c4:	20000518 	.word	0x20000518
 80036c8:	400260b8 	.word	0x400260b8
 80036cc:	40000c00 	.word	0x40000c00

080036d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_TIM_Encoder_MspInit+0x84>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d12b      	bne.n	800374a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	4b18      	ldr	r3, [pc, #96]	; (8003758 <HAL_TIM_Encoder_MspInit+0x88>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_TIM_Encoder_MspInit+0x88>)
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	6453      	str	r3, [r2, #68]	; 0x44
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_TIM_Encoder_MspInit+0x88>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_TIM_Encoder_MspInit+0x88>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a10      	ldr	r2, [pc, #64]	; (8003758 <HAL_TIM_Encoder_MspInit+0x88>)
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_TIM_Encoder_MspInit+0x88>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800372a:	23c0      	movs	r3, #192	; 0xc0
 800372c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800373a:	2303      	movs	r3, #3
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	4619      	mov	r1, r3
 8003744:	4805      	ldr	r0, [pc, #20]	; (800375c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003746:	f002 f85b 	bl	8005800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800374a:	bf00      	nop
 800374c:	3728      	adds	r7, #40	; 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40010400 	.word	0x40010400
 8003758:	40023800 	.word	0x40023800
 800375c:	40020800 	.word	0x40020800

08003760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a37      	ldr	r2, [pc, #220]	; (800385c <HAL_TIM_MspPostInit+0xfc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d11f      	bne.n	80037c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a35      	ldr	r2, [pc, #212]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b33      	ldr	r3, [pc, #204]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 800379e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	2302      	movs	r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ac:	2300      	movs	r3, #0
 80037ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037b0:	2301      	movs	r3, #1
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4619      	mov	r1, r3
 80037ba:	482a      	ldr	r0, [pc, #168]	; (8003864 <HAL_TIM_MspPostInit+0x104>)
 80037bc:	f002 f820 	bl	8005800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037c0:	e047      	b.n	8003852 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ca:	d11f      	bne.n	800380c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6313      	str	r3, [r2, #48]	; 0x30
 80037dc:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 80037e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037fa:	2301      	movs	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	4817      	ldr	r0, [pc, #92]	; (8003864 <HAL_TIM_MspPostInit+0x104>)
 8003806:	f001 fffb 	bl	8005800 <HAL_GPIO_Init>
}
 800380a:	e022      	b.n	8003852 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <HAL_TIM_MspPostInit+0x108>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d11d      	bne.n	8003852 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_TIM_MspPostInit+0x100>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 8003832:	23c0      	movs	r3, #192	; 0xc0
 8003834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003842:	2302      	movs	r3, #2
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f107 0314 	add.w	r3, r7, #20
 800384a:	4619      	mov	r1, r3
 800384c:	4805      	ldr	r0, [pc, #20]	; (8003864 <HAL_TIM_MspPostInit+0x104>)
 800384e:	f001 ffd7 	bl	8005800 <HAL_GPIO_Init>
}
 8003852:	bf00      	nop
 8003854:	3728      	adds	r7, #40	; 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000
 8003860:	40023800 	.word	0x40023800
 8003864:	40020000 	.word	0x40020000
 8003868:	40000400 	.word	0x40000400

0800386c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b090      	sub	sp, #64	; 0x40
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a78      	ldr	r2, [pc, #480]	; (8003a6c <HAL_UART_MspInit+0x200>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d14b      	bne.n	8003926 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
 8003892:	4b77      	ldr	r3, [pc, #476]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a76      	ldr	r2, [pc, #472]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b74      	ldr	r3, [pc, #464]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
 80038ae:	4b70      	ldr	r3, [pc, #448]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a6f      	ldr	r2, [pc, #444]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	4b69      	ldr	r3, [pc, #420]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a68      	ldr	r2, [pc, #416]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 80038e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f0:	2303      	movs	r3, #3
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80038f4:	2308      	movs	r3, #8
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fc:	4619      	mov	r1, r3
 80038fe:	485d      	ldr	r0, [pc, #372]	; (8003a74 <HAL_UART_MspInit+0x208>)
 8003900:	f001 ff7e 	bl	8005800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8003904:	2304      	movs	r3, #4
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	2303      	movs	r3, #3
 8003912:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003914:	2308      	movs	r3, #8
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8003918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800391c:	4619      	mov	r1, r3
 800391e:	4856      	ldr	r0, [pc, #344]	; (8003a78 <HAL_UART_MspInit+0x20c>)
 8003920:	f001 ff6e 	bl	8005800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003924:	e09e      	b.n	8003a64 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_UART_MspInit+0x210>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d135      	bne.n	800399c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	4a4d      	ldr	r2, [pc, #308]	; (8003a70 <HAL_UART_MspInit+0x204>)
 800393a:	f043 0310 	orr.w	r3, r3, #16
 800393e:	6453      	str	r3, [r2, #68]	; 0x44
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	4a46      	ldr	r2, [pc, #280]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6313      	str	r3, [r2, #48]	; 0x30
 800395c:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <HAL_UART_MspInit+0x204>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8003968:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003976:	2303      	movs	r3, #3
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800397a:	2307      	movs	r3, #7
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003982:	4619      	mov	r1, r3
 8003984:	483e      	ldr	r0, [pc, #248]	; (8003a80 <HAL_UART_MspInit+0x214>)
 8003986:	f001 ff3b 	bl	8005800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	2025      	movs	r0, #37	; 0x25
 8003990:	f001 f8e1 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003994:	2025      	movs	r0, #37	; 0x25
 8003996:	f001 f8fa 	bl	8004b8e <HAL_NVIC_EnableIRQ>
}
 800399a:	e063      	b.n	8003a64 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <HAL_UART_MspInit+0x218>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d12c      	bne.n	8003a00 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a30      	ldr	r2, [pc, #192]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <HAL_UART_MspInit+0x204>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80039de:	230c      	movs	r3, #12
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e2:	2302      	movs	r3, #2
 80039e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ea:	2303      	movs	r3, #3
 80039ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039ee:	2307      	movs	r3, #7
 80039f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f6:	4619      	mov	r1, r3
 80039f8:	4821      	ldr	r0, [pc, #132]	; (8003a80 <HAL_UART_MspInit+0x214>)
 80039fa:	f001 ff01 	bl	8005800 <HAL_GPIO_Init>
}
 80039fe:	e031      	b.n	8003a64 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <HAL_UART_MspInit+0x21c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d12c      	bne.n	8003a64 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <HAL_UART_MspInit+0x204>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 8003a42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a50:	2303      	movs	r3, #3
 8003a52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a54:	2307      	movs	r3, #7
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4805      	ldr	r0, [pc, #20]	; (8003a74 <HAL_UART_MspInit+0x208>)
 8003a60:	f001 fece 	bl	8005800 <HAL_GPIO_Init>
}
 8003a64:	bf00      	nop
 8003a66:	3740      	adds	r7, #64	; 0x40
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40005000 	.word	0x40005000
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020c00 	.word	0x40020c00
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40020000 	.word	0x40020000
 8003a84:	40004400 	.word	0x40004400
 8003a88:	40004800 	.word	0x40004800

08003a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <NMI_Handler+0x4>

08003a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a96:	e7fe      	b.n	8003a96 <HardFault_Handler+0x4>

08003a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <MemManage_Handler+0x4>

08003a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa2:	e7fe      	b.n	8003aa2 <BusFault_Handler+0x4>

08003aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <UsageFault_Handler+0x4>

08003aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad8:	f000 f984 	bl	8003de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ae4:	2010      	movs	r0, #16
 8003ae6:	f002 f86b 	bl	8005bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <TIM2_IRQHandler+0x10>)
 8003af6:	f003 fc2b 	bl	8007350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200003b0 	.word	0x200003b0

08003b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <USART1_IRQHandler+0x10>)
 8003b0a:	f004 ff13 	bl	8008934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200005bc 	.word	0x200005bc

08003b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 8003b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b20:	f002 f84e 	bl	8005bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <DMA1_Stream7_IRQHandler+0x10>)
 8003b2e:	f001 f9ef 	bl	8004f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000518 	.word	0x20000518

08003b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
	return 1;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_kill>:

int _kill(int pid, int sig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b56:	f005 fe17 	bl	8009788 <__errno>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2216      	movs	r2, #22
 8003b5e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_exit>:

void _exit (int status)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b74:	f04f 31ff 	mov.w	r1, #4294967295
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ffe7 	bl	8003b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b7e:	e7fe      	b.n	8003b7e <_exit+0x12>

08003b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e00a      	b.n	8003ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b92:	f3af 8000 	nop.w
 8003b96:	4601      	mov	r1, r0
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	60ba      	str	r2, [r7, #8]
 8003b9e:	b2ca      	uxtb	r2, r1
 8003ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	dbf0      	blt.n	8003b92 <_read+0x12>
	}

return len;
 8003bb0:	687b      	ldr	r3, [r7, #4]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e009      	b.n	8003be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	60ba      	str	r2, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	dbf1      	blt.n	8003bcc <_write+0x12>
	}
	return len;
 8003be8:	687b      	ldr	r3, [r7, #4]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_close>:

int _close(int file)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <_isatty>:

int _isatty(int file)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
	return 1;
 8003c32:	2301      	movs	r3, #1
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <_sbrk+0x5c>)
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <_sbrk+0x60>)
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <_sbrk+0x64>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <_sbrk+0x64>)
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <_sbrk+0x68>)
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <_sbrk+0x64>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d207      	bcs.n	8003c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c8c:	f005 fd7c 	bl	8009788 <__errno>
 8003c90:	4603      	mov	r3, r0
 8003c92:	220c      	movs	r2, #12
 8003c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	e009      	b.n	8003cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	4a05      	ldr	r2, [pc, #20]	; (8003cc0 <_sbrk+0x64>)
 8003cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20020000 	.word	0x20020000
 8003cbc:	00000400 	.word	0x00000400
 8003cc0:	2000069c 	.word	0x2000069c
 8003cc4:	200006d8 	.word	0x200006d8

08003cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <SystemInit+0x20>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <SystemInit+0x20>)
 8003cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8003cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cf0:	480d      	ldr	r0, [pc, #52]	; (8003d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cf2:	490e      	ldr	r1, [pc, #56]	; (8003d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cf4:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf8:	e002      	b.n	8003d00 <LoopCopyDataInit>

08003cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cfe:	3304      	adds	r3, #4

08003d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d04:	d3f9      	bcc.n	8003cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d06:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d08:	4c0b      	ldr	r4, [pc, #44]	; (8003d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d0c:	e001      	b.n	8003d12 <LoopFillZerobss>

08003d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d10:	3204      	adds	r2, #4

08003d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d14:	d3fb      	bcc.n	8003d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d16:	f7ff ffd7 	bl	8003cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d1a:	f005 fd3b 	bl	8009794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d1e:	f7fe fc35 	bl	800258c <main>
  bx  lr    
 8003d22:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8003d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d2c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8003d30:	0800e128 	.word	0x0800e128
  ldr r2, =_sbss
 8003d34:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003d38:	200006d4 	.word	0x200006d4

08003d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d3c:	e7fe      	b.n	8003d3c <ADC_IRQHandler>
	...

08003d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_Init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <HAL_Init+0x40>)
 8003d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_Init+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_Init+0x40>)
 8003d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_Init+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <HAL_Init+0x40>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d68:	2003      	movs	r0, #3
 8003d6a:	f000 fee9 	bl	8004b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f000 f808 	bl	8003d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d74:	f7ff fb26 	bl	80033c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00

08003d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_InitTick+0x54>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_InitTick+0x58>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 ff0f 	bl	8004bc6 <HAL_SYSTICK_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e00e      	b.n	8003dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b0f      	cmp	r3, #15
 8003db6:	d80a      	bhi.n	8003dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db8:	2200      	movs	r2, #0
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	f000 fec9 	bl	8004b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dc4:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <HAL_InitTick+0x5c>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000054 	.word	0x20000054
 8003ddc:	2000005c 	.word	0x2000005c
 8003de0:	20000058 	.word	0x20000058

08003de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x20>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_IncTick+0x24>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_IncTick+0x24>)
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	2000005c 	.word	0x2000005c
 8003e08:	200006a0 	.word	0x200006a0

08003e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_GetTick+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	200006a0 	.word	0x200006a0

08003e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7ff ffee 	bl	8003e0c <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d005      	beq.n	8003e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_Delay+0x44>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e4a:	bf00      	nop
 8003e4c:	f7ff ffde 	bl	8003e0c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d8f7      	bhi.n	8003e4c <HAL_Delay+0x28>
  {
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000005c 	.word	0x2000005c

08003e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e033      	b.n	8003eea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fac2 	bl	8003414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eb2:	f023 0302 	bic.w	r3, r3, #2
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fab4 	bl	800442c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8003eda:	e001      	b.n	8003ee0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_ADC_Start+0x1a>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e0b2      	b.n	8004074 <HAL_ADC_Start+0x180>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d018      	beq.n	8003f56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f34:	4b52      	ldr	r3, [pc, #328]	; (8004080 <HAL_ADC_Start+0x18c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_ADC_Start+0x190>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0c9a      	lsrs	r2, r3, #18
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f48:	e002      	b.n	8003f50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f9      	bne.n	8003f4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d17a      	bne.n	800405a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d106      	bne.n	8003fb2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f023 0206 	bic.w	r2, r3, #6
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
 8003fb0:	e002      	b.n	8003fb8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fc0:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_ADC_Start+0x194>)
 8003fc2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003fcc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d12a      	bne.n	8004030 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2b      	ldr	r2, [pc, #172]	; (800408c <HAL_ADC_Start+0x198>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d015      	beq.n	8004010 <HAL_ADC_Start+0x11c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <HAL_ADC_Start+0x19c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d105      	bne.n	8003ffa <HAL_ADC_Start+0x106>
 8003fee:	4b26      	ldr	r3, [pc, #152]	; (8004088 <HAL_ADC_Start+0x194>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_ADC_Start+0x1a0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d136      	bne.n	8004072 <HAL_ADC_Start+0x17e>
 8004004:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_ADC_Start+0x194>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d130      	bne.n	8004072 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d129      	bne.n	8004072 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	e020      	b.n	8004072 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a15      	ldr	r2, [pc, #84]	; (800408c <HAL_ADC_Start+0x198>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d11b      	bne.n	8004072 <HAL_ADC_Start+0x17e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d114      	bne.n	8004072 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	e00b      	b.n	8004072 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0210 	orr.w	r2, r3, #16
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	20000054 	.word	0x20000054
 8004084:	431bde83 	.word	0x431bde83
 8004088:	40012300 	.word	0x40012300
 800408c:	40012000 	.word	0x40012000
 8004090:	40012100 	.word	0x40012100
 8004094:	40012200 	.word	0x40012200

08004098 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b4:	d113      	bne.n	80040de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d10b      	bne.n	80040de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e063      	b.n	80041a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80040de:	f7ff fe95 	bl	8003e0c <HAL_GetTick>
 80040e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040e4:	e021      	b.n	800412a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d01d      	beq.n	800412a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <HAL_ADC_PollForConversion+0x6c>
 80040f4:	f7ff fe8a 	bl	8003e0c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d212      	bcs.n	800412a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d00b      	beq.n	800412a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e03d      	b.n	80041a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b02      	cmp	r3, #2
 8004136:	d1d6      	bne.n	80040e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0212 	mvn.w	r2, #18
 8004140:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d123      	bne.n	80041a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11f      	bne.n	80041a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800417c:	2b00      	cmp	r3, #0
 800417e:	d111      	bne.n	80041a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f043 0201 	orr.w	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x1c>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e113      	b.n	800440c <HAL_ADC_ConfigChannel+0x244>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b09      	cmp	r3, #9
 80041f2:	d925      	bls.n	8004240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68d9      	ldr	r1, [r3, #12]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	3b1e      	subs	r3, #30
 800420a:	2207      	movs	r2, #7
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43da      	mvns	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	400a      	ands	r2, r1
 8004218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68d9      	ldr	r1, [r3, #12]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	4618      	mov	r0, r3
 800422c:	4603      	mov	r3, r0
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4403      	add	r3, r0
 8004232:	3b1e      	subs	r3, #30
 8004234:	409a      	lsls	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	e022      	b.n	8004286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6919      	ldr	r1, [r3, #16]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	4613      	mov	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	2207      	movs	r2, #7
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	400a      	ands	r2, r1
 8004262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6919      	ldr	r1, [r3, #16]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	4618      	mov	r0, r3
 8004276:	4603      	mov	r3, r0
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4403      	add	r3, r0
 800427c:	409a      	lsls	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b06      	cmp	r3, #6
 800428c:	d824      	bhi.n	80042d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	3b05      	subs	r3, #5
 80042a0:	221f      	movs	r2, #31
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	400a      	ands	r2, r1
 80042ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	3b05      	subs	r3, #5
 80042ca:	fa00 f203 	lsl.w	r2, r0, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
 80042d6:	e04c      	b.n	8004372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	d824      	bhi.n	800432a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	3b23      	subs	r3, #35	; 0x23
 80042f2:	221f      	movs	r2, #31
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43da      	mvns	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	400a      	ands	r2, r1
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	4618      	mov	r0, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	3b23      	subs	r3, #35	; 0x23
 800431c:	fa00 f203 	lsl.w	r2, r0, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
 8004328:	e023      	b.n	8004372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	3b41      	subs	r3, #65	; 0x41
 800433c:	221f      	movs	r2, #31
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43da      	mvns	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	400a      	ands	r2, r1
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	4618      	mov	r0, r3
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	3b41      	subs	r3, #65	; 0x41
 8004366:	fa00 f203 	lsl.w	r2, r0, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_ADC_ConfigChannel+0x250>)
 8004374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_ADC_ConfigChannel+0x254>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10f      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x1d8>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b12      	cmp	r3, #18
 8004386:	d10b      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_ADC_ConfigChannel+0x254>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d12b      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x23a>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_ADC_ConfigChannel+0x258>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <HAL_ADC_ConfigChannel+0x1f4>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b11      	cmp	r3, #17
 80043ba:	d122      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a11      	ldr	r2, [pc, #68]	; (8004420 <HAL_ADC_ConfigChannel+0x258>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d111      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_ADC_ConfigChannel+0x25c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a11      	ldr	r2, [pc, #68]	; (8004428 <HAL_ADC_ConfigChannel+0x260>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	0c9a      	lsrs	r2, r3, #18
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043f4:	e002      	b.n	80043fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f9      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40012300 	.word	0x40012300
 800441c:	40012000 	.word	0x40012000
 8004420:	10000012 	.word	0x10000012
 8004424:	20000054 	.word	0x20000054
 8004428:	431bde83 	.word	0x431bde83

0800442c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004434:	4b79      	ldr	r3, [pc, #484]	; (800461c <ADC_Init+0x1f0>)
 8004436:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	021a      	lsls	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6899      	ldr	r1, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	4a58      	ldr	r2, [pc, #352]	; (8004620 <ADC_Init+0x1f4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d022      	beq.n	800450a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6899      	ldr	r1, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6899      	ldr	r1, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	e00f      	b.n	800452a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004528:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0202 	bic.w	r2, r2, #2
 8004538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7e1b      	ldrb	r3, [r3, #24]
 8004544:	005a      	lsls	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004566:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	3b01      	subs	r3, #1
 8004584:	035a      	lsls	r2, r3, #13
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	e007      	b.n	80045a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	051a      	lsls	r2, r3, #20
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045e2:	025a      	lsls	r2, r3, #9
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6899      	ldr	r1, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	029a      	lsls	r2, r3, #10
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40012300 	.word	0x40012300
 8004620:	0f000001 	.word	0x0f000001

08004624 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e17e      	b.n	800493a <HAL_ADCEx_InjectedConfigChannel+0x316>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b09      	cmp	r3, #9
 800464a:	d925      	bls.n	8004698 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68d9      	ldr	r1, [r3, #12]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	3b1e      	subs	r3, #30
 8004662:	2207      	movs	r2, #7
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43da      	mvns	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	400a      	ands	r2, r1
 8004670:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68d9      	ldr	r1, [r3, #12]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	4618      	mov	r0, r3
 8004684:	4603      	mov	r3, r0
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4403      	add	r3, r0
 800468a:	3b1e      	subs	r3, #30
 800468c:	409a      	lsls	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e022      	b.n	80046de <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6919      	ldr	r1, [r3, #16]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	2207      	movs	r2, #7
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43da      	mvns	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	400a      	ands	r2, r1
 80046ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6919      	ldr	r1, [r3, #16]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	4618      	mov	r0, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4403      	add	r3, r0
 80046d4:	409a      	lsls	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	051a      	lsls	r2, r3, #20
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	3303      	adds	r3, #3
 800471c:	b2db      	uxtb	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	221f      	movs	r2, #31
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43da      	mvns	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	400a      	ands	r2, r1
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	4618      	mov	r0, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	3303      	adds	r3, #3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	fa00 f203 	lsl.w	r2, r0, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	4a75      	ldr	r2, [pc, #468]	; (8004948 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6899      	ldr	r1, [r3, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80047a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	e00f      	b.n	80047dc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80047ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80047da:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	7d5b      	ldrb	r3, [r3, #21]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	e007      	b.n	8004806 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	7d1b      	ldrb	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	e007      	b.n	8004830 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800482e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d02e      	beq.n	8004896 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004838:	2b03      	cmp	r3, #3
 800483a:	d840      	bhi.n	80048be <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800483c:	2b01      	cmp	r3, #1
 800483e:	d002      	beq.n	8004846 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004840:	2b02      	cmp	r3, #2
 8004842:	d014      	beq.n	800486e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004844:	e03b      	b.n	80048be <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6959      	ldr	r1, [r3, #20]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	615a      	str	r2, [r3, #20]
      break;
 800486c:	e03b      	b.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800487c:	f023 030f 	bic.w	r3, r3, #15
 8004880:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6999      	ldr	r1, [r3, #24]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	619a      	str	r2, [r3, #24]
      break;
 8004894:	e027      	b.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69d9      	ldr	r1, [r3, #28]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	61da      	str	r2, [r3, #28]
      break;
 80048bc:	e013      	b.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80048cc:	f023 030f 	bic.w	r3, r3, #15
 80048d0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a19      	ldr	r1, [r3, #32]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	621a      	str	r2, [r3, #32]
      break;
 80048e4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80048e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d109      	bne.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b12      	cmp	r3, #18
 80048fa:	d105      	bne.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a10      	ldr	r2, [pc, #64]	; (8004950 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10e      	bne.n	8004930 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a0f      	ldr	r2, [pc, #60]	; (8004954 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b11      	cmp	r3, #17
 8004922:	d105      	bne.n	8004930 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	000f0001 	.word	0x000f0001
 800494c:	40012300 	.word	0x40012300
 8004950:	40012000 	.word	0x40012000
 8004954:	10000012 	.word	0x10000012

08004958 <__NVIC_SetPriorityGrouping>:
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	60d3      	str	r3, [r2, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <__NVIC_GetPriorityGrouping>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_DisableIRQ>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	db12      	blt.n	8004a30 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	f003 021f 	and.w	r2, r3, #31
 8004a10:	490a      	ldr	r1, [pc, #40]	; (8004a3c <__NVIC_DisableIRQ+0x44>)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2001      	movs	r0, #1
 8004a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1e:	3320      	adds	r3, #32
 8004a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a24:	f3bf 8f4f 	dsb	sy
}
 8004a28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a2a:	f3bf 8f6f 	isb	sy
}
 8004a2e:	bf00      	nop
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b0c:	d301      	bcc.n	8004b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00f      	b.n	8004b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <SysTick_Config+0x40>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f7ff ff8e 	bl	8004a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <SysTick_Config+0x40>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <SysTick_Config+0x40>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000e010 	.word	0xe000e010

08004b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff05 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b68:	f7ff ff1a 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	6978      	ldr	r0, [r7, #20]
 8004b74:	f7ff ff8e 	bl	8004a94 <NVIC_EncodePriority>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff5d 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ff0d 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff1d 	bl	80049f8 <__NVIC_DisableIRQ>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ff94 	bl	8004afc <SysTick_Config>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bec:	f7ff f90e 	bl	8003e0c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e099      	b.n	8004d30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c1c:	e00f      	b.n	8004c3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c1e:	f7ff f8f5 	bl	8003e0c <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d908      	bls.n	8004c3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2203      	movs	r2, #3
 8004c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e078      	b.n	8004d30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e8      	bne.n	8004c1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4b38      	ldr	r3, [pc, #224]	; (8004d38 <HAL_DMA_Init+0x158>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d107      	bne.n	8004ca8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d117      	bne.n	8004d02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00e      	beq.n	8004d02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fb01 	bl	80052ec <DMA_CheckFifoParam>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2240      	movs	r2, #64	; 0x40
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e016      	b.n	8004d30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fab8 	bl	8005280 <DMA_CalcBaseAndBitshift>
 8004d10:	4603      	mov	r3, r0
 8004d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	223f      	movs	r2, #63	; 0x3f
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	f010803f 	.word	0xf010803f

08004d3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_DMA_Start_IT+0x26>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e040      	b.n	8004de4 <HAL_DMA_Start_IT+0xa8>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d12f      	bne.n	8004dd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fa4a 	bl	8005224 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d94:	223f      	movs	r2, #63	; 0x3f
 8004d96:	409a      	lsls	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0216 	orr.w	r2, r2, #22
 8004daa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0208 	orr.w	r2, r2, #8
 8004dc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e005      	b.n	8004de2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
 8004de0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dfa:	f7ff f807 	bl	8003e0c <HAL_GetTick>
 8004dfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d008      	beq.n	8004e1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2280      	movs	r2, #128	; 0x80
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e052      	b.n	8004ec4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0216 	bic.w	r2, r2, #22
 8004e2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <HAL_DMA_Abort+0x62>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0208 	bic.w	r2, r2, #8
 8004e5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e6e:	e013      	b.n	8004e98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e70:	f7fe ffcc 	bl	8003e0c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d90c      	bls.n	8004e98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2203      	movs	r2, #3
 8004e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e015      	b.n	8004ec4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e4      	bne.n	8004e70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	223f      	movs	r2, #63	; 0x3f
 8004eac:	409a      	lsls	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d004      	beq.n	8004eea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e00c      	b.n	8004f04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2205      	movs	r2, #5
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f1c:	4b8e      	ldr	r3, [pc, #568]	; (8005158 <HAL_DMA_IRQHandler+0x248>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a8e      	ldr	r2, [pc, #568]	; (800515c <HAL_DMA_IRQHandler+0x24c>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01a      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f68:	2208      	movs	r2, #8
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	2201      	movs	r2, #1
 8004f82:	409a      	lsls	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d012      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f043 0202 	orr.w	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d012      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	409a      	lsls	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f043 0204 	orr.w	r2, r3, #4
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fec:	2210      	movs	r2, #16
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d043      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d03c      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	2210      	movs	r2, #16
 800500c:	409a      	lsls	r2, r3
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d018      	beq.n	8005052 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d024      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
 800503e:	e01f      	b.n	8005080 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e016      	b.n	8005080 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0208 	bic.w	r2, r2, #8
 800506e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	2220      	movs	r2, #32
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 808f 	beq.w	80051b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8087 	beq.w	80051b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a6:	2220      	movs	r2, #32
 80050a8:	409a      	lsls	r2, r3
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d136      	bne.n	8005128 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0216 	bic.w	r2, r2, #22
 80050c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695a      	ldr	r2, [r3, #20]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <HAL_DMA_IRQHandler+0x1da>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0208 	bic.w	r2, r2, #8
 80050f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	223f      	movs	r2, #63	; 0x3f
 8005100:	409a      	lsls	r2, r3
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511a:	2b00      	cmp	r3, #0
 800511c:	d07e      	beq.n	800521c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
        }
        return;
 8005126:	e079      	b.n	800521c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01d      	beq.n	8005172 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10d      	bne.n	8005160 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	2b00      	cmp	r3, #0
 800514a:	d031      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	4798      	blx	r3
 8005154:	e02c      	b.n	80051b0 <HAL_DMA_IRQHandler+0x2a0>
 8005156:	bf00      	nop
 8005158:	20000054 	.word	0x20000054
 800515c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d023      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
 8005170:	e01e      	b.n	80051b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10f      	bne.n	80051a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0210 	bic.w	r2, r2, #16
 800518e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d032      	beq.n	800521e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d022      	beq.n	800520a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2205      	movs	r2, #5
 80051c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	3301      	adds	r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d307      	bcc.n	80051f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f2      	bne.n	80051dc <HAL_DMA_IRQHandler+0x2cc>
 80051f6:	e000      	b.n	80051fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
 800521a:	e000      	b.n	800521e <HAL_DMA_IRQHandler+0x30e>
        return;
 800521c:	bf00      	nop
    }
  }
}
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005240:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d108      	bne.n	8005264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005262:	e007      	b.n	8005274 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	60da      	str	r2, [r3, #12]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	3b10      	subs	r3, #16
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <DMA_CalcBaseAndBitshift+0x64>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800529a:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <DMA_CalcBaseAndBitshift+0x68>)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d909      	bls.n	80052c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	1d1a      	adds	r2, r3, #4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	659a      	str	r2, [r3, #88]	; 0x58
 80052c0:	e007      	b.n	80052d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	aaaaaaab 	.word	0xaaaaaaab
 80052e8:	0800db18 	.word	0x0800db18

080052ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d11f      	bne.n	8005346 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d856      	bhi.n	80053ba <DMA_CheckFifoParam+0xce>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <DMA_CheckFifoParam+0x28>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005325 	.word	0x08005325
 8005318:	08005337 	.word	0x08005337
 800531c:	08005325 	.word	0x08005325
 8005320:	080053bb 	.word	0x080053bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d046      	beq.n	80053be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005334:	e043      	b.n	80053be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800533e:	d140      	bne.n	80053c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005344:	e03d      	b.n	80053c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534e:	d121      	bne.n	8005394 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d837      	bhi.n	80053c6 <DMA_CheckFifoParam+0xda>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <DMA_CheckFifoParam+0x70>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	0800536d 	.word	0x0800536d
 8005360:	08005373 	.word	0x08005373
 8005364:	0800536d 	.word	0x0800536d
 8005368:	08005385 	.word	0x08005385
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e030      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d025      	beq.n	80053ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005382:	e022      	b.n	80053ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800538c:	d11f      	bne.n	80053ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005392:	e01c      	b.n	80053ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d903      	bls.n	80053a2 <DMA_CheckFifoParam+0xb6>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b03      	cmp	r3, #3
 800539e:	d003      	beq.n	80053a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053a0:	e018      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
      break;
 80053a6:	e015      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00e      	beq.n	80053d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e00b      	b.n	80053d2 <DMA_CheckFifoParam+0xe6>
      break;
 80053ba:	bf00      	nop
 80053bc:	e00a      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      break;
 80053be:	bf00      	nop
 80053c0:	e008      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      break;
 80053c2:	bf00      	nop
 80053c4:	e006      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      break;
 80053c6:	bf00      	nop
 80053c8:	e004      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <DMA_CheckFifoParam+0xe8>
      break;
 80053d2:	bf00      	nop
    }
  } 
  
  return status; 
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053f6:	4b23      	ldr	r3, [pc, #140]	; (8005484 <HAL_FLASH_Program+0xa0>)
 80053f8:	7e1b      	ldrb	r3, [r3, #24]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_FLASH_Program+0x1e>
 80053fe:	2302      	movs	r3, #2
 8005400:	e03b      	b.n	800547a <HAL_FLASH_Program+0x96>
 8005402:	4b20      	ldr	r3, [pc, #128]	; (8005484 <HAL_FLASH_Program+0xa0>)
 8005404:	2201      	movs	r2, #1
 8005406:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005408:	f24c 3050 	movw	r0, #50000	; 0xc350
 800540c:	f000 f870 	bl	80054f0 <FLASH_WaitForLastOperation>
 8005410:	4603      	mov	r3, r0
 8005412:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d12b      	bne.n	8005472 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005420:	783b      	ldrb	r3, [r7, #0]
 8005422:	4619      	mov	r1, r3
 8005424:	68b8      	ldr	r0, [r7, #8]
 8005426:	f000 f91b 	bl	8005660 <FLASH_Program_Byte>
 800542a:	e016      	b.n	800545a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d105      	bne.n	800543e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005432:	883b      	ldrh	r3, [r7, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	68b8      	ldr	r0, [r7, #8]
 8005438:	f000 f8ee 	bl	8005618 <FLASH_Program_HalfWord>
 800543c:	e00d      	b.n	800545a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d105      	bne.n	8005450 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	68b8      	ldr	r0, [r7, #8]
 800544a:	f000 f8c3 	bl	80055d4 <FLASH_Program_Word>
 800544e:	e004      	b.n	800545a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005454:	68b8      	ldr	r0, [r7, #8]
 8005456:	f000 f88b 	bl	8005570 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800545a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800545e:	f000 f847 	bl	80054f0 <FLASH_WaitForLastOperation>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <HAL_FLASH_Program+0xa4>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	4a07      	ldr	r2, [pc, #28]	; (8005488 <HAL_FLASH_Program+0xa4>)
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005472:	4b04      	ldr	r3, [pc, #16]	; (8005484 <HAL_FLASH_Program+0xa0>)
 8005474:	2200      	movs	r2, #0
 8005476:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200006a4 	.word	0x200006a4
 8005488:	40023c00 	.word	0x40023c00

0800548c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_FLASH_Unlock+0x38>)
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	da0b      	bge.n	80054b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <HAL_FLASH_Unlock+0x38>)
 80054a0:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <HAL_FLASH_Unlock+0x3c>)
 80054a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80054a4:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <HAL_FLASH_Unlock+0x38>)
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <HAL_FLASH_Unlock+0x40>)
 80054a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_FLASH_Unlock+0x38>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	da01      	bge.n	80054b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80054b6:	79fb      	ldrb	r3, [r7, #7]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40023c00 	.word	0x40023c00
 80054c8:	45670123 	.word	0x45670123
 80054cc:	cdef89ab 	.word	0xcdef89ab

080054d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_FLASH_Lock+0x1c>)
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <HAL_FLASH_Lock+0x1c>)
 80054da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40023c00 	.word	0x40023c00

080054f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <FLASH_WaitForLastOperation+0x78>)
 80054fe:	2200      	movs	r2, #0
 8005500:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005502:	f7fe fc83 	bl	8003e0c <HAL_GetTick>
 8005506:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005508:	e010      	b.n	800552c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d00c      	beq.n	800552c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <FLASH_WaitForLastOperation+0x38>
 8005518:	f7fe fc78 	bl	8003e0c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d201      	bcs.n	800552c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e019      	b.n	8005560 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800552c:	4b0f      	ldr	r3, [pc, #60]	; (800556c <FLASH_WaitForLastOperation+0x7c>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e8      	bne.n	800550a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <FLASH_WaitForLastOperation+0x7c>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <FLASH_WaitForLastOperation+0x7c>)
 8005546:	2201      	movs	r2, #1
 8005548:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <FLASH_WaitForLastOperation+0x7c>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005556:	f000 f8a5 	bl	80056a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
  
}  
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	200006a4 	.word	0x200006a4
 800556c:	40023c00 	.word	0x40023c00

08005570 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <FLASH_Program_DoubleWord+0x60>)
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <FLASH_Program_DoubleWord+0x60>)
 8005582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005586:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005588:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <FLASH_Program_DoubleWord+0x60>)
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	4a10      	ldr	r2, [pc, #64]	; (80055d0 <FLASH_Program_DoubleWord+0x60>)
 800558e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005592:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005594:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <FLASH_Program_DoubleWord+0x60>)
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <FLASH_Program_DoubleWord+0x60>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80055a6:	f3bf 8f6f 	isb	sy
}
 80055aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80055ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	000a      	movs	r2, r1
 80055ba:	2300      	movs	r3, #0
 80055bc:	68f9      	ldr	r1, [r7, #12]
 80055be:	3104      	adds	r1, #4
 80055c0:	4613      	mov	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40023c00 	.word	0x40023c00

080055d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <FLASH_Program_Word+0x40>)
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	4a0c      	ldr	r2, [pc, #48]	; (8005614 <FLASH_Program_Word+0x40>)
 80055e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <FLASH_Program_Word+0x40>)
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <FLASH_Program_Word+0x40>)
 80055f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80055f6:	4b07      	ldr	r3, [pc, #28]	; (8005614 <FLASH_Program_Word+0x40>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	4a06      	ldr	r2, [pc, #24]	; (8005614 <FLASH_Program_Word+0x40>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40023c00 	.word	0x40023c00

08005618 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005624:	4b0d      	ldr	r3, [pc, #52]	; (800565c <FLASH_Program_HalfWord+0x44>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	4a0c      	ldr	r2, [pc, #48]	; (800565c <FLASH_Program_HalfWord+0x44>)
 800562a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <FLASH_Program_HalfWord+0x44>)
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	4a09      	ldr	r2, [pc, #36]	; (800565c <FLASH_Program_HalfWord+0x44>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <FLASH_Program_HalfWord+0x44>)
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <FLASH_Program_HalfWord+0x44>)
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	801a      	strh	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40023c00 	.word	0x40023c00

08005660 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <FLASH_Program_Byte+0x40>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	4a0b      	ldr	r2, [pc, #44]	; (80056a0 <FLASH_Program_Byte+0x40>)
 8005672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005676:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <FLASH_Program_Byte+0x40>)
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <FLASH_Program_Byte+0x40>)
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <FLASH_Program_Byte+0x40>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	4a06      	ldr	r2, [pc, #24]	; (80056a0 <FLASH_Program_Byte+0x40>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	701a      	strb	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40023c00 	.word	0x40023c00

080056a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80056a8:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80056b4:	4b2d      	ldr	r3, [pc, #180]	; (800576c <FLASH_SetErrorCode+0xc8>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f043 0310 	orr.w	r3, r3, #16
 80056bc:	4a2b      	ldr	r2, [pc, #172]	; (800576c <FLASH_SetErrorCode+0xc8>)
 80056be:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80056c0:	4b29      	ldr	r3, [pc, #164]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 80056c2:	2210      	movs	r2, #16
 80056c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80056c6:	4b28      	ldr	r3, [pc, #160]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80056d2:	4b26      	ldr	r3, [pc, #152]	; (800576c <FLASH_SetErrorCode+0xc8>)
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f043 0308 	orr.w	r3, r3, #8
 80056da:	4a24      	ldr	r2, [pc, #144]	; (800576c <FLASH_SetErrorCode+0xc8>)
 80056dc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 80056e0:	2220      	movs	r2, #32
 80056e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80056e4:	4b20      	ldr	r3, [pc, #128]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80056f0:	4b1e      	ldr	r3, [pc, #120]	; (800576c <FLASH_SetErrorCode+0xc8>)
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f043 0304 	orr.w	r3, r3, #4
 80056f8:	4a1c      	ldr	r2, [pc, #112]	; (800576c <FLASH_SetErrorCode+0xc8>)
 80056fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80056fc:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005702:	4b19      	ldr	r3, [pc, #100]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800570e:	4b17      	ldr	r3, [pc, #92]	; (800576c <FLASH_SetErrorCode+0xc8>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f043 0302 	orr.w	r3, r3, #2
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <FLASH_SetErrorCode+0xc8>)
 8005718:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800571a:	4b13      	ldr	r3, [pc, #76]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 800571c:	2280      	movs	r2, #128	; 0x80
 800571e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d009      	beq.n	8005740 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <FLASH_SetErrorCode+0xc8>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	4a0d      	ldr	r2, [pc, #52]	; (800576c <FLASH_SetErrorCode+0xc8>)
 8005736:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 800573a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800574c:	4b07      	ldr	r3, [pc, #28]	; (800576c <FLASH_SetErrorCode+0xc8>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f043 0320 	orr.w	r3, r3, #32
 8005754:	4a05      	ldr	r2, [pc, #20]	; (800576c <FLASH_SetErrorCode+0xc8>)
 8005756:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <FLASH_SetErrorCode+0xc4>)
 800575a:	2202      	movs	r2, #2
 800575c:	60da      	str	r2, [r3, #12]
  }
}
 800575e:	bf00      	nop
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40023c00 	.word	0x40023c00
 800576c:	200006a4 	.word	0x200006a4

08005770 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e010      	b.n	80057ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d103      	bne.n	800579a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e009      	b.n	80057ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d103      	bne.n	80057a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80057a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e002      	b.n	80057ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80057a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	4a12      	ldr	r2, [pc, #72]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	490f      	ldr	r1, [pc, #60]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4a0c      	ldr	r2, [pc, #48]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4313      	orrs	r3, r2
 80057dc:	4a07      	ldr	r2, [pc, #28]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057de:	f043 0302 	orr.w	r3, r3, #2
 80057e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	4a04      	ldr	r2, [pc, #16]	; (80057fc <FLASH_Erase_Sector+0x8c>)
 80057ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ee:	6113      	str	r3, [r2, #16]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40023c00 	.word	0x40023c00

08005800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	; 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800580e:	2300      	movs	r3, #0
 8005810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	e165      	b.n	8005ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800581c:	2201      	movs	r2, #1
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	429a      	cmp	r2, r3
 8005836:	f040 8154 	bne.w	8005ae2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d005      	beq.n	8005852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800584e:	2b02      	cmp	r3, #2
 8005850:	d130      	bne.n	80058b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	2203      	movs	r2, #3
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4313      	orrs	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005888:	2201      	movs	r2, #1
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4013      	ands	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 0201 	and.w	r2, r3, #1
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d017      	beq.n	80058f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	2203      	movs	r2, #3
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d123      	bne.n	8005944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	08da      	lsrs	r2, r3, #3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3208      	adds	r2, #8
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	220f      	movs	r2, #15
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	08da      	lsrs	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3208      	adds	r2, #8
 800593e:	69b9      	ldr	r1, [r7, #24]
 8005940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	2203      	movs	r2, #3
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4013      	ands	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0203 	and.w	r2, r3, #3
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80ae 	beq.w	8005ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	4b5d      	ldr	r3, [pc, #372]	; (8005b00 <HAL_GPIO_Init+0x300>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	4a5c      	ldr	r2, [pc, #368]	; (8005b00 <HAL_GPIO_Init+0x300>)
 8005990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005994:	6453      	str	r3, [r2, #68]	; 0x44
 8005996:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <HAL_GPIO_Init+0x300>)
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059a2:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <HAL_GPIO_Init+0x304>)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	3302      	adds	r3, #2
 80059aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	220f      	movs	r2, #15
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a4f      	ldr	r2, [pc, #316]	; (8005b08 <HAL_GPIO_Init+0x308>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d025      	beq.n	8005a1a <HAL_GPIO_Init+0x21a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a4e      	ldr	r2, [pc, #312]	; (8005b0c <HAL_GPIO_Init+0x30c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01f      	beq.n	8005a16 <HAL_GPIO_Init+0x216>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a4d      	ldr	r2, [pc, #308]	; (8005b10 <HAL_GPIO_Init+0x310>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d019      	beq.n	8005a12 <HAL_GPIO_Init+0x212>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a4c      	ldr	r2, [pc, #304]	; (8005b14 <HAL_GPIO_Init+0x314>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_GPIO_Init+0x20e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a4b      	ldr	r2, [pc, #300]	; (8005b18 <HAL_GPIO_Init+0x318>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00d      	beq.n	8005a0a <HAL_GPIO_Init+0x20a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a4a      	ldr	r2, [pc, #296]	; (8005b1c <HAL_GPIO_Init+0x31c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <HAL_GPIO_Init+0x206>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a49      	ldr	r2, [pc, #292]	; (8005b20 <HAL_GPIO_Init+0x320>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d101      	bne.n	8005a02 <HAL_GPIO_Init+0x202>
 80059fe:	2306      	movs	r3, #6
 8005a00:	e00c      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a02:	2307      	movs	r3, #7
 8005a04:	e00a      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a06:	2305      	movs	r3, #5
 8005a08:	e008      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	e006      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e004      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e002      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	f002 0203 	and.w	r2, r2, #3
 8005a22:	0092      	lsls	r2, r2, #2
 8005a24:	4093      	lsls	r3, r2
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a2c:	4935      	ldr	r1, [pc, #212]	; (8005b04 <HAL_GPIO_Init+0x304>)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	089b      	lsrs	r3, r3, #2
 8005a32:	3302      	adds	r3, #2
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a5e:	4a31      	ldr	r2, [pc, #196]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a64:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a88:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a8e:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005adc:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	f67f ae96 	bls.w	800581c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	3724      	adds	r7, #36	; 0x24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40013800 	.word	0x40013800
 8005b08:	40020000 	.word	0x40020000
 8005b0c:	40020400 	.word	0x40020400
 8005b10:	40020800 	.word	0x40020800
 8005b14:	40020c00 	.word	0x40020c00
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40021400 	.word	0x40021400
 8005b20:	40021800 	.word	0x40021800
 8005b24:	40013c00 	.word	0x40013c00

08005b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
 8005b44:	e001      	b.n	8005b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
 8005b64:	4613      	mov	r3, r2
 8005b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b68:	787b      	ldrb	r3, [r7, #1]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b6e:	887a      	ldrh	r2, [r7, #2]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b74:	e003      	b.n	8005b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b76:	887b      	ldrh	r3, [r7, #2]
 8005b78:	041a      	lsls	r2, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	619a      	str	r2, [r3, #24]
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b9c:	887a      	ldrh	r2, [r7, #2]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	041a      	lsls	r2, r3, #16
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	43d9      	mvns	r1, r3
 8005ba8:	887b      	ldrh	r3, [r7, #2]
 8005baa:	400b      	ands	r3, r1
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	619a      	str	r2, [r3, #24]
}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d006      	beq.n	8005be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bd6:	4a05      	ldr	r2, [pc, #20]	; (8005bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bd8:	88fb      	ldrh	r3, [r7, #6]
 8005bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fd fae2 	bl	80031a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40013c00 	.word	0x40013c00

08005bf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <HAL_PWREx_EnableOverDrive+0x94>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c1c:	f7fe f8f6 	bl	8003e0c <HAL_GetTick>
 8005c20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c22:	e009      	b.n	8005c38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c24:	f7fe f8f2 	bl	8003e0c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c32:	d901      	bls.n	8005c38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e01f      	b.n	8005c78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c38:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c44:	d1ee      	bne.n	8005c24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c46:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c4c:	f7fe f8de 	bl	8003e0c <HAL_GetTick>
 8005c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c52:	e009      	b.n	8005c68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c54:	f7fe f8da 	bl	8003e0c <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c62:	d901      	bls.n	8005c68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e007      	b.n	8005c78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c74:	d1ee      	bne.n	8005c54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	420e0040 	.word	0x420e0040
 8005c88:	40007000 	.word	0x40007000
 8005c8c:	420e0044 	.word	0x420e0044

08005c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0cc      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b68      	ldr	r3, [pc, #416]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d90c      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b65      	ldr	r3, [pc, #404]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b63      	ldr	r3, [pc, #396]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b8      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce4:	4b59      	ldr	r3, [pc, #356]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cfc:	4b53      	ldr	r3, [pc, #332]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a52      	ldr	r2, [pc, #328]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	494d      	ldr	r1, [pc, #308]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d119      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e06f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e067      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6e:	4b37      	ldr	r3, [pc, #220]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4934      	ldr	r1, [pc, #208]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d80:	f7fe f844 	bl	8003e0c <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d88:	f7fe f840 	bl	8003e0c <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e04f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	4b2b      	ldr	r3, [pc, #172]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 020c 	and.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1eb      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d20c      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e032      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4916      	ldr	r1, [pc, #88]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490e      	ldr	r1, [pc, #56]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e16:	f000 f855 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	490a      	ldr	r1, [pc, #40]	; (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	5ccb      	ldrb	r3, [r1, r3]
 8005e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fd ffa4 	bl	8003d84 <HAL_InitTick>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023c00 	.word	0x40023c00
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	0800db00 	.word	0x0800db00
 8005e54:	20000054 	.word	0x20000054
 8005e58:	20000058 	.word	0x20000058

08005e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000054 	.word	0x20000054

08005e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e78:	f7ff fff0 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	0a9b      	lsrs	r3, r3, #10
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	4903      	ldr	r1, [pc, #12]	; (8005e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40023800 	.word	0x40023800
 8005e98:	0800db10 	.word	0x0800db10

08005e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ea0:	f7ff ffdc 	bl	8005e5c <HAL_RCC_GetHCLKFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	0b5b      	lsrs	r3, r3, #13
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	4903      	ldr	r1, [pc, #12]	; (8005ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	0800db10 	.word	0x0800db10

08005ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ec8:	b0ae      	sub	sp, #184	; 0xb8
 8005eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eea:	4bcb      	ldr	r3, [pc, #812]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	f200 8206 	bhi.w	8006304 <HAL_RCC_GetSysClockFreq+0x440>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f35 	.word	0x08005f35
 8005f04:	08006305 	.word	0x08006305
 8005f08:	08006305 	.word	0x08006305
 8005f0c:	08006305 	.word	0x08006305
 8005f10:	08005f3d 	.word	0x08005f3d
 8005f14:	08006305 	.word	0x08006305
 8005f18:	08006305 	.word	0x08006305
 8005f1c:	08006305 	.word	0x08006305
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08006305 	.word	0x08006305
 8005f28:	08006305 	.word	0x08006305
 8005f2c:	08006305 	.word	0x08006305
 8005f30:	08006135 	.word	0x08006135
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f34:	4bb9      	ldr	r3, [pc, #740]	; (800621c <HAL_RCC_GetSysClockFreq+0x358>)
 8005f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005f3a:	e1e7      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f3c:	4bb8      	ldr	r3, [pc, #736]	; (8006220 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f42:	e1e3      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f44:	4bb4      	ldr	r3, [pc, #720]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f50:	4bb1      	ldr	r3, [pc, #708]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d071      	beq.n	8006040 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5c:	4bae      	ldr	r3, [pc, #696]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	099b      	lsrs	r3, r3, #6
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f82:	4622      	mov	r2, r4
 8005f84:	462b      	mov	r3, r5
 8005f86:	f04f 0000 	mov.w	r0, #0
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	0159      	lsls	r1, r3, #5
 8005f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f94:	0150      	lsls	r0, r2, #5
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	1a51      	subs	r1, r2, r1
 8005f9e:	6439      	str	r1, [r7, #64]	; 0x40
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	018b      	lsls	r3, r1, #6
 8005fb8:	4641      	mov	r1, r8
 8005fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	018a      	lsls	r2, r1, #6
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	1a51      	subs	r1, r2, r1
 8005fc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fc8:	4649      	mov	r1, r9
 8005fca:	eb63 0301 	sbc.w	r3, r3, r1
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005fdc:	4649      	mov	r1, r9
 8005fde:	00cb      	lsls	r3, r1, #3
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	00ca      	lsls	r2, r1, #3
 8005fea:	4610      	mov	r0, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	189b      	adds	r3, r3, r2
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	460a      	mov	r2, r1
 8005ffa:	eb42 0303 	adc.w	r3, r2, r3
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800600c:	4629      	mov	r1, r5
 800600e:	024b      	lsls	r3, r1, #9
 8006010:	4621      	mov	r1, r4
 8006012:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006016:	4621      	mov	r1, r4
 8006018:	024a      	lsls	r2, r1, #9
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006028:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800602c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006030:	f7fa fe2a 	bl	8000c88 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4613      	mov	r3, r2
 800603a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800603e:	e067      	b.n	8006110 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006040:	4b75      	ldr	r3, [pc, #468]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	099b      	lsrs	r3, r3, #6
 8006046:	2200      	movs	r2, #0
 8006048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800604c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006058:	67bb      	str	r3, [r7, #120]	; 0x78
 800605a:	2300      	movs	r3, #0
 800605c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800605e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006062:	4622      	mov	r2, r4
 8006064:	462b      	mov	r3, r5
 8006066:	f04f 0000 	mov.w	r0, #0
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	0159      	lsls	r1, r3, #5
 8006070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006074:	0150      	lsls	r0, r2, #5
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4621      	mov	r1, r4
 800607c:	1a51      	subs	r1, r2, r1
 800607e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006080:	4629      	mov	r1, r5
 8006082:	eb63 0301 	sbc.w	r3, r3, r1
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006094:	4649      	mov	r1, r9
 8006096:	018b      	lsls	r3, r1, #6
 8006098:	4641      	mov	r1, r8
 800609a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800609e:	4641      	mov	r1, r8
 80060a0:	018a      	lsls	r2, r1, #6
 80060a2:	4641      	mov	r1, r8
 80060a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80060a8:	4649      	mov	r1, r9
 80060aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060c2:	4692      	mov	sl, r2
 80060c4:	469b      	mov	fp, r3
 80060c6:	4623      	mov	r3, r4
 80060c8:	eb1a 0303 	adds.w	r3, sl, r3
 80060cc:	623b      	str	r3, [r7, #32]
 80060ce:	462b      	mov	r3, r5
 80060d0:	eb4b 0303 	adc.w	r3, fp, r3
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060e2:	4629      	mov	r1, r5
 80060e4:	028b      	lsls	r3, r1, #10
 80060e6:	4621      	mov	r1, r4
 80060e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060ec:	4621      	mov	r1, r4
 80060ee:	028a      	lsls	r2, r1, #10
 80060f0:	4610      	mov	r0, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060f8:	2200      	movs	r2, #0
 80060fa:	673b      	str	r3, [r7, #112]	; 0x70
 80060fc:	677a      	str	r2, [r7, #116]	; 0x74
 80060fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006102:	f7fa fdc1 	bl	8000c88 <__aeabi_uldivmod>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4613      	mov	r3, r2
 800610c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006110:	4b41      	ldr	r3, [pc, #260]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	3301      	adds	r3, #1
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006132:	e0eb      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006134:	4b38      	ldr	r3, [pc, #224]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800613c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006140:	4b35      	ldr	r3, [pc, #212]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d06b      	beq.n	8006224 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614c:	4b32      	ldr	r3, [pc, #200]	; (8006218 <HAL_RCC_GetSysClockFreq+0x354>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	099b      	lsrs	r3, r3, #6
 8006152:	2200      	movs	r2, #0
 8006154:	66bb      	str	r3, [r7, #104]	; 0x68
 8006156:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800615a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615e:	663b      	str	r3, [r7, #96]	; 0x60
 8006160:	2300      	movs	r3, #0
 8006162:	667b      	str	r3, [r7, #100]	; 0x64
 8006164:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006168:	4622      	mov	r2, r4
 800616a:	462b      	mov	r3, r5
 800616c:	f04f 0000 	mov.w	r0, #0
 8006170:	f04f 0100 	mov.w	r1, #0
 8006174:	0159      	lsls	r1, r3, #5
 8006176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800617a:	0150      	lsls	r0, r2, #5
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4621      	mov	r1, r4
 8006182:	1a51      	subs	r1, r2, r1
 8006184:	61b9      	str	r1, [r7, #24]
 8006186:	4629      	mov	r1, r5
 8006188:	eb63 0301 	sbc.w	r3, r3, r1
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800619a:	4659      	mov	r1, fp
 800619c:	018b      	lsls	r3, r1, #6
 800619e:	4651      	mov	r1, sl
 80061a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061a4:	4651      	mov	r1, sl
 80061a6:	018a      	lsls	r2, r1, #6
 80061a8:	4651      	mov	r1, sl
 80061aa:	ebb2 0801 	subs.w	r8, r2, r1
 80061ae:	4659      	mov	r1, fp
 80061b0:	eb63 0901 	sbc.w	r9, r3, r1
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061c8:	4690      	mov	r8, r2
 80061ca:	4699      	mov	r9, r3
 80061cc:	4623      	mov	r3, r4
 80061ce:	eb18 0303 	adds.w	r3, r8, r3
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	462b      	mov	r3, r5
 80061d6:	eb49 0303 	adc.w	r3, r9, r3
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061e8:	4629      	mov	r1, r5
 80061ea:	024b      	lsls	r3, r1, #9
 80061ec:	4621      	mov	r1, r4
 80061ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061f2:	4621      	mov	r1, r4
 80061f4:	024a      	lsls	r2, r1, #9
 80061f6:	4610      	mov	r0, r2
 80061f8:	4619      	mov	r1, r3
 80061fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061fe:	2200      	movs	r2, #0
 8006200:	65bb      	str	r3, [r7, #88]	; 0x58
 8006202:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006204:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006208:	f7fa fd3e 	bl	8000c88 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006216:	e065      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x420>
 8006218:	40023800 	.word	0x40023800
 800621c:	00f42400 	.word	0x00f42400
 8006220:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006224:	4b3d      	ldr	r3, [pc, #244]	; (800631c <HAL_RCC_GetSysClockFreq+0x458>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	099b      	lsrs	r3, r3, #6
 800622a:	2200      	movs	r2, #0
 800622c:	4618      	mov	r0, r3
 800622e:	4611      	mov	r1, r2
 8006230:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006234:	653b      	str	r3, [r7, #80]	; 0x50
 8006236:	2300      	movs	r3, #0
 8006238:	657b      	str	r3, [r7, #84]	; 0x54
 800623a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800623e:	4642      	mov	r2, r8
 8006240:	464b      	mov	r3, r9
 8006242:	f04f 0000 	mov.w	r0, #0
 8006246:	f04f 0100 	mov.w	r1, #0
 800624a:	0159      	lsls	r1, r3, #5
 800624c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006250:	0150      	lsls	r0, r2, #5
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4641      	mov	r1, r8
 8006258:	1a51      	subs	r1, r2, r1
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	4649      	mov	r1, r9
 800625e:	eb63 0301 	sbc.w	r3, r3, r1
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006270:	4659      	mov	r1, fp
 8006272:	018b      	lsls	r3, r1, #6
 8006274:	4651      	mov	r1, sl
 8006276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800627a:	4651      	mov	r1, sl
 800627c:	018a      	lsls	r2, r1, #6
 800627e:	4651      	mov	r1, sl
 8006280:	1a54      	subs	r4, r2, r1
 8006282:	4659      	mov	r1, fp
 8006284:	eb63 0501 	sbc.w	r5, r3, r1
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	00eb      	lsls	r3, r5, #3
 8006292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006296:	00e2      	lsls	r2, r4, #3
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	4643      	mov	r3, r8
 800629e:	18e3      	adds	r3, r4, r3
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	464b      	mov	r3, r9
 80062a4:	eb45 0303 	adc.w	r3, r5, r3
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062b6:	4629      	mov	r1, r5
 80062b8:	028b      	lsls	r3, r1, #10
 80062ba:	4621      	mov	r1, r4
 80062bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c0:	4621      	mov	r1, r4
 80062c2:	028a      	lsls	r2, r1, #10
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062cc:	2200      	movs	r2, #0
 80062ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80062d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062d6:	f7fa fcd7 	bl	8000c88 <__aeabi_uldivmod>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4613      	mov	r3, r2
 80062e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062e4:	4b0d      	ldr	r3, [pc, #52]	; (800631c <HAL_RCC_GetSysClockFreq+0x458>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	0f1b      	lsrs	r3, r3, #28
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80062f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006302:	e003      	b.n	800630c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800630a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800630c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006310:	4618      	mov	r0, r3
 8006312:	37b8      	adds	r7, #184	; 0xb8
 8006314:	46bd      	mov	sp, r7
 8006316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800
 8006320:	00f42400 	.word	0x00f42400

08006324 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e28d      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8083 	beq.w	800644a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006344:	4b94      	ldr	r3, [pc, #592]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 030c 	and.w	r3, r3, #12
 800634c:	2b04      	cmp	r3, #4
 800634e:	d019      	beq.n	8006384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006350:	4b91      	ldr	r3, [pc, #580]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006358:	2b08      	cmp	r3, #8
 800635a:	d106      	bne.n	800636a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800635c:	4b8e      	ldr	r3, [pc, #568]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006368:	d00c      	beq.n	8006384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800636a:	4b8b      	ldr	r3, [pc, #556]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006372:	2b0c      	cmp	r3, #12
 8006374:	d112      	bne.n	800639c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006376:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800637e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006382:	d10b      	bne.n	800639c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006384:	4b84      	ldr	r3, [pc, #528]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05b      	beq.n	8006448 <HAL_RCC_OscConfig+0x124>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d157      	bne.n	8006448 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e25a      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a4:	d106      	bne.n	80063b4 <HAL_RCC_OscConfig+0x90>
 80063a6:	4b7c      	ldr	r3, [pc, #496]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a7b      	ldr	r2, [pc, #492]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e01d      	b.n	80063f0 <HAL_RCC_OscConfig+0xcc>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCC_OscConfig+0xb4>
 80063be:	4b76      	ldr	r3, [pc, #472]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a75      	ldr	r2, [pc, #468]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	4b73      	ldr	r3, [pc, #460]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a72      	ldr	r2, [pc, #456]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e00b      	b.n	80063f0 <HAL_RCC_OscConfig+0xcc>
 80063d8:	4b6f      	ldr	r3, [pc, #444]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6e      	ldr	r2, [pc, #440]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	4b6c      	ldr	r3, [pc, #432]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a6b      	ldr	r2, [pc, #428]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80063ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d013      	beq.n	8006420 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fd fd08 	bl	8003e0c <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006400:	f7fd fd04 	bl	8003e0c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b64      	cmp	r3, #100	; 0x64
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e21f      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006412:	4b61      	ldr	r3, [pc, #388]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0xdc>
 800641e:	e014      	b.n	800644a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006420:	f7fd fcf4 	bl	8003e0c <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006428:	f7fd fcf0 	bl	8003e0c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b64      	cmp	r3, #100	; 0x64
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e20b      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643a:	4b57      	ldr	r3, [pc, #348]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x104>
 8006446:	e000      	b.n	800644a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d06f      	beq.n	8006536 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006456:	4b50      	ldr	r3, [pc, #320]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b00      	cmp	r3, #0
 8006460:	d017      	beq.n	8006492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006462:	4b4d      	ldr	r3, [pc, #308]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800646a:	2b08      	cmp	r3, #8
 800646c:	d105      	bne.n	800647a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800647a:	4b47      	ldr	r3, [pc, #284]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d11c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006486:	4b44      	ldr	r3, [pc, #272]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d116      	bne.n	80064c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006492:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_RCC_OscConfig+0x186>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d001      	beq.n	80064aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e1d3      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4937      	ldr	r1, [pc, #220]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064be:	e03a      	b.n	8006536 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c8:	4b34      	ldr	r3, [pc, #208]	; (800659c <HAL_RCC_OscConfig+0x278>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ce:	f7fd fc9d 	bl	8003e0c <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d6:	f7fd fc99 	bl	8003e0c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e1b4      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f4:	4b28      	ldr	r3, [pc, #160]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4925      	ldr	r1, [pc, #148]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	e015      	b.n	8006536 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <HAL_RCC_OscConfig+0x278>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fd fc7c 	bl	8003e0c <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006518:	f7fd fc78 	bl	8003e0c <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e193      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d036      	beq.n	80065b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d016      	beq.n	8006578 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006550:	f7fd fc5c 	bl	8003e0c <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006558:	f7fd fc58 	bl	8003e0c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e173      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_OscConfig+0x274>)
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x234>
 8006576:	e01b      	b.n	80065b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657e:	f7fd fc45 	bl	8003e0c <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006584:	e00e      	b.n	80065a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006586:	f7fd fc41 	bl	8003e0c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d907      	bls.n	80065a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e15c      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
 8006598:	40023800 	.word	0x40023800
 800659c:	42470000 	.word	0x42470000
 80065a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	4b8a      	ldr	r3, [pc, #552]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ea      	bne.n	8006586 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8097 	beq.w	80066ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c2:	4b83      	ldr	r3, [pc, #524]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	4b7f      	ldr	r3, [pc, #508]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a7e      	ldr	r2, [pc, #504]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b7c      	ldr	r3, [pc, #496]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ee:	4b79      	ldr	r3, [pc, #484]	; (80067d4 <HAL_RCC_OscConfig+0x4b0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d118      	bne.n	800662c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fa:	4b76      	ldr	r3, [pc, #472]	; (80067d4 <HAL_RCC_OscConfig+0x4b0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a75      	ldr	r2, [pc, #468]	; (80067d4 <HAL_RCC_OscConfig+0x4b0>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006606:	f7fd fc01 	bl	8003e0c <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660e:	f7fd fbfd 	bl	8003e0c <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e118      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	4b6c      	ldr	r3, [pc, #432]	; (80067d4 <HAL_RCC_OscConfig+0x4b0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <HAL_RCC_OscConfig+0x31e>
 8006634:	4b66      	ldr	r3, [pc, #408]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a65      	ldr	r2, [pc, #404]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e01c      	b.n	800667c <HAL_RCC_OscConfig+0x358>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b05      	cmp	r3, #5
 8006648:	d10c      	bne.n	8006664 <HAL_RCC_OscConfig+0x340>
 800664a:	4b61      	ldr	r3, [pc, #388]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	4a60      	ldr	r2, [pc, #384]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 8006650:	f043 0304 	orr.w	r3, r3, #4
 8006654:	6713      	str	r3, [r2, #112]	; 0x70
 8006656:	4b5e      	ldr	r3, [pc, #376]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	4a5d      	ldr	r2, [pc, #372]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6713      	str	r3, [r2, #112]	; 0x70
 8006662:	e00b      	b.n	800667c <HAL_RCC_OscConfig+0x358>
 8006664:	4b5a      	ldr	r3, [pc, #360]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a59      	ldr	r2, [pc, #356]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	4b57      	ldr	r3, [pc, #348]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a56      	ldr	r2, [pc, #344]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 8006676:	f023 0304 	bic.w	r3, r3, #4
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fd fbc2 	bl	8003e0c <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fd fbbe 	bl	8003e0c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	; 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0d7      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a2:	4b4b      	ldr	r3, [pc, #300]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ee      	beq.n	800668c <HAL_RCC_OscConfig+0x368>
 80066ae:	e014      	b.n	80066da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b0:	f7fd fbac 	bl	8003e0c <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b6:	e00a      	b.n	80066ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fd fba8 	bl	8003e0c <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0c1      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ce:	4b40      	ldr	r3, [pc, #256]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1ee      	bne.n	80066b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e0:	4b3b      	ldr	r3, [pc, #236]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	4a3a      	ldr	r2, [pc, #232]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80066e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80ad 	beq.w	8006850 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066f6:	4b36      	ldr	r3, [pc, #216]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d060      	beq.n	80067c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d145      	bne.n	8006796 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670a:	4b33      	ldr	r3, [pc, #204]	; (80067d8 <HAL_RCC_OscConfig+0x4b4>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fd fb7c 	bl	8003e0c <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006718:	f7fd fb78 	bl	8003e0c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e093      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	4b29      	ldr	r3, [pc, #164]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	019b      	lsls	r3, r3, #6
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	3b01      	subs	r3, #1
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	071b      	lsls	r3, r3, #28
 8006762:	491b      	ldr	r1, [pc, #108]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 8006764:	4313      	orrs	r3, r2
 8006766:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006768:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <HAL_RCC_OscConfig+0x4b4>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fd fb4d 	bl	8003e0c <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006776:	f7fd fb49 	bl	8003e0c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e064      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCC_OscConfig+0x452>
 8006794:	e05c      	b.n	8006850 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006796:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <HAL_RCC_OscConfig+0x4b4>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fd fb36 	bl	8003e0c <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067a4:	f7fd fb32 	bl	8003e0c <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e04d      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b6:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <HAL_RCC_OscConfig+0x4ac>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x480>
 80067c2:	e045      	b.n	8006850 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d107      	bne.n	80067dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e040      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
 80067d0:	40023800 	.word	0x40023800
 80067d4:	40007000 	.word	0x40007000
 80067d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067dc:	4b1f      	ldr	r3, [pc, #124]	; (800685c <HAL_RCC_OscConfig+0x538>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d030      	beq.n	800684c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d129      	bne.n	800684c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006802:	429a      	cmp	r2, r3
 8006804:	d122      	bne.n	800684c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800680c:	4013      	ands	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006814:	4293      	cmp	r3, r2
 8006816:	d119      	bne.n	800684c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	3b01      	subs	r3, #1
 8006826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006828:	429a      	cmp	r2, r3
 800682a:	d10f      	bne.n	800684c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d107      	bne.n	800684c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006848:	429a      	cmp	r2, r3
 800684a:	d001      	beq.n	8006850 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40023800 	.word	0x40023800

08006860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e041      	b.n	80068f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fc fe5c 	bl	8003544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f001 f9aa 	bl	8007bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d001      	beq.n	8006918 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e046      	b.n	80069a6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a23      	ldr	r2, [pc, #140]	; (80069b4 <HAL_TIM_Base_Start+0xb4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_TIM_Base_Start+0x70>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d01d      	beq.n	8006970 <HAL_TIM_Base_Start+0x70>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <HAL_TIM_Base_Start+0xb8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <HAL_TIM_Base_Start+0x70>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	; (80069bc <HAL_TIM_Base_Start+0xbc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_TIM_Base_Start+0x70>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_TIM_Base_Start+0xc0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_TIM_Base_Start+0x70>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <HAL_TIM_Base_Start+0xc4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_TIM_Base_Start+0x70>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_TIM_Base_Start+0xc8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIM_Base_Start+0x70>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_TIM_Base_Start+0xcc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d111      	bne.n	8006994 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b06      	cmp	r3, #6
 8006980:	d010      	beq.n	80069a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0201 	orr.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006992:	e007      	b.n	80069a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40010400 	.word	0x40010400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40001800 	.word	0x40001800

080069d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e041      	b.n	8006a66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fc fd82 	bl	8003500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f001 f8f2 	bl	8007bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_TIM_PWM_Start+0x24>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	e022      	b.n	8006ada <HAL_TIM_PWM_Start+0x6a>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d109      	bne.n	8006aae <HAL_TIM_PWM_Start+0x3e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	bf14      	ite	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	2300      	moveq	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	e015      	b.n	8006ada <HAL_TIM_PWM_Start+0x6a>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d109      	bne.n	8006ac8 <HAL_TIM_PWM_Start+0x58>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e008      	b.n	8006ada <HAL_TIM_PWM_Start+0x6a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e07c      	b.n	8006bdc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_PWM_Start+0x82>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af0:	e013      	b.n	8006b1a <HAL_TIM_PWM_Start+0xaa>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_PWM_Start+0x92>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b00:	e00b      	b.n	8006b1a <HAL_TIM_PWM_Start+0xaa>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_PWM_Start+0xa2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b10:	e003      	b.n	8006b1a <HAL_TIM_PWM_Start+0xaa>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 fc7c 	bl	8008420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <HAL_TIM_PWM_Start+0x174>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIM_PWM_Start+0xcc>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2c      	ldr	r2, [pc, #176]	; (8006be8 <HAL_TIM_PWM_Start+0x178>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_PWM_Start+0xd0>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_PWM_Start+0xd2>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <HAL_TIM_PWM_Start+0x174>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d01d      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <HAL_TIM_PWM_Start+0x17c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <HAL_TIM_PWM_Start+0x180>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <HAL_TIM_PWM_Start+0x184>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <HAL_TIM_PWM_Start+0x178>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <HAL_TIM_PWM_Start+0x188>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x136>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a16      	ldr	r2, [pc, #88]	; (8006bfc <HAL_TIM_PWM_Start+0x18c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d111      	bne.n	8006bca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b06      	cmp	r3, #6
 8006bb6:	d010      	beq.n	8006bda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc8:	e007      	b.n	8006bda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0201 	orr.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800

08006c00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 fc04 	bl	8008420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2e      	ldr	r2, [pc, #184]	; (8006cd8 <HAL_TIM_PWM_Stop+0xd8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIM_PWM_Stop+0x2c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2d      	ldr	r2, [pc, #180]	; (8006cdc <HAL_TIM_PWM_Stop+0xdc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIM_PWM_Stop+0x30>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <HAL_TIM_PWM_Stop+0x32>
 8006c30:	2300      	movs	r3, #0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d017      	beq.n	8006c66 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6a1a      	ldr	r2, [r3, #32]
 8006c3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10f      	bne.n	8006c66 <HAL_TIM_PWM_Stop+0x66>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a1a      	ldr	r2, [r3, #32]
 8006c4c:	f240 4344 	movw	r3, #1092	; 0x444
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d107      	bne.n	8006c66 <HAL_TIM_PWM_Stop+0x66>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a1a      	ldr	r2, [r3, #32]
 8006c6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10f      	bne.n	8006c96 <HAL_TIM_PWM_Stop+0x96>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6a1a      	ldr	r2, [r3, #32]
 8006c7c:	f240 4344 	movw	r3, #1092	; 0x444
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d107      	bne.n	8006c96 <HAL_TIM_PWM_Stop+0x96>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_TIM_PWM_Stop+0xa6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca4:	e013      	b.n	8006cce <HAL_TIM_PWM_Stop+0xce>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIM_PWM_Stop+0xb6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cb4:	e00b      	b.n	8006cce <HAL_TIM_PWM_Stop+0xce>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIM_PWM_Stop+0xc6>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc4:	e003      	b.n	8006cce <HAL_TIM_PWM_Stop+0xce>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40010400 	.word	0x40010400

08006ce0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e041      	b.n	8006d76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f839 	bl	8006d7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f000 ff6a 	bl	8007bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_IC_Start_DMA+0x22>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	e013      	b.n	8006dde <HAL_TIM_IC_Start_DMA+0x4a>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_IC_Start_DMA+0x32>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	e00b      	b.n	8006dde <HAL_TIM_IC_Start_DMA+0x4a>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_IC_Start_DMA+0x42>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	e003      	b.n	8006dde <HAL_TIM_IC_Start_DMA+0x4a>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <HAL_TIM_IC_Start_DMA+0x5c>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	e013      	b.n	8006e18 <HAL_TIM_IC_Start_DMA+0x84>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d104      	bne.n	8006e00 <HAL_TIM_IC_Start_DMA+0x6c>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	e00b      	b.n	8006e18 <HAL_TIM_IC_Start_DMA+0x84>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d104      	bne.n	8006e10 <HAL_TIM_IC_Start_DMA+0x7c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	e003      	b.n	8006e18 <HAL_TIM_IC_Start_DMA+0x84>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006e1a:	7dbb      	ldrb	r3, [r7, #22]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d002      	beq.n	8006e26 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006e20:	7d7b      	ldrb	r3, [r7, #21]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d101      	bne.n	8006e2a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8006e26:	2302      	movs	r3, #2
 8006e28:	e146      	b.n	80070b8 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006e2a:	7dbb      	ldrb	r3, [r7, #22]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d143      	bne.n	8006eb8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006e30:	7d7b      	ldrb	r3, [r7, #21]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d140      	bne.n	8006eb8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_IC_Start_DMA+0xb2>
 8006e3c:	887b      	ldrh	r3, [r7, #2]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e138      	b.n	80070b8 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_IC_Start_DMA+0xc2>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e54:	e013      	b.n	8006e7e <HAL_TIM_IC_Start_DMA+0xea>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_IC_Start_DMA+0xd2>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e64:	e00b      	b.n	8006e7e <HAL_TIM_IC_Start_DMA+0xea>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d104      	bne.n	8006e76 <HAL_TIM_IC_Start_DMA+0xe2>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e74:	e003      	b.n	8006e7e <HAL_TIM_IC_Start_DMA+0xea>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <HAL_TIM_IC_Start_DMA+0xfa>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8006e8c:	e016      	b.n	8006ebc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d104      	bne.n	8006e9e <HAL_TIM_IC_Start_DMA+0x10a>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8006e9c:	e00e      	b.n	8006ebc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d104      	bne.n	8006eae <HAL_TIM_IC_Start_DMA+0x11a>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8006eac:	e006      	b.n	8006ebc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8006eb6:	e001      	b.n	8006ebc <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0fd      	b.n	80070b8 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 faab 	bl	8008420 <TIM_CCxChannelCmd>

  switch (Channel)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b0c      	cmp	r3, #12
 8006ece:	f200 80ad 	bhi.w	800702c <HAL_TIM_IC_Start_DMA+0x298>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <HAL_TIM_IC_Start_DMA+0x144>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006f0d 	.word	0x08006f0d
 8006edc:	0800702d 	.word	0x0800702d
 8006ee0:	0800702d 	.word	0x0800702d
 8006ee4:	0800702d 	.word	0x0800702d
 8006ee8:	08006f55 	.word	0x08006f55
 8006eec:	0800702d 	.word	0x0800702d
 8006ef0:	0800702d 	.word	0x0800702d
 8006ef4:	0800702d 	.word	0x0800702d
 8006ef8:	08006f9d 	.word	0x08006f9d
 8006efc:	0800702d 	.word	0x0800702d
 8006f00:	0800702d 	.word	0x0800702d
 8006f04:	0800702d 	.word	0x0800702d
 8006f08:	08006fe5 	.word	0x08006fe5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	4a6b      	ldr	r2, [pc, #428]	; (80070c0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8006f12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	4a6a      	ldr	r2, [pc, #424]	; (80070c4 <HAL_TIM_IC_Start_DMA+0x330>)
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	4a69      	ldr	r2, [pc, #420]	; (80070c8 <HAL_TIM_IC_Start_DMA+0x334>)
 8006f22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3334      	adds	r3, #52	; 0x34
 8006f2e:	4619      	mov	r1, r3
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	887b      	ldrh	r3, [r7, #2]
 8006f34:	f7fd ff02 	bl	8004d3c <HAL_DMA_Start_IT>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e0ba      	b.n	80070b8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f50:	60da      	str	r2, [r3, #12]
      break;
 8006f52:	e06e      	b.n	8007032 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	4a59      	ldr	r2, [pc, #356]	; (80070c0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8006f5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	4a58      	ldr	r2, [pc, #352]	; (80070c4 <HAL_TIM_IC_Start_DMA+0x330>)
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	4a57      	ldr	r2, [pc, #348]	; (80070c8 <HAL_TIM_IC_Start_DMA+0x334>)
 8006f6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3338      	adds	r3, #56	; 0x38
 8006f76:	4619      	mov	r1, r3
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	887b      	ldrh	r3, [r7, #2]
 8006f7c:	f7fd fede 	bl	8004d3c <HAL_DMA_Start_IT>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e096      	b.n	80070b8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f98:	60da      	str	r2, [r3, #12]
      break;
 8006f9a:	e04a      	b.n	8007032 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4a47      	ldr	r2, [pc, #284]	; (80070c0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8006fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <HAL_TIM_IC_Start_DMA+0x330>)
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	4a45      	ldr	r2, [pc, #276]	; (80070c8 <HAL_TIM_IC_Start_DMA+0x334>)
 8006fb2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	333c      	adds	r3, #60	; 0x3c
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	887b      	ldrh	r3, [r7, #2]
 8006fc4:	f7fd feba 	bl	8004d3c <HAL_DMA_Start_IT>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e072      	b.n	80070b8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe0:	60da      	str	r2, [r3, #12]
      break;
 8006fe2:	e026      	b.n	8007032 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	4a35      	ldr	r2, [pc, #212]	; (80070c0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8006fea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	4a34      	ldr	r2, [pc, #208]	; (80070c4 <HAL_TIM_IC_Start_DMA+0x330>)
 8006ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	4a33      	ldr	r2, [pc, #204]	; (80070c8 <HAL_TIM_IC_Start_DMA+0x334>)
 8006ffa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3340      	adds	r3, #64	; 0x40
 8007006:	4619      	mov	r1, r3
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	887b      	ldrh	r3, [r7, #2]
 800700c:	f7fd fe96 	bl	8004d3c <HAL_DMA_Start_IT>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e04e      	b.n	80070b8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007028:	60da      	str	r2, [r3, #12]
      break;
 800702a:	e002      	b.n	8007032 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
      break;
 8007030:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a25      	ldr	r2, [pc, #148]	; (80070cc <HAL_TIM_IC_Start_DMA+0x338>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d022      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x2ee>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d01d      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <HAL_TIM_IC_Start_DMA+0x33c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d018      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <HAL_TIM_IC_Start_DMA+0x340>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x2ee>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1e      	ldr	r2, [pc, #120]	; (80070d8 <HAL_TIM_IC_Start_DMA+0x344>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00e      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1c      	ldr	r2, [pc, #112]	; (80070dc <HAL_TIM_IC_Start_DMA+0x348>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d009      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x2ee>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <HAL_TIM_IC_Start_DMA+0x34c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d004      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <HAL_TIM_IC_Start_DMA+0x350>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d111      	bne.n	80070a6 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b06      	cmp	r3, #6
 8007092:	d010      	beq.n	80070b6 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a4:	e007      	b.n	80070b6 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	08007ac9 	.word	0x08007ac9
 80070c4:	08007b91 	.word	0x08007b91
 80070c8:	08007a37 	.word	0x08007a37
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40000c00 	.word	0x40000c00
 80070dc:	40010400 	.word	0x40010400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40001800 	.word	0x40001800

080070e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e097      	b.n	800722c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fc fadd 	bl	80036d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712c:	f023 0307 	bic.w	r3, r3, #7
 8007130:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f000 fd5b 	bl	8007bf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	4313      	orrs	r3, r2
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007188:	f023 030c 	bic.w	r3, r3, #12
 800718c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	4313      	orrs	r3, r2
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	031b      	lsls	r3, r3, #12
 80071b8:	4313      	orrs	r3, r2
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	4313      	orrs	r3, r2
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007244:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800724c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007254:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800725c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d110      	bne.n	8007286 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d102      	bne.n	8007270 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800726a:	7b7b      	ldrb	r3, [r7, #13]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d001      	beq.n	8007274 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e069      	b.n	8007348 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007284:	e031      	b.n	80072ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d110      	bne.n	80072ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d102      	bne.n	8007298 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007292:	7b3b      	ldrb	r3, [r7, #12]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d001      	beq.n	800729c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e055      	b.n	8007348 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072ac:	e01d      	b.n	80072ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d108      	bne.n	80072c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d105      	bne.n	80072c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ba:	7b7b      	ldrb	r3, [r7, #13]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d102      	bne.n	80072c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072c0:	7b3b      	ldrb	r3, [r7, #12]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d001      	beq.n	80072ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e03e      	b.n	8007348 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_TIM_Encoder_Start+0xc4>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d008      	beq.n	8007308 <HAL_TIM_Encoder_Start+0xd4>
 80072f6:	e00f      	b.n	8007318 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2201      	movs	r2, #1
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f001 f88d 	bl	8008420 <TIM_CCxChannelCmd>
      break;
 8007306:	e016      	b.n	8007336 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	2104      	movs	r1, #4
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f885 	bl	8008420 <TIM_CCxChannelCmd>
      break;
 8007316:	e00e      	b.n	8007336 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2201      	movs	r2, #1
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f001 f87d 	bl	8008420 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2201      	movs	r2, #1
 800732c:	2104      	movs	r1, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f001 f876 	bl	8008420 <TIM_CCxChannelCmd>
      break;
 8007334:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0201 	orr.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b02      	cmp	r3, #2
 8007364:	d122      	bne.n	80073ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b02      	cmp	r3, #2
 8007372:	d11b      	bne.n	80073ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0202 	mvn.w	r2, #2
 800737c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fb1d 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 8007398:	e005      	b.n	80073a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fb0f 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fb2a 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d122      	bne.n	8007400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d11b      	bne.n	8007400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0204 	mvn.w	r2, #4
 80073d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 faf3 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fae5 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fb00 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b08      	cmp	r3, #8
 800740c:	d122      	bne.n	8007454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b08      	cmp	r3, #8
 800741a:	d11b      	bne.n	8007454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f06f 0208 	mvn.w	r2, #8
 8007424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2204      	movs	r2, #4
 800742a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fac9 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 8007440:	e005      	b.n	800744e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fabb 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fad6 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	2b10      	cmp	r3, #16
 8007460:	d122      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b10      	cmp	r3, #16
 800746e:	d11b      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0210 	mvn.w	r2, #16
 8007478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2208      	movs	r2, #8
 800747e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa9f 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 8007494:	e005      	b.n	80074a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa91 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 faac 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d10e      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d107      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0201 	mvn.w	r2, #1
 80074cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa6b 	bl	80079aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d10e      	bne.n	8007500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ec:	2b80      	cmp	r3, #128	; 0x80
 80074ee:	d107      	bne.n	8007500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 f88e 	bl	800861c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d10e      	bne.n	800752c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d107      	bne.n	800752c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa71 	bl	8007a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b20      	cmp	r3, #32
 8007538:	d10e      	bne.n	8007558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b20      	cmp	r3, #32
 8007546:	d107      	bne.n	8007558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0220 	mvn.w	r2, #32
 8007550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 f858 	bl	8008608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_TIM_IC_ConfigChannel+0x1e>
 800757a:	2302      	movs	r3, #2
 800757c:	e088      	b.n	8007690 <HAL_TIM_IC_ConfigChannel+0x130>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d11b      	bne.n	80075c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	6819      	ldr	r1, [r3, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f000 fd7c 	bl	8008098 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 020c 	bic.w	r2, r2, #12
 80075ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6999      	ldr	r1, [r3, #24]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	619a      	str	r2, [r3, #24]
 80075c2:	e060      	b.n	8007686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d11c      	bne.n	8007604 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6819      	ldr	r1, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f000 fe00 	bl	80081de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6999      	ldr	r1, [r3, #24]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	021a      	lsls	r2, r3, #8
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	619a      	str	r2, [r3, #24]
 8007602:	e040      	b.n	8007686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b08      	cmp	r3, #8
 8007608:	d11b      	bne.n	8007642 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6819      	ldr	r1, [r3, #0]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f000 fe4d 	bl	80082b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 020c 	bic.w	r2, r2, #12
 800762c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69d9      	ldr	r1, [r3, #28]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	61da      	str	r2, [r3, #28]
 8007640:	e021      	b.n	8007686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b0c      	cmp	r3, #12
 8007646:	d11c      	bne.n	8007682 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6819      	ldr	r1, [r3, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f000 fe6a 	bl	8008330 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69da      	ldr	r2, [r3, #28]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800766a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69d9      	ldr	r1, [r3, #28]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	021a      	lsls	r2, r3, #8
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	61da      	str	r2, [r3, #28]
 8007680:	e001      	b.n	8007686 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800768e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e0ae      	b.n	8007814 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b0c      	cmp	r3, #12
 80076c2:	f200 809f 	bhi.w	8007804 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007805 	.word	0x08007805
 80076d4:	08007805 	.word	0x08007805
 80076d8:	08007805 	.word	0x08007805
 80076dc:	08007741 	.word	0x08007741
 80076e0:	08007805 	.word	0x08007805
 80076e4:	08007805 	.word	0x08007805
 80076e8:	08007805 	.word	0x08007805
 80076ec:	08007783 	.word	0x08007783
 80076f0:	08007805 	.word	0x08007805
 80076f4:	08007805 	.word	0x08007805
 80076f8:	08007805 	.word	0x08007805
 80076fc:	080077c3 	.word	0x080077c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fb16 	bl	8007d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0208 	orr.w	r2, r2, #8
 800771a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0204 	bic.w	r2, r2, #4
 800772a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6999      	ldr	r1, [r3, #24]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691a      	ldr	r2, [r3, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	619a      	str	r2, [r3, #24]
      break;
 800773e:	e064      	b.n	800780a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fb66 	bl	8007e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800775a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800776a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6999      	ldr	r1, [r3, #24]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	021a      	lsls	r2, r3, #8
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	619a      	str	r2, [r3, #24]
      break;
 8007780:	e043      	b.n	800780a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fbbb 	bl	8007f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0208 	orr.w	r2, r2, #8
 800779c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69da      	ldr	r2, [r3, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0204 	bic.w	r2, r2, #4
 80077ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69d9      	ldr	r1, [r3, #28]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	691a      	ldr	r2, [r3, #16]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	61da      	str	r2, [r3, #28]
      break;
 80077c0:	e023      	b.n	800780a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fc0f 	bl	8007fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69d9      	ldr	r1, [r3, #28]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	021a      	lsls	r2, r3, #8
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	61da      	str	r2, [r3, #28]
      break;
 8007802:	e002      	b.n	800780a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	75fb      	strb	r3, [r7, #23]
      break;
 8007808:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIM_ConfigClockSource+0x1c>
 8007834:	2302      	movs	r3, #2
 8007836:	e0b4      	b.n	80079a2 <HAL_TIM_ConfigClockSource+0x186>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800785e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007870:	d03e      	beq.n	80078f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007876:	f200 8087 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787e:	f000 8086 	beq.w	800798e <HAL_TIM_ConfigClockSource+0x172>
 8007882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007886:	d87f      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 8007888:	2b70      	cmp	r3, #112	; 0x70
 800788a:	d01a      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0xa6>
 800788c:	2b70      	cmp	r3, #112	; 0x70
 800788e:	d87b      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 8007890:	2b60      	cmp	r3, #96	; 0x60
 8007892:	d050      	beq.n	8007936 <HAL_TIM_ConfigClockSource+0x11a>
 8007894:	2b60      	cmp	r3, #96	; 0x60
 8007896:	d877      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 8007898:	2b50      	cmp	r3, #80	; 0x50
 800789a:	d03c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0xfa>
 800789c:	2b50      	cmp	r3, #80	; 0x50
 800789e:	d873      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	d058      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0x13a>
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d86f      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 80078a8:	2b30      	cmp	r3, #48	; 0x30
 80078aa:	d064      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x15a>
 80078ac:	2b30      	cmp	r3, #48	; 0x30
 80078ae:	d86b      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d060      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x15a>
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d867      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d05c      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x15a>
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d05a      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x15a>
 80078c0:	e062      	b.n	8007988 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6899      	ldr	r1, [r3, #8]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f000 fd85 	bl	80083e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	609a      	str	r2, [r3, #8]
      break;
 80078ee:	e04f      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6899      	ldr	r1, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f000 fd6e 	bl	80083e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007912:	609a      	str	r2, [r3, #8]
      break;
 8007914:	e03c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6859      	ldr	r1, [r3, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	461a      	mov	r2, r3
 8007924:	f000 fc2c 	bl	8008180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2150      	movs	r1, #80	; 0x50
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fd3b 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007934:	e02c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6859      	ldr	r1, [r3, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	461a      	mov	r2, r3
 8007944:	f000 fc88 	bl	8008258 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2160      	movs	r1, #96	; 0x60
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fd2b 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007954:	e01c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6859      	ldr	r1, [r3, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	461a      	mov	r2, r3
 8007964:	f000 fc0c 	bl	8008180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2140      	movs	r1, #64	; 0x40
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fd1b 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007974:	e00c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f000 fd12 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007986:	e003      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
      break;
 800798c:	e000      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800798e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d107      	bne.n	8007a5e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a5c:	e02a      	b.n	8007ab4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d107      	bne.n	8007a78 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a76:	e01d      	b.n	8007ab4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d107      	bne.n	8007a92 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2204      	movs	r2, #4
 8007a86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a90:	e010      	b.n	8007ab4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d107      	bne.n	8007aac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aaa:	e003      	b.n	8007ab4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f7ff ffb4 	bl	8007a22 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	771a      	strb	r2, [r3, #28]
}
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d10f      	bne.n	8007b00 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d146      	bne.n	8007b7c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007afe:	e03d      	b.n	8007b7c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d10f      	bne.n	8007b2a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d131      	bne.n	8007b7c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b28:	e028      	b.n	8007b7c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d10f      	bne.n	8007b54 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2204      	movs	r2, #4
 8007b38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d11c      	bne.n	8007b7c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b52:	e013      	b.n	8007b7c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d10e      	bne.n	8007b7c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2208      	movs	r2, #8
 8007b62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f7ff ff28 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d103      	bne.n	8007bb0 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	771a      	strb	r2, [r3, #28]
 8007bae:	e019      	b.n	8007be4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d103      	bne.n	8007bc2 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	771a      	strb	r2, [r3, #28]
 8007bc0:	e010      	b.n	8007be4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d103      	bne.n	8007bd4 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2204      	movs	r2, #4
 8007bd0:	771a      	strb	r2, [r3, #28]
 8007bd2:	e007      	b.n	8007be4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d102      	bne.n	8007be4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2208      	movs	r2, #8
 8007be2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff fefe 	bl	80079e6 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	771a      	strb	r2, [r3, #28]
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a40      	ldr	r2, [pc, #256]	; (8007d0c <TIM_Base_SetConfig+0x114>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d013      	beq.n	8007c38 <TIM_Base_SetConfig+0x40>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c16:	d00f      	beq.n	8007c38 <TIM_Base_SetConfig+0x40>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a3d      	ldr	r2, [pc, #244]	; (8007d10 <TIM_Base_SetConfig+0x118>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00b      	beq.n	8007c38 <TIM_Base_SetConfig+0x40>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a3c      	ldr	r2, [pc, #240]	; (8007d14 <TIM_Base_SetConfig+0x11c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d007      	beq.n	8007c38 <TIM_Base_SetConfig+0x40>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a3b      	ldr	r2, [pc, #236]	; (8007d18 <TIM_Base_SetConfig+0x120>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d003      	beq.n	8007c38 <TIM_Base_SetConfig+0x40>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a3a      	ldr	r2, [pc, #232]	; (8007d1c <TIM_Base_SetConfig+0x124>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d108      	bne.n	8007c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a2f      	ldr	r2, [pc, #188]	; (8007d0c <TIM_Base_SetConfig+0x114>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d02b      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c58:	d027      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a2c      	ldr	r2, [pc, #176]	; (8007d10 <TIM_Base_SetConfig+0x118>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d023      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a2b      	ldr	r2, [pc, #172]	; (8007d14 <TIM_Base_SetConfig+0x11c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d01f      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a2a      	ldr	r2, [pc, #168]	; (8007d18 <TIM_Base_SetConfig+0x120>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d01b      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a29      	ldr	r2, [pc, #164]	; (8007d1c <TIM_Base_SetConfig+0x124>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d017      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a28      	ldr	r2, [pc, #160]	; (8007d20 <TIM_Base_SetConfig+0x128>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d013      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a27      	ldr	r2, [pc, #156]	; (8007d24 <TIM_Base_SetConfig+0x12c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00f      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <TIM_Base_SetConfig+0x130>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00b      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a25      	ldr	r2, [pc, #148]	; (8007d2c <TIM_Base_SetConfig+0x134>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d007      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a24      	ldr	r2, [pc, #144]	; (8007d30 <TIM_Base_SetConfig+0x138>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d003      	beq.n	8007caa <TIM_Base_SetConfig+0xb2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a23      	ldr	r2, [pc, #140]	; (8007d34 <TIM_Base_SetConfig+0x13c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d108      	bne.n	8007cbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <TIM_Base_SetConfig+0x114>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d003      	beq.n	8007cf0 <TIM_Base_SetConfig+0xf8>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <TIM_Base_SetConfig+0x124>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d103      	bne.n	8007cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	691a      	ldr	r2, [r3, #16]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	615a      	str	r2, [r3, #20]
}
 8007cfe:	bf00      	nop
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	40010400 	.word	0x40010400
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40014400 	.word	0x40014400
 8007d28:	40014800 	.word	0x40014800
 8007d2c:	40001800 	.word	0x40001800
 8007d30:	40001c00 	.word	0x40001c00
 8007d34:	40002000 	.word	0x40002000

08007d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f023 0201 	bic.w	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 0302 	bic.w	r3, r3, #2
 8007d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a20      	ldr	r2, [pc, #128]	; (8007e10 <TIM_OC1_SetConfig+0xd8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC1_SetConfig+0x64>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a1f      	ldr	r2, [pc, #124]	; (8007e14 <TIM_OC1_SetConfig+0xdc>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d10c      	bne.n	8007db6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f023 0308 	bic.w	r3, r3, #8
 8007da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f023 0304 	bic.w	r3, r3, #4
 8007db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a15      	ldr	r2, [pc, #84]	; (8007e10 <TIM_OC1_SetConfig+0xd8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d003      	beq.n	8007dc6 <TIM_OC1_SetConfig+0x8e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a14      	ldr	r2, [pc, #80]	; (8007e14 <TIM_OC1_SetConfig+0xdc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d111      	bne.n	8007dea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	621a      	str	r2, [r3, #32]
}
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40010400 	.word	0x40010400

08007e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	f023 0210 	bic.w	r2, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0320 	bic.w	r3, r3, #32
 8007e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a22      	ldr	r2, [pc, #136]	; (8007efc <TIM_OC2_SetConfig+0xe4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d003      	beq.n	8007e80 <TIM_OC2_SetConfig+0x68>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	; (8007f00 <TIM_OC2_SetConfig+0xe8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d10d      	bne.n	8007e9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a17      	ldr	r2, [pc, #92]	; (8007efc <TIM_OC2_SetConfig+0xe4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d003      	beq.n	8007eac <TIM_OC2_SetConfig+0x94>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <TIM_OC2_SetConfig+0xe8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d113      	bne.n	8007ed4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	621a      	str	r2, [r3, #32]
}
 8007eee:	bf00      	nop
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400

08007f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a21      	ldr	r2, [pc, #132]	; (8007fe4 <TIM_OC3_SetConfig+0xe0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <TIM_OC3_SetConfig+0x66>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <TIM_OC3_SetConfig+0xe4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d10d      	bne.n	8007f86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	021b      	lsls	r3, r3, #8
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a16      	ldr	r2, [pc, #88]	; (8007fe4 <TIM_OC3_SetConfig+0xe0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d003      	beq.n	8007f96 <TIM_OC3_SetConfig+0x92>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a15      	ldr	r2, [pc, #84]	; (8007fe8 <TIM_OC3_SetConfig+0xe4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d113      	bne.n	8007fbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	621a      	str	r2, [r3, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	40010000 	.word	0x40010000
 8007fe8:	40010400 	.word	0x40010400

08007fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	031b      	lsls	r3, r3, #12
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a12      	ldr	r2, [pc, #72]	; (8008090 <TIM_OC4_SetConfig+0xa4>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC4_SetConfig+0x68>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a11      	ldr	r2, [pc, #68]	; (8008094 <TIM_OC4_SetConfig+0xa8>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d109      	bne.n	8008068 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800805a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	019b      	lsls	r3, r3, #6
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	621a      	str	r2, [r3, #32]
}
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40010000 	.word	0x40010000
 8008094:	40010400 	.word	0x40010400

08008098 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0201 	bic.w	r2, r3, #1
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4a28      	ldr	r2, [pc, #160]	; (8008164 <TIM_TI1_SetConfig+0xcc>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01b      	beq.n	80080fe <TIM_TI1_SetConfig+0x66>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080cc:	d017      	beq.n	80080fe <TIM_TI1_SetConfig+0x66>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4a25      	ldr	r2, [pc, #148]	; (8008168 <TIM_TI1_SetConfig+0xd0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d013      	beq.n	80080fe <TIM_TI1_SetConfig+0x66>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4a24      	ldr	r2, [pc, #144]	; (800816c <TIM_TI1_SetConfig+0xd4>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00f      	beq.n	80080fe <TIM_TI1_SetConfig+0x66>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a23      	ldr	r2, [pc, #140]	; (8008170 <TIM_TI1_SetConfig+0xd8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00b      	beq.n	80080fe <TIM_TI1_SetConfig+0x66>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4a22      	ldr	r2, [pc, #136]	; (8008174 <TIM_TI1_SetConfig+0xdc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <TIM_TI1_SetConfig+0x66>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4a21      	ldr	r2, [pc, #132]	; (8008178 <TIM_TI1_SetConfig+0xe0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d003      	beq.n	80080fe <TIM_TI1_SetConfig+0x66>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4a20      	ldr	r2, [pc, #128]	; (800817c <TIM_TI1_SetConfig+0xe4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d101      	bne.n	8008102 <TIM_TI1_SetConfig+0x6a>
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <TIM_TI1_SetConfig+0x6c>
 8008102:	2300      	movs	r3, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d008      	beq.n	800811a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	e003      	b.n	8008122 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f043 0301 	orr.w	r3, r3, #1
 8008120:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	b2db      	uxtb	r3, r3
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f023 030a 	bic.w	r3, r3, #10
 800813c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f003 030a 	and.w	r3, r3, #10
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40010000 	.word	0x40010000
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40010400 	.word	0x40010400
 8008178:	40014000 	.word	0x40014000
 800817c:	40001800 	.word	0x40001800

08008180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	f023 0201 	bic.w	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f023 030a 	bic.w	r3, r3, #10
 80081bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	621a      	str	r2, [r3, #32]
}
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081de:	b480      	push	{r7}
 80081e0:	b087      	sub	sp, #28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	f023 0210 	bic.w	r2, r3, #16
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800821c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	031b      	lsls	r3, r3, #12
 8008222:	b29b      	uxth	r3, r3
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008230:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	f023 0210 	bic.w	r2, r3, #16
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008282:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	031b      	lsls	r3, r3, #12
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	621a      	str	r2, [r3, #32]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 0303 	bic.w	r3, r3, #3
 80082e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008308:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	021b      	lsls	r3, r3, #8
 800830e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800835c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4313      	orrs	r3, r2
 8008366:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800836e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	031b      	lsls	r3, r3, #12
 8008374:	b29b      	uxth	r3, r3
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008382:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	031b      	lsls	r3, r3, #12
 8008388:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f043 0307 	orr.w	r3, r3, #7
 80083cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	021a      	lsls	r2, r3, #8
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	431a      	orrs	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	609a      	str	r2, [r3, #8]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2201      	movs	r2, #1
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a1a      	ldr	r2, [r3, #32]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	fa01 f303 	lsl.w	r3, r1, r3
 8008458:	431a      	orrs	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
	...

0800846c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008480:	2302      	movs	r3, #2
 8008482:	e05a      	b.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a21      	ldr	r2, [pc, #132]	; (8008548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d022      	beq.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d0:	d01d      	beq.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1d      	ldr	r2, [pc, #116]	; (800854c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d018      	beq.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1b      	ldr	r2, [pc, #108]	; (8008550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1a      	ldr	r2, [pc, #104]	; (8008554 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00e      	beq.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a18      	ldr	r2, [pc, #96]	; (8008558 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d009      	beq.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a17      	ldr	r2, [pc, #92]	; (800855c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d004      	beq.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a15      	ldr	r2, [pc, #84]	; (8008560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d10c      	bne.n	8008528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	4313      	orrs	r3, r2
 800851e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	40010000 	.word	0x40010000
 800854c:	40000400 	.word	0x40000400
 8008550:	40000800 	.word	0x40000800
 8008554:	40000c00 	.word	0x40000c00
 8008558:	40010400 	.word	0x40010400
 800855c:	40014000 	.word	0x40014000
 8008560:	40001800 	.word	0x40001800

08008564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008578:	2b01      	cmp	r3, #1
 800857a:	d101      	bne.n	8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800857c:	2302      	movs	r3, #2
 800857e:	e03d      	b.n	80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e03f      	b.n	80086c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fb f908 	bl	800386c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2224      	movs	r2, #36	; 0x24
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fe13 	bl	80092a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	695a      	ldr	r2, [r3, #20]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b08a      	sub	sp, #40	; 0x28
 80086ce:	af02      	add	r7, sp, #8
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	4613      	mov	r3, r2
 80086d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d17c      	bne.n	80087e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <HAL_UART_Transmit+0x2c>
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e075      	b.n	80087e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_UART_Transmit+0x3e>
 8008704:	2302      	movs	r3, #2
 8008706:	e06e      	b.n	80087e6 <HAL_UART_Transmit+0x11c>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800871e:	f7fb fb75 	bl	8003e0c <HAL_GetTick>
 8008722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	88fa      	ldrh	r2, [r7, #6]
 8008728:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	88fa      	ldrh	r2, [r7, #6]
 800872e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008738:	d108      	bne.n	800874c <HAL_UART_Transmit+0x82>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d104      	bne.n	800874c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	e003      	b.n	8008754 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008750:	2300      	movs	r3, #0
 8008752:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800875c:	e02a      	b.n	80087b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2200      	movs	r2, #0
 8008766:	2180      	movs	r1, #128	; 0x80
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 fb91 	bl	8008e90 <UART_WaitOnFlagUntilTimeout>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e036      	b.n	80087e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800878c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	3302      	adds	r3, #2
 8008792:	61bb      	str	r3, [r7, #24]
 8008794:	e007      	b.n	80087a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	3301      	adds	r3, #1
 80087a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1cf      	bne.n	800875e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2140      	movs	r1, #64	; 0x40
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 fb61 	bl	8008e90 <UART_WaitOnFlagUntilTimeout>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e006      	b.n	80087e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	e000      	b.n	80087e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087e4:	2302      	movs	r3, #2
  }
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b08a      	sub	sp, #40	; 0x28
 80087f2:	af02      	add	r7, sp, #8
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	603b      	str	r3, [r7, #0]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b20      	cmp	r3, #32
 800880c:	f040 808c 	bne.w	8008928 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <HAL_UART_Receive+0x2e>
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e084      	b.n	800892a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_UART_Receive+0x40>
 800882a:	2302      	movs	r3, #2
 800882c:	e07d      	b.n	800892a <HAL_UART_Receive+0x13c>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2222      	movs	r2, #34	; 0x22
 8008840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800884a:	f7fb fadf 	bl	8003e0c <HAL_GetTick>
 800884e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	88fa      	ldrh	r2, [r7, #6]
 8008854:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	88fa      	ldrh	r2, [r7, #6]
 800885a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008864:	d108      	bne.n	8008878 <HAL_UART_Receive+0x8a>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d104      	bne.n	8008878 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	e003      	b.n	8008880 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800887c:	2300      	movs	r3, #0
 800887e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008888:	e043      	b.n	8008912 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	2120      	movs	r1, #32
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fafb 	bl	8008e90 <UART_WaitOnFlagUntilTimeout>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e042      	b.n	800892a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10c      	bne.n	80088c4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	3302      	adds	r3, #2
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	e01f      	b.n	8008904 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088cc:	d007      	beq.n	80088de <HAL_UART_Receive+0xf0>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10a      	bne.n	80088ec <HAL_UART_Receive+0xfe>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	701a      	strb	r2, [r3, #0]
 80088ea:	e008      	b.n	80088fe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	3301      	adds	r3, #1
 8008902:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008916:	b29b      	uxth	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1b6      	bne.n	800888a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	e000      	b.n	800892a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b0ba      	sub	sp, #232	; 0xe8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800895a:	2300      	movs	r3, #0
 800895c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008960:	2300      	movs	r3, #0
 8008962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896a:	f003 030f 	and.w	r3, r3, #15
 800896e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10f      	bne.n	800899a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800897a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <HAL_UART_IRQHandler+0x66>
 8008986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fbc9 	bl	800912a <UART_Receive_IT>
      return;
 8008998:	e256      	b.n	8008e48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800899a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 80de 	beq.w	8008b60 <HAL_UART_IRQHandler+0x22c>
 80089a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80d1 	beq.w	8008b60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <HAL_UART_IRQHandler+0xae>
 80089ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089da:	f043 0201 	orr.w	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00b      	beq.n	8008a06 <HAL_UART_IRQHandler+0xd2>
 80089ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d005      	beq.n	8008a06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f043 0202 	orr.w	r2, r3, #2
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <HAL_UART_IRQHandler+0xf6>
 8008a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f043 0204 	orr.w	r2, r3, #4
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d011      	beq.n	8008a5a <HAL_UART_IRQHandler+0x126>
 8008a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d105      	bne.n	8008a4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f043 0208 	orr.w	r2, r3, #8
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 81ed 	beq.w	8008e3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a68:	f003 0320 	and.w	r3, r3, #32
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d008      	beq.n	8008a82 <HAL_UART_IRQHandler+0x14e>
 8008a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fb54 	bl	800912a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	bf0c      	ite	eq
 8008a90:	2301      	moveq	r3, #1
 8008a92:	2300      	movne	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d103      	bne.n	8008aae <HAL_UART_IRQHandler+0x17a>
 8008aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d04f      	beq.n	8008b4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa5c 	bl	8008f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d141      	bne.n	8008b46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3314      	adds	r3, #20
 8008ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3314      	adds	r3, #20
 8008aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1d9      	bne.n	8008ac2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d013      	beq.n	8008b3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	4a7d      	ldr	r2, [pc, #500]	; (8008d10 <HAL_UART_IRQHandler+0x3dc>)
 8008b1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fc f9d2 	bl	8004ecc <HAL_DMA_Abort_IT>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d016      	beq.n	8008b5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b3c:	e00e      	b.n	8008b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f990 	bl	8008e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b44:	e00a      	b.n	8008b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f98c 	bl	8008e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b4c:	e006      	b.n	8008b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f988 	bl	8008e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b5a:	e170      	b.n	8008e3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b5c:	bf00      	nop
    return;
 8008b5e:	e16e      	b.n	8008e3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	f040 814a 	bne.w	8008dfe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 8143 	beq.w	8008dfe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 813c 	beq.w	8008dfe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b86:	2300      	movs	r3, #0
 8008b88:	60bb      	str	r3, [r7, #8]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60bb      	str	r3, [r7, #8]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	60bb      	str	r3, [r7, #8]
 8008b9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	f040 80b4 	bne.w	8008d14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008bb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 8140 	beq.w	8008e42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	f080 8139 	bcs.w	8008e42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be2:	f000 8088 	beq.w	8008cf6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	330c      	adds	r3, #12
 8008bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	330c      	adds	r3, #12
 8008c0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1d9      	bne.n	8008be6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3314      	adds	r3, #20
 8008c38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c44:	f023 0301 	bic.w	r3, r3, #1
 8008c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3314      	adds	r3, #20
 8008c52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e1      	bne.n	8008c32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3314      	adds	r3, #20
 8008c74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3314      	adds	r3, #20
 8008c8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e3      	bne.n	8008c6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	330c      	adds	r3, #12
 8008cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc6:	f023 0310 	bic.w	r3, r3, #16
 8008cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	330c      	adds	r3, #12
 8008cd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008cd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008cda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e3      	bne.n	8008cb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fc f87b 	bl	8004dec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f8b6 	bl	8008e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d0c:	e099      	b.n	8008e42 <HAL_UART_IRQHandler+0x50e>
 8008d0e:	bf00      	nop
 8008d10:	08009033 	.word	0x08009033
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 808b 	beq.w	8008e46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 8086 	beq.w	8008e46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	330c      	adds	r3, #12
 8008d5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8008d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e3      	bne.n	8008d3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3314      	adds	r3, #20
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	623b      	str	r3, [r7, #32]
   return(result);
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3314      	adds	r3, #20
 8008d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d96:	633a      	str	r2, [r7, #48]	; 0x30
 8008d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e3      	bne.n	8008d72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0310 	bic.w	r3, r3, #16
 8008dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	330c      	adds	r3, #12
 8008dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ddc:	61fa      	str	r2, [r7, #28]
 8008dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	69b9      	ldr	r1, [r7, #24]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e3      	bne.n	8008db8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f83e 	bl	8008e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dfc:	e023      	b.n	8008e46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d009      	beq.n	8008e1e <HAL_UART_IRQHandler+0x4ea>
 8008e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f91f 	bl	800905a <UART_Transmit_IT>
    return;
 8008e1c:	e014      	b.n	8008e48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00e      	beq.n	8008e48 <HAL_UART_IRQHandler+0x514>
 8008e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d008      	beq.n	8008e48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f95f 	bl	80090fa <UART_EndTransmit_IT>
    return;
 8008e3c:	e004      	b.n	8008e48 <HAL_UART_IRQHandler+0x514>
    return;
 8008e3e:	bf00      	nop
 8008e40:	e002      	b.n	8008e48 <HAL_UART_IRQHandler+0x514>
      return;
 8008e42:	bf00      	nop
 8008e44:	e000      	b.n	8008e48 <HAL_UART_IRQHandler+0x514>
      return;
 8008e46:	bf00      	nop
  }
}
 8008e48:	37e8      	adds	r7, #232	; 0xe8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b090      	sub	sp, #64	; 0x40
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea0:	e050      	b.n	8008f44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea8:	d04c      	beq.n	8008f44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008eb0:	f7fa ffac 	bl	8003e0c <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d241      	bcs.n	8008f44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	330c      	adds	r3, #12
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	330c      	adds	r3, #12
 8008ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ee0:	637a      	str	r2, [r7, #52]	; 0x34
 8008ee2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e5      	bne.n	8008ec0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3314      	adds	r3, #20
 8008efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	613b      	str	r3, [r7, #16]
   return(result);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f023 0301 	bic.w	r3, r3, #1
 8008f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3314      	adds	r3, #20
 8008f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f14:	623a      	str	r2, [r7, #32]
 8008f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	69f9      	ldr	r1, [r7, #28]
 8008f1a:	6a3a      	ldr	r2, [r7, #32]
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e5      	bne.n	8008ef4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e00f      	b.n	8008f64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	bf0c      	ite	eq
 8008f54:	2301      	moveq	r3, #1
 8008f56:	2300      	movne	r3, #0
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d09f      	beq.n	8008ea2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3740      	adds	r7, #64	; 0x40
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b095      	sub	sp, #84	; 0x54
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	330c      	adds	r3, #12
 8008f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	330c      	adds	r3, #12
 8008f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f94:	643a      	str	r2, [r7, #64]	; 0x40
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e5      	bne.n	8008f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3314      	adds	r3, #20
 8008fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f023 0301 	bic.w	r3, r3, #1
 8008fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e5      	bne.n	8008fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d119      	bne.n	8009018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	330c      	adds	r3, #12
 8008fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f023 0310 	bic.w	r3, r3, #16
 8008ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	330c      	adds	r3, #12
 8009002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009004:	61ba      	str	r2, [r7, #24]
 8009006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6979      	ldr	r1, [r7, #20]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	613b      	str	r3, [r7, #16]
   return(result);
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e5      	bne.n	8008fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009026:	bf00      	nop
 8009028:	3754      	adds	r7, #84	; 0x54
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff ff09 	bl	8008e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b21      	cmp	r3, #33	; 0x21
 800906c:	d13e      	bne.n	80090ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009076:	d114      	bne.n	80090a2 <UART_Transmit_IT+0x48>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d110      	bne.n	80090a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	1c9a      	adds	r2, r3, #2
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	621a      	str	r2, [r3, #32]
 80090a0:	e008      	b.n	80090b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	6211      	str	r1, [r2, #32]
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29b      	uxth	r3, r3
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4619      	mov	r1, r3
 80090c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10f      	bne.n	80090e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	e000      	b.n	80090ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090ec:	2302      	movs	r3, #2
  }
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68da      	ldr	r2, [r3, #12]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fe98 	bl	8008e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b08c      	sub	sp, #48	; 0x30
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b22      	cmp	r3, #34	; 0x22
 800913c:	f040 80ab 	bne.w	8009296 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009148:	d117      	bne.n	800917a <UART_Receive_IT+0x50>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d113      	bne.n	800917a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009152:	2300      	movs	r3, #0
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009168:	b29a      	uxth	r2, r3
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	1c9a      	adds	r2, r3, #2
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	629a      	str	r2, [r3, #40]	; 0x28
 8009178:	e026      	b.n	80091c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918c:	d007      	beq.n	800919e <UART_Receive_IT+0x74>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10a      	bne.n	80091ac <UART_Receive_IT+0x82>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e008      	b.n	80091be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	4619      	mov	r1, r3
 80091d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d15a      	bne.n	8009292 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0220 	bic.w	r2, r2, #32
 80091ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	695a      	ldr	r2, [r3, #20]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0201 	bic.w	r2, r2, #1
 800920a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	2b01      	cmp	r3, #1
 800921a:	d135      	bne.n	8009288 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	330c      	adds	r3, #12
 8009228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	613b      	str	r3, [r7, #16]
   return(result);
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f023 0310 	bic.w	r3, r3, #16
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	330c      	adds	r3, #12
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	623a      	str	r2, [r7, #32]
 8009244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	69f9      	ldr	r1, [r7, #28]
 8009248:	6a3a      	ldr	r2, [r7, #32]
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e5      	bne.n	8009222 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b10      	cmp	r3, #16
 8009262:	d10a      	bne.n	800927a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff fdf9 	bl	8008e78 <HAL_UARTEx_RxEventCallback>
 8009286:	e002      	b.n	800928e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7f9 ffab 	bl	80031e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	e002      	b.n	8009298 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	e000      	b.n	8009298 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009296:	2302      	movs	r3, #2
  }
}
 8009298:	4618      	mov	r0, r3
 800929a:	3730      	adds	r7, #48	; 0x30
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a4:	b0c0      	sub	sp, #256	; 0x100
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092bc:	68d9      	ldr	r1, [r3, #12]
 80092be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	ea40 0301 	orr.w	r3, r0, r1
 80092c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	431a      	orrs	r2, r3
 80092e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80092f8:	f021 010c 	bic.w	r1, r1, #12
 80092fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009306:	430b      	orrs	r3, r1
 8009308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800930a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931a:	6999      	ldr	r1, [r3, #24]
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	ea40 0301 	orr.w	r3, r0, r1
 8009326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	4b8f      	ldr	r3, [pc, #572]	; (800956c <UART_SetConfig+0x2cc>)
 8009330:	429a      	cmp	r2, r3
 8009332:	d005      	beq.n	8009340 <UART_SetConfig+0xa0>
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b8d      	ldr	r3, [pc, #564]	; (8009570 <UART_SetConfig+0x2d0>)
 800933c:	429a      	cmp	r2, r3
 800933e:	d104      	bne.n	800934a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009340:	f7fc fdac 	bl	8005e9c <HAL_RCC_GetPCLK2Freq>
 8009344:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009348:	e003      	b.n	8009352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800934a:	f7fc fd93 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 800934e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935c:	f040 810c 	bne.w	8009578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009364:	2200      	movs	r2, #0
 8009366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800936a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800936e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009372:	4622      	mov	r2, r4
 8009374:	462b      	mov	r3, r5
 8009376:	1891      	adds	r1, r2, r2
 8009378:	65b9      	str	r1, [r7, #88]	; 0x58
 800937a:	415b      	adcs	r3, r3
 800937c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800937e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009382:	4621      	mov	r1, r4
 8009384:	eb12 0801 	adds.w	r8, r2, r1
 8009388:	4629      	mov	r1, r5
 800938a:	eb43 0901 	adc.w	r9, r3, r1
 800938e:	f04f 0200 	mov.w	r2, #0
 8009392:	f04f 0300 	mov.w	r3, #0
 8009396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800939a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800939e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093a2:	4690      	mov	r8, r2
 80093a4:	4699      	mov	r9, r3
 80093a6:	4623      	mov	r3, r4
 80093a8:	eb18 0303 	adds.w	r3, r8, r3
 80093ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093b0:	462b      	mov	r3, r5
 80093b2:	eb49 0303 	adc.w	r3, r9, r3
 80093b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80093ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80093ce:	460b      	mov	r3, r1
 80093d0:	18db      	adds	r3, r3, r3
 80093d2:	653b      	str	r3, [r7, #80]	; 0x50
 80093d4:	4613      	mov	r3, r2
 80093d6:	eb42 0303 	adc.w	r3, r2, r3
 80093da:	657b      	str	r3, [r7, #84]	; 0x54
 80093dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80093e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80093e4:	f7f7 fc50 	bl	8000c88 <__aeabi_uldivmod>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4b61      	ldr	r3, [pc, #388]	; (8009574 <UART_SetConfig+0x2d4>)
 80093ee:	fba3 2302 	umull	r2, r3, r3, r2
 80093f2:	095b      	lsrs	r3, r3, #5
 80093f4:	011c      	lsls	r4, r3, #4
 80093f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009400:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009408:	4642      	mov	r2, r8
 800940a:	464b      	mov	r3, r9
 800940c:	1891      	adds	r1, r2, r2
 800940e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009410:	415b      	adcs	r3, r3
 8009412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009418:	4641      	mov	r1, r8
 800941a:	eb12 0a01 	adds.w	sl, r2, r1
 800941e:	4649      	mov	r1, r9
 8009420:	eb43 0b01 	adc.w	fp, r3, r1
 8009424:	f04f 0200 	mov.w	r2, #0
 8009428:	f04f 0300 	mov.w	r3, #0
 800942c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009438:	4692      	mov	sl, r2
 800943a:	469b      	mov	fp, r3
 800943c:	4643      	mov	r3, r8
 800943e:	eb1a 0303 	adds.w	r3, sl, r3
 8009442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009446:	464b      	mov	r3, r9
 8009448:	eb4b 0303 	adc.w	r3, fp, r3
 800944c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800945c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009464:	460b      	mov	r3, r1
 8009466:	18db      	adds	r3, r3, r3
 8009468:	643b      	str	r3, [r7, #64]	; 0x40
 800946a:	4613      	mov	r3, r2
 800946c:	eb42 0303 	adc.w	r3, r2, r3
 8009470:	647b      	str	r3, [r7, #68]	; 0x44
 8009472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800947a:	f7f7 fc05 	bl	8000c88 <__aeabi_uldivmod>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4611      	mov	r1, r2
 8009484:	4b3b      	ldr	r3, [pc, #236]	; (8009574 <UART_SetConfig+0x2d4>)
 8009486:	fba3 2301 	umull	r2, r3, r3, r1
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	2264      	movs	r2, #100	; 0x64
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	1acb      	subs	r3, r1, r3
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800949a:	4b36      	ldr	r3, [pc, #216]	; (8009574 <UART_SetConfig+0x2d4>)
 800949c:	fba3 2302 	umull	r2, r3, r3, r2
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094a8:	441c      	add	r4, r3
 80094aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80094b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80094bc:	4642      	mov	r2, r8
 80094be:	464b      	mov	r3, r9
 80094c0:	1891      	adds	r1, r2, r2
 80094c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80094c4:	415b      	adcs	r3, r3
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094cc:	4641      	mov	r1, r8
 80094ce:	1851      	adds	r1, r2, r1
 80094d0:	6339      	str	r1, [r7, #48]	; 0x30
 80094d2:	4649      	mov	r1, r9
 80094d4:	414b      	adcs	r3, r1
 80094d6:	637b      	str	r3, [r7, #52]	; 0x34
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80094e4:	4659      	mov	r1, fp
 80094e6:	00cb      	lsls	r3, r1, #3
 80094e8:	4651      	mov	r1, sl
 80094ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ee:	4651      	mov	r1, sl
 80094f0:	00ca      	lsls	r2, r1, #3
 80094f2:	4610      	mov	r0, r2
 80094f4:	4619      	mov	r1, r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	4642      	mov	r2, r8
 80094fa:	189b      	adds	r3, r3, r2
 80094fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009500:	464b      	mov	r3, r9
 8009502:	460a      	mov	r2, r1
 8009504:	eb42 0303 	adc.w	r3, r2, r3
 8009508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009518:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800951c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009520:	460b      	mov	r3, r1
 8009522:	18db      	adds	r3, r3, r3
 8009524:	62bb      	str	r3, [r7, #40]	; 0x28
 8009526:	4613      	mov	r3, r2
 8009528:	eb42 0303 	adc.w	r3, r2, r3
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800952e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009536:	f7f7 fba7 	bl	8000c88 <__aeabi_uldivmod>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <UART_SetConfig+0x2d4>)
 8009540:	fba3 1302 	umull	r1, r3, r3, r2
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	2164      	movs	r1, #100	; 0x64
 8009548:	fb01 f303 	mul.w	r3, r1, r3
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	3332      	adds	r3, #50	; 0x32
 8009552:	4a08      	ldr	r2, [pc, #32]	; (8009574 <UART_SetConfig+0x2d4>)
 8009554:	fba2 2303 	umull	r2, r3, r2, r3
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	f003 0207 	and.w	r2, r3, #7
 800955e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4422      	add	r2, r4
 8009566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009568:	e105      	b.n	8009776 <UART_SetConfig+0x4d6>
 800956a:	bf00      	nop
 800956c:	40011000 	.word	0x40011000
 8009570:	40011400 	.word	0x40011400
 8009574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957c:	2200      	movs	r2, #0
 800957e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800958a:	4642      	mov	r2, r8
 800958c:	464b      	mov	r3, r9
 800958e:	1891      	adds	r1, r2, r2
 8009590:	6239      	str	r1, [r7, #32]
 8009592:	415b      	adcs	r3, r3
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
 8009596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800959a:	4641      	mov	r1, r8
 800959c:	1854      	adds	r4, r2, r1
 800959e:	4649      	mov	r1, r9
 80095a0:	eb43 0501 	adc.w	r5, r3, r1
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	00eb      	lsls	r3, r5, #3
 80095ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095b2:	00e2      	lsls	r2, r4, #3
 80095b4:	4614      	mov	r4, r2
 80095b6:	461d      	mov	r5, r3
 80095b8:	4643      	mov	r3, r8
 80095ba:	18e3      	adds	r3, r4, r3
 80095bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095c0:	464b      	mov	r3, r9
 80095c2:	eb45 0303 	adc.w	r3, r5, r3
 80095c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095da:	f04f 0200 	mov.w	r2, #0
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80095e6:	4629      	mov	r1, r5
 80095e8:	008b      	lsls	r3, r1, #2
 80095ea:	4621      	mov	r1, r4
 80095ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095f0:	4621      	mov	r1, r4
 80095f2:	008a      	lsls	r2, r1, #2
 80095f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095f8:	f7f7 fb46 	bl	8000c88 <__aeabi_uldivmod>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4b60      	ldr	r3, [pc, #384]	; (8009784 <UART_SetConfig+0x4e4>)
 8009602:	fba3 2302 	umull	r2, r3, r3, r2
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	011c      	lsls	r4, r3, #4
 800960a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800960e:	2200      	movs	r2, #0
 8009610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800961c:	4642      	mov	r2, r8
 800961e:	464b      	mov	r3, r9
 8009620:	1891      	adds	r1, r2, r2
 8009622:	61b9      	str	r1, [r7, #24]
 8009624:	415b      	adcs	r3, r3
 8009626:	61fb      	str	r3, [r7, #28]
 8009628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800962c:	4641      	mov	r1, r8
 800962e:	1851      	adds	r1, r2, r1
 8009630:	6139      	str	r1, [r7, #16]
 8009632:	4649      	mov	r1, r9
 8009634:	414b      	adcs	r3, r1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009644:	4659      	mov	r1, fp
 8009646:	00cb      	lsls	r3, r1, #3
 8009648:	4651      	mov	r1, sl
 800964a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800964e:	4651      	mov	r1, sl
 8009650:	00ca      	lsls	r2, r1, #3
 8009652:	4610      	mov	r0, r2
 8009654:	4619      	mov	r1, r3
 8009656:	4603      	mov	r3, r0
 8009658:	4642      	mov	r2, r8
 800965a:	189b      	adds	r3, r3, r2
 800965c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009660:	464b      	mov	r3, r9
 8009662:	460a      	mov	r2, r1
 8009664:	eb42 0303 	adc.w	r3, r2, r3
 8009668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800966c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	67bb      	str	r3, [r7, #120]	; 0x78
 8009676:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009678:	f04f 0200 	mov.w	r2, #0
 800967c:	f04f 0300 	mov.w	r3, #0
 8009680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009684:	4649      	mov	r1, r9
 8009686:	008b      	lsls	r3, r1, #2
 8009688:	4641      	mov	r1, r8
 800968a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800968e:	4641      	mov	r1, r8
 8009690:	008a      	lsls	r2, r1, #2
 8009692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009696:	f7f7 faf7 	bl	8000c88 <__aeabi_uldivmod>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4b39      	ldr	r3, [pc, #228]	; (8009784 <UART_SetConfig+0x4e4>)
 80096a0:	fba3 1302 	umull	r1, r3, r3, r2
 80096a4:	095b      	lsrs	r3, r3, #5
 80096a6:	2164      	movs	r1, #100	; 0x64
 80096a8:	fb01 f303 	mul.w	r3, r1, r3
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	3332      	adds	r3, #50	; 0x32
 80096b2:	4a34      	ldr	r2, [pc, #208]	; (8009784 <UART_SetConfig+0x4e4>)
 80096b4:	fba2 2303 	umull	r2, r3, r2, r3
 80096b8:	095b      	lsrs	r3, r3, #5
 80096ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096be:	441c      	add	r4, r3
 80096c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c4:	2200      	movs	r2, #0
 80096c6:	673b      	str	r3, [r7, #112]	; 0x70
 80096c8:	677a      	str	r2, [r7, #116]	; 0x74
 80096ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80096ce:	4642      	mov	r2, r8
 80096d0:	464b      	mov	r3, r9
 80096d2:	1891      	adds	r1, r2, r2
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	415b      	adcs	r3, r3
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096de:	4641      	mov	r1, r8
 80096e0:	1851      	adds	r1, r2, r1
 80096e2:	6039      	str	r1, [r7, #0]
 80096e4:	4649      	mov	r1, r9
 80096e6:	414b      	adcs	r3, r1
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096f6:	4659      	mov	r1, fp
 80096f8:	00cb      	lsls	r3, r1, #3
 80096fa:	4651      	mov	r1, sl
 80096fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009700:	4651      	mov	r1, sl
 8009702:	00ca      	lsls	r2, r1, #3
 8009704:	4610      	mov	r0, r2
 8009706:	4619      	mov	r1, r3
 8009708:	4603      	mov	r3, r0
 800970a:	4642      	mov	r2, r8
 800970c:	189b      	adds	r3, r3, r2
 800970e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009710:	464b      	mov	r3, r9
 8009712:	460a      	mov	r2, r1
 8009714:	eb42 0303 	adc.w	r3, r2, r3
 8009718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800971a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	663b      	str	r3, [r7, #96]	; 0x60
 8009724:	667a      	str	r2, [r7, #100]	; 0x64
 8009726:	f04f 0200 	mov.w	r2, #0
 800972a:	f04f 0300 	mov.w	r3, #0
 800972e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009732:	4649      	mov	r1, r9
 8009734:	008b      	lsls	r3, r1, #2
 8009736:	4641      	mov	r1, r8
 8009738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800973c:	4641      	mov	r1, r8
 800973e:	008a      	lsls	r2, r1, #2
 8009740:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009744:	f7f7 faa0 	bl	8000c88 <__aeabi_uldivmod>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <UART_SetConfig+0x4e4>)
 800974e:	fba3 1302 	umull	r1, r3, r3, r2
 8009752:	095b      	lsrs	r3, r3, #5
 8009754:	2164      	movs	r1, #100	; 0x64
 8009756:	fb01 f303 	mul.w	r3, r1, r3
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	3332      	adds	r3, #50	; 0x32
 8009760:	4a08      	ldr	r2, [pc, #32]	; (8009784 <UART_SetConfig+0x4e4>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4422      	add	r2, r4
 8009774:	609a      	str	r2, [r3, #8]
}
 8009776:	bf00      	nop
 8009778:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800977c:	46bd      	mov	sp, r7
 800977e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009782:	bf00      	nop
 8009784:	51eb851f 	.word	0x51eb851f

08009788 <__errno>:
 8009788:	4b01      	ldr	r3, [pc, #4]	; (8009790 <__errno+0x8>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000060 	.word	0x20000060

08009794 <__libc_init_array>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4d0d      	ldr	r5, [pc, #52]	; (80097cc <__libc_init_array+0x38>)
 8009798:	4c0d      	ldr	r4, [pc, #52]	; (80097d0 <__libc_init_array+0x3c>)
 800979a:	1b64      	subs	r4, r4, r5
 800979c:	10a4      	asrs	r4, r4, #2
 800979e:	2600      	movs	r6, #0
 80097a0:	42a6      	cmp	r6, r4
 80097a2:	d109      	bne.n	80097b8 <__libc_init_array+0x24>
 80097a4:	4d0b      	ldr	r5, [pc, #44]	; (80097d4 <__libc_init_array+0x40>)
 80097a6:	4c0c      	ldr	r4, [pc, #48]	; (80097d8 <__libc_init_array+0x44>)
 80097a8:	f004 f950 	bl	800da4c <_init>
 80097ac:	1b64      	subs	r4, r4, r5
 80097ae:	10a4      	asrs	r4, r4, #2
 80097b0:	2600      	movs	r6, #0
 80097b2:	42a6      	cmp	r6, r4
 80097b4:	d105      	bne.n	80097c2 <__libc_init_array+0x2e>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097bc:	4798      	blx	r3
 80097be:	3601      	adds	r6, #1
 80097c0:	e7ee      	b.n	80097a0 <__libc_init_array+0xc>
 80097c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c6:	4798      	blx	r3
 80097c8:	3601      	adds	r6, #1
 80097ca:	e7f2      	b.n	80097b2 <__libc_init_array+0x1e>
 80097cc:	0800e120 	.word	0x0800e120
 80097d0:	0800e120 	.word	0x0800e120
 80097d4:	0800e120 	.word	0x0800e120
 80097d8:	0800e124 	.word	0x0800e124

080097dc <memset>:
 80097dc:	4402      	add	r2, r0
 80097de:	4603      	mov	r3, r0
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d100      	bne.n	80097e6 <memset+0xa>
 80097e4:	4770      	bx	lr
 80097e6:	f803 1b01 	strb.w	r1, [r3], #1
 80097ea:	e7f9      	b.n	80097e0 <memset+0x4>

080097ec <__cvt>:
 80097ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097f0:	ec55 4b10 	vmov	r4, r5, d0
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	460e      	mov	r6, r1
 80097f8:	4619      	mov	r1, r3
 80097fa:	462b      	mov	r3, r5
 80097fc:	bfbb      	ittet	lt
 80097fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009802:	461d      	movlt	r5, r3
 8009804:	2300      	movge	r3, #0
 8009806:	232d      	movlt	r3, #45	; 0x2d
 8009808:	700b      	strb	r3, [r1, #0]
 800980a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800980c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009810:	4691      	mov	r9, r2
 8009812:	f023 0820 	bic.w	r8, r3, #32
 8009816:	bfbc      	itt	lt
 8009818:	4622      	movlt	r2, r4
 800981a:	4614      	movlt	r4, r2
 800981c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009820:	d005      	beq.n	800982e <__cvt+0x42>
 8009822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009826:	d100      	bne.n	800982a <__cvt+0x3e>
 8009828:	3601      	adds	r6, #1
 800982a:	2102      	movs	r1, #2
 800982c:	e000      	b.n	8009830 <__cvt+0x44>
 800982e:	2103      	movs	r1, #3
 8009830:	ab03      	add	r3, sp, #12
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	ab02      	add	r3, sp, #8
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	ec45 4b10 	vmov	d0, r4, r5
 800983c:	4653      	mov	r3, sl
 800983e:	4632      	mov	r2, r6
 8009840:	f000 fcea 	bl	800a218 <_dtoa_r>
 8009844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009848:	4607      	mov	r7, r0
 800984a:	d102      	bne.n	8009852 <__cvt+0x66>
 800984c:	f019 0f01 	tst.w	r9, #1
 8009850:	d022      	beq.n	8009898 <__cvt+0xac>
 8009852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009856:	eb07 0906 	add.w	r9, r7, r6
 800985a:	d110      	bne.n	800987e <__cvt+0x92>
 800985c:	783b      	ldrb	r3, [r7, #0]
 800985e:	2b30      	cmp	r3, #48	; 0x30
 8009860:	d10a      	bne.n	8009878 <__cvt+0x8c>
 8009862:	2200      	movs	r2, #0
 8009864:	2300      	movs	r3, #0
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f7 f94d 	bl	8000b08 <__aeabi_dcmpeq>
 800986e:	b918      	cbnz	r0, 8009878 <__cvt+0x8c>
 8009870:	f1c6 0601 	rsb	r6, r6, #1
 8009874:	f8ca 6000 	str.w	r6, [sl]
 8009878:	f8da 3000 	ldr.w	r3, [sl]
 800987c:	4499      	add	r9, r3
 800987e:	2200      	movs	r2, #0
 8009880:	2300      	movs	r3, #0
 8009882:	4620      	mov	r0, r4
 8009884:	4629      	mov	r1, r5
 8009886:	f7f7 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800988a:	b108      	cbz	r0, 8009890 <__cvt+0xa4>
 800988c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009890:	2230      	movs	r2, #48	; 0x30
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	454b      	cmp	r3, r9
 8009896:	d307      	bcc.n	80098a8 <__cvt+0xbc>
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800989c:	1bdb      	subs	r3, r3, r7
 800989e:	4638      	mov	r0, r7
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	b004      	add	sp, #16
 80098a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a8:	1c59      	adds	r1, r3, #1
 80098aa:	9103      	str	r1, [sp, #12]
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	e7f0      	b.n	8009892 <__cvt+0xa6>

080098b0 <__exponent>:
 80098b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b2:	4603      	mov	r3, r0
 80098b4:	2900      	cmp	r1, #0
 80098b6:	bfb8      	it	lt
 80098b8:	4249      	neglt	r1, r1
 80098ba:	f803 2b02 	strb.w	r2, [r3], #2
 80098be:	bfb4      	ite	lt
 80098c0:	222d      	movlt	r2, #45	; 0x2d
 80098c2:	222b      	movge	r2, #43	; 0x2b
 80098c4:	2909      	cmp	r1, #9
 80098c6:	7042      	strb	r2, [r0, #1]
 80098c8:	dd2a      	ble.n	8009920 <__exponent+0x70>
 80098ca:	f10d 0407 	add.w	r4, sp, #7
 80098ce:	46a4      	mov	ip, r4
 80098d0:	270a      	movs	r7, #10
 80098d2:	46a6      	mov	lr, r4
 80098d4:	460a      	mov	r2, r1
 80098d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80098da:	fb07 1516 	mls	r5, r7, r6, r1
 80098de:	3530      	adds	r5, #48	; 0x30
 80098e0:	2a63      	cmp	r2, #99	; 0x63
 80098e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80098e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098ea:	4631      	mov	r1, r6
 80098ec:	dcf1      	bgt.n	80098d2 <__exponent+0x22>
 80098ee:	3130      	adds	r1, #48	; 0x30
 80098f0:	f1ae 0502 	sub.w	r5, lr, #2
 80098f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098f8:	1c44      	adds	r4, r0, #1
 80098fa:	4629      	mov	r1, r5
 80098fc:	4561      	cmp	r1, ip
 80098fe:	d30a      	bcc.n	8009916 <__exponent+0x66>
 8009900:	f10d 0209 	add.w	r2, sp, #9
 8009904:	eba2 020e 	sub.w	r2, r2, lr
 8009908:	4565      	cmp	r5, ip
 800990a:	bf88      	it	hi
 800990c:	2200      	movhi	r2, #0
 800990e:	4413      	add	r3, r2
 8009910:	1a18      	subs	r0, r3, r0
 8009912:	b003      	add	sp, #12
 8009914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800991a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800991e:	e7ed      	b.n	80098fc <__exponent+0x4c>
 8009920:	2330      	movs	r3, #48	; 0x30
 8009922:	3130      	adds	r1, #48	; 0x30
 8009924:	7083      	strb	r3, [r0, #2]
 8009926:	70c1      	strb	r1, [r0, #3]
 8009928:	1d03      	adds	r3, r0, #4
 800992a:	e7f1      	b.n	8009910 <__exponent+0x60>

0800992c <_printf_float>:
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	ed2d 8b02 	vpush	{d8}
 8009934:	b08d      	sub	sp, #52	; 0x34
 8009936:	460c      	mov	r4, r1
 8009938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800993c:	4616      	mov	r6, r2
 800993e:	461f      	mov	r7, r3
 8009940:	4605      	mov	r5, r0
 8009942:	f001 fa57 	bl	800adf4 <_localeconv_r>
 8009946:	f8d0 a000 	ldr.w	sl, [r0]
 800994a:	4650      	mov	r0, sl
 800994c:	f7f6 fc60 	bl	8000210 <strlen>
 8009950:	2300      	movs	r3, #0
 8009952:	930a      	str	r3, [sp, #40]	; 0x28
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	9305      	str	r3, [sp, #20]
 8009958:	f8d8 3000 	ldr.w	r3, [r8]
 800995c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009960:	3307      	adds	r3, #7
 8009962:	f023 0307 	bic.w	r3, r3, #7
 8009966:	f103 0208 	add.w	r2, r3, #8
 800996a:	f8c8 2000 	str.w	r2, [r8]
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009976:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800997a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	f8cd 8018 	str.w	r8, [sp, #24]
 8009984:	ee08 0a10 	vmov	s16, r0
 8009988:	4b9f      	ldr	r3, [pc, #636]	; (8009c08 <_printf_float+0x2dc>)
 800998a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800998e:	f04f 32ff 	mov.w	r2, #4294967295
 8009992:	f7f7 f8eb 	bl	8000b6c <__aeabi_dcmpun>
 8009996:	bb88      	cbnz	r0, 80099fc <_printf_float+0xd0>
 8009998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800999c:	4b9a      	ldr	r3, [pc, #616]	; (8009c08 <_printf_float+0x2dc>)
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	f7f7 f8c5 	bl	8000b30 <__aeabi_dcmple>
 80099a6:	bb48      	cbnz	r0, 80099fc <_printf_float+0xd0>
 80099a8:	2200      	movs	r2, #0
 80099aa:	2300      	movs	r3, #0
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7f7 f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80099b4:	b110      	cbz	r0, 80099bc <_printf_float+0x90>
 80099b6:	232d      	movs	r3, #45	; 0x2d
 80099b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099bc:	4b93      	ldr	r3, [pc, #588]	; (8009c0c <_printf_float+0x2e0>)
 80099be:	4894      	ldr	r0, [pc, #592]	; (8009c10 <_printf_float+0x2e4>)
 80099c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099c4:	bf94      	ite	ls
 80099c6:	4698      	movls	r8, r3
 80099c8:	4680      	movhi	r8, r0
 80099ca:	2303      	movs	r3, #3
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	9b05      	ldr	r3, [sp, #20]
 80099d0:	f023 0204 	bic.w	r2, r3, #4
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	f04f 0900 	mov.w	r9, #0
 80099da:	9700      	str	r7, [sp, #0]
 80099dc:	4633      	mov	r3, r6
 80099de:	aa0b      	add	r2, sp, #44	; 0x2c
 80099e0:	4621      	mov	r1, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f9d8 	bl	8009d98 <_printf_common>
 80099e8:	3001      	adds	r0, #1
 80099ea:	f040 8090 	bne.w	8009b0e <_printf_float+0x1e2>
 80099ee:	f04f 30ff 	mov.w	r0, #4294967295
 80099f2:	b00d      	add	sp, #52	; 0x34
 80099f4:	ecbd 8b02 	vpop	{d8}
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	4642      	mov	r2, r8
 80099fe:	464b      	mov	r3, r9
 8009a00:	4640      	mov	r0, r8
 8009a02:	4649      	mov	r1, r9
 8009a04:	f7f7 f8b2 	bl	8000b6c <__aeabi_dcmpun>
 8009a08:	b140      	cbz	r0, 8009a1c <_printf_float+0xf0>
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bfbc      	itt	lt
 8009a10:	232d      	movlt	r3, #45	; 0x2d
 8009a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a16:	487f      	ldr	r0, [pc, #508]	; (8009c14 <_printf_float+0x2e8>)
 8009a18:	4b7f      	ldr	r3, [pc, #508]	; (8009c18 <_printf_float+0x2ec>)
 8009a1a:	e7d1      	b.n	80099c0 <_printf_float+0x94>
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a22:	9206      	str	r2, [sp, #24]
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	d13f      	bne.n	8009aa8 <_printf_float+0x17c>
 8009a28:	2306      	movs	r3, #6
 8009a2a:	6063      	str	r3, [r4, #4]
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	6861      	ldr	r1, [r4, #4]
 8009a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a34:	2300      	movs	r3, #0
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	ab0a      	add	r3, sp, #40	; 0x28
 8009a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a3e:	ab09      	add	r3, sp, #36	; 0x24
 8009a40:	ec49 8b10 	vmov	d0, r8, r9
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	6022      	str	r2, [r4, #0]
 8009a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7ff fecd 	bl	80097ec <__cvt>
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a56:	2b47      	cmp	r3, #71	; 0x47
 8009a58:	4680      	mov	r8, r0
 8009a5a:	d108      	bne.n	8009a6e <_printf_float+0x142>
 8009a5c:	1cc8      	adds	r0, r1, #3
 8009a5e:	db02      	blt.n	8009a66 <_printf_float+0x13a>
 8009a60:	6863      	ldr	r3, [r4, #4]
 8009a62:	4299      	cmp	r1, r3
 8009a64:	dd41      	ble.n	8009aea <_printf_float+0x1be>
 8009a66:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8009a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a72:	d820      	bhi.n	8009ab6 <_printf_float+0x18a>
 8009a74:	3901      	subs	r1, #1
 8009a76:	465a      	mov	r2, fp
 8009a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8009a7e:	f7ff ff17 	bl	80098b0 <__exponent>
 8009a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a84:	1813      	adds	r3, r2, r0
 8009a86:	2a01      	cmp	r2, #1
 8009a88:	4681      	mov	r9, r0
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	dc02      	bgt.n	8009a94 <_printf_float+0x168>
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	07d2      	lsls	r2, r2, #31
 8009a92:	d501      	bpl.n	8009a98 <_printf_float+0x16c>
 8009a94:	3301      	adds	r3, #1
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d09c      	beq.n	80099da <_printf_float+0xae>
 8009aa0:	232d      	movs	r3, #45	; 0x2d
 8009aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa6:	e798      	b.n	80099da <_printf_float+0xae>
 8009aa8:	9a06      	ldr	r2, [sp, #24]
 8009aaa:	2a47      	cmp	r2, #71	; 0x47
 8009aac:	d1be      	bne.n	8009a2c <_printf_float+0x100>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1bc      	bne.n	8009a2c <_printf_float+0x100>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e7b9      	b.n	8009a2a <_printf_float+0xfe>
 8009ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009aba:	d118      	bne.n	8009aee <_printf_float+0x1c2>
 8009abc:	2900      	cmp	r1, #0
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	dd0b      	ble.n	8009ada <_printf_float+0x1ae>
 8009ac2:	6121      	str	r1, [r4, #16]
 8009ac4:	b913      	cbnz	r3, 8009acc <_printf_float+0x1a0>
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	07d0      	lsls	r0, r2, #31
 8009aca:	d502      	bpl.n	8009ad2 <_printf_float+0x1a6>
 8009acc:	3301      	adds	r3, #1
 8009ace:	440b      	add	r3, r1
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ad4:	f04f 0900 	mov.w	r9, #0
 8009ad8:	e7de      	b.n	8009a98 <_printf_float+0x16c>
 8009ada:	b913      	cbnz	r3, 8009ae2 <_printf_float+0x1b6>
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	07d2      	lsls	r2, r2, #31
 8009ae0:	d501      	bpl.n	8009ae6 <_printf_float+0x1ba>
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	e7f4      	b.n	8009ad0 <_printf_float+0x1a4>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e7f2      	b.n	8009ad0 <_printf_float+0x1a4>
 8009aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	4299      	cmp	r1, r3
 8009af2:	db05      	blt.n	8009b00 <_printf_float+0x1d4>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	6121      	str	r1, [r4, #16]
 8009af8:	07d8      	lsls	r0, r3, #31
 8009afa:	d5ea      	bpl.n	8009ad2 <_printf_float+0x1a6>
 8009afc:	1c4b      	adds	r3, r1, #1
 8009afe:	e7e7      	b.n	8009ad0 <_printf_float+0x1a4>
 8009b00:	2900      	cmp	r1, #0
 8009b02:	bfd4      	ite	le
 8009b04:	f1c1 0202 	rsble	r2, r1, #2
 8009b08:	2201      	movgt	r2, #1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	e7e0      	b.n	8009ad0 <_printf_float+0x1a4>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	055a      	lsls	r2, r3, #21
 8009b12:	d407      	bmi.n	8009b24 <_printf_float+0x1f8>
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	4642      	mov	r2, r8
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d12c      	bne.n	8009b7c <_printf_float+0x250>
 8009b22:	e764      	b.n	80099ee <_printf_float+0xc2>
 8009b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b28:	f240 80e0 	bls.w	8009cec <_printf_float+0x3c0>
 8009b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b30:	2200      	movs	r2, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	f7f6 ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d034      	beq.n	8009ba6 <_printf_float+0x27a>
 8009b3c:	4a37      	ldr	r2, [pc, #220]	; (8009c1c <_printf_float+0x2f0>)
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	47b8      	blx	r7
 8009b46:	3001      	adds	r0, #1
 8009b48:	f43f af51 	beq.w	80099ee <_printf_float+0xc2>
 8009b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b50:	429a      	cmp	r2, r3
 8009b52:	db02      	blt.n	8009b5a <_printf_float+0x22e>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	07d8      	lsls	r0, r3, #31
 8009b58:	d510      	bpl.n	8009b7c <_printf_float+0x250>
 8009b5a:	ee18 3a10 	vmov	r3, s16
 8009b5e:	4652      	mov	r2, sl
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	f43f af41 	beq.w	80099ee <_printf_float+0xc2>
 8009b6c:	f04f 0800 	mov.w	r8, #0
 8009b70:	f104 091a 	add.w	r9, r4, #26
 8009b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b76:	3b01      	subs	r3, #1
 8009b78:	4543      	cmp	r3, r8
 8009b7a:	dc09      	bgt.n	8009b90 <_printf_float+0x264>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	079b      	lsls	r3, r3, #30
 8009b80:	f100 8105 	bmi.w	8009d8e <_printf_float+0x462>
 8009b84:	68e0      	ldr	r0, [r4, #12]
 8009b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b88:	4298      	cmp	r0, r3
 8009b8a:	bfb8      	it	lt
 8009b8c:	4618      	movlt	r0, r3
 8009b8e:	e730      	b.n	80099f2 <_printf_float+0xc6>
 8009b90:	2301      	movs	r3, #1
 8009b92:	464a      	mov	r2, r9
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af27 	beq.w	80099ee <_printf_float+0xc2>
 8009ba0:	f108 0801 	add.w	r8, r8, #1
 8009ba4:	e7e6      	b.n	8009b74 <_printf_float+0x248>
 8009ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dc39      	bgt.n	8009c20 <_printf_float+0x2f4>
 8009bac:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <_printf_float+0x2f0>)
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f af19 	beq.w	80099ee <_printf_float+0xc2>
 8009bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	d102      	bne.n	8009bca <_printf_float+0x29e>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	07d9      	lsls	r1, r3, #31
 8009bc8:	d5d8      	bpl.n	8009b7c <_printf_float+0x250>
 8009bca:	ee18 3a10 	vmov	r3, s16
 8009bce:	4652      	mov	r2, sl
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b8      	blx	r7
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	f43f af09 	beq.w	80099ee <_printf_float+0xc2>
 8009bdc:	f04f 0900 	mov.w	r9, #0
 8009be0:	f104 0a1a 	add.w	sl, r4, #26
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	425b      	negs	r3, r3
 8009be8:	454b      	cmp	r3, r9
 8009bea:	dc01      	bgt.n	8009bf0 <_printf_float+0x2c4>
 8009bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bee:	e792      	b.n	8009b16 <_printf_float+0x1ea>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4652      	mov	r2, sl
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f aef7 	beq.w	80099ee <_printf_float+0xc2>
 8009c00:	f109 0901 	add.w	r9, r9, #1
 8009c04:	e7ee      	b.n	8009be4 <_printf_float+0x2b8>
 8009c06:	bf00      	nop
 8009c08:	7fefffff 	.word	0x7fefffff
 8009c0c:	0800db24 	.word	0x0800db24
 8009c10:	0800db28 	.word	0x0800db28
 8009c14:	0800db30 	.word	0x0800db30
 8009c18:	0800db2c 	.word	0x0800db2c
 8009c1c:	0800db34 	.word	0x0800db34
 8009c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c24:	429a      	cmp	r2, r3
 8009c26:	bfa8      	it	ge
 8009c28:	461a      	movge	r2, r3
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	4691      	mov	r9, r2
 8009c2e:	dc37      	bgt.n	8009ca0 <_printf_float+0x374>
 8009c30:	f04f 0b00 	mov.w	fp, #0
 8009c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c38:	f104 021a 	add.w	r2, r4, #26
 8009c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c3e:	9305      	str	r3, [sp, #20]
 8009c40:	eba3 0309 	sub.w	r3, r3, r9
 8009c44:	455b      	cmp	r3, fp
 8009c46:	dc33      	bgt.n	8009cb0 <_printf_float+0x384>
 8009c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	db3b      	blt.n	8009cc8 <_printf_float+0x39c>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	07da      	lsls	r2, r3, #31
 8009c54:	d438      	bmi.n	8009cc8 <_printf_float+0x39c>
 8009c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c58:	9a05      	ldr	r2, [sp, #20]
 8009c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c5c:	1a9a      	subs	r2, r3, r2
 8009c5e:	eba3 0901 	sub.w	r9, r3, r1
 8009c62:	4591      	cmp	r9, r2
 8009c64:	bfa8      	it	ge
 8009c66:	4691      	movge	r9, r2
 8009c68:	f1b9 0f00 	cmp.w	r9, #0
 8009c6c:	dc35      	bgt.n	8009cda <_printf_float+0x3ae>
 8009c6e:	f04f 0800 	mov.w	r8, #0
 8009c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c76:	f104 0a1a 	add.w	sl, r4, #26
 8009c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	eba3 0309 	sub.w	r3, r3, r9
 8009c84:	4543      	cmp	r3, r8
 8009c86:	f77f af79 	ble.w	8009b7c <_printf_float+0x250>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f aeaa 	beq.w	80099ee <_printf_float+0xc2>
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	e7ec      	b.n	8009c7a <_printf_float+0x34e>
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4642      	mov	r2, r8
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	d1c0      	bne.n	8009c30 <_printf_float+0x304>
 8009cae:	e69e      	b.n	80099ee <_printf_float+0xc2>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	9205      	str	r2, [sp, #20]
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f43f ae97 	beq.w	80099ee <_printf_float+0xc2>
 8009cc0:	9a05      	ldr	r2, [sp, #20]
 8009cc2:	f10b 0b01 	add.w	fp, fp, #1
 8009cc6:	e7b9      	b.n	8009c3c <_printf_float+0x310>
 8009cc8:	ee18 3a10 	vmov	r3, s16
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d1be      	bne.n	8009c56 <_printf_float+0x32a>
 8009cd8:	e689      	b.n	80099ee <_printf_float+0xc2>
 8009cda:	9a05      	ldr	r2, [sp, #20]
 8009cdc:	464b      	mov	r3, r9
 8009cde:	4442      	add	r2, r8
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d1c1      	bne.n	8009c6e <_printf_float+0x342>
 8009cea:	e680      	b.n	80099ee <_printf_float+0xc2>
 8009cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cee:	2a01      	cmp	r2, #1
 8009cf0:	dc01      	bgt.n	8009cf6 <_printf_float+0x3ca>
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d538      	bpl.n	8009d68 <_printf_float+0x43c>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f ae74 	beq.w	80099ee <_printf_float+0xc2>
 8009d06:	ee18 3a10 	vmov	r3, s16
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f ae6b 	beq.w	80099ee <_printf_float+0xc2>
 8009d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f7f6 fef2 	bl	8000b08 <__aeabi_dcmpeq>
 8009d24:	b9d8      	cbnz	r0, 8009d5e <_printf_float+0x432>
 8009d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d28:	f108 0201 	add.w	r2, r8, #1
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	d10e      	bne.n	8009d56 <_printf_float+0x42a>
 8009d38:	e659      	b.n	80099ee <_printf_float+0xc2>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	f43f ae52 	beq.w	80099ee <_printf_float+0xc2>
 8009d4a:	f108 0801 	add.w	r8, r8, #1
 8009d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d50:	3b01      	subs	r3, #1
 8009d52:	4543      	cmp	r3, r8
 8009d54:	dcf1      	bgt.n	8009d3a <_printf_float+0x40e>
 8009d56:	464b      	mov	r3, r9
 8009d58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d5c:	e6dc      	b.n	8009b18 <_printf_float+0x1ec>
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	f104 0a1a 	add.w	sl, r4, #26
 8009d66:	e7f2      	b.n	8009d4e <_printf_float+0x422>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4642      	mov	r2, r8
 8009d6c:	e7df      	b.n	8009d2e <_printf_float+0x402>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	464a      	mov	r2, r9
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f43f ae38 	beq.w	80099ee <_printf_float+0xc2>
 8009d7e:	f108 0801 	add.w	r8, r8, #1
 8009d82:	68e3      	ldr	r3, [r4, #12]
 8009d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d86:	1a5b      	subs	r3, r3, r1
 8009d88:	4543      	cmp	r3, r8
 8009d8a:	dcf0      	bgt.n	8009d6e <_printf_float+0x442>
 8009d8c:	e6fa      	b.n	8009b84 <_printf_float+0x258>
 8009d8e:	f04f 0800 	mov.w	r8, #0
 8009d92:	f104 0919 	add.w	r9, r4, #25
 8009d96:	e7f4      	b.n	8009d82 <_printf_float+0x456>

08009d98 <_printf_common>:
 8009d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	4699      	mov	r9, r3
 8009da0:	688a      	ldr	r2, [r1, #8]
 8009da2:	690b      	ldr	r3, [r1, #16]
 8009da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	bfb8      	it	lt
 8009dac:	4613      	movlt	r3, r2
 8009dae:	6033      	str	r3, [r6, #0]
 8009db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009db4:	4607      	mov	r7, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	b10a      	cbz	r2, 8009dbe <_printf_common+0x26>
 8009dba:	3301      	adds	r3, #1
 8009dbc:	6033      	str	r3, [r6, #0]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	0699      	lsls	r1, r3, #26
 8009dc2:	bf42      	ittt	mi
 8009dc4:	6833      	ldrmi	r3, [r6, #0]
 8009dc6:	3302      	addmi	r3, #2
 8009dc8:	6033      	strmi	r3, [r6, #0]
 8009dca:	6825      	ldr	r5, [r4, #0]
 8009dcc:	f015 0506 	ands.w	r5, r5, #6
 8009dd0:	d106      	bne.n	8009de0 <_printf_common+0x48>
 8009dd2:	f104 0a19 	add.w	sl, r4, #25
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	6832      	ldr	r2, [r6, #0]
 8009dda:	1a9b      	subs	r3, r3, r2
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	dc26      	bgt.n	8009e2e <_printf_common+0x96>
 8009de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009de4:	1e13      	subs	r3, r2, #0
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	bf18      	it	ne
 8009dea:	2301      	movne	r3, #1
 8009dec:	0692      	lsls	r2, r2, #26
 8009dee:	d42b      	bmi.n	8009e48 <_printf_common+0xb0>
 8009df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009df4:	4649      	mov	r1, r9
 8009df6:	4638      	mov	r0, r7
 8009df8:	47c0      	blx	r8
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d01e      	beq.n	8009e3c <_printf_common+0xa4>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	68e5      	ldr	r5, [r4, #12]
 8009e02:	6832      	ldr	r2, [r6, #0]
 8009e04:	f003 0306 	and.w	r3, r3, #6
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	bf08      	it	eq
 8009e0c:	1aad      	subeq	r5, r5, r2
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	6922      	ldr	r2, [r4, #16]
 8009e12:	bf0c      	ite	eq
 8009e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e18:	2500      	movne	r5, #0
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	bfc4      	itt	gt
 8009e1e:	1a9b      	subgt	r3, r3, r2
 8009e20:	18ed      	addgt	r5, r5, r3
 8009e22:	2600      	movs	r6, #0
 8009e24:	341a      	adds	r4, #26
 8009e26:	42b5      	cmp	r5, r6
 8009e28:	d11a      	bne.n	8009e60 <_printf_common+0xc8>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e008      	b.n	8009e40 <_printf_common+0xa8>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4652      	mov	r2, sl
 8009e32:	4649      	mov	r1, r9
 8009e34:	4638      	mov	r0, r7
 8009e36:	47c0      	blx	r8
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d103      	bne.n	8009e44 <_printf_common+0xac>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e44:	3501      	adds	r5, #1
 8009e46:	e7c6      	b.n	8009dd6 <_printf_common+0x3e>
 8009e48:	18e1      	adds	r1, r4, r3
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	2030      	movs	r0, #48	; 0x30
 8009e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e52:	4422      	add	r2, r4
 8009e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	e7c7      	b.n	8009df0 <_printf_common+0x58>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4622      	mov	r2, r4
 8009e64:	4649      	mov	r1, r9
 8009e66:	4638      	mov	r0, r7
 8009e68:	47c0      	blx	r8
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d0e6      	beq.n	8009e3c <_printf_common+0xa4>
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7d9      	b.n	8009e26 <_printf_common+0x8e>
	...

08009e74 <_printf_i>:
 8009e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	7e0f      	ldrb	r7, [r1, #24]
 8009e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e7c:	2f78      	cmp	r7, #120	; 0x78
 8009e7e:	4691      	mov	r9, r2
 8009e80:	4680      	mov	r8, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	469a      	mov	sl, r3
 8009e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e8a:	d807      	bhi.n	8009e9c <_printf_i+0x28>
 8009e8c:	2f62      	cmp	r7, #98	; 0x62
 8009e8e:	d80a      	bhi.n	8009ea6 <_printf_i+0x32>
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	f000 80d8 	beq.w	800a046 <_printf_i+0x1d2>
 8009e96:	2f58      	cmp	r7, #88	; 0x58
 8009e98:	f000 80a3 	beq.w	8009fe2 <_printf_i+0x16e>
 8009e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ea4:	e03a      	b.n	8009f1c <_printf_i+0xa8>
 8009ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eaa:	2b15      	cmp	r3, #21
 8009eac:	d8f6      	bhi.n	8009e9c <_printf_i+0x28>
 8009eae:	a101      	add	r1, pc, #4	; (adr r1, 8009eb4 <_printf_i+0x40>)
 8009eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb4:	08009f0d 	.word	0x08009f0d
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009e9d 	.word	0x08009e9d
 8009ec0:	08009e9d 	.word	0x08009e9d
 8009ec4:	08009e9d 	.word	0x08009e9d
 8009ec8:	08009e9d 	.word	0x08009e9d
 8009ecc:	08009f21 	.word	0x08009f21
 8009ed0:	08009e9d 	.word	0x08009e9d
 8009ed4:	08009e9d 	.word	0x08009e9d
 8009ed8:	08009e9d 	.word	0x08009e9d
 8009edc:	08009e9d 	.word	0x08009e9d
 8009ee0:	0800a02d 	.word	0x0800a02d
 8009ee4:	08009f51 	.word	0x08009f51
 8009ee8:	0800a00f 	.word	0x0800a00f
 8009eec:	08009e9d 	.word	0x08009e9d
 8009ef0:	08009e9d 	.word	0x08009e9d
 8009ef4:	0800a04f 	.word	0x0800a04f
 8009ef8:	08009e9d 	.word	0x08009e9d
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	08009e9d 	.word	0x08009e9d
 8009f04:	08009e9d 	.word	0x08009e9d
 8009f08:	0800a017 	.word	0x0800a017
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	1d1a      	adds	r2, r3, #4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	602a      	str	r2, [r5, #0]
 8009f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0a3      	b.n	800a068 <_printf_i+0x1f4>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	6829      	ldr	r1, [r5, #0]
 8009f24:	0606      	lsls	r6, r0, #24
 8009f26:	f101 0304 	add.w	r3, r1, #4
 8009f2a:	d50a      	bpl.n	8009f42 <_printf_i+0xce>
 8009f2c:	680e      	ldr	r6, [r1, #0]
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	da03      	bge.n	8009f3c <_printf_i+0xc8>
 8009f34:	232d      	movs	r3, #45	; 0x2d
 8009f36:	4276      	negs	r6, r6
 8009f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f3c:	485e      	ldr	r0, [pc, #376]	; (800a0b8 <_printf_i+0x244>)
 8009f3e:	230a      	movs	r3, #10
 8009f40:	e019      	b.n	8009f76 <_printf_i+0x102>
 8009f42:	680e      	ldr	r6, [r1, #0]
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f4a:	bf18      	it	ne
 8009f4c:	b236      	sxthne	r6, r6
 8009f4e:	e7ef      	b.n	8009f30 <_printf_i+0xbc>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	6820      	ldr	r0, [r4, #0]
 8009f54:	1d19      	adds	r1, r3, #4
 8009f56:	6029      	str	r1, [r5, #0]
 8009f58:	0601      	lsls	r1, r0, #24
 8009f5a:	d501      	bpl.n	8009f60 <_printf_i+0xec>
 8009f5c:	681e      	ldr	r6, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <_printf_i+0xf2>
 8009f60:	0646      	lsls	r6, r0, #25
 8009f62:	d5fb      	bpl.n	8009f5c <_printf_i+0xe8>
 8009f64:	881e      	ldrh	r6, [r3, #0]
 8009f66:	4854      	ldr	r0, [pc, #336]	; (800a0b8 <_printf_i+0x244>)
 8009f68:	2f6f      	cmp	r7, #111	; 0x6f
 8009f6a:	bf0c      	ite	eq
 8009f6c:	2308      	moveq	r3, #8
 8009f6e:	230a      	movne	r3, #10
 8009f70:	2100      	movs	r1, #0
 8009f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f76:	6865      	ldr	r5, [r4, #4]
 8009f78:	60a5      	str	r5, [r4, #8]
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	bfa2      	ittt	ge
 8009f7e:	6821      	ldrge	r1, [r4, #0]
 8009f80:	f021 0104 	bicge.w	r1, r1, #4
 8009f84:	6021      	strge	r1, [r4, #0]
 8009f86:	b90e      	cbnz	r6, 8009f8c <_printf_i+0x118>
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	d04d      	beq.n	800a028 <_printf_i+0x1b4>
 8009f8c:	4615      	mov	r5, r2
 8009f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f92:	fb03 6711 	mls	r7, r3, r1, r6
 8009f96:	5dc7      	ldrb	r7, [r0, r7]
 8009f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f9c:	4637      	mov	r7, r6
 8009f9e:	42bb      	cmp	r3, r7
 8009fa0:	460e      	mov	r6, r1
 8009fa2:	d9f4      	bls.n	8009f8e <_printf_i+0x11a>
 8009fa4:	2b08      	cmp	r3, #8
 8009fa6:	d10b      	bne.n	8009fc0 <_printf_i+0x14c>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	07de      	lsls	r6, r3, #31
 8009fac:	d508      	bpl.n	8009fc0 <_printf_i+0x14c>
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	6861      	ldr	r1, [r4, #4]
 8009fb2:	4299      	cmp	r1, r3
 8009fb4:	bfde      	ittt	le
 8009fb6:	2330      	movle	r3, #48	; 0x30
 8009fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fc0:	1b52      	subs	r2, r2, r5
 8009fc2:	6122      	str	r2, [r4, #16]
 8009fc4:	f8cd a000 	str.w	sl, [sp]
 8009fc8:	464b      	mov	r3, r9
 8009fca:	aa03      	add	r2, sp, #12
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7ff fee2 	bl	8009d98 <_printf_common>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d14c      	bne.n	800a072 <_printf_i+0x1fe>
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	b004      	add	sp, #16
 8009fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe2:	4835      	ldr	r0, [pc, #212]	; (800a0b8 <_printf_i+0x244>)
 8009fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fe8:	6829      	ldr	r1, [r5, #0]
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ff0:	6029      	str	r1, [r5, #0]
 8009ff2:	061d      	lsls	r5, r3, #24
 8009ff4:	d514      	bpl.n	800a020 <_printf_i+0x1ac>
 8009ff6:	07df      	lsls	r7, r3, #31
 8009ff8:	bf44      	itt	mi
 8009ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8009ffe:	6023      	strmi	r3, [r4, #0]
 800a000:	b91e      	cbnz	r6, 800a00a <_printf_i+0x196>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	f023 0320 	bic.w	r3, r3, #32
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	2310      	movs	r3, #16
 800a00c:	e7b0      	b.n	8009f70 <_printf_i+0xfc>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	f043 0320 	orr.w	r3, r3, #32
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	2378      	movs	r3, #120	; 0x78
 800a018:	4828      	ldr	r0, [pc, #160]	; (800a0bc <_printf_i+0x248>)
 800a01a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a01e:	e7e3      	b.n	8009fe8 <_printf_i+0x174>
 800a020:	0659      	lsls	r1, r3, #25
 800a022:	bf48      	it	mi
 800a024:	b2b6      	uxthmi	r6, r6
 800a026:	e7e6      	b.n	8009ff6 <_printf_i+0x182>
 800a028:	4615      	mov	r5, r2
 800a02a:	e7bb      	b.n	8009fa4 <_printf_i+0x130>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	6826      	ldr	r6, [r4, #0]
 800a030:	6961      	ldr	r1, [r4, #20]
 800a032:	1d18      	adds	r0, r3, #4
 800a034:	6028      	str	r0, [r5, #0]
 800a036:	0635      	lsls	r5, r6, #24
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	d501      	bpl.n	800a040 <_printf_i+0x1cc>
 800a03c:	6019      	str	r1, [r3, #0]
 800a03e:	e002      	b.n	800a046 <_printf_i+0x1d2>
 800a040:	0670      	lsls	r0, r6, #25
 800a042:	d5fb      	bpl.n	800a03c <_printf_i+0x1c8>
 800a044:	8019      	strh	r1, [r3, #0]
 800a046:	2300      	movs	r3, #0
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	4615      	mov	r5, r2
 800a04c:	e7ba      	b.n	8009fc4 <_printf_i+0x150>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	1d1a      	adds	r2, r3, #4
 800a052:	602a      	str	r2, [r5, #0]
 800a054:	681d      	ldr	r5, [r3, #0]
 800a056:	6862      	ldr	r2, [r4, #4]
 800a058:	2100      	movs	r1, #0
 800a05a:	4628      	mov	r0, r5
 800a05c:	f7f6 f8e0 	bl	8000220 <memchr>
 800a060:	b108      	cbz	r0, 800a066 <_printf_i+0x1f2>
 800a062:	1b40      	subs	r0, r0, r5
 800a064:	6060      	str	r0, [r4, #4]
 800a066:	6863      	ldr	r3, [r4, #4]
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	2300      	movs	r3, #0
 800a06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a070:	e7a8      	b.n	8009fc4 <_printf_i+0x150>
 800a072:	6923      	ldr	r3, [r4, #16]
 800a074:	462a      	mov	r2, r5
 800a076:	4649      	mov	r1, r9
 800a078:	4640      	mov	r0, r8
 800a07a:	47d0      	blx	sl
 800a07c:	3001      	adds	r0, #1
 800a07e:	d0ab      	beq.n	8009fd8 <_printf_i+0x164>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	079b      	lsls	r3, r3, #30
 800a084:	d413      	bmi.n	800a0ae <_printf_i+0x23a>
 800a086:	68e0      	ldr	r0, [r4, #12]
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	4298      	cmp	r0, r3
 800a08c:	bfb8      	it	lt
 800a08e:	4618      	movlt	r0, r3
 800a090:	e7a4      	b.n	8009fdc <_printf_i+0x168>
 800a092:	2301      	movs	r3, #1
 800a094:	4632      	mov	r2, r6
 800a096:	4649      	mov	r1, r9
 800a098:	4640      	mov	r0, r8
 800a09a:	47d0      	blx	sl
 800a09c:	3001      	adds	r0, #1
 800a09e:	d09b      	beq.n	8009fd8 <_printf_i+0x164>
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	68e3      	ldr	r3, [r4, #12]
 800a0a4:	9903      	ldr	r1, [sp, #12]
 800a0a6:	1a5b      	subs	r3, r3, r1
 800a0a8:	42ab      	cmp	r3, r5
 800a0aa:	dcf2      	bgt.n	800a092 <_printf_i+0x21e>
 800a0ac:	e7eb      	b.n	800a086 <_printf_i+0x212>
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	f104 0619 	add.w	r6, r4, #25
 800a0b4:	e7f5      	b.n	800a0a2 <_printf_i+0x22e>
 800a0b6:	bf00      	nop
 800a0b8:	0800db36 	.word	0x0800db36
 800a0bc:	0800db47 	.word	0x0800db47

0800a0c0 <siprintf>:
 800a0c0:	b40e      	push	{r1, r2, r3}
 800a0c2:	b500      	push	{lr}
 800a0c4:	b09c      	sub	sp, #112	; 0x70
 800a0c6:	ab1d      	add	r3, sp, #116	; 0x74
 800a0c8:	9002      	str	r0, [sp, #8]
 800a0ca:	9006      	str	r0, [sp, #24]
 800a0cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0d0:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <siprintf+0x38>)
 800a0d2:	9107      	str	r1, [sp, #28]
 800a0d4:	9104      	str	r1, [sp, #16]
 800a0d6:	4909      	ldr	r1, [pc, #36]	; (800a0fc <siprintf+0x3c>)
 800a0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0dc:	9105      	str	r1, [sp, #20]
 800a0de:	6800      	ldr	r0, [r0, #0]
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	a902      	add	r1, sp, #8
 800a0e4:	f001 fb76 	bl	800b7d4 <_svfiprintf_r>
 800a0e8:	9b02      	ldr	r3, [sp, #8]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	b01c      	add	sp, #112	; 0x70
 800a0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0f4:	b003      	add	sp, #12
 800a0f6:	4770      	bx	lr
 800a0f8:	20000060 	.word	0x20000060
 800a0fc:	ffff0208 	.word	0xffff0208

0800a100 <quorem>:
 800a100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	6903      	ldr	r3, [r0, #16]
 800a106:	690c      	ldr	r4, [r1, #16]
 800a108:	42a3      	cmp	r3, r4
 800a10a:	4607      	mov	r7, r0
 800a10c:	f2c0 8081 	blt.w	800a212 <quorem+0x112>
 800a110:	3c01      	subs	r4, #1
 800a112:	f101 0814 	add.w	r8, r1, #20
 800a116:	f100 0514 	add.w	r5, r0, #20
 800a11a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a128:	3301      	adds	r3, #1
 800a12a:	429a      	cmp	r2, r3
 800a12c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a134:	fbb2 f6f3 	udiv	r6, r2, r3
 800a138:	d331      	bcc.n	800a19e <quorem+0x9e>
 800a13a:	f04f 0e00 	mov.w	lr, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	46ac      	mov	ip, r5
 800a142:	46f2      	mov	sl, lr
 800a144:	f850 2b04 	ldr.w	r2, [r0], #4
 800a148:	b293      	uxth	r3, r2
 800a14a:	fb06 e303 	mla	r3, r6, r3, lr
 800a14e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a152:	b29b      	uxth	r3, r3
 800a154:	ebaa 0303 	sub.w	r3, sl, r3
 800a158:	f8dc a000 	ldr.w	sl, [ip]
 800a15c:	0c12      	lsrs	r2, r2, #16
 800a15e:	fa13 f38a 	uxtah	r3, r3, sl
 800a162:	fb06 e202 	mla	r2, r6, r2, lr
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	9b00      	ldr	r3, [sp, #0]
 800a16a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a16e:	b292      	uxth	r2, r2
 800a170:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a178:	f8bd 3000 	ldrh.w	r3, [sp]
 800a17c:	4581      	cmp	r9, r0
 800a17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a182:	f84c 3b04 	str.w	r3, [ip], #4
 800a186:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a18a:	d2db      	bcs.n	800a144 <quorem+0x44>
 800a18c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a190:	b92b      	cbnz	r3, 800a19e <quorem+0x9e>
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	3b04      	subs	r3, #4
 800a196:	429d      	cmp	r5, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	d32e      	bcc.n	800a1fa <quorem+0xfa>
 800a19c:	613c      	str	r4, [r7, #16]
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f001 f8c4 	bl	800b32c <__mcmp>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	db24      	blt.n	800a1f2 <quorem+0xf2>
 800a1a8:	3601      	adds	r6, #1
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f04f 0c00 	mov.w	ip, #0
 800a1b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1b4:	f8d0 e000 	ldr.w	lr, [r0]
 800a1b8:	b293      	uxth	r3, r2
 800a1ba:	ebac 0303 	sub.w	r3, ip, r3
 800a1be:	0c12      	lsrs	r2, r2, #16
 800a1c0:	fa13 f38e 	uxtah	r3, r3, lr
 800a1c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d2:	45c1      	cmp	r9, r8
 800a1d4:	f840 3b04 	str.w	r3, [r0], #4
 800a1d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1dc:	d2e8      	bcs.n	800a1b0 <quorem+0xb0>
 800a1de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e6:	b922      	cbnz	r2, 800a1f2 <quorem+0xf2>
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	429d      	cmp	r5, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	d30a      	bcc.n	800a206 <quorem+0x106>
 800a1f0:	613c      	str	r4, [r7, #16]
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	b003      	add	sp, #12
 800a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	2a00      	cmp	r2, #0
 800a200:	d1cc      	bne.n	800a19c <quorem+0x9c>
 800a202:	3c01      	subs	r4, #1
 800a204:	e7c7      	b.n	800a196 <quorem+0x96>
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	3b04      	subs	r3, #4
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	d1f0      	bne.n	800a1f0 <quorem+0xf0>
 800a20e:	3c01      	subs	r4, #1
 800a210:	e7eb      	b.n	800a1ea <quorem+0xea>
 800a212:	2000      	movs	r0, #0
 800a214:	e7ee      	b.n	800a1f4 <quorem+0xf4>
	...

0800a218 <_dtoa_r>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ed2d 8b04 	vpush	{d8-d9}
 800a220:	ec57 6b10 	vmov	r6, r7, d0
 800a224:	b093      	sub	sp, #76	; 0x4c
 800a226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a22c:	9106      	str	r1, [sp, #24]
 800a22e:	ee10 aa10 	vmov	sl, s0
 800a232:	4604      	mov	r4, r0
 800a234:	9209      	str	r2, [sp, #36]	; 0x24
 800a236:	930c      	str	r3, [sp, #48]	; 0x30
 800a238:	46bb      	mov	fp, r7
 800a23a:	b975      	cbnz	r5, 800a25a <_dtoa_r+0x42>
 800a23c:	2010      	movs	r0, #16
 800a23e:	f000 fddd 	bl	800adfc <malloc>
 800a242:	4602      	mov	r2, r0
 800a244:	6260      	str	r0, [r4, #36]	; 0x24
 800a246:	b920      	cbnz	r0, 800a252 <_dtoa_r+0x3a>
 800a248:	4ba7      	ldr	r3, [pc, #668]	; (800a4e8 <_dtoa_r+0x2d0>)
 800a24a:	21ea      	movs	r1, #234	; 0xea
 800a24c:	48a7      	ldr	r0, [pc, #668]	; (800a4ec <_dtoa_r+0x2d4>)
 800a24e:	f001 fbd1 	bl	800b9f4 <__assert_func>
 800a252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a256:	6005      	str	r5, [r0, #0]
 800a258:	60c5      	str	r5, [r0, #12]
 800a25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	b151      	cbz	r1, 800a276 <_dtoa_r+0x5e>
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	604a      	str	r2, [r1, #4]
 800a264:	2301      	movs	r3, #1
 800a266:	4093      	lsls	r3, r2
 800a268:	608b      	str	r3, [r1, #8]
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 fe1c 	bl	800aea8 <_Bfree>
 800a270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	1e3b      	subs	r3, r7, #0
 800a278:	bfaa      	itet	ge
 800a27a:	2300      	movge	r3, #0
 800a27c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a280:	f8c8 3000 	strge.w	r3, [r8]
 800a284:	4b9a      	ldr	r3, [pc, #616]	; (800a4f0 <_dtoa_r+0x2d8>)
 800a286:	bfbc      	itt	lt
 800a288:	2201      	movlt	r2, #1
 800a28a:	f8c8 2000 	strlt.w	r2, [r8]
 800a28e:	ea33 030b 	bics.w	r3, r3, fp
 800a292:	d11b      	bne.n	800a2cc <_dtoa_r+0xb4>
 800a294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a296:	f242 730f 	movw	r3, #9999	; 0x270f
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2a0:	4333      	orrs	r3, r6
 800a2a2:	f000 8592 	beq.w	800adca <_dtoa_r+0xbb2>
 800a2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a8:	b963      	cbnz	r3, 800a2c4 <_dtoa_r+0xac>
 800a2aa:	4b92      	ldr	r3, [pc, #584]	; (800a4f4 <_dtoa_r+0x2dc>)
 800a2ac:	e022      	b.n	800a2f4 <_dtoa_r+0xdc>
 800a2ae:	4b92      	ldr	r3, [pc, #584]	; (800a4f8 <_dtoa_r+0x2e0>)
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	3308      	adds	r3, #8
 800a2b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	9801      	ldr	r0, [sp, #4]
 800a2ba:	b013      	add	sp, #76	; 0x4c
 800a2bc:	ecbd 8b04 	vpop	{d8-d9}
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	4b8b      	ldr	r3, [pc, #556]	; (800a4f4 <_dtoa_r+0x2dc>)
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	3303      	adds	r3, #3
 800a2ca:	e7f3      	b.n	800a2b4 <_dtoa_r+0x9c>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	4659      	mov	r1, fp
 800a2d4:	f7f6 fc18 	bl	8000b08 <__aeabi_dcmpeq>
 800a2d8:	ec4b ab19 	vmov	d9, sl, fp
 800a2dc:	4680      	mov	r8, r0
 800a2de:	b158      	cbz	r0, 800a2f8 <_dtoa_r+0xe0>
 800a2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 856b 	beq.w	800adc4 <_dtoa_r+0xbac>
 800a2ee:	4883      	ldr	r0, [pc, #524]	; (800a4fc <_dtoa_r+0x2e4>)
 800a2f0:	6018      	str	r0, [r3, #0]
 800a2f2:	1e43      	subs	r3, r0, #1
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	e7df      	b.n	800a2b8 <_dtoa_r+0xa0>
 800a2f8:	ec4b ab10 	vmov	d0, sl, fp
 800a2fc:	aa10      	add	r2, sp, #64	; 0x40
 800a2fe:	a911      	add	r1, sp, #68	; 0x44
 800a300:	4620      	mov	r0, r4
 800a302:	f001 f8b9 	bl	800b478 <__d2b>
 800a306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a30a:	ee08 0a10 	vmov	s16, r0
 800a30e:	2d00      	cmp	r5, #0
 800a310:	f000 8084 	beq.w	800a41c <_dtoa_r+0x204>
 800a314:	ee19 3a90 	vmov	r3, s19
 800a318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a31c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a320:	4656      	mov	r6, sl
 800a322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a32a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a32e:	4b74      	ldr	r3, [pc, #464]	; (800a500 <_dtoa_r+0x2e8>)
 800a330:	2200      	movs	r2, #0
 800a332:	4630      	mov	r0, r6
 800a334:	4639      	mov	r1, r7
 800a336:	f7f5 ffc7 	bl	80002c8 <__aeabi_dsub>
 800a33a:	a365      	add	r3, pc, #404	; (adr r3, 800a4d0 <_dtoa_r+0x2b8>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f6 f97a 	bl	8000638 <__aeabi_dmul>
 800a344:	a364      	add	r3, pc, #400	; (adr r3, 800a4d8 <_dtoa_r+0x2c0>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7f5 ffbf 	bl	80002cc <__adddf3>
 800a34e:	4606      	mov	r6, r0
 800a350:	4628      	mov	r0, r5
 800a352:	460f      	mov	r7, r1
 800a354:	f7f6 f906 	bl	8000564 <__aeabi_i2d>
 800a358:	a361      	add	r3, pc, #388	; (adr r3, 800a4e0 <_dtoa_r+0x2c8>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f7f6 f96b 	bl	8000638 <__aeabi_dmul>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	4630      	mov	r0, r6
 800a368:	4639      	mov	r1, r7
 800a36a:	f7f5 ffaf 	bl	80002cc <__adddf3>
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	f7f6 fc11 	bl	8000b98 <__aeabi_d2iz>
 800a376:	2200      	movs	r2, #0
 800a378:	9000      	str	r0, [sp, #0]
 800a37a:	2300      	movs	r3, #0
 800a37c:	4630      	mov	r0, r6
 800a37e:	4639      	mov	r1, r7
 800a380:	f7f6 fbcc 	bl	8000b1c <__aeabi_dcmplt>
 800a384:	b150      	cbz	r0, 800a39c <_dtoa_r+0x184>
 800a386:	9800      	ldr	r0, [sp, #0]
 800a388:	f7f6 f8ec 	bl	8000564 <__aeabi_i2d>
 800a38c:	4632      	mov	r2, r6
 800a38e:	463b      	mov	r3, r7
 800a390:	f7f6 fbba 	bl	8000b08 <__aeabi_dcmpeq>
 800a394:	b910      	cbnz	r0, 800a39c <_dtoa_r+0x184>
 800a396:	9b00      	ldr	r3, [sp, #0]
 800a398:	3b01      	subs	r3, #1
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	9b00      	ldr	r3, [sp, #0]
 800a39e:	2b16      	cmp	r3, #22
 800a3a0:	d85a      	bhi.n	800a458 <_dtoa_r+0x240>
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	4b57      	ldr	r3, [pc, #348]	; (800a504 <_dtoa_r+0x2ec>)
 800a3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	ec51 0b19 	vmov	r0, r1, d9
 800a3b2:	f7f6 fbb3 	bl	8000b1c <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d050      	beq.n	800a45c <_dtoa_r+0x244>
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3c6:	1b5d      	subs	r5, r3, r5
 800a3c8:	1e6b      	subs	r3, r5, #1
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	bf45      	ittet	mi
 800a3ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3d2:	9304      	strmi	r3, [sp, #16]
 800a3d4:	2300      	movpl	r3, #0
 800a3d6:	2300      	movmi	r3, #0
 800a3d8:	bf4c      	ite	mi
 800a3da:	9305      	strmi	r3, [sp, #20]
 800a3dc:	9304      	strpl	r3, [sp, #16]
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	db3d      	blt.n	800a460 <_dtoa_r+0x248>
 800a3e4:	9b05      	ldr	r3, [sp, #20]
 800a3e6:	9a00      	ldr	r2, [sp, #0]
 800a3e8:	920a      	str	r2, [sp, #40]	; 0x28
 800a3ea:	4413      	add	r3, r2
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	f200 8089 	bhi.w	800a50c <_dtoa_r+0x2f4>
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	bfc4      	itt	gt
 800a3fe:	3b04      	subgt	r3, #4
 800a400:	9306      	strgt	r3, [sp, #24]
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	f1a3 0302 	sub.w	r3, r3, #2
 800a408:	bfcc      	ite	gt
 800a40a:	2500      	movgt	r5, #0
 800a40c:	2501      	movle	r5, #1
 800a40e:	2b03      	cmp	r3, #3
 800a410:	f200 8087 	bhi.w	800a522 <_dtoa_r+0x30a>
 800a414:	e8df f003 	tbb	[pc, r3]
 800a418:	59383a2d 	.word	0x59383a2d
 800a41c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a420:	441d      	add	r5, r3
 800a422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a426:	2b20      	cmp	r3, #32
 800a428:	bfc1      	itttt	gt
 800a42a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a42e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a432:	fa0b f303 	lslgt.w	r3, fp, r3
 800a436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a43a:	bfda      	itte	le
 800a43c:	f1c3 0320 	rsble	r3, r3, #32
 800a440:	fa06 f003 	lslle.w	r0, r6, r3
 800a444:	4318      	orrgt	r0, r3
 800a446:	f7f6 f87d 	bl	8000544 <__aeabi_ui2d>
 800a44a:	2301      	movs	r3, #1
 800a44c:	4606      	mov	r6, r0
 800a44e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a452:	3d01      	subs	r5, #1
 800a454:	930e      	str	r3, [sp, #56]	; 0x38
 800a456:	e76a      	b.n	800a32e <_dtoa_r+0x116>
 800a458:	2301      	movs	r3, #1
 800a45a:	e7b2      	b.n	800a3c2 <_dtoa_r+0x1aa>
 800a45c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a45e:	e7b1      	b.n	800a3c4 <_dtoa_r+0x1ac>
 800a460:	9b04      	ldr	r3, [sp, #16]
 800a462:	9a00      	ldr	r2, [sp, #0]
 800a464:	1a9b      	subs	r3, r3, r2
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	4253      	negs	r3, r2
 800a46a:	9307      	str	r3, [sp, #28]
 800a46c:	2300      	movs	r3, #0
 800a46e:	930a      	str	r3, [sp, #40]	; 0x28
 800a470:	e7bf      	b.n	800a3f2 <_dtoa_r+0x1da>
 800a472:	2300      	movs	r3, #0
 800a474:	9308      	str	r3, [sp, #32]
 800a476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dc55      	bgt.n	800a528 <_dtoa_r+0x310>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a482:	461a      	mov	r2, r3
 800a484:	9209      	str	r2, [sp, #36]	; 0x24
 800a486:	e00c      	b.n	800a4a2 <_dtoa_r+0x28a>
 800a488:	2301      	movs	r3, #1
 800a48a:	e7f3      	b.n	800a474 <_dtoa_r+0x25c>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a490:	9308      	str	r3, [sp, #32]
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	4413      	add	r3, r2
 800a496:	9302      	str	r3, [sp, #8]
 800a498:	3301      	adds	r3, #1
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	9303      	str	r3, [sp, #12]
 800a49e:	bfb8      	it	lt
 800a4a0:	2301      	movlt	r3, #1
 800a4a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	6042      	str	r2, [r0, #4]
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	f102 0614 	add.w	r6, r2, #20
 800a4ae:	429e      	cmp	r6, r3
 800a4b0:	6841      	ldr	r1, [r0, #4]
 800a4b2:	d93d      	bls.n	800a530 <_dtoa_r+0x318>
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 fcb7 	bl	800ae28 <_Balloc>
 800a4ba:	9001      	str	r0, [sp, #4]
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d13b      	bne.n	800a538 <_dtoa_r+0x320>
 800a4c0:	4b11      	ldr	r3, [pc, #68]	; (800a508 <_dtoa_r+0x2f0>)
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4c8:	e6c0      	b.n	800a24c <_dtoa_r+0x34>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e7df      	b.n	800a48e <_dtoa_r+0x276>
 800a4ce:	bf00      	nop
 800a4d0:	636f4361 	.word	0x636f4361
 800a4d4:	3fd287a7 	.word	0x3fd287a7
 800a4d8:	8b60c8b3 	.word	0x8b60c8b3
 800a4dc:	3fc68a28 	.word	0x3fc68a28
 800a4e0:	509f79fb 	.word	0x509f79fb
 800a4e4:	3fd34413 	.word	0x3fd34413
 800a4e8:	0800db65 	.word	0x0800db65
 800a4ec:	0800db7c 	.word	0x0800db7c
 800a4f0:	7ff00000 	.word	0x7ff00000
 800a4f4:	0800db61 	.word	0x0800db61
 800a4f8:	0800db58 	.word	0x0800db58
 800a4fc:	0800db35 	.word	0x0800db35
 800a500:	3ff80000 	.word	0x3ff80000
 800a504:	0800dc70 	.word	0x0800dc70
 800a508:	0800dbd7 	.word	0x0800dbd7
 800a50c:	2501      	movs	r5, #1
 800a50e:	2300      	movs	r3, #0
 800a510:	9306      	str	r3, [sp, #24]
 800a512:	9508      	str	r5, [sp, #32]
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	2312      	movs	r3, #18
 800a520:	e7b0      	b.n	800a484 <_dtoa_r+0x26c>
 800a522:	2301      	movs	r3, #1
 800a524:	9308      	str	r3, [sp, #32]
 800a526:	e7f5      	b.n	800a514 <_dtoa_r+0x2fc>
 800a528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a52e:	e7b8      	b.n	800a4a2 <_dtoa_r+0x28a>
 800a530:	3101      	adds	r1, #1
 800a532:	6041      	str	r1, [r0, #4]
 800a534:	0052      	lsls	r2, r2, #1
 800a536:	e7b8      	b.n	800a4aa <_dtoa_r+0x292>
 800a538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a53a:	9a01      	ldr	r2, [sp, #4]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	2b0e      	cmp	r3, #14
 800a542:	f200 809d 	bhi.w	800a680 <_dtoa_r+0x468>
 800a546:	2d00      	cmp	r5, #0
 800a548:	f000 809a 	beq.w	800a680 <_dtoa_r+0x468>
 800a54c:	9b00      	ldr	r3, [sp, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dd32      	ble.n	800a5b8 <_dtoa_r+0x3a0>
 800a552:	4ab7      	ldr	r2, [pc, #732]	; (800a830 <_dtoa_r+0x618>)
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a560:	9b00      	ldr	r3, [sp, #0]
 800a562:	05d8      	lsls	r0, r3, #23
 800a564:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a568:	d516      	bpl.n	800a598 <_dtoa_r+0x380>
 800a56a:	4bb2      	ldr	r3, [pc, #712]	; (800a834 <_dtoa_r+0x61c>)
 800a56c:	ec51 0b19 	vmov	r0, r1, d9
 800a570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a574:	f7f6 f98a 	bl	800088c <__aeabi_ddiv>
 800a578:	f007 070f 	and.w	r7, r7, #15
 800a57c:	4682      	mov	sl, r0
 800a57e:	468b      	mov	fp, r1
 800a580:	2503      	movs	r5, #3
 800a582:	4eac      	ldr	r6, [pc, #688]	; (800a834 <_dtoa_r+0x61c>)
 800a584:	b957      	cbnz	r7, 800a59c <_dtoa_r+0x384>
 800a586:	4642      	mov	r2, r8
 800a588:	464b      	mov	r3, r9
 800a58a:	4650      	mov	r0, sl
 800a58c:	4659      	mov	r1, fp
 800a58e:	f7f6 f97d 	bl	800088c <__aeabi_ddiv>
 800a592:	4682      	mov	sl, r0
 800a594:	468b      	mov	fp, r1
 800a596:	e028      	b.n	800a5ea <_dtoa_r+0x3d2>
 800a598:	2502      	movs	r5, #2
 800a59a:	e7f2      	b.n	800a582 <_dtoa_r+0x36a>
 800a59c:	07f9      	lsls	r1, r7, #31
 800a59e:	d508      	bpl.n	800a5b2 <_dtoa_r+0x39a>
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5a8:	f7f6 f846 	bl	8000638 <__aeabi_dmul>
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4689      	mov	r9, r1
 800a5b2:	107f      	asrs	r7, r7, #1
 800a5b4:	3608      	adds	r6, #8
 800a5b6:	e7e5      	b.n	800a584 <_dtoa_r+0x36c>
 800a5b8:	f000 809b 	beq.w	800a6f2 <_dtoa_r+0x4da>
 800a5bc:	9b00      	ldr	r3, [sp, #0]
 800a5be:	4f9d      	ldr	r7, [pc, #628]	; (800a834 <_dtoa_r+0x61c>)
 800a5c0:	425e      	negs	r6, r3
 800a5c2:	4b9b      	ldr	r3, [pc, #620]	; (800a830 <_dtoa_r+0x618>)
 800a5c4:	f006 020f 	and.w	r2, r6, #15
 800a5c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	ec51 0b19 	vmov	r0, r1, d9
 800a5d4:	f7f6 f830 	bl	8000638 <__aeabi_dmul>
 800a5d8:	1136      	asrs	r6, r6, #4
 800a5da:	4682      	mov	sl, r0
 800a5dc:	468b      	mov	fp, r1
 800a5de:	2300      	movs	r3, #0
 800a5e0:	2502      	movs	r5, #2
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	d17a      	bne.n	800a6dc <_dtoa_r+0x4c4>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1d3      	bne.n	800a592 <_dtoa_r+0x37a>
 800a5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 8082 	beq.w	800a6f6 <_dtoa_r+0x4de>
 800a5f2:	4b91      	ldr	r3, [pc, #580]	; (800a838 <_dtoa_r+0x620>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	4659      	mov	r1, fp
 800a5fa:	f7f6 fa8f 	bl	8000b1c <__aeabi_dcmplt>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d079      	beq.n	800a6f6 <_dtoa_r+0x4de>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d076      	beq.n	800a6f6 <_dtoa_r+0x4de>
 800a608:	9b02      	ldr	r3, [sp, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dd36      	ble.n	800a67c <_dtoa_r+0x464>
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	4650      	mov	r0, sl
 800a612:	4659      	mov	r1, fp
 800a614:	1e5f      	subs	r7, r3, #1
 800a616:	2200      	movs	r2, #0
 800a618:	4b88      	ldr	r3, [pc, #544]	; (800a83c <_dtoa_r+0x624>)
 800a61a:	f7f6 f80d 	bl	8000638 <__aeabi_dmul>
 800a61e:	9e02      	ldr	r6, [sp, #8]
 800a620:	4682      	mov	sl, r0
 800a622:	468b      	mov	fp, r1
 800a624:	3501      	adds	r5, #1
 800a626:	4628      	mov	r0, r5
 800a628:	f7f5 ff9c 	bl	8000564 <__aeabi_i2d>
 800a62c:	4652      	mov	r2, sl
 800a62e:	465b      	mov	r3, fp
 800a630:	f7f6 f802 	bl	8000638 <__aeabi_dmul>
 800a634:	4b82      	ldr	r3, [pc, #520]	; (800a840 <_dtoa_r+0x628>)
 800a636:	2200      	movs	r2, #0
 800a638:	f7f5 fe48 	bl	80002cc <__adddf3>
 800a63c:	46d0      	mov	r8, sl
 800a63e:	46d9      	mov	r9, fp
 800a640:	4682      	mov	sl, r0
 800a642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a646:	2e00      	cmp	r6, #0
 800a648:	d158      	bne.n	800a6fc <_dtoa_r+0x4e4>
 800a64a:	4b7e      	ldr	r3, [pc, #504]	; (800a844 <_dtoa_r+0x62c>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4640      	mov	r0, r8
 800a650:	4649      	mov	r1, r9
 800a652:	f7f5 fe39 	bl	80002c8 <__aeabi_dsub>
 800a656:	4652      	mov	r2, sl
 800a658:	465b      	mov	r3, fp
 800a65a:	4680      	mov	r8, r0
 800a65c:	4689      	mov	r9, r1
 800a65e:	f7f6 fa7b 	bl	8000b58 <__aeabi_dcmpgt>
 800a662:	2800      	cmp	r0, #0
 800a664:	f040 8295 	bne.w	800ab92 <_dtoa_r+0x97a>
 800a668:	4652      	mov	r2, sl
 800a66a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a66e:	4640      	mov	r0, r8
 800a670:	4649      	mov	r1, r9
 800a672:	f7f6 fa53 	bl	8000b1c <__aeabi_dcmplt>
 800a676:	2800      	cmp	r0, #0
 800a678:	f040 8289 	bne.w	800ab8e <_dtoa_r+0x976>
 800a67c:	ec5b ab19 	vmov	sl, fp, d9
 800a680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a682:	2b00      	cmp	r3, #0
 800a684:	f2c0 8148 	blt.w	800a918 <_dtoa_r+0x700>
 800a688:	9a00      	ldr	r2, [sp, #0]
 800a68a:	2a0e      	cmp	r2, #14
 800a68c:	f300 8144 	bgt.w	800a918 <_dtoa_r+0x700>
 800a690:	4b67      	ldr	r3, [pc, #412]	; (800a830 <_dtoa_r+0x618>)
 800a692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f280 80d5 	bge.w	800a84c <_dtoa_r+0x634>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f300 80d1 	bgt.w	800a84c <_dtoa_r+0x634>
 800a6aa:	f040 826f 	bne.w	800ab8c <_dtoa_r+0x974>
 800a6ae:	4b65      	ldr	r3, [pc, #404]	; (800a844 <_dtoa_r+0x62c>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f5 ffbf 	bl	8000638 <__aeabi_dmul>
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	465b      	mov	r3, fp
 800a6be:	f7f6 fa41 	bl	8000b44 <__aeabi_dcmpge>
 800a6c2:	9e03      	ldr	r6, [sp, #12]
 800a6c4:	4637      	mov	r7, r6
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	f040 8245 	bne.w	800ab56 <_dtoa_r+0x93e>
 800a6cc:	9d01      	ldr	r5, [sp, #4]
 800a6ce:	2331      	movs	r3, #49	; 0x31
 800a6d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	e240      	b.n	800ab5e <_dtoa_r+0x946>
 800a6dc:	07f2      	lsls	r2, r6, #31
 800a6de:	d505      	bpl.n	800a6ec <_dtoa_r+0x4d4>
 800a6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e4:	f7f5 ffa8 	bl	8000638 <__aeabi_dmul>
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	1076      	asrs	r6, r6, #1
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	e777      	b.n	800a5e2 <_dtoa_r+0x3ca>
 800a6f2:	2502      	movs	r5, #2
 800a6f4:	e779      	b.n	800a5ea <_dtoa_r+0x3d2>
 800a6f6:	9f00      	ldr	r7, [sp, #0]
 800a6f8:	9e03      	ldr	r6, [sp, #12]
 800a6fa:	e794      	b.n	800a626 <_dtoa_r+0x40e>
 800a6fc:	9901      	ldr	r1, [sp, #4]
 800a6fe:	4b4c      	ldr	r3, [pc, #304]	; (800a830 <_dtoa_r+0x618>)
 800a700:	4431      	add	r1, r6
 800a702:	910d      	str	r1, [sp, #52]	; 0x34
 800a704:	9908      	ldr	r1, [sp, #32]
 800a706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a70a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a70e:	2900      	cmp	r1, #0
 800a710:	d043      	beq.n	800a79a <_dtoa_r+0x582>
 800a712:	494d      	ldr	r1, [pc, #308]	; (800a848 <_dtoa_r+0x630>)
 800a714:	2000      	movs	r0, #0
 800a716:	f7f6 f8b9 	bl	800088c <__aeabi_ddiv>
 800a71a:	4652      	mov	r2, sl
 800a71c:	465b      	mov	r3, fp
 800a71e:	f7f5 fdd3 	bl	80002c8 <__aeabi_dsub>
 800a722:	9d01      	ldr	r5, [sp, #4]
 800a724:	4682      	mov	sl, r0
 800a726:	468b      	mov	fp, r1
 800a728:	4649      	mov	r1, r9
 800a72a:	4640      	mov	r0, r8
 800a72c:	f7f6 fa34 	bl	8000b98 <__aeabi_d2iz>
 800a730:	4606      	mov	r6, r0
 800a732:	f7f5 ff17 	bl	8000564 <__aeabi_i2d>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 fdc3 	bl	80002c8 <__aeabi_dsub>
 800a742:	3630      	adds	r6, #48	; 0x30
 800a744:	f805 6b01 	strb.w	r6, [r5], #1
 800a748:	4652      	mov	r2, sl
 800a74a:	465b      	mov	r3, fp
 800a74c:	4680      	mov	r8, r0
 800a74e:	4689      	mov	r9, r1
 800a750:	f7f6 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 800a754:	2800      	cmp	r0, #0
 800a756:	d163      	bne.n	800a820 <_dtoa_r+0x608>
 800a758:	4642      	mov	r2, r8
 800a75a:	464b      	mov	r3, r9
 800a75c:	4936      	ldr	r1, [pc, #216]	; (800a838 <_dtoa_r+0x620>)
 800a75e:	2000      	movs	r0, #0
 800a760:	f7f5 fdb2 	bl	80002c8 <__aeabi_dsub>
 800a764:	4652      	mov	r2, sl
 800a766:	465b      	mov	r3, fp
 800a768:	f7f6 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f040 80b5 	bne.w	800a8dc <_dtoa_r+0x6c4>
 800a772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a774:	429d      	cmp	r5, r3
 800a776:	d081      	beq.n	800a67c <_dtoa_r+0x464>
 800a778:	4b30      	ldr	r3, [pc, #192]	; (800a83c <_dtoa_r+0x624>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	4650      	mov	r0, sl
 800a77e:	4659      	mov	r1, fp
 800a780:	f7f5 ff5a 	bl	8000638 <__aeabi_dmul>
 800a784:	4b2d      	ldr	r3, [pc, #180]	; (800a83c <_dtoa_r+0x624>)
 800a786:	4682      	mov	sl, r0
 800a788:	468b      	mov	fp, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	2200      	movs	r2, #0
 800a790:	f7f5 ff52 	bl	8000638 <__aeabi_dmul>
 800a794:	4680      	mov	r8, r0
 800a796:	4689      	mov	r9, r1
 800a798:	e7c6      	b.n	800a728 <_dtoa_r+0x510>
 800a79a:	4650      	mov	r0, sl
 800a79c:	4659      	mov	r1, fp
 800a79e:	f7f5 ff4b 	bl	8000638 <__aeabi_dmul>
 800a7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7a4:	9d01      	ldr	r5, [sp, #4]
 800a7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7a8:	4682      	mov	sl, r0
 800a7aa:	468b      	mov	fp, r1
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f7f6 f9f2 	bl	8000b98 <__aeabi_d2iz>
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	f7f5 fed5 	bl	8000564 <__aeabi_i2d>
 800a7ba:	3630      	adds	r6, #48	; 0x30
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	f7f5 fd80 	bl	80002c8 <__aeabi_dsub>
 800a7c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ce:	429d      	cmp	r5, r3
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	d124      	bne.n	800a824 <_dtoa_r+0x60c>
 800a7da:	4b1b      	ldr	r3, [pc, #108]	; (800a848 <_dtoa_r+0x630>)
 800a7dc:	4650      	mov	r0, sl
 800a7de:	4659      	mov	r1, fp
 800a7e0:	f7f5 fd74 	bl	80002cc <__adddf3>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f7f6 f9b4 	bl	8000b58 <__aeabi_dcmpgt>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d173      	bne.n	800a8dc <_dtoa_r+0x6c4>
 800a7f4:	4652      	mov	r2, sl
 800a7f6:	465b      	mov	r3, fp
 800a7f8:	4913      	ldr	r1, [pc, #76]	; (800a848 <_dtoa_r+0x630>)
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f7f5 fd64 	bl	80002c8 <__aeabi_dsub>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4640      	mov	r0, r8
 800a806:	4649      	mov	r1, r9
 800a808:	f7f6 f988 	bl	8000b1c <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	f43f af35 	beq.w	800a67c <_dtoa_r+0x464>
 800a812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a814:	1e6b      	subs	r3, r5, #1
 800a816:	930f      	str	r3, [sp, #60]	; 0x3c
 800a818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a81c:	2b30      	cmp	r3, #48	; 0x30
 800a81e:	d0f8      	beq.n	800a812 <_dtoa_r+0x5fa>
 800a820:	9700      	str	r7, [sp, #0]
 800a822:	e049      	b.n	800a8b8 <_dtoa_r+0x6a0>
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <_dtoa_r+0x624>)
 800a826:	f7f5 ff07 	bl	8000638 <__aeabi_dmul>
 800a82a:	4680      	mov	r8, r0
 800a82c:	4689      	mov	r9, r1
 800a82e:	e7bd      	b.n	800a7ac <_dtoa_r+0x594>
 800a830:	0800dc70 	.word	0x0800dc70
 800a834:	0800dc48 	.word	0x0800dc48
 800a838:	3ff00000 	.word	0x3ff00000
 800a83c:	40240000 	.word	0x40240000
 800a840:	401c0000 	.word	0x401c0000
 800a844:	40140000 	.word	0x40140000
 800a848:	3fe00000 	.word	0x3fe00000
 800a84c:	9d01      	ldr	r5, [sp, #4]
 800a84e:	4656      	mov	r6, sl
 800a850:	465f      	mov	r7, fp
 800a852:	4642      	mov	r2, r8
 800a854:	464b      	mov	r3, r9
 800a856:	4630      	mov	r0, r6
 800a858:	4639      	mov	r1, r7
 800a85a:	f7f6 f817 	bl	800088c <__aeabi_ddiv>
 800a85e:	f7f6 f99b 	bl	8000b98 <__aeabi_d2iz>
 800a862:	4682      	mov	sl, r0
 800a864:	f7f5 fe7e 	bl	8000564 <__aeabi_i2d>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fee4 	bl	8000638 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a87c:	f7f5 fd24 	bl	80002c8 <__aeabi_dsub>
 800a880:	f805 6b01 	strb.w	r6, [r5], #1
 800a884:	9e01      	ldr	r6, [sp, #4]
 800a886:	9f03      	ldr	r7, [sp, #12]
 800a888:	1bae      	subs	r6, r5, r6
 800a88a:	42b7      	cmp	r7, r6
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	d135      	bne.n	800a8fe <_dtoa_r+0x6e6>
 800a892:	f7f5 fd1b 	bl	80002cc <__adddf3>
 800a896:	4642      	mov	r2, r8
 800a898:	464b      	mov	r3, r9
 800a89a:	4606      	mov	r6, r0
 800a89c:	460f      	mov	r7, r1
 800a89e:	f7f6 f95b 	bl	8000b58 <__aeabi_dcmpgt>
 800a8a2:	b9d0      	cbnz	r0, 800a8da <_dtoa_r+0x6c2>
 800a8a4:	4642      	mov	r2, r8
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f6 f92c 	bl	8000b08 <__aeabi_dcmpeq>
 800a8b0:	b110      	cbz	r0, 800a8b8 <_dtoa_r+0x6a0>
 800a8b2:	f01a 0f01 	tst.w	sl, #1
 800a8b6:	d110      	bne.n	800a8da <_dtoa_r+0x6c2>
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	ee18 1a10 	vmov	r1, s16
 800a8be:	f000 faf3 	bl	800aea8 <_Bfree>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9800      	ldr	r0, [sp, #0]
 800a8c6:	702b      	strb	r3, [r5, #0]
 800a8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	6018      	str	r0, [r3, #0]
 800a8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f43f acf1 	beq.w	800a2b8 <_dtoa_r+0xa0>
 800a8d6:	601d      	str	r5, [r3, #0]
 800a8d8:	e4ee      	b.n	800a2b8 <_dtoa_r+0xa0>
 800a8da:	9f00      	ldr	r7, [sp, #0]
 800a8dc:	462b      	mov	r3, r5
 800a8de:	461d      	mov	r5, r3
 800a8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8e4:	2a39      	cmp	r2, #57	; 0x39
 800a8e6:	d106      	bne.n	800a8f6 <_dtoa_r+0x6de>
 800a8e8:	9a01      	ldr	r2, [sp, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d1f7      	bne.n	800a8de <_dtoa_r+0x6c6>
 800a8ee:	9901      	ldr	r1, [sp, #4]
 800a8f0:	2230      	movs	r2, #48	; 0x30
 800a8f2:	3701      	adds	r7, #1
 800a8f4:	700a      	strb	r2, [r1, #0]
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	3201      	adds	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e790      	b.n	800a820 <_dtoa_r+0x608>
 800a8fe:	4ba6      	ldr	r3, [pc, #664]	; (800ab98 <_dtoa_r+0x980>)
 800a900:	2200      	movs	r2, #0
 800a902:	f7f5 fe99 	bl	8000638 <__aeabi_dmul>
 800a906:	2200      	movs	r2, #0
 800a908:	2300      	movs	r3, #0
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	f7f6 f8fb 	bl	8000b08 <__aeabi_dcmpeq>
 800a912:	2800      	cmp	r0, #0
 800a914:	d09d      	beq.n	800a852 <_dtoa_r+0x63a>
 800a916:	e7cf      	b.n	800a8b8 <_dtoa_r+0x6a0>
 800a918:	9a08      	ldr	r2, [sp, #32]
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	f000 80d7 	beq.w	800aace <_dtoa_r+0x8b6>
 800a920:	9a06      	ldr	r2, [sp, #24]
 800a922:	2a01      	cmp	r2, #1
 800a924:	f300 80ba 	bgt.w	800aa9c <_dtoa_r+0x884>
 800a928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a92a:	2a00      	cmp	r2, #0
 800a92c:	f000 80b2 	beq.w	800aa94 <_dtoa_r+0x87c>
 800a930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a934:	9e07      	ldr	r6, [sp, #28]
 800a936:	9d04      	ldr	r5, [sp, #16]
 800a938:	9a04      	ldr	r2, [sp, #16]
 800a93a:	441a      	add	r2, r3
 800a93c:	9204      	str	r2, [sp, #16]
 800a93e:	9a05      	ldr	r2, [sp, #20]
 800a940:	2101      	movs	r1, #1
 800a942:	441a      	add	r2, r3
 800a944:	4620      	mov	r0, r4
 800a946:	9205      	str	r2, [sp, #20]
 800a948:	f000 fb66 	bl	800b018 <__i2b>
 800a94c:	4607      	mov	r7, r0
 800a94e:	2d00      	cmp	r5, #0
 800a950:	dd0c      	ble.n	800a96c <_dtoa_r+0x754>
 800a952:	9b05      	ldr	r3, [sp, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	dd09      	ble.n	800a96c <_dtoa_r+0x754>
 800a958:	42ab      	cmp	r3, r5
 800a95a:	9a04      	ldr	r2, [sp, #16]
 800a95c:	bfa8      	it	ge
 800a95e:	462b      	movge	r3, r5
 800a960:	1ad2      	subs	r2, r2, r3
 800a962:	9204      	str	r2, [sp, #16]
 800a964:	9a05      	ldr	r2, [sp, #20]
 800a966:	1aed      	subs	r5, r5, r3
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	9b07      	ldr	r3, [sp, #28]
 800a96e:	b31b      	cbz	r3, 800a9b8 <_dtoa_r+0x7a0>
 800a970:	9b08      	ldr	r3, [sp, #32]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 80af 	beq.w	800aad6 <_dtoa_r+0x8be>
 800a978:	2e00      	cmp	r6, #0
 800a97a:	dd13      	ble.n	800a9a4 <_dtoa_r+0x78c>
 800a97c:	4639      	mov	r1, r7
 800a97e:	4632      	mov	r2, r6
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fc09 	bl	800b198 <__pow5mult>
 800a986:	ee18 2a10 	vmov	r2, s16
 800a98a:	4601      	mov	r1, r0
 800a98c:	4607      	mov	r7, r0
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 fb58 	bl	800b044 <__multiply>
 800a994:	ee18 1a10 	vmov	r1, s16
 800a998:	4680      	mov	r8, r0
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fa84 	bl	800aea8 <_Bfree>
 800a9a0:	ee08 8a10 	vmov	s16, r8
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	1b9a      	subs	r2, r3, r6
 800a9a8:	d006      	beq.n	800a9b8 <_dtoa_r+0x7a0>
 800a9aa:	ee18 1a10 	vmov	r1, s16
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 fbf2 	bl	800b198 <__pow5mult>
 800a9b4:	ee08 0a10 	vmov	s16, r0
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fb2c 	bl	800b018 <__i2b>
 800a9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	f340 8088 	ble.w	800aada <_dtoa_r+0x8c2>
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 fbe2 	bl	800b198 <__pow5mult>
 800a9d4:	9b06      	ldr	r3, [sp, #24]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	4606      	mov	r6, r0
 800a9da:	f340 8081 	ble.w	800aae0 <_dtoa_r+0x8c8>
 800a9de:	f04f 0800 	mov.w	r8, #0
 800a9e2:	6933      	ldr	r3, [r6, #16]
 800a9e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9e8:	6918      	ldr	r0, [r3, #16]
 800a9ea:	f000 fac5 	bl	800af78 <__hi0bits>
 800a9ee:	f1c0 0020 	rsb	r0, r0, #32
 800a9f2:	9b05      	ldr	r3, [sp, #20]
 800a9f4:	4418      	add	r0, r3
 800a9f6:	f010 001f 	ands.w	r0, r0, #31
 800a9fa:	f000 8092 	beq.w	800ab22 <_dtoa_r+0x90a>
 800a9fe:	f1c0 0320 	rsb	r3, r0, #32
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	f340 808a 	ble.w	800ab1c <_dtoa_r+0x904>
 800aa08:	f1c0 001c 	rsb	r0, r0, #28
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	4403      	add	r3, r0
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	9b05      	ldr	r3, [sp, #20]
 800aa14:	4403      	add	r3, r0
 800aa16:	4405      	add	r5, r0
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd07      	ble.n	800aa30 <_dtoa_r+0x818>
 800aa20:	ee18 1a10 	vmov	r1, s16
 800aa24:	461a      	mov	r2, r3
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 fc10 	bl	800b24c <__lshift>
 800aa2c:	ee08 0a10 	vmov	s16, r0
 800aa30:	9b05      	ldr	r3, [sp, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	dd05      	ble.n	800aa42 <_dtoa_r+0x82a>
 800aa36:	4631      	mov	r1, r6
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 fc06 	bl	800b24c <__lshift>
 800aa40:	4606      	mov	r6, r0
 800aa42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d06e      	beq.n	800ab26 <_dtoa_r+0x90e>
 800aa48:	ee18 0a10 	vmov	r0, s16
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	f000 fc6d 	bl	800b32c <__mcmp>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	da67      	bge.n	800ab26 <_dtoa_r+0x90e>
 800aa56:	9b00      	ldr	r3, [sp, #0]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	ee18 1a10 	vmov	r1, s16
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	220a      	movs	r2, #10
 800aa62:	2300      	movs	r3, #0
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fa41 	bl	800aeec <__multadd>
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	ee08 0a10 	vmov	s16, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 81b1 	beq.w	800add8 <_dtoa_r+0xbc0>
 800aa76:	2300      	movs	r3, #0
 800aa78:	4639      	mov	r1, r7
 800aa7a:	220a      	movs	r2, #10
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fa35 	bl	800aeec <__multadd>
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	4607      	mov	r7, r0
 800aa88:	f300 808e 	bgt.w	800aba8 <_dtoa_r+0x990>
 800aa8c:	9b06      	ldr	r3, [sp, #24]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	dc51      	bgt.n	800ab36 <_dtoa_r+0x91e>
 800aa92:	e089      	b.n	800aba8 <_dtoa_r+0x990>
 800aa94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa9a:	e74b      	b.n	800a934 <_dtoa_r+0x71c>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	1e5e      	subs	r6, r3, #1
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	42b3      	cmp	r3, r6
 800aaa4:	bfbf      	itttt	lt
 800aaa6:	9b07      	ldrlt	r3, [sp, #28]
 800aaa8:	9607      	strlt	r6, [sp, #28]
 800aaaa:	1af2      	sublt	r2, r6, r3
 800aaac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aaae:	bfb6      	itet	lt
 800aab0:	189b      	addlt	r3, r3, r2
 800aab2:	1b9e      	subge	r6, r3, r6
 800aab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	bfb8      	it	lt
 800aaba:	2600      	movlt	r6, #0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bfb7      	itett	lt
 800aac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aac8:	1a9d      	sublt	r5, r3, r2
 800aaca:	2300      	movlt	r3, #0
 800aacc:	e734      	b.n	800a938 <_dtoa_r+0x720>
 800aace:	9e07      	ldr	r6, [sp, #28]
 800aad0:	9d04      	ldr	r5, [sp, #16]
 800aad2:	9f08      	ldr	r7, [sp, #32]
 800aad4:	e73b      	b.n	800a94e <_dtoa_r+0x736>
 800aad6:	9a07      	ldr	r2, [sp, #28]
 800aad8:	e767      	b.n	800a9aa <_dtoa_r+0x792>
 800aada:	9b06      	ldr	r3, [sp, #24]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	dc18      	bgt.n	800ab12 <_dtoa_r+0x8fa>
 800aae0:	f1ba 0f00 	cmp.w	sl, #0
 800aae4:	d115      	bne.n	800ab12 <_dtoa_r+0x8fa>
 800aae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaea:	b993      	cbnz	r3, 800ab12 <_dtoa_r+0x8fa>
 800aaec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aaf0:	0d1b      	lsrs	r3, r3, #20
 800aaf2:	051b      	lsls	r3, r3, #20
 800aaf4:	b183      	cbz	r3, 800ab18 <_dtoa_r+0x900>
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	9b05      	ldr	r3, [sp, #20]
 800aafe:	3301      	adds	r3, #1
 800ab00:	9305      	str	r3, [sp, #20]
 800ab02:	f04f 0801 	mov.w	r8, #1
 800ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f47f af6a 	bne.w	800a9e2 <_dtoa_r+0x7ca>
 800ab0e:	2001      	movs	r0, #1
 800ab10:	e76f      	b.n	800a9f2 <_dtoa_r+0x7da>
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	e7f6      	b.n	800ab06 <_dtoa_r+0x8ee>
 800ab18:	4698      	mov	r8, r3
 800ab1a:	e7f4      	b.n	800ab06 <_dtoa_r+0x8ee>
 800ab1c:	f43f af7d 	beq.w	800aa1a <_dtoa_r+0x802>
 800ab20:	4618      	mov	r0, r3
 800ab22:	301c      	adds	r0, #28
 800ab24:	e772      	b.n	800aa0c <_dtoa_r+0x7f4>
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	dc37      	bgt.n	800ab9c <_dtoa_r+0x984>
 800ab2c:	9b06      	ldr	r3, [sp, #24]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	dd34      	ble.n	800ab9c <_dtoa_r+0x984>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	9b02      	ldr	r3, [sp, #8]
 800ab38:	b96b      	cbnz	r3, 800ab56 <_dtoa_r+0x93e>
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	2205      	movs	r2, #5
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 f9d4 	bl	800aeec <__multadd>
 800ab44:	4601      	mov	r1, r0
 800ab46:	4606      	mov	r6, r0
 800ab48:	ee18 0a10 	vmov	r0, s16
 800ab4c:	f000 fbee 	bl	800b32c <__mcmp>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	f73f adbb 	bgt.w	800a6cc <_dtoa_r+0x4b4>
 800ab56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab58:	9d01      	ldr	r5, [sp, #4]
 800ab5a:	43db      	mvns	r3, r3
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	4631      	mov	r1, r6
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 f99f 	bl	800aea8 <_Bfree>
 800ab6a:	2f00      	cmp	r7, #0
 800ab6c:	f43f aea4 	beq.w	800a8b8 <_dtoa_r+0x6a0>
 800ab70:	f1b8 0f00 	cmp.w	r8, #0
 800ab74:	d005      	beq.n	800ab82 <_dtoa_r+0x96a>
 800ab76:	45b8      	cmp	r8, r7
 800ab78:	d003      	beq.n	800ab82 <_dtoa_r+0x96a>
 800ab7a:	4641      	mov	r1, r8
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 f993 	bl	800aea8 <_Bfree>
 800ab82:	4639      	mov	r1, r7
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 f98f 	bl	800aea8 <_Bfree>
 800ab8a:	e695      	b.n	800a8b8 <_dtoa_r+0x6a0>
 800ab8c:	2600      	movs	r6, #0
 800ab8e:	4637      	mov	r7, r6
 800ab90:	e7e1      	b.n	800ab56 <_dtoa_r+0x93e>
 800ab92:	9700      	str	r7, [sp, #0]
 800ab94:	4637      	mov	r7, r6
 800ab96:	e599      	b.n	800a6cc <_dtoa_r+0x4b4>
 800ab98:	40240000 	.word	0x40240000
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 80ca 	beq.w	800ad38 <_dtoa_r+0xb20>
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	9302      	str	r3, [sp, #8]
 800aba8:	2d00      	cmp	r5, #0
 800abaa:	dd05      	ble.n	800abb8 <_dtoa_r+0x9a0>
 800abac:	4639      	mov	r1, r7
 800abae:	462a      	mov	r2, r5
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 fb4b 	bl	800b24c <__lshift>
 800abb6:	4607      	mov	r7, r0
 800abb8:	f1b8 0f00 	cmp.w	r8, #0
 800abbc:	d05b      	beq.n	800ac76 <_dtoa_r+0xa5e>
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 f931 	bl	800ae28 <_Balloc>
 800abc6:	4605      	mov	r5, r0
 800abc8:	b928      	cbnz	r0, 800abd6 <_dtoa_r+0x9be>
 800abca:	4b87      	ldr	r3, [pc, #540]	; (800ade8 <_dtoa_r+0xbd0>)
 800abcc:	4602      	mov	r2, r0
 800abce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abd2:	f7ff bb3b 	b.w	800a24c <_dtoa_r+0x34>
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	3202      	adds	r2, #2
 800abda:	0092      	lsls	r2, r2, #2
 800abdc:	f107 010c 	add.w	r1, r7, #12
 800abe0:	300c      	adds	r0, #12
 800abe2:	f000 f913 	bl	800ae0c <memcpy>
 800abe6:	2201      	movs	r2, #1
 800abe8:	4629      	mov	r1, r5
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fb2e 	bl	800b24c <__lshift>
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	f103 0901 	add.w	r9, r3, #1
 800abf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800abfa:	4413      	add	r3, r2
 800abfc:	9305      	str	r3, [sp, #20]
 800abfe:	f00a 0301 	and.w	r3, sl, #1
 800ac02:	46b8      	mov	r8, r7
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	4607      	mov	r7, r0
 800ac08:	4631      	mov	r1, r6
 800ac0a:	ee18 0a10 	vmov	r0, s16
 800ac0e:	f7ff fa77 	bl	800a100 <quorem>
 800ac12:	4641      	mov	r1, r8
 800ac14:	9002      	str	r0, [sp, #8]
 800ac16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac1a:	ee18 0a10 	vmov	r0, s16
 800ac1e:	f000 fb85 	bl	800b32c <__mcmp>
 800ac22:	463a      	mov	r2, r7
 800ac24:	9003      	str	r0, [sp, #12]
 800ac26:	4631      	mov	r1, r6
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 fb9b 	bl	800b364 <__mdiff>
 800ac2e:	68c2      	ldr	r2, [r0, #12]
 800ac30:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac34:	4605      	mov	r5, r0
 800ac36:	bb02      	cbnz	r2, 800ac7a <_dtoa_r+0xa62>
 800ac38:	4601      	mov	r1, r0
 800ac3a:	ee18 0a10 	vmov	r0, s16
 800ac3e:	f000 fb75 	bl	800b32c <__mcmp>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4629      	mov	r1, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	9207      	str	r2, [sp, #28]
 800ac4a:	f000 f92d 	bl	800aea8 <_Bfree>
 800ac4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac52:	ea43 0102 	orr.w	r1, r3, r2
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	464d      	mov	r5, r9
 800ac5c:	d10f      	bne.n	800ac7e <_dtoa_r+0xa66>
 800ac5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac62:	d02a      	beq.n	800acba <_dtoa_r+0xaa2>
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dd02      	ble.n	800ac70 <_dtoa_r+0xa58>
 800ac6a:	9b02      	ldr	r3, [sp, #8]
 800ac6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac70:	f88b a000 	strb.w	sl, [fp]
 800ac74:	e775      	b.n	800ab62 <_dtoa_r+0x94a>
 800ac76:	4638      	mov	r0, r7
 800ac78:	e7ba      	b.n	800abf0 <_dtoa_r+0x9d8>
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	e7e2      	b.n	800ac44 <_dtoa_r+0xa2c>
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	db04      	blt.n	800ac8e <_dtoa_r+0xa76>
 800ac84:	9906      	ldr	r1, [sp, #24]
 800ac86:	430b      	orrs	r3, r1
 800ac88:	9904      	ldr	r1, [sp, #16]
 800ac8a:	430b      	orrs	r3, r1
 800ac8c:	d122      	bne.n	800acd4 <_dtoa_r+0xabc>
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	ddee      	ble.n	800ac70 <_dtoa_r+0xa58>
 800ac92:	ee18 1a10 	vmov	r1, s16
 800ac96:	2201      	movs	r2, #1
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fad7 	bl	800b24c <__lshift>
 800ac9e:	4631      	mov	r1, r6
 800aca0:	ee08 0a10 	vmov	s16, r0
 800aca4:	f000 fb42 	bl	800b32c <__mcmp>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	dc03      	bgt.n	800acb4 <_dtoa_r+0xa9c>
 800acac:	d1e0      	bne.n	800ac70 <_dtoa_r+0xa58>
 800acae:	f01a 0f01 	tst.w	sl, #1
 800acb2:	d0dd      	beq.n	800ac70 <_dtoa_r+0xa58>
 800acb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acb8:	d1d7      	bne.n	800ac6a <_dtoa_r+0xa52>
 800acba:	2339      	movs	r3, #57	; 0x39
 800acbc:	f88b 3000 	strb.w	r3, [fp]
 800acc0:	462b      	mov	r3, r5
 800acc2:	461d      	mov	r5, r3
 800acc4:	3b01      	subs	r3, #1
 800acc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acca:	2a39      	cmp	r2, #57	; 0x39
 800accc:	d071      	beq.n	800adb2 <_dtoa_r+0xb9a>
 800acce:	3201      	adds	r2, #1
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	e746      	b.n	800ab62 <_dtoa_r+0x94a>
 800acd4:	2a00      	cmp	r2, #0
 800acd6:	dd07      	ble.n	800ace8 <_dtoa_r+0xad0>
 800acd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acdc:	d0ed      	beq.n	800acba <_dtoa_r+0xaa2>
 800acde:	f10a 0301 	add.w	r3, sl, #1
 800ace2:	f88b 3000 	strb.w	r3, [fp]
 800ace6:	e73c      	b.n	800ab62 <_dtoa_r+0x94a>
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800acee:	4599      	cmp	r9, r3
 800acf0:	d047      	beq.n	800ad82 <_dtoa_r+0xb6a>
 800acf2:	ee18 1a10 	vmov	r1, s16
 800acf6:	2300      	movs	r3, #0
 800acf8:	220a      	movs	r2, #10
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f8f6 	bl	800aeec <__multadd>
 800ad00:	45b8      	cmp	r8, r7
 800ad02:	ee08 0a10 	vmov	s16, r0
 800ad06:	f04f 0300 	mov.w	r3, #0
 800ad0a:	f04f 020a 	mov.w	r2, #10
 800ad0e:	4641      	mov	r1, r8
 800ad10:	4620      	mov	r0, r4
 800ad12:	d106      	bne.n	800ad22 <_dtoa_r+0xb0a>
 800ad14:	f000 f8ea 	bl	800aeec <__multadd>
 800ad18:	4680      	mov	r8, r0
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	f109 0901 	add.w	r9, r9, #1
 800ad20:	e772      	b.n	800ac08 <_dtoa_r+0x9f0>
 800ad22:	f000 f8e3 	bl	800aeec <__multadd>
 800ad26:	4639      	mov	r1, r7
 800ad28:	4680      	mov	r8, r0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	220a      	movs	r2, #10
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 f8dc 	bl	800aeec <__multadd>
 800ad34:	4607      	mov	r7, r0
 800ad36:	e7f1      	b.n	800ad1c <_dtoa_r+0xb04>
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	9302      	str	r3, [sp, #8]
 800ad3c:	9d01      	ldr	r5, [sp, #4]
 800ad3e:	ee18 0a10 	vmov	r0, s16
 800ad42:	4631      	mov	r1, r6
 800ad44:	f7ff f9dc 	bl	800a100 <quorem>
 800ad48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	f805 ab01 	strb.w	sl, [r5], #1
 800ad52:	1aea      	subs	r2, r5, r3
 800ad54:	9b02      	ldr	r3, [sp, #8]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	dd09      	ble.n	800ad6e <_dtoa_r+0xb56>
 800ad5a:	ee18 1a10 	vmov	r1, s16
 800ad5e:	2300      	movs	r3, #0
 800ad60:	220a      	movs	r2, #10
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 f8c2 	bl	800aeec <__multadd>
 800ad68:	ee08 0a10 	vmov	s16, r0
 800ad6c:	e7e7      	b.n	800ad3e <_dtoa_r+0xb26>
 800ad6e:	9b02      	ldr	r3, [sp, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	bfc8      	it	gt
 800ad74:	461d      	movgt	r5, r3
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	bfd8      	it	le
 800ad7a:	2501      	movle	r5, #1
 800ad7c:	441d      	add	r5, r3
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	ee18 1a10 	vmov	r1, s16
 800ad86:	2201      	movs	r2, #1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fa5f 	bl	800b24c <__lshift>
 800ad8e:	4631      	mov	r1, r6
 800ad90:	ee08 0a10 	vmov	s16, r0
 800ad94:	f000 faca 	bl	800b32c <__mcmp>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dc91      	bgt.n	800acc0 <_dtoa_r+0xaa8>
 800ad9c:	d102      	bne.n	800ada4 <_dtoa_r+0xb8c>
 800ad9e:	f01a 0f01 	tst.w	sl, #1
 800ada2:	d18d      	bne.n	800acc0 <_dtoa_r+0xaa8>
 800ada4:	462b      	mov	r3, r5
 800ada6:	461d      	mov	r5, r3
 800ada8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adac:	2a30      	cmp	r2, #48	; 0x30
 800adae:	d0fa      	beq.n	800ada6 <_dtoa_r+0xb8e>
 800adb0:	e6d7      	b.n	800ab62 <_dtoa_r+0x94a>
 800adb2:	9a01      	ldr	r2, [sp, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d184      	bne.n	800acc2 <_dtoa_r+0xaaa>
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	2331      	movs	r3, #49	; 0x31
 800adc0:	7013      	strb	r3, [r2, #0]
 800adc2:	e6ce      	b.n	800ab62 <_dtoa_r+0x94a>
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <_dtoa_r+0xbd4>)
 800adc6:	f7ff ba95 	b.w	800a2f4 <_dtoa_r+0xdc>
 800adca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f47f aa6e 	bne.w	800a2ae <_dtoa_r+0x96>
 800add2:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <_dtoa_r+0xbd8>)
 800add4:	f7ff ba8e 	b.w	800a2f4 <_dtoa_r+0xdc>
 800add8:	9b02      	ldr	r3, [sp, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	dcae      	bgt.n	800ad3c <_dtoa_r+0xb24>
 800adde:	9b06      	ldr	r3, [sp, #24]
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	f73f aea8 	bgt.w	800ab36 <_dtoa_r+0x91e>
 800ade6:	e7a9      	b.n	800ad3c <_dtoa_r+0xb24>
 800ade8:	0800dbd7 	.word	0x0800dbd7
 800adec:	0800db34 	.word	0x0800db34
 800adf0:	0800db58 	.word	0x0800db58

0800adf4 <_localeconv_r>:
 800adf4:	4800      	ldr	r0, [pc, #0]	; (800adf8 <_localeconv_r+0x4>)
 800adf6:	4770      	bx	lr
 800adf8:	200001b4 	.word	0x200001b4

0800adfc <malloc>:
 800adfc:	4b02      	ldr	r3, [pc, #8]	; (800ae08 <malloc+0xc>)
 800adfe:	4601      	mov	r1, r0
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	f000 bc17 	b.w	800b634 <_malloc_r>
 800ae06:	bf00      	nop
 800ae08:	20000060 	.word	0x20000060

0800ae0c <memcpy>:
 800ae0c:	440a      	add	r2, r1
 800ae0e:	4291      	cmp	r1, r2
 800ae10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae14:	d100      	bne.n	800ae18 <memcpy+0xc>
 800ae16:	4770      	bx	lr
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae22:	4291      	cmp	r1, r2
 800ae24:	d1f9      	bne.n	800ae1a <memcpy+0xe>
 800ae26:	bd10      	pop	{r4, pc}

0800ae28 <_Balloc>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	b976      	cbnz	r6, 800ae50 <_Balloc+0x28>
 800ae32:	2010      	movs	r0, #16
 800ae34:	f7ff ffe2 	bl	800adfc <malloc>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae3c:	b920      	cbnz	r0, 800ae48 <_Balloc+0x20>
 800ae3e:	4b18      	ldr	r3, [pc, #96]	; (800aea0 <_Balloc+0x78>)
 800ae40:	4818      	ldr	r0, [pc, #96]	; (800aea4 <_Balloc+0x7c>)
 800ae42:	2166      	movs	r1, #102	; 0x66
 800ae44:	f000 fdd6 	bl	800b9f4 <__assert_func>
 800ae48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae4c:	6006      	str	r6, [r0, #0]
 800ae4e:	60c6      	str	r6, [r0, #12]
 800ae50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae52:	68f3      	ldr	r3, [r6, #12]
 800ae54:	b183      	cbz	r3, 800ae78 <_Balloc+0x50>
 800ae56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae5e:	b9b8      	cbnz	r0, 800ae90 <_Balloc+0x68>
 800ae60:	2101      	movs	r1, #1
 800ae62:	fa01 f605 	lsl.w	r6, r1, r5
 800ae66:	1d72      	adds	r2, r6, #5
 800ae68:	0092      	lsls	r2, r2, #2
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 fb60 	bl	800b530 <_calloc_r>
 800ae70:	b160      	cbz	r0, 800ae8c <_Balloc+0x64>
 800ae72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae76:	e00e      	b.n	800ae96 <_Balloc+0x6e>
 800ae78:	2221      	movs	r2, #33	; 0x21
 800ae7a:	2104      	movs	r1, #4
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 fb57 	bl	800b530 <_calloc_r>
 800ae82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae84:	60f0      	str	r0, [r6, #12]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e4      	bne.n	800ae56 <_Balloc+0x2e>
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	6802      	ldr	r2, [r0, #0]
 800ae92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae96:	2300      	movs	r3, #0
 800ae98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae9c:	e7f7      	b.n	800ae8e <_Balloc+0x66>
 800ae9e:	bf00      	nop
 800aea0:	0800db65 	.word	0x0800db65
 800aea4:	0800dbe8 	.word	0x0800dbe8

0800aea8 <_Bfree>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aeac:	4605      	mov	r5, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	b976      	cbnz	r6, 800aed0 <_Bfree+0x28>
 800aeb2:	2010      	movs	r0, #16
 800aeb4:	f7ff ffa2 	bl	800adfc <malloc>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	6268      	str	r0, [r5, #36]	; 0x24
 800aebc:	b920      	cbnz	r0, 800aec8 <_Bfree+0x20>
 800aebe:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <_Bfree+0x3c>)
 800aec0:	4809      	ldr	r0, [pc, #36]	; (800aee8 <_Bfree+0x40>)
 800aec2:	218a      	movs	r1, #138	; 0x8a
 800aec4:	f000 fd96 	bl	800b9f4 <__assert_func>
 800aec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aecc:	6006      	str	r6, [r0, #0]
 800aece:	60c6      	str	r6, [r0, #12]
 800aed0:	b13c      	cbz	r4, 800aee2 <_Bfree+0x3a>
 800aed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aed4:	6862      	ldr	r2, [r4, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aedc:	6021      	str	r1, [r4, #0]
 800aede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	0800db65 	.word	0x0800db65
 800aee8:	0800dbe8 	.word	0x0800dbe8

0800aeec <__multadd>:
 800aeec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef0:	690d      	ldr	r5, [r1, #16]
 800aef2:	4607      	mov	r7, r0
 800aef4:	460c      	mov	r4, r1
 800aef6:	461e      	mov	r6, r3
 800aef8:	f101 0c14 	add.w	ip, r1, #20
 800aefc:	2000      	movs	r0, #0
 800aefe:	f8dc 3000 	ldr.w	r3, [ip]
 800af02:	b299      	uxth	r1, r3
 800af04:	fb02 6101 	mla	r1, r2, r1, r6
 800af08:	0c1e      	lsrs	r6, r3, #16
 800af0a:	0c0b      	lsrs	r3, r1, #16
 800af0c:	fb02 3306 	mla	r3, r2, r6, r3
 800af10:	b289      	uxth	r1, r1
 800af12:	3001      	adds	r0, #1
 800af14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af18:	4285      	cmp	r5, r0
 800af1a:	f84c 1b04 	str.w	r1, [ip], #4
 800af1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af22:	dcec      	bgt.n	800aefe <__multadd+0x12>
 800af24:	b30e      	cbz	r6, 800af6a <__multadd+0x7e>
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	42ab      	cmp	r3, r5
 800af2a:	dc19      	bgt.n	800af60 <__multadd+0x74>
 800af2c:	6861      	ldr	r1, [r4, #4]
 800af2e:	4638      	mov	r0, r7
 800af30:	3101      	adds	r1, #1
 800af32:	f7ff ff79 	bl	800ae28 <_Balloc>
 800af36:	4680      	mov	r8, r0
 800af38:	b928      	cbnz	r0, 800af46 <__multadd+0x5a>
 800af3a:	4602      	mov	r2, r0
 800af3c:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <__multadd+0x84>)
 800af3e:	480d      	ldr	r0, [pc, #52]	; (800af74 <__multadd+0x88>)
 800af40:	21b5      	movs	r1, #181	; 0xb5
 800af42:	f000 fd57 	bl	800b9f4 <__assert_func>
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	3202      	adds	r2, #2
 800af4a:	f104 010c 	add.w	r1, r4, #12
 800af4e:	0092      	lsls	r2, r2, #2
 800af50:	300c      	adds	r0, #12
 800af52:	f7ff ff5b 	bl	800ae0c <memcpy>
 800af56:	4621      	mov	r1, r4
 800af58:	4638      	mov	r0, r7
 800af5a:	f7ff ffa5 	bl	800aea8 <_Bfree>
 800af5e:	4644      	mov	r4, r8
 800af60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af64:	3501      	adds	r5, #1
 800af66:	615e      	str	r6, [r3, #20]
 800af68:	6125      	str	r5, [r4, #16]
 800af6a:	4620      	mov	r0, r4
 800af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af70:	0800dbd7 	.word	0x0800dbd7
 800af74:	0800dbe8 	.word	0x0800dbe8

0800af78 <__hi0bits>:
 800af78:	0c03      	lsrs	r3, r0, #16
 800af7a:	041b      	lsls	r3, r3, #16
 800af7c:	b9d3      	cbnz	r3, 800afb4 <__hi0bits+0x3c>
 800af7e:	0400      	lsls	r0, r0, #16
 800af80:	2310      	movs	r3, #16
 800af82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af86:	bf04      	itt	eq
 800af88:	0200      	lsleq	r0, r0, #8
 800af8a:	3308      	addeq	r3, #8
 800af8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af90:	bf04      	itt	eq
 800af92:	0100      	lsleq	r0, r0, #4
 800af94:	3304      	addeq	r3, #4
 800af96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af9a:	bf04      	itt	eq
 800af9c:	0080      	lsleq	r0, r0, #2
 800af9e:	3302      	addeq	r3, #2
 800afa0:	2800      	cmp	r0, #0
 800afa2:	db05      	blt.n	800afb0 <__hi0bits+0x38>
 800afa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afa8:	f103 0301 	add.w	r3, r3, #1
 800afac:	bf08      	it	eq
 800afae:	2320      	moveq	r3, #32
 800afb0:	4618      	mov	r0, r3
 800afb2:	4770      	bx	lr
 800afb4:	2300      	movs	r3, #0
 800afb6:	e7e4      	b.n	800af82 <__hi0bits+0xa>

0800afb8 <__lo0bits>:
 800afb8:	6803      	ldr	r3, [r0, #0]
 800afba:	f013 0207 	ands.w	r2, r3, #7
 800afbe:	4601      	mov	r1, r0
 800afc0:	d00b      	beq.n	800afda <__lo0bits+0x22>
 800afc2:	07da      	lsls	r2, r3, #31
 800afc4:	d423      	bmi.n	800b00e <__lo0bits+0x56>
 800afc6:	0798      	lsls	r0, r3, #30
 800afc8:	bf49      	itett	mi
 800afca:	085b      	lsrmi	r3, r3, #1
 800afcc:	089b      	lsrpl	r3, r3, #2
 800afce:	2001      	movmi	r0, #1
 800afd0:	600b      	strmi	r3, [r1, #0]
 800afd2:	bf5c      	itt	pl
 800afd4:	600b      	strpl	r3, [r1, #0]
 800afd6:	2002      	movpl	r0, #2
 800afd8:	4770      	bx	lr
 800afda:	b298      	uxth	r0, r3
 800afdc:	b9a8      	cbnz	r0, 800b00a <__lo0bits+0x52>
 800afde:	0c1b      	lsrs	r3, r3, #16
 800afe0:	2010      	movs	r0, #16
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	b90a      	cbnz	r2, 800afea <__lo0bits+0x32>
 800afe6:	3008      	adds	r0, #8
 800afe8:	0a1b      	lsrs	r3, r3, #8
 800afea:	071a      	lsls	r2, r3, #28
 800afec:	bf04      	itt	eq
 800afee:	091b      	lsreq	r3, r3, #4
 800aff0:	3004      	addeq	r0, #4
 800aff2:	079a      	lsls	r2, r3, #30
 800aff4:	bf04      	itt	eq
 800aff6:	089b      	lsreq	r3, r3, #2
 800aff8:	3002      	addeq	r0, #2
 800affa:	07da      	lsls	r2, r3, #31
 800affc:	d403      	bmi.n	800b006 <__lo0bits+0x4e>
 800affe:	085b      	lsrs	r3, r3, #1
 800b000:	f100 0001 	add.w	r0, r0, #1
 800b004:	d005      	beq.n	800b012 <__lo0bits+0x5a>
 800b006:	600b      	str	r3, [r1, #0]
 800b008:	4770      	bx	lr
 800b00a:	4610      	mov	r0, r2
 800b00c:	e7e9      	b.n	800afe2 <__lo0bits+0x2a>
 800b00e:	2000      	movs	r0, #0
 800b010:	4770      	bx	lr
 800b012:	2020      	movs	r0, #32
 800b014:	4770      	bx	lr
	...

0800b018 <__i2b>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	460c      	mov	r4, r1
 800b01c:	2101      	movs	r1, #1
 800b01e:	f7ff ff03 	bl	800ae28 <_Balloc>
 800b022:	4602      	mov	r2, r0
 800b024:	b928      	cbnz	r0, 800b032 <__i2b+0x1a>
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <__i2b+0x24>)
 800b028:	4805      	ldr	r0, [pc, #20]	; (800b040 <__i2b+0x28>)
 800b02a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b02e:	f000 fce1 	bl	800b9f4 <__assert_func>
 800b032:	2301      	movs	r3, #1
 800b034:	6144      	str	r4, [r0, #20]
 800b036:	6103      	str	r3, [r0, #16]
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	bf00      	nop
 800b03c:	0800dbd7 	.word	0x0800dbd7
 800b040:	0800dbe8 	.word	0x0800dbe8

0800b044 <__multiply>:
 800b044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	4691      	mov	r9, r2
 800b04a:	690a      	ldr	r2, [r1, #16]
 800b04c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b050:	429a      	cmp	r2, r3
 800b052:	bfb8      	it	lt
 800b054:	460b      	movlt	r3, r1
 800b056:	460c      	mov	r4, r1
 800b058:	bfbc      	itt	lt
 800b05a:	464c      	movlt	r4, r9
 800b05c:	4699      	movlt	r9, r3
 800b05e:	6927      	ldr	r7, [r4, #16]
 800b060:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b064:	68a3      	ldr	r3, [r4, #8]
 800b066:	6861      	ldr	r1, [r4, #4]
 800b068:	eb07 060a 	add.w	r6, r7, sl
 800b06c:	42b3      	cmp	r3, r6
 800b06e:	b085      	sub	sp, #20
 800b070:	bfb8      	it	lt
 800b072:	3101      	addlt	r1, #1
 800b074:	f7ff fed8 	bl	800ae28 <_Balloc>
 800b078:	b930      	cbnz	r0, 800b088 <__multiply+0x44>
 800b07a:	4602      	mov	r2, r0
 800b07c:	4b44      	ldr	r3, [pc, #272]	; (800b190 <__multiply+0x14c>)
 800b07e:	4845      	ldr	r0, [pc, #276]	; (800b194 <__multiply+0x150>)
 800b080:	f240 115d 	movw	r1, #349	; 0x15d
 800b084:	f000 fcb6 	bl	800b9f4 <__assert_func>
 800b088:	f100 0514 	add.w	r5, r0, #20
 800b08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b090:	462b      	mov	r3, r5
 800b092:	2200      	movs	r2, #0
 800b094:	4543      	cmp	r3, r8
 800b096:	d321      	bcc.n	800b0dc <__multiply+0x98>
 800b098:	f104 0314 	add.w	r3, r4, #20
 800b09c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0a0:	f109 0314 	add.w	r3, r9, #20
 800b0a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0a8:	9202      	str	r2, [sp, #8]
 800b0aa:	1b3a      	subs	r2, r7, r4
 800b0ac:	3a15      	subs	r2, #21
 800b0ae:	f022 0203 	bic.w	r2, r2, #3
 800b0b2:	3204      	adds	r2, #4
 800b0b4:	f104 0115 	add.w	r1, r4, #21
 800b0b8:	428f      	cmp	r7, r1
 800b0ba:	bf38      	it	cc
 800b0bc:	2204      	movcc	r2, #4
 800b0be:	9201      	str	r2, [sp, #4]
 800b0c0:	9a02      	ldr	r2, [sp, #8]
 800b0c2:	9303      	str	r3, [sp, #12]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d80c      	bhi.n	800b0e2 <__multiply+0x9e>
 800b0c8:	2e00      	cmp	r6, #0
 800b0ca:	dd03      	ble.n	800b0d4 <__multiply+0x90>
 800b0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d05a      	beq.n	800b18a <__multiply+0x146>
 800b0d4:	6106      	str	r6, [r0, #16]
 800b0d6:	b005      	add	sp, #20
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	f843 2b04 	str.w	r2, [r3], #4
 800b0e0:	e7d8      	b.n	800b094 <__multiply+0x50>
 800b0e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0e6:	f1ba 0f00 	cmp.w	sl, #0
 800b0ea:	d024      	beq.n	800b136 <__multiply+0xf2>
 800b0ec:	f104 0e14 	add.w	lr, r4, #20
 800b0f0:	46a9      	mov	r9, r5
 800b0f2:	f04f 0c00 	mov.w	ip, #0
 800b0f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0fa:	f8d9 1000 	ldr.w	r1, [r9]
 800b0fe:	fa1f fb82 	uxth.w	fp, r2
 800b102:	b289      	uxth	r1, r1
 800b104:	fb0a 110b 	mla	r1, sl, fp, r1
 800b108:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b10c:	f8d9 2000 	ldr.w	r2, [r9]
 800b110:	4461      	add	r1, ip
 800b112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b116:	fb0a c20b 	mla	r2, sl, fp, ip
 800b11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b11e:	b289      	uxth	r1, r1
 800b120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b124:	4577      	cmp	r7, lr
 800b126:	f849 1b04 	str.w	r1, [r9], #4
 800b12a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b12e:	d8e2      	bhi.n	800b0f6 <__multiply+0xb2>
 800b130:	9a01      	ldr	r2, [sp, #4]
 800b132:	f845 c002 	str.w	ip, [r5, r2]
 800b136:	9a03      	ldr	r2, [sp, #12]
 800b138:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b13c:	3304      	adds	r3, #4
 800b13e:	f1b9 0f00 	cmp.w	r9, #0
 800b142:	d020      	beq.n	800b186 <__multiply+0x142>
 800b144:	6829      	ldr	r1, [r5, #0]
 800b146:	f104 0c14 	add.w	ip, r4, #20
 800b14a:	46ae      	mov	lr, r5
 800b14c:	f04f 0a00 	mov.w	sl, #0
 800b150:	f8bc b000 	ldrh.w	fp, [ip]
 800b154:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b158:	fb09 220b 	mla	r2, r9, fp, r2
 800b15c:	4492      	add	sl, r2
 800b15e:	b289      	uxth	r1, r1
 800b160:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b164:	f84e 1b04 	str.w	r1, [lr], #4
 800b168:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b16c:	f8be 1000 	ldrh.w	r1, [lr]
 800b170:	0c12      	lsrs	r2, r2, #16
 800b172:	fb09 1102 	mla	r1, r9, r2, r1
 800b176:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b17a:	4567      	cmp	r7, ip
 800b17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b180:	d8e6      	bhi.n	800b150 <__multiply+0x10c>
 800b182:	9a01      	ldr	r2, [sp, #4]
 800b184:	50a9      	str	r1, [r5, r2]
 800b186:	3504      	adds	r5, #4
 800b188:	e79a      	b.n	800b0c0 <__multiply+0x7c>
 800b18a:	3e01      	subs	r6, #1
 800b18c:	e79c      	b.n	800b0c8 <__multiply+0x84>
 800b18e:	bf00      	nop
 800b190:	0800dbd7 	.word	0x0800dbd7
 800b194:	0800dbe8 	.word	0x0800dbe8

0800b198 <__pow5mult>:
 800b198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b19c:	4615      	mov	r5, r2
 800b19e:	f012 0203 	ands.w	r2, r2, #3
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	460f      	mov	r7, r1
 800b1a6:	d007      	beq.n	800b1b8 <__pow5mult+0x20>
 800b1a8:	4c25      	ldr	r4, [pc, #148]	; (800b240 <__pow5mult+0xa8>)
 800b1aa:	3a01      	subs	r2, #1
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1b2:	f7ff fe9b 	bl	800aeec <__multadd>
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	10ad      	asrs	r5, r5, #2
 800b1ba:	d03d      	beq.n	800b238 <__pow5mult+0xa0>
 800b1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1be:	b97c      	cbnz	r4, 800b1e0 <__pow5mult+0x48>
 800b1c0:	2010      	movs	r0, #16
 800b1c2:	f7ff fe1b 	bl	800adfc <malloc>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	6270      	str	r0, [r6, #36]	; 0x24
 800b1ca:	b928      	cbnz	r0, 800b1d8 <__pow5mult+0x40>
 800b1cc:	4b1d      	ldr	r3, [pc, #116]	; (800b244 <__pow5mult+0xac>)
 800b1ce:	481e      	ldr	r0, [pc, #120]	; (800b248 <__pow5mult+0xb0>)
 800b1d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1d4:	f000 fc0e 	bl	800b9f4 <__assert_func>
 800b1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1dc:	6004      	str	r4, [r0, #0]
 800b1de:	60c4      	str	r4, [r0, #12]
 800b1e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1e8:	b94c      	cbnz	r4, 800b1fe <__pow5mult+0x66>
 800b1ea:	f240 2171 	movw	r1, #625	; 0x271
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7ff ff12 	bl	800b018 <__i2b>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	6003      	str	r3, [r0, #0]
 800b1fe:	f04f 0900 	mov.w	r9, #0
 800b202:	07eb      	lsls	r3, r5, #31
 800b204:	d50a      	bpl.n	800b21c <__pow5mult+0x84>
 800b206:	4639      	mov	r1, r7
 800b208:	4622      	mov	r2, r4
 800b20a:	4630      	mov	r0, r6
 800b20c:	f7ff ff1a 	bl	800b044 <__multiply>
 800b210:	4639      	mov	r1, r7
 800b212:	4680      	mov	r8, r0
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff fe47 	bl	800aea8 <_Bfree>
 800b21a:	4647      	mov	r7, r8
 800b21c:	106d      	asrs	r5, r5, #1
 800b21e:	d00b      	beq.n	800b238 <__pow5mult+0xa0>
 800b220:	6820      	ldr	r0, [r4, #0]
 800b222:	b938      	cbnz	r0, 800b234 <__pow5mult+0x9c>
 800b224:	4622      	mov	r2, r4
 800b226:	4621      	mov	r1, r4
 800b228:	4630      	mov	r0, r6
 800b22a:	f7ff ff0b 	bl	800b044 <__multiply>
 800b22e:	6020      	str	r0, [r4, #0]
 800b230:	f8c0 9000 	str.w	r9, [r0]
 800b234:	4604      	mov	r4, r0
 800b236:	e7e4      	b.n	800b202 <__pow5mult+0x6a>
 800b238:	4638      	mov	r0, r7
 800b23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23e:	bf00      	nop
 800b240:	0800dd38 	.word	0x0800dd38
 800b244:	0800db65 	.word	0x0800db65
 800b248:	0800dbe8 	.word	0x0800dbe8

0800b24c <__lshift>:
 800b24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	460c      	mov	r4, r1
 800b252:	6849      	ldr	r1, [r1, #4]
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b25a:	68a3      	ldr	r3, [r4, #8]
 800b25c:	4607      	mov	r7, r0
 800b25e:	4691      	mov	r9, r2
 800b260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b264:	f108 0601 	add.w	r6, r8, #1
 800b268:	42b3      	cmp	r3, r6
 800b26a:	db0b      	blt.n	800b284 <__lshift+0x38>
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff fddb 	bl	800ae28 <_Balloc>
 800b272:	4605      	mov	r5, r0
 800b274:	b948      	cbnz	r0, 800b28a <__lshift+0x3e>
 800b276:	4602      	mov	r2, r0
 800b278:	4b2a      	ldr	r3, [pc, #168]	; (800b324 <__lshift+0xd8>)
 800b27a:	482b      	ldr	r0, [pc, #172]	; (800b328 <__lshift+0xdc>)
 800b27c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b280:	f000 fbb8 	bl	800b9f4 <__assert_func>
 800b284:	3101      	adds	r1, #1
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	e7ee      	b.n	800b268 <__lshift+0x1c>
 800b28a:	2300      	movs	r3, #0
 800b28c:	f100 0114 	add.w	r1, r0, #20
 800b290:	f100 0210 	add.w	r2, r0, #16
 800b294:	4618      	mov	r0, r3
 800b296:	4553      	cmp	r3, sl
 800b298:	db37      	blt.n	800b30a <__lshift+0xbe>
 800b29a:	6920      	ldr	r0, [r4, #16]
 800b29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2a0:	f104 0314 	add.w	r3, r4, #20
 800b2a4:	f019 091f 	ands.w	r9, r9, #31
 800b2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2b0:	d02f      	beq.n	800b312 <__lshift+0xc6>
 800b2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2b6:	468a      	mov	sl, r1
 800b2b8:	f04f 0c00 	mov.w	ip, #0
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	fa02 f209 	lsl.w	r2, r2, r9
 800b2c2:	ea42 020c 	orr.w	r2, r2, ip
 800b2c6:	f84a 2b04 	str.w	r2, [sl], #4
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	4298      	cmp	r0, r3
 800b2d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b2d4:	d8f2      	bhi.n	800b2bc <__lshift+0x70>
 800b2d6:	1b03      	subs	r3, r0, r4
 800b2d8:	3b15      	subs	r3, #21
 800b2da:	f023 0303 	bic.w	r3, r3, #3
 800b2de:	3304      	adds	r3, #4
 800b2e0:	f104 0215 	add.w	r2, r4, #21
 800b2e4:	4290      	cmp	r0, r2
 800b2e6:	bf38      	it	cc
 800b2e8:	2304      	movcc	r3, #4
 800b2ea:	f841 c003 	str.w	ip, [r1, r3]
 800b2ee:	f1bc 0f00 	cmp.w	ip, #0
 800b2f2:	d001      	beq.n	800b2f8 <__lshift+0xac>
 800b2f4:	f108 0602 	add.w	r6, r8, #2
 800b2f8:	3e01      	subs	r6, #1
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	612e      	str	r6, [r5, #16]
 800b2fe:	4621      	mov	r1, r4
 800b300:	f7ff fdd2 	bl	800aea8 <_Bfree>
 800b304:	4628      	mov	r0, r5
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b30e:	3301      	adds	r3, #1
 800b310:	e7c1      	b.n	800b296 <__lshift+0x4a>
 800b312:	3904      	subs	r1, #4
 800b314:	f853 2b04 	ldr.w	r2, [r3], #4
 800b318:	f841 2f04 	str.w	r2, [r1, #4]!
 800b31c:	4298      	cmp	r0, r3
 800b31e:	d8f9      	bhi.n	800b314 <__lshift+0xc8>
 800b320:	e7ea      	b.n	800b2f8 <__lshift+0xac>
 800b322:	bf00      	nop
 800b324:	0800dbd7 	.word	0x0800dbd7
 800b328:	0800dbe8 	.word	0x0800dbe8

0800b32c <__mcmp>:
 800b32c:	b530      	push	{r4, r5, lr}
 800b32e:	6902      	ldr	r2, [r0, #16]
 800b330:	690c      	ldr	r4, [r1, #16]
 800b332:	1b12      	subs	r2, r2, r4
 800b334:	d10e      	bne.n	800b354 <__mcmp+0x28>
 800b336:	f100 0314 	add.w	r3, r0, #20
 800b33a:	3114      	adds	r1, #20
 800b33c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b340:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b344:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b348:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b34c:	42a5      	cmp	r5, r4
 800b34e:	d003      	beq.n	800b358 <__mcmp+0x2c>
 800b350:	d305      	bcc.n	800b35e <__mcmp+0x32>
 800b352:	2201      	movs	r2, #1
 800b354:	4610      	mov	r0, r2
 800b356:	bd30      	pop	{r4, r5, pc}
 800b358:	4283      	cmp	r3, r0
 800b35a:	d3f3      	bcc.n	800b344 <__mcmp+0x18>
 800b35c:	e7fa      	b.n	800b354 <__mcmp+0x28>
 800b35e:	f04f 32ff 	mov.w	r2, #4294967295
 800b362:	e7f7      	b.n	800b354 <__mcmp+0x28>

0800b364 <__mdiff>:
 800b364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b368:	460c      	mov	r4, r1
 800b36a:	4606      	mov	r6, r0
 800b36c:	4611      	mov	r1, r2
 800b36e:	4620      	mov	r0, r4
 800b370:	4690      	mov	r8, r2
 800b372:	f7ff ffdb 	bl	800b32c <__mcmp>
 800b376:	1e05      	subs	r5, r0, #0
 800b378:	d110      	bne.n	800b39c <__mdiff+0x38>
 800b37a:	4629      	mov	r1, r5
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff fd53 	bl	800ae28 <_Balloc>
 800b382:	b930      	cbnz	r0, 800b392 <__mdiff+0x2e>
 800b384:	4b3a      	ldr	r3, [pc, #232]	; (800b470 <__mdiff+0x10c>)
 800b386:	4602      	mov	r2, r0
 800b388:	f240 2132 	movw	r1, #562	; 0x232
 800b38c:	4839      	ldr	r0, [pc, #228]	; (800b474 <__mdiff+0x110>)
 800b38e:	f000 fb31 	bl	800b9f4 <__assert_func>
 800b392:	2301      	movs	r3, #1
 800b394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	bfa4      	itt	ge
 800b39e:	4643      	movge	r3, r8
 800b3a0:	46a0      	movge	r8, r4
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3a8:	bfa6      	itte	ge
 800b3aa:	461c      	movge	r4, r3
 800b3ac:	2500      	movge	r5, #0
 800b3ae:	2501      	movlt	r5, #1
 800b3b0:	f7ff fd3a 	bl	800ae28 <_Balloc>
 800b3b4:	b920      	cbnz	r0, 800b3c0 <__mdiff+0x5c>
 800b3b6:	4b2e      	ldr	r3, [pc, #184]	; (800b470 <__mdiff+0x10c>)
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3be:	e7e5      	b.n	800b38c <__mdiff+0x28>
 800b3c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3c4:	6926      	ldr	r6, [r4, #16]
 800b3c6:	60c5      	str	r5, [r0, #12]
 800b3c8:	f104 0914 	add.w	r9, r4, #20
 800b3cc:	f108 0514 	add.w	r5, r8, #20
 800b3d0:	f100 0e14 	add.w	lr, r0, #20
 800b3d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3dc:	f108 0210 	add.w	r2, r8, #16
 800b3e0:	46f2      	mov	sl, lr
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3ec:	fa1f f883 	uxth.w	r8, r3
 800b3f0:	fa11 f18b 	uxtah	r1, r1, fp
 800b3f4:	0c1b      	lsrs	r3, r3, #16
 800b3f6:	eba1 0808 	sub.w	r8, r1, r8
 800b3fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b402:	fa1f f888 	uxth.w	r8, r8
 800b406:	1419      	asrs	r1, r3, #16
 800b408:	454e      	cmp	r6, r9
 800b40a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b40e:	f84a 3b04 	str.w	r3, [sl], #4
 800b412:	d8e7      	bhi.n	800b3e4 <__mdiff+0x80>
 800b414:	1b33      	subs	r3, r6, r4
 800b416:	3b15      	subs	r3, #21
 800b418:	f023 0303 	bic.w	r3, r3, #3
 800b41c:	3304      	adds	r3, #4
 800b41e:	3415      	adds	r4, #21
 800b420:	42a6      	cmp	r6, r4
 800b422:	bf38      	it	cc
 800b424:	2304      	movcc	r3, #4
 800b426:	441d      	add	r5, r3
 800b428:	4473      	add	r3, lr
 800b42a:	469e      	mov	lr, r3
 800b42c:	462e      	mov	r6, r5
 800b42e:	4566      	cmp	r6, ip
 800b430:	d30e      	bcc.n	800b450 <__mdiff+0xec>
 800b432:	f10c 0203 	add.w	r2, ip, #3
 800b436:	1b52      	subs	r2, r2, r5
 800b438:	f022 0203 	bic.w	r2, r2, #3
 800b43c:	3d03      	subs	r5, #3
 800b43e:	45ac      	cmp	ip, r5
 800b440:	bf38      	it	cc
 800b442:	2200      	movcc	r2, #0
 800b444:	441a      	add	r2, r3
 800b446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b44a:	b17b      	cbz	r3, 800b46c <__mdiff+0x108>
 800b44c:	6107      	str	r7, [r0, #16]
 800b44e:	e7a3      	b.n	800b398 <__mdiff+0x34>
 800b450:	f856 8b04 	ldr.w	r8, [r6], #4
 800b454:	fa11 f288 	uxtah	r2, r1, r8
 800b458:	1414      	asrs	r4, r2, #16
 800b45a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b45e:	b292      	uxth	r2, r2
 800b460:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b464:	f84e 2b04 	str.w	r2, [lr], #4
 800b468:	1421      	asrs	r1, r4, #16
 800b46a:	e7e0      	b.n	800b42e <__mdiff+0xca>
 800b46c:	3f01      	subs	r7, #1
 800b46e:	e7ea      	b.n	800b446 <__mdiff+0xe2>
 800b470:	0800dbd7 	.word	0x0800dbd7
 800b474:	0800dbe8 	.word	0x0800dbe8

0800b478 <__d2b>:
 800b478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b47c:	4689      	mov	r9, r1
 800b47e:	2101      	movs	r1, #1
 800b480:	ec57 6b10 	vmov	r6, r7, d0
 800b484:	4690      	mov	r8, r2
 800b486:	f7ff fccf 	bl	800ae28 <_Balloc>
 800b48a:	4604      	mov	r4, r0
 800b48c:	b930      	cbnz	r0, 800b49c <__d2b+0x24>
 800b48e:	4602      	mov	r2, r0
 800b490:	4b25      	ldr	r3, [pc, #148]	; (800b528 <__d2b+0xb0>)
 800b492:	4826      	ldr	r0, [pc, #152]	; (800b52c <__d2b+0xb4>)
 800b494:	f240 310a 	movw	r1, #778	; 0x30a
 800b498:	f000 faac 	bl	800b9f4 <__assert_func>
 800b49c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4a4:	bb35      	cbnz	r5, 800b4f4 <__d2b+0x7c>
 800b4a6:	2e00      	cmp	r6, #0
 800b4a8:	9301      	str	r3, [sp, #4]
 800b4aa:	d028      	beq.n	800b4fe <__d2b+0x86>
 800b4ac:	4668      	mov	r0, sp
 800b4ae:	9600      	str	r6, [sp, #0]
 800b4b0:	f7ff fd82 	bl	800afb8 <__lo0bits>
 800b4b4:	9900      	ldr	r1, [sp, #0]
 800b4b6:	b300      	cbz	r0, 800b4fa <__d2b+0x82>
 800b4b8:	9a01      	ldr	r2, [sp, #4]
 800b4ba:	f1c0 0320 	rsb	r3, r0, #32
 800b4be:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c2:	430b      	orrs	r3, r1
 800b4c4:	40c2      	lsrs	r2, r0
 800b4c6:	6163      	str	r3, [r4, #20]
 800b4c8:	9201      	str	r2, [sp, #4]
 800b4ca:	9b01      	ldr	r3, [sp, #4]
 800b4cc:	61a3      	str	r3, [r4, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	bf14      	ite	ne
 800b4d2:	2202      	movne	r2, #2
 800b4d4:	2201      	moveq	r2, #1
 800b4d6:	6122      	str	r2, [r4, #16]
 800b4d8:	b1d5      	cbz	r5, 800b510 <__d2b+0x98>
 800b4da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4de:	4405      	add	r5, r0
 800b4e0:	f8c9 5000 	str.w	r5, [r9]
 800b4e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4e8:	f8c8 0000 	str.w	r0, [r8]
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	b003      	add	sp, #12
 800b4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4f8:	e7d5      	b.n	800b4a6 <__d2b+0x2e>
 800b4fa:	6161      	str	r1, [r4, #20]
 800b4fc:	e7e5      	b.n	800b4ca <__d2b+0x52>
 800b4fe:	a801      	add	r0, sp, #4
 800b500:	f7ff fd5a 	bl	800afb8 <__lo0bits>
 800b504:	9b01      	ldr	r3, [sp, #4]
 800b506:	6163      	str	r3, [r4, #20]
 800b508:	2201      	movs	r2, #1
 800b50a:	6122      	str	r2, [r4, #16]
 800b50c:	3020      	adds	r0, #32
 800b50e:	e7e3      	b.n	800b4d8 <__d2b+0x60>
 800b510:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b514:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b518:	f8c9 0000 	str.w	r0, [r9]
 800b51c:	6918      	ldr	r0, [r3, #16]
 800b51e:	f7ff fd2b 	bl	800af78 <__hi0bits>
 800b522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b526:	e7df      	b.n	800b4e8 <__d2b+0x70>
 800b528:	0800dbd7 	.word	0x0800dbd7
 800b52c:	0800dbe8 	.word	0x0800dbe8

0800b530 <_calloc_r>:
 800b530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b532:	fba1 2402 	umull	r2, r4, r1, r2
 800b536:	b94c      	cbnz	r4, 800b54c <_calloc_r+0x1c>
 800b538:	4611      	mov	r1, r2
 800b53a:	9201      	str	r2, [sp, #4]
 800b53c:	f000 f87a 	bl	800b634 <_malloc_r>
 800b540:	9a01      	ldr	r2, [sp, #4]
 800b542:	4605      	mov	r5, r0
 800b544:	b930      	cbnz	r0, 800b554 <_calloc_r+0x24>
 800b546:	4628      	mov	r0, r5
 800b548:	b003      	add	sp, #12
 800b54a:	bd30      	pop	{r4, r5, pc}
 800b54c:	220c      	movs	r2, #12
 800b54e:	6002      	str	r2, [r0, #0]
 800b550:	2500      	movs	r5, #0
 800b552:	e7f8      	b.n	800b546 <_calloc_r+0x16>
 800b554:	4621      	mov	r1, r4
 800b556:	f7fe f941 	bl	80097dc <memset>
 800b55a:	e7f4      	b.n	800b546 <_calloc_r+0x16>

0800b55c <_free_r>:
 800b55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b55e:	2900      	cmp	r1, #0
 800b560:	d044      	beq.n	800b5ec <_free_r+0x90>
 800b562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b566:	9001      	str	r0, [sp, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f1a1 0404 	sub.w	r4, r1, #4
 800b56e:	bfb8      	it	lt
 800b570:	18e4      	addlt	r4, r4, r3
 800b572:	f000 fa9b 	bl	800baac <__malloc_lock>
 800b576:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <_free_r+0x94>)
 800b578:	9801      	ldr	r0, [sp, #4]
 800b57a:	6813      	ldr	r3, [r2, #0]
 800b57c:	b933      	cbnz	r3, 800b58c <_free_r+0x30>
 800b57e:	6063      	str	r3, [r4, #4]
 800b580:	6014      	str	r4, [r2, #0]
 800b582:	b003      	add	sp, #12
 800b584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b588:	f000 ba96 	b.w	800bab8 <__malloc_unlock>
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d908      	bls.n	800b5a2 <_free_r+0x46>
 800b590:	6825      	ldr	r5, [r4, #0]
 800b592:	1961      	adds	r1, r4, r5
 800b594:	428b      	cmp	r3, r1
 800b596:	bf01      	itttt	eq
 800b598:	6819      	ldreq	r1, [r3, #0]
 800b59a:	685b      	ldreq	r3, [r3, #4]
 800b59c:	1949      	addeq	r1, r1, r5
 800b59e:	6021      	streq	r1, [r4, #0]
 800b5a0:	e7ed      	b.n	800b57e <_free_r+0x22>
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	b10b      	cbz	r3, 800b5ac <_free_r+0x50>
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	d9fa      	bls.n	800b5a2 <_free_r+0x46>
 800b5ac:	6811      	ldr	r1, [r2, #0]
 800b5ae:	1855      	adds	r5, r2, r1
 800b5b0:	42a5      	cmp	r5, r4
 800b5b2:	d10b      	bne.n	800b5cc <_free_r+0x70>
 800b5b4:	6824      	ldr	r4, [r4, #0]
 800b5b6:	4421      	add	r1, r4
 800b5b8:	1854      	adds	r4, r2, r1
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	6011      	str	r1, [r2, #0]
 800b5be:	d1e0      	bne.n	800b582 <_free_r+0x26>
 800b5c0:	681c      	ldr	r4, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	6053      	str	r3, [r2, #4]
 800b5c6:	4421      	add	r1, r4
 800b5c8:	6011      	str	r1, [r2, #0]
 800b5ca:	e7da      	b.n	800b582 <_free_r+0x26>
 800b5cc:	d902      	bls.n	800b5d4 <_free_r+0x78>
 800b5ce:	230c      	movs	r3, #12
 800b5d0:	6003      	str	r3, [r0, #0]
 800b5d2:	e7d6      	b.n	800b582 <_free_r+0x26>
 800b5d4:	6825      	ldr	r5, [r4, #0]
 800b5d6:	1961      	adds	r1, r4, r5
 800b5d8:	428b      	cmp	r3, r1
 800b5da:	bf04      	itt	eq
 800b5dc:	6819      	ldreq	r1, [r3, #0]
 800b5de:	685b      	ldreq	r3, [r3, #4]
 800b5e0:	6063      	str	r3, [r4, #4]
 800b5e2:	bf04      	itt	eq
 800b5e4:	1949      	addeq	r1, r1, r5
 800b5e6:	6021      	streq	r1, [r4, #0]
 800b5e8:	6054      	str	r4, [r2, #4]
 800b5ea:	e7ca      	b.n	800b582 <_free_r+0x26>
 800b5ec:	b003      	add	sp, #12
 800b5ee:	bd30      	pop	{r4, r5, pc}
 800b5f0:	200006c4 	.word	0x200006c4

0800b5f4 <sbrk_aligned>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	4e0e      	ldr	r6, [pc, #56]	; (800b630 <sbrk_aligned+0x3c>)
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	6831      	ldr	r1, [r6, #0]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	b911      	cbnz	r1, 800b606 <sbrk_aligned+0x12>
 800b600:	f000 f9e8 	bl	800b9d4 <_sbrk_r>
 800b604:	6030      	str	r0, [r6, #0]
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	f000 f9e3 	bl	800b9d4 <_sbrk_r>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d00a      	beq.n	800b628 <sbrk_aligned+0x34>
 800b612:	1cc4      	adds	r4, r0, #3
 800b614:	f024 0403 	bic.w	r4, r4, #3
 800b618:	42a0      	cmp	r0, r4
 800b61a:	d007      	beq.n	800b62c <sbrk_aligned+0x38>
 800b61c:	1a21      	subs	r1, r4, r0
 800b61e:	4628      	mov	r0, r5
 800b620:	f000 f9d8 	bl	800b9d4 <_sbrk_r>
 800b624:	3001      	adds	r0, #1
 800b626:	d101      	bne.n	800b62c <sbrk_aligned+0x38>
 800b628:	f04f 34ff 	mov.w	r4, #4294967295
 800b62c:	4620      	mov	r0, r4
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	200006c8 	.word	0x200006c8

0800b634 <_malloc_r>:
 800b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b638:	1ccd      	adds	r5, r1, #3
 800b63a:	f025 0503 	bic.w	r5, r5, #3
 800b63e:	3508      	adds	r5, #8
 800b640:	2d0c      	cmp	r5, #12
 800b642:	bf38      	it	cc
 800b644:	250c      	movcc	r5, #12
 800b646:	2d00      	cmp	r5, #0
 800b648:	4607      	mov	r7, r0
 800b64a:	db01      	blt.n	800b650 <_malloc_r+0x1c>
 800b64c:	42a9      	cmp	r1, r5
 800b64e:	d905      	bls.n	800b65c <_malloc_r+0x28>
 800b650:	230c      	movs	r3, #12
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	2600      	movs	r6, #0
 800b656:	4630      	mov	r0, r6
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	4e2e      	ldr	r6, [pc, #184]	; (800b718 <_malloc_r+0xe4>)
 800b65e:	f000 fa25 	bl	800baac <__malloc_lock>
 800b662:	6833      	ldr	r3, [r6, #0]
 800b664:	461c      	mov	r4, r3
 800b666:	bb34      	cbnz	r4, 800b6b6 <_malloc_r+0x82>
 800b668:	4629      	mov	r1, r5
 800b66a:	4638      	mov	r0, r7
 800b66c:	f7ff ffc2 	bl	800b5f4 <sbrk_aligned>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	4604      	mov	r4, r0
 800b674:	d14d      	bne.n	800b712 <_malloc_r+0xde>
 800b676:	6834      	ldr	r4, [r6, #0]
 800b678:	4626      	mov	r6, r4
 800b67a:	2e00      	cmp	r6, #0
 800b67c:	d140      	bne.n	800b700 <_malloc_r+0xcc>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	4631      	mov	r1, r6
 800b682:	4638      	mov	r0, r7
 800b684:	eb04 0803 	add.w	r8, r4, r3
 800b688:	f000 f9a4 	bl	800b9d4 <_sbrk_r>
 800b68c:	4580      	cmp	r8, r0
 800b68e:	d13a      	bne.n	800b706 <_malloc_r+0xd2>
 800b690:	6821      	ldr	r1, [r4, #0]
 800b692:	3503      	adds	r5, #3
 800b694:	1a6d      	subs	r5, r5, r1
 800b696:	f025 0503 	bic.w	r5, r5, #3
 800b69a:	3508      	adds	r5, #8
 800b69c:	2d0c      	cmp	r5, #12
 800b69e:	bf38      	it	cc
 800b6a0:	250c      	movcc	r5, #12
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7ff ffa5 	bl	800b5f4 <sbrk_aligned>
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	d02b      	beq.n	800b706 <_malloc_r+0xd2>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	442b      	add	r3, r5
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	e00e      	b.n	800b6d4 <_malloc_r+0xa0>
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	1b52      	subs	r2, r2, r5
 800b6ba:	d41e      	bmi.n	800b6fa <_malloc_r+0xc6>
 800b6bc:	2a0b      	cmp	r2, #11
 800b6be:	d916      	bls.n	800b6ee <_malloc_r+0xba>
 800b6c0:	1961      	adds	r1, r4, r5
 800b6c2:	42a3      	cmp	r3, r4
 800b6c4:	6025      	str	r5, [r4, #0]
 800b6c6:	bf18      	it	ne
 800b6c8:	6059      	strne	r1, [r3, #4]
 800b6ca:	6863      	ldr	r3, [r4, #4]
 800b6cc:	bf08      	it	eq
 800b6ce:	6031      	streq	r1, [r6, #0]
 800b6d0:	5162      	str	r2, [r4, r5]
 800b6d2:	604b      	str	r3, [r1, #4]
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f104 060b 	add.w	r6, r4, #11
 800b6da:	f000 f9ed 	bl	800bab8 <__malloc_unlock>
 800b6de:	f026 0607 	bic.w	r6, r6, #7
 800b6e2:	1d23      	adds	r3, r4, #4
 800b6e4:	1af2      	subs	r2, r6, r3
 800b6e6:	d0b6      	beq.n	800b656 <_malloc_r+0x22>
 800b6e8:	1b9b      	subs	r3, r3, r6
 800b6ea:	50a3      	str	r3, [r4, r2]
 800b6ec:	e7b3      	b.n	800b656 <_malloc_r+0x22>
 800b6ee:	6862      	ldr	r2, [r4, #4]
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	bf0c      	ite	eq
 800b6f4:	6032      	streq	r2, [r6, #0]
 800b6f6:	605a      	strne	r2, [r3, #4]
 800b6f8:	e7ec      	b.n	800b6d4 <_malloc_r+0xa0>
 800b6fa:	4623      	mov	r3, r4
 800b6fc:	6864      	ldr	r4, [r4, #4]
 800b6fe:	e7b2      	b.n	800b666 <_malloc_r+0x32>
 800b700:	4634      	mov	r4, r6
 800b702:	6876      	ldr	r6, [r6, #4]
 800b704:	e7b9      	b.n	800b67a <_malloc_r+0x46>
 800b706:	230c      	movs	r3, #12
 800b708:	603b      	str	r3, [r7, #0]
 800b70a:	4638      	mov	r0, r7
 800b70c:	f000 f9d4 	bl	800bab8 <__malloc_unlock>
 800b710:	e7a1      	b.n	800b656 <_malloc_r+0x22>
 800b712:	6025      	str	r5, [r4, #0]
 800b714:	e7de      	b.n	800b6d4 <_malloc_r+0xa0>
 800b716:	bf00      	nop
 800b718:	200006c4 	.word	0x200006c4

0800b71c <__ssputs_r>:
 800b71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b720:	688e      	ldr	r6, [r1, #8]
 800b722:	429e      	cmp	r6, r3
 800b724:	4682      	mov	sl, r0
 800b726:	460c      	mov	r4, r1
 800b728:	4690      	mov	r8, r2
 800b72a:	461f      	mov	r7, r3
 800b72c:	d838      	bhi.n	800b7a0 <__ssputs_r+0x84>
 800b72e:	898a      	ldrh	r2, [r1, #12]
 800b730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b734:	d032      	beq.n	800b79c <__ssputs_r+0x80>
 800b736:	6825      	ldr	r5, [r4, #0]
 800b738:	6909      	ldr	r1, [r1, #16]
 800b73a:	eba5 0901 	sub.w	r9, r5, r1
 800b73e:	6965      	ldr	r5, [r4, #20]
 800b740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b748:	3301      	adds	r3, #1
 800b74a:	444b      	add	r3, r9
 800b74c:	106d      	asrs	r5, r5, #1
 800b74e:	429d      	cmp	r5, r3
 800b750:	bf38      	it	cc
 800b752:	461d      	movcc	r5, r3
 800b754:	0553      	lsls	r3, r2, #21
 800b756:	d531      	bpl.n	800b7bc <__ssputs_r+0xa0>
 800b758:	4629      	mov	r1, r5
 800b75a:	f7ff ff6b 	bl	800b634 <_malloc_r>
 800b75e:	4606      	mov	r6, r0
 800b760:	b950      	cbnz	r0, 800b778 <__ssputs_r+0x5c>
 800b762:	230c      	movs	r3, #12
 800b764:	f8ca 3000 	str.w	r3, [sl]
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76e:	81a3      	strh	r3, [r4, #12]
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b778:	6921      	ldr	r1, [r4, #16]
 800b77a:	464a      	mov	r2, r9
 800b77c:	f7ff fb46 	bl	800ae0c <memcpy>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	6126      	str	r6, [r4, #16]
 800b78e:	6165      	str	r5, [r4, #20]
 800b790:	444e      	add	r6, r9
 800b792:	eba5 0509 	sub.w	r5, r5, r9
 800b796:	6026      	str	r6, [r4, #0]
 800b798:	60a5      	str	r5, [r4, #8]
 800b79a:	463e      	mov	r6, r7
 800b79c:	42be      	cmp	r6, r7
 800b79e:	d900      	bls.n	800b7a2 <__ssputs_r+0x86>
 800b7a0:	463e      	mov	r6, r7
 800b7a2:	6820      	ldr	r0, [r4, #0]
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	f000 f966 	bl	800ba78 <memmove>
 800b7ac:	68a3      	ldr	r3, [r4, #8]
 800b7ae:	1b9b      	subs	r3, r3, r6
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	4433      	add	r3, r6
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e7db      	b.n	800b774 <__ssputs_r+0x58>
 800b7bc:	462a      	mov	r2, r5
 800b7be:	f000 f981 	bl	800bac4 <_realloc_r>
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d1e1      	bne.n	800b78c <__ssputs_r+0x70>
 800b7c8:	6921      	ldr	r1, [r4, #16]
 800b7ca:	4650      	mov	r0, sl
 800b7cc:	f7ff fec6 	bl	800b55c <_free_r>
 800b7d0:	e7c7      	b.n	800b762 <__ssputs_r+0x46>
	...

0800b7d4 <_svfiprintf_r>:
 800b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	4698      	mov	r8, r3
 800b7da:	898b      	ldrh	r3, [r1, #12]
 800b7dc:	061b      	lsls	r3, r3, #24
 800b7de:	b09d      	sub	sp, #116	; 0x74
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	d50e      	bpl.n	800b806 <_svfiprintf_r+0x32>
 800b7e8:	690b      	ldr	r3, [r1, #16]
 800b7ea:	b963      	cbnz	r3, 800b806 <_svfiprintf_r+0x32>
 800b7ec:	2140      	movs	r1, #64	; 0x40
 800b7ee:	f7ff ff21 	bl	800b634 <_malloc_r>
 800b7f2:	6028      	str	r0, [r5, #0]
 800b7f4:	6128      	str	r0, [r5, #16]
 800b7f6:	b920      	cbnz	r0, 800b802 <_svfiprintf_r+0x2e>
 800b7f8:	230c      	movs	r3, #12
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	e0d1      	b.n	800b9a6 <_svfiprintf_r+0x1d2>
 800b802:	2340      	movs	r3, #64	; 0x40
 800b804:	616b      	str	r3, [r5, #20]
 800b806:	2300      	movs	r3, #0
 800b808:	9309      	str	r3, [sp, #36]	; 0x24
 800b80a:	2320      	movs	r3, #32
 800b80c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b810:	f8cd 800c 	str.w	r8, [sp, #12]
 800b814:	2330      	movs	r3, #48	; 0x30
 800b816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9c0 <_svfiprintf_r+0x1ec>
 800b81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b81e:	f04f 0901 	mov.w	r9, #1
 800b822:	4623      	mov	r3, r4
 800b824:	469a      	mov	sl, r3
 800b826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82a:	b10a      	cbz	r2, 800b830 <_svfiprintf_r+0x5c>
 800b82c:	2a25      	cmp	r2, #37	; 0x25
 800b82e:	d1f9      	bne.n	800b824 <_svfiprintf_r+0x50>
 800b830:	ebba 0b04 	subs.w	fp, sl, r4
 800b834:	d00b      	beq.n	800b84e <_svfiprintf_r+0x7a>
 800b836:	465b      	mov	r3, fp
 800b838:	4622      	mov	r2, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	4638      	mov	r0, r7
 800b83e:	f7ff ff6d 	bl	800b71c <__ssputs_r>
 800b842:	3001      	adds	r0, #1
 800b844:	f000 80aa 	beq.w	800b99c <_svfiprintf_r+0x1c8>
 800b848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b84a:	445a      	add	r2, fp
 800b84c:	9209      	str	r2, [sp, #36]	; 0x24
 800b84e:	f89a 3000 	ldrb.w	r3, [sl]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80a2 	beq.w	800b99c <_svfiprintf_r+0x1c8>
 800b858:	2300      	movs	r3, #0
 800b85a:	f04f 32ff 	mov.w	r2, #4294967295
 800b85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b862:	f10a 0a01 	add.w	sl, sl, #1
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	9307      	str	r3, [sp, #28]
 800b86a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b86e:	931a      	str	r3, [sp, #104]	; 0x68
 800b870:	4654      	mov	r4, sl
 800b872:	2205      	movs	r2, #5
 800b874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b878:	4851      	ldr	r0, [pc, #324]	; (800b9c0 <_svfiprintf_r+0x1ec>)
 800b87a:	f7f4 fcd1 	bl	8000220 <memchr>
 800b87e:	9a04      	ldr	r2, [sp, #16]
 800b880:	b9d8      	cbnz	r0, 800b8ba <_svfiprintf_r+0xe6>
 800b882:	06d0      	lsls	r0, r2, #27
 800b884:	bf44      	itt	mi
 800b886:	2320      	movmi	r3, #32
 800b888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b88c:	0711      	lsls	r1, r2, #28
 800b88e:	bf44      	itt	mi
 800b890:	232b      	movmi	r3, #43	; 0x2b
 800b892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b896:	f89a 3000 	ldrb.w	r3, [sl]
 800b89a:	2b2a      	cmp	r3, #42	; 0x2a
 800b89c:	d015      	beq.n	800b8ca <_svfiprintf_r+0xf6>
 800b89e:	9a07      	ldr	r2, [sp, #28]
 800b8a0:	4654      	mov	r4, sl
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	f04f 0c0a 	mov.w	ip, #10
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ae:	3b30      	subs	r3, #48	; 0x30
 800b8b0:	2b09      	cmp	r3, #9
 800b8b2:	d94e      	bls.n	800b952 <_svfiprintf_r+0x17e>
 800b8b4:	b1b0      	cbz	r0, 800b8e4 <_svfiprintf_r+0x110>
 800b8b6:	9207      	str	r2, [sp, #28]
 800b8b8:	e014      	b.n	800b8e4 <_svfiprintf_r+0x110>
 800b8ba:	eba0 0308 	sub.w	r3, r0, r8
 800b8be:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	46a2      	mov	sl, r4
 800b8c8:	e7d2      	b.n	800b870 <_svfiprintf_r+0x9c>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	1d19      	adds	r1, r3, #4
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	9103      	str	r1, [sp, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bfbb      	ittet	lt
 800b8d6:	425b      	neglt	r3, r3
 800b8d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b8dc:	9307      	strge	r3, [sp, #28]
 800b8de:	9307      	strlt	r3, [sp, #28]
 800b8e0:	bfb8      	it	lt
 800b8e2:	9204      	strlt	r2, [sp, #16]
 800b8e4:	7823      	ldrb	r3, [r4, #0]
 800b8e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e8:	d10c      	bne.n	800b904 <_svfiprintf_r+0x130>
 800b8ea:	7863      	ldrb	r3, [r4, #1]
 800b8ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ee:	d135      	bne.n	800b95c <_svfiprintf_r+0x188>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	1d1a      	adds	r2, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	9203      	str	r2, [sp, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfb8      	it	lt
 800b8fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b900:	3402      	adds	r4, #2
 800b902:	9305      	str	r3, [sp, #20]
 800b904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9d0 <_svfiprintf_r+0x1fc>
 800b908:	7821      	ldrb	r1, [r4, #0]
 800b90a:	2203      	movs	r2, #3
 800b90c:	4650      	mov	r0, sl
 800b90e:	f7f4 fc87 	bl	8000220 <memchr>
 800b912:	b140      	cbz	r0, 800b926 <_svfiprintf_r+0x152>
 800b914:	2340      	movs	r3, #64	; 0x40
 800b916:	eba0 000a 	sub.w	r0, r0, sl
 800b91a:	fa03 f000 	lsl.w	r0, r3, r0
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	4303      	orrs	r3, r0
 800b922:	3401      	adds	r4, #1
 800b924:	9304      	str	r3, [sp, #16]
 800b926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92a:	4826      	ldr	r0, [pc, #152]	; (800b9c4 <_svfiprintf_r+0x1f0>)
 800b92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b930:	2206      	movs	r2, #6
 800b932:	f7f4 fc75 	bl	8000220 <memchr>
 800b936:	2800      	cmp	r0, #0
 800b938:	d038      	beq.n	800b9ac <_svfiprintf_r+0x1d8>
 800b93a:	4b23      	ldr	r3, [pc, #140]	; (800b9c8 <_svfiprintf_r+0x1f4>)
 800b93c:	bb1b      	cbnz	r3, 800b986 <_svfiprintf_r+0x1b2>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	3307      	adds	r3, #7
 800b942:	f023 0307 	bic.w	r3, r3, #7
 800b946:	3308      	adds	r3, #8
 800b948:	9303      	str	r3, [sp, #12]
 800b94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94c:	4433      	add	r3, r6
 800b94e:	9309      	str	r3, [sp, #36]	; 0x24
 800b950:	e767      	b.n	800b822 <_svfiprintf_r+0x4e>
 800b952:	fb0c 3202 	mla	r2, ip, r2, r3
 800b956:	460c      	mov	r4, r1
 800b958:	2001      	movs	r0, #1
 800b95a:	e7a5      	b.n	800b8a8 <_svfiprintf_r+0xd4>
 800b95c:	2300      	movs	r3, #0
 800b95e:	3401      	adds	r4, #1
 800b960:	9305      	str	r3, [sp, #20]
 800b962:	4619      	mov	r1, r3
 800b964:	f04f 0c0a 	mov.w	ip, #10
 800b968:	4620      	mov	r0, r4
 800b96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96e:	3a30      	subs	r2, #48	; 0x30
 800b970:	2a09      	cmp	r2, #9
 800b972:	d903      	bls.n	800b97c <_svfiprintf_r+0x1a8>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0c5      	beq.n	800b904 <_svfiprintf_r+0x130>
 800b978:	9105      	str	r1, [sp, #20]
 800b97a:	e7c3      	b.n	800b904 <_svfiprintf_r+0x130>
 800b97c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b980:	4604      	mov	r4, r0
 800b982:	2301      	movs	r3, #1
 800b984:	e7f0      	b.n	800b968 <_svfiprintf_r+0x194>
 800b986:	ab03      	add	r3, sp, #12
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	462a      	mov	r2, r5
 800b98c:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <_svfiprintf_r+0x1f8>)
 800b98e:	a904      	add	r1, sp, #16
 800b990:	4638      	mov	r0, r7
 800b992:	f7fd ffcb 	bl	800992c <_printf_float>
 800b996:	1c42      	adds	r2, r0, #1
 800b998:	4606      	mov	r6, r0
 800b99a:	d1d6      	bne.n	800b94a <_svfiprintf_r+0x176>
 800b99c:	89ab      	ldrh	r3, [r5, #12]
 800b99e:	065b      	lsls	r3, r3, #25
 800b9a0:	f53f af2c 	bmi.w	800b7fc <_svfiprintf_r+0x28>
 800b9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9a6:	b01d      	add	sp, #116	; 0x74
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	ab03      	add	r3, sp, #12
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4b06      	ldr	r3, [pc, #24]	; (800b9cc <_svfiprintf_r+0x1f8>)
 800b9b4:	a904      	add	r1, sp, #16
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f7fe fa5c 	bl	8009e74 <_printf_i>
 800b9bc:	e7eb      	b.n	800b996 <_svfiprintf_r+0x1c2>
 800b9be:	bf00      	nop
 800b9c0:	0800dd44 	.word	0x0800dd44
 800b9c4:	0800dd4e 	.word	0x0800dd4e
 800b9c8:	0800992d 	.word	0x0800992d
 800b9cc:	0800b71d 	.word	0x0800b71d
 800b9d0:	0800dd4a 	.word	0x0800dd4a

0800b9d4 <_sbrk_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d06      	ldr	r5, [pc, #24]	; (800b9f0 <_sbrk_r+0x1c>)
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f8 f93c 	bl	8003c5c <_sbrk>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_sbrk_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_sbrk_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	200006cc 	.word	0x200006cc

0800b9f4 <__assert_func>:
 800b9f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9f6:	4614      	mov	r4, r2
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <__assert_func+0x2c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4605      	mov	r5, r0
 800ba00:	68d8      	ldr	r0, [r3, #12]
 800ba02:	b14c      	cbz	r4, 800ba18 <__assert_func+0x24>
 800ba04:	4b07      	ldr	r3, [pc, #28]	; (800ba24 <__assert_func+0x30>)
 800ba06:	9100      	str	r1, [sp, #0]
 800ba08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba0c:	4906      	ldr	r1, [pc, #24]	; (800ba28 <__assert_func+0x34>)
 800ba0e:	462b      	mov	r3, r5
 800ba10:	f000 f80e 	bl	800ba30 <fiprintf>
 800ba14:	f000 faac 	bl	800bf70 <abort>
 800ba18:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <__assert_func+0x38>)
 800ba1a:	461c      	mov	r4, r3
 800ba1c:	e7f3      	b.n	800ba06 <__assert_func+0x12>
 800ba1e:	bf00      	nop
 800ba20:	20000060 	.word	0x20000060
 800ba24:	0800dd55 	.word	0x0800dd55
 800ba28:	0800dd62 	.word	0x0800dd62
 800ba2c:	0800dd90 	.word	0x0800dd90

0800ba30 <fiprintf>:
 800ba30:	b40e      	push	{r1, r2, r3}
 800ba32:	b503      	push	{r0, r1, lr}
 800ba34:	4601      	mov	r1, r0
 800ba36:	ab03      	add	r3, sp, #12
 800ba38:	4805      	ldr	r0, [pc, #20]	; (800ba50 <fiprintf+0x20>)
 800ba3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3e:	6800      	ldr	r0, [r0, #0]
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	f000 f897 	bl	800bb74 <_vfiprintf_r>
 800ba46:	b002      	add	sp, #8
 800ba48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba4c:	b003      	add	sp, #12
 800ba4e:	4770      	bx	lr
 800ba50:	20000060 	.word	0x20000060

0800ba54 <__ascii_mbtowc>:
 800ba54:	b082      	sub	sp, #8
 800ba56:	b901      	cbnz	r1, 800ba5a <__ascii_mbtowc+0x6>
 800ba58:	a901      	add	r1, sp, #4
 800ba5a:	b142      	cbz	r2, 800ba6e <__ascii_mbtowc+0x1a>
 800ba5c:	b14b      	cbz	r3, 800ba72 <__ascii_mbtowc+0x1e>
 800ba5e:	7813      	ldrb	r3, [r2, #0]
 800ba60:	600b      	str	r3, [r1, #0]
 800ba62:	7812      	ldrb	r2, [r2, #0]
 800ba64:	1e10      	subs	r0, r2, #0
 800ba66:	bf18      	it	ne
 800ba68:	2001      	movne	r0, #1
 800ba6a:	b002      	add	sp, #8
 800ba6c:	4770      	bx	lr
 800ba6e:	4610      	mov	r0, r2
 800ba70:	e7fb      	b.n	800ba6a <__ascii_mbtowc+0x16>
 800ba72:	f06f 0001 	mvn.w	r0, #1
 800ba76:	e7f8      	b.n	800ba6a <__ascii_mbtowc+0x16>

0800ba78 <memmove>:
 800ba78:	4288      	cmp	r0, r1
 800ba7a:	b510      	push	{r4, lr}
 800ba7c:	eb01 0402 	add.w	r4, r1, r2
 800ba80:	d902      	bls.n	800ba88 <memmove+0x10>
 800ba82:	4284      	cmp	r4, r0
 800ba84:	4623      	mov	r3, r4
 800ba86:	d807      	bhi.n	800ba98 <memmove+0x20>
 800ba88:	1e43      	subs	r3, r0, #1
 800ba8a:	42a1      	cmp	r1, r4
 800ba8c:	d008      	beq.n	800baa0 <memmove+0x28>
 800ba8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba96:	e7f8      	b.n	800ba8a <memmove+0x12>
 800ba98:	4402      	add	r2, r0
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	428a      	cmp	r2, r1
 800ba9e:	d100      	bne.n	800baa2 <memmove+0x2a>
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baaa:	e7f7      	b.n	800ba9c <memmove+0x24>

0800baac <__malloc_lock>:
 800baac:	4801      	ldr	r0, [pc, #4]	; (800bab4 <__malloc_lock+0x8>)
 800baae:	f000 bc1f 	b.w	800c2f0 <__retarget_lock_acquire_recursive>
 800bab2:	bf00      	nop
 800bab4:	200006d0 	.word	0x200006d0

0800bab8 <__malloc_unlock>:
 800bab8:	4801      	ldr	r0, [pc, #4]	; (800bac0 <__malloc_unlock+0x8>)
 800baba:	f000 bc1a 	b.w	800c2f2 <__retarget_lock_release_recursive>
 800babe:	bf00      	nop
 800bac0:	200006d0 	.word	0x200006d0

0800bac4 <_realloc_r>:
 800bac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac8:	4680      	mov	r8, r0
 800baca:	4614      	mov	r4, r2
 800bacc:	460e      	mov	r6, r1
 800bace:	b921      	cbnz	r1, 800bada <_realloc_r+0x16>
 800bad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bad4:	4611      	mov	r1, r2
 800bad6:	f7ff bdad 	b.w	800b634 <_malloc_r>
 800bada:	b92a      	cbnz	r2, 800bae8 <_realloc_r+0x24>
 800badc:	f7ff fd3e 	bl	800b55c <_free_r>
 800bae0:	4625      	mov	r5, r4
 800bae2:	4628      	mov	r0, r5
 800bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae8:	f000 fc6a 	bl	800c3c0 <_malloc_usable_size_r>
 800baec:	4284      	cmp	r4, r0
 800baee:	4607      	mov	r7, r0
 800baf0:	d802      	bhi.n	800baf8 <_realloc_r+0x34>
 800baf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800baf6:	d812      	bhi.n	800bb1e <_realloc_r+0x5a>
 800baf8:	4621      	mov	r1, r4
 800bafa:	4640      	mov	r0, r8
 800bafc:	f7ff fd9a 	bl	800b634 <_malloc_r>
 800bb00:	4605      	mov	r5, r0
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d0ed      	beq.n	800bae2 <_realloc_r+0x1e>
 800bb06:	42bc      	cmp	r4, r7
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	bf28      	it	cs
 800bb0e:	463a      	movcs	r2, r7
 800bb10:	f7ff f97c 	bl	800ae0c <memcpy>
 800bb14:	4631      	mov	r1, r6
 800bb16:	4640      	mov	r0, r8
 800bb18:	f7ff fd20 	bl	800b55c <_free_r>
 800bb1c:	e7e1      	b.n	800bae2 <_realloc_r+0x1e>
 800bb1e:	4635      	mov	r5, r6
 800bb20:	e7df      	b.n	800bae2 <_realloc_r+0x1e>

0800bb22 <__sfputc_r>:
 800bb22:	6893      	ldr	r3, [r2, #8]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	b410      	push	{r4}
 800bb2a:	6093      	str	r3, [r2, #8]
 800bb2c:	da08      	bge.n	800bb40 <__sfputc_r+0x1e>
 800bb2e:	6994      	ldr	r4, [r2, #24]
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	db01      	blt.n	800bb38 <__sfputc_r+0x16>
 800bb34:	290a      	cmp	r1, #10
 800bb36:	d103      	bne.n	800bb40 <__sfputc_r+0x1e>
 800bb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3c:	f000 b94a 	b.w	800bdd4 <__swbuf_r>
 800bb40:	6813      	ldr	r3, [r2, #0]
 800bb42:	1c58      	adds	r0, r3, #1
 800bb44:	6010      	str	r0, [r2, #0]
 800bb46:	7019      	strb	r1, [r3, #0]
 800bb48:	4608      	mov	r0, r1
 800bb4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <__sfputs_r>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	4606      	mov	r6, r0
 800bb54:	460f      	mov	r7, r1
 800bb56:	4614      	mov	r4, r2
 800bb58:	18d5      	adds	r5, r2, r3
 800bb5a:	42ac      	cmp	r4, r5
 800bb5c:	d101      	bne.n	800bb62 <__sfputs_r+0x12>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e007      	b.n	800bb72 <__sfputs_r+0x22>
 800bb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb66:	463a      	mov	r2, r7
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff ffda 	bl	800bb22 <__sfputc_r>
 800bb6e:	1c43      	adds	r3, r0, #1
 800bb70:	d1f3      	bne.n	800bb5a <__sfputs_r+0xa>
 800bb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb74 <_vfiprintf_r>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	460d      	mov	r5, r1
 800bb7a:	b09d      	sub	sp, #116	; 0x74
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	4698      	mov	r8, r3
 800bb80:	4606      	mov	r6, r0
 800bb82:	b118      	cbz	r0, 800bb8c <_vfiprintf_r+0x18>
 800bb84:	6983      	ldr	r3, [r0, #24]
 800bb86:	b90b      	cbnz	r3, 800bb8c <_vfiprintf_r+0x18>
 800bb88:	f000 fb14 	bl	800c1b4 <__sinit>
 800bb8c:	4b89      	ldr	r3, [pc, #548]	; (800bdb4 <_vfiprintf_r+0x240>)
 800bb8e:	429d      	cmp	r5, r3
 800bb90:	d11b      	bne.n	800bbca <_vfiprintf_r+0x56>
 800bb92:	6875      	ldr	r5, [r6, #4]
 800bb94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb96:	07d9      	lsls	r1, r3, #31
 800bb98:	d405      	bmi.n	800bba6 <_vfiprintf_r+0x32>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	059a      	lsls	r2, r3, #22
 800bb9e:	d402      	bmi.n	800bba6 <_vfiprintf_r+0x32>
 800bba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba2:	f000 fba5 	bl	800c2f0 <__retarget_lock_acquire_recursive>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	071b      	lsls	r3, r3, #28
 800bbaa:	d501      	bpl.n	800bbb0 <_vfiprintf_r+0x3c>
 800bbac:	692b      	ldr	r3, [r5, #16]
 800bbae:	b9eb      	cbnz	r3, 800bbec <_vfiprintf_r+0x78>
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 f96e 	bl	800be94 <__swsetup_r>
 800bbb8:	b1c0      	cbz	r0, 800bbec <_vfiprintf_r+0x78>
 800bbba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbbc:	07dc      	lsls	r4, r3, #31
 800bbbe:	d50e      	bpl.n	800bbde <_vfiprintf_r+0x6a>
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	b01d      	add	sp, #116	; 0x74
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	4b7b      	ldr	r3, [pc, #492]	; (800bdb8 <_vfiprintf_r+0x244>)
 800bbcc:	429d      	cmp	r5, r3
 800bbce:	d101      	bne.n	800bbd4 <_vfiprintf_r+0x60>
 800bbd0:	68b5      	ldr	r5, [r6, #8]
 800bbd2:	e7df      	b.n	800bb94 <_vfiprintf_r+0x20>
 800bbd4:	4b79      	ldr	r3, [pc, #484]	; (800bdbc <_vfiprintf_r+0x248>)
 800bbd6:	429d      	cmp	r5, r3
 800bbd8:	bf08      	it	eq
 800bbda:	68f5      	ldreq	r5, [r6, #12]
 800bbdc:	e7da      	b.n	800bb94 <_vfiprintf_r+0x20>
 800bbde:	89ab      	ldrh	r3, [r5, #12]
 800bbe0:	0598      	lsls	r0, r3, #22
 800bbe2:	d4ed      	bmi.n	800bbc0 <_vfiprintf_r+0x4c>
 800bbe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbe6:	f000 fb84 	bl	800c2f2 <__retarget_lock_release_recursive>
 800bbea:	e7e9      	b.n	800bbc0 <_vfiprintf_r+0x4c>
 800bbec:	2300      	movs	r3, #0
 800bbee:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf0:	2320      	movs	r3, #32
 800bbf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbfa:	2330      	movs	r3, #48	; 0x30
 800bbfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdc0 <_vfiprintf_r+0x24c>
 800bc00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc04:	f04f 0901 	mov.w	r9, #1
 800bc08:	4623      	mov	r3, r4
 800bc0a:	469a      	mov	sl, r3
 800bc0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc10:	b10a      	cbz	r2, 800bc16 <_vfiprintf_r+0xa2>
 800bc12:	2a25      	cmp	r2, #37	; 0x25
 800bc14:	d1f9      	bne.n	800bc0a <_vfiprintf_r+0x96>
 800bc16:	ebba 0b04 	subs.w	fp, sl, r4
 800bc1a:	d00b      	beq.n	800bc34 <_vfiprintf_r+0xc0>
 800bc1c:	465b      	mov	r3, fp
 800bc1e:	4622      	mov	r2, r4
 800bc20:	4629      	mov	r1, r5
 800bc22:	4630      	mov	r0, r6
 800bc24:	f7ff ff94 	bl	800bb50 <__sfputs_r>
 800bc28:	3001      	adds	r0, #1
 800bc2a:	f000 80aa 	beq.w	800bd82 <_vfiprintf_r+0x20e>
 800bc2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc30:	445a      	add	r2, fp
 800bc32:	9209      	str	r2, [sp, #36]	; 0x24
 800bc34:	f89a 3000 	ldrb.w	r3, [sl]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 80a2 	beq.w	800bd82 <_vfiprintf_r+0x20e>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	f04f 32ff 	mov.w	r2, #4294967295
 800bc44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc48:	f10a 0a01 	add.w	sl, sl, #1
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc54:	931a      	str	r3, [sp, #104]	; 0x68
 800bc56:	4654      	mov	r4, sl
 800bc58:	2205      	movs	r2, #5
 800bc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5e:	4858      	ldr	r0, [pc, #352]	; (800bdc0 <_vfiprintf_r+0x24c>)
 800bc60:	f7f4 fade 	bl	8000220 <memchr>
 800bc64:	9a04      	ldr	r2, [sp, #16]
 800bc66:	b9d8      	cbnz	r0, 800bca0 <_vfiprintf_r+0x12c>
 800bc68:	06d1      	lsls	r1, r2, #27
 800bc6a:	bf44      	itt	mi
 800bc6c:	2320      	movmi	r3, #32
 800bc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc72:	0713      	lsls	r3, r2, #28
 800bc74:	bf44      	itt	mi
 800bc76:	232b      	movmi	r3, #43	; 0x2b
 800bc78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc7c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc80:	2b2a      	cmp	r3, #42	; 0x2a
 800bc82:	d015      	beq.n	800bcb0 <_vfiprintf_r+0x13c>
 800bc84:	9a07      	ldr	r2, [sp, #28]
 800bc86:	4654      	mov	r4, sl
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f04f 0c0a 	mov.w	ip, #10
 800bc8e:	4621      	mov	r1, r4
 800bc90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc94:	3b30      	subs	r3, #48	; 0x30
 800bc96:	2b09      	cmp	r3, #9
 800bc98:	d94e      	bls.n	800bd38 <_vfiprintf_r+0x1c4>
 800bc9a:	b1b0      	cbz	r0, 800bcca <_vfiprintf_r+0x156>
 800bc9c:	9207      	str	r2, [sp, #28]
 800bc9e:	e014      	b.n	800bcca <_vfiprintf_r+0x156>
 800bca0:	eba0 0308 	sub.w	r3, r0, r8
 800bca4:	fa09 f303 	lsl.w	r3, r9, r3
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	46a2      	mov	sl, r4
 800bcae:	e7d2      	b.n	800bc56 <_vfiprintf_r+0xe2>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	1d19      	adds	r1, r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	9103      	str	r1, [sp, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bfbb      	ittet	lt
 800bcbc:	425b      	neglt	r3, r3
 800bcbe:	f042 0202 	orrlt.w	r2, r2, #2
 800bcc2:	9307      	strge	r3, [sp, #28]
 800bcc4:	9307      	strlt	r3, [sp, #28]
 800bcc6:	bfb8      	it	lt
 800bcc8:	9204      	strlt	r2, [sp, #16]
 800bcca:	7823      	ldrb	r3, [r4, #0]
 800bccc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcce:	d10c      	bne.n	800bcea <_vfiprintf_r+0x176>
 800bcd0:	7863      	ldrb	r3, [r4, #1]
 800bcd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcd4:	d135      	bne.n	800bd42 <_vfiprintf_r+0x1ce>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	1d1a      	adds	r2, r3, #4
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	9203      	str	r2, [sp, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bfb8      	it	lt
 800bce2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bce6:	3402      	adds	r4, #2
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdd0 <_vfiprintf_r+0x25c>
 800bcee:	7821      	ldrb	r1, [r4, #0]
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	f7f4 fa94 	bl	8000220 <memchr>
 800bcf8:	b140      	cbz	r0, 800bd0c <_vfiprintf_r+0x198>
 800bcfa:	2340      	movs	r3, #64	; 0x40
 800bcfc:	eba0 000a 	sub.w	r0, r0, sl
 800bd00:	fa03 f000 	lsl.w	r0, r3, r0
 800bd04:	9b04      	ldr	r3, [sp, #16]
 800bd06:	4303      	orrs	r3, r0
 800bd08:	3401      	adds	r4, #1
 800bd0a:	9304      	str	r3, [sp, #16]
 800bd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd10:	482c      	ldr	r0, [pc, #176]	; (800bdc4 <_vfiprintf_r+0x250>)
 800bd12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd16:	2206      	movs	r2, #6
 800bd18:	f7f4 fa82 	bl	8000220 <memchr>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d03f      	beq.n	800bda0 <_vfiprintf_r+0x22c>
 800bd20:	4b29      	ldr	r3, [pc, #164]	; (800bdc8 <_vfiprintf_r+0x254>)
 800bd22:	bb1b      	cbnz	r3, 800bd6c <_vfiprintf_r+0x1f8>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	3307      	adds	r3, #7
 800bd28:	f023 0307 	bic.w	r3, r3, #7
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	9303      	str	r3, [sp, #12]
 800bd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd32:	443b      	add	r3, r7
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	e767      	b.n	800bc08 <_vfiprintf_r+0x94>
 800bd38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7a5      	b.n	800bc8e <_vfiprintf_r+0x11a>
 800bd42:	2300      	movs	r3, #0
 800bd44:	3401      	adds	r4, #1
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd54:	3a30      	subs	r2, #48	; 0x30
 800bd56:	2a09      	cmp	r2, #9
 800bd58:	d903      	bls.n	800bd62 <_vfiprintf_r+0x1ee>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0c5      	beq.n	800bcea <_vfiprintf_r+0x176>
 800bd5e:	9105      	str	r1, [sp, #20]
 800bd60:	e7c3      	b.n	800bcea <_vfiprintf_r+0x176>
 800bd62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd66:	4604      	mov	r4, r0
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e7f0      	b.n	800bd4e <_vfiprintf_r+0x1da>
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b16      	ldr	r3, [pc, #88]	; (800bdcc <_vfiprintf_r+0x258>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7fd fdd8 	bl	800992c <_printf_float>
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	1c78      	adds	r0, r7, #1
 800bd80:	d1d6      	bne.n	800bd30 <_vfiprintf_r+0x1bc>
 800bd82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd84:	07d9      	lsls	r1, r3, #31
 800bd86:	d405      	bmi.n	800bd94 <_vfiprintf_r+0x220>
 800bd88:	89ab      	ldrh	r3, [r5, #12]
 800bd8a:	059a      	lsls	r2, r3, #22
 800bd8c:	d402      	bmi.n	800bd94 <_vfiprintf_r+0x220>
 800bd8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd90:	f000 faaf 	bl	800c2f2 <__retarget_lock_release_recursive>
 800bd94:	89ab      	ldrh	r3, [r5, #12]
 800bd96:	065b      	lsls	r3, r3, #25
 800bd98:	f53f af12 	bmi.w	800bbc0 <_vfiprintf_r+0x4c>
 800bd9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd9e:	e711      	b.n	800bbc4 <_vfiprintf_r+0x50>
 800bda0:	ab03      	add	r3, sp, #12
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	462a      	mov	r2, r5
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <_vfiprintf_r+0x258>)
 800bda8:	a904      	add	r1, sp, #16
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7fe f862 	bl	8009e74 <_printf_i>
 800bdb0:	e7e4      	b.n	800bd7c <_vfiprintf_r+0x208>
 800bdb2:	bf00      	nop
 800bdb4:	0800debc 	.word	0x0800debc
 800bdb8:	0800dedc 	.word	0x0800dedc
 800bdbc:	0800de9c 	.word	0x0800de9c
 800bdc0:	0800dd44 	.word	0x0800dd44
 800bdc4:	0800dd4e 	.word	0x0800dd4e
 800bdc8:	0800992d 	.word	0x0800992d
 800bdcc:	0800bb51 	.word	0x0800bb51
 800bdd0:	0800dd4a 	.word	0x0800dd4a

0800bdd4 <__swbuf_r>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	460e      	mov	r6, r1
 800bdd8:	4614      	mov	r4, r2
 800bdda:	4605      	mov	r5, r0
 800bddc:	b118      	cbz	r0, 800bde6 <__swbuf_r+0x12>
 800bdde:	6983      	ldr	r3, [r0, #24]
 800bde0:	b90b      	cbnz	r3, 800bde6 <__swbuf_r+0x12>
 800bde2:	f000 f9e7 	bl	800c1b4 <__sinit>
 800bde6:	4b21      	ldr	r3, [pc, #132]	; (800be6c <__swbuf_r+0x98>)
 800bde8:	429c      	cmp	r4, r3
 800bdea:	d12b      	bne.n	800be44 <__swbuf_r+0x70>
 800bdec:	686c      	ldr	r4, [r5, #4]
 800bdee:	69a3      	ldr	r3, [r4, #24]
 800bdf0:	60a3      	str	r3, [r4, #8]
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	071a      	lsls	r2, r3, #28
 800bdf6:	d52f      	bpl.n	800be58 <__swbuf_r+0x84>
 800bdf8:	6923      	ldr	r3, [r4, #16]
 800bdfa:	b36b      	cbz	r3, 800be58 <__swbuf_r+0x84>
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	6820      	ldr	r0, [r4, #0]
 800be00:	1ac0      	subs	r0, r0, r3
 800be02:	6963      	ldr	r3, [r4, #20]
 800be04:	b2f6      	uxtb	r6, r6
 800be06:	4283      	cmp	r3, r0
 800be08:	4637      	mov	r7, r6
 800be0a:	dc04      	bgt.n	800be16 <__swbuf_r+0x42>
 800be0c:	4621      	mov	r1, r4
 800be0e:	4628      	mov	r0, r5
 800be10:	f000 f93c 	bl	800c08c <_fflush_r>
 800be14:	bb30      	cbnz	r0, 800be64 <__swbuf_r+0x90>
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	3b01      	subs	r3, #1
 800be1a:	60a3      	str	r3, [r4, #8]
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	6022      	str	r2, [r4, #0]
 800be22:	701e      	strb	r6, [r3, #0]
 800be24:	6963      	ldr	r3, [r4, #20]
 800be26:	3001      	adds	r0, #1
 800be28:	4283      	cmp	r3, r0
 800be2a:	d004      	beq.n	800be36 <__swbuf_r+0x62>
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	07db      	lsls	r3, r3, #31
 800be30:	d506      	bpl.n	800be40 <__swbuf_r+0x6c>
 800be32:	2e0a      	cmp	r6, #10
 800be34:	d104      	bne.n	800be40 <__swbuf_r+0x6c>
 800be36:	4621      	mov	r1, r4
 800be38:	4628      	mov	r0, r5
 800be3a:	f000 f927 	bl	800c08c <_fflush_r>
 800be3e:	b988      	cbnz	r0, 800be64 <__swbuf_r+0x90>
 800be40:	4638      	mov	r0, r7
 800be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <__swbuf_r+0x9c>)
 800be46:	429c      	cmp	r4, r3
 800be48:	d101      	bne.n	800be4e <__swbuf_r+0x7a>
 800be4a:	68ac      	ldr	r4, [r5, #8]
 800be4c:	e7cf      	b.n	800bdee <__swbuf_r+0x1a>
 800be4e:	4b09      	ldr	r3, [pc, #36]	; (800be74 <__swbuf_r+0xa0>)
 800be50:	429c      	cmp	r4, r3
 800be52:	bf08      	it	eq
 800be54:	68ec      	ldreq	r4, [r5, #12]
 800be56:	e7ca      	b.n	800bdee <__swbuf_r+0x1a>
 800be58:	4621      	mov	r1, r4
 800be5a:	4628      	mov	r0, r5
 800be5c:	f000 f81a 	bl	800be94 <__swsetup_r>
 800be60:	2800      	cmp	r0, #0
 800be62:	d0cb      	beq.n	800bdfc <__swbuf_r+0x28>
 800be64:	f04f 37ff 	mov.w	r7, #4294967295
 800be68:	e7ea      	b.n	800be40 <__swbuf_r+0x6c>
 800be6a:	bf00      	nop
 800be6c:	0800debc 	.word	0x0800debc
 800be70:	0800dedc 	.word	0x0800dedc
 800be74:	0800de9c 	.word	0x0800de9c

0800be78 <__ascii_wctomb>:
 800be78:	b149      	cbz	r1, 800be8e <__ascii_wctomb+0x16>
 800be7a:	2aff      	cmp	r2, #255	; 0xff
 800be7c:	bf85      	ittet	hi
 800be7e:	238a      	movhi	r3, #138	; 0x8a
 800be80:	6003      	strhi	r3, [r0, #0]
 800be82:	700a      	strbls	r2, [r1, #0]
 800be84:	f04f 30ff 	movhi.w	r0, #4294967295
 800be88:	bf98      	it	ls
 800be8a:	2001      	movls	r0, #1
 800be8c:	4770      	bx	lr
 800be8e:	4608      	mov	r0, r1
 800be90:	4770      	bx	lr
	...

0800be94 <__swsetup_r>:
 800be94:	4b32      	ldr	r3, [pc, #200]	; (800bf60 <__swsetup_r+0xcc>)
 800be96:	b570      	push	{r4, r5, r6, lr}
 800be98:	681d      	ldr	r5, [r3, #0]
 800be9a:	4606      	mov	r6, r0
 800be9c:	460c      	mov	r4, r1
 800be9e:	b125      	cbz	r5, 800beaa <__swsetup_r+0x16>
 800bea0:	69ab      	ldr	r3, [r5, #24]
 800bea2:	b913      	cbnz	r3, 800beaa <__swsetup_r+0x16>
 800bea4:	4628      	mov	r0, r5
 800bea6:	f000 f985 	bl	800c1b4 <__sinit>
 800beaa:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <__swsetup_r+0xd0>)
 800beac:	429c      	cmp	r4, r3
 800beae:	d10f      	bne.n	800bed0 <__swsetup_r+0x3c>
 800beb0:	686c      	ldr	r4, [r5, #4]
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beb8:	0719      	lsls	r1, r3, #28
 800beba:	d42c      	bmi.n	800bf16 <__swsetup_r+0x82>
 800bebc:	06dd      	lsls	r5, r3, #27
 800bebe:	d411      	bmi.n	800bee4 <__swsetup_r+0x50>
 800bec0:	2309      	movs	r3, #9
 800bec2:	6033      	str	r3, [r6, #0]
 800bec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bec8:	81a3      	strh	r3, [r4, #12]
 800beca:	f04f 30ff 	mov.w	r0, #4294967295
 800bece:	e03e      	b.n	800bf4e <__swsetup_r+0xba>
 800bed0:	4b25      	ldr	r3, [pc, #148]	; (800bf68 <__swsetup_r+0xd4>)
 800bed2:	429c      	cmp	r4, r3
 800bed4:	d101      	bne.n	800beda <__swsetup_r+0x46>
 800bed6:	68ac      	ldr	r4, [r5, #8]
 800bed8:	e7eb      	b.n	800beb2 <__swsetup_r+0x1e>
 800beda:	4b24      	ldr	r3, [pc, #144]	; (800bf6c <__swsetup_r+0xd8>)
 800bedc:	429c      	cmp	r4, r3
 800bede:	bf08      	it	eq
 800bee0:	68ec      	ldreq	r4, [r5, #12]
 800bee2:	e7e6      	b.n	800beb2 <__swsetup_r+0x1e>
 800bee4:	0758      	lsls	r0, r3, #29
 800bee6:	d512      	bpl.n	800bf0e <__swsetup_r+0x7a>
 800bee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beea:	b141      	cbz	r1, 800befe <__swsetup_r+0x6a>
 800beec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bef0:	4299      	cmp	r1, r3
 800bef2:	d002      	beq.n	800befa <__swsetup_r+0x66>
 800bef4:	4630      	mov	r0, r6
 800bef6:	f7ff fb31 	bl	800b55c <_free_r>
 800befa:	2300      	movs	r3, #0
 800befc:	6363      	str	r3, [r4, #52]	; 0x34
 800befe:	89a3      	ldrh	r3, [r4, #12]
 800bf00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	2300      	movs	r3, #0
 800bf08:	6063      	str	r3, [r4, #4]
 800bf0a:	6923      	ldr	r3, [r4, #16]
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f043 0308 	orr.w	r3, r3, #8
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	6923      	ldr	r3, [r4, #16]
 800bf18:	b94b      	cbnz	r3, 800bf2e <__swsetup_r+0x9a>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf24:	d003      	beq.n	800bf2e <__swsetup_r+0x9a>
 800bf26:	4621      	mov	r1, r4
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f000 fa09 	bl	800c340 <__smakebuf_r>
 800bf2e:	89a0      	ldrh	r0, [r4, #12]
 800bf30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf34:	f010 0301 	ands.w	r3, r0, #1
 800bf38:	d00a      	beq.n	800bf50 <__swsetup_r+0xbc>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60a3      	str	r3, [r4, #8]
 800bf3e:	6963      	ldr	r3, [r4, #20]
 800bf40:	425b      	negs	r3, r3
 800bf42:	61a3      	str	r3, [r4, #24]
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	b943      	cbnz	r3, 800bf5a <__swsetup_r+0xc6>
 800bf48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf4c:	d1ba      	bne.n	800bec4 <__swsetup_r+0x30>
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	0781      	lsls	r1, r0, #30
 800bf52:	bf58      	it	pl
 800bf54:	6963      	ldrpl	r3, [r4, #20]
 800bf56:	60a3      	str	r3, [r4, #8]
 800bf58:	e7f4      	b.n	800bf44 <__swsetup_r+0xb0>
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	e7f7      	b.n	800bf4e <__swsetup_r+0xba>
 800bf5e:	bf00      	nop
 800bf60:	20000060 	.word	0x20000060
 800bf64:	0800debc 	.word	0x0800debc
 800bf68:	0800dedc 	.word	0x0800dedc
 800bf6c:	0800de9c 	.word	0x0800de9c

0800bf70 <abort>:
 800bf70:	b508      	push	{r3, lr}
 800bf72:	2006      	movs	r0, #6
 800bf74:	f000 fa54 	bl	800c420 <raise>
 800bf78:	2001      	movs	r0, #1
 800bf7a:	f7f7 fdf7 	bl	8003b6c <_exit>
	...

0800bf80 <__sflush_r>:
 800bf80:	898a      	ldrh	r2, [r1, #12]
 800bf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf86:	4605      	mov	r5, r0
 800bf88:	0710      	lsls	r0, r2, #28
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	d458      	bmi.n	800c040 <__sflush_r+0xc0>
 800bf8e:	684b      	ldr	r3, [r1, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dc05      	bgt.n	800bfa0 <__sflush_r+0x20>
 800bf94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dc02      	bgt.n	800bfa0 <__sflush_r+0x20>
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfa2:	2e00      	cmp	r6, #0
 800bfa4:	d0f9      	beq.n	800bf9a <__sflush_r+0x1a>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfac:	682f      	ldr	r7, [r5, #0]
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	d032      	beq.n	800c018 <__sflush_r+0x98>
 800bfb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	075a      	lsls	r2, r3, #29
 800bfb8:	d505      	bpl.n	800bfc6 <__sflush_r+0x46>
 800bfba:	6863      	ldr	r3, [r4, #4]
 800bfbc:	1ac0      	subs	r0, r0, r3
 800bfbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfc0:	b10b      	cbz	r3, 800bfc6 <__sflush_r+0x46>
 800bfc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc4:	1ac0      	subs	r0, r0, r3
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	4602      	mov	r2, r0
 800bfca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfcc:	6a21      	ldr	r1, [r4, #32]
 800bfce:	4628      	mov	r0, r5
 800bfd0:	47b0      	blx	r6
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	89a3      	ldrh	r3, [r4, #12]
 800bfd6:	d106      	bne.n	800bfe6 <__sflush_r+0x66>
 800bfd8:	6829      	ldr	r1, [r5, #0]
 800bfda:	291d      	cmp	r1, #29
 800bfdc:	d82c      	bhi.n	800c038 <__sflush_r+0xb8>
 800bfde:	4a2a      	ldr	r2, [pc, #168]	; (800c088 <__sflush_r+0x108>)
 800bfe0:	40ca      	lsrs	r2, r1
 800bfe2:	07d6      	lsls	r6, r2, #31
 800bfe4:	d528      	bpl.n	800c038 <__sflush_r+0xb8>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	6062      	str	r2, [r4, #4]
 800bfea:	04d9      	lsls	r1, r3, #19
 800bfec:	6922      	ldr	r2, [r4, #16]
 800bfee:	6022      	str	r2, [r4, #0]
 800bff0:	d504      	bpl.n	800bffc <__sflush_r+0x7c>
 800bff2:	1c42      	adds	r2, r0, #1
 800bff4:	d101      	bne.n	800bffa <__sflush_r+0x7a>
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	b903      	cbnz	r3, 800bffc <__sflush_r+0x7c>
 800bffa:	6560      	str	r0, [r4, #84]	; 0x54
 800bffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bffe:	602f      	str	r7, [r5, #0]
 800c000:	2900      	cmp	r1, #0
 800c002:	d0ca      	beq.n	800bf9a <__sflush_r+0x1a>
 800c004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c008:	4299      	cmp	r1, r3
 800c00a:	d002      	beq.n	800c012 <__sflush_r+0x92>
 800c00c:	4628      	mov	r0, r5
 800c00e:	f7ff faa5 	bl	800b55c <_free_r>
 800c012:	2000      	movs	r0, #0
 800c014:	6360      	str	r0, [r4, #52]	; 0x34
 800c016:	e7c1      	b.n	800bf9c <__sflush_r+0x1c>
 800c018:	6a21      	ldr	r1, [r4, #32]
 800c01a:	2301      	movs	r3, #1
 800c01c:	4628      	mov	r0, r5
 800c01e:	47b0      	blx	r6
 800c020:	1c41      	adds	r1, r0, #1
 800c022:	d1c7      	bne.n	800bfb4 <__sflush_r+0x34>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0c4      	beq.n	800bfb4 <__sflush_r+0x34>
 800c02a:	2b1d      	cmp	r3, #29
 800c02c:	d001      	beq.n	800c032 <__sflush_r+0xb2>
 800c02e:	2b16      	cmp	r3, #22
 800c030:	d101      	bne.n	800c036 <__sflush_r+0xb6>
 800c032:	602f      	str	r7, [r5, #0]
 800c034:	e7b1      	b.n	800bf9a <__sflush_r+0x1a>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	e7ad      	b.n	800bf9c <__sflush_r+0x1c>
 800c040:	690f      	ldr	r7, [r1, #16]
 800c042:	2f00      	cmp	r7, #0
 800c044:	d0a9      	beq.n	800bf9a <__sflush_r+0x1a>
 800c046:	0793      	lsls	r3, r2, #30
 800c048:	680e      	ldr	r6, [r1, #0]
 800c04a:	bf08      	it	eq
 800c04c:	694b      	ldreq	r3, [r1, #20]
 800c04e:	600f      	str	r7, [r1, #0]
 800c050:	bf18      	it	ne
 800c052:	2300      	movne	r3, #0
 800c054:	eba6 0807 	sub.w	r8, r6, r7
 800c058:	608b      	str	r3, [r1, #8]
 800c05a:	f1b8 0f00 	cmp.w	r8, #0
 800c05e:	dd9c      	ble.n	800bf9a <__sflush_r+0x1a>
 800c060:	6a21      	ldr	r1, [r4, #32]
 800c062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c064:	4643      	mov	r3, r8
 800c066:	463a      	mov	r2, r7
 800c068:	4628      	mov	r0, r5
 800c06a:	47b0      	blx	r6
 800c06c:	2800      	cmp	r0, #0
 800c06e:	dc06      	bgt.n	800c07e <__sflush_r+0xfe>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c076:	81a3      	strh	r3, [r4, #12]
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	e78e      	b.n	800bf9c <__sflush_r+0x1c>
 800c07e:	4407      	add	r7, r0
 800c080:	eba8 0800 	sub.w	r8, r8, r0
 800c084:	e7e9      	b.n	800c05a <__sflush_r+0xda>
 800c086:	bf00      	nop
 800c088:	20400001 	.word	0x20400001

0800c08c <_fflush_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	690b      	ldr	r3, [r1, #16]
 800c090:	4605      	mov	r5, r0
 800c092:	460c      	mov	r4, r1
 800c094:	b913      	cbnz	r3, 800c09c <_fflush_r+0x10>
 800c096:	2500      	movs	r5, #0
 800c098:	4628      	mov	r0, r5
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	b118      	cbz	r0, 800c0a6 <_fflush_r+0x1a>
 800c09e:	6983      	ldr	r3, [r0, #24]
 800c0a0:	b90b      	cbnz	r3, 800c0a6 <_fflush_r+0x1a>
 800c0a2:	f000 f887 	bl	800c1b4 <__sinit>
 800c0a6:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <_fflush_r+0x6c>)
 800c0a8:	429c      	cmp	r4, r3
 800c0aa:	d11b      	bne.n	800c0e4 <_fflush_r+0x58>
 800c0ac:	686c      	ldr	r4, [r5, #4]
 800c0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d0ef      	beq.n	800c096 <_fflush_r+0xa>
 800c0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0b8:	07d0      	lsls	r0, r2, #31
 800c0ba:	d404      	bmi.n	800c0c6 <_fflush_r+0x3a>
 800c0bc:	0599      	lsls	r1, r3, #22
 800c0be:	d402      	bmi.n	800c0c6 <_fflush_r+0x3a>
 800c0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0c2:	f000 f915 	bl	800c2f0 <__retarget_lock_acquire_recursive>
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	f7ff ff59 	bl	800bf80 <__sflush_r>
 800c0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0d0:	07da      	lsls	r2, r3, #31
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	d4e0      	bmi.n	800c098 <_fflush_r+0xc>
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	059b      	lsls	r3, r3, #22
 800c0da:	d4dd      	bmi.n	800c098 <_fflush_r+0xc>
 800c0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0de:	f000 f908 	bl	800c2f2 <__retarget_lock_release_recursive>
 800c0e2:	e7d9      	b.n	800c098 <_fflush_r+0xc>
 800c0e4:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <_fflush_r+0x70>)
 800c0e6:	429c      	cmp	r4, r3
 800c0e8:	d101      	bne.n	800c0ee <_fflush_r+0x62>
 800c0ea:	68ac      	ldr	r4, [r5, #8]
 800c0ec:	e7df      	b.n	800c0ae <_fflush_r+0x22>
 800c0ee:	4b04      	ldr	r3, [pc, #16]	; (800c100 <_fflush_r+0x74>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	bf08      	it	eq
 800c0f4:	68ec      	ldreq	r4, [r5, #12]
 800c0f6:	e7da      	b.n	800c0ae <_fflush_r+0x22>
 800c0f8:	0800debc 	.word	0x0800debc
 800c0fc:	0800dedc 	.word	0x0800dedc
 800c100:	0800de9c 	.word	0x0800de9c

0800c104 <std>:
 800c104:	2300      	movs	r3, #0
 800c106:	b510      	push	{r4, lr}
 800c108:	4604      	mov	r4, r0
 800c10a:	e9c0 3300 	strd	r3, r3, [r0]
 800c10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c112:	6083      	str	r3, [r0, #8]
 800c114:	8181      	strh	r1, [r0, #12]
 800c116:	6643      	str	r3, [r0, #100]	; 0x64
 800c118:	81c2      	strh	r2, [r0, #14]
 800c11a:	6183      	str	r3, [r0, #24]
 800c11c:	4619      	mov	r1, r3
 800c11e:	2208      	movs	r2, #8
 800c120:	305c      	adds	r0, #92	; 0x5c
 800c122:	f7fd fb5b 	bl	80097dc <memset>
 800c126:	4b05      	ldr	r3, [pc, #20]	; (800c13c <std+0x38>)
 800c128:	6263      	str	r3, [r4, #36]	; 0x24
 800c12a:	4b05      	ldr	r3, [pc, #20]	; (800c140 <std+0x3c>)
 800c12c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c12e:	4b05      	ldr	r3, [pc, #20]	; (800c144 <std+0x40>)
 800c130:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c132:	4b05      	ldr	r3, [pc, #20]	; (800c148 <std+0x44>)
 800c134:	6224      	str	r4, [r4, #32]
 800c136:	6323      	str	r3, [r4, #48]	; 0x30
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	bf00      	nop
 800c13c:	0800c459 	.word	0x0800c459
 800c140:	0800c47b 	.word	0x0800c47b
 800c144:	0800c4b3 	.word	0x0800c4b3
 800c148:	0800c4d7 	.word	0x0800c4d7

0800c14c <_cleanup_r>:
 800c14c:	4901      	ldr	r1, [pc, #4]	; (800c154 <_cleanup_r+0x8>)
 800c14e:	f000 b8af 	b.w	800c2b0 <_fwalk_reent>
 800c152:	bf00      	nop
 800c154:	0800c08d 	.word	0x0800c08d

0800c158 <__sfmoreglue>:
 800c158:	b570      	push	{r4, r5, r6, lr}
 800c15a:	2268      	movs	r2, #104	; 0x68
 800c15c:	1e4d      	subs	r5, r1, #1
 800c15e:	4355      	muls	r5, r2
 800c160:	460e      	mov	r6, r1
 800c162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c166:	f7ff fa65 	bl	800b634 <_malloc_r>
 800c16a:	4604      	mov	r4, r0
 800c16c:	b140      	cbz	r0, 800c180 <__sfmoreglue+0x28>
 800c16e:	2100      	movs	r1, #0
 800c170:	e9c0 1600 	strd	r1, r6, [r0]
 800c174:	300c      	adds	r0, #12
 800c176:	60a0      	str	r0, [r4, #8]
 800c178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c17c:	f7fd fb2e 	bl	80097dc <memset>
 800c180:	4620      	mov	r0, r4
 800c182:	bd70      	pop	{r4, r5, r6, pc}

0800c184 <__sfp_lock_acquire>:
 800c184:	4801      	ldr	r0, [pc, #4]	; (800c18c <__sfp_lock_acquire+0x8>)
 800c186:	f000 b8b3 	b.w	800c2f0 <__retarget_lock_acquire_recursive>
 800c18a:	bf00      	nop
 800c18c:	200006d1 	.word	0x200006d1

0800c190 <__sfp_lock_release>:
 800c190:	4801      	ldr	r0, [pc, #4]	; (800c198 <__sfp_lock_release+0x8>)
 800c192:	f000 b8ae 	b.w	800c2f2 <__retarget_lock_release_recursive>
 800c196:	bf00      	nop
 800c198:	200006d1 	.word	0x200006d1

0800c19c <__sinit_lock_acquire>:
 800c19c:	4801      	ldr	r0, [pc, #4]	; (800c1a4 <__sinit_lock_acquire+0x8>)
 800c19e:	f000 b8a7 	b.w	800c2f0 <__retarget_lock_acquire_recursive>
 800c1a2:	bf00      	nop
 800c1a4:	200006d2 	.word	0x200006d2

0800c1a8 <__sinit_lock_release>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	; (800c1b0 <__sinit_lock_release+0x8>)
 800c1aa:	f000 b8a2 	b.w	800c2f2 <__retarget_lock_release_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	200006d2 	.word	0x200006d2

0800c1b4 <__sinit>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	f7ff fff0 	bl	800c19c <__sinit_lock_acquire>
 800c1bc:	69a3      	ldr	r3, [r4, #24]
 800c1be:	b11b      	cbz	r3, 800c1c8 <__sinit+0x14>
 800c1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c4:	f7ff bff0 	b.w	800c1a8 <__sinit_lock_release>
 800c1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1cc:	6523      	str	r3, [r4, #80]	; 0x50
 800c1ce:	4b13      	ldr	r3, [pc, #76]	; (800c21c <__sinit+0x68>)
 800c1d0:	4a13      	ldr	r2, [pc, #76]	; (800c220 <__sinit+0x6c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1d6:	42a3      	cmp	r3, r4
 800c1d8:	bf04      	itt	eq
 800c1da:	2301      	moveq	r3, #1
 800c1dc:	61a3      	streq	r3, [r4, #24]
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 f820 	bl	800c224 <__sfp>
 800c1e4:	6060      	str	r0, [r4, #4]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 f81c 	bl	800c224 <__sfp>
 800c1ec:	60a0      	str	r0, [r4, #8]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 f818 	bl	800c224 <__sfp>
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	60e0      	str	r0, [r4, #12]
 800c1f8:	2104      	movs	r1, #4
 800c1fa:	6860      	ldr	r0, [r4, #4]
 800c1fc:	f7ff ff82 	bl	800c104 <std>
 800c200:	68a0      	ldr	r0, [r4, #8]
 800c202:	2201      	movs	r2, #1
 800c204:	2109      	movs	r1, #9
 800c206:	f7ff ff7d 	bl	800c104 <std>
 800c20a:	68e0      	ldr	r0, [r4, #12]
 800c20c:	2202      	movs	r2, #2
 800c20e:	2112      	movs	r1, #18
 800c210:	f7ff ff78 	bl	800c104 <std>
 800c214:	2301      	movs	r3, #1
 800c216:	61a3      	str	r3, [r4, #24]
 800c218:	e7d2      	b.n	800c1c0 <__sinit+0xc>
 800c21a:	bf00      	nop
 800c21c:	0800db20 	.word	0x0800db20
 800c220:	0800c14d 	.word	0x0800c14d

0800c224 <__sfp>:
 800c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c226:	4607      	mov	r7, r0
 800c228:	f7ff ffac 	bl	800c184 <__sfp_lock_acquire>
 800c22c:	4b1e      	ldr	r3, [pc, #120]	; (800c2a8 <__sfp+0x84>)
 800c22e:	681e      	ldr	r6, [r3, #0]
 800c230:	69b3      	ldr	r3, [r6, #24]
 800c232:	b913      	cbnz	r3, 800c23a <__sfp+0x16>
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff ffbd 	bl	800c1b4 <__sinit>
 800c23a:	3648      	adds	r6, #72	; 0x48
 800c23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c240:	3b01      	subs	r3, #1
 800c242:	d503      	bpl.n	800c24c <__sfp+0x28>
 800c244:	6833      	ldr	r3, [r6, #0]
 800c246:	b30b      	cbz	r3, 800c28c <__sfp+0x68>
 800c248:	6836      	ldr	r6, [r6, #0]
 800c24a:	e7f7      	b.n	800c23c <__sfp+0x18>
 800c24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c250:	b9d5      	cbnz	r5, 800c288 <__sfp+0x64>
 800c252:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <__sfp+0x88>)
 800c254:	60e3      	str	r3, [r4, #12]
 800c256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c25a:	6665      	str	r5, [r4, #100]	; 0x64
 800c25c:	f000 f847 	bl	800c2ee <__retarget_lock_init_recursive>
 800c260:	f7ff ff96 	bl	800c190 <__sfp_lock_release>
 800c264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c26c:	6025      	str	r5, [r4, #0]
 800c26e:	61a5      	str	r5, [r4, #24]
 800c270:	2208      	movs	r2, #8
 800c272:	4629      	mov	r1, r5
 800c274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c278:	f7fd fab0 	bl	80097dc <memset>
 800c27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c284:	4620      	mov	r0, r4
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c288:	3468      	adds	r4, #104	; 0x68
 800c28a:	e7d9      	b.n	800c240 <__sfp+0x1c>
 800c28c:	2104      	movs	r1, #4
 800c28e:	4638      	mov	r0, r7
 800c290:	f7ff ff62 	bl	800c158 <__sfmoreglue>
 800c294:	4604      	mov	r4, r0
 800c296:	6030      	str	r0, [r6, #0]
 800c298:	2800      	cmp	r0, #0
 800c29a:	d1d5      	bne.n	800c248 <__sfp+0x24>
 800c29c:	f7ff ff78 	bl	800c190 <__sfp_lock_release>
 800c2a0:	230c      	movs	r3, #12
 800c2a2:	603b      	str	r3, [r7, #0]
 800c2a4:	e7ee      	b.n	800c284 <__sfp+0x60>
 800c2a6:	bf00      	nop
 800c2a8:	0800db20 	.word	0x0800db20
 800c2ac:	ffff0001 	.word	0xffff0001

0800c2b0 <_fwalk_reent>:
 800c2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	4688      	mov	r8, r1
 800c2b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2bc:	2700      	movs	r7, #0
 800c2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2c2:	f1b9 0901 	subs.w	r9, r9, #1
 800c2c6:	d505      	bpl.n	800c2d4 <_fwalk_reent+0x24>
 800c2c8:	6824      	ldr	r4, [r4, #0]
 800c2ca:	2c00      	cmp	r4, #0
 800c2cc:	d1f7      	bne.n	800c2be <_fwalk_reent+0xe>
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d4:	89ab      	ldrh	r3, [r5, #12]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d907      	bls.n	800c2ea <_fwalk_reent+0x3a>
 800c2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	d003      	beq.n	800c2ea <_fwalk_reent+0x3a>
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	47c0      	blx	r8
 800c2e8:	4307      	orrs	r7, r0
 800c2ea:	3568      	adds	r5, #104	; 0x68
 800c2ec:	e7e9      	b.n	800c2c2 <_fwalk_reent+0x12>

0800c2ee <__retarget_lock_init_recursive>:
 800c2ee:	4770      	bx	lr

0800c2f0 <__retarget_lock_acquire_recursive>:
 800c2f0:	4770      	bx	lr

0800c2f2 <__retarget_lock_release_recursive>:
 800c2f2:	4770      	bx	lr

0800c2f4 <__swhatbuf_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	460e      	mov	r6, r1
 800c2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	b096      	sub	sp, #88	; 0x58
 800c300:	4614      	mov	r4, r2
 800c302:	461d      	mov	r5, r3
 800c304:	da08      	bge.n	800c318 <__swhatbuf_r+0x24>
 800c306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	602a      	str	r2, [r5, #0]
 800c30e:	061a      	lsls	r2, r3, #24
 800c310:	d410      	bmi.n	800c334 <__swhatbuf_r+0x40>
 800c312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c316:	e00e      	b.n	800c336 <__swhatbuf_r+0x42>
 800c318:	466a      	mov	r2, sp
 800c31a:	f000 f903 	bl	800c524 <_fstat_r>
 800c31e:	2800      	cmp	r0, #0
 800c320:	dbf1      	blt.n	800c306 <__swhatbuf_r+0x12>
 800c322:	9a01      	ldr	r2, [sp, #4]
 800c324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c32c:	425a      	negs	r2, r3
 800c32e:	415a      	adcs	r2, r3
 800c330:	602a      	str	r2, [r5, #0]
 800c332:	e7ee      	b.n	800c312 <__swhatbuf_r+0x1e>
 800c334:	2340      	movs	r3, #64	; 0x40
 800c336:	2000      	movs	r0, #0
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	b016      	add	sp, #88	; 0x58
 800c33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c340 <__smakebuf_r>:
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c344:	079d      	lsls	r5, r3, #30
 800c346:	4606      	mov	r6, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	d507      	bpl.n	800c35c <__smakebuf_r+0x1c>
 800c34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	6123      	str	r3, [r4, #16]
 800c354:	2301      	movs	r3, #1
 800c356:	6163      	str	r3, [r4, #20]
 800c358:	b002      	add	sp, #8
 800c35a:	bd70      	pop	{r4, r5, r6, pc}
 800c35c:	ab01      	add	r3, sp, #4
 800c35e:	466a      	mov	r2, sp
 800c360:	f7ff ffc8 	bl	800c2f4 <__swhatbuf_r>
 800c364:	9900      	ldr	r1, [sp, #0]
 800c366:	4605      	mov	r5, r0
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff f963 	bl	800b634 <_malloc_r>
 800c36e:	b948      	cbnz	r0, 800c384 <__smakebuf_r+0x44>
 800c370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c374:	059a      	lsls	r2, r3, #22
 800c376:	d4ef      	bmi.n	800c358 <__smakebuf_r+0x18>
 800c378:	f023 0303 	bic.w	r3, r3, #3
 800c37c:	f043 0302 	orr.w	r3, r3, #2
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	e7e3      	b.n	800c34c <__smakebuf_r+0xc>
 800c384:	4b0d      	ldr	r3, [pc, #52]	; (800c3bc <__smakebuf_r+0x7c>)
 800c386:	62b3      	str	r3, [r6, #40]	; 0x28
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	6020      	str	r0, [r4, #0]
 800c38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	9b00      	ldr	r3, [sp, #0]
 800c394:	6163      	str	r3, [r4, #20]
 800c396:	9b01      	ldr	r3, [sp, #4]
 800c398:	6120      	str	r0, [r4, #16]
 800c39a:	b15b      	cbz	r3, 800c3b4 <__smakebuf_r+0x74>
 800c39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f8d1 	bl	800c548 <_isatty_r>
 800c3a6:	b128      	cbz	r0, 800c3b4 <__smakebuf_r+0x74>
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	89a0      	ldrh	r0, [r4, #12]
 800c3b6:	4305      	orrs	r5, r0
 800c3b8:	81a5      	strh	r5, [r4, #12]
 800c3ba:	e7cd      	b.n	800c358 <__smakebuf_r+0x18>
 800c3bc:	0800c14d 	.word	0x0800c14d

0800c3c0 <_malloc_usable_size_r>:
 800c3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c4:	1f18      	subs	r0, r3, #4
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	bfbc      	itt	lt
 800c3ca:	580b      	ldrlt	r3, [r1, r0]
 800c3cc:	18c0      	addlt	r0, r0, r3
 800c3ce:	4770      	bx	lr

0800c3d0 <_raise_r>:
 800c3d0:	291f      	cmp	r1, #31
 800c3d2:	b538      	push	{r3, r4, r5, lr}
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	460d      	mov	r5, r1
 800c3d8:	d904      	bls.n	800c3e4 <_raise_r+0x14>
 800c3da:	2316      	movs	r3, #22
 800c3dc:	6003      	str	r3, [r0, #0]
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3e6:	b112      	cbz	r2, 800c3ee <_raise_r+0x1e>
 800c3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3ec:	b94b      	cbnz	r3, 800c402 <_raise_r+0x32>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 f830 	bl	800c454 <_getpid_r>
 800c3f4:	462a      	mov	r2, r5
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3fe:	f000 b817 	b.w	800c430 <_kill_r>
 800c402:	2b01      	cmp	r3, #1
 800c404:	d00a      	beq.n	800c41c <_raise_r+0x4c>
 800c406:	1c59      	adds	r1, r3, #1
 800c408:	d103      	bne.n	800c412 <_raise_r+0x42>
 800c40a:	2316      	movs	r3, #22
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	2001      	movs	r0, #1
 800c410:	e7e7      	b.n	800c3e2 <_raise_r+0x12>
 800c412:	2400      	movs	r4, #0
 800c414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c418:	4628      	mov	r0, r5
 800c41a:	4798      	blx	r3
 800c41c:	2000      	movs	r0, #0
 800c41e:	e7e0      	b.n	800c3e2 <_raise_r+0x12>

0800c420 <raise>:
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <raise+0xc>)
 800c422:	4601      	mov	r1, r0
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	f7ff bfd3 	b.w	800c3d0 <_raise_r>
 800c42a:	bf00      	nop
 800c42c:	20000060 	.word	0x20000060

0800c430 <_kill_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d07      	ldr	r5, [pc, #28]	; (800c450 <_kill_r+0x20>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	602b      	str	r3, [r5, #0]
 800c43e:	f7f7 fb85 	bl	8003b4c <_kill>
 800c442:	1c43      	adds	r3, r0, #1
 800c444:	d102      	bne.n	800c44c <_kill_r+0x1c>
 800c446:	682b      	ldr	r3, [r5, #0]
 800c448:	b103      	cbz	r3, 800c44c <_kill_r+0x1c>
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	bd38      	pop	{r3, r4, r5, pc}
 800c44e:	bf00      	nop
 800c450:	200006cc 	.word	0x200006cc

0800c454 <_getpid_r>:
 800c454:	f7f7 bb72 	b.w	8003b3c <_getpid>

0800c458 <__sread>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	460c      	mov	r4, r1
 800c45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c460:	f000 f894 	bl	800c58c <_read_r>
 800c464:	2800      	cmp	r0, #0
 800c466:	bfab      	itete	ge
 800c468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c46a:	89a3      	ldrhlt	r3, [r4, #12]
 800c46c:	181b      	addge	r3, r3, r0
 800c46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c472:	bfac      	ite	ge
 800c474:	6563      	strge	r3, [r4, #84]	; 0x54
 800c476:	81a3      	strhlt	r3, [r4, #12]
 800c478:	bd10      	pop	{r4, pc}

0800c47a <__swrite>:
 800c47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47e:	461f      	mov	r7, r3
 800c480:	898b      	ldrh	r3, [r1, #12]
 800c482:	05db      	lsls	r3, r3, #23
 800c484:	4605      	mov	r5, r0
 800c486:	460c      	mov	r4, r1
 800c488:	4616      	mov	r6, r2
 800c48a:	d505      	bpl.n	800c498 <__swrite+0x1e>
 800c48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c490:	2302      	movs	r3, #2
 800c492:	2200      	movs	r2, #0
 800c494:	f000 f868 	bl	800c568 <_lseek_r>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ae:	f000 b817 	b.w	800c4e0 <_write_r>

0800c4b2 <__sseek>:
 800c4b2:	b510      	push	{r4, lr}
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ba:	f000 f855 	bl	800c568 <_lseek_r>
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	bf15      	itete	ne
 800c4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ce:	81a3      	strheq	r3, [r4, #12]
 800c4d0:	bf18      	it	ne
 800c4d2:	81a3      	strhne	r3, [r4, #12]
 800c4d4:	bd10      	pop	{r4, pc}

0800c4d6 <__sclose>:
 800c4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4da:	f000 b813 	b.w	800c504 <_close_r>
	...

0800c4e0 <_write_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d07      	ldr	r5, [pc, #28]	; (800c500 <_write_r+0x20>)
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	602a      	str	r2, [r5, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f7f7 fb63 	bl	8003bba <_write>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_write_r+0x1e>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_write_r+0x1e>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	200006cc 	.word	0x200006cc

0800c504 <_close_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d06      	ldr	r5, [pc, #24]	; (800c520 <_close_r+0x1c>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	602b      	str	r3, [r5, #0]
 800c510:	f7f7 fb6f 	bl	8003bf2 <_close>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_close_r+0x1a>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_close_r+0x1a>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	200006cc 	.word	0x200006cc

0800c524 <_fstat_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d07      	ldr	r5, [pc, #28]	; (800c544 <_fstat_r+0x20>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	4611      	mov	r1, r2
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	f7f7 fb6a 	bl	8003c0a <_fstat>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	d102      	bne.n	800c540 <_fstat_r+0x1c>
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	b103      	cbz	r3, 800c540 <_fstat_r+0x1c>
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	bd38      	pop	{r3, r4, r5, pc}
 800c542:	bf00      	nop
 800c544:	200006cc 	.word	0x200006cc

0800c548 <_isatty_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	; (800c564 <_isatty_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f7 fb69 	bl	8003c2a <_isatty>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_isatty_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_isatty_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	200006cc 	.word	0x200006cc

0800c568 <_lseek_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d07      	ldr	r5, [pc, #28]	; (800c588 <_lseek_r+0x20>)
 800c56c:	4604      	mov	r4, r0
 800c56e:	4608      	mov	r0, r1
 800c570:	4611      	mov	r1, r2
 800c572:	2200      	movs	r2, #0
 800c574:	602a      	str	r2, [r5, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	f7f7 fb62 	bl	8003c40 <_lseek>
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	d102      	bne.n	800c586 <_lseek_r+0x1e>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	b103      	cbz	r3, 800c586 <_lseek_r+0x1e>
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	200006cc 	.word	0x200006cc

0800c58c <_read_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d07      	ldr	r5, [pc, #28]	; (800c5ac <_read_r+0x20>)
 800c590:	4604      	mov	r4, r0
 800c592:	4608      	mov	r0, r1
 800c594:	4611      	mov	r1, r2
 800c596:	2200      	movs	r2, #0
 800c598:	602a      	str	r2, [r5, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	f7f7 faf0 	bl	8003b80 <_read>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_read_r+0x1e>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_read_r+0x1e>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	200006cc 	.word	0x200006cc

0800c5b0 <atan>:
 800c5b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	ec55 4b10 	vmov	r4, r5, d0
 800c5b8:	4bc3      	ldr	r3, [pc, #780]	; (800c8c8 <atan+0x318>)
 800c5ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c5be:	429e      	cmp	r6, r3
 800c5c0:	46ab      	mov	fp, r5
 800c5c2:	dd18      	ble.n	800c5f6 <atan+0x46>
 800c5c4:	4bc1      	ldr	r3, [pc, #772]	; (800c8cc <atan+0x31c>)
 800c5c6:	429e      	cmp	r6, r3
 800c5c8:	dc01      	bgt.n	800c5ce <atan+0x1e>
 800c5ca:	d109      	bne.n	800c5e0 <atan+0x30>
 800c5cc:	b144      	cbz	r4, 800c5e0 <atan+0x30>
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	462b      	mov	r3, r5
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	f7f3 fe79 	bl	80002cc <__adddf3>
 800c5da:	4604      	mov	r4, r0
 800c5dc:	460d      	mov	r5, r1
 800c5de:	e006      	b.n	800c5ee <atan+0x3e>
 800c5e0:	f1bb 0f00 	cmp.w	fp, #0
 800c5e4:	f300 8131 	bgt.w	800c84a <atan+0x29a>
 800c5e8:	a59b      	add	r5, pc, #620	; (adr r5, 800c858 <atan+0x2a8>)
 800c5ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c5ee:	ec45 4b10 	vmov	d0, r4, r5
 800c5f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	4bb6      	ldr	r3, [pc, #728]	; (800c8d0 <atan+0x320>)
 800c5f8:	429e      	cmp	r6, r3
 800c5fa:	dc14      	bgt.n	800c626 <atan+0x76>
 800c5fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c600:	429e      	cmp	r6, r3
 800c602:	dc0d      	bgt.n	800c620 <atan+0x70>
 800c604:	a396      	add	r3, pc, #600	; (adr r3, 800c860 <atan+0x2b0>)
 800c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60a:	ee10 0a10 	vmov	r0, s0
 800c60e:	4629      	mov	r1, r5
 800c610:	f7f3 fe5c 	bl	80002cc <__adddf3>
 800c614:	4baf      	ldr	r3, [pc, #700]	; (800c8d4 <atan+0x324>)
 800c616:	2200      	movs	r2, #0
 800c618:	f7f4 fa9e 	bl	8000b58 <__aeabi_dcmpgt>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d1e6      	bne.n	800c5ee <atan+0x3e>
 800c620:	f04f 3aff 	mov.w	sl, #4294967295
 800c624:	e02b      	b.n	800c67e <atan+0xce>
 800c626:	f000 f963 	bl	800c8f0 <fabs>
 800c62a:	4bab      	ldr	r3, [pc, #684]	; (800c8d8 <atan+0x328>)
 800c62c:	429e      	cmp	r6, r3
 800c62e:	ec55 4b10 	vmov	r4, r5, d0
 800c632:	f300 80bf 	bgt.w	800c7b4 <atan+0x204>
 800c636:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c63a:	429e      	cmp	r6, r3
 800c63c:	f300 80a0 	bgt.w	800c780 <atan+0x1d0>
 800c640:	ee10 2a10 	vmov	r2, s0
 800c644:	ee10 0a10 	vmov	r0, s0
 800c648:	462b      	mov	r3, r5
 800c64a:	4629      	mov	r1, r5
 800c64c:	f7f3 fe3e 	bl	80002cc <__adddf3>
 800c650:	4ba0      	ldr	r3, [pc, #640]	; (800c8d4 <atan+0x324>)
 800c652:	2200      	movs	r2, #0
 800c654:	f7f3 fe38 	bl	80002c8 <__aeabi_dsub>
 800c658:	2200      	movs	r2, #0
 800c65a:	4606      	mov	r6, r0
 800c65c:	460f      	mov	r7, r1
 800c65e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c662:	4620      	mov	r0, r4
 800c664:	4629      	mov	r1, r5
 800c666:	f7f3 fe31 	bl	80002cc <__adddf3>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	4630      	mov	r0, r6
 800c670:	4639      	mov	r1, r7
 800c672:	f7f4 f90b 	bl	800088c <__aeabi_ddiv>
 800c676:	f04f 0a00 	mov.w	sl, #0
 800c67a:	4604      	mov	r4, r0
 800c67c:	460d      	mov	r5, r1
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 ffd7 	bl	8000638 <__aeabi_dmul>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4680      	mov	r8, r0
 800c690:	4689      	mov	r9, r1
 800c692:	f7f3 ffd1 	bl	8000638 <__aeabi_dmul>
 800c696:	a374      	add	r3, pc, #464	; (adr r3, 800c868 <atan+0x2b8>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	4606      	mov	r6, r0
 800c69e:	460f      	mov	r7, r1
 800c6a0:	f7f3 ffca 	bl	8000638 <__aeabi_dmul>
 800c6a4:	a372      	add	r3, pc, #456	; (adr r3, 800c870 <atan+0x2c0>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f7f3 fe0f 	bl	80002cc <__adddf3>
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	f7f3 ffc1 	bl	8000638 <__aeabi_dmul>
 800c6b6:	a370      	add	r3, pc, #448	; (adr r3, 800c878 <atan+0x2c8>)
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	f7f3 fe06 	bl	80002cc <__adddf3>
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	463b      	mov	r3, r7
 800c6c4:	f7f3 ffb8 	bl	8000638 <__aeabi_dmul>
 800c6c8:	a36d      	add	r3, pc, #436	; (adr r3, 800c880 <atan+0x2d0>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f7f3 fdfd 	bl	80002cc <__adddf3>
 800c6d2:	4632      	mov	r2, r6
 800c6d4:	463b      	mov	r3, r7
 800c6d6:	f7f3 ffaf 	bl	8000638 <__aeabi_dmul>
 800c6da:	a36b      	add	r3, pc, #428	; (adr r3, 800c888 <atan+0x2d8>)
 800c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e0:	f7f3 fdf4 	bl	80002cc <__adddf3>
 800c6e4:	4632      	mov	r2, r6
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	f7f3 ffa6 	bl	8000638 <__aeabi_dmul>
 800c6ec:	a368      	add	r3, pc, #416	; (adr r3, 800c890 <atan+0x2e0>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	f7f3 fdeb 	bl	80002cc <__adddf3>
 800c6f6:	4642      	mov	r2, r8
 800c6f8:	464b      	mov	r3, r9
 800c6fa:	f7f3 ff9d 	bl	8000638 <__aeabi_dmul>
 800c6fe:	a366      	add	r3, pc, #408	; (adr r3, 800c898 <atan+0x2e8>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	4680      	mov	r8, r0
 800c706:	4689      	mov	r9, r1
 800c708:	4630      	mov	r0, r6
 800c70a:	4639      	mov	r1, r7
 800c70c:	f7f3 ff94 	bl	8000638 <__aeabi_dmul>
 800c710:	a363      	add	r3, pc, #396	; (adr r3, 800c8a0 <atan+0x2f0>)
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	f7f3 fdd7 	bl	80002c8 <__aeabi_dsub>
 800c71a:	4632      	mov	r2, r6
 800c71c:	463b      	mov	r3, r7
 800c71e:	f7f3 ff8b 	bl	8000638 <__aeabi_dmul>
 800c722:	a361      	add	r3, pc, #388	; (adr r3, 800c8a8 <atan+0x2f8>)
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	f7f3 fdce 	bl	80002c8 <__aeabi_dsub>
 800c72c:	4632      	mov	r2, r6
 800c72e:	463b      	mov	r3, r7
 800c730:	f7f3 ff82 	bl	8000638 <__aeabi_dmul>
 800c734:	a35e      	add	r3, pc, #376	; (adr r3, 800c8b0 <atan+0x300>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	f7f3 fdc5 	bl	80002c8 <__aeabi_dsub>
 800c73e:	4632      	mov	r2, r6
 800c740:	463b      	mov	r3, r7
 800c742:	f7f3 ff79 	bl	8000638 <__aeabi_dmul>
 800c746:	a35c      	add	r3, pc, #368	; (adr r3, 800c8b8 <atan+0x308>)
 800c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74c:	f7f3 fdbc 	bl	80002c8 <__aeabi_dsub>
 800c750:	4632      	mov	r2, r6
 800c752:	463b      	mov	r3, r7
 800c754:	f7f3 ff70 	bl	8000638 <__aeabi_dmul>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4640      	mov	r0, r8
 800c75e:	4649      	mov	r1, r9
 800c760:	f7f3 fdb4 	bl	80002cc <__adddf3>
 800c764:	4622      	mov	r2, r4
 800c766:	462b      	mov	r3, r5
 800c768:	f7f3 ff66 	bl	8000638 <__aeabi_dmul>
 800c76c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c770:	4602      	mov	r2, r0
 800c772:	460b      	mov	r3, r1
 800c774:	d14b      	bne.n	800c80e <atan+0x25e>
 800c776:	4620      	mov	r0, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f3 fda5 	bl	80002c8 <__aeabi_dsub>
 800c77e:	e72c      	b.n	800c5da <atan+0x2a>
 800c780:	ee10 0a10 	vmov	r0, s0
 800c784:	4b53      	ldr	r3, [pc, #332]	; (800c8d4 <atan+0x324>)
 800c786:	2200      	movs	r2, #0
 800c788:	4629      	mov	r1, r5
 800c78a:	f7f3 fd9d 	bl	80002c8 <__aeabi_dsub>
 800c78e:	4b51      	ldr	r3, [pc, #324]	; (800c8d4 <atan+0x324>)
 800c790:	4606      	mov	r6, r0
 800c792:	460f      	mov	r7, r1
 800c794:	2200      	movs	r2, #0
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd97 	bl	80002cc <__adddf3>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	f7f4 f871 	bl	800088c <__aeabi_ddiv>
 800c7aa:	f04f 0a01 	mov.w	sl, #1
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	e764      	b.n	800c67e <atan+0xce>
 800c7b4:	4b49      	ldr	r3, [pc, #292]	; (800c8dc <atan+0x32c>)
 800c7b6:	429e      	cmp	r6, r3
 800c7b8:	da1d      	bge.n	800c7f6 <atan+0x246>
 800c7ba:	ee10 0a10 	vmov	r0, s0
 800c7be:	4b48      	ldr	r3, [pc, #288]	; (800c8e0 <atan+0x330>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	4629      	mov	r1, r5
 800c7c4:	f7f3 fd80 	bl	80002c8 <__aeabi_dsub>
 800c7c8:	4b45      	ldr	r3, [pc, #276]	; (800c8e0 <atan+0x330>)
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	460f      	mov	r7, r1
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f7f3 ff30 	bl	8000638 <__aeabi_dmul>
 800c7d8:	4b3e      	ldr	r3, [pc, #248]	; (800c8d4 <atan+0x324>)
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f7f3 fd76 	bl	80002cc <__adddf3>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	f7f4 f850 	bl	800088c <__aeabi_ddiv>
 800c7ec:	f04f 0a02 	mov.w	sl, #2
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	e743      	b.n	800c67e <atan+0xce>
 800c7f6:	462b      	mov	r3, r5
 800c7f8:	ee10 2a10 	vmov	r2, s0
 800c7fc:	4939      	ldr	r1, [pc, #228]	; (800c8e4 <atan+0x334>)
 800c7fe:	2000      	movs	r0, #0
 800c800:	f7f4 f844 	bl	800088c <__aeabi_ddiv>
 800c804:	f04f 0a03 	mov.w	sl, #3
 800c808:	4604      	mov	r4, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	e737      	b.n	800c67e <atan+0xce>
 800c80e:	4b36      	ldr	r3, [pc, #216]	; (800c8e8 <atan+0x338>)
 800c810:	4e36      	ldr	r6, [pc, #216]	; (800c8ec <atan+0x33c>)
 800c812:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c816:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c81a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c81e:	f7f3 fd53 	bl	80002c8 <__aeabi_dsub>
 800c822:	4622      	mov	r2, r4
 800c824:	462b      	mov	r3, r5
 800c826:	f7f3 fd4f 	bl	80002c8 <__aeabi_dsub>
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c832:	f7f3 fd49 	bl	80002c8 <__aeabi_dsub>
 800c836:	f1bb 0f00 	cmp.w	fp, #0
 800c83a:	4604      	mov	r4, r0
 800c83c:	460d      	mov	r5, r1
 800c83e:	f6bf aed6 	bge.w	800c5ee <atan+0x3e>
 800c842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c846:	461d      	mov	r5, r3
 800c848:	e6d1      	b.n	800c5ee <atan+0x3e>
 800c84a:	a51d      	add	r5, pc, #116	; (adr r5, 800c8c0 <atan+0x310>)
 800c84c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c850:	e6cd      	b.n	800c5ee <atan+0x3e>
 800c852:	bf00      	nop
 800c854:	f3af 8000 	nop.w
 800c858:	54442d18 	.word	0x54442d18
 800c85c:	bff921fb 	.word	0xbff921fb
 800c860:	8800759c 	.word	0x8800759c
 800c864:	7e37e43c 	.word	0x7e37e43c
 800c868:	e322da11 	.word	0xe322da11
 800c86c:	3f90ad3a 	.word	0x3f90ad3a
 800c870:	24760deb 	.word	0x24760deb
 800c874:	3fa97b4b 	.word	0x3fa97b4b
 800c878:	a0d03d51 	.word	0xa0d03d51
 800c87c:	3fb10d66 	.word	0x3fb10d66
 800c880:	c54c206e 	.word	0xc54c206e
 800c884:	3fb745cd 	.word	0x3fb745cd
 800c888:	920083ff 	.word	0x920083ff
 800c88c:	3fc24924 	.word	0x3fc24924
 800c890:	5555550d 	.word	0x5555550d
 800c894:	3fd55555 	.word	0x3fd55555
 800c898:	2c6a6c2f 	.word	0x2c6a6c2f
 800c89c:	bfa2b444 	.word	0xbfa2b444
 800c8a0:	52defd9a 	.word	0x52defd9a
 800c8a4:	3fadde2d 	.word	0x3fadde2d
 800c8a8:	af749a6d 	.word	0xaf749a6d
 800c8ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800c8b0:	fe231671 	.word	0xfe231671
 800c8b4:	3fbc71c6 	.word	0x3fbc71c6
 800c8b8:	9998ebc4 	.word	0x9998ebc4
 800c8bc:	3fc99999 	.word	0x3fc99999
 800c8c0:	54442d18 	.word	0x54442d18
 800c8c4:	3ff921fb 	.word	0x3ff921fb
 800c8c8:	440fffff 	.word	0x440fffff
 800c8cc:	7ff00000 	.word	0x7ff00000
 800c8d0:	3fdbffff 	.word	0x3fdbffff
 800c8d4:	3ff00000 	.word	0x3ff00000
 800c8d8:	3ff2ffff 	.word	0x3ff2ffff
 800c8dc:	40038000 	.word	0x40038000
 800c8e0:	3ff80000 	.word	0x3ff80000
 800c8e4:	bff00000 	.word	0xbff00000
 800c8e8:	0800df20 	.word	0x0800df20
 800c8ec:	0800df00 	.word	0x0800df00

0800c8f0 <fabs>:
 800c8f0:	ec51 0b10 	vmov	r0, r1, d0
 800c8f4:	ee10 2a10 	vmov	r2, s0
 800c8f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8fc:	ec43 2b10 	vmov	d0, r2, r3
 800c900:	4770      	bx	lr
 800c902:	0000      	movs	r0, r0
 800c904:	0000      	movs	r0, r0
	...

0800c908 <tan>:
 800c908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c90a:	ec53 2b10 	vmov	r2, r3, d0
 800c90e:	4816      	ldr	r0, [pc, #88]	; (800c968 <tan+0x60>)
 800c910:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c914:	4281      	cmp	r1, r0
 800c916:	dc07      	bgt.n	800c928 <tan+0x20>
 800c918:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800c960 <tan+0x58>
 800c91c:	2001      	movs	r0, #1
 800c91e:	b005      	add	sp, #20
 800c920:	f85d eb04 	ldr.w	lr, [sp], #4
 800c924:	f000 bd80 	b.w	800d428 <__kernel_tan>
 800c928:	4810      	ldr	r0, [pc, #64]	; (800c96c <tan+0x64>)
 800c92a:	4281      	cmp	r1, r0
 800c92c:	dd09      	ble.n	800c942 <tan+0x3a>
 800c92e:	ee10 0a10 	vmov	r0, s0
 800c932:	4619      	mov	r1, r3
 800c934:	f7f3 fcc8 	bl	80002c8 <__aeabi_dsub>
 800c938:	ec41 0b10 	vmov	d0, r0, r1
 800c93c:	b005      	add	sp, #20
 800c93e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c942:	4668      	mov	r0, sp
 800c944:	f000 f814 	bl	800c970 <__ieee754_rem_pio2>
 800c948:	0040      	lsls	r0, r0, #1
 800c94a:	f000 0002 	and.w	r0, r0, #2
 800c94e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c952:	ed9d 0b00 	vldr	d0, [sp]
 800c956:	f1c0 0001 	rsb	r0, r0, #1
 800c95a:	f000 fd65 	bl	800d428 <__kernel_tan>
 800c95e:	e7ed      	b.n	800c93c <tan+0x34>
	...
 800c968:	3fe921fb 	.word	0x3fe921fb
 800c96c:	7fefffff 	.word	0x7fefffff

0800c970 <__ieee754_rem_pio2>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	ed2d 8b02 	vpush	{d8}
 800c978:	ec55 4b10 	vmov	r4, r5, d0
 800c97c:	4bca      	ldr	r3, [pc, #808]	; (800cca8 <__ieee754_rem_pio2+0x338>)
 800c97e:	b08b      	sub	sp, #44	; 0x2c
 800c980:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c984:	4598      	cmp	r8, r3
 800c986:	4682      	mov	sl, r0
 800c988:	9502      	str	r5, [sp, #8]
 800c98a:	dc08      	bgt.n	800c99e <__ieee754_rem_pio2+0x2e>
 800c98c:	2200      	movs	r2, #0
 800c98e:	2300      	movs	r3, #0
 800c990:	ed80 0b00 	vstr	d0, [r0]
 800c994:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c998:	f04f 0b00 	mov.w	fp, #0
 800c99c:	e028      	b.n	800c9f0 <__ieee754_rem_pio2+0x80>
 800c99e:	4bc3      	ldr	r3, [pc, #780]	; (800ccac <__ieee754_rem_pio2+0x33c>)
 800c9a0:	4598      	cmp	r8, r3
 800c9a2:	dc78      	bgt.n	800ca96 <__ieee754_rem_pio2+0x126>
 800c9a4:	9b02      	ldr	r3, [sp, #8]
 800c9a6:	4ec2      	ldr	r6, [pc, #776]	; (800ccb0 <__ieee754_rem_pio2+0x340>)
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	ee10 0a10 	vmov	r0, s0
 800c9ae:	a3b0      	add	r3, pc, #704	; (adr r3, 800cc70 <__ieee754_rem_pio2+0x300>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	dd39      	ble.n	800ca2c <__ieee754_rem_pio2+0xbc>
 800c9b8:	f7f3 fc86 	bl	80002c8 <__aeabi_dsub>
 800c9bc:	45b0      	cmp	r8, r6
 800c9be:	4604      	mov	r4, r0
 800c9c0:	460d      	mov	r5, r1
 800c9c2:	d01b      	beq.n	800c9fc <__ieee754_rem_pio2+0x8c>
 800c9c4:	a3ac      	add	r3, pc, #688	; (adr r3, 800cc78 <__ieee754_rem_pio2+0x308>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	f7f3 fc7d 	bl	80002c8 <__aeabi_dsub>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	e9ca 2300 	strd	r2, r3, [sl]
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f7f3 fc75 	bl	80002c8 <__aeabi_dsub>
 800c9de:	a3a6      	add	r3, pc, #664	; (adr r3, 800cc78 <__ieee754_rem_pio2+0x308>)
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	f7f3 fc70 	bl	80002c8 <__aeabi_dsub>
 800c9e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c9ec:	f04f 0b01 	mov.w	fp, #1
 800c9f0:	4658      	mov	r0, fp
 800c9f2:	b00b      	add	sp, #44	; 0x2c
 800c9f4:	ecbd 8b02 	vpop	{d8}
 800c9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fc:	a3a0      	add	r3, pc, #640	; (adr r3, 800cc80 <__ieee754_rem_pio2+0x310>)
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f7f3 fc61 	bl	80002c8 <__aeabi_dsub>
 800ca06:	a3a0      	add	r3, pc, #640	; (adr r3, 800cc88 <__ieee754_rem_pio2+0x318>)
 800ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	460d      	mov	r5, r1
 800ca10:	f7f3 fc5a 	bl	80002c8 <__aeabi_dsub>
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	e9ca 2300 	strd	r2, r3, [sl]
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	4629      	mov	r1, r5
 800ca20:	f7f3 fc52 	bl	80002c8 <__aeabi_dsub>
 800ca24:	a398      	add	r3, pc, #608	; (adr r3, 800cc88 <__ieee754_rem_pio2+0x318>)
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	e7db      	b.n	800c9e4 <__ieee754_rem_pio2+0x74>
 800ca2c:	f7f3 fc4e 	bl	80002cc <__adddf3>
 800ca30:	45b0      	cmp	r8, r6
 800ca32:	4604      	mov	r4, r0
 800ca34:	460d      	mov	r5, r1
 800ca36:	d016      	beq.n	800ca66 <__ieee754_rem_pio2+0xf6>
 800ca38:	a38f      	add	r3, pc, #572	; (adr r3, 800cc78 <__ieee754_rem_pio2+0x308>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fc45 	bl	80002cc <__adddf3>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	e9ca 2300 	strd	r2, r3, [sl]
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f7f3 fc3b 	bl	80002c8 <__aeabi_dsub>
 800ca52:	a389      	add	r3, pc, #548	; (adr r3, 800cc78 <__ieee754_rem_pio2+0x308>)
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	f7f3 fc38 	bl	80002cc <__adddf3>
 800ca5c:	f04f 3bff 	mov.w	fp, #4294967295
 800ca60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca64:	e7c4      	b.n	800c9f0 <__ieee754_rem_pio2+0x80>
 800ca66:	a386      	add	r3, pc, #536	; (adr r3, 800cc80 <__ieee754_rem_pio2+0x310>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	f7f3 fc2e 	bl	80002cc <__adddf3>
 800ca70:	a385      	add	r3, pc, #532	; (adr r3, 800cc88 <__ieee754_rem_pio2+0x318>)
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	4604      	mov	r4, r0
 800ca78:	460d      	mov	r5, r1
 800ca7a:	f7f3 fc27 	bl	80002cc <__adddf3>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	e9ca 2300 	strd	r2, r3, [sl]
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f3 fc1d 	bl	80002c8 <__aeabi_dsub>
 800ca8e:	a37e      	add	r3, pc, #504	; (adr r3, 800cc88 <__ieee754_rem_pio2+0x318>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	e7e0      	b.n	800ca58 <__ieee754_rem_pio2+0xe8>
 800ca96:	4b87      	ldr	r3, [pc, #540]	; (800ccb4 <__ieee754_rem_pio2+0x344>)
 800ca98:	4598      	cmp	r8, r3
 800ca9a:	f300 80d9 	bgt.w	800cc50 <__ieee754_rem_pio2+0x2e0>
 800ca9e:	f7ff ff27 	bl	800c8f0 <fabs>
 800caa2:	ec55 4b10 	vmov	r4, r5, d0
 800caa6:	ee10 0a10 	vmov	r0, s0
 800caaa:	a379      	add	r3, pc, #484	; (adr r3, 800cc90 <__ieee754_rem_pio2+0x320>)
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	4629      	mov	r1, r5
 800cab2:	f7f3 fdc1 	bl	8000638 <__aeabi_dmul>
 800cab6:	4b80      	ldr	r3, [pc, #512]	; (800ccb8 <__ieee754_rem_pio2+0x348>)
 800cab8:	2200      	movs	r2, #0
 800caba:	f7f3 fc07 	bl	80002cc <__adddf3>
 800cabe:	f7f4 f86b 	bl	8000b98 <__aeabi_d2iz>
 800cac2:	4683      	mov	fp, r0
 800cac4:	f7f3 fd4e 	bl	8000564 <__aeabi_i2d>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	ec43 2b18 	vmov	d8, r2, r3
 800cad0:	a367      	add	r3, pc, #412	; (adr r3, 800cc70 <__ieee754_rem_pio2+0x300>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	f7f3 fdaf 	bl	8000638 <__aeabi_dmul>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4620      	mov	r0, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	f7f3 fbf1 	bl	80002c8 <__aeabi_dsub>
 800cae6:	a364      	add	r3, pc, #400	; (adr r3, 800cc78 <__ieee754_rem_pio2+0x308>)
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	4606      	mov	r6, r0
 800caee:	460f      	mov	r7, r1
 800caf0:	ec51 0b18 	vmov	r0, r1, d8
 800caf4:	f7f3 fda0 	bl	8000638 <__aeabi_dmul>
 800caf8:	f1bb 0f1f 	cmp.w	fp, #31
 800cafc:	4604      	mov	r4, r0
 800cafe:	460d      	mov	r5, r1
 800cb00:	dc0d      	bgt.n	800cb1e <__ieee754_rem_pio2+0x1ae>
 800cb02:	4b6e      	ldr	r3, [pc, #440]	; (800ccbc <__ieee754_rem_pio2+0x34c>)
 800cb04:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0c:	4543      	cmp	r3, r8
 800cb0e:	d006      	beq.n	800cb1e <__ieee754_rem_pio2+0x1ae>
 800cb10:	4622      	mov	r2, r4
 800cb12:	462b      	mov	r3, r5
 800cb14:	4630      	mov	r0, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	f7f3 fbd6 	bl	80002c8 <__aeabi_dsub>
 800cb1c:	e00f      	b.n	800cb3e <__ieee754_rem_pio2+0x1ce>
 800cb1e:	462b      	mov	r3, r5
 800cb20:	4622      	mov	r2, r4
 800cb22:	4630      	mov	r0, r6
 800cb24:	4639      	mov	r1, r7
 800cb26:	f7f3 fbcf 	bl	80002c8 <__aeabi_dsub>
 800cb2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cb2e:	9303      	str	r3, [sp, #12]
 800cb30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cb38:	f1b8 0f10 	cmp.w	r8, #16
 800cb3c:	dc02      	bgt.n	800cb44 <__ieee754_rem_pio2+0x1d4>
 800cb3e:	e9ca 0100 	strd	r0, r1, [sl]
 800cb42:	e039      	b.n	800cbb8 <__ieee754_rem_pio2+0x248>
 800cb44:	a34e      	add	r3, pc, #312	; (adr r3, 800cc80 <__ieee754_rem_pio2+0x310>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	ec51 0b18 	vmov	r0, r1, d8
 800cb4e:	f7f3 fd73 	bl	8000638 <__aeabi_dmul>
 800cb52:	4604      	mov	r4, r0
 800cb54:	460d      	mov	r5, r1
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	f7f3 fbb3 	bl	80002c8 <__aeabi_dsub>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4680      	mov	r8, r0
 800cb68:	4689      	mov	r9, r1
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	f7f3 fbab 	bl	80002c8 <__aeabi_dsub>
 800cb72:	4622      	mov	r2, r4
 800cb74:	462b      	mov	r3, r5
 800cb76:	f7f3 fba7 	bl	80002c8 <__aeabi_dsub>
 800cb7a:	a343      	add	r3, pc, #268	; (adr r3, 800cc88 <__ieee754_rem_pio2+0x318>)
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	ec51 0b18 	vmov	r0, r1, d8
 800cb88:	f7f3 fd56 	bl	8000638 <__aeabi_dmul>
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	462b      	mov	r3, r5
 800cb90:	f7f3 fb9a 	bl	80002c8 <__aeabi_dsub>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4604      	mov	r4, r0
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	4649      	mov	r1, r9
 800cba0:	f7f3 fb92 	bl	80002c8 <__aeabi_dsub>
 800cba4:	9a03      	ldr	r2, [sp, #12]
 800cba6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b31      	cmp	r3, #49	; 0x31
 800cbae:	dc24      	bgt.n	800cbfa <__ieee754_rem_pio2+0x28a>
 800cbb0:	e9ca 0100 	strd	r0, r1, [sl]
 800cbb4:	4646      	mov	r6, r8
 800cbb6:	464f      	mov	r7, r9
 800cbb8:	e9da 8900 	ldrd	r8, r9, [sl]
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4642      	mov	r2, r8
 800cbc0:	464b      	mov	r3, r9
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	f7f3 fb80 	bl	80002c8 <__aeabi_dsub>
 800cbc8:	462b      	mov	r3, r5
 800cbca:	4622      	mov	r2, r4
 800cbcc:	f7f3 fb7c 	bl	80002c8 <__aeabi_dsub>
 800cbd0:	9b02      	ldr	r3, [sp, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cbd8:	f6bf af0a 	bge.w	800c9f0 <__ieee754_rem_pio2+0x80>
 800cbdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cbe0:	f8ca 3004 	str.w	r3, [sl, #4]
 800cbe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbe8:	f8ca 8000 	str.w	r8, [sl]
 800cbec:	f8ca 0008 	str.w	r0, [sl, #8]
 800cbf0:	f8ca 300c 	str.w	r3, [sl, #12]
 800cbf4:	f1cb 0b00 	rsb	fp, fp, #0
 800cbf8:	e6fa      	b.n	800c9f0 <__ieee754_rem_pio2+0x80>
 800cbfa:	a327      	add	r3, pc, #156	; (adr r3, 800cc98 <__ieee754_rem_pio2+0x328>)
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	ec51 0b18 	vmov	r0, r1, d8
 800cc04:	f7f3 fd18 	bl	8000638 <__aeabi_dmul>
 800cc08:	4604      	mov	r4, r0
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4640      	mov	r0, r8
 800cc12:	4649      	mov	r1, r9
 800cc14:	f7f3 fb58 	bl	80002c8 <__aeabi_dsub>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	460f      	mov	r7, r1
 800cc20:	4640      	mov	r0, r8
 800cc22:	4649      	mov	r1, r9
 800cc24:	f7f3 fb50 	bl	80002c8 <__aeabi_dsub>
 800cc28:	4622      	mov	r2, r4
 800cc2a:	462b      	mov	r3, r5
 800cc2c:	f7f3 fb4c 	bl	80002c8 <__aeabi_dsub>
 800cc30:	a31b      	add	r3, pc, #108	; (adr r3, 800cca0 <__ieee754_rem_pio2+0x330>)
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	4604      	mov	r4, r0
 800cc38:	460d      	mov	r5, r1
 800cc3a:	ec51 0b18 	vmov	r0, r1, d8
 800cc3e:	f7f3 fcfb 	bl	8000638 <__aeabi_dmul>
 800cc42:	4622      	mov	r2, r4
 800cc44:	462b      	mov	r3, r5
 800cc46:	f7f3 fb3f 	bl	80002c8 <__aeabi_dsub>
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	460d      	mov	r5, r1
 800cc4e:	e75f      	b.n	800cb10 <__ieee754_rem_pio2+0x1a0>
 800cc50:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <__ieee754_rem_pio2+0x350>)
 800cc52:	4598      	cmp	r8, r3
 800cc54:	dd36      	ble.n	800ccc4 <__ieee754_rem_pio2+0x354>
 800cc56:	ee10 2a10 	vmov	r2, s0
 800cc5a:	462b      	mov	r3, r5
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fb32 	bl	80002c8 <__aeabi_dsub>
 800cc64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cc68:	e9ca 0100 	strd	r0, r1, [sl]
 800cc6c:	e694      	b.n	800c998 <__ieee754_rem_pio2+0x28>
 800cc6e:	bf00      	nop
 800cc70:	54400000 	.word	0x54400000
 800cc74:	3ff921fb 	.word	0x3ff921fb
 800cc78:	1a626331 	.word	0x1a626331
 800cc7c:	3dd0b461 	.word	0x3dd0b461
 800cc80:	1a600000 	.word	0x1a600000
 800cc84:	3dd0b461 	.word	0x3dd0b461
 800cc88:	2e037073 	.word	0x2e037073
 800cc8c:	3ba3198a 	.word	0x3ba3198a
 800cc90:	6dc9c883 	.word	0x6dc9c883
 800cc94:	3fe45f30 	.word	0x3fe45f30
 800cc98:	2e000000 	.word	0x2e000000
 800cc9c:	3ba3198a 	.word	0x3ba3198a
 800cca0:	252049c1 	.word	0x252049c1
 800cca4:	397b839a 	.word	0x397b839a
 800cca8:	3fe921fb 	.word	0x3fe921fb
 800ccac:	4002d97b 	.word	0x4002d97b
 800ccb0:	3ff921fb 	.word	0x3ff921fb
 800ccb4:	413921fb 	.word	0x413921fb
 800ccb8:	3fe00000 	.word	0x3fe00000
 800ccbc:	0800df40 	.word	0x0800df40
 800ccc0:	7fefffff 	.word	0x7fefffff
 800ccc4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ccc8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cccc:	ee10 0a10 	vmov	r0, s0
 800ccd0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ccd4:	ee10 6a10 	vmov	r6, s0
 800ccd8:	460f      	mov	r7, r1
 800ccda:	f7f3 ff5d 	bl	8000b98 <__aeabi_d2iz>
 800ccde:	f7f3 fc41 	bl	8000564 <__aeabi_i2d>
 800cce2:	4602      	mov	r2, r0
 800cce4:	460b      	mov	r3, r1
 800cce6:	4630      	mov	r0, r6
 800cce8:	4639      	mov	r1, r7
 800ccea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ccee:	f7f3 faeb 	bl	80002c8 <__aeabi_dsub>
 800ccf2:	4b23      	ldr	r3, [pc, #140]	; (800cd80 <__ieee754_rem_pio2+0x410>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f7f3 fc9f 	bl	8000638 <__aeabi_dmul>
 800ccfa:	460f      	mov	r7, r1
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	f7f3 ff4b 	bl	8000b98 <__aeabi_d2iz>
 800cd02:	f7f3 fc2f 	bl	8000564 <__aeabi_i2d>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cd12:	f7f3 fad9 	bl	80002c8 <__aeabi_dsub>
 800cd16:	4b1a      	ldr	r3, [pc, #104]	; (800cd80 <__ieee754_rem_pio2+0x410>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f7f3 fc8d 	bl	8000638 <__aeabi_dmul>
 800cd1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd22:	ad04      	add	r5, sp, #16
 800cd24:	f04f 0803 	mov.w	r8, #3
 800cd28:	46a9      	mov	r9, r5
 800cd2a:	2600      	movs	r6, #0
 800cd2c:	2700      	movs	r7, #0
 800cd2e:	4632      	mov	r2, r6
 800cd30:	463b      	mov	r3, r7
 800cd32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800cd36:	46c3      	mov	fp, r8
 800cd38:	3d08      	subs	r5, #8
 800cd3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd3e:	f7f3 fee3 	bl	8000b08 <__aeabi_dcmpeq>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d1f3      	bne.n	800cd2e <__ieee754_rem_pio2+0x3be>
 800cd46:	4b0f      	ldr	r3, [pc, #60]	; (800cd84 <__ieee754_rem_pio2+0x414>)
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	4622      	mov	r2, r4
 800cd50:	465b      	mov	r3, fp
 800cd52:	4651      	mov	r1, sl
 800cd54:	4648      	mov	r0, r9
 800cd56:	f000 f817 	bl	800cd88 <__kernel_rem_pio2>
 800cd5a:	9b02      	ldr	r3, [sp, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	4683      	mov	fp, r0
 800cd60:	f6bf ae46 	bge.w	800c9f0 <__ieee754_rem_pio2+0x80>
 800cd64:	e9da 2100 	ldrd	r2, r1, [sl]
 800cd68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd6c:	e9ca 2300 	strd	r2, r3, [sl]
 800cd70:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cd74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd78:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cd7c:	e73a      	b.n	800cbf4 <__ieee754_rem_pio2+0x284>
 800cd7e:	bf00      	nop
 800cd80:	41700000 	.word	0x41700000
 800cd84:	0800dfc0 	.word	0x0800dfc0

0800cd88 <__kernel_rem_pio2>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	ed2d 8b02 	vpush	{d8}
 800cd90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800cd94:	f112 0f14 	cmn.w	r2, #20
 800cd98:	9308      	str	r3, [sp, #32]
 800cd9a:	9101      	str	r1, [sp, #4]
 800cd9c:	4bc4      	ldr	r3, [pc, #784]	; (800d0b0 <__kernel_rem_pio2+0x328>)
 800cd9e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800cda0:	900b      	str	r0, [sp, #44]	; 0x2c
 800cda2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cda6:	9302      	str	r3, [sp, #8]
 800cda8:	9b08      	ldr	r3, [sp, #32]
 800cdaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdae:	bfa8      	it	ge
 800cdb0:	1ed4      	subge	r4, r2, #3
 800cdb2:	9306      	str	r3, [sp, #24]
 800cdb4:	bfb2      	itee	lt
 800cdb6:	2400      	movlt	r4, #0
 800cdb8:	2318      	movge	r3, #24
 800cdba:	fb94 f4f3 	sdivge	r4, r4, r3
 800cdbe:	f06f 0317 	mvn.w	r3, #23
 800cdc2:	fb04 3303 	mla	r3, r4, r3, r3
 800cdc6:	eb03 0a02 	add.w	sl, r3, r2
 800cdca:	9b02      	ldr	r3, [sp, #8]
 800cdcc:	9a06      	ldr	r2, [sp, #24]
 800cdce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d0a0 <__kernel_rem_pio2+0x318>
 800cdd2:	eb03 0802 	add.w	r8, r3, r2
 800cdd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cdd8:	1aa7      	subs	r7, r4, r2
 800cdda:	ae22      	add	r6, sp, #136	; 0x88
 800cddc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cde0:	2500      	movs	r5, #0
 800cde2:	4545      	cmp	r5, r8
 800cde4:	dd13      	ble.n	800ce0e <__kernel_rem_pio2+0x86>
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d0a0 <__kernel_rem_pio2+0x318>
 800cdec:	aa22      	add	r2, sp, #136	; 0x88
 800cdee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cdf2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800cdf6:	f04f 0800 	mov.w	r8, #0
 800cdfa:	9b02      	ldr	r3, [sp, #8]
 800cdfc:	4598      	cmp	r8, r3
 800cdfe:	dc2f      	bgt.n	800ce60 <__kernel_rem_pio2+0xd8>
 800ce00:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ce04:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ce08:	462f      	mov	r7, r5
 800ce0a:	2600      	movs	r6, #0
 800ce0c:	e01b      	b.n	800ce46 <__kernel_rem_pio2+0xbe>
 800ce0e:	42ef      	cmn	r7, r5
 800ce10:	d407      	bmi.n	800ce22 <__kernel_rem_pio2+0x9a>
 800ce12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ce16:	f7f3 fba5 	bl	8000564 <__aeabi_i2d>
 800ce1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ce1e:	3501      	adds	r5, #1
 800ce20:	e7df      	b.n	800cde2 <__kernel_rem_pio2+0x5a>
 800ce22:	ec51 0b18 	vmov	r0, r1, d8
 800ce26:	e7f8      	b.n	800ce1a <__kernel_rem_pio2+0x92>
 800ce28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ce30:	f7f3 fc02 	bl	8000638 <__aeabi_dmul>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce3c:	f7f3 fa46 	bl	80002cc <__adddf3>
 800ce40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce44:	3601      	adds	r6, #1
 800ce46:	9b06      	ldr	r3, [sp, #24]
 800ce48:	429e      	cmp	r6, r3
 800ce4a:	f1a7 0708 	sub.w	r7, r7, #8
 800ce4e:	ddeb      	ble.n	800ce28 <__kernel_rem_pio2+0xa0>
 800ce50:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ce54:	f108 0801 	add.w	r8, r8, #1
 800ce58:	ecab 7b02 	vstmia	fp!, {d7}
 800ce5c:	3508      	adds	r5, #8
 800ce5e:	e7cc      	b.n	800cdfa <__kernel_rem_pio2+0x72>
 800ce60:	9b02      	ldr	r3, [sp, #8]
 800ce62:	aa0e      	add	r2, sp, #56	; 0x38
 800ce64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce68:	930d      	str	r3, [sp, #52]	; 0x34
 800ce6a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ce6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ce70:	9c02      	ldr	r4, [sp, #8]
 800ce72:	930c      	str	r3, [sp, #48]	; 0x30
 800ce74:	00e3      	lsls	r3, r4, #3
 800ce76:	930a      	str	r3, [sp, #40]	; 0x28
 800ce78:	ab9a      	add	r3, sp, #616	; 0x268
 800ce7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce7e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ce82:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ce86:	ab72      	add	r3, sp, #456	; 0x1c8
 800ce88:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ce8c:	46c3      	mov	fp, r8
 800ce8e:	46a1      	mov	r9, r4
 800ce90:	f1b9 0f00 	cmp.w	r9, #0
 800ce94:	f1a5 0508 	sub.w	r5, r5, #8
 800ce98:	dc77      	bgt.n	800cf8a <__kernel_rem_pio2+0x202>
 800ce9a:	ec47 6b10 	vmov	d0, r6, r7
 800ce9e:	4650      	mov	r0, sl
 800cea0:	f000 fd4e 	bl	800d940 <scalbn>
 800cea4:	ec57 6b10 	vmov	r6, r7, d0
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ceae:	ee10 0a10 	vmov	r0, s0
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 fbc0 	bl	8000638 <__aeabi_dmul>
 800ceb8:	ec41 0b10 	vmov	d0, r0, r1
 800cebc:	f000 fcc0 	bl	800d840 <floor>
 800cec0:	4b7c      	ldr	r3, [pc, #496]	; (800d0b4 <__kernel_rem_pio2+0x32c>)
 800cec2:	ec51 0b10 	vmov	r0, r1, d0
 800cec6:	2200      	movs	r2, #0
 800cec8:	f7f3 fbb6 	bl	8000638 <__aeabi_dmul>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 f9f8 	bl	80002c8 <__aeabi_dsub>
 800ced8:	460f      	mov	r7, r1
 800ceda:	4606      	mov	r6, r0
 800cedc:	f7f3 fe5c 	bl	8000b98 <__aeabi_d2iz>
 800cee0:	9004      	str	r0, [sp, #16]
 800cee2:	f7f3 fb3f 	bl	8000564 <__aeabi_i2d>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	4630      	mov	r0, r6
 800ceec:	4639      	mov	r1, r7
 800ceee:	f7f3 f9eb 	bl	80002c8 <__aeabi_dsub>
 800cef2:	f1ba 0f00 	cmp.w	sl, #0
 800cef6:	4606      	mov	r6, r0
 800cef8:	460f      	mov	r7, r1
 800cefa:	dd6d      	ble.n	800cfd8 <__kernel_rem_pio2+0x250>
 800cefc:	1e62      	subs	r2, r4, #1
 800cefe:	ab0e      	add	r3, sp, #56	; 0x38
 800cf00:	9d04      	ldr	r5, [sp, #16]
 800cf02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cf06:	f1ca 0118 	rsb	r1, sl, #24
 800cf0a:	fa40 f301 	asr.w	r3, r0, r1
 800cf0e:	441d      	add	r5, r3
 800cf10:	408b      	lsls	r3, r1
 800cf12:	1ac0      	subs	r0, r0, r3
 800cf14:	ab0e      	add	r3, sp, #56	; 0x38
 800cf16:	9504      	str	r5, [sp, #16]
 800cf18:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cf1c:	f1ca 0317 	rsb	r3, sl, #23
 800cf20:	fa40 fb03 	asr.w	fp, r0, r3
 800cf24:	f1bb 0f00 	cmp.w	fp, #0
 800cf28:	dd65      	ble.n	800cff6 <__kernel_rem_pio2+0x26e>
 800cf2a:	9b04      	ldr	r3, [sp, #16]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	3301      	adds	r3, #1
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	4615      	mov	r5, r2
 800cf34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cf38:	4294      	cmp	r4, r2
 800cf3a:	f300 809c 	bgt.w	800d076 <__kernel_rem_pio2+0x2ee>
 800cf3e:	f1ba 0f00 	cmp.w	sl, #0
 800cf42:	dd07      	ble.n	800cf54 <__kernel_rem_pio2+0x1cc>
 800cf44:	f1ba 0f01 	cmp.w	sl, #1
 800cf48:	f000 80c0 	beq.w	800d0cc <__kernel_rem_pio2+0x344>
 800cf4c:	f1ba 0f02 	cmp.w	sl, #2
 800cf50:	f000 80c6 	beq.w	800d0e0 <__kernel_rem_pio2+0x358>
 800cf54:	f1bb 0f02 	cmp.w	fp, #2
 800cf58:	d14d      	bne.n	800cff6 <__kernel_rem_pio2+0x26e>
 800cf5a:	4632      	mov	r2, r6
 800cf5c:	463b      	mov	r3, r7
 800cf5e:	4956      	ldr	r1, [pc, #344]	; (800d0b8 <__kernel_rem_pio2+0x330>)
 800cf60:	2000      	movs	r0, #0
 800cf62:	f7f3 f9b1 	bl	80002c8 <__aeabi_dsub>
 800cf66:	4606      	mov	r6, r0
 800cf68:	460f      	mov	r7, r1
 800cf6a:	2d00      	cmp	r5, #0
 800cf6c:	d043      	beq.n	800cff6 <__kernel_rem_pio2+0x26e>
 800cf6e:	4650      	mov	r0, sl
 800cf70:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d0a8 <__kernel_rem_pio2+0x320>
 800cf74:	f000 fce4 	bl	800d940 <scalbn>
 800cf78:	4630      	mov	r0, r6
 800cf7a:	4639      	mov	r1, r7
 800cf7c:	ec53 2b10 	vmov	r2, r3, d0
 800cf80:	f7f3 f9a2 	bl	80002c8 <__aeabi_dsub>
 800cf84:	4606      	mov	r6, r0
 800cf86:	460f      	mov	r7, r1
 800cf88:	e035      	b.n	800cff6 <__kernel_rem_pio2+0x26e>
 800cf8a:	4b4c      	ldr	r3, [pc, #304]	; (800d0bc <__kernel_rem_pio2+0x334>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4630      	mov	r0, r6
 800cf90:	4639      	mov	r1, r7
 800cf92:	f7f3 fb51 	bl	8000638 <__aeabi_dmul>
 800cf96:	f7f3 fdff 	bl	8000b98 <__aeabi_d2iz>
 800cf9a:	f7f3 fae3 	bl	8000564 <__aeabi_i2d>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	ec43 2b18 	vmov	d8, r2, r3
 800cfa6:	4b46      	ldr	r3, [pc, #280]	; (800d0c0 <__kernel_rem_pio2+0x338>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f7f3 fb45 	bl	8000638 <__aeabi_dmul>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	f7f3 f987 	bl	80002c8 <__aeabi_dsub>
 800cfba:	f7f3 fded 	bl	8000b98 <__aeabi_d2iz>
 800cfbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfc2:	f84b 0b04 	str.w	r0, [fp], #4
 800cfc6:	ec51 0b18 	vmov	r0, r1, d8
 800cfca:	f7f3 f97f 	bl	80002cc <__adddf3>
 800cfce:	f109 39ff 	add.w	r9, r9, #4294967295
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	460f      	mov	r7, r1
 800cfd6:	e75b      	b.n	800ce90 <__kernel_rem_pio2+0x108>
 800cfd8:	d106      	bne.n	800cfe8 <__kernel_rem_pio2+0x260>
 800cfda:	1e63      	subs	r3, r4, #1
 800cfdc:	aa0e      	add	r2, sp, #56	; 0x38
 800cfde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cfe2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800cfe6:	e79d      	b.n	800cf24 <__kernel_rem_pio2+0x19c>
 800cfe8:	4b36      	ldr	r3, [pc, #216]	; (800d0c4 <__kernel_rem_pio2+0x33c>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	f7f3 fdaa 	bl	8000b44 <__aeabi_dcmpge>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d13d      	bne.n	800d070 <__kernel_rem_pio2+0x2e8>
 800cff4:	4683      	mov	fp, r0
 800cff6:	2200      	movs	r2, #0
 800cff8:	2300      	movs	r3, #0
 800cffa:	4630      	mov	r0, r6
 800cffc:	4639      	mov	r1, r7
 800cffe:	f7f3 fd83 	bl	8000b08 <__aeabi_dcmpeq>
 800d002:	2800      	cmp	r0, #0
 800d004:	f000 80c0 	beq.w	800d188 <__kernel_rem_pio2+0x400>
 800d008:	1e65      	subs	r5, r4, #1
 800d00a:	462b      	mov	r3, r5
 800d00c:	2200      	movs	r2, #0
 800d00e:	9902      	ldr	r1, [sp, #8]
 800d010:	428b      	cmp	r3, r1
 800d012:	da6c      	bge.n	800d0ee <__kernel_rem_pio2+0x366>
 800d014:	2a00      	cmp	r2, #0
 800d016:	f000 8089 	beq.w	800d12c <__kernel_rem_pio2+0x3a4>
 800d01a:	ab0e      	add	r3, sp, #56	; 0x38
 800d01c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d020:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 80ad 	beq.w	800d184 <__kernel_rem_pio2+0x3fc>
 800d02a:	4650      	mov	r0, sl
 800d02c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d0a8 <__kernel_rem_pio2+0x320>
 800d030:	f000 fc86 	bl	800d940 <scalbn>
 800d034:	ab9a      	add	r3, sp, #616	; 0x268
 800d036:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d03a:	ec57 6b10 	vmov	r6, r7, d0
 800d03e:	00ec      	lsls	r4, r5, #3
 800d040:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d044:	46aa      	mov	sl, r5
 800d046:	f1ba 0f00 	cmp.w	sl, #0
 800d04a:	f280 80d6 	bge.w	800d1fa <__kernel_rem_pio2+0x472>
 800d04e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d0a0 <__kernel_rem_pio2+0x318>
 800d052:	462e      	mov	r6, r5
 800d054:	2e00      	cmp	r6, #0
 800d056:	f2c0 8104 	blt.w	800d262 <__kernel_rem_pio2+0x4da>
 800d05a:	ab72      	add	r3, sp, #456	; 0x1c8
 800d05c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d060:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d0c8 <__kernel_rem_pio2+0x340>
 800d064:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d068:	f04f 0800 	mov.w	r8, #0
 800d06c:	1baf      	subs	r7, r5, r6
 800d06e:	e0ea      	b.n	800d246 <__kernel_rem_pio2+0x4be>
 800d070:	f04f 0b02 	mov.w	fp, #2
 800d074:	e759      	b.n	800cf2a <__kernel_rem_pio2+0x1a2>
 800d076:	f8d8 3000 	ldr.w	r3, [r8]
 800d07a:	b955      	cbnz	r5, 800d092 <__kernel_rem_pio2+0x30a>
 800d07c:	b123      	cbz	r3, 800d088 <__kernel_rem_pio2+0x300>
 800d07e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d082:	f8c8 3000 	str.w	r3, [r8]
 800d086:	2301      	movs	r3, #1
 800d088:	3201      	adds	r2, #1
 800d08a:	f108 0804 	add.w	r8, r8, #4
 800d08e:	461d      	mov	r5, r3
 800d090:	e752      	b.n	800cf38 <__kernel_rem_pio2+0x1b0>
 800d092:	1acb      	subs	r3, r1, r3
 800d094:	f8c8 3000 	str.w	r3, [r8]
 800d098:	462b      	mov	r3, r5
 800d09a:	e7f5      	b.n	800d088 <__kernel_rem_pio2+0x300>
 800d09c:	f3af 8000 	nop.w
	...
 800d0ac:	3ff00000 	.word	0x3ff00000
 800d0b0:	0800e108 	.word	0x0800e108
 800d0b4:	40200000 	.word	0x40200000
 800d0b8:	3ff00000 	.word	0x3ff00000
 800d0bc:	3e700000 	.word	0x3e700000
 800d0c0:	41700000 	.word	0x41700000
 800d0c4:	3fe00000 	.word	0x3fe00000
 800d0c8:	0800e0c8 	.word	0x0800e0c8
 800d0cc:	1e62      	subs	r2, r4, #1
 800d0ce:	ab0e      	add	r3, sp, #56	; 0x38
 800d0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d0d8:	a90e      	add	r1, sp, #56	; 0x38
 800d0da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d0de:	e739      	b.n	800cf54 <__kernel_rem_pio2+0x1cc>
 800d0e0:	1e62      	subs	r2, r4, #1
 800d0e2:	ab0e      	add	r3, sp, #56	; 0x38
 800d0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d0ec:	e7f4      	b.n	800d0d8 <__kernel_rem_pio2+0x350>
 800d0ee:	a90e      	add	r1, sp, #56	; 0x38
 800d0f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	430a      	orrs	r2, r1
 800d0f8:	e789      	b.n	800d00e <__kernel_rem_pio2+0x286>
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d100:	2900      	cmp	r1, #0
 800d102:	d0fa      	beq.n	800d0fa <__kernel_rem_pio2+0x372>
 800d104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d106:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d10a:	446a      	add	r2, sp
 800d10c:	3a98      	subs	r2, #152	; 0x98
 800d10e:	920a      	str	r2, [sp, #40]	; 0x28
 800d110:	9a08      	ldr	r2, [sp, #32]
 800d112:	18e3      	adds	r3, r4, r3
 800d114:	18a5      	adds	r5, r4, r2
 800d116:	aa22      	add	r2, sp, #136	; 0x88
 800d118:	f104 0801 	add.w	r8, r4, #1
 800d11c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d120:	9304      	str	r3, [sp, #16]
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	4543      	cmp	r3, r8
 800d126:	da04      	bge.n	800d132 <__kernel_rem_pio2+0x3aa>
 800d128:	461c      	mov	r4, r3
 800d12a:	e6a3      	b.n	800ce74 <__kernel_rem_pio2+0xec>
 800d12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d12e:	2301      	movs	r3, #1
 800d130:	e7e4      	b.n	800d0fc <__kernel_rem_pio2+0x374>
 800d132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d134:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d138:	f7f3 fa14 	bl	8000564 <__aeabi_i2d>
 800d13c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d142:	46ab      	mov	fp, r5
 800d144:	461c      	mov	r4, r3
 800d146:	f04f 0900 	mov.w	r9, #0
 800d14a:	2600      	movs	r6, #0
 800d14c:	2700      	movs	r7, #0
 800d14e:	9b06      	ldr	r3, [sp, #24]
 800d150:	4599      	cmp	r9, r3
 800d152:	dd06      	ble.n	800d162 <__kernel_rem_pio2+0x3da>
 800d154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d156:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d15a:	f108 0801 	add.w	r8, r8, #1
 800d15e:	930a      	str	r3, [sp, #40]	; 0x28
 800d160:	e7df      	b.n	800d122 <__kernel_rem_pio2+0x39a>
 800d162:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d166:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d16a:	f7f3 fa65 	bl	8000638 <__aeabi_dmul>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	4630      	mov	r0, r6
 800d174:	4639      	mov	r1, r7
 800d176:	f7f3 f8a9 	bl	80002cc <__adddf3>
 800d17a:	f109 0901 	add.w	r9, r9, #1
 800d17e:	4606      	mov	r6, r0
 800d180:	460f      	mov	r7, r1
 800d182:	e7e4      	b.n	800d14e <__kernel_rem_pio2+0x3c6>
 800d184:	3d01      	subs	r5, #1
 800d186:	e748      	b.n	800d01a <__kernel_rem_pio2+0x292>
 800d188:	ec47 6b10 	vmov	d0, r6, r7
 800d18c:	f1ca 0000 	rsb	r0, sl, #0
 800d190:	f000 fbd6 	bl	800d940 <scalbn>
 800d194:	ec57 6b10 	vmov	r6, r7, d0
 800d198:	4ba0      	ldr	r3, [pc, #640]	; (800d41c <__kernel_rem_pio2+0x694>)
 800d19a:	ee10 0a10 	vmov	r0, s0
 800d19e:	2200      	movs	r2, #0
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	f7f3 fccf 	bl	8000b44 <__aeabi_dcmpge>
 800d1a6:	b1f8      	cbz	r0, 800d1e8 <__kernel_rem_pio2+0x460>
 800d1a8:	4b9d      	ldr	r3, [pc, #628]	; (800d420 <__kernel_rem_pio2+0x698>)
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	f7f3 fa42 	bl	8000638 <__aeabi_dmul>
 800d1b4:	f7f3 fcf0 	bl	8000b98 <__aeabi_d2iz>
 800d1b8:	4680      	mov	r8, r0
 800d1ba:	f7f3 f9d3 	bl	8000564 <__aeabi_i2d>
 800d1be:	4b97      	ldr	r3, [pc, #604]	; (800d41c <__kernel_rem_pio2+0x694>)
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f7f3 fa39 	bl	8000638 <__aeabi_dmul>
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f7f3 f87b 	bl	80002c8 <__aeabi_dsub>
 800d1d2:	f7f3 fce1 	bl	8000b98 <__aeabi_d2iz>
 800d1d6:	1c65      	adds	r5, r4, #1
 800d1d8:	ab0e      	add	r3, sp, #56	; 0x38
 800d1da:	f10a 0a18 	add.w	sl, sl, #24
 800d1de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d1e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d1e6:	e720      	b.n	800d02a <__kernel_rem_pio2+0x2a2>
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7f3 fcd4 	bl	8000b98 <__aeabi_d2iz>
 800d1f0:	ab0e      	add	r3, sp, #56	; 0x38
 800d1f2:	4625      	mov	r5, r4
 800d1f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d1f8:	e717      	b.n	800d02a <__kernel_rem_pio2+0x2a2>
 800d1fa:	ab0e      	add	r3, sp, #56	; 0x38
 800d1fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d200:	f7f3 f9b0 	bl	8000564 <__aeabi_i2d>
 800d204:	4632      	mov	r2, r6
 800d206:	463b      	mov	r3, r7
 800d208:	f7f3 fa16 	bl	8000638 <__aeabi_dmul>
 800d20c:	4b84      	ldr	r3, [pc, #528]	; (800d420 <__kernel_rem_pio2+0x698>)
 800d20e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d212:	2200      	movs	r2, #0
 800d214:	4630      	mov	r0, r6
 800d216:	4639      	mov	r1, r7
 800d218:	f7f3 fa0e 	bl	8000638 <__aeabi_dmul>
 800d21c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d220:	4606      	mov	r6, r0
 800d222:	460f      	mov	r7, r1
 800d224:	e70f      	b.n	800d046 <__kernel_rem_pio2+0x2be>
 800d226:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d22a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d22e:	f7f3 fa03 	bl	8000638 <__aeabi_dmul>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d23a:	f7f3 f847 	bl	80002cc <__adddf3>
 800d23e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d242:	f108 0801 	add.w	r8, r8, #1
 800d246:	9b02      	ldr	r3, [sp, #8]
 800d248:	4598      	cmp	r8, r3
 800d24a:	dc01      	bgt.n	800d250 <__kernel_rem_pio2+0x4c8>
 800d24c:	45b8      	cmp	r8, r7
 800d24e:	ddea      	ble.n	800d226 <__kernel_rem_pio2+0x49e>
 800d250:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d254:	ab4a      	add	r3, sp, #296	; 0x128
 800d256:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d25a:	ed87 7b00 	vstr	d7, [r7]
 800d25e:	3e01      	subs	r6, #1
 800d260:	e6f8      	b.n	800d054 <__kernel_rem_pio2+0x2cc>
 800d262:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d264:	2b02      	cmp	r3, #2
 800d266:	dc0b      	bgt.n	800d280 <__kernel_rem_pio2+0x4f8>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	dc35      	bgt.n	800d2d8 <__kernel_rem_pio2+0x550>
 800d26c:	d059      	beq.n	800d322 <__kernel_rem_pio2+0x59a>
 800d26e:	9b04      	ldr	r3, [sp, #16]
 800d270:	f003 0007 	and.w	r0, r3, #7
 800d274:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d278:	ecbd 8b02 	vpop	{d8}
 800d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d280:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d282:	2b03      	cmp	r3, #3
 800d284:	d1f3      	bne.n	800d26e <__kernel_rem_pio2+0x4e6>
 800d286:	ab4a      	add	r3, sp, #296	; 0x128
 800d288:	4423      	add	r3, r4
 800d28a:	9306      	str	r3, [sp, #24]
 800d28c:	461c      	mov	r4, r3
 800d28e:	469a      	mov	sl, r3
 800d290:	9502      	str	r5, [sp, #8]
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	f1aa 0a08 	sub.w	sl, sl, #8
 800d29a:	dc6b      	bgt.n	800d374 <__kernel_rem_pio2+0x5ec>
 800d29c:	46aa      	mov	sl, r5
 800d29e:	f1ba 0f01 	cmp.w	sl, #1
 800d2a2:	f1a4 0408 	sub.w	r4, r4, #8
 800d2a6:	f300 8085 	bgt.w	800d3b4 <__kernel_rem_pio2+0x62c>
 800d2aa:	9c06      	ldr	r4, [sp, #24]
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	3408      	adds	r4, #8
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	2d01      	cmp	r5, #1
 800d2b4:	f300 809d 	bgt.w	800d3f2 <__kernel_rem_pio2+0x66a>
 800d2b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d2bc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d2c0:	f1bb 0f00 	cmp.w	fp, #0
 800d2c4:	f040 809b 	bne.w	800d3fe <__kernel_rem_pio2+0x676>
 800d2c8:	9b01      	ldr	r3, [sp, #4]
 800d2ca:	e9c3 5600 	strd	r5, r6, [r3]
 800d2ce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d2d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d2d6:	e7ca      	b.n	800d26e <__kernel_rem_pio2+0x4e6>
 800d2d8:	3408      	adds	r4, #8
 800d2da:	ab4a      	add	r3, sp, #296	; 0x128
 800d2dc:	441c      	add	r4, r3
 800d2de:	462e      	mov	r6, r5
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	2e00      	cmp	r6, #0
 800d2e6:	da36      	bge.n	800d356 <__kernel_rem_pio2+0x5ce>
 800d2e8:	f1bb 0f00 	cmp.w	fp, #0
 800d2ec:	d039      	beq.n	800d362 <__kernel_rem_pio2+0x5da>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2f4:	9c01      	ldr	r4, [sp, #4]
 800d2f6:	e9c4 2300 	strd	r2, r3, [r4]
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d302:	f7f2 ffe1 	bl	80002c8 <__aeabi_dsub>
 800d306:	ae4c      	add	r6, sp, #304	; 0x130
 800d308:	2401      	movs	r4, #1
 800d30a:	42a5      	cmp	r5, r4
 800d30c:	da2c      	bge.n	800d368 <__kernel_rem_pio2+0x5e0>
 800d30e:	f1bb 0f00 	cmp.w	fp, #0
 800d312:	d002      	beq.n	800d31a <__kernel_rem_pio2+0x592>
 800d314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d318:	4619      	mov	r1, r3
 800d31a:	9b01      	ldr	r3, [sp, #4]
 800d31c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d320:	e7a5      	b.n	800d26e <__kernel_rem_pio2+0x4e6>
 800d322:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d326:	eb0d 0403 	add.w	r4, sp, r3
 800d32a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d32e:	2000      	movs	r0, #0
 800d330:	2100      	movs	r1, #0
 800d332:	2d00      	cmp	r5, #0
 800d334:	da09      	bge.n	800d34a <__kernel_rem_pio2+0x5c2>
 800d336:	f1bb 0f00 	cmp.w	fp, #0
 800d33a:	d002      	beq.n	800d342 <__kernel_rem_pio2+0x5ba>
 800d33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d340:	4619      	mov	r1, r3
 800d342:	9b01      	ldr	r3, [sp, #4]
 800d344:	e9c3 0100 	strd	r0, r1, [r3]
 800d348:	e791      	b.n	800d26e <__kernel_rem_pio2+0x4e6>
 800d34a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d34e:	f7f2 ffbd 	bl	80002cc <__adddf3>
 800d352:	3d01      	subs	r5, #1
 800d354:	e7ed      	b.n	800d332 <__kernel_rem_pio2+0x5aa>
 800d356:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d35a:	f7f2 ffb7 	bl	80002cc <__adddf3>
 800d35e:	3e01      	subs	r6, #1
 800d360:	e7c0      	b.n	800d2e4 <__kernel_rem_pio2+0x55c>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	e7c5      	b.n	800d2f4 <__kernel_rem_pio2+0x56c>
 800d368:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d36c:	f7f2 ffae 	bl	80002cc <__adddf3>
 800d370:	3401      	adds	r4, #1
 800d372:	e7ca      	b.n	800d30a <__kernel_rem_pio2+0x582>
 800d374:	e9da 8900 	ldrd	r8, r9, [sl]
 800d378:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d37c:	9b02      	ldr	r3, [sp, #8]
 800d37e:	3b01      	subs	r3, #1
 800d380:	9302      	str	r3, [sp, #8]
 800d382:	4632      	mov	r2, r6
 800d384:	463b      	mov	r3, r7
 800d386:	4640      	mov	r0, r8
 800d388:	4649      	mov	r1, r9
 800d38a:	f7f2 ff9f 	bl	80002cc <__adddf3>
 800d38e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4640      	mov	r0, r8
 800d398:	4649      	mov	r1, r9
 800d39a:	f7f2 ff95 	bl	80002c8 <__aeabi_dsub>
 800d39e:	4632      	mov	r2, r6
 800d3a0:	463b      	mov	r3, r7
 800d3a2:	f7f2 ff93 	bl	80002cc <__adddf3>
 800d3a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d3aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3ae:	ed8a 7b00 	vstr	d7, [sl]
 800d3b2:	e76e      	b.n	800d292 <__kernel_rem_pio2+0x50a>
 800d3b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d3b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d3bc:	4640      	mov	r0, r8
 800d3be:	4632      	mov	r2, r6
 800d3c0:	463b      	mov	r3, r7
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	f7f2 ff82 	bl	80002cc <__adddf3>
 800d3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	f7f2 ff78 	bl	80002c8 <__aeabi_dsub>
 800d3d8:	4632      	mov	r2, r6
 800d3da:	463b      	mov	r3, r7
 800d3dc:	f7f2 ff76 	bl	80002cc <__adddf3>
 800d3e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d3e8:	ed84 7b00 	vstr	d7, [r4]
 800d3ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3f0:	e755      	b.n	800d29e <__kernel_rem_pio2+0x516>
 800d3f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d3f6:	f7f2 ff69 	bl	80002cc <__adddf3>
 800d3fa:	3d01      	subs	r5, #1
 800d3fc:	e759      	b.n	800d2b2 <__kernel_rem_pio2+0x52a>
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	9a01      	ldr	r2, [sp, #4]
 800d402:	601d      	str	r5, [r3, #0]
 800d404:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d408:	605c      	str	r4, [r3, #4]
 800d40a:	609f      	str	r7, [r3, #8]
 800d40c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d410:	60d3      	str	r3, [r2, #12]
 800d412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d416:	6110      	str	r0, [r2, #16]
 800d418:	6153      	str	r3, [r2, #20]
 800d41a:	e728      	b.n	800d26e <__kernel_rem_pio2+0x4e6>
 800d41c:	41700000 	.word	0x41700000
 800d420:	3e700000 	.word	0x3e700000
 800d424:	00000000 	.word	0x00000000

0800d428 <__kernel_tan>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	ed2d 8b06 	vpush	{d8-d10}
 800d430:	ec5b ab10 	vmov	sl, fp, d0
 800d434:	4be0      	ldr	r3, [pc, #896]	; (800d7b8 <__kernel_tan+0x390>)
 800d436:	b083      	sub	sp, #12
 800d438:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d43c:	429f      	cmp	r7, r3
 800d43e:	ec59 8b11 	vmov	r8, r9, d1
 800d442:	4606      	mov	r6, r0
 800d444:	f8cd b000 	str.w	fp, [sp]
 800d448:	dc61      	bgt.n	800d50e <__kernel_tan+0xe6>
 800d44a:	ee10 0a10 	vmov	r0, s0
 800d44e:	4659      	mov	r1, fp
 800d450:	f7f3 fba2 	bl	8000b98 <__aeabi_d2iz>
 800d454:	4605      	mov	r5, r0
 800d456:	2800      	cmp	r0, #0
 800d458:	f040 8083 	bne.w	800d562 <__kernel_tan+0x13a>
 800d45c:	1c73      	adds	r3, r6, #1
 800d45e:	4652      	mov	r2, sl
 800d460:	4313      	orrs	r3, r2
 800d462:	433b      	orrs	r3, r7
 800d464:	d112      	bne.n	800d48c <__kernel_tan+0x64>
 800d466:	ec4b ab10 	vmov	d0, sl, fp
 800d46a:	f7ff fa41 	bl	800c8f0 <fabs>
 800d46e:	49d3      	ldr	r1, [pc, #844]	; (800d7bc <__kernel_tan+0x394>)
 800d470:	ec53 2b10 	vmov	r2, r3, d0
 800d474:	2000      	movs	r0, #0
 800d476:	f7f3 fa09 	bl	800088c <__aeabi_ddiv>
 800d47a:	4682      	mov	sl, r0
 800d47c:	468b      	mov	fp, r1
 800d47e:	ec4b ab10 	vmov	d0, sl, fp
 800d482:	b003      	add	sp, #12
 800d484:	ecbd 8b06 	vpop	{d8-d10}
 800d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	2e01      	cmp	r6, #1
 800d48e:	d0f6      	beq.n	800d47e <__kernel_tan+0x56>
 800d490:	4642      	mov	r2, r8
 800d492:	464b      	mov	r3, r9
 800d494:	4650      	mov	r0, sl
 800d496:	4659      	mov	r1, fp
 800d498:	f7f2 ff18 	bl	80002cc <__adddf3>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	460f      	mov	r7, r1
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	49c6      	ldr	r1, [pc, #792]	; (800d7c0 <__kernel_tan+0x398>)
 800d4a6:	f7f3 f9f1 	bl	800088c <__aeabi_ddiv>
 800d4aa:	e9cd 0100 	strd	r0, r1, [sp]
 800d4ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4b2:	462e      	mov	r6, r5
 800d4b4:	4652      	mov	r2, sl
 800d4b6:	462c      	mov	r4, r5
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	461d      	mov	r5, r3
 800d4bc:	4639      	mov	r1, r7
 800d4be:	465b      	mov	r3, fp
 800d4c0:	f7f2 ff02 	bl	80002c8 <__aeabi_dsub>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	f7f2 fefc 	bl	80002c8 <__aeabi_dsub>
 800d4d0:	4632      	mov	r2, r6
 800d4d2:	462b      	mov	r3, r5
 800d4d4:	f7f3 f8b0 	bl	8000638 <__aeabi_dmul>
 800d4d8:	4632      	mov	r2, r6
 800d4da:	4680      	mov	r8, r0
 800d4dc:	4689      	mov	r9, r1
 800d4de:	462b      	mov	r3, r5
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	f7f3 f8a8 	bl	8000638 <__aeabi_dmul>
 800d4e8:	4bb4      	ldr	r3, [pc, #720]	; (800d7bc <__kernel_tan+0x394>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f7f2 feee 	bl	80002cc <__adddf3>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4640      	mov	r0, r8
 800d4f6:	4649      	mov	r1, r9
 800d4f8:	f7f2 fee8 	bl	80002cc <__adddf3>
 800d4fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d500:	f7f3 f89a 	bl	8000638 <__aeabi_dmul>
 800d504:	4622      	mov	r2, r4
 800d506:	462b      	mov	r3, r5
 800d508:	f7f2 fee0 	bl	80002cc <__adddf3>
 800d50c:	e7b5      	b.n	800d47a <__kernel_tan+0x52>
 800d50e:	4bad      	ldr	r3, [pc, #692]	; (800d7c4 <__kernel_tan+0x39c>)
 800d510:	429f      	cmp	r7, r3
 800d512:	dd26      	ble.n	800d562 <__kernel_tan+0x13a>
 800d514:	9b00      	ldr	r3, [sp, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	da09      	bge.n	800d52e <__kernel_tan+0x106>
 800d51a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d51e:	469b      	mov	fp, r3
 800d520:	ee10 aa10 	vmov	sl, s0
 800d524:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d528:	ee11 8a10 	vmov	r8, s2
 800d52c:	4699      	mov	r9, r3
 800d52e:	4652      	mov	r2, sl
 800d530:	465b      	mov	r3, fp
 800d532:	a183      	add	r1, pc, #524	; (adr r1, 800d740 <__kernel_tan+0x318>)
 800d534:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d538:	f7f2 fec6 	bl	80002c8 <__aeabi_dsub>
 800d53c:	4642      	mov	r2, r8
 800d53e:	464b      	mov	r3, r9
 800d540:	4604      	mov	r4, r0
 800d542:	460d      	mov	r5, r1
 800d544:	a180      	add	r1, pc, #512	; (adr r1, 800d748 <__kernel_tan+0x320>)
 800d546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d54a:	f7f2 febd 	bl	80002c8 <__aeabi_dsub>
 800d54e:	4622      	mov	r2, r4
 800d550:	462b      	mov	r3, r5
 800d552:	f7f2 febb 	bl	80002cc <__adddf3>
 800d556:	f04f 0800 	mov.w	r8, #0
 800d55a:	4682      	mov	sl, r0
 800d55c:	468b      	mov	fp, r1
 800d55e:	f04f 0900 	mov.w	r9, #0
 800d562:	4652      	mov	r2, sl
 800d564:	465b      	mov	r3, fp
 800d566:	4650      	mov	r0, sl
 800d568:	4659      	mov	r1, fp
 800d56a:	f7f3 f865 	bl	8000638 <__aeabi_dmul>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	ec43 2b18 	vmov	d8, r2, r3
 800d576:	f7f3 f85f 	bl	8000638 <__aeabi_dmul>
 800d57a:	ec53 2b18 	vmov	r2, r3, d8
 800d57e:	4604      	mov	r4, r0
 800d580:	460d      	mov	r5, r1
 800d582:	4650      	mov	r0, sl
 800d584:	4659      	mov	r1, fp
 800d586:	f7f3 f857 	bl	8000638 <__aeabi_dmul>
 800d58a:	a371      	add	r3, pc, #452	; (adr r3, 800d750 <__kernel_tan+0x328>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	ec41 0b19 	vmov	d9, r0, r1
 800d594:	4620      	mov	r0, r4
 800d596:	4629      	mov	r1, r5
 800d598:	f7f3 f84e 	bl	8000638 <__aeabi_dmul>
 800d59c:	a36e      	add	r3, pc, #440	; (adr r3, 800d758 <__kernel_tan+0x330>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	f7f2 fe93 	bl	80002cc <__adddf3>
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	462b      	mov	r3, r5
 800d5aa:	f7f3 f845 	bl	8000638 <__aeabi_dmul>
 800d5ae:	a36c      	add	r3, pc, #432	; (adr r3, 800d760 <__kernel_tan+0x338>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f7f2 fe8a 	bl	80002cc <__adddf3>
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	f7f3 f83c 	bl	8000638 <__aeabi_dmul>
 800d5c0:	a369      	add	r3, pc, #420	; (adr r3, 800d768 <__kernel_tan+0x340>)
 800d5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c6:	f7f2 fe81 	bl	80002cc <__adddf3>
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	462b      	mov	r3, r5
 800d5ce:	f7f3 f833 	bl	8000638 <__aeabi_dmul>
 800d5d2:	a367      	add	r3, pc, #412	; (adr r3, 800d770 <__kernel_tan+0x348>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	f7f2 fe78 	bl	80002cc <__adddf3>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	462b      	mov	r3, r5
 800d5e0:	f7f3 f82a 	bl	8000638 <__aeabi_dmul>
 800d5e4:	a364      	add	r3, pc, #400	; (adr r3, 800d778 <__kernel_tan+0x350>)
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	f7f2 fe6f 	bl	80002cc <__adddf3>
 800d5ee:	ec53 2b18 	vmov	r2, r3, d8
 800d5f2:	f7f3 f821 	bl	8000638 <__aeabi_dmul>
 800d5f6:	a362      	add	r3, pc, #392	; (adr r3, 800d780 <__kernel_tan+0x358>)
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	ec41 0b1a 	vmov	d10, r0, r1
 800d600:	4620      	mov	r0, r4
 800d602:	4629      	mov	r1, r5
 800d604:	f7f3 f818 	bl	8000638 <__aeabi_dmul>
 800d608:	a35f      	add	r3, pc, #380	; (adr r3, 800d788 <__kernel_tan+0x360>)
 800d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60e:	f7f2 fe5d 	bl	80002cc <__adddf3>
 800d612:	4622      	mov	r2, r4
 800d614:	462b      	mov	r3, r5
 800d616:	f7f3 f80f 	bl	8000638 <__aeabi_dmul>
 800d61a:	a35d      	add	r3, pc, #372	; (adr r3, 800d790 <__kernel_tan+0x368>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f7f2 fe54 	bl	80002cc <__adddf3>
 800d624:	4622      	mov	r2, r4
 800d626:	462b      	mov	r3, r5
 800d628:	f7f3 f806 	bl	8000638 <__aeabi_dmul>
 800d62c:	a35a      	add	r3, pc, #360	; (adr r3, 800d798 <__kernel_tan+0x370>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	f7f2 fe4b 	bl	80002cc <__adddf3>
 800d636:	4622      	mov	r2, r4
 800d638:	462b      	mov	r3, r5
 800d63a:	f7f2 fffd 	bl	8000638 <__aeabi_dmul>
 800d63e:	a358      	add	r3, pc, #352	; (adr r3, 800d7a0 <__kernel_tan+0x378>)
 800d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d644:	f7f2 fe42 	bl	80002cc <__adddf3>
 800d648:	4622      	mov	r2, r4
 800d64a:	462b      	mov	r3, r5
 800d64c:	f7f2 fff4 	bl	8000638 <__aeabi_dmul>
 800d650:	a355      	add	r3, pc, #340	; (adr r3, 800d7a8 <__kernel_tan+0x380>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	f7f2 fe39 	bl	80002cc <__adddf3>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	ec51 0b1a 	vmov	r0, r1, d10
 800d662:	f7f2 fe33 	bl	80002cc <__adddf3>
 800d666:	ec53 2b19 	vmov	r2, r3, d9
 800d66a:	f7f2 ffe5 	bl	8000638 <__aeabi_dmul>
 800d66e:	4642      	mov	r2, r8
 800d670:	464b      	mov	r3, r9
 800d672:	f7f2 fe2b 	bl	80002cc <__adddf3>
 800d676:	ec53 2b18 	vmov	r2, r3, d8
 800d67a:	f7f2 ffdd 	bl	8000638 <__aeabi_dmul>
 800d67e:	4642      	mov	r2, r8
 800d680:	464b      	mov	r3, r9
 800d682:	f7f2 fe23 	bl	80002cc <__adddf3>
 800d686:	a34a      	add	r3, pc, #296	; (adr r3, 800d7b0 <__kernel_tan+0x388>)
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	4604      	mov	r4, r0
 800d68e:	460d      	mov	r5, r1
 800d690:	ec51 0b19 	vmov	r0, r1, d9
 800d694:	f7f2 ffd0 	bl	8000638 <__aeabi_dmul>
 800d698:	4622      	mov	r2, r4
 800d69a:	462b      	mov	r3, r5
 800d69c:	f7f2 fe16 	bl	80002cc <__adddf3>
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	ec41 0b18 	vmov	d8, r0, r1
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	4659      	mov	r1, fp
 800d6aa:	4650      	mov	r0, sl
 800d6ac:	f7f2 fe0e 	bl	80002cc <__adddf3>
 800d6b0:	4b44      	ldr	r3, [pc, #272]	; (800d7c4 <__kernel_tan+0x39c>)
 800d6b2:	429f      	cmp	r7, r3
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	460d      	mov	r5, r1
 800d6b8:	f340 8086 	ble.w	800d7c8 <__kernel_tan+0x3a0>
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7f2 ff51 	bl	8000564 <__aeabi_i2d>
 800d6c2:	4622      	mov	r2, r4
 800d6c4:	4680      	mov	r8, r0
 800d6c6:	4689      	mov	r9, r1
 800d6c8:	462b      	mov	r3, r5
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	f7f2 ffb3 	bl	8000638 <__aeabi_dmul>
 800d6d2:	4642      	mov	r2, r8
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	460f      	mov	r7, r1
 800d6d8:	464b      	mov	r3, r9
 800d6da:	4620      	mov	r0, r4
 800d6dc:	4629      	mov	r1, r5
 800d6de:	f7f2 fdf5 	bl	80002cc <__adddf3>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	4639      	mov	r1, r7
 800d6ea:	f7f3 f8cf 	bl	800088c <__aeabi_ddiv>
 800d6ee:	ec53 2b18 	vmov	r2, r3, d8
 800d6f2:	f7f2 fde9 	bl	80002c8 <__aeabi_dsub>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	4659      	mov	r1, fp
 800d6fe:	f7f2 fde3 	bl	80002c8 <__aeabi_dsub>
 800d702:	4602      	mov	r2, r0
 800d704:	460b      	mov	r3, r1
 800d706:	f7f2 fde1 	bl	80002cc <__adddf3>
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	4640      	mov	r0, r8
 800d710:	4649      	mov	r1, r9
 800d712:	f7f2 fdd9 	bl	80002c8 <__aeabi_dsub>
 800d716:	9b00      	ldr	r3, [sp, #0]
 800d718:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800d71c:	f00a 0a02 	and.w	sl, sl, #2
 800d720:	4604      	mov	r4, r0
 800d722:	f1ca 0001 	rsb	r0, sl, #1
 800d726:	460d      	mov	r5, r1
 800d728:	f7f2 ff1c 	bl	8000564 <__aeabi_i2d>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4620      	mov	r0, r4
 800d732:	4629      	mov	r1, r5
 800d734:	f7f2 ff80 	bl	8000638 <__aeabi_dmul>
 800d738:	e69f      	b.n	800d47a <__kernel_tan+0x52>
 800d73a:	bf00      	nop
 800d73c:	f3af 8000 	nop.w
 800d740:	54442d18 	.word	0x54442d18
 800d744:	3fe921fb 	.word	0x3fe921fb
 800d748:	33145c07 	.word	0x33145c07
 800d74c:	3c81a626 	.word	0x3c81a626
 800d750:	74bf7ad4 	.word	0x74bf7ad4
 800d754:	3efb2a70 	.word	0x3efb2a70
 800d758:	32f0a7e9 	.word	0x32f0a7e9
 800d75c:	3f12b80f 	.word	0x3f12b80f
 800d760:	1a8d1068 	.word	0x1a8d1068
 800d764:	3f3026f7 	.word	0x3f3026f7
 800d768:	fee08315 	.word	0xfee08315
 800d76c:	3f57dbc8 	.word	0x3f57dbc8
 800d770:	e96e8493 	.word	0xe96e8493
 800d774:	3f8226e3 	.word	0x3f8226e3
 800d778:	1bb341fe 	.word	0x1bb341fe
 800d77c:	3faba1ba 	.word	0x3faba1ba
 800d780:	db605373 	.word	0xdb605373
 800d784:	bef375cb 	.word	0xbef375cb
 800d788:	a03792a6 	.word	0xa03792a6
 800d78c:	3f147e88 	.word	0x3f147e88
 800d790:	f2f26501 	.word	0xf2f26501
 800d794:	3f4344d8 	.word	0x3f4344d8
 800d798:	c9560328 	.word	0xc9560328
 800d79c:	3f6d6d22 	.word	0x3f6d6d22
 800d7a0:	8406d637 	.word	0x8406d637
 800d7a4:	3f9664f4 	.word	0x3f9664f4
 800d7a8:	1110fe7a 	.word	0x1110fe7a
 800d7ac:	3fc11111 	.word	0x3fc11111
 800d7b0:	55555563 	.word	0x55555563
 800d7b4:	3fd55555 	.word	0x3fd55555
 800d7b8:	3e2fffff 	.word	0x3e2fffff
 800d7bc:	3ff00000 	.word	0x3ff00000
 800d7c0:	bff00000 	.word	0xbff00000
 800d7c4:	3fe59427 	.word	0x3fe59427
 800d7c8:	2e01      	cmp	r6, #1
 800d7ca:	d02f      	beq.n	800d82c <__kernel_tan+0x404>
 800d7cc:	460f      	mov	r7, r1
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4689      	mov	r9, r1
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	4917      	ldr	r1, [pc, #92]	; (800d834 <__kernel_tan+0x40c>)
 800d7d8:	f7f3 f858 	bl	800088c <__aeabi_ddiv>
 800d7dc:	2600      	movs	r6, #0
 800d7de:	e9cd 0100 	strd	r0, r1, [sp]
 800d7e2:	4652      	mov	r2, sl
 800d7e4:	465b      	mov	r3, fp
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	f7f2 fd6d 	bl	80002c8 <__aeabi_dsub>
 800d7ee:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	ec51 0b18 	vmov	r0, r1, d8
 800d7fa:	f7f2 fd65 	bl	80002c8 <__aeabi_dsub>
 800d7fe:	4632      	mov	r2, r6
 800d800:	462b      	mov	r3, r5
 800d802:	f7f2 ff19 	bl	8000638 <__aeabi_dmul>
 800d806:	46b0      	mov	r8, r6
 800d808:	460f      	mov	r7, r1
 800d80a:	4642      	mov	r2, r8
 800d80c:	462b      	mov	r3, r5
 800d80e:	4634      	mov	r4, r6
 800d810:	4649      	mov	r1, r9
 800d812:	4606      	mov	r6, r0
 800d814:	4640      	mov	r0, r8
 800d816:	f7f2 ff0f 	bl	8000638 <__aeabi_dmul>
 800d81a:	4b07      	ldr	r3, [pc, #28]	; (800d838 <__kernel_tan+0x410>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	f7f2 fd55 	bl	80002cc <__adddf3>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	4630      	mov	r0, r6
 800d828:	4639      	mov	r1, r7
 800d82a:	e665      	b.n	800d4f8 <__kernel_tan+0xd0>
 800d82c:	4682      	mov	sl, r0
 800d82e:	468b      	mov	fp, r1
 800d830:	e625      	b.n	800d47e <__kernel_tan+0x56>
 800d832:	bf00      	nop
 800d834:	bff00000 	.word	0xbff00000
 800d838:	3ff00000 	.word	0x3ff00000
 800d83c:	00000000 	.word	0x00000000

0800d840 <floor>:
 800d840:	ec51 0b10 	vmov	r0, r1, d0
 800d844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d848:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d84c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d850:	2e13      	cmp	r6, #19
 800d852:	ee10 5a10 	vmov	r5, s0
 800d856:	ee10 8a10 	vmov	r8, s0
 800d85a:	460c      	mov	r4, r1
 800d85c:	dc32      	bgt.n	800d8c4 <floor+0x84>
 800d85e:	2e00      	cmp	r6, #0
 800d860:	da14      	bge.n	800d88c <floor+0x4c>
 800d862:	a333      	add	r3, pc, #204	; (adr r3, 800d930 <floor+0xf0>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fd30 	bl	80002cc <__adddf3>
 800d86c:	2200      	movs	r2, #0
 800d86e:	2300      	movs	r3, #0
 800d870:	f7f3 f972 	bl	8000b58 <__aeabi_dcmpgt>
 800d874:	b138      	cbz	r0, 800d886 <floor+0x46>
 800d876:	2c00      	cmp	r4, #0
 800d878:	da57      	bge.n	800d92a <floor+0xea>
 800d87a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d87e:	431d      	orrs	r5, r3
 800d880:	d001      	beq.n	800d886 <floor+0x46>
 800d882:	4c2d      	ldr	r4, [pc, #180]	; (800d938 <floor+0xf8>)
 800d884:	2500      	movs	r5, #0
 800d886:	4621      	mov	r1, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	e025      	b.n	800d8d8 <floor+0x98>
 800d88c:	4f2b      	ldr	r7, [pc, #172]	; (800d93c <floor+0xfc>)
 800d88e:	4137      	asrs	r7, r6
 800d890:	ea01 0307 	and.w	r3, r1, r7
 800d894:	4303      	orrs	r3, r0
 800d896:	d01f      	beq.n	800d8d8 <floor+0x98>
 800d898:	a325      	add	r3, pc, #148	; (adr r3, 800d930 <floor+0xf0>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 fd15 	bl	80002cc <__adddf3>
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f7f3 f957 	bl	8000b58 <__aeabi_dcmpgt>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d0eb      	beq.n	800d886 <floor+0x46>
 800d8ae:	2c00      	cmp	r4, #0
 800d8b0:	bfbe      	ittt	lt
 800d8b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d8b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d8ba:	19a4      	addlt	r4, r4, r6
 800d8bc:	ea24 0407 	bic.w	r4, r4, r7
 800d8c0:	2500      	movs	r5, #0
 800d8c2:	e7e0      	b.n	800d886 <floor+0x46>
 800d8c4:	2e33      	cmp	r6, #51	; 0x33
 800d8c6:	dd0b      	ble.n	800d8e0 <floor+0xa0>
 800d8c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d8cc:	d104      	bne.n	800d8d8 <floor+0x98>
 800d8ce:	ee10 2a10 	vmov	r2, s0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	f7f2 fcfa 	bl	80002cc <__adddf3>
 800d8d8:	ec41 0b10 	vmov	d0, r0, r1
 800d8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e8:	fa23 f707 	lsr.w	r7, r3, r7
 800d8ec:	4207      	tst	r7, r0
 800d8ee:	d0f3      	beq.n	800d8d8 <floor+0x98>
 800d8f0:	a30f      	add	r3, pc, #60	; (adr r3, 800d930 <floor+0xf0>)
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	f7f2 fce9 	bl	80002cc <__adddf3>
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	f7f3 f92b 	bl	8000b58 <__aeabi_dcmpgt>
 800d902:	2800      	cmp	r0, #0
 800d904:	d0bf      	beq.n	800d886 <floor+0x46>
 800d906:	2c00      	cmp	r4, #0
 800d908:	da02      	bge.n	800d910 <floor+0xd0>
 800d90a:	2e14      	cmp	r6, #20
 800d90c:	d103      	bne.n	800d916 <floor+0xd6>
 800d90e:	3401      	adds	r4, #1
 800d910:	ea25 0507 	bic.w	r5, r5, r7
 800d914:	e7b7      	b.n	800d886 <floor+0x46>
 800d916:	2301      	movs	r3, #1
 800d918:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d91c:	fa03 f606 	lsl.w	r6, r3, r6
 800d920:	4435      	add	r5, r6
 800d922:	4545      	cmp	r5, r8
 800d924:	bf38      	it	cc
 800d926:	18e4      	addcc	r4, r4, r3
 800d928:	e7f2      	b.n	800d910 <floor+0xd0>
 800d92a:	2500      	movs	r5, #0
 800d92c:	462c      	mov	r4, r5
 800d92e:	e7aa      	b.n	800d886 <floor+0x46>
 800d930:	8800759c 	.word	0x8800759c
 800d934:	7e37e43c 	.word	0x7e37e43c
 800d938:	bff00000 	.word	0xbff00000
 800d93c:	000fffff 	.word	0x000fffff

0800d940 <scalbn>:
 800d940:	b570      	push	{r4, r5, r6, lr}
 800d942:	ec55 4b10 	vmov	r4, r5, d0
 800d946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d94a:	4606      	mov	r6, r0
 800d94c:	462b      	mov	r3, r5
 800d94e:	b99a      	cbnz	r2, 800d978 <scalbn+0x38>
 800d950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d954:	4323      	orrs	r3, r4
 800d956:	d036      	beq.n	800d9c6 <scalbn+0x86>
 800d958:	4b39      	ldr	r3, [pc, #228]	; (800da40 <scalbn+0x100>)
 800d95a:	4629      	mov	r1, r5
 800d95c:	ee10 0a10 	vmov	r0, s0
 800d960:	2200      	movs	r2, #0
 800d962:	f7f2 fe69 	bl	8000638 <__aeabi_dmul>
 800d966:	4b37      	ldr	r3, [pc, #220]	; (800da44 <scalbn+0x104>)
 800d968:	429e      	cmp	r6, r3
 800d96a:	4604      	mov	r4, r0
 800d96c:	460d      	mov	r5, r1
 800d96e:	da10      	bge.n	800d992 <scalbn+0x52>
 800d970:	a32b      	add	r3, pc, #172	; (adr r3, 800da20 <scalbn+0xe0>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	e03a      	b.n	800d9ee <scalbn+0xae>
 800d978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d97c:	428a      	cmp	r2, r1
 800d97e:	d10c      	bne.n	800d99a <scalbn+0x5a>
 800d980:	ee10 2a10 	vmov	r2, s0
 800d984:	4620      	mov	r0, r4
 800d986:	4629      	mov	r1, r5
 800d988:	f7f2 fca0 	bl	80002cc <__adddf3>
 800d98c:	4604      	mov	r4, r0
 800d98e:	460d      	mov	r5, r1
 800d990:	e019      	b.n	800d9c6 <scalbn+0x86>
 800d992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d996:	460b      	mov	r3, r1
 800d998:	3a36      	subs	r2, #54	; 0x36
 800d99a:	4432      	add	r2, r6
 800d99c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d9a0:	428a      	cmp	r2, r1
 800d9a2:	dd08      	ble.n	800d9b6 <scalbn+0x76>
 800d9a4:	2d00      	cmp	r5, #0
 800d9a6:	a120      	add	r1, pc, #128	; (adr r1, 800da28 <scalbn+0xe8>)
 800d9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9ac:	da1c      	bge.n	800d9e8 <scalbn+0xa8>
 800d9ae:	a120      	add	r1, pc, #128	; (adr r1, 800da30 <scalbn+0xf0>)
 800d9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9b4:	e018      	b.n	800d9e8 <scalbn+0xa8>
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	dd08      	ble.n	800d9cc <scalbn+0x8c>
 800d9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9c6:	ec45 4b10 	vmov	d0, r4, r5
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d9d0:	da19      	bge.n	800da06 <scalbn+0xc6>
 800d9d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d9d6:	429e      	cmp	r6, r3
 800d9d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d9dc:	dd0a      	ble.n	800d9f4 <scalbn+0xb4>
 800d9de:	a112      	add	r1, pc, #72	; (adr r1, 800da28 <scalbn+0xe8>)
 800d9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1e2      	bne.n	800d9ae <scalbn+0x6e>
 800d9e8:	a30f      	add	r3, pc, #60	; (adr r3, 800da28 <scalbn+0xe8>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f7f2 fe23 	bl	8000638 <__aeabi_dmul>
 800d9f2:	e7cb      	b.n	800d98c <scalbn+0x4c>
 800d9f4:	a10a      	add	r1, pc, #40	; (adr r1, 800da20 <scalbn+0xe0>)
 800d9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d0b8      	beq.n	800d970 <scalbn+0x30>
 800d9fe:	a10e      	add	r1, pc, #56	; (adr r1, 800da38 <scalbn+0xf8>)
 800da00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da04:	e7b4      	b.n	800d970 <scalbn+0x30>
 800da06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800da0a:	3236      	adds	r2, #54	; 0x36
 800da0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800da10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800da14:	4620      	mov	r0, r4
 800da16:	4b0c      	ldr	r3, [pc, #48]	; (800da48 <scalbn+0x108>)
 800da18:	2200      	movs	r2, #0
 800da1a:	e7e8      	b.n	800d9ee <scalbn+0xae>
 800da1c:	f3af 8000 	nop.w
 800da20:	c2f8f359 	.word	0xc2f8f359
 800da24:	01a56e1f 	.word	0x01a56e1f
 800da28:	8800759c 	.word	0x8800759c
 800da2c:	7e37e43c 	.word	0x7e37e43c
 800da30:	8800759c 	.word	0x8800759c
 800da34:	fe37e43c 	.word	0xfe37e43c
 800da38:	c2f8f359 	.word	0xc2f8f359
 800da3c:	81a56e1f 	.word	0x81a56e1f
 800da40:	43500000 	.word	0x43500000
 800da44:	ffff3cb0 	.word	0xffff3cb0
 800da48:	3c900000 	.word	0x3c900000

0800da4c <_init>:
 800da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4e:	bf00      	nop
 800da50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da52:	bc08      	pop	{r3}
 800da54:	469e      	mov	lr, r3
 800da56:	4770      	bx	lr

0800da58 <_fini>:
 800da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5a:	bf00      	nop
 800da5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5e:	bc08      	pop	{r3}
 800da60:	469e      	mov	lr, r3
 800da62:	4770      	bx	lr
