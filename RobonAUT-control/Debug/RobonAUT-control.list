
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08009e30  08009e30  00019e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a29c  0800a29c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a4  0800a2a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001e0  0800a48c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800a48c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135bb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298a  00000000  00000000  000337cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00036158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000370e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fb8  00000000  00000000  00037f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a5b  00000000  00000000  0005cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfecb  00000000  00000000  00070973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015083e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005254  00000000  00000000  00150890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e18 	.word	0x08009e18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009e18 	.word	0x08009e18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <F4_Basic_Init>:
#include <stdio.h>

// hadc2;huart

void F4_Basic_Init(UART_HandleTypeDef *huart,TIM_HandleTypeDef *htim,TIM_HandleTypeDef *htim3)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	uint8_t buf[30];
	LED_R(0);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	4824      	ldr	r0, [pc, #144]	; (8001030 <F4_Basic_Init+0xa4>)
 8000fa0:	f002 ff76 	bl	8003e90 <HAL_GPIO_WritePin>
	LED_B(0);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000faa:	4821      	ldr	r0, [pc, #132]	; (8001030 <F4_Basic_Init+0xa4>)
 8000fac:	f002 ff70 	bl	8003e90 <HAL_GPIO_WritePin>
	LED_G(0);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <F4_Basic_Init+0xa4>)
 8000fb6:	f002 ff6b 	bl	8003e90 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	481b      	ldr	r0, [pc, #108]	; (8001030 <F4_Basic_Init+0xa4>)
 8000fc2:	f002 ff65 	bl	8003e90 <HAL_GPIO_WritePin>
	memset(buf,0,30); //a buf tömböt feltöltöm 0-kkal
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	221e      	movs	r2, #30
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 f838 	bl	8007044 <memset>
	sprintf(buf,"RobonAUT 2022 Bit Bangers\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4916      	ldr	r1, [pc, #88]	; (8001034 <F4_Basic_Init+0xa8>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 fca4 	bl	8007928 <siprintf>
	HAL_UART_Transmit(huart, buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f913 	bl	8000210 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f107 0110 	add.w	r1, r7, #16
 8000ff2:	2364      	movs	r3, #100	; 0x64
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f005 fbe4 	bl	80067c2 <HAL_UART_Transmit>
	HAL_TIM_Base_Start(htim);//heart beat timer tick start
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f003 fe04 	bl	8004c08 <HAL_TIM_Base_Start>

	//MotorEnable engedélyezése
	motorEnRemote=1;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <F4_Basic_Init+0xac>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
	motorEnBattOk=1;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <F4_Basic_Init+0xb0>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]

	//kezdeti pwm kitoltes megadasa->0 hiszen nem akarjuk h forogjon
	TIM3->CCR1=0;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <F4_Basic_Init+0xb4>)
 800100e:	2200      	movs	r2, #0
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <F4_Basic_Init+0xb4>)
 8001014:	2200      	movs	r2, #0
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f003 feac 	bl	8004d78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8001020:	2104      	movs	r1, #4
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f003 fea8 	bl	8004d78 <HAL_TIM_PWM_Start>
}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020400 	.word	0x40020400
 8001034:	08009e30 	.word	0x08009e30
 8001038:	200005bc 	.word	0x200005bc
 800103c:	200005bd 	.word	0x200005bd
 8001040:	40000400 	.word	0x40000400
 8001044:	00000000 	.word	0x00000000

08001048 <Meas_Bat_Task>:


void Meas_Bat_Task(ADC_HandleTypeDef *hadc,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
	float bat;
	char msg[30];
	static uint32_t meas_bat_tick=0;


	if(meas_bat_tick>tick) return;
 8001056:	4b4a      	ldr	r3, [pc, #296]	; (8001180 <Meas_Bat_Task+0x138>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	f0c0 8085 	bcc.w	800116c <Meas_Bat_Task+0x124>
	meas_bat_tick= tick + period;
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a45      	ldr	r2, [pc, #276]	; (8001180 <Meas_Bat_Task+0x138>)
 800106a:	6013      	str	r3, [r2, #0]

	//get ADC value
	HAL_ADC_Start(hadc);
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f001 fd17 	bl	8002aa0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1);
 8001072:	2101      	movs	r1, #1
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f001 fde5 	bl	8002c44 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(hadc);
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f001 fe6d 	bl	8002d5a <HAL_ADC_GetValue>
 8001080:	4603      	mov	r3, r0
 8001082:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Raw to Volt
	bat=(float)raw/2091*8.05;
 8001084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001184 <Meas_Bat_Task+0x13c>
 8001092:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001096:	ee16 0a90 	vmov	r0, s13
 800109a:	f7ff fa75 	bl	8000588 <__aeabi_f2d>
 800109e:	a336      	add	r3, pc, #216	; (adr r3, 8001178 <Meas_Bat_Task+0x130>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fac8 	bl	8000638 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd9a 	bl	8000be8 <__aeabi_d2f>
 80010b4:	4603      	mov	r3, r0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30

	//Print Value
	sprintf(msg,"NI-MH feszultsege: %3.2f [V] (%d)\r\n",bat,raw);
 80010b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010ba:	f7ff fa65 	bl	8000588 <__aeabi_f2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80010c4:	f107 0010 	add.w	r0, r7, #16
 80010c8:	9100      	str	r1, [sp, #0]
 80010ca:	492f      	ldr	r1, [pc, #188]	; (8001188 <Meas_Bat_Task+0x140>)
 80010cc:	f006 fc2c 	bl	8007928 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg),10);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f89b 	bl	8000210 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f107 0110 	add.w	r1, r7, #16
 80010e2:	230a      	movs	r3, #10
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	f005 fb6c 	bl	80067c2 <HAL_UART_Transmit>


	memset(msg,0,30);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	221e      	movs	r2, #30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 ffa6 	bl	8007044 <memset>
	if (raw<1600 && EN_FB) //ha be van kapcolva a motorvezérlő és az akkuja feszültsége alacsony
 80010f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80010fe:	d22b      	bcs.n	8001158 <Meas_Bat_Task+0x110>
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	4822      	ldr	r0, [pc, #136]	; (800118c <Meas_Bat_Task+0x144>)
 8001104:	f002 feac 	bl	8003e60 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d024      	beq.n	8001158 <Meas_Bat_Task+0x110>
	{
		meas_bat_tick= tick + period/10;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <Meas_Bat_Task+0x148>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	4a18      	ldr	r2, [pc, #96]	; (8001180 <Meas_Bat_Task+0x138>)
 800111e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8001120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <Meas_Bat_Task+0x144>)
 8001126:	f002 fecc 	bl	8003ec2 <HAL_GPIO_TogglePin>
		sprintf(msg,"Toltes szukseges\r\n");
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4919      	ldr	r1, [pc, #100]	; (8001194 <Meas_Bat_Task+0x14c>)
 8001130:	4618      	mov	r0, r3
 8001132:	f006 fbf9 	bl	8007928 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg),10);
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f868 	bl	8000210 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	f107 0110 	add.w	r1, r7, #16
 8001148:	230a      	movs	r3, #10
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f005 fb39 	bl	80067c2 <HAL_UART_Transmit>

		//MotorEnable kikapcsolása ha akksi fesz beesik.
		motorEnBattOk=0;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <Meas_Bat_Task+0x150>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e00a      	b.n	800116e <Meas_Bat_Task+0x126>

	}
	else
	{
		LED_Y(0);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <Meas_Bat_Task+0x144>)
 8001160:	f002 fe96 	bl	8003e90 <HAL_GPIO_WritePin>
		motorEnBattOk=1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <Meas_Bat_Task+0x150>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e000      	b.n	800116e <Meas_Bat_Task+0x126>
	if(meas_bat_tick>tick) return;
 800116c:	bf00      	nop
	}


}
 800116e:	3738      	adds	r7, #56	; 0x38
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	f3af 8000 	nop.w
 8001178:	9999999a 	.word	0x9999999a
 800117c:	40201999 	.word	0x40201999
 8001180:	200001fc 	.word	0x200001fc
 8001184:	4502b000 	.word	0x4502b000
 8001188:	08009e4c 	.word	0x08009e4c
 800118c:	40020400 	.word	0x40020400
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	08009e70 	.word	0x08009e70
 8001198:	200005bd 	.word	0x200005bd

0800119c <Read_G0_Task>:


void Read_G0_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debug, uint32_t tick, uint32_t period)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]

	uint8_t str[20];
	uint8_t txBuf[]={CMD_READ};
 80011aa:	23ff      	movs	r3, #255	; 0xff
 80011ac:	763b      	strb	r3, [r7, #24]
	uint8_t rxBuf[]={0,0,0,0,0};
 80011ae:	4a29      	ldr	r2, [pc, #164]	; (8001254 <Read_G0_Task+0xb8>)
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b8:	6018      	str	r0, [r3, #0]
 80011ba:	3304      	adds	r3, #4
 80011bc:	7019      	strb	r1, [r3, #0]
	static uint32_t read_g0_task_tick=0;

	if(read_g0_task_tick>tick) return;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <Read_G0_Task+0xbc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d341      	bcc.n	800124c <Read_G0_Task+0xb0>
	read_g0_task_tick = tick + period;
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a22      	ldr	r2, [pc, #136]	; (8001258 <Read_G0_Task+0xbc>)
 80011d0:	6013      	str	r3, [r2, #0]


	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 80011d2:	f107 0118 	add.w	r1, r7, #24
 80011d6:	2301      	movs	r3, #1
 80011d8:	2201      	movs	r2, #1
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f005 faf1 	bl	80067c2 <HAL_UART_Transmit>
	HAL_UART_Receive(huart_stm, rxBuf, 5, 2);
 80011e0:	f107 0110 	add.w	r1, r7, #16
 80011e4:	2302      	movs	r3, #2
 80011e6:	2205      	movs	r2, #5
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f005 fb7c 	bl	80068e6 <HAL_UART_Receive>
	if((rxBuf[0]==START_BYTE && STOP_BYTE))
 80011ee:	7c3b      	ldrb	r3, [r7, #16]
 80011f0:	2b17      	cmp	r3, #23
 80011f2:	d125      	bne.n	8001240 <Read_G0_Task+0xa4>
	{
		LED_G(1);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2102      	movs	r1, #2
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <Read_G0_Task+0xc0>)
 80011fa:	f002 fe49 	bl	8003e90 <HAL_GPIO_WritePin>
		memset(str,0,20);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2214      	movs	r2, #20
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f005 ff1c 	bl	8007044 <memset>
		sprintf(str,"%3d, %3d, %1d \n\r", rxBuf[2],rxBuf[3],rxBuf[1]);
 800120c:	7cbb      	ldrb	r3, [r7, #18]
 800120e:	461a      	mov	r2, r3
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	4619      	mov	r1, r3
 8001214:	7c7b      	ldrb	r3, [r7, #17]
 8001216:	f107 001c 	add.w	r0, r7, #28
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	460b      	mov	r3, r1
 800121e:	4910      	ldr	r1, [pc, #64]	; (8001260 <Read_G0_Task+0xc4>)
 8001220:	f006 fb82 	bl	8007928 <siprintf>
		HAL_UART_Transmit(huart_debug, str, strlen(str), 10);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4618      	mov	r0, r3
 800122a:	f7fe fff1 	bl	8000210 <strlen>
 800122e:	4603      	mov	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	f107 011c 	add.w	r1, r7, #28
 8001236:	230a      	movs	r3, #10
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f005 fac2 	bl	80067c2 <HAL_UART_Transmit>
 800123e:	e006      	b.n	800124e <Read_G0_Task+0xb2>
	}
	else LED_G(0);
 8001240:	2201      	movs	r2, #1
 8001242:	2102      	movs	r1, #2
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <Read_G0_Task+0xc0>)
 8001246:	f002 fe23 	bl	8003e90 <HAL_GPIO_WritePin>
 800124a:	e000      	b.n	800124e <Read_G0_Task+0xb2>
	if(read_g0_task_tick>tick) return;
 800124c:	bf00      	nop

}
 800124e:	3730      	adds	r7, #48	; 0x30
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	08009e98 	.word	0x08009e98
 8001258:	20000200 	.word	0x20000200
 800125c:	40020400 	.word	0x40020400
 8001260:	08009e84 	.word	0x08009e84

08001264 <Motor_Drive_Task>:
int32_t motorDuty=400;//(-1000)-től (1000)-ig változhasson elméletben (gykorlatban -950 től 950 ig és a [-50,50] sáv is tiltott)
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Motor_Drive_Task(TIM_HandleTypeDef *htim, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	603b      	str	r3, [r7, #0]
	static uint32_t motorDutyPrev=0;
	static uint32_t motor_drive_task_tick=0;
	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <Motor_Drive_Task+0x8c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	d335      	bcc.n	80012e8 <Motor_Drive_Task+0x84>
	motor_drive_task_tick= tick + period;
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <Motor_Drive_Task+0x8c>)
 8001284:	6013      	str	r3, [r2, #0]
	sprintf(buf,"Kitoltesi tenyezo: %d \r\n",DUTY);
	HAL_UART_Transmit(huart, buf, strlen(buf), 10);
	motor_drive_task_tick= tick + 2000;
#endif

	if(motorEnBattOk &&motorEnRemote) MOTOR_EN(1);//ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <Motor_Drive_Task+0x90>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <Motor_Drive_Task+0x3e>
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <Motor_Drive_Task+0x94>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <Motor_Drive_Task+0x3e>
 8001296:	2201      	movs	r2, #1
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <Motor_Drive_Task+0x98>)
 800129c:	f002 fdf8 	bl	8003e90 <HAL_GPIO_WritePin>
 80012a0:	e004      	b.n	80012ac <Motor_Drive_Task+0x48>
	else MOTOR_EN(0); //amugy stop
 80012a2:	2200      	movs	r2, #0
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	4815      	ldr	r0, [pc, #84]	; (80012fc <Motor_Drive_Task+0x98>)
 80012a8:	f002 fdf2 	bl	8003e90 <HAL_GPIO_WritePin>
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <Motor_Drive_Task+0x9c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <Motor_Drive_Task+0xa0>)
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d011      	beq.n	80012dc <Motor_Drive_Task+0x78>
	{
		ccr1 = (motorDuty + 1000)/2;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <Motor_Drive_Task+0x9c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80012c0:	0fda      	lsrs	r2, r3, #31
 80012c2:	4413      	add	r3, r2
 80012c4:	105b      	asrs	r3, r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
		ccr2= 1000-ccr1;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80012ce:	613b      	str	r3, [r7, #16]
		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <Motor_Drive_Task+0xa4>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <Motor_Drive_Task+0xa4>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Motor_Drive_Task+0x9c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <Motor_Drive_Task+0xa0>)
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e000      	b.n	80012ea <Motor_Drive_Task+0x86>
	if(motor_drive_task_tick>tick) return;
 80012e8:	bf00      	nop


}
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000204 	.word	0x20000204
 80012f4:	200005bd 	.word	0x200005bd
 80012f8:	200005bc 	.word	0x200005bc
 80012fc:	40020400 	.word	0x40020400
 8001300:	20000000 	.word	0x20000000
 8001304:	20000208 	.word	0x20000208
 8001308:	40000400 	.word	0x40000400

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001312:	f001 fb0f 	bl	8002934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001316:	f000 f857 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131a:	f000 fccf 	bl	8001cbc <MX_GPIO_Init>
  MX_DMA_Init();
 800131e:	f000 fcad 	bl	8001c7c <MX_DMA_Init>
  MX_TIM2_Init();
 8001322:	f000 f9e9 	bl	80016f8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001326:	f000 fc2b 	bl	8001b80 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800132a:	f000 fadd 	bl	80018e8 <MX_TIM4_Init>
  MX_ADC2_Init();
 800132e:	f000 f90f 	bl	8001550 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001332:	f000 fa57 	bl	80017e4 <MX_TIM3_Init>
  MX_UART5_Init();
 8001336:	f000 fbf9 	bl	8001b2c <MX_UART5_Init>
  MX_USART2_UART_Init();
 800133a:	f000 fc4b 	bl	8001bd4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800133e:	f000 fb9d 	bl	8001a7c <MX_TIM8_Init>
  MX_ADC1_Init();
 8001342:	f000 f8b3 	bl	80014ac <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001346:	f000 fc6f 	bl	8001c28 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 800134a:	f000 fb49 	bl	80019e0 <MX_TIM5_Init>
  MX_TIM1_Init();
 800134e:	f000 f951 	bl	80015f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart2, &htim5,&htim3);
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <main+0xa4>)
 8001354:	4917      	ldr	r1, [pc, #92]	; (80013b4 <main+0xa8>)
 8001356:	4818      	ldr	r0, [pc, #96]	; (80013b8 <main+0xac>)
 8001358:	f7ff fe18 	bl	8000f8c <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3); //inicializálunk a megfelelő perifériákkal
 800135c:	2108      	movs	r1, #8
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <main+0xb0>)
 8001360:	f000 fd7c 	bl	8001e5c <Remote_Control_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart2, TICK, 23);
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <main+0xa8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	2217      	movs	r2, #23
 800136c:	9200      	str	r2, [sp, #0]
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <main+0xac>)
 8001370:	2108      	movs	r1, #8
 8001372:	4812      	ldr	r0, [pc, #72]	; (80013bc <main+0xb0>)
 8001374:	f000 fd8c 	bl	8001e90 <Remote_Control_Task>
	  Meas_Bat_Task(&hadc2, &huart2, TICK, 10000);
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <main+0xa8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <main+0xac>)
 8001384:	480e      	ldr	r0, [pc, #56]	; (80013c0 <main+0xb4>)
 8001386:	f7ff fe5f 	bl	8001048 <Meas_Bat_Task>
	  Motor_Drive_Task(&htim3, &huart2, TICK, 13);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <main+0xa8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001390:	230d      	movs	r3, #13
 8001392:	4909      	ldr	r1, [pc, #36]	; (80013b8 <main+0xac>)
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <main+0xa4>)
 8001396:	f7ff ff65 	bl	8001264 <Motor_Drive_Task>
	  Read_G0_Task(&huart5, &huart2, TICK, 1000);
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <main+0xa8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <main+0xac>)
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <main+0xb8>)
 80013a8:	f7ff fef8 	bl	800119c <Read_G0_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart2, TICK, 23);
 80013ac:	e7da      	b.n	8001364 <main+0x58>
 80013ae:	bf00      	nop
 80013b0:	2000032c 	.word	0x2000032c
 80013b4:	200003bc 	.word	0x200003bc
 80013b8:	20000534 	.word	0x20000534
 80013bc:	20000374 	.word	0x20000374
 80013c0:	20000254 	.word	0x20000254
 80013c4:	200004ac 	.word	0x200004ac

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2234      	movs	r2, #52	; 0x34
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fe34 	bl	8007044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <SystemClock_Config+0xdc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <SystemClock_Config+0xdc>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <SystemClock_Config+0xdc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <SystemClock_Config+0xe0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <SystemClock_Config+0xe0>)
 8001412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <SystemClock_Config+0xe0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800142c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142e:	2302      	movs	r3, #2
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001432:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800143c:	23b4      	movs	r3, #180	; 0xb4
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001440:	2302      	movs	r3, #2
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4618      	mov	r0, r3
 8001452:	f003 f8eb 	bl	800462c <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800145c:	f000 fcf8 	bl	8001e50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001460:	f002 fd4a 	bl	8003ef8 <HAL_PWREx_EnableOverDrive>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800146a:	f000 fcf1 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001472:	2302      	movs	r3, #2
 8001474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800147a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800147e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2105      	movs	r1, #5
 800148c:	4618      	mov	r0, r3
 800148e:	f002 fd83 	bl	8003f98 <HAL_RCC_ClockConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001498:	f000 fcda 	bl	8001e50 <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3750      	adds	r7, #80	; 0x50
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_ADC1_Init+0x98>)
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <MX_ADC1_Init+0x9c>)
 80014c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_ADC1_Init+0x98>)
 80014c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_ADC1_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_ADC1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_ADC1_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_ADC1_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_ADC1_Init+0x98>)
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <MX_ADC1_Init+0xa0>)
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_ADC1_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_ADC1_Init+0x98>)
 8001508:	2201      	movs	r2, #1
 800150a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_ADC1_Init+0x98>)
 800150e:	f001 fa83 	bl	8002a18 <HAL_ADC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 fc9a 	bl	8001e50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800151c:	2308      	movs	r3, #8
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_ADC1_Init+0x98>)
 800152e:	f001 fc21 	bl	8002d74 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001538:	f000 fc8a 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000020c 	.word	0x2000020c
 8001548:	40012000 	.word	0x40012000
 800154c:	0f000001 	.word	0x0f000001

08001550 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001556:	463b      	mov	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_ADC2_Init+0x98>)
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <MX_ADC2_Init+0x9c>)
 8001566:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_ADC2_Init+0x98>)
 800156a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800156e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_ADC2_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_ADC2_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_ADC2_Init+0x98>)
 800157e:	2200      	movs	r2, #0
 8001580:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_ADC2_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_ADC2_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_ADC2_Init+0x98>)
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <MX_ADC2_Init+0xa0>)
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_ADC2_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_ADC2_Init+0x98>)
 800159e:	2201      	movs	r2, #1
 80015a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_ADC2_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_ADC2_Init+0x98>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_ADC2_Init+0x98>)
 80015b2:	f001 fa31 	bl	8002a18 <HAL_ADC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80015bc:	f000 fc48 	bl	8001e50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015c0:	230c      	movs	r3, #12
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_ADC2_Init+0x98>)
 80015d2:	f001 fbcf 	bl	8002d74 <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80015dc:	f000 fc38 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000254 	.word	0x20000254
 80015ec:	40012100 	.word	0x40012100
 80015f0:	0f000001 	.word	0x0f000001

080015f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b092      	sub	sp, #72	; 0x48
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2220      	movs	r2, #32
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f005 fd10 	bl	8007044 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <MX_TIM1_Init+0xfc>)
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <MX_TIM1_Init+0x100>)
 8001628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <MX_TIM1_Init+0xfc>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <MX_TIM1_Init+0xfc>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <MX_TIM1_Init+0xfc>)
 8001638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <MX_TIM1_Init+0xfc>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <MX_TIM1_Init+0xfc>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <MX_TIM1_Init+0xfc>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001650:	4827      	ldr	r0, [pc, #156]	; (80016f0 <MX_TIM1_Init+0xfc>)
 8001652:	f003 fb41 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800165c:	f000 fbf8 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001668:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800166c:	4619      	mov	r1, r3
 800166e:	4820      	ldr	r0, [pc, #128]	; (80016f0 <MX_TIM1_Init+0xfc>)
 8001670:	f004 ff78 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800167a:	f000 fbe9 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167e:	2360      	movs	r3, #96	; 0x60
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	220c      	movs	r2, #12
 800169c:	4619      	mov	r1, r3
 800169e:	4814      	ldr	r0, [pc, #80]	; (80016f0 <MX_TIM1_Init+0xfc>)
 80016a0:	f004 f880 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80016aa:	f000 fbd1 	bl	8001e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <MX_TIM1_Init+0xfc>)
 80016d2:	f004 ffc3 	bl	800665c <HAL_TIMEx_ConfigBreakDeadTime>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80016dc:	f000 fbb8 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <MX_TIM1_Init+0xfc>)
 80016e2:	f000 fe59 	bl	8002398 <HAL_TIM_MspPostInit>

}
 80016e6:	bf00      	nop
 80016e8:	3748      	adds	r7, #72	; 0x48
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000029c 	.word	0x2000029c
 80016f4:	40010000 	.word	0x40010000

080016f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	; 0x38
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <MX_TIM2_Init+0xe8>)
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900;
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <MX_TIM2_Init+0xe8>)
 8001732:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_TIM2_Init+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MX_TIM2_Init+0xe8>)
 8001740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_TIM2_Init+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <MX_TIM2_Init+0xe8>)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001752:	4823      	ldr	r0, [pc, #140]	; (80017e0 <MX_TIM2_Init+0xe8>)
 8001754:	f003 fa08 	bl	8004b68 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800175e:	f000 fb77 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176c:	4619      	mov	r1, r3
 800176e:	481c      	ldr	r0, [pc, #112]	; (80017e0 <MX_TIM2_Init+0xe8>)
 8001770:	f004 f8da 	bl	8005928 <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800177a:	f000 fb69 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MX_TIM2_Init+0xe8>)
 8001780:	f003 faaa 	bl	8004cd8 <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800178a:	f000 fb61 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MX_TIM2_Init+0xe8>)
 800179e:	f004 fee1 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017a8:	f000 fb52 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <MX_TIM2_Init+0xe8>)
 80017c4:	f003 ffee 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017ce:	f000 fb3f 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <MX_TIM2_Init+0xe8>)
 80017d4:	f000 fde0 	bl	8002398 <HAL_TIM_MspPostInit>

}
 80017d8:	bf00      	nop
 80017da:	3738      	adds	r7, #56	; 0x38
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200002e4 	.word	0x200002e4

080017e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001816:	4a33      	ldr	r2, [pc, #204]	; (80018e4 <MX_TIM3_Init+0x100>)
 8001818:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <MX_TIM3_Init+0xfc>)
 800181c:	2201      	movs	r2, #1
 800181e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001822:	2260      	movs	r2, #96	; 0x60
 8001824:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001828:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800183a:	4829      	ldr	r0, [pc, #164]	; (80018e0 <MX_TIM3_Init+0xfc>)
 800183c:	f003 f994 	bl	8004b68 <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001846:	f000 fb03 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001854:	4619      	mov	r1, r3
 8001856:	4822      	ldr	r0, [pc, #136]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001858:	f004 f866 	bl	8005928 <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001862:	f000 faf5 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001866:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001868:	f003 fa36 	bl	8004cd8 <HAL_TIM_PWM_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001872:	f000 faed 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	4619      	mov	r1, r3
 8001884:	4816      	ldr	r0, [pc, #88]	; (80018e0 <MX_TIM3_Init+0xfc>)
 8001886:	f004 fe6d 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001890:	f000 fade 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001894:	2360      	movs	r3, #96	; 0x60
 8001896:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_TIM3_Init+0xfc>)
 80018ac:	f003 ff7a 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018b6:	f000 facb 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2204      	movs	r2, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM3_Init+0xfc>)
 80018c2:	f003 ff6f 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80018cc:	f000 fac0 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM3_Init+0xfc>)
 80018d2:	f000 fd61 	bl	8002398 <HAL_TIM_MspPostInit>

}
 80018d6:	bf00      	nop
 80018d8:	3738      	adds	r7, #56	; 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000032c 	.word	0x2000032c
 80018e4:	40000400 	.word	0x40000400

080018e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0318 	add.w	r3, r7, #24
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001906:	463b      	mov	r3, r7
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001912:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001914:	4a31      	ldr	r2, [pc, #196]	; (80019dc <MX_TIM4_Init+0xf4>)
 8001916:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <MX_TIM4_Init+0xf0>)
 800191a:	f240 321f 	movw	r2, #799	; 0x31f
 800191e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800193a:	4827      	ldr	r0, [pc, #156]	; (80019d8 <MX_TIM4_Init+0xf0>)
 800193c:	f003 f914 	bl	8004b68 <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001946:	f000 fa83 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	4619      	mov	r1, r3
 8001956:	4820      	ldr	r0, [pc, #128]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001958:	f003 ffe6 	bl	8005928 <HAL_TIM_ConfigClockSource>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001962:	f000 fa75 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001966:	481c      	ldr	r0, [pc, #112]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001968:	f003 face 	bl	8004f08 <HAL_TIM_IC_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001972:	f000 fa6d 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	4619      	mov	r1, r3
 8001984:	4814      	ldr	r0, [pc, #80]	; (80019d8 <MX_TIM4_Init+0xf0>)
 8001986:	f004 fded 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001990:	f000 fa5e 	bl	8001e50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001994:	230a      	movs	r3, #10
 8001996:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001998:	2301      	movs	r3, #1
 800199a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019a4:	463b      	mov	r3, r7
 80019a6:	2208      	movs	r2, #8
 80019a8:	4619      	mov	r1, r3
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <MX_TIM4_Init+0xf0>)
 80019ac:	f003 fe5e 	bl	800566c <HAL_TIM_IC_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80019b6:	f000 fa4b 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019ba:	463b      	mov	r3, r7
 80019bc:	220c      	movs	r2, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_TIM4_Init+0xf0>)
 80019c2:	f003 fe53 	bl	800566c <HAL_TIM_IC_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 80019cc:	f000 fa40 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000374 	.word	0x20000374
 80019dc:	40000800 	.word	0x40000800

080019e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_TIM5_Init+0x94>)
 80019fe:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <MX_TIM5_Init+0x98>)
 8001a00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a04:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001a08:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a12:	f04f 32ff 	mov.w	r2, #4294967295
 8001a16:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a26:	f003 f89f 	bl	8004b68 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a30:	f000 fa0e 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a42:	f003 ff71 	bl	8005928 <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a4c:	f000 fa00 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM5_Init+0x94>)
 8001a5e:	f004 fd81 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a68:	f000 f9f2 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200003bc 	.word	0x200003bc
 8001a78:	40000c00 	.word	0x40000c00

08001a7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 fada 	bl	8007044 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001a9a:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <MX_TIM8_Init+0xac>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001acc:	2301      	movs	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001adc:	2301      	movs	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	480d      	ldr	r0, [pc, #52]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001af0:	f003 fc0e 	bl	8005310 <HAL_TIM_Encoder_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001afa:	f000 f9a9 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_TIM8_Init+0xa8>)
 8001b0c:	f004 fd2a 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001b16:	f000 f99b 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000404 	.word	0x20000404
 8001b28:	40010400 	.word	0x40010400

08001b2c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_UART5_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b38:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b3c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_UART5_Init+0x4c>)
 8001b64:	f004 fde0 	bl	8006728 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001b6e:	f000 f96f 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200004ac 	.word	0x200004ac
 8001b7c:	40005000 	.word	0x40005000

08001b80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <MX_USART1_UART_Init+0x50>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001bb8:	f004 fdb6 	bl	8006728 <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bc2:	f000 f945 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200004f0 	.word	0x200004f0
 8001bd0:	40011000 	.word	0x40011000

08001bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_USART2_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	f004 fd8c 	bl	8006728 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f000 f91b 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000534 	.word	0x20000534
 8001c24:	40004400 	.word	0x40004400

08001c28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <MX_USART3_UART_Init+0x50>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_USART3_UART_Init+0x4c>)
 8001c60:	f004 fd62 	bl	8006728 <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c6a:	f000 f8f1 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000578 	.word	0x20000578
 8001c78:	40004800 	.word	0x40004800

08001c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_DMA_Init+0x3c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <MX_DMA_Init+0x3c>)
 8001c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_DMA_Init+0x3c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	202f      	movs	r0, #47	; 0x2f
 8001ca4:	f001 fb93 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001ca8:	202f      	movs	r0, #47	; 0x2f
 8001caa:	f001 fbac 	bl	8003406 <HAL_NVIC_EnableIRQ>

}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b52      	ldr	r3, [pc, #328]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a46      	ldr	r2, [pc, #280]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a3f      	ldr	r2, [pc, #252]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a38      	ldr	r2, [pc, #224]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <MX_GPIO_Init+0x170>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2102      	movs	r1, #2
 8001d62:	4833      	ldr	r0, [pc, #204]	; (8001e30 <MX_GPIO_Init+0x174>)
 8001d64:	f002 f894 	bl	8003e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2122      	movs	r1, #34	; 0x22
 8001d6c:	4831      	ldr	r0, [pc, #196]	; (8001e34 <MX_GPIO_Init+0x178>)
 8001d6e:	f002 f88f 	bl	8003e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001d72:	2200      	movs	r2, #0
 8001d74:	f24e 0142 	movw	r1, #57410	; 0xe042
 8001d78:	482f      	ldr	r0, [pc, #188]	; (8001e38 <MX_GPIO_Init+0x17c>)
 8001d7a:	f002 f889 	bl	8003e90 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4826      	ldr	r0, [pc, #152]	; (8001e30 <MX_GPIO_Init+0x174>)
 8001d96:	f001 fecf 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	481f      	ldr	r0, [pc, #124]	; (8001e30 <MX_GPIO_Init+0x174>)
 8001db2:	f001 fec1 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8001db6:	2322      	movs	r3, #34	; 0x22
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4819      	ldr	r0, [pc, #100]	; (8001e34 <MX_GPIO_Init+0x178>)
 8001dce:	f001 feb3 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001dd2:	f24e 0342 	movw	r3, #57410	; 0xe042
 8001dd6:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4813      	ldr	r0, [pc, #76]	; (8001e38 <MX_GPIO_Init+0x17c>)
 8001dec:	f001 fea4 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B1B4_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B1B4_Pin|B2_Pin|Motor_Feedback_Pin;
 8001df0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_GPIO_Init+0x17c>)
 8001e06:	f001 fe97 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_GPIO_Init+0x178>)
 8001e20:	f001 fe8a 	bl	8003b38 <HAL_GPIO_Init>

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400

08001e3c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){};
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>
	...

08001e5c <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	tEdge[0] = 0;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <Remote_Control_Init+0x30>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
	tEdge[1] = 0;
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <Remote_Control_Init+0x30>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <Remote_Control_Init+0x30>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8001e78:	2303      	movs	r3, #3
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <Remote_Control_Init+0x30>)
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f003 f89c 	bl	8004fbc <HAL_TIM_IC_Start_DMA>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200005c0 	.word	0x200005c0

08001e90 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
	static int32_t dt1=0;
	static int32_t dt2=0;
	static uint32_t tLow=0;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <Remote_Control_Task+0x14c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f0c0 8095 	bcc.w	8001fd4 <Remote_Control_Task+0x144>
	remote_control_tick = tick + period;
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <Remote_Control_Task+0x14c>)
 8001eb2:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8001eb4:	201e      	movs	r0, #30
 8001eb6:	f001 fab4 	bl	8003422 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 8001eba:	4b49      	ldr	r3, [pc, #292]	; (8001fe0 <Remote_Control_Task+0x150>)
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <Remote_Control_Task+0x150>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bfb8      	it	lt
 8001ec8:	425b      	neglt	r3, r3
 8001eca:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001ecc:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <Remote_Control_Task+0x150>)
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <Remote_Control_Task+0x150>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bfb8      	it	lt
 8001edc:	425b      	neglt	r3, r3
 8001ede:	4a42      	ldr	r2, [pc, #264]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001ee0:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <Remote_Control_Task+0x150>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <Remote_Control_Task+0x150>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bfb8      	it	lt
 8001ef0:	425b      	neglt	r3, r3
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <Remote_Control_Task+0x15c>)
 8001ef4:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8001ef6:	201e      	movs	r0, #30
 8001ef8:	f001 fa85 	bl	8003406 <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	dd06      	ble.n	8001f16 <Remote_Control_Task+0x86>
 8001f08:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001f10:	33ff      	adds	r3, #255	; 0xff
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001f14:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8001f16:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	dd06      	ble.n	8001f30 <Remote_Control_Task+0xa0>
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001f2a:	33ff      	adds	r3, #255	; 0xff
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001f2e:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <Remote_Control_Task+0x15c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	dd06      	ble.n	8001f4a <Remote_Control_Task+0xba>
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <Remote_Control_Task+0x15c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001f44:	33ff      	adds	r3, #255	; 0xff
 8001f46:	4a29      	ldr	r2, [pc, #164]	; (8001fec <Remote_Control_Task+0x15c>)
 8001f48:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	da0b      	bge.n	8001f6e <Remote_Control_Task+0xde>
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <Remote_Control_Task+0x15c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	da05      	bge.n	8001f6e <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <Remote_Control_Task+0x160>)
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e016      	b.n	8001f9c <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <Remote_Control_Task+0x154>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	da0b      	bge.n	8001f92 <Remote_Control_Task+0x102>
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <Remote_Control_Task+0x15c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	da05      	bge.n	8001f92 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <Remote_Control_Task+0x158>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <Remote_Control_Task+0x160>)
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e004      	b.n	8001f9c <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <Remote_Control_Task+0x15c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <Remote_Control_Task+0x160>)
 8001f9a:	601a      	str	r2, [r3, #0]
	}
/*
	sprintf(string,"%d\n\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 100);
*/
	if(tLow<70 || tLow>100)
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <Remote_Control_Task+0x160>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b45      	cmp	r3, #69	; 0x45
 8001fa2:	d903      	bls.n	8001fac <Remote_Control_Task+0x11c>
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <Remote_Control_Task+0x160>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d909      	bls.n	8001fc0 <Remote_Control_Task+0x130>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb2:	4810      	ldr	r0, [pc, #64]	; (8001ff4 <Remote_Control_Task+0x164>)
 8001fb4:	f001 ff6c 	bl	8003e90 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <Remote_Control_Task+0x168>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e00a      	b.n	8001fd6 <Remote_Control_Task+0x146>
	}
	else
	{
		LED_R(0);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fc6:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <Remote_Control_Task+0x164>)
 8001fc8:	f001 ff62 	bl	8003e90 <HAL_GPIO_WritePin>
		motorEnRemote=1;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <Remote_Control_Task+0x168>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e000      	b.n	8001fd6 <Remote_Control_Task+0x146>
	if(remote_control_tick>tick) return;
 8001fd4:	bf00      	nop
	}
}
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200005cc 	.word	0x200005cc
 8001fe0:	200005c0 	.word	0x200005c0
 8001fe4:	200005d0 	.word	0x200005d0
 8001fe8:	200005d4 	.word	0x200005d4
 8001fec:	200005d8 	.word	0x200005d8
 8001ff0:	200005dc 	.word	0x200005dc
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	200005bc 	.word	0x200005bc

08001ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_MspInit+0x4c>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_MspInit+0x4c>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800203a:	2007      	movs	r0, #7
 800203c:	f001 f9bc 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_ADC_MspInit+0xd8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d128      	bne.n	80020c0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a25      	ldr	r2, [pc, #148]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	481c      	ldr	r0, [pc, #112]	; (800212c <HAL_ADC_MspInit+0xe0>)
 80020ba:	f001 fd3d 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020be:	e02c      	b.n	800211a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <HAL_ADC_MspInit+0xe4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d127      	bne.n	800211a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_ADC_MspInit+0xdc>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Curr_Pin|Motor_Bat_Pin;
 8002102:	230c      	movs	r3, #12
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002106:	2303      	movs	r3, #3
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4807      	ldr	r0, [pc, #28]	; (8002134 <HAL_ADC_MspInit+0xe8>)
 8002116:	f001 fd0f 	bl	8003b38 <HAL_GPIO_Init>
}
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	; 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40012000 	.word	0x40012000
 8002128:	40023800 	.word	0x40023800
 800212c:	40020400 	.word	0x40020400
 8002130:	40012100 	.word	0x40012100
 8002134:	40020800 	.word	0x40020800

08002138 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_TIM_PWM_MspInit+0x3c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10d      	bne.n	8002166 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_PWM_MspInit+0x40>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_TIM_PWM_MspInit+0x40>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_TIM_PWM_MspInit+0x40>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40023800 	.word	0x40023800

0800217c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d116      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a51      	ldr	r2, [pc, #324]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b4f      	ldr	r3, [pc, #316]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	201c      	movs	r0, #28
 80021c0:	f001 f905 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c4:	201c      	movs	r0, #28
 80021c6:	f001 f91e 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021ca:	e08b      	b.n	80022e4 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_TIM_Base_MspInit+0x174>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a43      	ldr	r2, [pc, #268]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
}
 80021f2:	e077      	b.n	80022e4 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM4)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <HAL_TIM_Base_MspInit+0x178>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d15f      	bne.n	80022be <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a39      	ldr	r2, [pc, #228]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8002236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002248:	2302      	movs	r3, #2
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4829      	ldr	r0, [pc, #164]	; (80022f8 <HAL_TIM_Base_MspInit+0x17c>)
 8002254:	f001 fc70 	bl	8003b38 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 800225a:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_TIM_Base_MspInit+0x184>)
 800225c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800225e:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 8002260:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002264:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002266:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 8002274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002278:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 800227c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002280:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 8002284:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002288:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 800228c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002290:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 8002294:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002298:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 80022a2:	f001 f8d9 	bl	8003458 <HAL_DMA_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80022ac:	f7ff fdd0 	bl	8001e50 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_TIM_Base_MspInit+0x180>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022bc:	e012      	b.n	80022e4 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM5)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_TIM_Base_MspInit+0x188>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10d      	bne.n	80022e4 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_TIM_Base_MspInit+0x170>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
}
 80022e4:	bf00      	nop
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	40020400 	.word	0x40020400
 80022fc:	2000044c 	.word	0x2000044c
 8002300:	400260b8 	.word	0x400260b8
 8002304:	40000c00 	.word	0x40000c00

08002308 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_TIM_Encoder_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_TIM_Encoder_MspInit+0x88>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_TIM_Encoder_MspInit+0x88>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6453      	str	r3, [r2, #68]	; 0x44
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_TIM_Encoder_MspInit+0x88>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_TIM_Encoder_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_TIM_Encoder_MspInit+0x88>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_TIM_Encoder_MspInit+0x88>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = Enkoder_A_Pin|Enkoder_B_Pin;
 8002362:	23c0      	movs	r3, #192	; 0xc0
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002372:	2303      	movs	r3, #3
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_TIM_Encoder_MspInit+0x8c>)
 800237e:	f001 fbdb 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010400 	.word	0x40010400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020800 	.word	0x40020800

08002398 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a37      	ldr	r2, [pc, #220]	; (8002494 <HAL_TIM_MspPostInit+0xfc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d11f      	bne.n	80023fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a35      	ldr	r2, [pc, #212]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 80023d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4619      	mov	r1, r3
 80023f2:	482a      	ldr	r0, [pc, #168]	; (800249c <HAL_TIM_MspPostInit+0x104>)
 80023f4:	f001 fba0 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023f8:	e047      	b.n	800248a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d11f      	bne.n	8002444 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4a22      	ldr	r2, [pc, #136]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6313      	str	r3, [r2, #48]	; 0x30
 8002414:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8002420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002432:	2301      	movs	r3, #1
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4817      	ldr	r0, [pc, #92]	; (800249c <HAL_TIM_MspPostInit+0x104>)
 800243e:	f001 fb7b 	bl	8003b38 <HAL_GPIO_Init>
}
 8002442:	e022      	b.n	800248a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <HAL_TIM_MspPostInit+0x108>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d11d      	bne.n	800248a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_TIM_MspPostInit+0x100>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 800246a:	23c0      	movs	r3, #192	; 0xc0
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800247a:	2302      	movs	r3, #2
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_TIM_MspPostInit+0x104>)
 8002486:	f001 fb57 	bl	8003b38 <HAL_GPIO_Init>
}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40000400 	.word	0x40000400

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b090      	sub	sp, #64	; 0x40
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a74      	ldr	r2, [pc, #464]	; (8002694 <HAL_UART_MspInit+0x1f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d14b      	bne.n	800255e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ca:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a72      	ldr	r2, [pc, #456]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80024d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a6b      	ldr	r2, [pc, #428]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b69      	ldr	r3, [pc, #420]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a64      	ldr	r2, [pc, #400]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 800251a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800252c:	2308      	movs	r3, #8
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8002530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	4859      	ldr	r0, [pc, #356]	; (800269c <HAL_UART_MspInit+0x1f8>)
 8002538:	f001 fafe 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 800253c:	2304      	movs	r3, #4
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800254c:	2308      	movs	r3, #8
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8002550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002554:	4619      	mov	r1, r3
 8002556:	4852      	ldr	r0, [pc, #328]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002558:	f001 faee 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800255c:	e096      	b.n	800268c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a50      	ldr	r2, [pc, #320]	; (80026a4 <HAL_UART_MspInit+0x200>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d12d      	bne.n	80025c4 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	4a49      	ldr	r2, [pc, #292]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6453      	str	r3, [r2, #68]	; 0x44
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4a42      	ldr	r2, [pc, #264]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6313      	str	r3, [r2, #48]	; 0x30
 8002594:	4b40      	ldr	r3, [pc, #256]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80025a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025b2:	2307      	movs	r3, #7
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ba:	4619      	mov	r1, r3
 80025bc:	483a      	ldr	r0, [pc, #232]	; (80026a8 <HAL_UART_MspInit+0x204>)
 80025be:	f001 fabb 	bl	8003b38 <HAL_GPIO_Init>
}
 80025c2:	e063      	b.n	800268c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a38      	ldr	r2, [pc, #224]	; (80026ac <HAL_UART_MspInit+0x208>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d12c      	bne.n	8002628 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a30      	ldr	r2, [pc, #192]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a29      	ldr	r2, [pc, #164]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002606:	230c      	movs	r3, #12
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002616:	2307      	movs	r3, #7
 8002618:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261e:	4619      	mov	r1, r3
 8002620:	4821      	ldr	r0, [pc, #132]	; (80026a8 <HAL_UART_MspInit+0x204>)
 8002622:	f001 fa89 	bl	8003b38 <HAL_GPIO_Init>
}
 8002626:	e031      	b.n	800268c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <HAL_UART_MspInit+0x20c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12c      	bne.n	800268c <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 800263c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a10      	ldr	r2, [pc, #64]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_UART_MspInit+0x1f4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 800266a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002678:	2303      	movs	r3, #3
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800267c:	2307      	movs	r3, #7
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002684:	4619      	mov	r1, r3
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <HAL_UART_MspInit+0x1f8>)
 8002688:	f001 fa56 	bl	8003b38 <HAL_GPIO_Init>
}
 800268c:	bf00      	nop
 800268e:	3740      	adds	r7, #64	; 0x40
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40005000 	.word	0x40005000
 8002698:	40023800 	.word	0x40023800
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40004400 	.word	0x40004400
 80026b0:	40004800 	.word	0x40004800

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002700:	f000 f96a 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <TIM2_IRQHandler+0x10>)
 800270e:	f002 fea5 	bl	800545c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200002e4 	.word	0x200002e4

0800271c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <DMA1_Stream7_IRQHandler+0x10>)
 8002722:	f000 ff9f 	bl	8003664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000044c 	.word	0x2000044c

08002730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	return 1;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_kill>:

int _kill(int pid, int sig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800274a:	f004 fc51 	bl	8006ff0 <__errno>
 800274e:	4603      	mov	r3, r0
 8002750:	2216      	movs	r2, #22
 8002752:	601a      	str	r2, [r3, #0]
	return -1;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_exit>:

void _exit (int status)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ffe7 	bl	8002740 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002772:	e7fe      	b.n	8002772 <_exit+0x12>

08002774 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e00a      	b.n	800279c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002786:	f3af 8000 	nop.w
 800278a:	4601      	mov	r1, r0
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	60ba      	str	r2, [r7, #8]
 8002792:	b2ca      	uxtb	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dbf0      	blt.n	8002786 <_read+0x12>
	}

return len;
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e009      	b.n	80027d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	60ba      	str	r2, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3301      	adds	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	dbf1      	blt.n	80027c0 <_write+0x12>
	}
	return len;
 80027dc:	687b      	ldr	r3, [r7, #4]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_close>:

int _close(int file)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
	return -1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800280e:	605a      	str	r2, [r3, #4]
	return 0;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <_isatty>:

int _isatty(int file)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	return 1;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
	return 0;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <_sbrk+0x5c>)
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <_sbrk+0x60>)
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <_sbrk+0x64>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <_sbrk+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002880:	f004 fbb6 	bl	8006ff0 <__errno>
 8002884:	4603      	mov	r3, r0
 8002886:	220c      	movs	r2, #12
 8002888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e009      	b.n	80028a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <_sbrk+0x64>)
 80028a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20020000 	.word	0x20020000
 80028b0:	00000400 	.word	0x00000400
 80028b4:	200005e0 	.word	0x200005e0
 80028b8:	200005f8 	.word	0x200005f8

080028bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <SystemInit+0x20>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <SystemInit+0x20>)
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <Reset_Handler>:
 80028e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002918 <LoopFillZerobss+0x12>
 80028e4:	480d      	ldr	r0, [pc, #52]	; (800291c <LoopFillZerobss+0x16>)
 80028e6:	490e      	ldr	r1, [pc, #56]	; (8002920 <LoopFillZerobss+0x1a>)
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <LoopFillZerobss+0x1e>)
 80028ea:	2300      	movs	r3, #0
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:
 80028ee:	58d4      	ldr	r4, [r2, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:
 80028f4:	18c4      	adds	r4, r0, r3
 80028f6:	428c      	cmp	r4, r1
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <LoopFillZerobss+0x22>)
 80028fc:	4c0b      	ldr	r4, [pc, #44]	; (800292c <LoopFillZerobss+0x26>)
 80028fe:	2300      	movs	r3, #0
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:
 8002906:	42a2      	cmp	r2, r4
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>
 800290a:	f7ff ffd7 	bl	80028bc <SystemInit>
 800290e:	f004 fb75 	bl	8006ffc <__libc_init_array>
 8002912:	f7fe fcfb 	bl	800130c <main>
 8002916:	4770      	bx	lr
 8002918:	20020000 	.word	0x20020000
 800291c:	20000000 	.word	0x20000000
 8002920:	200001e0 	.word	0x200001e0
 8002924:	0800a2ac 	.word	0x0800a2ac
 8002928:	200001e0 	.word	0x200001e0
 800292c:	200005f8 	.word	0x200005f8

08002930 <ADC_IRQHandler>:
 8002930:	e7fe      	b.n	8002930 <ADC_IRQHandler>
	...

08002934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_Init+0x40>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_Init+0x40>)
 800293e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <HAL_Init+0x40>)
 800294a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_Init+0x40>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295c:	2003      	movs	r0, #3
 800295e:	f000 fd2b 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002962:	2000      	movs	r0, #0
 8002964:	f000 f808 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002968:	f7ff fb48 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023c00 	.word	0x40023c00

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_InitTick+0x54>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x58>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fd51 	bl	800343e <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d80a      	bhi.n	80029c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f000 fd0b 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_InitTick+0x5c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000004 	.word	0x20000004
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	20000008 	.word	0x20000008

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	2000000c 	.word	0x2000000c
 80029fc:	200005e4 	.word	0x200005e4

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200005e4 	.word	0x200005e4

08002a18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e033      	b.n	8002a96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fb08 	bl	800204c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a5e:	f023 0302 	bic.w	r3, r3, #2
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fab4 	bl	8002fd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
 8002a86:	e001      	b.n	8002a8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_Start+0x1a>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e0b2      	b.n	8002c20 <HAL_ADC_Start+0x180>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d018      	beq.n	8002b02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_ADC_Start+0x18c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <HAL_ADC_Start+0x190>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0c9a      	lsrs	r2, r3, #18
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002af4:	e002      	b.n	8002afc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f9      	bne.n	8002af6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d17a      	bne.n	8002c06 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	d106      	bne.n	8002b5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	f023 0206 	bic.w	r2, r3, #6
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_ADC_Start+0x194>)
 8002b6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d12a      	bne.n	8002bdc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <HAL_ADC_Start+0x198>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d015      	beq.n	8002bbc <HAL_ADC_Start+0x11c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <HAL_ADC_Start+0x19c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d105      	bne.n	8002ba6 <HAL_ADC_Start+0x106>
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_ADC_Start+0x194>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_ADC_Start+0x1a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d136      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_ADC_Start+0x194>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d130      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d129      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e020      	b.n	8002c1e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <HAL_ADC_Start+0x198>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d11b      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d114      	bne.n	8002c1e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	e00b      	b.n	8002c1e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	40012300 	.word	0x40012300
 8002c38:	40012000 	.word	0x40012000
 8002c3c:	40012100 	.word	0x40012100
 8002c40:	40012200 	.word	0x40012200

08002c44 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c60:	d113      	bne.n	8002c8a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d10b      	bne.n	8002c8a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e063      	b.n	8002d52 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c8a:	f7ff feb9 	bl	8002a00 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c90:	e021      	b.n	8002cd6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d01d      	beq.n	8002cd6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_PollForConversion+0x6c>
 8002ca0:	f7ff feae 	bl	8002a00 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d212      	bcs.n	8002cd6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0204 	orr.w	r2, r3, #4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e03d      	b.n	8002d52 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d1d6      	bne.n	8002c92 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0212 	mvn.w	r2, #18
 8002cec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d123      	bne.n	8002d50 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11f      	bne.n	8002d50 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e113      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x244>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d925      	bls.n	8002dec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4603      	mov	r3, r0
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4403      	add	r3, r0
 8002dde:	3b1e      	subs	r3, #30
 8002de0:	409a      	lsls	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e022      	b.n	8002e32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	2207      	movs	r2, #7
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4403      	add	r3, r0
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d824      	bhi.n	8002e84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b05      	subs	r3, #5
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	e04c      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d824      	bhi.n	8002ed6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b23      	subs	r3, #35	; 0x23
 8002e9e:	221f      	movs	r2, #31
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	400a      	ands	r2, r1
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b23      	subs	r3, #35	; 0x23
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	e023      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b41      	subs	r3, #65	; 0x41
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b41      	subs	r3, #65	; 0x41
 8002f12:	fa00 f203 	lsl.w	r2, r0, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_ADC_ConfigChannel+0x250>)
 8002f20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a28      	ldr	r2, [pc, #160]	; (8002fc8 <HAL_ADC_ConfigChannel+0x254>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10f      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d8>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b12      	cmp	r3, #18
 8002f32:	d10b      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_ADC_ConfigChannel+0x254>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d12b      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x23a>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_ADC_ConfigChannel+0x258>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x1f4>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b11      	cmp	r3, #17
 8002f66:	d122      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <HAL_ADC_ConfigChannel+0x258>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_ADC_ConfigChannel+0x260>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	0c9a      	lsrs	r2, r3, #18
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fa0:	e002      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f9      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	40012000 	.word	0x40012000
 8002fcc:	10000012 	.word	0x10000012
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	431bde83 	.word	0x431bde83

08002fd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fe0:	4b79      	ldr	r3, [pc, #484]	; (80031c8 <ADC_Init+0x1f0>)
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800300c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	4a58      	ldr	r2, [pc, #352]	; (80031cc <ADC_Init+0x1f4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d022      	beq.n	80030b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800307e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e00f      	b.n	80030d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0202 	bic.w	r2, r2, #2
 80030e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7e1b      	ldrb	r3, [r3, #24]
 80030f0:	005a      	lsls	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003112:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003122:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	3b01      	subs	r3, #1
 8003130:	035a      	lsls	r2, r3, #13
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e007      	b.n	800314c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	3b01      	subs	r3, #1
 8003168:	051a      	lsls	r2, r3, #20
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800318e:	025a      	lsls	r2, r3, #9
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	029a      	lsls	r2, r3, #10
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40012300 	.word	0x40012300
 80031cc:	0f000001 	.word	0x0f000001

080031d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ec:	4013      	ands	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	60d3      	str	r3, [r2, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <__NVIC_GetPriorityGrouping+0x18>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 0307 	and.w	r3, r3, #7
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db0b      	blt.n	800325e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4907      	ldr	r1, [pc, #28]	; (800326c <__NVIC_EnableIRQ+0x38>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2001      	movs	r0, #1
 8003256:	fa00 f202 	lsl.w	r2, r0, r2
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db12      	blt.n	80032a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	490a      	ldr	r1, [pc, #40]	; (80032b4 <__NVIC_DisableIRQ+0x44>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	3320      	adds	r3, #32
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800329c:	f3bf 8f4f 	dsb	sy
}
 80032a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032a2:	f3bf 8f6f 	isb	sy
}
 80032a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff05 	bl	80031d0 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff1a 	bl	8003218 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff8e 	bl	800330c <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5d 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff0d 	bl	8003234 <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff1d 	bl	8003270 <__NVIC_DisableIRQ>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ff94 	bl	8003374 <SysTick_Config>
 800344c:	4603      	mov	r3, r0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003464:	f7ff facc 	bl	8002a00 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e099      	b.n	80035a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003494:	e00f      	b.n	80034b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003496:	f7ff fab3 	bl	8002a00 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d908      	bls.n	80034b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2203      	movs	r2, #3
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e078      	b.n	80035a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e8      	bne.n	8003496 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <HAL_DMA_Init+0x158>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b04      	cmp	r3, #4
 800350e:	d107      	bne.n	8003520 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4313      	orrs	r3, r2
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0307 	bic.w	r3, r3, #7
 8003536:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b04      	cmp	r3, #4
 8003548:	d117      	bne.n	800357a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fa6f 	bl	8003a40 <DMA_CheckFifoParam>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003576:	2301      	movs	r3, #1
 8003578:	e016      	b.n	80035a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa26 	bl	80039d4 <DMA_CalcBaseAndBitshift>
 8003588:	4603      	mov	r3, r0
 800358a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003590:	223f      	movs	r2, #63	; 0x3f
 8003592:	409a      	lsls	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	f010803f 	.word	0xf010803f

080035b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_DMA_Start_IT+0x26>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e040      	b.n	800365c <HAL_DMA_Start_IT+0xa8>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d12f      	bne.n	800364e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f9b8 	bl	8003978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	223f      	movs	r2, #63	; 0x3f
 800360e:	409a      	lsls	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0216 	orr.w	r2, r2, #22
 8003622:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0208 	orr.w	r2, r2, #8
 800363a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e005      	b.n	800365a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003670:	4b8e      	ldr	r3, [pc, #568]	; (80038ac <HAL_DMA_IRQHandler+0x248>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8e      	ldr	r2, [pc, #568]	; (80038b0 <HAL_DMA_IRQHandler+0x24c>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0a9b      	lsrs	r3, r3, #10
 800367c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2208      	movs	r2, #8
 8003690:	409a      	lsls	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01a      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0204 	bic.w	r2, r2, #4
 80036b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2208      	movs	r2, #8
 80036be:	409a      	lsls	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2201      	movs	r2, #1
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	2201      	movs	r2, #1
 80036f4:	409a      	lsls	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f043 0202 	orr.w	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	2204      	movs	r2, #4
 800370c:	409a      	lsls	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	2204      	movs	r2, #4
 800372a:	409a      	lsls	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	2210      	movs	r2, #16
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d043      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03c      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	2210      	movs	r2, #16
 8003760:	409a      	lsls	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d024      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e01f      	b.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e016      	b.n	80037d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0208 	bic.w	r2, r2, #8
 80037c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2220      	movs	r2, #32
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 808f 	beq.w	8003904 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8087 	beq.w	8003904 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	2220      	movs	r2, #32
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b05      	cmp	r3, #5
 800380c:	d136      	bne.n	800387c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0216 	bic.w	r2, r2, #22
 800381c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800382c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_DMA_IRQHandler+0x1da>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0208 	bic.w	r2, r2, #8
 800384c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	223f      	movs	r2, #63	; 0x3f
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	2b00      	cmp	r3, #0
 8003870:	d07e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
        }
        return;
 800387a:	e079      	b.n	8003970 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	2b00      	cmp	r3, #0
 800389e:	d031      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e02c      	b.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
 80038aa:	bf00      	nop
 80038ac:	20000004 	.word	0x20000004
 80038b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d023      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e01e      	b.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10f      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0210 	bic.w	r2, r2, #16
 80038e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	2b00      	cmp	r3, #0
 800390a:	d032      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2205      	movs	r2, #5
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3301      	adds	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	429a      	cmp	r2, r3
 800393a:	d307      	bcc.n	800394c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f2      	bne.n	8003930 <HAL_DMA_IRQHandler+0x2cc>
 800394a:	e000      	b.n	800394e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800394c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
 800396e:	e000      	b.n	8003972 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003970:	bf00      	nop
    }
  }
}
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d108      	bne.n	80039b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039b6:	e007      	b.n	80039c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	3b10      	subs	r3, #16
 80039e4:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <DMA_CalcBaseAndBitshift+0x64>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <DMA_CalcBaseAndBitshift+0x68>)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d909      	bls.n	8003a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	659a      	str	r2, [r3, #88]	; 0x58
 8003a14:	e007      	b.n	8003a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	aaaaaaab 	.word	0xaaaaaaab
 8003a3c:	08009eb8 	.word	0x08009eb8

08003a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11f      	bne.n	8003a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d856      	bhi.n	8003b0e <DMA_CheckFifoParam+0xce>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <DMA_CheckFifoParam+0x28>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a8b 	.word	0x08003a8b
 8003a70:	08003a79 	.word	0x08003a79
 8003a74:	08003b0f 	.word	0x08003b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d046      	beq.n	8003b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a88:	e043      	b.n	8003b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a92:	d140      	bne.n	8003b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e03d      	b.n	8003b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa2:	d121      	bne.n	8003ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d837      	bhi.n	8003b1a <DMA_CheckFifoParam+0xda>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <DMA_CheckFifoParam+0x70>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ac7 	.word	0x08003ac7
 8003ab8:	08003ac1 	.word	0x08003ac1
 8003abc:	08003ad9 	.word	0x08003ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac4:	e030      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d025      	beq.n	8003b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad6:	e022      	b.n	8003b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae0:	d11f      	bne.n	8003b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ae6:	e01c      	b.n	8003b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d903      	bls.n	8003af6 <DMA_CheckFifoParam+0xb6>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d003      	beq.n	8003afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003af4:	e018      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      break;
 8003afa:	e015      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e00b      	b.n	8003b26 <DMA_CheckFifoParam+0xe6>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e00a      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e008      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e006      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e004      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
    }
  } 
  
  return status; 
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop

08003b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e165      	b.n	8003e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b54:	2201      	movs	r2, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	f040 8154 	bne.w	8003e1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d005      	beq.n	8003b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d130      	bne.n	8003bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0201 	and.w	r2, r3, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d017      	beq.n	8003c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d123      	bne.n	8003c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	220f      	movs	r2, #15
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0203 	and.w	r2, r3, #3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80ae 	beq.w	8003e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_GPIO_Init+0x300>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	4a5c      	ldr	r2, [pc, #368]	; (8003e38 <HAL_GPIO_Init+0x300>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b5a      	ldr	r3, [pc, #360]	; (8003e38 <HAL_GPIO_Init+0x300>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cda:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4f      	ldr	r2, [pc, #316]	; (8003e40 <HAL_GPIO_Init+0x308>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d025      	beq.n	8003d52 <HAL_GPIO_Init+0x21a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <HAL_GPIO_Init+0x30c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01f      	beq.n	8003d4e <HAL_GPIO_Init+0x216>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4d      	ldr	r2, [pc, #308]	; (8003e48 <HAL_GPIO_Init+0x310>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d019      	beq.n	8003d4a <HAL_GPIO_Init+0x212>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4c      	ldr	r2, [pc, #304]	; (8003e4c <HAL_GPIO_Init+0x314>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_Init+0x20e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4b      	ldr	r2, [pc, #300]	; (8003e50 <HAL_GPIO_Init+0x318>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00d      	beq.n	8003d42 <HAL_GPIO_Init+0x20a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <HAL_GPIO_Init+0x31c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <HAL_GPIO_Init+0x206>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a49      	ldr	r2, [pc, #292]	; (8003e58 <HAL_GPIO_Init+0x320>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_GPIO_Init+0x202>
 8003d36:	2306      	movs	r3, #6
 8003d38:	e00c      	b.n	8003d54 <HAL_GPIO_Init+0x21c>
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	e00a      	b.n	8003d54 <HAL_GPIO_Init+0x21c>
 8003d3e:	2305      	movs	r3, #5
 8003d40:	e008      	b.n	8003d54 <HAL_GPIO_Init+0x21c>
 8003d42:	2304      	movs	r3, #4
 8003d44:	e006      	b.n	8003d54 <HAL_GPIO_Init+0x21c>
 8003d46:	2303      	movs	r3, #3
 8003d48:	e004      	b.n	8003d54 <HAL_GPIO_Init+0x21c>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e002      	b.n	8003d54 <HAL_GPIO_Init+0x21c>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_GPIO_Init+0x21c>
 8003d52:	2300      	movs	r3, #0
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	f002 0203 	and.w	r2, r2, #3
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	4093      	lsls	r3, r2
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d64:	4935      	ldr	r1, [pc, #212]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d72:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d96:	4a31      	ldr	r2, [pc, #196]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d9c:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dc6:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	f67f ae96 	bls.w	8003b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	3724      	adds	r7, #36	; 0x24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40013800 	.word	0x40013800
 8003e40:	40020000 	.word	0x40020000
 8003e44:	40020400 	.word	0x40020400
 8003e48:	40020800 	.word	0x40020800
 8003e4c:	40020c00 	.word	0x40020c00
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40021400 	.word	0x40021400
 8003e58:	40021800 	.word	0x40021800
 8003e5c:	40013c00 	.word	0x40013c00

08003e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	e001      	b.n	8003e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea0:	787b      	ldrb	r3, [r7, #1]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ea6:	887a      	ldrh	r2, [r7, #2]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eac:	e003      	b.n	8003eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eae:	887b      	ldrh	r3, [r7, #2]
 8003eb0:	041a      	lsls	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	619a      	str	r2, [r3, #24]
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ed4:	887a      	ldrh	r2, [r7, #2]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	041a      	lsls	r2, r3, #16
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43d9      	mvns	r1, r3
 8003ee0:	887b      	ldrh	r3, [r7, #2]
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	619a      	str	r2, [r3, #24]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f1e:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_PWREx_EnableOverDrive+0x94>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f24:	f7fe fd6c 	bl	8002a00 <HAL_GetTick>
 8003f28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f2a:	e009      	b.n	8003f40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f2c:	f7fe fd68 	bl	8002a00 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3a:	d901      	bls.n	8003f40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e01f      	b.n	8003f80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d1ee      	bne.n	8003f2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f54:	f7fe fd54 	bl	8002a00 <HAL_GetTick>
 8003f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f5a:	e009      	b.n	8003f70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f5c:	f7fe fd50 	bl	8002a00 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f6a:	d901      	bls.n	8003f70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e007      	b.n	8003f80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f7c:	d1ee      	bne.n	8003f5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	420e0040 	.word	0x420e0040
 8003f90:	40007000 	.word	0x40007000
 8003f94:	420e0044 	.word	0x420e0044

08003f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0cc      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b68      	ldr	r3, [pc, #416]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d90c      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b65      	ldr	r3, [pc, #404]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0b8      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fec:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4a58      	ldr	r2, [pc, #352]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004004:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a52      	ldr	r2, [pc, #328]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	494d      	ldr	r1, [pc, #308]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d044      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d119      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e07f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d003      	beq.n	8004056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	2b03      	cmp	r3, #3
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004056:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e06f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004066:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e067      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004076:	4b37      	ldr	r3, [pc, #220]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4934      	ldr	r1, [pc, #208]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004088:	f7fe fcba 	bl	8002a00 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004090:	f7fe fcb6 	bl	8002a00 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e04f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 020c 	and.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1eb      	bne.n	8004090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d20c      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e032      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4916      	ldr	r1, [pc, #88]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	490e      	ldr	r1, [pc, #56]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800411e:	f000 f855 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	490a      	ldr	r1, [pc, #40]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	fa22 f303 	lsr.w	r3, r2, r3
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe fc1a 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023c00 	.word	0x40023c00
 8004154:	40023800 	.word	0x40023800
 8004158:	08009ea0 	.word	0x08009ea0
 800415c:	20000004 	.word	0x20000004
 8004160:	20000008 	.word	0x20000008

08004164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <HAL_RCC_GetHCLKFreq+0x14>)
 800416a:	681b      	ldr	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000004 	.word	0x20000004

0800417c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004180:	f7ff fff0 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0a9b      	lsrs	r3, r3, #10
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	; (80041a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	08009eb0 	.word	0x08009eb0

080041a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a8:	f7ff ffdc 	bl	8004164 <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	0b5b      	lsrs	r3, r3, #13
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4903      	ldr	r1, [pc, #12]	; (80041c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	08009eb0 	.word	0x08009eb0

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b0ae      	sub	sp, #184	; 0xb8
 80041d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f2:	4bcb      	ldr	r3, [pc, #812]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	f200 8206 	bhi.w	800460c <HAL_RCC_GetSysClockFreq+0x440>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	0800423d 	.word	0x0800423d
 800420c:	0800460d 	.word	0x0800460d
 8004210:	0800460d 	.word	0x0800460d
 8004214:	0800460d 	.word	0x0800460d
 8004218:	08004245 	.word	0x08004245
 800421c:	0800460d 	.word	0x0800460d
 8004220:	0800460d 	.word	0x0800460d
 8004224:	0800460d 	.word	0x0800460d
 8004228:	0800424d 	.word	0x0800424d
 800422c:	0800460d 	.word	0x0800460d
 8004230:	0800460d 	.word	0x0800460d
 8004234:	0800460d 	.word	0x0800460d
 8004238:	0800443d 	.word	0x0800443d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4bb9      	ldr	r3, [pc, #740]	; (8004524 <HAL_RCC_GetSysClockFreq+0x358>)
 800423e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004242:	e1e7      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004244:	4bb8      	ldr	r3, [pc, #736]	; (8004528 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800424a:	e1e3      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800424c:	4bb4      	ldr	r3, [pc, #720]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004258:	4bb1      	ldr	r3, [pc, #708]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d071      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4bae      	ldr	r3, [pc, #696]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004270:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800428a:	4622      	mov	r2, r4
 800428c:	462b      	mov	r3, r5
 800428e:	f04f 0000 	mov.w	r0, #0
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	0159      	lsls	r1, r3, #5
 8004298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429c:	0150      	lsls	r0, r2, #5
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4621      	mov	r1, r4
 80042a4:	1a51      	subs	r1, r2, r1
 80042a6:	6439      	str	r1, [r7, #64]	; 0x40
 80042a8:	4629      	mov	r1, r5
 80042aa:	eb63 0301 	sbc.w	r3, r3, r1
 80042ae:	647b      	str	r3, [r7, #68]	; 0x44
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80042bc:	4649      	mov	r1, r9
 80042be:	018b      	lsls	r3, r1, #6
 80042c0:	4641      	mov	r1, r8
 80042c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042c6:	4641      	mov	r1, r8
 80042c8:	018a      	lsls	r2, r1, #6
 80042ca:	4641      	mov	r1, r8
 80042cc:	1a51      	subs	r1, r2, r1
 80042ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80042d0:	4649      	mov	r1, r9
 80042d2:	eb63 0301 	sbc.w	r3, r3, r1
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80042e4:	4649      	mov	r1, r9
 80042e6:	00cb      	lsls	r3, r1, #3
 80042e8:	4641      	mov	r1, r8
 80042ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ee:	4641      	mov	r1, r8
 80042f0:	00ca      	lsls	r2, r1, #3
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	4622      	mov	r2, r4
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
 80042fe:	462b      	mov	r3, r5
 8004300:	460a      	mov	r2, r1
 8004302:	eb42 0303 	adc.w	r3, r2, r3
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004314:	4629      	mov	r1, r5
 8004316:	024b      	lsls	r3, r1, #9
 8004318:	4621      	mov	r1, r4
 800431a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800431e:	4621      	mov	r1, r4
 8004320:	024a      	lsls	r2, r1, #9
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004334:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004338:	f7fc fca6 	bl	8000c88 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4613      	mov	r3, r2
 8004342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004346:	e067      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004348:	4b75      	ldr	r3, [pc, #468]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004354:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800435c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004360:	67bb      	str	r3, [r7, #120]	; 0x78
 8004362:	2300      	movs	r3, #0
 8004364:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004366:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	f04f 0000 	mov.w	r0, #0
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	0159      	lsls	r1, r3, #5
 8004378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800437c:	0150      	lsls	r0, r2, #5
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4621      	mov	r1, r4
 8004384:	1a51      	subs	r1, r2, r1
 8004386:	62b9      	str	r1, [r7, #40]	; 0x28
 8004388:	4629      	mov	r1, r5
 800438a:	eb63 0301 	sbc.w	r3, r3, r1
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800439c:	4649      	mov	r1, r9
 800439e:	018b      	lsls	r3, r1, #6
 80043a0:	4641      	mov	r1, r8
 80043a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043a6:	4641      	mov	r1, r8
 80043a8:	018a      	lsls	r2, r1, #6
 80043aa:	4641      	mov	r1, r8
 80043ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80043b0:	4649      	mov	r1, r9
 80043b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ca:	4692      	mov	sl, r2
 80043cc:	469b      	mov	fp, r3
 80043ce:	4623      	mov	r3, r4
 80043d0:	eb1a 0303 	adds.w	r3, sl, r3
 80043d4:	623b      	str	r3, [r7, #32]
 80043d6:	462b      	mov	r3, r5
 80043d8:	eb4b 0303 	adc.w	r3, fp, r3
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80043ea:	4629      	mov	r1, r5
 80043ec:	028b      	lsls	r3, r1, #10
 80043ee:	4621      	mov	r1, r4
 80043f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043f4:	4621      	mov	r1, r4
 80043f6:	028a      	lsls	r2, r1, #10
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004400:	2200      	movs	r2, #0
 8004402:	673b      	str	r3, [r7, #112]	; 0x70
 8004404:	677a      	str	r2, [r7, #116]	; 0x74
 8004406:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800440a:	f7fc fc3d 	bl	8000c88 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4613      	mov	r3, r2
 8004414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004418:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	3301      	adds	r3, #1
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800442a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800442e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800443a:	e0eb      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800443c:	4b38      	ldr	r3, [pc, #224]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004448:	4b35      	ldr	r3, [pc, #212]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d06b      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004454:	4b32      	ldr	r3, [pc, #200]	; (8004520 <HAL_RCC_GetSysClockFreq+0x354>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	2200      	movs	r2, #0
 800445c:	66bb      	str	r3, [r7, #104]	; 0x68
 800445e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	663b      	str	r3, [r7, #96]	; 0x60
 8004468:	2300      	movs	r3, #0
 800446a:	667b      	str	r3, [r7, #100]	; 0x64
 800446c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004470:	4622      	mov	r2, r4
 8004472:	462b      	mov	r3, r5
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	0159      	lsls	r1, r3, #5
 800447e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004482:	0150      	lsls	r0, r2, #5
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4621      	mov	r1, r4
 800448a:	1a51      	subs	r1, r2, r1
 800448c:	61b9      	str	r1, [r7, #24]
 800448e:	4629      	mov	r1, r5
 8004490:	eb63 0301 	sbc.w	r3, r3, r1
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80044a2:	4659      	mov	r1, fp
 80044a4:	018b      	lsls	r3, r1, #6
 80044a6:	4651      	mov	r1, sl
 80044a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ac:	4651      	mov	r1, sl
 80044ae:	018a      	lsls	r2, r1, #6
 80044b0:	4651      	mov	r1, sl
 80044b2:	ebb2 0801 	subs.w	r8, r2, r1
 80044b6:	4659      	mov	r1, fp
 80044b8:	eb63 0901 	sbc.w	r9, r3, r1
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044d0:	4690      	mov	r8, r2
 80044d2:	4699      	mov	r9, r3
 80044d4:	4623      	mov	r3, r4
 80044d6:	eb18 0303 	adds.w	r3, r8, r3
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	462b      	mov	r3, r5
 80044de:	eb49 0303 	adc.w	r3, r9, r3
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80044f0:	4629      	mov	r1, r5
 80044f2:	024b      	lsls	r3, r1, #9
 80044f4:	4621      	mov	r1, r4
 80044f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044fa:	4621      	mov	r1, r4
 80044fc:	024a      	lsls	r2, r1, #9
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004506:	2200      	movs	r2, #0
 8004508:	65bb      	str	r3, [r7, #88]	; 0x58
 800450a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800450c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004510:	f7fc fbba 	bl	8000c88 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800451e:	e065      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x420>
 8004520:	40023800 	.word	0x40023800
 8004524:	00f42400 	.word	0x00f42400
 8004528:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452c:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <HAL_RCC_GetSysClockFreq+0x458>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	2200      	movs	r2, #0
 8004534:	4618      	mov	r0, r3
 8004536:	4611      	mov	r1, r2
 8004538:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800453c:	653b      	str	r3, [r7, #80]	; 0x50
 800453e:	2300      	movs	r3, #0
 8004540:	657b      	str	r3, [r7, #84]	; 0x54
 8004542:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004546:	4642      	mov	r2, r8
 8004548:	464b      	mov	r3, r9
 800454a:	f04f 0000 	mov.w	r0, #0
 800454e:	f04f 0100 	mov.w	r1, #0
 8004552:	0159      	lsls	r1, r3, #5
 8004554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004558:	0150      	lsls	r0, r2, #5
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4641      	mov	r1, r8
 8004560:	1a51      	subs	r1, r2, r1
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	4649      	mov	r1, r9
 8004566:	eb63 0301 	sbc.w	r3, r3, r1
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004578:	4659      	mov	r1, fp
 800457a:	018b      	lsls	r3, r1, #6
 800457c:	4651      	mov	r1, sl
 800457e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004582:	4651      	mov	r1, sl
 8004584:	018a      	lsls	r2, r1, #6
 8004586:	4651      	mov	r1, sl
 8004588:	1a54      	subs	r4, r2, r1
 800458a:	4659      	mov	r1, fp
 800458c:	eb63 0501 	sbc.w	r5, r3, r1
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	00eb      	lsls	r3, r5, #3
 800459a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	4614      	mov	r4, r2
 80045a2:	461d      	mov	r5, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	18e3      	adds	r3, r4, r3
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	464b      	mov	r3, r9
 80045ac:	eb45 0303 	adc.w	r3, r5, r3
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045be:	4629      	mov	r1, r5
 80045c0:	028b      	lsls	r3, r1, #10
 80045c2:	4621      	mov	r1, r4
 80045c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c8:	4621      	mov	r1, r4
 80045ca:	028a      	lsls	r2, r1, #10
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045d4:	2200      	movs	r2, #0
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80045da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045de:	f7fc fb53 	bl	8000c88 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4613      	mov	r3, r2
 80045e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <HAL_RCC_GetSysClockFreq+0x458>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0f1b      	lsrs	r3, r3, #28
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80045fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800460a:	e003      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_RCC_GetSysClockFreq+0x45c>)
 800460e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004612:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004618:	4618      	mov	r0, r3
 800461a:	37b8      	adds	r7, #184	; 0xb8
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	00f42400 	.word	0x00f42400

0800462c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e28d      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8083 	beq.w	8004752 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800464c:	4b94      	ldr	r3, [pc, #592]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b04      	cmp	r3, #4
 8004656:	d019      	beq.n	800468c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004658:	4b91      	ldr	r3, [pc, #580]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004660:	2b08      	cmp	r3, #8
 8004662:	d106      	bne.n	8004672 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004664:	4b8e      	ldr	r3, [pc, #568]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004670:	d00c      	beq.n	800468c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004672:	4b8b      	ldr	r3, [pc, #556]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d112      	bne.n	80046a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467e:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468a:	d10b      	bne.n	80046a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	4b84      	ldr	r3, [pc, #528]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05b      	beq.n	8004750 <HAL_RCC_OscConfig+0x124>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d157      	bne.n	8004750 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e25a      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x90>
 80046ae:	4b7c      	ldr	r3, [pc, #496]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a7b      	ldr	r2, [pc, #492]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e01d      	b.n	80046f8 <HAL_RCC_OscConfig+0xcc>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0xb4>
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b73      	ldr	r3, [pc, #460]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a72      	ldr	r2, [pc, #456]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0xcc>
 80046e0:	4b6f      	ldr	r3, [pc, #444]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6e      	ldr	r2, [pc, #440]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b6c      	ldr	r3, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6b      	ldr	r2, [pc, #428]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fe f97e 	bl	8002a00 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004708:	f7fe f97a 	bl	8002a00 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e21f      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471a:	4b61      	ldr	r3, [pc, #388]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0xdc>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fe f96a 	bl	8002a00 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7fe f966 	bl	8002a00 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e20b      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004742:	4b57      	ldr	r3, [pc, #348]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x104>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d06f      	beq.n	800483e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800475e:	4b50      	ldr	r3, [pc, #320]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b00      	cmp	r3, #0
 8004768:	d017      	beq.n	800479a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800476a:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004772:	2b08      	cmp	r3, #8
 8004774:	d105      	bne.n	8004782 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004776:	4b4a      	ldr	r3, [pc, #296]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004782:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d11c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d116      	bne.n	80047c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_RCC_OscConfig+0x186>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e1d3      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b2:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4937      	ldr	r1, [pc, #220]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	e03a      	b.n	800483e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <HAL_RCC_OscConfig+0x278>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fe f913 	bl	8002a00 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047de:	f7fe f90f 	bl	8002a00 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1b4      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4925      	ldr	r1, [pc, #148]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fe f8f2 	bl	8002a00 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004820:	f7fe f8ee 	bl	8002a00 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e193      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d036      	beq.n	80048b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fe f8d2 	bl	8002a00 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004860:	f7fe f8ce 	bl	8002a00 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e173      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_OscConfig+0x274>)
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x234>
 800487e:	e01b      	b.n	80048b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004886:	f7fe f8bb 	bl	8002a00 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	e00e      	b.n	80048ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488e:	f7fe f8b7 	bl	8002a00 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d907      	bls.n	80048ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e15c      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
 80048a0:	40023800 	.word	0x40023800
 80048a4:	42470000 	.word	0x42470000
 80048a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	4b8a      	ldr	r3, [pc, #552]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ea      	bne.n	800488e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8097 	beq.w	80049f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ca:	4b83      	ldr	r3, [pc, #524]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	4b7f      	ldr	r3, [pc, #508]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4a7e      	ldr	r2, [pc, #504]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6413      	str	r3, [r2, #64]	; 0x40
 80048e6:	4b7c      	ldr	r3, [pc, #496]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f6:	4b79      	ldr	r3, [pc, #484]	; (8004adc <HAL_RCC_OscConfig+0x4b0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d118      	bne.n	8004934 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004902:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x4b0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a75      	ldr	r2, [pc, #468]	; (8004adc <HAL_RCC_OscConfig+0x4b0>)
 8004908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490e:	f7fe f877 	bl	8002a00 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004916:	f7fe f873 	bl	8002a00 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e118      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004928:	4b6c      	ldr	r3, [pc, #432]	; (8004adc <HAL_RCC_OscConfig+0x4b0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x31e>
 800493c:	4b66      	ldr	r3, [pc, #408]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a65      	ldr	r2, [pc, #404]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	e01c      	b.n	8004984 <HAL_RCC_OscConfig+0x358>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b05      	cmp	r3, #5
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0x340>
 8004952:	4b61      	ldr	r3, [pc, #388]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a60      	ldr	r2, [pc, #384]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
 800495e:	4b5e      	ldr	r3, [pc, #376]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a5d      	ldr	r2, [pc, #372]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	e00b      	b.n	8004984 <HAL_RCC_OscConfig+0x358>
 800496c:	4b5a      	ldr	r3, [pc, #360]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	4a59      	ldr	r2, [pc, #356]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
 8004978:	4b57      	ldr	r3, [pc, #348]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a56      	ldr	r2, [pc, #344]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 800497e:	f023 0304 	bic.w	r3, r3, #4
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d015      	beq.n	80049b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fe f838 	bl	8002a00 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fe f834 	bl	8002a00 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0d7      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ee      	beq.n	8004994 <HAL_RCC_OscConfig+0x368>
 80049b6:	e014      	b.n	80049e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fe f822 	bl	8002a00 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fe f81e 	bl	8002a00 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0c1      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d6:	4b40      	ldr	r3, [pc, #256]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ee      	bne.n	80049c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d105      	bne.n	80049f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e8:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	4a3a      	ldr	r2, [pc, #232]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 80049ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80ad 	beq.w	8004b58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049fe:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d060      	beq.n	8004acc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d145      	bne.n	8004a9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a12:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <HAL_RCC_OscConfig+0x4b4>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd fff2 	bl	8002a00 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fd ffee 	bl	8002a00 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e093      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	019b      	lsls	r3, r3, #6
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	3b01      	subs	r3, #1
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	071b      	lsls	r3, r3, #28
 8004a6a:	491b      	ldr	r1, [pc, #108]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x4b4>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fd ffc3 	bl	8002a00 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fd ffbf 	bl	8002a00 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e064      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x452>
 8004a9c:	e05c      	b.n	8004b58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <HAL_RCC_OscConfig+0x4b4>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd ffac 	bl	8002a00 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd ffa8 	bl	8002a00 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e04d      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_RCC_OscConfig+0x4ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x480>
 8004aca:	e045      	b.n	8004b58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e040      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40007000 	.word	0x40007000
 8004ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <HAL_RCC_OscConfig+0x538>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d030      	beq.n	8004b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d129      	bne.n	8004b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d122      	bne.n	8004b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d119      	bne.n	8004b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d10f      	bne.n	8004b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800

08004b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e041      	b.n	8004bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fd faf4 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f001 f8a2 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d001      	beq.n	8004c20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e046      	b.n	8004cae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <HAL_TIM_Base_Start+0xb4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d01d      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_TIM_Base_Start+0xb8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <HAL_TIM_Base_Start+0xbc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_TIM_Base_Start+0xc0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_TIM_Base_Start+0xc4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_TIM_Base_Start+0xc8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_Base_Start+0x70>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_TIM_Base_Start+0xcc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d111      	bne.n	8004c9c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d010      	beq.n	8004cac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	e007      	b.n	8004cac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40001800 	.word	0x40001800

08004cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e041      	b.n	8004d6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fd fa1a 	bl	8002138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f000 ffea 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_TIM_PWM_Start+0x24>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e022      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d109      	bne.n	8004db6 <HAL_TIM_PWM_Start+0x3e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	e015      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0x58>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e008      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07c      	b.n	8004ee4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	e013      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x92>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	e003      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fb74 	bl	8006518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <HAL_TIM_PWM_Start+0x174>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_TIM_PWM_Start+0xcc>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <HAL_TIM_PWM_Start+0x178>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_PWM_Start+0xd0>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_TIM_PWM_Start+0xd2>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <HAL_TIM_PWM_Start+0x174>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d01d      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <HAL_TIM_PWM_Start+0x17c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <HAL_TIM_PWM_Start+0x180>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <HAL_TIM_PWM_Start+0x184>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <HAL_TIM_PWM_Start+0x178>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_TIM_PWM_Start+0x188>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <HAL_TIM_PWM_Start+0x18c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d111      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d010      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	e007      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0201 	orr.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40010400 	.word	0x40010400
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40001800 	.word	0x40001800

08004f08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e041      	b.n	8004f9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f839 	bl	8004fa6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 fed2 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_IC_Start_DMA+0x22>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	e013      	b.n	8005006 <HAL_TIM_IC_Start_DMA+0x4a>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d104      	bne.n	8004fee <HAL_TIM_IC_Start_DMA+0x32>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	e00b      	b.n	8005006 <HAL_TIM_IC_Start_DMA+0x4a>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d104      	bne.n	8004ffe <HAL_TIM_IC_Start_DMA+0x42>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e003      	b.n	8005006 <HAL_TIM_IC_Start_DMA+0x4a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005004:	b2db      	uxtb	r3, r3
 8005006:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <HAL_TIM_IC_Start_DMA+0x5c>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005014:	b2db      	uxtb	r3, r3
 8005016:	e013      	b.n	8005040 <HAL_TIM_IC_Start_DMA+0x84>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d104      	bne.n	8005028 <HAL_TIM_IC_Start_DMA+0x6c>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e00b      	b.n	8005040 <HAL_TIM_IC_Start_DMA+0x84>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d104      	bne.n	8005038 <HAL_TIM_IC_Start_DMA+0x7c>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e003      	b.n	8005040 <HAL_TIM_IC_Start_DMA+0x84>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800503e:	b2db      	uxtb	r3, r3
 8005040:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005042:	7dbb      	ldrb	r3, [r7, #22]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d002      	beq.n	800504e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005048:	7d7b      	ldrb	r3, [r7, #21]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d101      	bne.n	8005052 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	e146      	b.n	80052e0 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005052:	7dbb      	ldrb	r3, [r7, #22]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d143      	bne.n	80050e0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005058:	7d7b      	ldrb	r3, [r7, #21]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d140      	bne.n	80050e0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_TIM_IC_Start_DMA+0xb2>
 8005064:	887b      	ldrh	r3, [r7, #2]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e138      	b.n	80052e0 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <HAL_TIM_IC_Start_DMA+0xc2>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800507c:	e013      	b.n	80050a6 <HAL_TIM_IC_Start_DMA+0xea>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d104      	bne.n	800508e <HAL_TIM_IC_Start_DMA+0xd2>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508c:	e00b      	b.n	80050a6 <HAL_TIM_IC_Start_DMA+0xea>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d104      	bne.n	800509e <HAL_TIM_IC_Start_DMA+0xe2>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509c:	e003      	b.n	80050a6 <HAL_TIM_IC_Start_DMA+0xea>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_IC_Start_DMA+0xfa>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80050b4:	e016      	b.n	80050e4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_IC_Start_DMA+0x10a>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80050c4:	e00e      	b.n	80050e4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_IC_Start_DMA+0x11a>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80050d4:	e006      	b.n	80050e4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80050de:	e001      	b.n	80050e4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0fd      	b.n	80052e0 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fa13 	bl	8006518 <TIM_CCxChannelCmd>

  switch (Channel)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	f200 80ad 	bhi.w	8005254 <HAL_TIM_IC_Start_DMA+0x298>
 80050fa:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <HAL_TIM_IC_Start_DMA+0x144>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005135 	.word	0x08005135
 8005104:	08005255 	.word	0x08005255
 8005108:	08005255 	.word	0x08005255
 800510c:	08005255 	.word	0x08005255
 8005110:	0800517d 	.word	0x0800517d
 8005114:	08005255 	.word	0x08005255
 8005118:	08005255 	.word	0x08005255
 800511c:	08005255 	.word	0x08005255
 8005120:	080051c5 	.word	0x080051c5
 8005124:	08005255 	.word	0x08005255
 8005128:	08005255 	.word	0x08005255
 800512c:	08005255 	.word	0x08005255
 8005130:	0800520d 	.word	0x0800520d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	4a6b      	ldr	r2, [pc, #428]	; (80052e8 <HAL_TIM_IC_Start_DMA+0x32c>)
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	4a6a      	ldr	r2, [pc, #424]	; (80052ec <HAL_TIM_IC_Start_DMA+0x330>)
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	4a69      	ldr	r2, [pc, #420]	; (80052f0 <HAL_TIM_IC_Start_DMA+0x334>)
 800514a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3334      	adds	r3, #52	; 0x34
 8005156:	4619      	mov	r1, r3
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	887b      	ldrh	r3, [r7, #2]
 800515c:	f7fe fa2a 	bl	80035b4 <HAL_DMA_Start_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e0ba      	b.n	80052e0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005178:	60da      	str	r2, [r3, #12]
      break;
 800517a:	e06e      	b.n	800525a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	4a59      	ldr	r2, [pc, #356]	; (80052e8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005182:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	4a58      	ldr	r2, [pc, #352]	; (80052ec <HAL_TIM_IC_Start_DMA+0x330>)
 800518a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	4a57      	ldr	r2, [pc, #348]	; (80052f0 <HAL_TIM_IC_Start_DMA+0x334>)
 8005192:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3338      	adds	r3, #56	; 0x38
 800519e:	4619      	mov	r1, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	887b      	ldrh	r3, [r7, #2]
 80051a4:	f7fe fa06 	bl	80035b4 <HAL_DMA_Start_IT>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e096      	b.n	80052e0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c0:	60da      	str	r2, [r3, #12]
      break;
 80051c2:	e04a      	b.n	800525a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a47      	ldr	r2, [pc, #284]	; (80052e8 <HAL_TIM_IC_Start_DMA+0x32c>)
 80051ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	4a46      	ldr	r2, [pc, #280]	; (80052ec <HAL_TIM_IC_Start_DMA+0x330>)
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4a45      	ldr	r2, [pc, #276]	; (80052f0 <HAL_TIM_IC_Start_DMA+0x334>)
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	333c      	adds	r3, #60	; 0x3c
 80051e6:	4619      	mov	r1, r3
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	f7fe f9e2 	bl	80035b4 <HAL_DMA_Start_IT>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e072      	b.n	80052e0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005208:	60da      	str	r2, [r3, #12]
      break;
 800520a:	e026      	b.n	800525a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	4a35      	ldr	r2, [pc, #212]	; (80052e8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	4a34      	ldr	r2, [pc, #208]	; (80052ec <HAL_TIM_IC_Start_DMA+0x330>)
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <HAL_TIM_IC_Start_DMA+0x334>)
 8005222:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3340      	adds	r3, #64	; 0x40
 800522e:	4619      	mov	r1, r3
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	887b      	ldrh	r3, [r7, #2]
 8005234:	f7fe f9be 	bl	80035b4 <HAL_DMA_Start_IT>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e04e      	b.n	80052e0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005250:	60da      	str	r2, [r3, #12]
      break;
 8005252:	e002      	b.n	800525a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
      break;
 8005258:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <HAL_TIM_IC_Start_DMA+0x338>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <HAL_TIM_IC_Start_DMA+0x2ee>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d01d      	beq.n	80052aa <HAL_TIM_IC_Start_DMA+0x2ee>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <HAL_TIM_IC_Start_DMA+0x33c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <HAL_TIM_IC_Start_DMA+0x2ee>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_TIM_IC_Start_DMA+0x340>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_TIM_IC_Start_DMA+0x2ee>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_TIM_IC_Start_DMA+0x344>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIM_IC_Start_DMA+0x2ee>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <HAL_TIM_IC_Start_DMA+0x348>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_TIM_IC_Start_DMA+0x2ee>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_TIM_IC_Start_DMA+0x34c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIM_IC_Start_DMA+0x2ee>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a19      	ldr	r2, [pc, #100]	; (800530c <HAL_TIM_IC_Start_DMA+0x350>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d111      	bne.n	80052ce <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b06      	cmp	r3, #6
 80052ba:	d010      	beq.n	80052de <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	e007      	b.n	80052de <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	08005bc1 	.word	0x08005bc1
 80052ec:	08005c89 	.word	0x08005c89
 80052f0:	08005b2f 	.word	0x08005b2f
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40010400 	.word	0x40010400
 8005308:	40014000 	.word	0x40014000
 800530c:	40001800 	.word	0x40001800

08005310 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e097      	b.n	8005454 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc ffe5 	bl	8002308 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 fcc3 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	4313      	orrs	r3, r2
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053b0:	f023 030c 	bic.w	r3, r3, #12
 80053b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	4313      	orrs	r3, r2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	011a      	lsls	r2, r3, #4
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	031b      	lsls	r3, r3, #12
 80053e0:	4313      	orrs	r3, r2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4313      	orrs	r3, r2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b02      	cmp	r3, #2
 8005470:	d122      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b02      	cmp	r3, #2
 800547e:	d11b      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0202 	mvn.w	r2, #2
 8005488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fc fccc 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fb0f 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb20 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d122      	bne.n	800550c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d11b      	bne.n	800550c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0204 	mvn.w	r2, #4
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc fca2 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fae5 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 faf6 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b08      	cmp	r3, #8
 8005518:	d122      	bne.n	8005560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b08      	cmp	r3, #8
 8005526:	d11b      	bne.n	8005560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0208 	mvn.w	r2, #8
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2204      	movs	r2, #4
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc fc78 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fabb 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 facc 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b10      	cmp	r3, #16
 800556c:	d122      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b10      	cmp	r3, #16
 800557a:	d11b      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0210 	mvn.w	r2, #16
 8005584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2208      	movs	r2, #8
 800558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fc4e 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa91 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 faa2 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0201 	mvn.w	r2, #1
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa6b 	bl	8005ab6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	d10e      	bne.n	800560c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	d107      	bne.n	800560c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 f884 	bl	8006714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fa67 	bl	8005b06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b20      	cmp	r3, #32
 8005644:	d10e      	bne.n	8005664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b20      	cmp	r3, #32
 8005652:	d107      	bne.n	8005664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0220 	mvn.w	r2, #32
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 f84e 	bl	8006700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005686:	2302      	movs	r3, #2
 8005688:	e088      	b.n	800579c <HAL_TIM_IC_ConfigChannel+0x130>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f000 fd72 	bl	8006190 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 020c 	bic.w	r2, r2, #12
 80056ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6999      	ldr	r1, [r3, #24]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	619a      	str	r2, [r3, #24]
 80056ce:	e060      	b.n	8005792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d11c      	bne.n	8005710 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	6819      	ldr	r1, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f000 fdf6 	bl	80062d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6999      	ldr	r1, [r3, #24]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	021a      	lsls	r2, r3, #8
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	619a      	str	r2, [r3, #24]
 800570e:	e040      	b.n	8005792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b08      	cmp	r3, #8
 8005714:	d11b      	bne.n	800574e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6819      	ldr	r1, [r3, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f000 fe43 	bl	80063b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 020c 	bic.w	r2, r2, #12
 8005738:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69d9      	ldr	r1, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	61da      	str	r2, [r3, #28]
 800574c:	e021      	b.n	8005792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	d11c      	bne.n	800578e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6819      	ldr	r1, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f000 fe60 	bl	8006428 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69da      	ldr	r2, [r3, #28]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005776:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69d9      	ldr	r1, [r3, #28]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	61da      	str	r2, [r3, #28]
 800578c:	e001      	b.n	8005792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057be:	2302      	movs	r3, #2
 80057c0:	e0ae      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	f200 809f 	bhi.w	8005910 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800580d 	.word	0x0800580d
 80057dc:	08005911 	.word	0x08005911
 80057e0:	08005911 	.word	0x08005911
 80057e4:	08005911 	.word	0x08005911
 80057e8:	0800584d 	.word	0x0800584d
 80057ec:	08005911 	.word	0x08005911
 80057f0:	08005911 	.word	0x08005911
 80057f4:	08005911 	.word	0x08005911
 80057f8:	0800588f 	.word	0x0800588f
 80057fc:	08005911 	.word	0x08005911
 8005800:	08005911 	.word	0x08005911
 8005804:	08005911 	.word	0x08005911
 8005808:	080058cf 	.word	0x080058cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fb0c 	bl	8005e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	619a      	str	r2, [r3, #24]
      break;
 800584a:	e064      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fb5c 	bl	8005f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	619a      	str	r2, [r3, #24]
      break;
 800588c:	e043      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fbb1 	bl	8005ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0208 	orr.w	r2, r2, #8
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0204 	bic.w	r2, r2, #4
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	61da      	str	r2, [r3, #28]
      break;
 80058cc:	e023      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fc05 	bl	80060e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	021a      	lsls	r2, r3, #8
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	61da      	str	r2, [r3, #28]
      break;
 800590e:	e002      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	75fb      	strb	r3, [r7, #23]
      break;
 8005914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIM_ConfigClockSource+0x1c>
 8005940:	2302      	movs	r3, #2
 8005942:	e0b4      	b.n	8005aae <HAL_TIM_ConfigClockSource+0x186>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597c:	d03e      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0xd4>
 800597e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005982:	f200 8087 	bhi.w	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	f000 8086 	beq.w	8005a9a <HAL_TIM_ConfigClockSource+0x172>
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	d87f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d01a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0xa6>
 8005998:	2b70      	cmp	r3, #112	; 0x70
 800599a:	d87b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b60      	cmp	r3, #96	; 0x60
 800599e:	d050      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x11a>
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d877      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b50      	cmp	r3, #80	; 0x50
 80059a6:	d03c      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0xfa>
 80059a8:	2b50      	cmp	r3, #80	; 0x50
 80059aa:	d873      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d058      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x13a>
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d86f      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d064      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15a>
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d86b      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d060      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d867      	bhi.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05c      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15a>
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d05a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0x15a>
 80059cc:	e062      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6899      	ldr	r1, [r3, #8]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f000 fd7b 	bl	80064d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]
      break;
 80059fa:	e04f      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6899      	ldr	r1, [r3, #8]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f000 fd64 	bl	80064d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a1e:	609a      	str	r2, [r3, #8]
      break;
 8005a20:	e03c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 fc22 	bl	8006278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2150      	movs	r1, #80	; 0x50
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fd31 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005a40:	e02c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f000 fc7e 	bl	8006350 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2160      	movs	r1, #96	; 0x60
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fd21 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005a60:	e01c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f000 fc02 	bl	8006278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fd11 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005a80:	e00c      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f000 fd08 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005a92:	e003      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
      break;
 8005a98:	e000      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d107      	bne.n	8005b56 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b54:	e02a      	b.n	8005bac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d107      	bne.n	8005b70 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2202      	movs	r2, #2
 8005b64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6e:	e01d      	b.n	8005bac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d107      	bne.n	8005b8a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b88:	e010      	b.n	8005bac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d107      	bne.n	8005ba4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2208      	movs	r2, #8
 8005b98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba2:	e003      	b.n	8005bac <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff ffb4 	bl	8005b1a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d10f      	bne.n	8005bf8 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d146      	bne.n	8005c74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf6:	e03d      	b.n	8005c74 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d10f      	bne.n	8005c22 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2202      	movs	r2, #2
 8005c06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d131      	bne.n	8005c74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c20:	e028      	b.n	8005c74 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d10f      	bne.n	8005c4c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d11c      	bne.n	8005c74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4a:	e013      	b.n	8005c74 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d10e      	bne.n	8005c74 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d107      	bne.n	8005c74 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7fc f8e1 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d103      	bne.n	8005ca8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	771a      	strb	r2, [r3, #28]
 8005ca6:	e019      	b.n	8005cdc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d103      	bne.n	8005cba <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	771a      	strb	r2, [r3, #28]
 8005cb8:	e010      	b.n	8005cdc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d103      	bne.n	8005ccc <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	771a      	strb	r2, [r3, #28]
 8005cca:	e007      	b.n	8005cdc <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d102      	bne.n	8005cdc <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff fefe 	bl	8005ade <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <TIM_Base_SetConfig+0x114>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d00f      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a3d      	ldr	r2, [pc, #244]	; (8005e08 <TIM_Base_SetConfig+0x118>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00b      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3c      	ldr	r2, [pc, #240]	; (8005e0c <TIM_Base_SetConfig+0x11c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d007      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3b      	ldr	r2, [pc, #236]	; (8005e10 <TIM_Base_SetConfig+0x120>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3a      	ldr	r2, [pc, #232]	; (8005e14 <TIM_Base_SetConfig+0x124>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d108      	bne.n	8005d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2f      	ldr	r2, [pc, #188]	; (8005e04 <TIM_Base_SetConfig+0x114>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d02b      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d50:	d027      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <TIM_Base_SetConfig+0x118>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d023      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	; (8005e0c <TIM_Base_SetConfig+0x11c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01f      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2a      	ldr	r2, [pc, #168]	; (8005e10 <TIM_Base_SetConfig+0x120>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01b      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a29      	ldr	r2, [pc, #164]	; (8005e14 <TIM_Base_SetConfig+0x124>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d017      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a28      	ldr	r2, [pc, #160]	; (8005e18 <TIM_Base_SetConfig+0x128>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <TIM_Base_SetConfig+0x12c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00f      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <TIM_Base_SetConfig+0x130>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a25      	ldr	r2, [pc, #148]	; (8005e24 <TIM_Base_SetConfig+0x134>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a24      	ldr	r2, [pc, #144]	; (8005e28 <TIM_Base_SetConfig+0x138>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <TIM_Base_SetConfig+0x13c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d108      	bne.n	8005db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <TIM_Base_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_Base_SetConfig+0xf8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a0c      	ldr	r2, [pc, #48]	; (8005e14 <TIM_Base_SetConfig+0x124>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d103      	bne.n	8005df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	615a      	str	r2, [r3, #20]
}
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40010400 	.word	0x40010400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800
 8005e24:	40001800 	.word	0x40001800
 8005e28:	40001c00 	.word	0x40001c00
 8005e2c:	40002000 	.word	0x40002000

08005e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f023 0201 	bic.w	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f023 0302 	bic.w	r3, r3, #2
 8005e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a20      	ldr	r2, [pc, #128]	; (8005f08 <TIM_OC1_SetConfig+0xd8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC1_SetConfig+0x64>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <TIM_OC1_SetConfig+0xdc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d10c      	bne.n	8005eae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0308 	bic.w	r3, r3, #8
 8005e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f023 0304 	bic.w	r3, r3, #4
 8005eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <TIM_OC1_SetConfig+0xd8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_OC1_SetConfig+0x8e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <TIM_OC1_SetConfig+0xdc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d111      	bne.n	8005ee2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	621a      	str	r2, [r3, #32]
}
 8005efc:	bf00      	nop
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40010400 	.word	0x40010400

08005f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f023 0210 	bic.w	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f023 0320 	bic.w	r3, r3, #32
 8005f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a22      	ldr	r2, [pc, #136]	; (8005ff4 <TIM_OC2_SetConfig+0xe4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC2_SetConfig+0x68>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a21      	ldr	r2, [pc, #132]	; (8005ff8 <TIM_OC2_SetConfig+0xe8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d10d      	bne.n	8005f94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a17      	ldr	r2, [pc, #92]	; (8005ff4 <TIM_OC2_SetConfig+0xe4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC2_SetConfig+0x94>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <TIM_OC2_SetConfig+0xe8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d113      	bne.n	8005fcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40010400 	.word	0x40010400

08005ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0303 	bic.w	r3, r3, #3
 8006032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a21      	ldr	r2, [pc, #132]	; (80060dc <TIM_OC3_SetConfig+0xe0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_OC3_SetConfig+0x66>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a20      	ldr	r2, [pc, #128]	; (80060e0 <TIM_OC3_SetConfig+0xe4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d10d      	bne.n	800607e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800607c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a16      	ldr	r2, [pc, #88]	; (80060dc <TIM_OC3_SetConfig+0xe0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_OC3_SetConfig+0x92>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <TIM_OC3_SetConfig+0xe4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d113      	bne.n	80060b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800609c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40010400 	.word	0x40010400

080060e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800612e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	031b      	lsls	r3, r3, #12
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a12      	ldr	r2, [pc, #72]	; (8006188 <TIM_OC4_SetConfig+0xa4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC4_SetConfig+0x68>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a11      	ldr	r2, [pc, #68]	; (800618c <TIM_OC4_SetConfig+0xa8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d109      	bne.n	8006160 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	019b      	lsls	r3, r3, #6
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40010400 	.word	0x40010400

08006190 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0201 	bic.w	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4a28      	ldr	r2, [pc, #160]	; (800625c <TIM_TI1_SetConfig+0xcc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01b      	beq.n	80061f6 <TIM_TI1_SetConfig+0x66>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c4:	d017      	beq.n	80061f6 <TIM_TI1_SetConfig+0x66>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4a25      	ldr	r2, [pc, #148]	; (8006260 <TIM_TI1_SetConfig+0xd0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <TIM_TI1_SetConfig+0x66>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a24      	ldr	r2, [pc, #144]	; (8006264 <TIM_TI1_SetConfig+0xd4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00f      	beq.n	80061f6 <TIM_TI1_SetConfig+0x66>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a23      	ldr	r2, [pc, #140]	; (8006268 <TIM_TI1_SetConfig+0xd8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <TIM_TI1_SetConfig+0x66>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a22      	ldr	r2, [pc, #136]	; (800626c <TIM_TI1_SetConfig+0xdc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d007      	beq.n	80061f6 <TIM_TI1_SetConfig+0x66>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <TIM_TI1_SetConfig+0xe0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_TI1_SetConfig+0x66>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <TIM_TI1_SetConfig+0xe4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d101      	bne.n	80061fa <TIM_TI1_SetConfig+0x6a>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <TIM_TI1_SetConfig+0x6c>
 80061fa:	2300      	movs	r3, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e003      	b.n	800621a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	b2db      	uxtb	r3, r3
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f023 030a 	bic.w	r3, r3, #10
 8006234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f003 030a 	and.w	r3, r3, #10
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40010400 	.word	0x40010400
 8006270:	40014000 	.word	0x40014000
 8006274:	40001800 	.word	0x40001800

08006278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f023 030a 	bic.w	r3, r3, #10
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b087      	sub	sp, #28
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f023 0210 	bic.w	r2, r3, #16
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006302:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	031b      	lsls	r3, r3, #12
 800631a:	b29b      	uxth	r3, r3
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006328:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	621a      	str	r2, [r3, #32]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f023 0210 	bic.w	r2, r3, #16
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800637a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	031b      	lsls	r3, r3, #12
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800638c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0303 	bic.w	r3, r3, #3
 80063dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006400:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006454:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006466:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	031b      	lsls	r3, r3, #12
 800646c:	b29b      	uxth	r3, r3
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800647a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	031b      	lsls	r3, r3, #12
 8006480:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	f043 0307 	orr.w	r3, r3, #7
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	021a      	lsls	r2, r3, #8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4313      	orrs	r3, r2
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	609a      	str	r2, [r3, #8]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2201      	movs	r2, #1
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	43db      	mvns	r3, r3
 800653a:	401a      	ands	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	fa01 f303 	lsl.w	r3, r1, r3
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006578:	2302      	movs	r3, #2
 800657a:	e05a      	b.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a21      	ldr	r2, [pc, #132]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d01d      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1a      	ldr	r2, [pc, #104]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a18      	ldr	r2, [pc, #96]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10c      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4313      	orrs	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40010400 	.word	0x40010400
 8006654:	40014000 	.word	0x40014000
 8006658:	40001800 	.word	0x40001800

0800665c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006674:	2302      	movs	r3, #2
 8006676:	e03d      	b.n	80066f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e03f      	b.n	80067ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fb fea8 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800676a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f9cb 	bl	8006b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695a      	ldr	r2, [r3, #20]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08a      	sub	sp, #40	; 0x28
 80067c6:	af02      	add	r7, sp, #8
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d17c      	bne.n	80068dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <HAL_UART_Transmit+0x2c>
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e075      	b.n	80068de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_UART_Transmit+0x3e>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e06e      	b.n	80068de <HAL_UART_Transmit+0x11c>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2221      	movs	r2, #33	; 0x21
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006816:	f7fc f8f3 	bl	8002a00 <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006830:	d108      	bne.n	8006844 <HAL_UART_Transmit+0x82>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e003      	b.n	800684c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006854:	e02a      	b.n	80068ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2200      	movs	r2, #0
 800685e:	2180      	movs	r1, #128	; 0x80
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f8e2 	bl	8006a2a <UART_WaitOnFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e036      	b.n	80068de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	3302      	adds	r3, #2
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	e007      	b.n	800689e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	3301      	adds	r3, #1
 800689c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1cf      	bne.n	8006856 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2200      	movs	r2, #0
 80068be:	2140      	movs	r1, #64	; 0x40
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f8b2 	bl	8006a2a <UART_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e006      	b.n	80068de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80068dc:	2302      	movs	r3, #2
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b08a      	sub	sp, #40	; 0x28
 80068ea:	af02      	add	r7, sp, #8
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b20      	cmp	r3, #32
 8006904:	f040 808c 	bne.w	8006a20 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Receive+0x2e>
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e084      	b.n	8006a22 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_UART_Receive+0x40>
 8006922:	2302      	movs	r3, #2
 8006924:	e07d      	b.n	8006a22 <HAL_UART_Receive+0x13c>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2222      	movs	r2, #34	; 0x22
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006942:	f7fc f85d 	bl	8002a00 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695c:	d108      	bne.n	8006970 <HAL_UART_Receive+0x8a>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e003      	b.n	8006978 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006980:	e043      	b.n	8006a0a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2200      	movs	r2, #0
 800698a:	2120      	movs	r1, #32
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f84c 	bl	8006a2a <UART_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e042      	b.n	8006a22 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10c      	bne.n	80069bc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	3302      	adds	r3, #2
 80069b8:	61bb      	str	r3, [r7, #24]
 80069ba:	e01f      	b.n	80069fc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c4:	d007      	beq.n	80069d6 <HAL_UART_Receive+0xf0>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <HAL_UART_Receive+0xfe>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e008      	b.n	80069f6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	3301      	adds	r3, #1
 80069fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1b6      	bne.n	8006982 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e000      	b.n	8006a22 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
  }
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b090      	sub	sp, #64	; 0x40
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3a:	e050      	b.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a42:	d04c      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x30>
 8006a4a:	f7fb ffd9 	bl	8002a00 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d241      	bcs.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	330c      	adds	r3, #12
 8006a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a7a:	637a      	str	r2, [r7, #52]	; 0x34
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e5      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3314      	adds	r3, #20
 8006a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3314      	adds	r3, #20
 8006aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aae:	623a      	str	r2, [r7, #32]
 8006ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e00f      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d09f      	beq.n	8006a3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3740      	adds	r7, #64	; 0x40
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b0c:	b0c0      	sub	sp, #256	; 0x100
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	68d9      	ldr	r1, [r3, #12]
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	ea40 0301 	orr.w	r3, r0, r1
 8006b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b60:	f021 010c 	bic.w	r1, r1, #12
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	6999      	ldr	r1, [r3, #24]
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	ea40 0301 	orr.w	r3, r0, r1
 8006b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4b8f      	ldr	r3, [pc, #572]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d005      	beq.n	8006ba8 <UART_SetConfig+0xa0>
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b8d      	ldr	r3, [pc, #564]	; (8006dd8 <UART_SetConfig+0x2d0>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d104      	bne.n	8006bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ba8:	f7fd fafc 	bl	80041a4 <HAL_RCC_GetPCLK2Freq>
 8006bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bb0:	e003      	b.n	8006bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fd fae3 	bl	800417c <HAL_RCC_GetPCLK1Freq>
 8006bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc4:	f040 810c 	bne.w	8006de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006be2:	415b      	adcs	r3, r3
 8006be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bea:	4621      	mov	r1, r4
 8006bec:	eb12 0801 	adds.w	r8, r2, r1
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	eb43 0901 	adc.w	r9, r3, r1
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c0a:	4690      	mov	r8, r2
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	4623      	mov	r3, r4
 8006c10:	eb18 0303 	adds.w	r3, r8, r3
 8006c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c18:	462b      	mov	r3, r5
 8006c1a:	eb49 0303 	adc.w	r3, r9, r3
 8006c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c36:	460b      	mov	r3, r1
 8006c38:	18db      	adds	r3, r3, r3
 8006c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	eb42 0303 	adc.w	r3, r2, r3
 8006c42:	657b      	str	r3, [r7, #84]	; 0x54
 8006c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c4c:	f7fa f81c 	bl	8000c88 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4b61      	ldr	r3, [pc, #388]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006c56:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	011c      	lsls	r4, r3, #4
 8006c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	1891      	adds	r1, r2, r2
 8006c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c78:	415b      	adcs	r3, r3
 8006c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c80:	4641      	mov	r1, r8
 8006c82:	eb12 0a01 	adds.w	sl, r2, r1
 8006c86:	4649      	mov	r1, r9
 8006c88:	eb43 0b01 	adc.w	fp, r3, r1
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca0:	4692      	mov	sl, r2
 8006ca2:	469b      	mov	fp, r3
 8006ca4:	4643      	mov	r3, r8
 8006ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8006caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	18db      	adds	r3, r3, r3
 8006cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	eb42 0303 	adc.w	r3, r2, r3
 8006cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ce2:	f7f9 ffd1 	bl	8000c88 <__aeabi_uldivmod>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	4b3b      	ldr	r3, [pc, #236]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006cee:	fba3 2301 	umull	r2, r3, r3, r1
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	2264      	movs	r2, #100	; 0x64
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	1acb      	subs	r3, r1, r3
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d02:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006d04:	fba3 2302 	umull	r2, r3, r3, r2
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d10:	441c      	add	r4, r3
 8006d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d34:	4641      	mov	r1, r8
 8006d36:	1851      	adds	r1, r2, r1
 8006d38:	6339      	str	r1, [r7, #48]	; 0x30
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	414b      	adcs	r3, r1
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	00cb      	lsls	r3, r1, #3
 8006d50:	4651      	mov	r1, sl
 8006d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d56:	4651      	mov	r1, sl
 8006d58:	00ca      	lsls	r2, r1, #3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4642      	mov	r2, r8
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d68:	464b      	mov	r3, r9
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	eb42 0303 	adc.w	r3, r2, r3
 8006d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d88:	460b      	mov	r3, r1
 8006d8a:	18db      	adds	r3, r3, r3
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d8e:	4613      	mov	r3, r2
 8006d90:	eb42 0303 	adc.w	r3, r2, r3
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d9e:	f7f9 ff73 	bl	8000c88 <__aeabi_uldivmod>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006da8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	2164      	movs	r1, #100	; 0x64
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	3332      	adds	r3, #50	; 0x32
 8006dba:	4a08      	ldr	r2, [pc, #32]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	f003 0207 	and.w	r2, r3, #7
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4422      	add	r2, r4
 8006dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd0:	e105      	b.n	8006fde <UART_SetConfig+0x4d6>
 8006dd2:	bf00      	nop
 8006dd4:	40011000 	.word	0x40011000
 8006dd8:	40011400 	.word	0x40011400
 8006ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006df2:	4642      	mov	r2, r8
 8006df4:	464b      	mov	r3, r9
 8006df6:	1891      	adds	r1, r2, r2
 8006df8:	6239      	str	r1, [r7, #32]
 8006dfa:	415b      	adcs	r3, r3
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e02:	4641      	mov	r1, r8
 8006e04:	1854      	adds	r4, r2, r1
 8006e06:	4649      	mov	r1, r9
 8006e08:	eb43 0501 	adc.w	r5, r3, r1
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	00eb      	lsls	r3, r5, #3
 8006e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1a:	00e2      	lsls	r2, r4, #3
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	4643      	mov	r3, r8
 8006e22:	18e3      	adds	r3, r4, r3
 8006e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e28:	464b      	mov	r3, r9
 8006e2a:	eb45 0303 	adc.w	r3, r5, r3
 8006e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e4e:	4629      	mov	r1, r5
 8006e50:	008b      	lsls	r3, r1, #2
 8006e52:	4621      	mov	r1, r4
 8006e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e58:	4621      	mov	r1, r4
 8006e5a:	008a      	lsls	r2, r1, #2
 8006e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e60:	f7f9 ff12 	bl	8000c88 <__aeabi_uldivmod>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4b60      	ldr	r3, [pc, #384]	; (8006fec <UART_SetConfig+0x4e4>)
 8006e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	011c      	lsls	r4, r3, #4
 8006e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	1891      	adds	r1, r2, r2
 8006e8a:	61b9      	str	r1, [r7, #24]
 8006e8c:	415b      	adcs	r3, r3
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e94:	4641      	mov	r1, r8
 8006e96:	1851      	adds	r1, r2, r1
 8006e98:	6139      	str	r1, [r7, #16]
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	414b      	adcs	r3, r1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eac:	4659      	mov	r1, fp
 8006eae:	00cb      	lsls	r3, r1, #3
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eb6:	4651      	mov	r1, sl
 8006eb8:	00ca      	lsls	r2, r1, #3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	189b      	adds	r3, r3, r2
 8006ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec8:	464b      	mov	r3, r9
 8006eca:	460a      	mov	r2, r1
 8006ecc:	eb42 0303 	adc.w	r3, r2, r3
 8006ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006eec:	4649      	mov	r1, r9
 8006eee:	008b      	lsls	r3, r1, #2
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ef6:	4641      	mov	r1, r8
 8006ef8:	008a      	lsls	r2, r1, #2
 8006efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006efe:	f7f9 fec3 	bl	8000c88 <__aeabi_uldivmod>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4b39      	ldr	r3, [pc, #228]	; (8006fec <UART_SetConfig+0x4e4>)
 8006f08:	fba3 1302 	umull	r1, r3, r3, r2
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	2164      	movs	r1, #100	; 0x64
 8006f10:	fb01 f303 	mul.w	r3, r1, r3
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	3332      	adds	r3, #50	; 0x32
 8006f1a:	4a34      	ldr	r2, [pc, #208]	; (8006fec <UART_SetConfig+0x4e4>)
 8006f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f26:	441c      	add	r4, r3
 8006f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006f30:	677a      	str	r2, [r7, #116]	; 0x74
 8006f32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f36:	4642      	mov	r2, r8
 8006f38:	464b      	mov	r3, r9
 8006f3a:	1891      	adds	r1, r2, r2
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	415b      	adcs	r3, r3
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f46:	4641      	mov	r1, r8
 8006f48:	1851      	adds	r1, r2, r1
 8006f4a:	6039      	str	r1, [r7, #0]
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	414b      	adcs	r3, r1
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f5e:	4659      	mov	r1, fp
 8006f60:	00cb      	lsls	r3, r1, #3
 8006f62:	4651      	mov	r1, sl
 8006f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f68:	4651      	mov	r1, sl
 8006f6a:	00ca      	lsls	r2, r1, #3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4603      	mov	r3, r0
 8006f72:	4642      	mov	r2, r8
 8006f74:	189b      	adds	r3, r3, r2
 8006f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f78:	464b      	mov	r3, r9
 8006f7a:	460a      	mov	r2, r1
 8006f7c:	eb42 0303 	adc.w	r3, r2, r3
 8006f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f8c:	667a      	str	r2, [r7, #100]	; 0x64
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	008b      	lsls	r3, r1, #2
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	008a      	lsls	r2, r1, #2
 8006fa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fac:	f7f9 fe6c 	bl	8000c88 <__aeabi_uldivmod>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <UART_SetConfig+0x4e4>)
 8006fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	2164      	movs	r1, #100	; 0x64
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	3332      	adds	r3, #50	; 0x32
 8006fc8:	4a08      	ldr	r2, [pc, #32]	; (8006fec <UART_SetConfig+0x4e4>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4422      	add	r2, r4
 8006fdc:	609a      	str	r2, [r3, #8]
}
 8006fde:	bf00      	nop
 8006fe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fea:	bf00      	nop
 8006fec:	51eb851f 	.word	0x51eb851f

08006ff0 <__errno>:
 8006ff0:	4b01      	ldr	r3, [pc, #4]	; (8006ff8 <__errno+0x8>)
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20000010 	.word	0x20000010

08006ffc <__libc_init_array>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4d0d      	ldr	r5, [pc, #52]	; (8007034 <__libc_init_array+0x38>)
 8007000:	4c0d      	ldr	r4, [pc, #52]	; (8007038 <__libc_init_array+0x3c>)
 8007002:	1b64      	subs	r4, r4, r5
 8007004:	10a4      	asrs	r4, r4, #2
 8007006:	2600      	movs	r6, #0
 8007008:	42a6      	cmp	r6, r4
 800700a:	d109      	bne.n	8007020 <__libc_init_array+0x24>
 800700c:	4d0b      	ldr	r5, [pc, #44]	; (800703c <__libc_init_array+0x40>)
 800700e:	4c0c      	ldr	r4, [pc, #48]	; (8007040 <__libc_init_array+0x44>)
 8007010:	f002 ff02 	bl	8009e18 <_init>
 8007014:	1b64      	subs	r4, r4, r5
 8007016:	10a4      	asrs	r4, r4, #2
 8007018:	2600      	movs	r6, #0
 800701a:	42a6      	cmp	r6, r4
 800701c:	d105      	bne.n	800702a <__libc_init_array+0x2e>
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	f855 3b04 	ldr.w	r3, [r5], #4
 8007024:	4798      	blx	r3
 8007026:	3601      	adds	r6, #1
 8007028:	e7ee      	b.n	8007008 <__libc_init_array+0xc>
 800702a:	f855 3b04 	ldr.w	r3, [r5], #4
 800702e:	4798      	blx	r3
 8007030:	3601      	adds	r6, #1
 8007032:	e7f2      	b.n	800701a <__libc_init_array+0x1e>
 8007034:	0800a2a4 	.word	0x0800a2a4
 8007038:	0800a2a4 	.word	0x0800a2a4
 800703c:	0800a2a4 	.word	0x0800a2a4
 8007040:	0800a2a8 	.word	0x0800a2a8

08007044 <memset>:
 8007044:	4402      	add	r2, r0
 8007046:	4603      	mov	r3, r0
 8007048:	4293      	cmp	r3, r2
 800704a:	d100      	bne.n	800704e <memset+0xa>
 800704c:	4770      	bx	lr
 800704e:	f803 1b01 	strb.w	r1, [r3], #1
 8007052:	e7f9      	b.n	8007048 <memset+0x4>

08007054 <__cvt>:
 8007054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	ec55 4b10 	vmov	r4, r5, d0
 800705c:	2d00      	cmp	r5, #0
 800705e:	460e      	mov	r6, r1
 8007060:	4619      	mov	r1, r3
 8007062:	462b      	mov	r3, r5
 8007064:	bfbb      	ittet	lt
 8007066:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800706a:	461d      	movlt	r5, r3
 800706c:	2300      	movge	r3, #0
 800706e:	232d      	movlt	r3, #45	; 0x2d
 8007070:	700b      	strb	r3, [r1, #0]
 8007072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007074:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007078:	4691      	mov	r9, r2
 800707a:	f023 0820 	bic.w	r8, r3, #32
 800707e:	bfbc      	itt	lt
 8007080:	4622      	movlt	r2, r4
 8007082:	4614      	movlt	r4, r2
 8007084:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007088:	d005      	beq.n	8007096 <__cvt+0x42>
 800708a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800708e:	d100      	bne.n	8007092 <__cvt+0x3e>
 8007090:	3601      	adds	r6, #1
 8007092:	2102      	movs	r1, #2
 8007094:	e000      	b.n	8007098 <__cvt+0x44>
 8007096:	2103      	movs	r1, #3
 8007098:	ab03      	add	r3, sp, #12
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	ab02      	add	r3, sp, #8
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	ec45 4b10 	vmov	d0, r4, r5
 80070a4:	4653      	mov	r3, sl
 80070a6:	4632      	mov	r2, r6
 80070a8:	f000 fcea 	bl	8007a80 <_dtoa_r>
 80070ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070b0:	4607      	mov	r7, r0
 80070b2:	d102      	bne.n	80070ba <__cvt+0x66>
 80070b4:	f019 0f01 	tst.w	r9, #1
 80070b8:	d022      	beq.n	8007100 <__cvt+0xac>
 80070ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070be:	eb07 0906 	add.w	r9, r7, r6
 80070c2:	d110      	bne.n	80070e6 <__cvt+0x92>
 80070c4:	783b      	ldrb	r3, [r7, #0]
 80070c6:	2b30      	cmp	r3, #48	; 0x30
 80070c8:	d10a      	bne.n	80070e0 <__cvt+0x8c>
 80070ca:	2200      	movs	r2, #0
 80070cc:	2300      	movs	r3, #0
 80070ce:	4620      	mov	r0, r4
 80070d0:	4629      	mov	r1, r5
 80070d2:	f7f9 fd19 	bl	8000b08 <__aeabi_dcmpeq>
 80070d6:	b918      	cbnz	r0, 80070e0 <__cvt+0x8c>
 80070d8:	f1c6 0601 	rsb	r6, r6, #1
 80070dc:	f8ca 6000 	str.w	r6, [sl]
 80070e0:	f8da 3000 	ldr.w	r3, [sl]
 80070e4:	4499      	add	r9, r3
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	f7f9 fd0b 	bl	8000b08 <__aeabi_dcmpeq>
 80070f2:	b108      	cbz	r0, 80070f8 <__cvt+0xa4>
 80070f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80070f8:	2230      	movs	r2, #48	; 0x30
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	454b      	cmp	r3, r9
 80070fe:	d307      	bcc.n	8007110 <__cvt+0xbc>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007104:	1bdb      	subs	r3, r3, r7
 8007106:	4638      	mov	r0, r7
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	b004      	add	sp, #16
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	1c59      	adds	r1, r3, #1
 8007112:	9103      	str	r1, [sp, #12]
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e7f0      	b.n	80070fa <__cvt+0xa6>

08007118 <__exponent>:
 8007118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800711a:	4603      	mov	r3, r0
 800711c:	2900      	cmp	r1, #0
 800711e:	bfb8      	it	lt
 8007120:	4249      	neglt	r1, r1
 8007122:	f803 2b02 	strb.w	r2, [r3], #2
 8007126:	bfb4      	ite	lt
 8007128:	222d      	movlt	r2, #45	; 0x2d
 800712a:	222b      	movge	r2, #43	; 0x2b
 800712c:	2909      	cmp	r1, #9
 800712e:	7042      	strb	r2, [r0, #1]
 8007130:	dd2a      	ble.n	8007188 <__exponent+0x70>
 8007132:	f10d 0407 	add.w	r4, sp, #7
 8007136:	46a4      	mov	ip, r4
 8007138:	270a      	movs	r7, #10
 800713a:	46a6      	mov	lr, r4
 800713c:	460a      	mov	r2, r1
 800713e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007142:	fb07 1516 	mls	r5, r7, r6, r1
 8007146:	3530      	adds	r5, #48	; 0x30
 8007148:	2a63      	cmp	r2, #99	; 0x63
 800714a:	f104 34ff 	add.w	r4, r4, #4294967295
 800714e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007152:	4631      	mov	r1, r6
 8007154:	dcf1      	bgt.n	800713a <__exponent+0x22>
 8007156:	3130      	adds	r1, #48	; 0x30
 8007158:	f1ae 0502 	sub.w	r5, lr, #2
 800715c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007160:	1c44      	adds	r4, r0, #1
 8007162:	4629      	mov	r1, r5
 8007164:	4561      	cmp	r1, ip
 8007166:	d30a      	bcc.n	800717e <__exponent+0x66>
 8007168:	f10d 0209 	add.w	r2, sp, #9
 800716c:	eba2 020e 	sub.w	r2, r2, lr
 8007170:	4565      	cmp	r5, ip
 8007172:	bf88      	it	hi
 8007174:	2200      	movhi	r2, #0
 8007176:	4413      	add	r3, r2
 8007178:	1a18      	subs	r0, r3, r0
 800717a:	b003      	add	sp, #12
 800717c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800717e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007182:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007186:	e7ed      	b.n	8007164 <__exponent+0x4c>
 8007188:	2330      	movs	r3, #48	; 0x30
 800718a:	3130      	adds	r1, #48	; 0x30
 800718c:	7083      	strb	r3, [r0, #2]
 800718e:	70c1      	strb	r1, [r0, #3]
 8007190:	1d03      	adds	r3, r0, #4
 8007192:	e7f1      	b.n	8007178 <__exponent+0x60>

08007194 <_printf_float>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	ed2d 8b02 	vpush	{d8}
 800719c:	b08d      	sub	sp, #52	; 0x34
 800719e:	460c      	mov	r4, r1
 80071a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071a4:	4616      	mov	r6, r2
 80071a6:	461f      	mov	r7, r3
 80071a8:	4605      	mov	r5, r0
 80071aa:	f001 fa57 	bl	800865c <_localeconv_r>
 80071ae:	f8d0 a000 	ldr.w	sl, [r0]
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7f9 f82c 	bl	8000210 <strlen>
 80071b8:	2300      	movs	r3, #0
 80071ba:	930a      	str	r3, [sp, #40]	; 0x28
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	f8d8 3000 	ldr.w	r3, [r8]
 80071c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071c8:	3307      	adds	r3, #7
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	f103 0208 	add.w	r2, r3, #8
 80071d2:	f8c8 2000 	str.w	r2, [r8]
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80071ec:	ee08 0a10 	vmov	s16, r0
 80071f0:	4b9f      	ldr	r3, [pc, #636]	; (8007470 <_printf_float+0x2dc>)
 80071f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071f6:	f04f 32ff 	mov.w	r2, #4294967295
 80071fa:	f7f9 fcb7 	bl	8000b6c <__aeabi_dcmpun>
 80071fe:	bb88      	cbnz	r0, 8007264 <_printf_float+0xd0>
 8007200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007204:	4b9a      	ldr	r3, [pc, #616]	; (8007470 <_printf_float+0x2dc>)
 8007206:	f04f 32ff 	mov.w	r2, #4294967295
 800720a:	f7f9 fc91 	bl	8000b30 <__aeabi_dcmple>
 800720e:	bb48      	cbnz	r0, 8007264 <_printf_float+0xd0>
 8007210:	2200      	movs	r2, #0
 8007212:	2300      	movs	r3, #0
 8007214:	4640      	mov	r0, r8
 8007216:	4649      	mov	r1, r9
 8007218:	f7f9 fc80 	bl	8000b1c <__aeabi_dcmplt>
 800721c:	b110      	cbz	r0, 8007224 <_printf_float+0x90>
 800721e:	232d      	movs	r3, #45	; 0x2d
 8007220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007224:	4b93      	ldr	r3, [pc, #588]	; (8007474 <_printf_float+0x2e0>)
 8007226:	4894      	ldr	r0, [pc, #592]	; (8007478 <_printf_float+0x2e4>)
 8007228:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800722c:	bf94      	ite	ls
 800722e:	4698      	movls	r8, r3
 8007230:	4680      	movhi	r8, r0
 8007232:	2303      	movs	r3, #3
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	9b05      	ldr	r3, [sp, #20]
 8007238:	f023 0204 	bic.w	r2, r3, #4
 800723c:	6022      	str	r2, [r4, #0]
 800723e:	f04f 0900 	mov.w	r9, #0
 8007242:	9700      	str	r7, [sp, #0]
 8007244:	4633      	mov	r3, r6
 8007246:	aa0b      	add	r2, sp, #44	; 0x2c
 8007248:	4621      	mov	r1, r4
 800724a:	4628      	mov	r0, r5
 800724c:	f000 f9d8 	bl	8007600 <_printf_common>
 8007250:	3001      	adds	r0, #1
 8007252:	f040 8090 	bne.w	8007376 <_printf_float+0x1e2>
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	b00d      	add	sp, #52	; 0x34
 800725c:	ecbd 8b02 	vpop	{d8}
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	4642      	mov	r2, r8
 8007266:	464b      	mov	r3, r9
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 fc7e 	bl	8000b6c <__aeabi_dcmpun>
 8007270:	b140      	cbz	r0, 8007284 <_printf_float+0xf0>
 8007272:	464b      	mov	r3, r9
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfbc      	itt	lt
 8007278:	232d      	movlt	r3, #45	; 0x2d
 800727a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800727e:	487f      	ldr	r0, [pc, #508]	; (800747c <_printf_float+0x2e8>)
 8007280:	4b7f      	ldr	r3, [pc, #508]	; (8007480 <_printf_float+0x2ec>)
 8007282:	e7d1      	b.n	8007228 <_printf_float+0x94>
 8007284:	6863      	ldr	r3, [r4, #4]
 8007286:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800728a:	9206      	str	r2, [sp, #24]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	d13f      	bne.n	8007310 <_printf_float+0x17c>
 8007290:	2306      	movs	r3, #6
 8007292:	6063      	str	r3, [r4, #4]
 8007294:	9b05      	ldr	r3, [sp, #20]
 8007296:	6861      	ldr	r1, [r4, #4]
 8007298:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800729c:	2300      	movs	r3, #0
 800729e:	9303      	str	r3, [sp, #12]
 80072a0:	ab0a      	add	r3, sp, #40	; 0x28
 80072a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072a6:	ab09      	add	r3, sp, #36	; 0x24
 80072a8:	ec49 8b10 	vmov	d0, r8, r9
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072b4:	4628      	mov	r0, r5
 80072b6:	f7ff fecd 	bl	8007054 <__cvt>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072be:	2b47      	cmp	r3, #71	; 0x47
 80072c0:	4680      	mov	r8, r0
 80072c2:	d108      	bne.n	80072d6 <_printf_float+0x142>
 80072c4:	1cc8      	adds	r0, r1, #3
 80072c6:	db02      	blt.n	80072ce <_printf_float+0x13a>
 80072c8:	6863      	ldr	r3, [r4, #4]
 80072ca:	4299      	cmp	r1, r3
 80072cc:	dd41      	ble.n	8007352 <_printf_float+0x1be>
 80072ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80072d2:	fa5f fb8b 	uxtb.w	fp, fp
 80072d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072da:	d820      	bhi.n	800731e <_printf_float+0x18a>
 80072dc:	3901      	subs	r1, #1
 80072de:	465a      	mov	r2, fp
 80072e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072e4:	9109      	str	r1, [sp, #36]	; 0x24
 80072e6:	f7ff ff17 	bl	8007118 <__exponent>
 80072ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ec:	1813      	adds	r3, r2, r0
 80072ee:	2a01      	cmp	r2, #1
 80072f0:	4681      	mov	r9, r0
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	dc02      	bgt.n	80072fc <_printf_float+0x168>
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	07d2      	lsls	r2, r2, #31
 80072fa:	d501      	bpl.n	8007300 <_printf_float+0x16c>
 80072fc:	3301      	adds	r3, #1
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007304:	2b00      	cmp	r3, #0
 8007306:	d09c      	beq.n	8007242 <_printf_float+0xae>
 8007308:	232d      	movs	r3, #45	; 0x2d
 800730a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800730e:	e798      	b.n	8007242 <_printf_float+0xae>
 8007310:	9a06      	ldr	r2, [sp, #24]
 8007312:	2a47      	cmp	r2, #71	; 0x47
 8007314:	d1be      	bne.n	8007294 <_printf_float+0x100>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1bc      	bne.n	8007294 <_printf_float+0x100>
 800731a:	2301      	movs	r3, #1
 800731c:	e7b9      	b.n	8007292 <_printf_float+0xfe>
 800731e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007322:	d118      	bne.n	8007356 <_printf_float+0x1c2>
 8007324:	2900      	cmp	r1, #0
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	dd0b      	ble.n	8007342 <_printf_float+0x1ae>
 800732a:	6121      	str	r1, [r4, #16]
 800732c:	b913      	cbnz	r3, 8007334 <_printf_float+0x1a0>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	07d0      	lsls	r0, r2, #31
 8007332:	d502      	bpl.n	800733a <_printf_float+0x1a6>
 8007334:	3301      	adds	r3, #1
 8007336:	440b      	add	r3, r1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	65a1      	str	r1, [r4, #88]	; 0x58
 800733c:	f04f 0900 	mov.w	r9, #0
 8007340:	e7de      	b.n	8007300 <_printf_float+0x16c>
 8007342:	b913      	cbnz	r3, 800734a <_printf_float+0x1b6>
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	07d2      	lsls	r2, r2, #31
 8007348:	d501      	bpl.n	800734e <_printf_float+0x1ba>
 800734a:	3302      	adds	r3, #2
 800734c:	e7f4      	b.n	8007338 <_printf_float+0x1a4>
 800734e:	2301      	movs	r3, #1
 8007350:	e7f2      	b.n	8007338 <_printf_float+0x1a4>
 8007352:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007358:	4299      	cmp	r1, r3
 800735a:	db05      	blt.n	8007368 <_printf_float+0x1d4>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	6121      	str	r1, [r4, #16]
 8007360:	07d8      	lsls	r0, r3, #31
 8007362:	d5ea      	bpl.n	800733a <_printf_float+0x1a6>
 8007364:	1c4b      	adds	r3, r1, #1
 8007366:	e7e7      	b.n	8007338 <_printf_float+0x1a4>
 8007368:	2900      	cmp	r1, #0
 800736a:	bfd4      	ite	le
 800736c:	f1c1 0202 	rsble	r2, r1, #2
 8007370:	2201      	movgt	r2, #1
 8007372:	4413      	add	r3, r2
 8007374:	e7e0      	b.n	8007338 <_printf_float+0x1a4>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	055a      	lsls	r2, r3, #21
 800737a:	d407      	bmi.n	800738c <_printf_float+0x1f8>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	4642      	mov	r2, r8
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	d12c      	bne.n	80073e4 <_printf_float+0x250>
 800738a:	e764      	b.n	8007256 <_printf_float+0xc2>
 800738c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007390:	f240 80e0 	bls.w	8007554 <_printf_float+0x3c0>
 8007394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	f7f9 fbb4 	bl	8000b08 <__aeabi_dcmpeq>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d034      	beq.n	800740e <_printf_float+0x27a>
 80073a4:	4a37      	ldr	r2, [pc, #220]	; (8007484 <_printf_float+0x2f0>)
 80073a6:	2301      	movs	r3, #1
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f af51 	beq.w	8007256 <_printf_float+0xc2>
 80073b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b8:	429a      	cmp	r2, r3
 80073ba:	db02      	blt.n	80073c2 <_printf_float+0x22e>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	07d8      	lsls	r0, r3, #31
 80073c0:	d510      	bpl.n	80073e4 <_printf_float+0x250>
 80073c2:	ee18 3a10 	vmov	r3, s16
 80073c6:	4652      	mov	r2, sl
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	f43f af41 	beq.w	8007256 <_printf_float+0xc2>
 80073d4:	f04f 0800 	mov.w	r8, #0
 80073d8:	f104 091a 	add.w	r9, r4, #26
 80073dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073de:	3b01      	subs	r3, #1
 80073e0:	4543      	cmp	r3, r8
 80073e2:	dc09      	bgt.n	80073f8 <_printf_float+0x264>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	079b      	lsls	r3, r3, #30
 80073e8:	f100 8105 	bmi.w	80075f6 <_printf_float+0x462>
 80073ec:	68e0      	ldr	r0, [r4, #12]
 80073ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f0:	4298      	cmp	r0, r3
 80073f2:	bfb8      	it	lt
 80073f4:	4618      	movlt	r0, r3
 80073f6:	e730      	b.n	800725a <_printf_float+0xc6>
 80073f8:	2301      	movs	r3, #1
 80073fa:	464a      	mov	r2, r9
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af27 	beq.w	8007256 <_printf_float+0xc2>
 8007408:	f108 0801 	add.w	r8, r8, #1
 800740c:	e7e6      	b.n	80073dc <_printf_float+0x248>
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	dc39      	bgt.n	8007488 <_printf_float+0x2f4>
 8007414:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <_printf_float+0x2f0>)
 8007416:	2301      	movs	r3, #1
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f af19 	beq.w	8007256 <_printf_float+0xc2>
 8007424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007428:	4313      	orrs	r3, r2
 800742a:	d102      	bne.n	8007432 <_printf_float+0x29e>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	d5d8      	bpl.n	80073e4 <_printf_float+0x250>
 8007432:	ee18 3a10 	vmov	r3, s16
 8007436:	4652      	mov	r2, sl
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f af09 	beq.w	8007256 <_printf_float+0xc2>
 8007444:	f04f 0900 	mov.w	r9, #0
 8007448:	f104 0a1a 	add.w	sl, r4, #26
 800744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744e:	425b      	negs	r3, r3
 8007450:	454b      	cmp	r3, r9
 8007452:	dc01      	bgt.n	8007458 <_printf_float+0x2c4>
 8007454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007456:	e792      	b.n	800737e <_printf_float+0x1ea>
 8007458:	2301      	movs	r3, #1
 800745a:	4652      	mov	r2, sl
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f aef7 	beq.w	8007256 <_printf_float+0xc2>
 8007468:	f109 0901 	add.w	r9, r9, #1
 800746c:	e7ee      	b.n	800744c <_printf_float+0x2b8>
 800746e:	bf00      	nop
 8007470:	7fefffff 	.word	0x7fefffff
 8007474:	08009ec4 	.word	0x08009ec4
 8007478:	08009ec8 	.word	0x08009ec8
 800747c:	08009ed0 	.word	0x08009ed0
 8007480:	08009ecc 	.word	0x08009ecc
 8007484:	08009ed4 	.word	0x08009ed4
 8007488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800748c:	429a      	cmp	r2, r3
 800748e:	bfa8      	it	ge
 8007490:	461a      	movge	r2, r3
 8007492:	2a00      	cmp	r2, #0
 8007494:	4691      	mov	r9, r2
 8007496:	dc37      	bgt.n	8007508 <_printf_float+0x374>
 8007498:	f04f 0b00 	mov.w	fp, #0
 800749c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074a0:	f104 021a 	add.w	r2, r4, #26
 80074a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074a6:	9305      	str	r3, [sp, #20]
 80074a8:	eba3 0309 	sub.w	r3, r3, r9
 80074ac:	455b      	cmp	r3, fp
 80074ae:	dc33      	bgt.n	8007518 <_printf_float+0x384>
 80074b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b4:	429a      	cmp	r2, r3
 80074b6:	db3b      	blt.n	8007530 <_printf_float+0x39c>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	07da      	lsls	r2, r3, #31
 80074bc:	d438      	bmi.n	8007530 <_printf_float+0x39c>
 80074be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c0:	9a05      	ldr	r2, [sp, #20]
 80074c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074c4:	1a9a      	subs	r2, r3, r2
 80074c6:	eba3 0901 	sub.w	r9, r3, r1
 80074ca:	4591      	cmp	r9, r2
 80074cc:	bfa8      	it	ge
 80074ce:	4691      	movge	r9, r2
 80074d0:	f1b9 0f00 	cmp.w	r9, #0
 80074d4:	dc35      	bgt.n	8007542 <_printf_float+0x3ae>
 80074d6:	f04f 0800 	mov.w	r8, #0
 80074da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074de:	f104 0a1a 	add.w	sl, r4, #26
 80074e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	eba3 0309 	sub.w	r3, r3, r9
 80074ec:	4543      	cmp	r3, r8
 80074ee:	f77f af79 	ble.w	80073e4 <_printf_float+0x250>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4652      	mov	r2, sl
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f aeaa 	beq.w	8007256 <_printf_float+0xc2>
 8007502:	f108 0801 	add.w	r8, r8, #1
 8007506:	e7ec      	b.n	80074e2 <_printf_float+0x34e>
 8007508:	4613      	mov	r3, r2
 800750a:	4631      	mov	r1, r6
 800750c:	4642      	mov	r2, r8
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	d1c0      	bne.n	8007498 <_printf_float+0x304>
 8007516:	e69e      	b.n	8007256 <_printf_float+0xc2>
 8007518:	2301      	movs	r3, #1
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	9205      	str	r2, [sp, #20]
 8007520:	47b8      	blx	r7
 8007522:	3001      	adds	r0, #1
 8007524:	f43f ae97 	beq.w	8007256 <_printf_float+0xc2>
 8007528:	9a05      	ldr	r2, [sp, #20]
 800752a:	f10b 0b01 	add.w	fp, fp, #1
 800752e:	e7b9      	b.n	80074a4 <_printf_float+0x310>
 8007530:	ee18 3a10 	vmov	r3, s16
 8007534:	4652      	mov	r2, sl
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	d1be      	bne.n	80074be <_printf_float+0x32a>
 8007540:	e689      	b.n	8007256 <_printf_float+0xc2>
 8007542:	9a05      	ldr	r2, [sp, #20]
 8007544:	464b      	mov	r3, r9
 8007546:	4442      	add	r2, r8
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	d1c1      	bne.n	80074d6 <_printf_float+0x342>
 8007552:	e680      	b.n	8007256 <_printf_float+0xc2>
 8007554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007556:	2a01      	cmp	r2, #1
 8007558:	dc01      	bgt.n	800755e <_printf_float+0x3ca>
 800755a:	07db      	lsls	r3, r3, #31
 800755c:	d538      	bpl.n	80075d0 <_printf_float+0x43c>
 800755e:	2301      	movs	r3, #1
 8007560:	4642      	mov	r2, r8
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	f43f ae74 	beq.w	8007256 <_printf_float+0xc2>
 800756e:	ee18 3a10 	vmov	r3, s16
 8007572:	4652      	mov	r2, sl
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f ae6b 	beq.w	8007256 <_printf_float+0xc2>
 8007580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	f7f9 fabe 	bl	8000b08 <__aeabi_dcmpeq>
 800758c:	b9d8      	cbnz	r0, 80075c6 <_printf_float+0x432>
 800758e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007590:	f108 0201 	add.w	r2, r8, #1
 8007594:	3b01      	subs	r3, #1
 8007596:	4631      	mov	r1, r6
 8007598:	4628      	mov	r0, r5
 800759a:	47b8      	blx	r7
 800759c:	3001      	adds	r0, #1
 800759e:	d10e      	bne.n	80075be <_printf_float+0x42a>
 80075a0:	e659      	b.n	8007256 <_printf_float+0xc2>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4652      	mov	r2, sl
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f ae52 	beq.w	8007256 <_printf_float+0xc2>
 80075b2:	f108 0801 	add.w	r8, r8, #1
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	3b01      	subs	r3, #1
 80075ba:	4543      	cmp	r3, r8
 80075bc:	dcf1      	bgt.n	80075a2 <_printf_float+0x40e>
 80075be:	464b      	mov	r3, r9
 80075c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075c4:	e6dc      	b.n	8007380 <_printf_float+0x1ec>
 80075c6:	f04f 0800 	mov.w	r8, #0
 80075ca:	f104 0a1a 	add.w	sl, r4, #26
 80075ce:	e7f2      	b.n	80075b6 <_printf_float+0x422>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4642      	mov	r2, r8
 80075d4:	e7df      	b.n	8007596 <_printf_float+0x402>
 80075d6:	2301      	movs	r3, #1
 80075d8:	464a      	mov	r2, r9
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	f43f ae38 	beq.w	8007256 <_printf_float+0xc2>
 80075e6:	f108 0801 	add.w	r8, r8, #1
 80075ea:	68e3      	ldr	r3, [r4, #12]
 80075ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075ee:	1a5b      	subs	r3, r3, r1
 80075f0:	4543      	cmp	r3, r8
 80075f2:	dcf0      	bgt.n	80075d6 <_printf_float+0x442>
 80075f4:	e6fa      	b.n	80073ec <_printf_float+0x258>
 80075f6:	f04f 0800 	mov.w	r8, #0
 80075fa:	f104 0919 	add.w	r9, r4, #25
 80075fe:	e7f4      	b.n	80075ea <_printf_float+0x456>

08007600 <_printf_common>:
 8007600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	4616      	mov	r6, r2
 8007606:	4699      	mov	r9, r3
 8007608:	688a      	ldr	r2, [r1, #8]
 800760a:	690b      	ldr	r3, [r1, #16]
 800760c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007610:	4293      	cmp	r3, r2
 8007612:	bfb8      	it	lt
 8007614:	4613      	movlt	r3, r2
 8007616:	6033      	str	r3, [r6, #0]
 8007618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800761c:	4607      	mov	r7, r0
 800761e:	460c      	mov	r4, r1
 8007620:	b10a      	cbz	r2, 8007626 <_printf_common+0x26>
 8007622:	3301      	adds	r3, #1
 8007624:	6033      	str	r3, [r6, #0]
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	0699      	lsls	r1, r3, #26
 800762a:	bf42      	ittt	mi
 800762c:	6833      	ldrmi	r3, [r6, #0]
 800762e:	3302      	addmi	r3, #2
 8007630:	6033      	strmi	r3, [r6, #0]
 8007632:	6825      	ldr	r5, [r4, #0]
 8007634:	f015 0506 	ands.w	r5, r5, #6
 8007638:	d106      	bne.n	8007648 <_printf_common+0x48>
 800763a:	f104 0a19 	add.w	sl, r4, #25
 800763e:	68e3      	ldr	r3, [r4, #12]
 8007640:	6832      	ldr	r2, [r6, #0]
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	42ab      	cmp	r3, r5
 8007646:	dc26      	bgt.n	8007696 <_printf_common+0x96>
 8007648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800764c:	1e13      	subs	r3, r2, #0
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	bf18      	it	ne
 8007652:	2301      	movne	r3, #1
 8007654:	0692      	lsls	r2, r2, #26
 8007656:	d42b      	bmi.n	80076b0 <_printf_common+0xb0>
 8007658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800765c:	4649      	mov	r1, r9
 800765e:	4638      	mov	r0, r7
 8007660:	47c0      	blx	r8
 8007662:	3001      	adds	r0, #1
 8007664:	d01e      	beq.n	80076a4 <_printf_common+0xa4>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	68e5      	ldr	r5, [r4, #12]
 800766a:	6832      	ldr	r2, [r6, #0]
 800766c:	f003 0306 	and.w	r3, r3, #6
 8007670:	2b04      	cmp	r3, #4
 8007672:	bf08      	it	eq
 8007674:	1aad      	subeq	r5, r5, r2
 8007676:	68a3      	ldr	r3, [r4, #8]
 8007678:	6922      	ldr	r2, [r4, #16]
 800767a:	bf0c      	ite	eq
 800767c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007680:	2500      	movne	r5, #0
 8007682:	4293      	cmp	r3, r2
 8007684:	bfc4      	itt	gt
 8007686:	1a9b      	subgt	r3, r3, r2
 8007688:	18ed      	addgt	r5, r5, r3
 800768a:	2600      	movs	r6, #0
 800768c:	341a      	adds	r4, #26
 800768e:	42b5      	cmp	r5, r6
 8007690:	d11a      	bne.n	80076c8 <_printf_common+0xc8>
 8007692:	2000      	movs	r0, #0
 8007694:	e008      	b.n	80076a8 <_printf_common+0xa8>
 8007696:	2301      	movs	r3, #1
 8007698:	4652      	mov	r2, sl
 800769a:	4649      	mov	r1, r9
 800769c:	4638      	mov	r0, r7
 800769e:	47c0      	blx	r8
 80076a0:	3001      	adds	r0, #1
 80076a2:	d103      	bne.n	80076ac <_printf_common+0xac>
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ac:	3501      	adds	r5, #1
 80076ae:	e7c6      	b.n	800763e <_printf_common+0x3e>
 80076b0:	18e1      	adds	r1, r4, r3
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	2030      	movs	r0, #48	; 0x30
 80076b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ba:	4422      	add	r2, r4
 80076bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076c4:	3302      	adds	r3, #2
 80076c6:	e7c7      	b.n	8007658 <_printf_common+0x58>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4622      	mov	r2, r4
 80076cc:	4649      	mov	r1, r9
 80076ce:	4638      	mov	r0, r7
 80076d0:	47c0      	blx	r8
 80076d2:	3001      	adds	r0, #1
 80076d4:	d0e6      	beq.n	80076a4 <_printf_common+0xa4>
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7d9      	b.n	800768e <_printf_common+0x8e>
	...

080076dc <_printf_i>:
 80076dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	7e0f      	ldrb	r7, [r1, #24]
 80076e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076e4:	2f78      	cmp	r7, #120	; 0x78
 80076e6:	4691      	mov	r9, r2
 80076e8:	4680      	mov	r8, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	469a      	mov	sl, r3
 80076ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076f2:	d807      	bhi.n	8007704 <_printf_i+0x28>
 80076f4:	2f62      	cmp	r7, #98	; 0x62
 80076f6:	d80a      	bhi.n	800770e <_printf_i+0x32>
 80076f8:	2f00      	cmp	r7, #0
 80076fa:	f000 80d8 	beq.w	80078ae <_printf_i+0x1d2>
 80076fe:	2f58      	cmp	r7, #88	; 0x58
 8007700:	f000 80a3 	beq.w	800784a <_printf_i+0x16e>
 8007704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800770c:	e03a      	b.n	8007784 <_printf_i+0xa8>
 800770e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007712:	2b15      	cmp	r3, #21
 8007714:	d8f6      	bhi.n	8007704 <_printf_i+0x28>
 8007716:	a101      	add	r1, pc, #4	; (adr r1, 800771c <_printf_i+0x40>)
 8007718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800771c:	08007775 	.word	0x08007775
 8007720:	08007789 	.word	0x08007789
 8007724:	08007705 	.word	0x08007705
 8007728:	08007705 	.word	0x08007705
 800772c:	08007705 	.word	0x08007705
 8007730:	08007705 	.word	0x08007705
 8007734:	08007789 	.word	0x08007789
 8007738:	08007705 	.word	0x08007705
 800773c:	08007705 	.word	0x08007705
 8007740:	08007705 	.word	0x08007705
 8007744:	08007705 	.word	0x08007705
 8007748:	08007895 	.word	0x08007895
 800774c:	080077b9 	.word	0x080077b9
 8007750:	08007877 	.word	0x08007877
 8007754:	08007705 	.word	0x08007705
 8007758:	08007705 	.word	0x08007705
 800775c:	080078b7 	.word	0x080078b7
 8007760:	08007705 	.word	0x08007705
 8007764:	080077b9 	.word	0x080077b9
 8007768:	08007705 	.word	0x08007705
 800776c:	08007705 	.word	0x08007705
 8007770:	0800787f 	.word	0x0800787f
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	1d1a      	adds	r2, r3, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	602a      	str	r2, [r5, #0]
 800777c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007784:	2301      	movs	r3, #1
 8007786:	e0a3      	b.n	80078d0 <_printf_i+0x1f4>
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	6829      	ldr	r1, [r5, #0]
 800778c:	0606      	lsls	r6, r0, #24
 800778e:	f101 0304 	add.w	r3, r1, #4
 8007792:	d50a      	bpl.n	80077aa <_printf_i+0xce>
 8007794:	680e      	ldr	r6, [r1, #0]
 8007796:	602b      	str	r3, [r5, #0]
 8007798:	2e00      	cmp	r6, #0
 800779a:	da03      	bge.n	80077a4 <_printf_i+0xc8>
 800779c:	232d      	movs	r3, #45	; 0x2d
 800779e:	4276      	negs	r6, r6
 80077a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a4:	485e      	ldr	r0, [pc, #376]	; (8007920 <_printf_i+0x244>)
 80077a6:	230a      	movs	r3, #10
 80077a8:	e019      	b.n	80077de <_printf_i+0x102>
 80077aa:	680e      	ldr	r6, [r1, #0]
 80077ac:	602b      	str	r3, [r5, #0]
 80077ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077b2:	bf18      	it	ne
 80077b4:	b236      	sxthne	r6, r6
 80077b6:	e7ef      	b.n	8007798 <_printf_i+0xbc>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	6029      	str	r1, [r5, #0]
 80077c0:	0601      	lsls	r1, r0, #24
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0xec>
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0xf2>
 80077c8:	0646      	lsls	r6, r0, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0xe8>
 80077cc:	881e      	ldrh	r6, [r3, #0]
 80077ce:	4854      	ldr	r0, [pc, #336]	; (8007920 <_printf_i+0x244>)
 80077d0:	2f6f      	cmp	r7, #111	; 0x6f
 80077d2:	bf0c      	ite	eq
 80077d4:	2308      	moveq	r3, #8
 80077d6:	230a      	movne	r3, #10
 80077d8:	2100      	movs	r1, #0
 80077da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077de:	6865      	ldr	r5, [r4, #4]
 80077e0:	60a5      	str	r5, [r4, #8]
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	bfa2      	ittt	ge
 80077e6:	6821      	ldrge	r1, [r4, #0]
 80077e8:	f021 0104 	bicge.w	r1, r1, #4
 80077ec:	6021      	strge	r1, [r4, #0]
 80077ee:	b90e      	cbnz	r6, 80077f4 <_printf_i+0x118>
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	d04d      	beq.n	8007890 <_printf_i+0x1b4>
 80077f4:	4615      	mov	r5, r2
 80077f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80077fa:	fb03 6711 	mls	r7, r3, r1, r6
 80077fe:	5dc7      	ldrb	r7, [r0, r7]
 8007800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007804:	4637      	mov	r7, r6
 8007806:	42bb      	cmp	r3, r7
 8007808:	460e      	mov	r6, r1
 800780a:	d9f4      	bls.n	80077f6 <_printf_i+0x11a>
 800780c:	2b08      	cmp	r3, #8
 800780e:	d10b      	bne.n	8007828 <_printf_i+0x14c>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	07de      	lsls	r6, r3, #31
 8007814:	d508      	bpl.n	8007828 <_printf_i+0x14c>
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	6861      	ldr	r1, [r4, #4]
 800781a:	4299      	cmp	r1, r3
 800781c:	bfde      	ittt	le
 800781e:	2330      	movle	r3, #48	; 0x30
 8007820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007828:	1b52      	subs	r2, r2, r5
 800782a:	6122      	str	r2, [r4, #16]
 800782c:	f8cd a000 	str.w	sl, [sp]
 8007830:	464b      	mov	r3, r9
 8007832:	aa03      	add	r2, sp, #12
 8007834:	4621      	mov	r1, r4
 8007836:	4640      	mov	r0, r8
 8007838:	f7ff fee2 	bl	8007600 <_printf_common>
 800783c:	3001      	adds	r0, #1
 800783e:	d14c      	bne.n	80078da <_printf_i+0x1fe>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	b004      	add	sp, #16
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	4835      	ldr	r0, [pc, #212]	; (8007920 <_printf_i+0x244>)
 800784c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007850:	6829      	ldr	r1, [r5, #0]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	f851 6b04 	ldr.w	r6, [r1], #4
 8007858:	6029      	str	r1, [r5, #0]
 800785a:	061d      	lsls	r5, r3, #24
 800785c:	d514      	bpl.n	8007888 <_printf_i+0x1ac>
 800785e:	07df      	lsls	r7, r3, #31
 8007860:	bf44      	itt	mi
 8007862:	f043 0320 	orrmi.w	r3, r3, #32
 8007866:	6023      	strmi	r3, [r4, #0]
 8007868:	b91e      	cbnz	r6, 8007872 <_printf_i+0x196>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	f023 0320 	bic.w	r3, r3, #32
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	2310      	movs	r3, #16
 8007874:	e7b0      	b.n	80077d8 <_printf_i+0xfc>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	f043 0320 	orr.w	r3, r3, #32
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	2378      	movs	r3, #120	; 0x78
 8007880:	4828      	ldr	r0, [pc, #160]	; (8007924 <_printf_i+0x248>)
 8007882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007886:	e7e3      	b.n	8007850 <_printf_i+0x174>
 8007888:	0659      	lsls	r1, r3, #25
 800788a:	bf48      	it	mi
 800788c:	b2b6      	uxthmi	r6, r6
 800788e:	e7e6      	b.n	800785e <_printf_i+0x182>
 8007890:	4615      	mov	r5, r2
 8007892:	e7bb      	b.n	800780c <_printf_i+0x130>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	6826      	ldr	r6, [r4, #0]
 8007898:	6961      	ldr	r1, [r4, #20]
 800789a:	1d18      	adds	r0, r3, #4
 800789c:	6028      	str	r0, [r5, #0]
 800789e:	0635      	lsls	r5, r6, #24
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	d501      	bpl.n	80078a8 <_printf_i+0x1cc>
 80078a4:	6019      	str	r1, [r3, #0]
 80078a6:	e002      	b.n	80078ae <_printf_i+0x1d2>
 80078a8:	0670      	lsls	r0, r6, #25
 80078aa:	d5fb      	bpl.n	80078a4 <_printf_i+0x1c8>
 80078ac:	8019      	strh	r1, [r3, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	6123      	str	r3, [r4, #16]
 80078b2:	4615      	mov	r5, r2
 80078b4:	e7ba      	b.n	800782c <_printf_i+0x150>
 80078b6:	682b      	ldr	r3, [r5, #0]
 80078b8:	1d1a      	adds	r2, r3, #4
 80078ba:	602a      	str	r2, [r5, #0]
 80078bc:	681d      	ldr	r5, [r3, #0]
 80078be:	6862      	ldr	r2, [r4, #4]
 80078c0:	2100      	movs	r1, #0
 80078c2:	4628      	mov	r0, r5
 80078c4:	f7f8 fcac 	bl	8000220 <memchr>
 80078c8:	b108      	cbz	r0, 80078ce <_printf_i+0x1f2>
 80078ca:	1b40      	subs	r0, r0, r5
 80078cc:	6060      	str	r0, [r4, #4]
 80078ce:	6863      	ldr	r3, [r4, #4]
 80078d0:	6123      	str	r3, [r4, #16]
 80078d2:	2300      	movs	r3, #0
 80078d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d8:	e7a8      	b.n	800782c <_printf_i+0x150>
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	462a      	mov	r2, r5
 80078de:	4649      	mov	r1, r9
 80078e0:	4640      	mov	r0, r8
 80078e2:	47d0      	blx	sl
 80078e4:	3001      	adds	r0, #1
 80078e6:	d0ab      	beq.n	8007840 <_printf_i+0x164>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	079b      	lsls	r3, r3, #30
 80078ec:	d413      	bmi.n	8007916 <_printf_i+0x23a>
 80078ee:	68e0      	ldr	r0, [r4, #12]
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	4298      	cmp	r0, r3
 80078f4:	bfb8      	it	lt
 80078f6:	4618      	movlt	r0, r3
 80078f8:	e7a4      	b.n	8007844 <_printf_i+0x168>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4632      	mov	r2, r6
 80078fe:	4649      	mov	r1, r9
 8007900:	4640      	mov	r0, r8
 8007902:	47d0      	blx	sl
 8007904:	3001      	adds	r0, #1
 8007906:	d09b      	beq.n	8007840 <_printf_i+0x164>
 8007908:	3501      	adds	r5, #1
 800790a:	68e3      	ldr	r3, [r4, #12]
 800790c:	9903      	ldr	r1, [sp, #12]
 800790e:	1a5b      	subs	r3, r3, r1
 8007910:	42ab      	cmp	r3, r5
 8007912:	dcf2      	bgt.n	80078fa <_printf_i+0x21e>
 8007914:	e7eb      	b.n	80078ee <_printf_i+0x212>
 8007916:	2500      	movs	r5, #0
 8007918:	f104 0619 	add.w	r6, r4, #25
 800791c:	e7f5      	b.n	800790a <_printf_i+0x22e>
 800791e:	bf00      	nop
 8007920:	08009ed6 	.word	0x08009ed6
 8007924:	08009ee7 	.word	0x08009ee7

08007928 <siprintf>:
 8007928:	b40e      	push	{r1, r2, r3}
 800792a:	b500      	push	{lr}
 800792c:	b09c      	sub	sp, #112	; 0x70
 800792e:	ab1d      	add	r3, sp, #116	; 0x74
 8007930:	9002      	str	r0, [sp, #8]
 8007932:	9006      	str	r0, [sp, #24]
 8007934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007938:	4809      	ldr	r0, [pc, #36]	; (8007960 <siprintf+0x38>)
 800793a:	9107      	str	r1, [sp, #28]
 800793c:	9104      	str	r1, [sp, #16]
 800793e:	4909      	ldr	r1, [pc, #36]	; (8007964 <siprintf+0x3c>)
 8007940:	f853 2b04 	ldr.w	r2, [r3], #4
 8007944:	9105      	str	r1, [sp, #20]
 8007946:	6800      	ldr	r0, [r0, #0]
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	a902      	add	r1, sp, #8
 800794c:	f001 fb76 	bl	800903c <_svfiprintf_r>
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	b01c      	add	sp, #112	; 0x70
 8007958:	f85d eb04 	ldr.w	lr, [sp], #4
 800795c:	b003      	add	sp, #12
 800795e:	4770      	bx	lr
 8007960:	20000010 	.word	0x20000010
 8007964:	ffff0208 	.word	0xffff0208

08007968 <quorem>:
 8007968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	6903      	ldr	r3, [r0, #16]
 800796e:	690c      	ldr	r4, [r1, #16]
 8007970:	42a3      	cmp	r3, r4
 8007972:	4607      	mov	r7, r0
 8007974:	f2c0 8081 	blt.w	8007a7a <quorem+0x112>
 8007978:	3c01      	subs	r4, #1
 800797a:	f101 0814 	add.w	r8, r1, #20
 800797e:	f100 0514 	add.w	r5, r0, #20
 8007982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800798c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007990:	3301      	adds	r3, #1
 8007992:	429a      	cmp	r2, r3
 8007994:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007998:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800799c:	fbb2 f6f3 	udiv	r6, r2, r3
 80079a0:	d331      	bcc.n	8007a06 <quorem+0x9e>
 80079a2:	f04f 0e00 	mov.w	lr, #0
 80079a6:	4640      	mov	r0, r8
 80079a8:	46ac      	mov	ip, r5
 80079aa:	46f2      	mov	sl, lr
 80079ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80079b0:	b293      	uxth	r3, r2
 80079b2:	fb06 e303 	mla	r3, r6, r3, lr
 80079b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	ebaa 0303 	sub.w	r3, sl, r3
 80079c0:	f8dc a000 	ldr.w	sl, [ip]
 80079c4:	0c12      	lsrs	r2, r2, #16
 80079c6:	fa13 f38a 	uxtah	r3, r3, sl
 80079ca:	fb06 e202 	mla	r2, r6, r2, lr
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079d6:	b292      	uxth	r2, r2
 80079d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80079e4:	4581      	cmp	r9, r0
 80079e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ea:	f84c 3b04 	str.w	r3, [ip], #4
 80079ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079f2:	d2db      	bcs.n	80079ac <quorem+0x44>
 80079f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80079f8:	b92b      	cbnz	r3, 8007a06 <quorem+0x9e>
 80079fa:	9b01      	ldr	r3, [sp, #4]
 80079fc:	3b04      	subs	r3, #4
 80079fe:	429d      	cmp	r5, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	d32e      	bcc.n	8007a62 <quorem+0xfa>
 8007a04:	613c      	str	r4, [r7, #16]
 8007a06:	4638      	mov	r0, r7
 8007a08:	f001 f8c4 	bl	8008b94 <__mcmp>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	db24      	blt.n	8007a5a <quorem+0xf2>
 8007a10:	3601      	adds	r6, #1
 8007a12:	4628      	mov	r0, r5
 8007a14:	f04f 0c00 	mov.w	ip, #0
 8007a18:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a1c:	f8d0 e000 	ldr.w	lr, [r0]
 8007a20:	b293      	uxth	r3, r2
 8007a22:	ebac 0303 	sub.w	r3, ip, r3
 8007a26:	0c12      	lsrs	r2, r2, #16
 8007a28:	fa13 f38e 	uxtah	r3, r3, lr
 8007a2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a3a:	45c1      	cmp	r9, r8
 8007a3c:	f840 3b04 	str.w	r3, [r0], #4
 8007a40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a44:	d2e8      	bcs.n	8007a18 <quorem+0xb0>
 8007a46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4e:	b922      	cbnz	r2, 8007a5a <quorem+0xf2>
 8007a50:	3b04      	subs	r3, #4
 8007a52:	429d      	cmp	r5, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	d30a      	bcc.n	8007a6e <quorem+0x106>
 8007a58:	613c      	str	r4, [r7, #16]
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	b003      	add	sp, #12
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	3b04      	subs	r3, #4
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	d1cc      	bne.n	8007a04 <quorem+0x9c>
 8007a6a:	3c01      	subs	r4, #1
 8007a6c:	e7c7      	b.n	80079fe <quorem+0x96>
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	3b04      	subs	r3, #4
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d1f0      	bne.n	8007a58 <quorem+0xf0>
 8007a76:	3c01      	subs	r4, #1
 8007a78:	e7eb      	b.n	8007a52 <quorem+0xea>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	e7ee      	b.n	8007a5c <quorem+0xf4>
	...

08007a80 <_dtoa_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	ed2d 8b04 	vpush	{d8-d9}
 8007a88:	ec57 6b10 	vmov	r6, r7, d0
 8007a8c:	b093      	sub	sp, #76	; 0x4c
 8007a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a94:	9106      	str	r1, [sp, #24]
 8007a96:	ee10 aa10 	vmov	sl, s0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8007aa0:	46bb      	mov	fp, r7
 8007aa2:	b975      	cbnz	r5, 8007ac2 <_dtoa_r+0x42>
 8007aa4:	2010      	movs	r0, #16
 8007aa6:	f000 fddd 	bl	8008664 <malloc>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	6260      	str	r0, [r4, #36]	; 0x24
 8007aae:	b920      	cbnz	r0, 8007aba <_dtoa_r+0x3a>
 8007ab0:	4ba7      	ldr	r3, [pc, #668]	; (8007d50 <_dtoa_r+0x2d0>)
 8007ab2:	21ea      	movs	r1, #234	; 0xea
 8007ab4:	48a7      	ldr	r0, [pc, #668]	; (8007d54 <_dtoa_r+0x2d4>)
 8007ab6:	f001 fbd1 	bl	800925c <__assert_func>
 8007aba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007abe:	6005      	str	r5, [r0, #0]
 8007ac0:	60c5      	str	r5, [r0, #12]
 8007ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac4:	6819      	ldr	r1, [r3, #0]
 8007ac6:	b151      	cbz	r1, 8007ade <_dtoa_r+0x5e>
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	604a      	str	r2, [r1, #4]
 8007acc:	2301      	movs	r3, #1
 8007ace:	4093      	lsls	r3, r2
 8007ad0:	608b      	str	r3, [r1, #8]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fe1c 	bl	8008710 <_Bfree>
 8007ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	1e3b      	subs	r3, r7, #0
 8007ae0:	bfaa      	itet	ge
 8007ae2:	2300      	movge	r3, #0
 8007ae4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ae8:	f8c8 3000 	strge.w	r3, [r8]
 8007aec:	4b9a      	ldr	r3, [pc, #616]	; (8007d58 <_dtoa_r+0x2d8>)
 8007aee:	bfbc      	itt	lt
 8007af0:	2201      	movlt	r2, #1
 8007af2:	f8c8 2000 	strlt.w	r2, [r8]
 8007af6:	ea33 030b 	bics.w	r3, r3, fp
 8007afa:	d11b      	bne.n	8007b34 <_dtoa_r+0xb4>
 8007afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007afe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b08:	4333      	orrs	r3, r6
 8007b0a:	f000 8592 	beq.w	8008632 <_dtoa_r+0xbb2>
 8007b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b10:	b963      	cbnz	r3, 8007b2c <_dtoa_r+0xac>
 8007b12:	4b92      	ldr	r3, [pc, #584]	; (8007d5c <_dtoa_r+0x2dc>)
 8007b14:	e022      	b.n	8007b5c <_dtoa_r+0xdc>
 8007b16:	4b92      	ldr	r3, [pc, #584]	; (8007d60 <_dtoa_r+0x2e0>)
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	9801      	ldr	r0, [sp, #4]
 8007b22:	b013      	add	sp, #76	; 0x4c
 8007b24:	ecbd 8b04 	vpop	{d8-d9}
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	4b8b      	ldr	r3, [pc, #556]	; (8007d5c <_dtoa_r+0x2dc>)
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	3303      	adds	r3, #3
 8007b32:	e7f3      	b.n	8007b1c <_dtoa_r+0x9c>
 8007b34:	2200      	movs	r2, #0
 8007b36:	2300      	movs	r3, #0
 8007b38:	4650      	mov	r0, sl
 8007b3a:	4659      	mov	r1, fp
 8007b3c:	f7f8 ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 8007b40:	ec4b ab19 	vmov	d9, sl, fp
 8007b44:	4680      	mov	r8, r0
 8007b46:	b158      	cbz	r0, 8007b60 <_dtoa_r+0xe0>
 8007b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 856b 	beq.w	800862c <_dtoa_r+0xbac>
 8007b56:	4883      	ldr	r0, [pc, #524]	; (8007d64 <_dtoa_r+0x2e4>)
 8007b58:	6018      	str	r0, [r3, #0]
 8007b5a:	1e43      	subs	r3, r0, #1
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	e7df      	b.n	8007b20 <_dtoa_r+0xa0>
 8007b60:	ec4b ab10 	vmov	d0, sl, fp
 8007b64:	aa10      	add	r2, sp, #64	; 0x40
 8007b66:	a911      	add	r1, sp, #68	; 0x44
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f001 f8b9 	bl	8008ce0 <__d2b>
 8007b6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b72:	ee08 0a10 	vmov	s16, r0
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	f000 8084 	beq.w	8007c84 <_dtoa_r+0x204>
 8007b7c:	ee19 3a90 	vmov	r3, s19
 8007b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b88:	4656      	mov	r6, sl
 8007b8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b96:	4b74      	ldr	r3, [pc, #464]	; (8007d68 <_dtoa_r+0x2e8>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f7f8 fb93 	bl	80002c8 <__aeabi_dsub>
 8007ba2:	a365      	add	r3, pc, #404	; (adr r3, 8007d38 <_dtoa_r+0x2b8>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fd46 	bl	8000638 <__aeabi_dmul>
 8007bac:	a364      	add	r3, pc, #400	; (adr r3, 8007d40 <_dtoa_r+0x2c0>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fb8b 	bl	80002cc <__adddf3>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	460f      	mov	r7, r1
 8007bbc:	f7f8 fcd2 	bl	8000564 <__aeabi_i2d>
 8007bc0:	a361      	add	r3, pc, #388	; (adr r3, 8007d48 <_dtoa_r+0x2c8>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f7f8 fd37 	bl	8000638 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4630      	mov	r0, r6
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	f7f8 fb7b 	bl	80002cc <__adddf3>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	460f      	mov	r7, r1
 8007bda:	f7f8 ffdd 	bl	8000b98 <__aeabi_d2iz>
 8007bde:	2200      	movs	r2, #0
 8007be0:	9000      	str	r0, [sp, #0]
 8007be2:	2300      	movs	r3, #0
 8007be4:	4630      	mov	r0, r6
 8007be6:	4639      	mov	r1, r7
 8007be8:	f7f8 ff98 	bl	8000b1c <__aeabi_dcmplt>
 8007bec:	b150      	cbz	r0, 8007c04 <_dtoa_r+0x184>
 8007bee:	9800      	ldr	r0, [sp, #0]
 8007bf0:	f7f8 fcb8 	bl	8000564 <__aeabi_i2d>
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	f7f8 ff86 	bl	8000b08 <__aeabi_dcmpeq>
 8007bfc:	b910      	cbnz	r0, 8007c04 <_dtoa_r+0x184>
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	2b16      	cmp	r3, #22
 8007c08:	d85a      	bhi.n	8007cc0 <_dtoa_r+0x240>
 8007c0a:	9a00      	ldr	r2, [sp, #0]
 8007c0c:	4b57      	ldr	r3, [pc, #348]	; (8007d6c <_dtoa_r+0x2ec>)
 8007c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	ec51 0b19 	vmov	r0, r1, d9
 8007c1a:	f7f8 ff7f 	bl	8000b1c <__aeabi_dcmplt>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d050      	beq.n	8007cc4 <_dtoa_r+0x244>
 8007c22:	9b00      	ldr	r3, [sp, #0]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c2e:	1b5d      	subs	r5, r3, r5
 8007c30:	1e6b      	subs	r3, r5, #1
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	bf45      	ittet	mi
 8007c36:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c3a:	9304      	strmi	r3, [sp, #16]
 8007c3c:	2300      	movpl	r3, #0
 8007c3e:	2300      	movmi	r3, #0
 8007c40:	bf4c      	ite	mi
 8007c42:	9305      	strmi	r3, [sp, #20]
 8007c44:	9304      	strpl	r3, [sp, #16]
 8007c46:	9b00      	ldr	r3, [sp, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	db3d      	blt.n	8007cc8 <_dtoa_r+0x248>
 8007c4c:	9b05      	ldr	r3, [sp, #20]
 8007c4e:	9a00      	ldr	r2, [sp, #0]
 8007c50:	920a      	str	r2, [sp, #40]	; 0x28
 8007c52:	4413      	add	r3, r2
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9307      	str	r3, [sp, #28]
 8007c5a:	9b06      	ldr	r3, [sp, #24]
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	f200 8089 	bhi.w	8007d74 <_dtoa_r+0x2f4>
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	bfc4      	itt	gt
 8007c66:	3b04      	subgt	r3, #4
 8007c68:	9306      	strgt	r3, [sp, #24]
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c70:	bfcc      	ite	gt
 8007c72:	2500      	movgt	r5, #0
 8007c74:	2501      	movle	r5, #1
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	f200 8087 	bhi.w	8007d8a <_dtoa_r+0x30a>
 8007c7c:	e8df f003 	tbb	[pc, r3]
 8007c80:	59383a2d 	.word	0x59383a2d
 8007c84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c88:	441d      	add	r5, r3
 8007c8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	bfc1      	itttt	gt
 8007c92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ca2:	bfda      	itte	le
 8007ca4:	f1c3 0320 	rsble	r3, r3, #32
 8007ca8:	fa06 f003 	lslle.w	r0, r6, r3
 8007cac:	4318      	orrgt	r0, r3
 8007cae:	f7f8 fc49 	bl	8000544 <__aeabi_ui2d>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cba:	3d01      	subs	r5, #1
 8007cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8007cbe:	e76a      	b.n	8007b96 <_dtoa_r+0x116>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e7b2      	b.n	8007c2a <_dtoa_r+0x1aa>
 8007cc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007cc6:	e7b1      	b.n	8007c2c <_dtoa_r+0x1ac>
 8007cc8:	9b04      	ldr	r3, [sp, #16]
 8007cca:	9a00      	ldr	r2, [sp, #0]
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	4253      	negs	r3, r2
 8007cd2:	9307      	str	r3, [sp, #28]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd8:	e7bf      	b.n	8007c5a <_dtoa_r+0x1da>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9308      	str	r3, [sp, #32]
 8007cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc55      	bgt.n	8007d90 <_dtoa_r+0x310>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cea:	461a      	mov	r2, r3
 8007cec:	9209      	str	r2, [sp, #36]	; 0x24
 8007cee:	e00c      	b.n	8007d0a <_dtoa_r+0x28a>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e7f3      	b.n	8007cdc <_dtoa_r+0x25c>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cf8:	9308      	str	r3, [sp, #32]
 8007cfa:	9b00      	ldr	r3, [sp, #0]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	3301      	adds	r3, #1
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	bfb8      	it	lt
 8007d08:	2301      	movlt	r3, #1
 8007d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	6042      	str	r2, [r0, #4]
 8007d10:	2204      	movs	r2, #4
 8007d12:	f102 0614 	add.w	r6, r2, #20
 8007d16:	429e      	cmp	r6, r3
 8007d18:	6841      	ldr	r1, [r0, #4]
 8007d1a:	d93d      	bls.n	8007d98 <_dtoa_r+0x318>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fcb7 	bl	8008690 <_Balloc>
 8007d22:	9001      	str	r0, [sp, #4]
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d13b      	bne.n	8007da0 <_dtoa_r+0x320>
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <_dtoa_r+0x2f0>)
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d30:	e6c0      	b.n	8007ab4 <_dtoa_r+0x34>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e7df      	b.n	8007cf6 <_dtoa_r+0x276>
 8007d36:	bf00      	nop
 8007d38:	636f4361 	.word	0x636f4361
 8007d3c:	3fd287a7 	.word	0x3fd287a7
 8007d40:	8b60c8b3 	.word	0x8b60c8b3
 8007d44:	3fc68a28 	.word	0x3fc68a28
 8007d48:	509f79fb 	.word	0x509f79fb
 8007d4c:	3fd34413 	.word	0x3fd34413
 8007d50:	08009f05 	.word	0x08009f05
 8007d54:	08009f1c 	.word	0x08009f1c
 8007d58:	7ff00000 	.word	0x7ff00000
 8007d5c:	08009f01 	.word	0x08009f01
 8007d60:	08009ef8 	.word	0x08009ef8
 8007d64:	08009ed5 	.word	0x08009ed5
 8007d68:	3ff80000 	.word	0x3ff80000
 8007d6c:	0800a010 	.word	0x0800a010
 8007d70:	08009f77 	.word	0x08009f77
 8007d74:	2501      	movs	r5, #1
 8007d76:	2300      	movs	r3, #0
 8007d78:	9306      	str	r3, [sp, #24]
 8007d7a:	9508      	str	r5, [sp, #32]
 8007d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	2312      	movs	r3, #18
 8007d88:	e7b0      	b.n	8007cec <_dtoa_r+0x26c>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9308      	str	r3, [sp, #32]
 8007d8e:	e7f5      	b.n	8007d7c <_dtoa_r+0x2fc>
 8007d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d96:	e7b8      	b.n	8007d0a <_dtoa_r+0x28a>
 8007d98:	3101      	adds	r1, #1
 8007d9a:	6041      	str	r1, [r0, #4]
 8007d9c:	0052      	lsls	r2, r2, #1
 8007d9e:	e7b8      	b.n	8007d12 <_dtoa_r+0x292>
 8007da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da2:	9a01      	ldr	r2, [sp, #4]
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	2b0e      	cmp	r3, #14
 8007daa:	f200 809d 	bhi.w	8007ee8 <_dtoa_r+0x468>
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f000 809a 	beq.w	8007ee8 <_dtoa_r+0x468>
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd32      	ble.n	8007e20 <_dtoa_r+0x3a0>
 8007dba:	4ab7      	ldr	r2, [pc, #732]	; (8008098 <_dtoa_r+0x618>)
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	05d8      	lsls	r0, r3, #23
 8007dcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007dd0:	d516      	bpl.n	8007e00 <_dtoa_r+0x380>
 8007dd2:	4bb2      	ldr	r3, [pc, #712]	; (800809c <_dtoa_r+0x61c>)
 8007dd4:	ec51 0b19 	vmov	r0, r1, d9
 8007dd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ddc:	f7f8 fd56 	bl	800088c <__aeabi_ddiv>
 8007de0:	f007 070f 	and.w	r7, r7, #15
 8007de4:	4682      	mov	sl, r0
 8007de6:	468b      	mov	fp, r1
 8007de8:	2503      	movs	r5, #3
 8007dea:	4eac      	ldr	r6, [pc, #688]	; (800809c <_dtoa_r+0x61c>)
 8007dec:	b957      	cbnz	r7, 8007e04 <_dtoa_r+0x384>
 8007dee:	4642      	mov	r2, r8
 8007df0:	464b      	mov	r3, r9
 8007df2:	4650      	mov	r0, sl
 8007df4:	4659      	mov	r1, fp
 8007df6:	f7f8 fd49 	bl	800088c <__aeabi_ddiv>
 8007dfa:	4682      	mov	sl, r0
 8007dfc:	468b      	mov	fp, r1
 8007dfe:	e028      	b.n	8007e52 <_dtoa_r+0x3d2>
 8007e00:	2502      	movs	r5, #2
 8007e02:	e7f2      	b.n	8007dea <_dtoa_r+0x36a>
 8007e04:	07f9      	lsls	r1, r7, #31
 8007e06:	d508      	bpl.n	8007e1a <_dtoa_r+0x39a>
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e10:	f7f8 fc12 	bl	8000638 <__aeabi_dmul>
 8007e14:	3501      	adds	r5, #1
 8007e16:	4680      	mov	r8, r0
 8007e18:	4689      	mov	r9, r1
 8007e1a:	107f      	asrs	r7, r7, #1
 8007e1c:	3608      	adds	r6, #8
 8007e1e:	e7e5      	b.n	8007dec <_dtoa_r+0x36c>
 8007e20:	f000 809b 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	4f9d      	ldr	r7, [pc, #628]	; (800809c <_dtoa_r+0x61c>)
 8007e28:	425e      	negs	r6, r3
 8007e2a:	4b9b      	ldr	r3, [pc, #620]	; (8008098 <_dtoa_r+0x618>)
 8007e2c:	f006 020f 	and.w	r2, r6, #15
 8007e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	ec51 0b19 	vmov	r0, r1, d9
 8007e3c:	f7f8 fbfc 	bl	8000638 <__aeabi_dmul>
 8007e40:	1136      	asrs	r6, r6, #4
 8007e42:	4682      	mov	sl, r0
 8007e44:	468b      	mov	fp, r1
 8007e46:	2300      	movs	r3, #0
 8007e48:	2502      	movs	r5, #2
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	d17a      	bne.n	8007f44 <_dtoa_r+0x4c4>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1d3      	bne.n	8007dfa <_dtoa_r+0x37a>
 8007e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 8082 	beq.w	8007f5e <_dtoa_r+0x4de>
 8007e5a:	4b91      	ldr	r3, [pc, #580]	; (80080a0 <_dtoa_r+0x620>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fe5b 	bl	8000b1c <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d079      	beq.n	8007f5e <_dtoa_r+0x4de>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d076      	beq.n	8007f5e <_dtoa_r+0x4de>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dd36      	ble.n	8007ee4 <_dtoa_r+0x464>
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	4650      	mov	r0, sl
 8007e7a:	4659      	mov	r1, fp
 8007e7c:	1e5f      	subs	r7, r3, #1
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4b88      	ldr	r3, [pc, #544]	; (80080a4 <_dtoa_r+0x624>)
 8007e82:	f7f8 fbd9 	bl	8000638 <__aeabi_dmul>
 8007e86:	9e02      	ldr	r6, [sp, #8]
 8007e88:	4682      	mov	sl, r0
 8007e8a:	468b      	mov	fp, r1
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f7f8 fb68 	bl	8000564 <__aeabi_i2d>
 8007e94:	4652      	mov	r2, sl
 8007e96:	465b      	mov	r3, fp
 8007e98:	f7f8 fbce 	bl	8000638 <__aeabi_dmul>
 8007e9c:	4b82      	ldr	r3, [pc, #520]	; (80080a8 <_dtoa_r+0x628>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f7f8 fa14 	bl	80002cc <__adddf3>
 8007ea4:	46d0      	mov	r8, sl
 8007ea6:	46d9      	mov	r9, fp
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d158      	bne.n	8007f64 <_dtoa_r+0x4e4>
 8007eb2:	4b7e      	ldr	r3, [pc, #504]	; (80080ac <_dtoa_r+0x62c>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f7f8 fa05 	bl	80002c8 <__aeabi_dsub>
 8007ebe:	4652      	mov	r2, sl
 8007ec0:	465b      	mov	r3, fp
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	4689      	mov	r9, r1
 8007ec6:	f7f8 fe47 	bl	8000b58 <__aeabi_dcmpgt>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f040 8295 	bne.w	80083fa <_dtoa_r+0x97a>
 8007ed0:	4652      	mov	r2, sl
 8007ed2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4649      	mov	r1, r9
 8007eda:	f7f8 fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f040 8289 	bne.w	80083f6 <_dtoa_r+0x976>
 8007ee4:	ec5b ab19 	vmov	sl, fp, d9
 8007ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f2c0 8148 	blt.w	8008180 <_dtoa_r+0x700>
 8007ef0:	9a00      	ldr	r2, [sp, #0]
 8007ef2:	2a0e      	cmp	r2, #14
 8007ef4:	f300 8144 	bgt.w	8008180 <_dtoa_r+0x700>
 8007ef8:	4b67      	ldr	r3, [pc, #412]	; (8008098 <_dtoa_r+0x618>)
 8007efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007efe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f280 80d5 	bge.w	80080b4 <_dtoa_r+0x634>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f300 80d1 	bgt.w	80080b4 <_dtoa_r+0x634>
 8007f12:	f040 826f 	bne.w	80083f4 <_dtoa_r+0x974>
 8007f16:	4b65      	ldr	r3, [pc, #404]	; (80080ac <_dtoa_r+0x62c>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	f7f8 fb8b 	bl	8000638 <__aeabi_dmul>
 8007f22:	4652      	mov	r2, sl
 8007f24:	465b      	mov	r3, fp
 8007f26:	f7f8 fe0d 	bl	8000b44 <__aeabi_dcmpge>
 8007f2a:	9e03      	ldr	r6, [sp, #12]
 8007f2c:	4637      	mov	r7, r6
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f040 8245 	bne.w	80083be <_dtoa_r+0x93e>
 8007f34:	9d01      	ldr	r5, [sp, #4]
 8007f36:	2331      	movs	r3, #49	; 0x31
 8007f38:	f805 3b01 	strb.w	r3, [r5], #1
 8007f3c:	9b00      	ldr	r3, [sp, #0]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	e240      	b.n	80083c6 <_dtoa_r+0x946>
 8007f44:	07f2      	lsls	r2, r6, #31
 8007f46:	d505      	bpl.n	8007f54 <_dtoa_r+0x4d4>
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	f7f8 fb74 	bl	8000638 <__aeabi_dmul>
 8007f50:	3501      	adds	r5, #1
 8007f52:	2301      	movs	r3, #1
 8007f54:	1076      	asrs	r6, r6, #1
 8007f56:	3708      	adds	r7, #8
 8007f58:	e777      	b.n	8007e4a <_dtoa_r+0x3ca>
 8007f5a:	2502      	movs	r5, #2
 8007f5c:	e779      	b.n	8007e52 <_dtoa_r+0x3d2>
 8007f5e:	9f00      	ldr	r7, [sp, #0]
 8007f60:	9e03      	ldr	r6, [sp, #12]
 8007f62:	e794      	b.n	8007e8e <_dtoa_r+0x40e>
 8007f64:	9901      	ldr	r1, [sp, #4]
 8007f66:	4b4c      	ldr	r3, [pc, #304]	; (8008098 <_dtoa_r+0x618>)
 8007f68:	4431      	add	r1, r6
 8007f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f6c:	9908      	ldr	r1, [sp, #32]
 8007f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d043      	beq.n	8008002 <_dtoa_r+0x582>
 8007f7a:	494d      	ldr	r1, [pc, #308]	; (80080b0 <_dtoa_r+0x630>)
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f7f8 fc85 	bl	800088c <__aeabi_ddiv>
 8007f82:	4652      	mov	r2, sl
 8007f84:	465b      	mov	r3, fp
 8007f86:	f7f8 f99f 	bl	80002c8 <__aeabi_dsub>
 8007f8a:	9d01      	ldr	r5, [sp, #4]
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	468b      	mov	fp, r1
 8007f90:	4649      	mov	r1, r9
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7f8 fe00 	bl	8000b98 <__aeabi_d2iz>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	f7f8 fae3 	bl	8000564 <__aeabi_i2d>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	f7f8 f98f 	bl	80002c8 <__aeabi_dsub>
 8007faa:	3630      	adds	r6, #48	; 0x30
 8007fac:	f805 6b01 	strb.w	r6, [r5], #1
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	f7f8 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d163      	bne.n	8008088 <_dtoa_r+0x608>
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	4936      	ldr	r1, [pc, #216]	; (80080a0 <_dtoa_r+0x620>)
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f7f8 f97e 	bl	80002c8 <__aeabi_dsub>
 8007fcc:	4652      	mov	r2, sl
 8007fce:	465b      	mov	r3, fp
 8007fd0:	f7f8 fda4 	bl	8000b1c <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f040 80b5 	bne.w	8008144 <_dtoa_r+0x6c4>
 8007fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fdc:	429d      	cmp	r5, r3
 8007fde:	d081      	beq.n	8007ee4 <_dtoa_r+0x464>
 8007fe0:	4b30      	ldr	r3, [pc, #192]	; (80080a4 <_dtoa_r+0x624>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	f7f8 fb26 	bl	8000638 <__aeabi_dmul>
 8007fec:	4b2d      	ldr	r3, [pc, #180]	; (80080a4 <_dtoa_r+0x624>)
 8007fee:	4682      	mov	sl, r0
 8007ff0:	468b      	mov	fp, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f7f8 fb1e 	bl	8000638 <__aeabi_dmul>
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	e7c6      	b.n	8007f90 <_dtoa_r+0x510>
 8008002:	4650      	mov	r0, sl
 8008004:	4659      	mov	r1, fp
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800c:	9d01      	ldr	r5, [sp, #4]
 800800e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008010:	4682      	mov	sl, r0
 8008012:	468b      	mov	fp, r1
 8008014:	4649      	mov	r1, r9
 8008016:	4640      	mov	r0, r8
 8008018:	f7f8 fdbe 	bl	8000b98 <__aeabi_d2iz>
 800801c:	4606      	mov	r6, r0
 800801e:	f7f8 faa1 	bl	8000564 <__aeabi_i2d>
 8008022:	3630      	adds	r6, #48	; 0x30
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	f7f8 f94c 	bl	80002c8 <__aeabi_dsub>
 8008030:	f805 6b01 	strb.w	r6, [r5], #1
 8008034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008036:	429d      	cmp	r5, r3
 8008038:	4680      	mov	r8, r0
 800803a:	4689      	mov	r9, r1
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	d124      	bne.n	800808c <_dtoa_r+0x60c>
 8008042:	4b1b      	ldr	r3, [pc, #108]	; (80080b0 <_dtoa_r+0x630>)
 8008044:	4650      	mov	r0, sl
 8008046:	4659      	mov	r1, fp
 8008048:	f7f8 f940 	bl	80002cc <__adddf3>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 fd80 	bl	8000b58 <__aeabi_dcmpgt>
 8008058:	2800      	cmp	r0, #0
 800805a:	d173      	bne.n	8008144 <_dtoa_r+0x6c4>
 800805c:	4652      	mov	r2, sl
 800805e:	465b      	mov	r3, fp
 8008060:	4913      	ldr	r1, [pc, #76]	; (80080b0 <_dtoa_r+0x630>)
 8008062:	2000      	movs	r0, #0
 8008064:	f7f8 f930 	bl	80002c8 <__aeabi_dsub>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4640      	mov	r0, r8
 800806e:	4649      	mov	r1, r9
 8008070:	f7f8 fd54 	bl	8000b1c <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	f43f af35 	beq.w	8007ee4 <_dtoa_r+0x464>
 800807a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800807c:	1e6b      	subs	r3, r5, #1
 800807e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008080:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008084:	2b30      	cmp	r3, #48	; 0x30
 8008086:	d0f8      	beq.n	800807a <_dtoa_r+0x5fa>
 8008088:	9700      	str	r7, [sp, #0]
 800808a:	e049      	b.n	8008120 <_dtoa_r+0x6a0>
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <_dtoa_r+0x624>)
 800808e:	f7f8 fad3 	bl	8000638 <__aeabi_dmul>
 8008092:	4680      	mov	r8, r0
 8008094:	4689      	mov	r9, r1
 8008096:	e7bd      	b.n	8008014 <_dtoa_r+0x594>
 8008098:	0800a010 	.word	0x0800a010
 800809c:	08009fe8 	.word	0x08009fe8
 80080a0:	3ff00000 	.word	0x3ff00000
 80080a4:	40240000 	.word	0x40240000
 80080a8:	401c0000 	.word	0x401c0000
 80080ac:	40140000 	.word	0x40140000
 80080b0:	3fe00000 	.word	0x3fe00000
 80080b4:	9d01      	ldr	r5, [sp, #4]
 80080b6:	4656      	mov	r6, sl
 80080b8:	465f      	mov	r7, fp
 80080ba:	4642      	mov	r2, r8
 80080bc:	464b      	mov	r3, r9
 80080be:	4630      	mov	r0, r6
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 fbe3 	bl	800088c <__aeabi_ddiv>
 80080c6:	f7f8 fd67 	bl	8000b98 <__aeabi_d2iz>
 80080ca:	4682      	mov	sl, r0
 80080cc:	f7f8 fa4a 	bl	8000564 <__aeabi_i2d>
 80080d0:	4642      	mov	r2, r8
 80080d2:	464b      	mov	r3, r9
 80080d4:	f7f8 fab0 	bl	8000638 <__aeabi_dmul>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80080e4:	f7f8 f8f0 	bl	80002c8 <__aeabi_dsub>
 80080e8:	f805 6b01 	strb.w	r6, [r5], #1
 80080ec:	9e01      	ldr	r6, [sp, #4]
 80080ee:	9f03      	ldr	r7, [sp, #12]
 80080f0:	1bae      	subs	r6, r5, r6
 80080f2:	42b7      	cmp	r7, r6
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	d135      	bne.n	8008166 <_dtoa_r+0x6e6>
 80080fa:	f7f8 f8e7 	bl	80002cc <__adddf3>
 80080fe:	4642      	mov	r2, r8
 8008100:	464b      	mov	r3, r9
 8008102:	4606      	mov	r6, r0
 8008104:	460f      	mov	r7, r1
 8008106:	f7f8 fd27 	bl	8000b58 <__aeabi_dcmpgt>
 800810a:	b9d0      	cbnz	r0, 8008142 <_dtoa_r+0x6c2>
 800810c:	4642      	mov	r2, r8
 800810e:	464b      	mov	r3, r9
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8008118:	b110      	cbz	r0, 8008120 <_dtoa_r+0x6a0>
 800811a:	f01a 0f01 	tst.w	sl, #1
 800811e:	d110      	bne.n	8008142 <_dtoa_r+0x6c2>
 8008120:	4620      	mov	r0, r4
 8008122:	ee18 1a10 	vmov	r1, s16
 8008126:	f000 faf3 	bl	8008710 <_Bfree>
 800812a:	2300      	movs	r3, #0
 800812c:	9800      	ldr	r0, [sp, #0]
 800812e:	702b      	strb	r3, [r5, #0]
 8008130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008132:	3001      	adds	r0, #1
 8008134:	6018      	str	r0, [r3, #0]
 8008136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008138:	2b00      	cmp	r3, #0
 800813a:	f43f acf1 	beq.w	8007b20 <_dtoa_r+0xa0>
 800813e:	601d      	str	r5, [r3, #0]
 8008140:	e4ee      	b.n	8007b20 <_dtoa_r+0xa0>
 8008142:	9f00      	ldr	r7, [sp, #0]
 8008144:	462b      	mov	r3, r5
 8008146:	461d      	mov	r5, r3
 8008148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814c:	2a39      	cmp	r2, #57	; 0x39
 800814e:	d106      	bne.n	800815e <_dtoa_r+0x6de>
 8008150:	9a01      	ldr	r2, [sp, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d1f7      	bne.n	8008146 <_dtoa_r+0x6c6>
 8008156:	9901      	ldr	r1, [sp, #4]
 8008158:	2230      	movs	r2, #48	; 0x30
 800815a:	3701      	adds	r7, #1
 800815c:	700a      	strb	r2, [r1, #0]
 800815e:	781a      	ldrb	r2, [r3, #0]
 8008160:	3201      	adds	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e790      	b.n	8008088 <_dtoa_r+0x608>
 8008166:	4ba6      	ldr	r3, [pc, #664]	; (8008400 <_dtoa_r+0x980>)
 8008168:	2200      	movs	r2, #0
 800816a:	f7f8 fa65 	bl	8000638 <__aeabi_dmul>
 800816e:	2200      	movs	r2, #0
 8008170:	2300      	movs	r3, #0
 8008172:	4606      	mov	r6, r0
 8008174:	460f      	mov	r7, r1
 8008176:	f7f8 fcc7 	bl	8000b08 <__aeabi_dcmpeq>
 800817a:	2800      	cmp	r0, #0
 800817c:	d09d      	beq.n	80080ba <_dtoa_r+0x63a>
 800817e:	e7cf      	b.n	8008120 <_dtoa_r+0x6a0>
 8008180:	9a08      	ldr	r2, [sp, #32]
 8008182:	2a00      	cmp	r2, #0
 8008184:	f000 80d7 	beq.w	8008336 <_dtoa_r+0x8b6>
 8008188:	9a06      	ldr	r2, [sp, #24]
 800818a:	2a01      	cmp	r2, #1
 800818c:	f300 80ba 	bgt.w	8008304 <_dtoa_r+0x884>
 8008190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008192:	2a00      	cmp	r2, #0
 8008194:	f000 80b2 	beq.w	80082fc <_dtoa_r+0x87c>
 8008198:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800819c:	9e07      	ldr	r6, [sp, #28]
 800819e:	9d04      	ldr	r5, [sp, #16]
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	441a      	add	r2, r3
 80081a4:	9204      	str	r2, [sp, #16]
 80081a6:	9a05      	ldr	r2, [sp, #20]
 80081a8:	2101      	movs	r1, #1
 80081aa:	441a      	add	r2, r3
 80081ac:	4620      	mov	r0, r4
 80081ae:	9205      	str	r2, [sp, #20]
 80081b0:	f000 fb66 	bl	8008880 <__i2b>
 80081b4:	4607      	mov	r7, r0
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	dd0c      	ble.n	80081d4 <_dtoa_r+0x754>
 80081ba:	9b05      	ldr	r3, [sp, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd09      	ble.n	80081d4 <_dtoa_r+0x754>
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	9a04      	ldr	r2, [sp, #16]
 80081c4:	bfa8      	it	ge
 80081c6:	462b      	movge	r3, r5
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	9204      	str	r2, [sp, #16]
 80081cc:	9a05      	ldr	r2, [sp, #20]
 80081ce:	1aed      	subs	r5, r5, r3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	b31b      	cbz	r3, 8008220 <_dtoa_r+0x7a0>
 80081d8:	9b08      	ldr	r3, [sp, #32]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 80af 	beq.w	800833e <_dtoa_r+0x8be>
 80081e0:	2e00      	cmp	r6, #0
 80081e2:	dd13      	ble.n	800820c <_dtoa_r+0x78c>
 80081e4:	4639      	mov	r1, r7
 80081e6:	4632      	mov	r2, r6
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fc09 	bl	8008a00 <__pow5mult>
 80081ee:	ee18 2a10 	vmov	r2, s16
 80081f2:	4601      	mov	r1, r0
 80081f4:	4607      	mov	r7, r0
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fb58 	bl	80088ac <__multiply>
 80081fc:	ee18 1a10 	vmov	r1, s16
 8008200:	4680      	mov	r8, r0
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fa84 	bl	8008710 <_Bfree>
 8008208:	ee08 8a10 	vmov	s16, r8
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	1b9a      	subs	r2, r3, r6
 8008210:	d006      	beq.n	8008220 <_dtoa_r+0x7a0>
 8008212:	ee18 1a10 	vmov	r1, s16
 8008216:	4620      	mov	r0, r4
 8008218:	f000 fbf2 	bl	8008a00 <__pow5mult>
 800821c:	ee08 0a10 	vmov	s16, r0
 8008220:	2101      	movs	r1, #1
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fb2c 	bl	8008880 <__i2b>
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	4606      	mov	r6, r0
 800822e:	f340 8088 	ble.w	8008342 <_dtoa_r+0x8c2>
 8008232:	461a      	mov	r2, r3
 8008234:	4601      	mov	r1, r0
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fbe2 	bl	8008a00 <__pow5mult>
 800823c:	9b06      	ldr	r3, [sp, #24]
 800823e:	2b01      	cmp	r3, #1
 8008240:	4606      	mov	r6, r0
 8008242:	f340 8081 	ble.w	8008348 <_dtoa_r+0x8c8>
 8008246:	f04f 0800 	mov.w	r8, #0
 800824a:	6933      	ldr	r3, [r6, #16]
 800824c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008250:	6918      	ldr	r0, [r3, #16]
 8008252:	f000 fac5 	bl	80087e0 <__hi0bits>
 8008256:	f1c0 0020 	rsb	r0, r0, #32
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	4418      	add	r0, r3
 800825e:	f010 001f 	ands.w	r0, r0, #31
 8008262:	f000 8092 	beq.w	800838a <_dtoa_r+0x90a>
 8008266:	f1c0 0320 	rsb	r3, r0, #32
 800826a:	2b04      	cmp	r3, #4
 800826c:	f340 808a 	ble.w	8008384 <_dtoa_r+0x904>
 8008270:	f1c0 001c 	rsb	r0, r0, #28
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	4403      	add	r3, r0
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9b05      	ldr	r3, [sp, #20]
 800827c:	4403      	add	r3, r0
 800827e:	4405      	add	r5, r0
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	9b04      	ldr	r3, [sp, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dd07      	ble.n	8008298 <_dtoa_r+0x818>
 8008288:	ee18 1a10 	vmov	r1, s16
 800828c:	461a      	mov	r2, r3
 800828e:	4620      	mov	r0, r4
 8008290:	f000 fc10 	bl	8008ab4 <__lshift>
 8008294:	ee08 0a10 	vmov	s16, r0
 8008298:	9b05      	ldr	r3, [sp, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	dd05      	ble.n	80082aa <_dtoa_r+0x82a>
 800829e:	4631      	mov	r1, r6
 80082a0:	461a      	mov	r2, r3
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fc06 	bl	8008ab4 <__lshift>
 80082a8:	4606      	mov	r6, r0
 80082aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06e      	beq.n	800838e <_dtoa_r+0x90e>
 80082b0:	ee18 0a10 	vmov	r0, s16
 80082b4:	4631      	mov	r1, r6
 80082b6:	f000 fc6d 	bl	8008b94 <__mcmp>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	da67      	bge.n	800838e <_dtoa_r+0x90e>
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	ee18 1a10 	vmov	r1, s16
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	220a      	movs	r2, #10
 80082ca:	2300      	movs	r3, #0
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fa41 	bl	8008754 <__multadd>
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	ee08 0a10 	vmov	s16, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 81b1 	beq.w	8008640 <_dtoa_r+0xbc0>
 80082de:	2300      	movs	r3, #0
 80082e0:	4639      	mov	r1, r7
 80082e2:	220a      	movs	r2, #10
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fa35 	bl	8008754 <__multadd>
 80082ea:	9b02      	ldr	r3, [sp, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	4607      	mov	r7, r0
 80082f0:	f300 808e 	bgt.w	8008410 <_dtoa_r+0x990>
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	dc51      	bgt.n	800839e <_dtoa_r+0x91e>
 80082fa:	e089      	b.n	8008410 <_dtoa_r+0x990>
 80082fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008302:	e74b      	b.n	800819c <_dtoa_r+0x71c>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	1e5e      	subs	r6, r3, #1
 8008308:	9b07      	ldr	r3, [sp, #28]
 800830a:	42b3      	cmp	r3, r6
 800830c:	bfbf      	itttt	lt
 800830e:	9b07      	ldrlt	r3, [sp, #28]
 8008310:	9607      	strlt	r6, [sp, #28]
 8008312:	1af2      	sublt	r2, r6, r3
 8008314:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008316:	bfb6      	itet	lt
 8008318:	189b      	addlt	r3, r3, r2
 800831a:	1b9e      	subge	r6, r3, r6
 800831c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	bfb8      	it	lt
 8008322:	2600      	movlt	r6, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	bfb7      	itett	lt
 8008328:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800832c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008330:	1a9d      	sublt	r5, r3, r2
 8008332:	2300      	movlt	r3, #0
 8008334:	e734      	b.n	80081a0 <_dtoa_r+0x720>
 8008336:	9e07      	ldr	r6, [sp, #28]
 8008338:	9d04      	ldr	r5, [sp, #16]
 800833a:	9f08      	ldr	r7, [sp, #32]
 800833c:	e73b      	b.n	80081b6 <_dtoa_r+0x736>
 800833e:	9a07      	ldr	r2, [sp, #28]
 8008340:	e767      	b.n	8008212 <_dtoa_r+0x792>
 8008342:	9b06      	ldr	r3, [sp, #24]
 8008344:	2b01      	cmp	r3, #1
 8008346:	dc18      	bgt.n	800837a <_dtoa_r+0x8fa>
 8008348:	f1ba 0f00 	cmp.w	sl, #0
 800834c:	d115      	bne.n	800837a <_dtoa_r+0x8fa>
 800834e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008352:	b993      	cbnz	r3, 800837a <_dtoa_r+0x8fa>
 8008354:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008358:	0d1b      	lsrs	r3, r3, #20
 800835a:	051b      	lsls	r3, r3, #20
 800835c:	b183      	cbz	r3, 8008380 <_dtoa_r+0x900>
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	3301      	adds	r3, #1
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	3301      	adds	r3, #1
 8008368:	9305      	str	r3, [sp, #20]
 800836a:	f04f 0801 	mov.w	r8, #1
 800836e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f af6a 	bne.w	800824a <_dtoa_r+0x7ca>
 8008376:	2001      	movs	r0, #1
 8008378:	e76f      	b.n	800825a <_dtoa_r+0x7da>
 800837a:	f04f 0800 	mov.w	r8, #0
 800837e:	e7f6      	b.n	800836e <_dtoa_r+0x8ee>
 8008380:	4698      	mov	r8, r3
 8008382:	e7f4      	b.n	800836e <_dtoa_r+0x8ee>
 8008384:	f43f af7d 	beq.w	8008282 <_dtoa_r+0x802>
 8008388:	4618      	mov	r0, r3
 800838a:	301c      	adds	r0, #28
 800838c:	e772      	b.n	8008274 <_dtoa_r+0x7f4>
 800838e:	9b03      	ldr	r3, [sp, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	dc37      	bgt.n	8008404 <_dtoa_r+0x984>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	2b02      	cmp	r3, #2
 8008398:	dd34      	ble.n	8008404 <_dtoa_r+0x984>
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	9b02      	ldr	r3, [sp, #8]
 80083a0:	b96b      	cbnz	r3, 80083be <_dtoa_r+0x93e>
 80083a2:	4631      	mov	r1, r6
 80083a4:	2205      	movs	r2, #5
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 f9d4 	bl	8008754 <__multadd>
 80083ac:	4601      	mov	r1, r0
 80083ae:	4606      	mov	r6, r0
 80083b0:	ee18 0a10 	vmov	r0, s16
 80083b4:	f000 fbee 	bl	8008b94 <__mcmp>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f73f adbb 	bgt.w	8007f34 <_dtoa_r+0x4b4>
 80083be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c0:	9d01      	ldr	r5, [sp, #4]
 80083c2:	43db      	mvns	r3, r3
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	f04f 0800 	mov.w	r8, #0
 80083ca:	4631      	mov	r1, r6
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 f99f 	bl	8008710 <_Bfree>
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	f43f aea4 	beq.w	8008120 <_dtoa_r+0x6a0>
 80083d8:	f1b8 0f00 	cmp.w	r8, #0
 80083dc:	d005      	beq.n	80083ea <_dtoa_r+0x96a>
 80083de:	45b8      	cmp	r8, r7
 80083e0:	d003      	beq.n	80083ea <_dtoa_r+0x96a>
 80083e2:	4641      	mov	r1, r8
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 f993 	bl	8008710 <_Bfree>
 80083ea:	4639      	mov	r1, r7
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 f98f 	bl	8008710 <_Bfree>
 80083f2:	e695      	b.n	8008120 <_dtoa_r+0x6a0>
 80083f4:	2600      	movs	r6, #0
 80083f6:	4637      	mov	r7, r6
 80083f8:	e7e1      	b.n	80083be <_dtoa_r+0x93e>
 80083fa:	9700      	str	r7, [sp, #0]
 80083fc:	4637      	mov	r7, r6
 80083fe:	e599      	b.n	8007f34 <_dtoa_r+0x4b4>
 8008400:	40240000 	.word	0x40240000
 8008404:	9b08      	ldr	r3, [sp, #32]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80ca 	beq.w	80085a0 <_dtoa_r+0xb20>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	9302      	str	r3, [sp, #8]
 8008410:	2d00      	cmp	r5, #0
 8008412:	dd05      	ble.n	8008420 <_dtoa_r+0x9a0>
 8008414:	4639      	mov	r1, r7
 8008416:	462a      	mov	r2, r5
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fb4b 	bl	8008ab4 <__lshift>
 800841e:	4607      	mov	r7, r0
 8008420:	f1b8 0f00 	cmp.w	r8, #0
 8008424:	d05b      	beq.n	80084de <_dtoa_r+0xa5e>
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4620      	mov	r0, r4
 800842a:	f000 f931 	bl	8008690 <_Balloc>
 800842e:	4605      	mov	r5, r0
 8008430:	b928      	cbnz	r0, 800843e <_dtoa_r+0x9be>
 8008432:	4b87      	ldr	r3, [pc, #540]	; (8008650 <_dtoa_r+0xbd0>)
 8008434:	4602      	mov	r2, r0
 8008436:	f240 21ea 	movw	r1, #746	; 0x2ea
 800843a:	f7ff bb3b 	b.w	8007ab4 <_dtoa_r+0x34>
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	3202      	adds	r2, #2
 8008442:	0092      	lsls	r2, r2, #2
 8008444:	f107 010c 	add.w	r1, r7, #12
 8008448:	300c      	adds	r0, #12
 800844a:	f000 f913 	bl	8008674 <memcpy>
 800844e:	2201      	movs	r2, #1
 8008450:	4629      	mov	r1, r5
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fb2e 	bl	8008ab4 <__lshift>
 8008458:	9b01      	ldr	r3, [sp, #4]
 800845a:	f103 0901 	add.w	r9, r3, #1
 800845e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008462:	4413      	add	r3, r2
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	f00a 0301 	and.w	r3, sl, #1
 800846a:	46b8      	mov	r8, r7
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	4607      	mov	r7, r0
 8008470:	4631      	mov	r1, r6
 8008472:	ee18 0a10 	vmov	r0, s16
 8008476:	f7ff fa77 	bl	8007968 <quorem>
 800847a:	4641      	mov	r1, r8
 800847c:	9002      	str	r0, [sp, #8]
 800847e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008482:	ee18 0a10 	vmov	r0, s16
 8008486:	f000 fb85 	bl	8008b94 <__mcmp>
 800848a:	463a      	mov	r2, r7
 800848c:	9003      	str	r0, [sp, #12]
 800848e:	4631      	mov	r1, r6
 8008490:	4620      	mov	r0, r4
 8008492:	f000 fb9b 	bl	8008bcc <__mdiff>
 8008496:	68c2      	ldr	r2, [r0, #12]
 8008498:	f109 3bff 	add.w	fp, r9, #4294967295
 800849c:	4605      	mov	r5, r0
 800849e:	bb02      	cbnz	r2, 80084e2 <_dtoa_r+0xa62>
 80084a0:	4601      	mov	r1, r0
 80084a2:	ee18 0a10 	vmov	r0, s16
 80084a6:	f000 fb75 	bl	8008b94 <__mcmp>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4629      	mov	r1, r5
 80084ae:	4620      	mov	r0, r4
 80084b0:	9207      	str	r2, [sp, #28]
 80084b2:	f000 f92d 	bl	8008710 <_Bfree>
 80084b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80084ba:	ea43 0102 	orr.w	r1, r3, r2
 80084be:	9b04      	ldr	r3, [sp, #16]
 80084c0:	430b      	orrs	r3, r1
 80084c2:	464d      	mov	r5, r9
 80084c4:	d10f      	bne.n	80084e6 <_dtoa_r+0xa66>
 80084c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084ca:	d02a      	beq.n	8008522 <_dtoa_r+0xaa2>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd02      	ble.n	80084d8 <_dtoa_r+0xa58>
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80084d8:	f88b a000 	strb.w	sl, [fp]
 80084dc:	e775      	b.n	80083ca <_dtoa_r+0x94a>
 80084de:	4638      	mov	r0, r7
 80084e0:	e7ba      	b.n	8008458 <_dtoa_r+0x9d8>
 80084e2:	2201      	movs	r2, #1
 80084e4:	e7e2      	b.n	80084ac <_dtoa_r+0xa2c>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	db04      	blt.n	80084f6 <_dtoa_r+0xa76>
 80084ec:	9906      	ldr	r1, [sp, #24]
 80084ee:	430b      	orrs	r3, r1
 80084f0:	9904      	ldr	r1, [sp, #16]
 80084f2:	430b      	orrs	r3, r1
 80084f4:	d122      	bne.n	800853c <_dtoa_r+0xabc>
 80084f6:	2a00      	cmp	r2, #0
 80084f8:	ddee      	ble.n	80084d8 <_dtoa_r+0xa58>
 80084fa:	ee18 1a10 	vmov	r1, s16
 80084fe:	2201      	movs	r2, #1
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fad7 	bl	8008ab4 <__lshift>
 8008506:	4631      	mov	r1, r6
 8008508:	ee08 0a10 	vmov	s16, r0
 800850c:	f000 fb42 	bl	8008b94 <__mcmp>
 8008510:	2800      	cmp	r0, #0
 8008512:	dc03      	bgt.n	800851c <_dtoa_r+0xa9c>
 8008514:	d1e0      	bne.n	80084d8 <_dtoa_r+0xa58>
 8008516:	f01a 0f01 	tst.w	sl, #1
 800851a:	d0dd      	beq.n	80084d8 <_dtoa_r+0xa58>
 800851c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008520:	d1d7      	bne.n	80084d2 <_dtoa_r+0xa52>
 8008522:	2339      	movs	r3, #57	; 0x39
 8008524:	f88b 3000 	strb.w	r3, [fp]
 8008528:	462b      	mov	r3, r5
 800852a:	461d      	mov	r5, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008532:	2a39      	cmp	r2, #57	; 0x39
 8008534:	d071      	beq.n	800861a <_dtoa_r+0xb9a>
 8008536:	3201      	adds	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e746      	b.n	80083ca <_dtoa_r+0x94a>
 800853c:	2a00      	cmp	r2, #0
 800853e:	dd07      	ble.n	8008550 <_dtoa_r+0xad0>
 8008540:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008544:	d0ed      	beq.n	8008522 <_dtoa_r+0xaa2>
 8008546:	f10a 0301 	add.w	r3, sl, #1
 800854a:	f88b 3000 	strb.w	r3, [fp]
 800854e:	e73c      	b.n	80083ca <_dtoa_r+0x94a>
 8008550:	9b05      	ldr	r3, [sp, #20]
 8008552:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008556:	4599      	cmp	r9, r3
 8008558:	d047      	beq.n	80085ea <_dtoa_r+0xb6a>
 800855a:	ee18 1a10 	vmov	r1, s16
 800855e:	2300      	movs	r3, #0
 8008560:	220a      	movs	r2, #10
 8008562:	4620      	mov	r0, r4
 8008564:	f000 f8f6 	bl	8008754 <__multadd>
 8008568:	45b8      	cmp	r8, r7
 800856a:	ee08 0a10 	vmov	s16, r0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	f04f 020a 	mov.w	r2, #10
 8008576:	4641      	mov	r1, r8
 8008578:	4620      	mov	r0, r4
 800857a:	d106      	bne.n	800858a <_dtoa_r+0xb0a>
 800857c:	f000 f8ea 	bl	8008754 <__multadd>
 8008580:	4680      	mov	r8, r0
 8008582:	4607      	mov	r7, r0
 8008584:	f109 0901 	add.w	r9, r9, #1
 8008588:	e772      	b.n	8008470 <_dtoa_r+0x9f0>
 800858a:	f000 f8e3 	bl	8008754 <__multadd>
 800858e:	4639      	mov	r1, r7
 8008590:	4680      	mov	r8, r0
 8008592:	2300      	movs	r3, #0
 8008594:	220a      	movs	r2, #10
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f8dc 	bl	8008754 <__multadd>
 800859c:	4607      	mov	r7, r0
 800859e:	e7f1      	b.n	8008584 <_dtoa_r+0xb04>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	9302      	str	r3, [sp, #8]
 80085a4:	9d01      	ldr	r5, [sp, #4]
 80085a6:	ee18 0a10 	vmov	r0, s16
 80085aa:	4631      	mov	r1, r6
 80085ac:	f7ff f9dc 	bl	8007968 <quorem>
 80085b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	f805 ab01 	strb.w	sl, [r5], #1
 80085ba:	1aea      	subs	r2, r5, r3
 80085bc:	9b02      	ldr	r3, [sp, #8]
 80085be:	4293      	cmp	r3, r2
 80085c0:	dd09      	ble.n	80085d6 <_dtoa_r+0xb56>
 80085c2:	ee18 1a10 	vmov	r1, s16
 80085c6:	2300      	movs	r3, #0
 80085c8:	220a      	movs	r2, #10
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f8c2 	bl	8008754 <__multadd>
 80085d0:	ee08 0a10 	vmov	s16, r0
 80085d4:	e7e7      	b.n	80085a6 <_dtoa_r+0xb26>
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfc8      	it	gt
 80085dc:	461d      	movgt	r5, r3
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	bfd8      	it	le
 80085e2:	2501      	movle	r5, #1
 80085e4:	441d      	add	r5, r3
 80085e6:	f04f 0800 	mov.w	r8, #0
 80085ea:	ee18 1a10 	vmov	r1, s16
 80085ee:	2201      	movs	r2, #1
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fa5f 	bl	8008ab4 <__lshift>
 80085f6:	4631      	mov	r1, r6
 80085f8:	ee08 0a10 	vmov	s16, r0
 80085fc:	f000 faca 	bl	8008b94 <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	dc91      	bgt.n	8008528 <_dtoa_r+0xaa8>
 8008604:	d102      	bne.n	800860c <_dtoa_r+0xb8c>
 8008606:	f01a 0f01 	tst.w	sl, #1
 800860a:	d18d      	bne.n	8008528 <_dtoa_r+0xaa8>
 800860c:	462b      	mov	r3, r5
 800860e:	461d      	mov	r5, r3
 8008610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008614:	2a30      	cmp	r2, #48	; 0x30
 8008616:	d0fa      	beq.n	800860e <_dtoa_r+0xb8e>
 8008618:	e6d7      	b.n	80083ca <_dtoa_r+0x94a>
 800861a:	9a01      	ldr	r2, [sp, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d184      	bne.n	800852a <_dtoa_r+0xaaa>
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	3301      	adds	r3, #1
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	2331      	movs	r3, #49	; 0x31
 8008628:	7013      	strb	r3, [r2, #0]
 800862a:	e6ce      	b.n	80083ca <_dtoa_r+0x94a>
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <_dtoa_r+0xbd4>)
 800862e:	f7ff ba95 	b.w	8007b5c <_dtoa_r+0xdc>
 8008632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008634:	2b00      	cmp	r3, #0
 8008636:	f47f aa6e 	bne.w	8007b16 <_dtoa_r+0x96>
 800863a:	4b07      	ldr	r3, [pc, #28]	; (8008658 <_dtoa_r+0xbd8>)
 800863c:	f7ff ba8e 	b.w	8007b5c <_dtoa_r+0xdc>
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dcae      	bgt.n	80085a4 <_dtoa_r+0xb24>
 8008646:	9b06      	ldr	r3, [sp, #24]
 8008648:	2b02      	cmp	r3, #2
 800864a:	f73f aea8 	bgt.w	800839e <_dtoa_r+0x91e>
 800864e:	e7a9      	b.n	80085a4 <_dtoa_r+0xb24>
 8008650:	08009f77 	.word	0x08009f77
 8008654:	08009ed4 	.word	0x08009ed4
 8008658:	08009ef8 	.word	0x08009ef8

0800865c <_localeconv_r>:
 800865c:	4800      	ldr	r0, [pc, #0]	; (8008660 <_localeconv_r+0x4>)
 800865e:	4770      	bx	lr
 8008660:	20000164 	.word	0x20000164

08008664 <malloc>:
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <malloc+0xc>)
 8008666:	4601      	mov	r1, r0
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f000 bc17 	b.w	8008e9c <_malloc_r>
 800866e:	bf00      	nop
 8008670:	20000010 	.word	0x20000010

08008674 <memcpy>:
 8008674:	440a      	add	r2, r1
 8008676:	4291      	cmp	r1, r2
 8008678:	f100 33ff 	add.w	r3, r0, #4294967295
 800867c:	d100      	bne.n	8008680 <memcpy+0xc>
 800867e:	4770      	bx	lr
 8008680:	b510      	push	{r4, lr}
 8008682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800868a:	4291      	cmp	r1, r2
 800868c:	d1f9      	bne.n	8008682 <memcpy+0xe>
 800868e:	bd10      	pop	{r4, pc}

08008690 <_Balloc>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008694:	4604      	mov	r4, r0
 8008696:	460d      	mov	r5, r1
 8008698:	b976      	cbnz	r6, 80086b8 <_Balloc+0x28>
 800869a:	2010      	movs	r0, #16
 800869c:	f7ff ffe2 	bl	8008664 <malloc>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6260      	str	r0, [r4, #36]	; 0x24
 80086a4:	b920      	cbnz	r0, 80086b0 <_Balloc+0x20>
 80086a6:	4b18      	ldr	r3, [pc, #96]	; (8008708 <_Balloc+0x78>)
 80086a8:	4818      	ldr	r0, [pc, #96]	; (800870c <_Balloc+0x7c>)
 80086aa:	2166      	movs	r1, #102	; 0x66
 80086ac:	f000 fdd6 	bl	800925c <__assert_func>
 80086b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b4:	6006      	str	r6, [r0, #0]
 80086b6:	60c6      	str	r6, [r0, #12]
 80086b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086ba:	68f3      	ldr	r3, [r6, #12]
 80086bc:	b183      	cbz	r3, 80086e0 <_Balloc+0x50>
 80086be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086c6:	b9b8      	cbnz	r0, 80086f8 <_Balloc+0x68>
 80086c8:	2101      	movs	r1, #1
 80086ca:	fa01 f605 	lsl.w	r6, r1, r5
 80086ce:	1d72      	adds	r2, r6, #5
 80086d0:	0092      	lsls	r2, r2, #2
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 fb60 	bl	8008d98 <_calloc_r>
 80086d8:	b160      	cbz	r0, 80086f4 <_Balloc+0x64>
 80086da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086de:	e00e      	b.n	80086fe <_Balloc+0x6e>
 80086e0:	2221      	movs	r2, #33	; 0x21
 80086e2:	2104      	movs	r1, #4
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fb57 	bl	8008d98 <_calloc_r>
 80086ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ec:	60f0      	str	r0, [r6, #12]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e4      	bne.n	80086be <_Balloc+0x2e>
 80086f4:	2000      	movs	r0, #0
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	6802      	ldr	r2, [r0, #0]
 80086fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086fe:	2300      	movs	r3, #0
 8008700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008704:	e7f7      	b.n	80086f6 <_Balloc+0x66>
 8008706:	bf00      	nop
 8008708:	08009f05 	.word	0x08009f05
 800870c:	08009f88 	.word	0x08009f88

08008710 <_Bfree>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	b976      	cbnz	r6, 8008738 <_Bfree+0x28>
 800871a:	2010      	movs	r0, #16
 800871c:	f7ff ffa2 	bl	8008664 <malloc>
 8008720:	4602      	mov	r2, r0
 8008722:	6268      	str	r0, [r5, #36]	; 0x24
 8008724:	b920      	cbnz	r0, 8008730 <_Bfree+0x20>
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <_Bfree+0x3c>)
 8008728:	4809      	ldr	r0, [pc, #36]	; (8008750 <_Bfree+0x40>)
 800872a:	218a      	movs	r1, #138	; 0x8a
 800872c:	f000 fd96 	bl	800925c <__assert_func>
 8008730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008734:	6006      	str	r6, [r0, #0]
 8008736:	60c6      	str	r6, [r0, #12]
 8008738:	b13c      	cbz	r4, 800874a <_Bfree+0x3a>
 800873a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800873c:	6862      	ldr	r2, [r4, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008744:	6021      	str	r1, [r4, #0]
 8008746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	08009f05 	.word	0x08009f05
 8008750:	08009f88 	.word	0x08009f88

08008754 <__multadd>:
 8008754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008758:	690d      	ldr	r5, [r1, #16]
 800875a:	4607      	mov	r7, r0
 800875c:	460c      	mov	r4, r1
 800875e:	461e      	mov	r6, r3
 8008760:	f101 0c14 	add.w	ip, r1, #20
 8008764:	2000      	movs	r0, #0
 8008766:	f8dc 3000 	ldr.w	r3, [ip]
 800876a:	b299      	uxth	r1, r3
 800876c:	fb02 6101 	mla	r1, r2, r1, r6
 8008770:	0c1e      	lsrs	r6, r3, #16
 8008772:	0c0b      	lsrs	r3, r1, #16
 8008774:	fb02 3306 	mla	r3, r2, r6, r3
 8008778:	b289      	uxth	r1, r1
 800877a:	3001      	adds	r0, #1
 800877c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008780:	4285      	cmp	r5, r0
 8008782:	f84c 1b04 	str.w	r1, [ip], #4
 8008786:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800878a:	dcec      	bgt.n	8008766 <__multadd+0x12>
 800878c:	b30e      	cbz	r6, 80087d2 <__multadd+0x7e>
 800878e:	68a3      	ldr	r3, [r4, #8]
 8008790:	42ab      	cmp	r3, r5
 8008792:	dc19      	bgt.n	80087c8 <__multadd+0x74>
 8008794:	6861      	ldr	r1, [r4, #4]
 8008796:	4638      	mov	r0, r7
 8008798:	3101      	adds	r1, #1
 800879a:	f7ff ff79 	bl	8008690 <_Balloc>
 800879e:	4680      	mov	r8, r0
 80087a0:	b928      	cbnz	r0, 80087ae <__multadd+0x5a>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <__multadd+0x84>)
 80087a6:	480d      	ldr	r0, [pc, #52]	; (80087dc <__multadd+0x88>)
 80087a8:	21b5      	movs	r1, #181	; 0xb5
 80087aa:	f000 fd57 	bl	800925c <__assert_func>
 80087ae:	6922      	ldr	r2, [r4, #16]
 80087b0:	3202      	adds	r2, #2
 80087b2:	f104 010c 	add.w	r1, r4, #12
 80087b6:	0092      	lsls	r2, r2, #2
 80087b8:	300c      	adds	r0, #12
 80087ba:	f7ff ff5b 	bl	8008674 <memcpy>
 80087be:	4621      	mov	r1, r4
 80087c0:	4638      	mov	r0, r7
 80087c2:	f7ff ffa5 	bl	8008710 <_Bfree>
 80087c6:	4644      	mov	r4, r8
 80087c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087cc:	3501      	adds	r5, #1
 80087ce:	615e      	str	r6, [r3, #20]
 80087d0:	6125      	str	r5, [r4, #16]
 80087d2:	4620      	mov	r0, r4
 80087d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d8:	08009f77 	.word	0x08009f77
 80087dc:	08009f88 	.word	0x08009f88

080087e0 <__hi0bits>:
 80087e0:	0c03      	lsrs	r3, r0, #16
 80087e2:	041b      	lsls	r3, r3, #16
 80087e4:	b9d3      	cbnz	r3, 800881c <__hi0bits+0x3c>
 80087e6:	0400      	lsls	r0, r0, #16
 80087e8:	2310      	movs	r3, #16
 80087ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087ee:	bf04      	itt	eq
 80087f0:	0200      	lsleq	r0, r0, #8
 80087f2:	3308      	addeq	r3, #8
 80087f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087f8:	bf04      	itt	eq
 80087fa:	0100      	lsleq	r0, r0, #4
 80087fc:	3304      	addeq	r3, #4
 80087fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008802:	bf04      	itt	eq
 8008804:	0080      	lsleq	r0, r0, #2
 8008806:	3302      	addeq	r3, #2
 8008808:	2800      	cmp	r0, #0
 800880a:	db05      	blt.n	8008818 <__hi0bits+0x38>
 800880c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008810:	f103 0301 	add.w	r3, r3, #1
 8008814:	bf08      	it	eq
 8008816:	2320      	moveq	r3, #32
 8008818:	4618      	mov	r0, r3
 800881a:	4770      	bx	lr
 800881c:	2300      	movs	r3, #0
 800881e:	e7e4      	b.n	80087ea <__hi0bits+0xa>

08008820 <__lo0bits>:
 8008820:	6803      	ldr	r3, [r0, #0]
 8008822:	f013 0207 	ands.w	r2, r3, #7
 8008826:	4601      	mov	r1, r0
 8008828:	d00b      	beq.n	8008842 <__lo0bits+0x22>
 800882a:	07da      	lsls	r2, r3, #31
 800882c:	d423      	bmi.n	8008876 <__lo0bits+0x56>
 800882e:	0798      	lsls	r0, r3, #30
 8008830:	bf49      	itett	mi
 8008832:	085b      	lsrmi	r3, r3, #1
 8008834:	089b      	lsrpl	r3, r3, #2
 8008836:	2001      	movmi	r0, #1
 8008838:	600b      	strmi	r3, [r1, #0]
 800883a:	bf5c      	itt	pl
 800883c:	600b      	strpl	r3, [r1, #0]
 800883e:	2002      	movpl	r0, #2
 8008840:	4770      	bx	lr
 8008842:	b298      	uxth	r0, r3
 8008844:	b9a8      	cbnz	r0, 8008872 <__lo0bits+0x52>
 8008846:	0c1b      	lsrs	r3, r3, #16
 8008848:	2010      	movs	r0, #16
 800884a:	b2da      	uxtb	r2, r3
 800884c:	b90a      	cbnz	r2, 8008852 <__lo0bits+0x32>
 800884e:	3008      	adds	r0, #8
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	071a      	lsls	r2, r3, #28
 8008854:	bf04      	itt	eq
 8008856:	091b      	lsreq	r3, r3, #4
 8008858:	3004      	addeq	r0, #4
 800885a:	079a      	lsls	r2, r3, #30
 800885c:	bf04      	itt	eq
 800885e:	089b      	lsreq	r3, r3, #2
 8008860:	3002      	addeq	r0, #2
 8008862:	07da      	lsls	r2, r3, #31
 8008864:	d403      	bmi.n	800886e <__lo0bits+0x4e>
 8008866:	085b      	lsrs	r3, r3, #1
 8008868:	f100 0001 	add.w	r0, r0, #1
 800886c:	d005      	beq.n	800887a <__lo0bits+0x5a>
 800886e:	600b      	str	r3, [r1, #0]
 8008870:	4770      	bx	lr
 8008872:	4610      	mov	r0, r2
 8008874:	e7e9      	b.n	800884a <__lo0bits+0x2a>
 8008876:	2000      	movs	r0, #0
 8008878:	4770      	bx	lr
 800887a:	2020      	movs	r0, #32
 800887c:	4770      	bx	lr
	...

08008880 <__i2b>:
 8008880:	b510      	push	{r4, lr}
 8008882:	460c      	mov	r4, r1
 8008884:	2101      	movs	r1, #1
 8008886:	f7ff ff03 	bl	8008690 <_Balloc>
 800888a:	4602      	mov	r2, r0
 800888c:	b928      	cbnz	r0, 800889a <__i2b+0x1a>
 800888e:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <__i2b+0x24>)
 8008890:	4805      	ldr	r0, [pc, #20]	; (80088a8 <__i2b+0x28>)
 8008892:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008896:	f000 fce1 	bl	800925c <__assert_func>
 800889a:	2301      	movs	r3, #1
 800889c:	6144      	str	r4, [r0, #20]
 800889e:	6103      	str	r3, [r0, #16]
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	bf00      	nop
 80088a4:	08009f77 	.word	0x08009f77
 80088a8:	08009f88 	.word	0x08009f88

080088ac <__multiply>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	4691      	mov	r9, r2
 80088b2:	690a      	ldr	r2, [r1, #16]
 80088b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	bfb8      	it	lt
 80088bc:	460b      	movlt	r3, r1
 80088be:	460c      	mov	r4, r1
 80088c0:	bfbc      	itt	lt
 80088c2:	464c      	movlt	r4, r9
 80088c4:	4699      	movlt	r9, r3
 80088c6:	6927      	ldr	r7, [r4, #16]
 80088c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088cc:	68a3      	ldr	r3, [r4, #8]
 80088ce:	6861      	ldr	r1, [r4, #4]
 80088d0:	eb07 060a 	add.w	r6, r7, sl
 80088d4:	42b3      	cmp	r3, r6
 80088d6:	b085      	sub	sp, #20
 80088d8:	bfb8      	it	lt
 80088da:	3101      	addlt	r1, #1
 80088dc:	f7ff fed8 	bl	8008690 <_Balloc>
 80088e0:	b930      	cbnz	r0, 80088f0 <__multiply+0x44>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4b44      	ldr	r3, [pc, #272]	; (80089f8 <__multiply+0x14c>)
 80088e6:	4845      	ldr	r0, [pc, #276]	; (80089fc <__multiply+0x150>)
 80088e8:	f240 115d 	movw	r1, #349	; 0x15d
 80088ec:	f000 fcb6 	bl	800925c <__assert_func>
 80088f0:	f100 0514 	add.w	r5, r0, #20
 80088f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088f8:	462b      	mov	r3, r5
 80088fa:	2200      	movs	r2, #0
 80088fc:	4543      	cmp	r3, r8
 80088fe:	d321      	bcc.n	8008944 <__multiply+0x98>
 8008900:	f104 0314 	add.w	r3, r4, #20
 8008904:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008908:	f109 0314 	add.w	r3, r9, #20
 800890c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008910:	9202      	str	r2, [sp, #8]
 8008912:	1b3a      	subs	r2, r7, r4
 8008914:	3a15      	subs	r2, #21
 8008916:	f022 0203 	bic.w	r2, r2, #3
 800891a:	3204      	adds	r2, #4
 800891c:	f104 0115 	add.w	r1, r4, #21
 8008920:	428f      	cmp	r7, r1
 8008922:	bf38      	it	cc
 8008924:	2204      	movcc	r2, #4
 8008926:	9201      	str	r2, [sp, #4]
 8008928:	9a02      	ldr	r2, [sp, #8]
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	429a      	cmp	r2, r3
 800892e:	d80c      	bhi.n	800894a <__multiply+0x9e>
 8008930:	2e00      	cmp	r6, #0
 8008932:	dd03      	ble.n	800893c <__multiply+0x90>
 8008934:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008938:	2b00      	cmp	r3, #0
 800893a:	d05a      	beq.n	80089f2 <__multiply+0x146>
 800893c:	6106      	str	r6, [r0, #16]
 800893e:	b005      	add	sp, #20
 8008940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008944:	f843 2b04 	str.w	r2, [r3], #4
 8008948:	e7d8      	b.n	80088fc <__multiply+0x50>
 800894a:	f8b3 a000 	ldrh.w	sl, [r3]
 800894e:	f1ba 0f00 	cmp.w	sl, #0
 8008952:	d024      	beq.n	800899e <__multiply+0xf2>
 8008954:	f104 0e14 	add.w	lr, r4, #20
 8008958:	46a9      	mov	r9, r5
 800895a:	f04f 0c00 	mov.w	ip, #0
 800895e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008962:	f8d9 1000 	ldr.w	r1, [r9]
 8008966:	fa1f fb82 	uxth.w	fp, r2
 800896a:	b289      	uxth	r1, r1
 800896c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008970:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008974:	f8d9 2000 	ldr.w	r2, [r9]
 8008978:	4461      	add	r1, ip
 800897a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800897e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008982:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008986:	b289      	uxth	r1, r1
 8008988:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800898c:	4577      	cmp	r7, lr
 800898e:	f849 1b04 	str.w	r1, [r9], #4
 8008992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008996:	d8e2      	bhi.n	800895e <__multiply+0xb2>
 8008998:	9a01      	ldr	r2, [sp, #4]
 800899a:	f845 c002 	str.w	ip, [r5, r2]
 800899e:	9a03      	ldr	r2, [sp, #12]
 80089a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089a4:	3304      	adds	r3, #4
 80089a6:	f1b9 0f00 	cmp.w	r9, #0
 80089aa:	d020      	beq.n	80089ee <__multiply+0x142>
 80089ac:	6829      	ldr	r1, [r5, #0]
 80089ae:	f104 0c14 	add.w	ip, r4, #20
 80089b2:	46ae      	mov	lr, r5
 80089b4:	f04f 0a00 	mov.w	sl, #0
 80089b8:	f8bc b000 	ldrh.w	fp, [ip]
 80089bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089c0:	fb09 220b 	mla	r2, r9, fp, r2
 80089c4:	4492      	add	sl, r2
 80089c6:	b289      	uxth	r1, r1
 80089c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089cc:	f84e 1b04 	str.w	r1, [lr], #4
 80089d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089d4:	f8be 1000 	ldrh.w	r1, [lr]
 80089d8:	0c12      	lsrs	r2, r2, #16
 80089da:	fb09 1102 	mla	r1, r9, r2, r1
 80089de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089e2:	4567      	cmp	r7, ip
 80089e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089e8:	d8e6      	bhi.n	80089b8 <__multiply+0x10c>
 80089ea:	9a01      	ldr	r2, [sp, #4]
 80089ec:	50a9      	str	r1, [r5, r2]
 80089ee:	3504      	adds	r5, #4
 80089f0:	e79a      	b.n	8008928 <__multiply+0x7c>
 80089f2:	3e01      	subs	r6, #1
 80089f4:	e79c      	b.n	8008930 <__multiply+0x84>
 80089f6:	bf00      	nop
 80089f8:	08009f77 	.word	0x08009f77
 80089fc:	08009f88 	.word	0x08009f88

08008a00 <__pow5mult>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	4615      	mov	r5, r2
 8008a06:	f012 0203 	ands.w	r2, r2, #3
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	d007      	beq.n	8008a20 <__pow5mult+0x20>
 8008a10:	4c25      	ldr	r4, [pc, #148]	; (8008aa8 <__pow5mult+0xa8>)
 8008a12:	3a01      	subs	r2, #1
 8008a14:	2300      	movs	r3, #0
 8008a16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a1a:	f7ff fe9b 	bl	8008754 <__multadd>
 8008a1e:	4607      	mov	r7, r0
 8008a20:	10ad      	asrs	r5, r5, #2
 8008a22:	d03d      	beq.n	8008aa0 <__pow5mult+0xa0>
 8008a24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a26:	b97c      	cbnz	r4, 8008a48 <__pow5mult+0x48>
 8008a28:	2010      	movs	r0, #16
 8008a2a:	f7ff fe1b 	bl	8008664 <malloc>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	6270      	str	r0, [r6, #36]	; 0x24
 8008a32:	b928      	cbnz	r0, 8008a40 <__pow5mult+0x40>
 8008a34:	4b1d      	ldr	r3, [pc, #116]	; (8008aac <__pow5mult+0xac>)
 8008a36:	481e      	ldr	r0, [pc, #120]	; (8008ab0 <__pow5mult+0xb0>)
 8008a38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a3c:	f000 fc0e 	bl	800925c <__assert_func>
 8008a40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a44:	6004      	str	r4, [r0, #0]
 8008a46:	60c4      	str	r4, [r0, #12]
 8008a48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a50:	b94c      	cbnz	r4, 8008a66 <__pow5mult+0x66>
 8008a52:	f240 2171 	movw	r1, #625	; 0x271
 8008a56:	4630      	mov	r0, r6
 8008a58:	f7ff ff12 	bl	8008880 <__i2b>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a62:	4604      	mov	r4, r0
 8008a64:	6003      	str	r3, [r0, #0]
 8008a66:	f04f 0900 	mov.w	r9, #0
 8008a6a:	07eb      	lsls	r3, r5, #31
 8008a6c:	d50a      	bpl.n	8008a84 <__pow5mult+0x84>
 8008a6e:	4639      	mov	r1, r7
 8008a70:	4622      	mov	r2, r4
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7ff ff1a 	bl	80088ac <__multiply>
 8008a78:	4639      	mov	r1, r7
 8008a7a:	4680      	mov	r8, r0
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff fe47 	bl	8008710 <_Bfree>
 8008a82:	4647      	mov	r7, r8
 8008a84:	106d      	asrs	r5, r5, #1
 8008a86:	d00b      	beq.n	8008aa0 <__pow5mult+0xa0>
 8008a88:	6820      	ldr	r0, [r4, #0]
 8008a8a:	b938      	cbnz	r0, 8008a9c <__pow5mult+0x9c>
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff ff0b 	bl	80088ac <__multiply>
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	f8c0 9000 	str.w	r9, [r0]
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	e7e4      	b.n	8008a6a <__pow5mult+0x6a>
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa6:	bf00      	nop
 8008aa8:	0800a0d8 	.word	0x0800a0d8
 8008aac:	08009f05 	.word	0x08009f05
 8008ab0:	08009f88 	.word	0x08009f88

08008ab4 <__lshift>:
 8008ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab8:	460c      	mov	r4, r1
 8008aba:	6849      	ldr	r1, [r1, #4]
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4691      	mov	r9, r2
 8008ac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008acc:	f108 0601 	add.w	r6, r8, #1
 8008ad0:	42b3      	cmp	r3, r6
 8008ad2:	db0b      	blt.n	8008aec <__lshift+0x38>
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff fddb 	bl	8008690 <_Balloc>
 8008ada:	4605      	mov	r5, r0
 8008adc:	b948      	cbnz	r0, 8008af2 <__lshift+0x3e>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	4b2a      	ldr	r3, [pc, #168]	; (8008b8c <__lshift+0xd8>)
 8008ae2:	482b      	ldr	r0, [pc, #172]	; (8008b90 <__lshift+0xdc>)
 8008ae4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ae8:	f000 fbb8 	bl	800925c <__assert_func>
 8008aec:	3101      	adds	r1, #1
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	e7ee      	b.n	8008ad0 <__lshift+0x1c>
 8008af2:	2300      	movs	r3, #0
 8008af4:	f100 0114 	add.w	r1, r0, #20
 8008af8:	f100 0210 	add.w	r2, r0, #16
 8008afc:	4618      	mov	r0, r3
 8008afe:	4553      	cmp	r3, sl
 8008b00:	db37      	blt.n	8008b72 <__lshift+0xbe>
 8008b02:	6920      	ldr	r0, [r4, #16]
 8008b04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b08:	f104 0314 	add.w	r3, r4, #20
 8008b0c:	f019 091f 	ands.w	r9, r9, #31
 8008b10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b18:	d02f      	beq.n	8008b7a <__lshift+0xc6>
 8008b1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008b1e:	468a      	mov	sl, r1
 8008b20:	f04f 0c00 	mov.w	ip, #0
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	fa02 f209 	lsl.w	r2, r2, r9
 8008b2a:	ea42 020c 	orr.w	r2, r2, ip
 8008b2e:	f84a 2b04 	str.w	r2, [sl], #4
 8008b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b36:	4298      	cmp	r0, r3
 8008b38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b3c:	d8f2      	bhi.n	8008b24 <__lshift+0x70>
 8008b3e:	1b03      	subs	r3, r0, r4
 8008b40:	3b15      	subs	r3, #21
 8008b42:	f023 0303 	bic.w	r3, r3, #3
 8008b46:	3304      	adds	r3, #4
 8008b48:	f104 0215 	add.w	r2, r4, #21
 8008b4c:	4290      	cmp	r0, r2
 8008b4e:	bf38      	it	cc
 8008b50:	2304      	movcc	r3, #4
 8008b52:	f841 c003 	str.w	ip, [r1, r3]
 8008b56:	f1bc 0f00 	cmp.w	ip, #0
 8008b5a:	d001      	beq.n	8008b60 <__lshift+0xac>
 8008b5c:	f108 0602 	add.w	r6, r8, #2
 8008b60:	3e01      	subs	r6, #1
 8008b62:	4638      	mov	r0, r7
 8008b64:	612e      	str	r6, [r5, #16]
 8008b66:	4621      	mov	r1, r4
 8008b68:	f7ff fdd2 	bl	8008710 <_Bfree>
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b72:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b76:	3301      	adds	r3, #1
 8008b78:	e7c1      	b.n	8008afe <__lshift+0x4a>
 8008b7a:	3904      	subs	r1, #4
 8008b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b80:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b84:	4298      	cmp	r0, r3
 8008b86:	d8f9      	bhi.n	8008b7c <__lshift+0xc8>
 8008b88:	e7ea      	b.n	8008b60 <__lshift+0xac>
 8008b8a:	bf00      	nop
 8008b8c:	08009f77 	.word	0x08009f77
 8008b90:	08009f88 	.word	0x08009f88

08008b94 <__mcmp>:
 8008b94:	b530      	push	{r4, r5, lr}
 8008b96:	6902      	ldr	r2, [r0, #16]
 8008b98:	690c      	ldr	r4, [r1, #16]
 8008b9a:	1b12      	subs	r2, r2, r4
 8008b9c:	d10e      	bne.n	8008bbc <__mcmp+0x28>
 8008b9e:	f100 0314 	add.w	r3, r0, #20
 8008ba2:	3114      	adds	r1, #20
 8008ba4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ba8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bb4:	42a5      	cmp	r5, r4
 8008bb6:	d003      	beq.n	8008bc0 <__mcmp+0x2c>
 8008bb8:	d305      	bcc.n	8008bc6 <__mcmp+0x32>
 8008bba:	2201      	movs	r2, #1
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	bd30      	pop	{r4, r5, pc}
 8008bc0:	4283      	cmp	r3, r0
 8008bc2:	d3f3      	bcc.n	8008bac <__mcmp+0x18>
 8008bc4:	e7fa      	b.n	8008bbc <__mcmp+0x28>
 8008bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bca:	e7f7      	b.n	8008bbc <__mcmp+0x28>

08008bcc <__mdiff>:
 8008bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	4690      	mov	r8, r2
 8008bda:	f7ff ffdb 	bl	8008b94 <__mcmp>
 8008bde:	1e05      	subs	r5, r0, #0
 8008be0:	d110      	bne.n	8008c04 <__mdiff+0x38>
 8008be2:	4629      	mov	r1, r5
 8008be4:	4630      	mov	r0, r6
 8008be6:	f7ff fd53 	bl	8008690 <_Balloc>
 8008bea:	b930      	cbnz	r0, 8008bfa <__mdiff+0x2e>
 8008bec:	4b3a      	ldr	r3, [pc, #232]	; (8008cd8 <__mdiff+0x10c>)
 8008bee:	4602      	mov	r2, r0
 8008bf0:	f240 2132 	movw	r1, #562	; 0x232
 8008bf4:	4839      	ldr	r0, [pc, #228]	; (8008cdc <__mdiff+0x110>)
 8008bf6:	f000 fb31 	bl	800925c <__assert_func>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	bfa4      	itt	ge
 8008c06:	4643      	movge	r3, r8
 8008c08:	46a0      	movge	r8, r4
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c10:	bfa6      	itte	ge
 8008c12:	461c      	movge	r4, r3
 8008c14:	2500      	movge	r5, #0
 8008c16:	2501      	movlt	r5, #1
 8008c18:	f7ff fd3a 	bl	8008690 <_Balloc>
 8008c1c:	b920      	cbnz	r0, 8008c28 <__mdiff+0x5c>
 8008c1e:	4b2e      	ldr	r3, [pc, #184]	; (8008cd8 <__mdiff+0x10c>)
 8008c20:	4602      	mov	r2, r0
 8008c22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c26:	e7e5      	b.n	8008bf4 <__mdiff+0x28>
 8008c28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c2c:	6926      	ldr	r6, [r4, #16]
 8008c2e:	60c5      	str	r5, [r0, #12]
 8008c30:	f104 0914 	add.w	r9, r4, #20
 8008c34:	f108 0514 	add.w	r5, r8, #20
 8008c38:	f100 0e14 	add.w	lr, r0, #20
 8008c3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c44:	f108 0210 	add.w	r2, r8, #16
 8008c48:	46f2      	mov	sl, lr
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c54:	fa1f f883 	uxth.w	r8, r3
 8008c58:	fa11 f18b 	uxtah	r1, r1, fp
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	eba1 0808 	sub.w	r8, r1, r8
 8008c62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c6a:	fa1f f888 	uxth.w	r8, r8
 8008c6e:	1419      	asrs	r1, r3, #16
 8008c70:	454e      	cmp	r6, r9
 8008c72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c76:	f84a 3b04 	str.w	r3, [sl], #4
 8008c7a:	d8e7      	bhi.n	8008c4c <__mdiff+0x80>
 8008c7c:	1b33      	subs	r3, r6, r4
 8008c7e:	3b15      	subs	r3, #21
 8008c80:	f023 0303 	bic.w	r3, r3, #3
 8008c84:	3304      	adds	r3, #4
 8008c86:	3415      	adds	r4, #21
 8008c88:	42a6      	cmp	r6, r4
 8008c8a:	bf38      	it	cc
 8008c8c:	2304      	movcc	r3, #4
 8008c8e:	441d      	add	r5, r3
 8008c90:	4473      	add	r3, lr
 8008c92:	469e      	mov	lr, r3
 8008c94:	462e      	mov	r6, r5
 8008c96:	4566      	cmp	r6, ip
 8008c98:	d30e      	bcc.n	8008cb8 <__mdiff+0xec>
 8008c9a:	f10c 0203 	add.w	r2, ip, #3
 8008c9e:	1b52      	subs	r2, r2, r5
 8008ca0:	f022 0203 	bic.w	r2, r2, #3
 8008ca4:	3d03      	subs	r5, #3
 8008ca6:	45ac      	cmp	ip, r5
 8008ca8:	bf38      	it	cc
 8008caa:	2200      	movcc	r2, #0
 8008cac:	441a      	add	r2, r3
 8008cae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cb2:	b17b      	cbz	r3, 8008cd4 <__mdiff+0x108>
 8008cb4:	6107      	str	r7, [r0, #16]
 8008cb6:	e7a3      	b.n	8008c00 <__mdiff+0x34>
 8008cb8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cbc:	fa11 f288 	uxtah	r2, r1, r8
 8008cc0:	1414      	asrs	r4, r2, #16
 8008cc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cc6:	b292      	uxth	r2, r2
 8008cc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ccc:	f84e 2b04 	str.w	r2, [lr], #4
 8008cd0:	1421      	asrs	r1, r4, #16
 8008cd2:	e7e0      	b.n	8008c96 <__mdiff+0xca>
 8008cd4:	3f01      	subs	r7, #1
 8008cd6:	e7ea      	b.n	8008cae <__mdiff+0xe2>
 8008cd8:	08009f77 	.word	0x08009f77
 8008cdc:	08009f88 	.word	0x08009f88

08008ce0 <__d2b>:
 8008ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	ec57 6b10 	vmov	r6, r7, d0
 8008cec:	4690      	mov	r8, r2
 8008cee:	f7ff fccf 	bl	8008690 <_Balloc>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	b930      	cbnz	r0, 8008d04 <__d2b+0x24>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b25      	ldr	r3, [pc, #148]	; (8008d90 <__d2b+0xb0>)
 8008cfa:	4826      	ldr	r0, [pc, #152]	; (8008d94 <__d2b+0xb4>)
 8008cfc:	f240 310a 	movw	r1, #778	; 0x30a
 8008d00:	f000 faac 	bl	800925c <__assert_func>
 8008d04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d0c:	bb35      	cbnz	r5, 8008d5c <__d2b+0x7c>
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	d028      	beq.n	8008d66 <__d2b+0x86>
 8008d14:	4668      	mov	r0, sp
 8008d16:	9600      	str	r6, [sp, #0]
 8008d18:	f7ff fd82 	bl	8008820 <__lo0bits>
 8008d1c:	9900      	ldr	r1, [sp, #0]
 8008d1e:	b300      	cbz	r0, 8008d62 <__d2b+0x82>
 8008d20:	9a01      	ldr	r2, [sp, #4]
 8008d22:	f1c0 0320 	rsb	r3, r0, #32
 8008d26:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	40c2      	lsrs	r2, r0
 8008d2e:	6163      	str	r3, [r4, #20]
 8008d30:	9201      	str	r2, [sp, #4]
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	61a3      	str	r3, [r4, #24]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bf14      	ite	ne
 8008d3a:	2202      	movne	r2, #2
 8008d3c:	2201      	moveq	r2, #1
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	b1d5      	cbz	r5, 8008d78 <__d2b+0x98>
 8008d42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d46:	4405      	add	r5, r0
 8008d48:	f8c9 5000 	str.w	r5, [r9]
 8008d4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d50:	f8c8 0000 	str.w	r0, [r8]
 8008d54:	4620      	mov	r0, r4
 8008d56:	b003      	add	sp, #12
 8008d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d60:	e7d5      	b.n	8008d0e <__d2b+0x2e>
 8008d62:	6161      	str	r1, [r4, #20]
 8008d64:	e7e5      	b.n	8008d32 <__d2b+0x52>
 8008d66:	a801      	add	r0, sp, #4
 8008d68:	f7ff fd5a 	bl	8008820 <__lo0bits>
 8008d6c:	9b01      	ldr	r3, [sp, #4]
 8008d6e:	6163      	str	r3, [r4, #20]
 8008d70:	2201      	movs	r2, #1
 8008d72:	6122      	str	r2, [r4, #16]
 8008d74:	3020      	adds	r0, #32
 8008d76:	e7e3      	b.n	8008d40 <__d2b+0x60>
 8008d78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d80:	f8c9 0000 	str.w	r0, [r9]
 8008d84:	6918      	ldr	r0, [r3, #16]
 8008d86:	f7ff fd2b 	bl	80087e0 <__hi0bits>
 8008d8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d8e:	e7df      	b.n	8008d50 <__d2b+0x70>
 8008d90:	08009f77 	.word	0x08009f77
 8008d94:	08009f88 	.word	0x08009f88

08008d98 <_calloc_r>:
 8008d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d9a:	fba1 2402 	umull	r2, r4, r1, r2
 8008d9e:	b94c      	cbnz	r4, 8008db4 <_calloc_r+0x1c>
 8008da0:	4611      	mov	r1, r2
 8008da2:	9201      	str	r2, [sp, #4]
 8008da4:	f000 f87a 	bl	8008e9c <_malloc_r>
 8008da8:	9a01      	ldr	r2, [sp, #4]
 8008daa:	4605      	mov	r5, r0
 8008dac:	b930      	cbnz	r0, 8008dbc <_calloc_r+0x24>
 8008dae:	4628      	mov	r0, r5
 8008db0:	b003      	add	sp, #12
 8008db2:	bd30      	pop	{r4, r5, pc}
 8008db4:	220c      	movs	r2, #12
 8008db6:	6002      	str	r2, [r0, #0]
 8008db8:	2500      	movs	r5, #0
 8008dba:	e7f8      	b.n	8008dae <_calloc_r+0x16>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	f7fe f941 	bl	8007044 <memset>
 8008dc2:	e7f4      	b.n	8008dae <_calloc_r+0x16>

08008dc4 <_free_r>:
 8008dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d044      	beq.n	8008e54 <_free_r+0x90>
 8008dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dce:	9001      	str	r0, [sp, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dd6:	bfb8      	it	lt
 8008dd8:	18e4      	addlt	r4, r4, r3
 8008dda:	f000 fa9b 	bl	8009314 <__malloc_lock>
 8008dde:	4a1e      	ldr	r2, [pc, #120]	; (8008e58 <_free_r+0x94>)
 8008de0:	9801      	ldr	r0, [sp, #4]
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	b933      	cbnz	r3, 8008df4 <_free_r+0x30>
 8008de6:	6063      	str	r3, [r4, #4]
 8008de8:	6014      	str	r4, [r2, #0]
 8008dea:	b003      	add	sp, #12
 8008dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008df0:	f000 ba96 	b.w	8009320 <__malloc_unlock>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d908      	bls.n	8008e0a <_free_r+0x46>
 8008df8:	6825      	ldr	r5, [r4, #0]
 8008dfa:	1961      	adds	r1, r4, r5
 8008dfc:	428b      	cmp	r3, r1
 8008dfe:	bf01      	itttt	eq
 8008e00:	6819      	ldreq	r1, [r3, #0]
 8008e02:	685b      	ldreq	r3, [r3, #4]
 8008e04:	1949      	addeq	r1, r1, r5
 8008e06:	6021      	streq	r1, [r4, #0]
 8008e08:	e7ed      	b.n	8008de6 <_free_r+0x22>
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	b10b      	cbz	r3, 8008e14 <_free_r+0x50>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d9fa      	bls.n	8008e0a <_free_r+0x46>
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	1855      	adds	r5, r2, r1
 8008e18:	42a5      	cmp	r5, r4
 8008e1a:	d10b      	bne.n	8008e34 <_free_r+0x70>
 8008e1c:	6824      	ldr	r4, [r4, #0]
 8008e1e:	4421      	add	r1, r4
 8008e20:	1854      	adds	r4, r2, r1
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	d1e0      	bne.n	8008dea <_free_r+0x26>
 8008e28:	681c      	ldr	r4, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
 8008e2e:	4421      	add	r1, r4
 8008e30:	6011      	str	r1, [r2, #0]
 8008e32:	e7da      	b.n	8008dea <_free_r+0x26>
 8008e34:	d902      	bls.n	8008e3c <_free_r+0x78>
 8008e36:	230c      	movs	r3, #12
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	e7d6      	b.n	8008dea <_free_r+0x26>
 8008e3c:	6825      	ldr	r5, [r4, #0]
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf04      	itt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	bf04      	itt	eq
 8008e4c:	1949      	addeq	r1, r1, r5
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	6054      	str	r4, [r2, #4]
 8008e52:	e7ca      	b.n	8008dea <_free_r+0x26>
 8008e54:	b003      	add	sp, #12
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	200005e8 	.word	0x200005e8

08008e5c <sbrk_aligned>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4e0e      	ldr	r6, [pc, #56]	; (8008e98 <sbrk_aligned+0x3c>)
 8008e60:	460c      	mov	r4, r1
 8008e62:	6831      	ldr	r1, [r6, #0]
 8008e64:	4605      	mov	r5, r0
 8008e66:	b911      	cbnz	r1, 8008e6e <sbrk_aligned+0x12>
 8008e68:	f000 f9e8 	bl	800923c <_sbrk_r>
 8008e6c:	6030      	str	r0, [r6, #0]
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f000 f9e3 	bl	800923c <_sbrk_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d00a      	beq.n	8008e90 <sbrk_aligned+0x34>
 8008e7a:	1cc4      	adds	r4, r0, #3
 8008e7c:	f024 0403 	bic.w	r4, r4, #3
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d007      	beq.n	8008e94 <sbrk_aligned+0x38>
 8008e84:	1a21      	subs	r1, r4, r0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 f9d8 	bl	800923c <_sbrk_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d101      	bne.n	8008e94 <sbrk_aligned+0x38>
 8008e90:	f04f 34ff 	mov.w	r4, #4294967295
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	200005ec 	.word	0x200005ec

08008e9c <_malloc_r>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	1ccd      	adds	r5, r1, #3
 8008ea2:	f025 0503 	bic.w	r5, r5, #3
 8008ea6:	3508      	adds	r5, #8
 8008ea8:	2d0c      	cmp	r5, #12
 8008eaa:	bf38      	it	cc
 8008eac:	250c      	movcc	r5, #12
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	db01      	blt.n	8008eb8 <_malloc_r+0x1c>
 8008eb4:	42a9      	cmp	r1, r5
 8008eb6:	d905      	bls.n	8008ec4 <_malloc_r+0x28>
 8008eb8:	230c      	movs	r3, #12
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	4e2e      	ldr	r6, [pc, #184]	; (8008f80 <_malloc_r+0xe4>)
 8008ec6:	f000 fa25 	bl	8009314 <__malloc_lock>
 8008eca:	6833      	ldr	r3, [r6, #0]
 8008ecc:	461c      	mov	r4, r3
 8008ece:	bb34      	cbnz	r4, 8008f1e <_malloc_r+0x82>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	f7ff ffc2 	bl	8008e5c <sbrk_aligned>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	4604      	mov	r4, r0
 8008edc:	d14d      	bne.n	8008f7a <_malloc_r+0xde>
 8008ede:	6834      	ldr	r4, [r6, #0]
 8008ee0:	4626      	mov	r6, r4
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	d140      	bne.n	8008f68 <_malloc_r+0xcc>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4638      	mov	r0, r7
 8008eec:	eb04 0803 	add.w	r8, r4, r3
 8008ef0:	f000 f9a4 	bl	800923c <_sbrk_r>
 8008ef4:	4580      	cmp	r8, r0
 8008ef6:	d13a      	bne.n	8008f6e <_malloc_r+0xd2>
 8008ef8:	6821      	ldr	r1, [r4, #0]
 8008efa:	3503      	adds	r5, #3
 8008efc:	1a6d      	subs	r5, r5, r1
 8008efe:	f025 0503 	bic.w	r5, r5, #3
 8008f02:	3508      	adds	r5, #8
 8008f04:	2d0c      	cmp	r5, #12
 8008f06:	bf38      	it	cc
 8008f08:	250c      	movcc	r5, #12
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff ffa5 	bl	8008e5c <sbrk_aligned>
 8008f12:	3001      	adds	r0, #1
 8008f14:	d02b      	beq.n	8008f6e <_malloc_r+0xd2>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	442b      	add	r3, r5
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	e00e      	b.n	8008f3c <_malloc_r+0xa0>
 8008f1e:	6822      	ldr	r2, [r4, #0]
 8008f20:	1b52      	subs	r2, r2, r5
 8008f22:	d41e      	bmi.n	8008f62 <_malloc_r+0xc6>
 8008f24:	2a0b      	cmp	r2, #11
 8008f26:	d916      	bls.n	8008f56 <_malloc_r+0xba>
 8008f28:	1961      	adds	r1, r4, r5
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	6025      	str	r5, [r4, #0]
 8008f2e:	bf18      	it	ne
 8008f30:	6059      	strne	r1, [r3, #4]
 8008f32:	6863      	ldr	r3, [r4, #4]
 8008f34:	bf08      	it	eq
 8008f36:	6031      	streq	r1, [r6, #0]
 8008f38:	5162      	str	r2, [r4, r5]
 8008f3a:	604b      	str	r3, [r1, #4]
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f104 060b 	add.w	r6, r4, #11
 8008f42:	f000 f9ed 	bl	8009320 <__malloc_unlock>
 8008f46:	f026 0607 	bic.w	r6, r6, #7
 8008f4a:	1d23      	adds	r3, r4, #4
 8008f4c:	1af2      	subs	r2, r6, r3
 8008f4e:	d0b6      	beq.n	8008ebe <_malloc_r+0x22>
 8008f50:	1b9b      	subs	r3, r3, r6
 8008f52:	50a3      	str	r3, [r4, r2]
 8008f54:	e7b3      	b.n	8008ebe <_malloc_r+0x22>
 8008f56:	6862      	ldr	r2, [r4, #4]
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	bf0c      	ite	eq
 8008f5c:	6032      	streq	r2, [r6, #0]
 8008f5e:	605a      	strne	r2, [r3, #4]
 8008f60:	e7ec      	b.n	8008f3c <_malloc_r+0xa0>
 8008f62:	4623      	mov	r3, r4
 8008f64:	6864      	ldr	r4, [r4, #4]
 8008f66:	e7b2      	b.n	8008ece <_malloc_r+0x32>
 8008f68:	4634      	mov	r4, r6
 8008f6a:	6876      	ldr	r6, [r6, #4]
 8008f6c:	e7b9      	b.n	8008ee2 <_malloc_r+0x46>
 8008f6e:	230c      	movs	r3, #12
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	4638      	mov	r0, r7
 8008f74:	f000 f9d4 	bl	8009320 <__malloc_unlock>
 8008f78:	e7a1      	b.n	8008ebe <_malloc_r+0x22>
 8008f7a:	6025      	str	r5, [r4, #0]
 8008f7c:	e7de      	b.n	8008f3c <_malloc_r+0xa0>
 8008f7e:	bf00      	nop
 8008f80:	200005e8 	.word	0x200005e8

08008f84 <__ssputs_r>:
 8008f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	688e      	ldr	r6, [r1, #8]
 8008f8a:	429e      	cmp	r6, r3
 8008f8c:	4682      	mov	sl, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4690      	mov	r8, r2
 8008f92:	461f      	mov	r7, r3
 8008f94:	d838      	bhi.n	8009008 <__ssputs_r+0x84>
 8008f96:	898a      	ldrh	r2, [r1, #12]
 8008f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f9c:	d032      	beq.n	8009004 <__ssputs_r+0x80>
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	6909      	ldr	r1, [r1, #16]
 8008fa2:	eba5 0901 	sub.w	r9, r5, r1
 8008fa6:	6965      	ldr	r5, [r4, #20]
 8008fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	444b      	add	r3, r9
 8008fb4:	106d      	asrs	r5, r5, #1
 8008fb6:	429d      	cmp	r5, r3
 8008fb8:	bf38      	it	cc
 8008fba:	461d      	movcc	r5, r3
 8008fbc:	0553      	lsls	r3, r2, #21
 8008fbe:	d531      	bpl.n	8009024 <__ssputs_r+0xa0>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f7ff ff6b 	bl	8008e9c <_malloc_r>
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	b950      	cbnz	r0, 8008fe0 <__ssputs_r+0x5c>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	f8ca 3000 	str.w	r3, [sl]
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	6921      	ldr	r1, [r4, #16]
 8008fe2:	464a      	mov	r2, r9
 8008fe4:	f7ff fb46 	bl	8008674 <memcpy>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	6126      	str	r6, [r4, #16]
 8008ff6:	6165      	str	r5, [r4, #20]
 8008ff8:	444e      	add	r6, r9
 8008ffa:	eba5 0509 	sub.w	r5, r5, r9
 8008ffe:	6026      	str	r6, [r4, #0]
 8009000:	60a5      	str	r5, [r4, #8]
 8009002:	463e      	mov	r6, r7
 8009004:	42be      	cmp	r6, r7
 8009006:	d900      	bls.n	800900a <__ssputs_r+0x86>
 8009008:	463e      	mov	r6, r7
 800900a:	6820      	ldr	r0, [r4, #0]
 800900c:	4632      	mov	r2, r6
 800900e:	4641      	mov	r1, r8
 8009010:	f000 f966 	bl	80092e0 <memmove>
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	1b9b      	subs	r3, r3, r6
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	4433      	add	r3, r6
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	2000      	movs	r0, #0
 8009022:	e7db      	b.n	8008fdc <__ssputs_r+0x58>
 8009024:	462a      	mov	r2, r5
 8009026:	f000 f981 	bl	800932c <_realloc_r>
 800902a:	4606      	mov	r6, r0
 800902c:	2800      	cmp	r0, #0
 800902e:	d1e1      	bne.n	8008ff4 <__ssputs_r+0x70>
 8009030:	6921      	ldr	r1, [r4, #16]
 8009032:	4650      	mov	r0, sl
 8009034:	f7ff fec6 	bl	8008dc4 <_free_r>
 8009038:	e7c7      	b.n	8008fca <__ssputs_r+0x46>
	...

0800903c <_svfiprintf_r>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	4698      	mov	r8, r3
 8009042:	898b      	ldrh	r3, [r1, #12]
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	b09d      	sub	sp, #116	; 0x74
 8009048:	4607      	mov	r7, r0
 800904a:	460d      	mov	r5, r1
 800904c:	4614      	mov	r4, r2
 800904e:	d50e      	bpl.n	800906e <_svfiprintf_r+0x32>
 8009050:	690b      	ldr	r3, [r1, #16]
 8009052:	b963      	cbnz	r3, 800906e <_svfiprintf_r+0x32>
 8009054:	2140      	movs	r1, #64	; 0x40
 8009056:	f7ff ff21 	bl	8008e9c <_malloc_r>
 800905a:	6028      	str	r0, [r5, #0]
 800905c:	6128      	str	r0, [r5, #16]
 800905e:	b920      	cbnz	r0, 800906a <_svfiprintf_r+0x2e>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	e0d1      	b.n	800920e <_svfiprintf_r+0x1d2>
 800906a:	2340      	movs	r3, #64	; 0x40
 800906c:	616b      	str	r3, [r5, #20]
 800906e:	2300      	movs	r3, #0
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	2320      	movs	r3, #32
 8009074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009078:	f8cd 800c 	str.w	r8, [sp, #12]
 800907c:	2330      	movs	r3, #48	; 0x30
 800907e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009228 <_svfiprintf_r+0x1ec>
 8009082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009086:	f04f 0901 	mov.w	r9, #1
 800908a:	4623      	mov	r3, r4
 800908c:	469a      	mov	sl, r3
 800908e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009092:	b10a      	cbz	r2, 8009098 <_svfiprintf_r+0x5c>
 8009094:	2a25      	cmp	r2, #37	; 0x25
 8009096:	d1f9      	bne.n	800908c <_svfiprintf_r+0x50>
 8009098:	ebba 0b04 	subs.w	fp, sl, r4
 800909c:	d00b      	beq.n	80090b6 <_svfiprintf_r+0x7a>
 800909e:	465b      	mov	r3, fp
 80090a0:	4622      	mov	r2, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	4638      	mov	r0, r7
 80090a6:	f7ff ff6d 	bl	8008f84 <__ssputs_r>
 80090aa:	3001      	adds	r0, #1
 80090ac:	f000 80aa 	beq.w	8009204 <_svfiprintf_r+0x1c8>
 80090b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b2:	445a      	add	r2, fp
 80090b4:	9209      	str	r2, [sp, #36]	; 0x24
 80090b6:	f89a 3000 	ldrb.w	r3, [sl]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 80a2 	beq.w	8009204 <_svfiprintf_r+0x1c8>
 80090c0:	2300      	movs	r3, #0
 80090c2:	f04f 32ff 	mov.w	r2, #4294967295
 80090c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ca:	f10a 0a01 	add.w	sl, sl, #1
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	9307      	str	r3, [sp, #28]
 80090d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d6:	931a      	str	r3, [sp, #104]	; 0x68
 80090d8:	4654      	mov	r4, sl
 80090da:	2205      	movs	r2, #5
 80090dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e0:	4851      	ldr	r0, [pc, #324]	; (8009228 <_svfiprintf_r+0x1ec>)
 80090e2:	f7f7 f89d 	bl	8000220 <memchr>
 80090e6:	9a04      	ldr	r2, [sp, #16]
 80090e8:	b9d8      	cbnz	r0, 8009122 <_svfiprintf_r+0xe6>
 80090ea:	06d0      	lsls	r0, r2, #27
 80090ec:	bf44      	itt	mi
 80090ee:	2320      	movmi	r3, #32
 80090f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f4:	0711      	lsls	r1, r2, #28
 80090f6:	bf44      	itt	mi
 80090f8:	232b      	movmi	r3, #43	; 0x2b
 80090fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009102:	2b2a      	cmp	r3, #42	; 0x2a
 8009104:	d015      	beq.n	8009132 <_svfiprintf_r+0xf6>
 8009106:	9a07      	ldr	r2, [sp, #28]
 8009108:	4654      	mov	r4, sl
 800910a:	2000      	movs	r0, #0
 800910c:	f04f 0c0a 	mov.w	ip, #10
 8009110:	4621      	mov	r1, r4
 8009112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009116:	3b30      	subs	r3, #48	; 0x30
 8009118:	2b09      	cmp	r3, #9
 800911a:	d94e      	bls.n	80091ba <_svfiprintf_r+0x17e>
 800911c:	b1b0      	cbz	r0, 800914c <_svfiprintf_r+0x110>
 800911e:	9207      	str	r2, [sp, #28]
 8009120:	e014      	b.n	800914c <_svfiprintf_r+0x110>
 8009122:	eba0 0308 	sub.w	r3, r0, r8
 8009126:	fa09 f303 	lsl.w	r3, r9, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	46a2      	mov	sl, r4
 8009130:	e7d2      	b.n	80090d8 <_svfiprintf_r+0x9c>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	1d19      	adds	r1, r3, #4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	9103      	str	r1, [sp, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfbb      	ittet	lt
 800913e:	425b      	neglt	r3, r3
 8009140:	f042 0202 	orrlt.w	r2, r2, #2
 8009144:	9307      	strge	r3, [sp, #28]
 8009146:	9307      	strlt	r3, [sp, #28]
 8009148:	bfb8      	it	lt
 800914a:	9204      	strlt	r2, [sp, #16]
 800914c:	7823      	ldrb	r3, [r4, #0]
 800914e:	2b2e      	cmp	r3, #46	; 0x2e
 8009150:	d10c      	bne.n	800916c <_svfiprintf_r+0x130>
 8009152:	7863      	ldrb	r3, [r4, #1]
 8009154:	2b2a      	cmp	r3, #42	; 0x2a
 8009156:	d135      	bne.n	80091c4 <_svfiprintf_r+0x188>
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	9203      	str	r2, [sp, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfb8      	it	lt
 8009164:	f04f 33ff 	movlt.w	r3, #4294967295
 8009168:	3402      	adds	r4, #2
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009238 <_svfiprintf_r+0x1fc>
 8009170:	7821      	ldrb	r1, [r4, #0]
 8009172:	2203      	movs	r2, #3
 8009174:	4650      	mov	r0, sl
 8009176:	f7f7 f853 	bl	8000220 <memchr>
 800917a:	b140      	cbz	r0, 800918e <_svfiprintf_r+0x152>
 800917c:	2340      	movs	r3, #64	; 0x40
 800917e:	eba0 000a 	sub.w	r0, r0, sl
 8009182:	fa03 f000 	lsl.w	r0, r3, r0
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	4303      	orrs	r3, r0
 800918a:	3401      	adds	r4, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	4826      	ldr	r0, [pc, #152]	; (800922c <_svfiprintf_r+0x1f0>)
 8009194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009198:	2206      	movs	r2, #6
 800919a:	f7f7 f841 	bl	8000220 <memchr>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d038      	beq.n	8009214 <_svfiprintf_r+0x1d8>
 80091a2:	4b23      	ldr	r3, [pc, #140]	; (8009230 <_svfiprintf_r+0x1f4>)
 80091a4:	bb1b      	cbnz	r3, 80091ee <_svfiprintf_r+0x1b2>
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	3307      	adds	r3, #7
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	3308      	adds	r3, #8
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b4:	4433      	add	r3, r6
 80091b6:	9309      	str	r3, [sp, #36]	; 0x24
 80091b8:	e767      	b.n	800908a <_svfiprintf_r+0x4e>
 80091ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80091be:	460c      	mov	r4, r1
 80091c0:	2001      	movs	r0, #1
 80091c2:	e7a5      	b.n	8009110 <_svfiprintf_r+0xd4>
 80091c4:	2300      	movs	r3, #0
 80091c6:	3401      	adds	r4, #1
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	4619      	mov	r1, r3
 80091cc:	f04f 0c0a 	mov.w	ip, #10
 80091d0:	4620      	mov	r0, r4
 80091d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d6:	3a30      	subs	r2, #48	; 0x30
 80091d8:	2a09      	cmp	r2, #9
 80091da:	d903      	bls.n	80091e4 <_svfiprintf_r+0x1a8>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0c5      	beq.n	800916c <_svfiprintf_r+0x130>
 80091e0:	9105      	str	r1, [sp, #20]
 80091e2:	e7c3      	b.n	800916c <_svfiprintf_r+0x130>
 80091e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e8:	4604      	mov	r4, r0
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7f0      	b.n	80091d0 <_svfiprintf_r+0x194>
 80091ee:	ab03      	add	r3, sp, #12
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	462a      	mov	r2, r5
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <_svfiprintf_r+0x1f8>)
 80091f6:	a904      	add	r1, sp, #16
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7fd ffcb 	bl	8007194 <_printf_float>
 80091fe:	1c42      	adds	r2, r0, #1
 8009200:	4606      	mov	r6, r0
 8009202:	d1d6      	bne.n	80091b2 <_svfiprintf_r+0x176>
 8009204:	89ab      	ldrh	r3, [r5, #12]
 8009206:	065b      	lsls	r3, r3, #25
 8009208:	f53f af2c 	bmi.w	8009064 <_svfiprintf_r+0x28>
 800920c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800920e:	b01d      	add	sp, #116	; 0x74
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	462a      	mov	r2, r5
 800921a:	4b06      	ldr	r3, [pc, #24]	; (8009234 <_svfiprintf_r+0x1f8>)
 800921c:	a904      	add	r1, sp, #16
 800921e:	4638      	mov	r0, r7
 8009220:	f7fe fa5c 	bl	80076dc <_printf_i>
 8009224:	e7eb      	b.n	80091fe <_svfiprintf_r+0x1c2>
 8009226:	bf00      	nop
 8009228:	0800a0e4 	.word	0x0800a0e4
 800922c:	0800a0ee 	.word	0x0800a0ee
 8009230:	08007195 	.word	0x08007195
 8009234:	08008f85 	.word	0x08008f85
 8009238:	0800a0ea 	.word	0x0800a0ea

0800923c <_sbrk_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d06      	ldr	r5, [pc, #24]	; (8009258 <_sbrk_r+0x1c>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	f7f9 fb02 	bl	8002850 <_sbrk>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_sbrk_r+0x1a>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_sbrk_r+0x1a>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	200005f0 	.word	0x200005f0

0800925c <__assert_func>:
 800925c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800925e:	4614      	mov	r4, r2
 8009260:	461a      	mov	r2, r3
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <__assert_func+0x2c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4605      	mov	r5, r0
 8009268:	68d8      	ldr	r0, [r3, #12]
 800926a:	b14c      	cbz	r4, 8009280 <__assert_func+0x24>
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <__assert_func+0x30>)
 800926e:	9100      	str	r1, [sp, #0]
 8009270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009274:	4906      	ldr	r1, [pc, #24]	; (8009290 <__assert_func+0x34>)
 8009276:	462b      	mov	r3, r5
 8009278:	f000 f80e 	bl	8009298 <fiprintf>
 800927c:	f000 faac 	bl	80097d8 <abort>
 8009280:	4b04      	ldr	r3, [pc, #16]	; (8009294 <__assert_func+0x38>)
 8009282:	461c      	mov	r4, r3
 8009284:	e7f3      	b.n	800926e <__assert_func+0x12>
 8009286:	bf00      	nop
 8009288:	20000010 	.word	0x20000010
 800928c:	0800a0f5 	.word	0x0800a0f5
 8009290:	0800a102 	.word	0x0800a102
 8009294:	0800a130 	.word	0x0800a130

08009298 <fiprintf>:
 8009298:	b40e      	push	{r1, r2, r3}
 800929a:	b503      	push	{r0, r1, lr}
 800929c:	4601      	mov	r1, r0
 800929e:	ab03      	add	r3, sp, #12
 80092a0:	4805      	ldr	r0, [pc, #20]	; (80092b8 <fiprintf+0x20>)
 80092a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a6:	6800      	ldr	r0, [r0, #0]
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	f000 f897 	bl	80093dc <_vfiprintf_r>
 80092ae:	b002      	add	sp, #8
 80092b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b4:	b003      	add	sp, #12
 80092b6:	4770      	bx	lr
 80092b8:	20000010 	.word	0x20000010

080092bc <__ascii_mbtowc>:
 80092bc:	b082      	sub	sp, #8
 80092be:	b901      	cbnz	r1, 80092c2 <__ascii_mbtowc+0x6>
 80092c0:	a901      	add	r1, sp, #4
 80092c2:	b142      	cbz	r2, 80092d6 <__ascii_mbtowc+0x1a>
 80092c4:	b14b      	cbz	r3, 80092da <__ascii_mbtowc+0x1e>
 80092c6:	7813      	ldrb	r3, [r2, #0]
 80092c8:	600b      	str	r3, [r1, #0]
 80092ca:	7812      	ldrb	r2, [r2, #0]
 80092cc:	1e10      	subs	r0, r2, #0
 80092ce:	bf18      	it	ne
 80092d0:	2001      	movne	r0, #1
 80092d2:	b002      	add	sp, #8
 80092d4:	4770      	bx	lr
 80092d6:	4610      	mov	r0, r2
 80092d8:	e7fb      	b.n	80092d2 <__ascii_mbtowc+0x16>
 80092da:	f06f 0001 	mvn.w	r0, #1
 80092de:	e7f8      	b.n	80092d2 <__ascii_mbtowc+0x16>

080092e0 <memmove>:
 80092e0:	4288      	cmp	r0, r1
 80092e2:	b510      	push	{r4, lr}
 80092e4:	eb01 0402 	add.w	r4, r1, r2
 80092e8:	d902      	bls.n	80092f0 <memmove+0x10>
 80092ea:	4284      	cmp	r4, r0
 80092ec:	4623      	mov	r3, r4
 80092ee:	d807      	bhi.n	8009300 <memmove+0x20>
 80092f0:	1e43      	subs	r3, r0, #1
 80092f2:	42a1      	cmp	r1, r4
 80092f4:	d008      	beq.n	8009308 <memmove+0x28>
 80092f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092fe:	e7f8      	b.n	80092f2 <memmove+0x12>
 8009300:	4402      	add	r2, r0
 8009302:	4601      	mov	r1, r0
 8009304:	428a      	cmp	r2, r1
 8009306:	d100      	bne.n	800930a <memmove+0x2a>
 8009308:	bd10      	pop	{r4, pc}
 800930a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800930e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009312:	e7f7      	b.n	8009304 <memmove+0x24>

08009314 <__malloc_lock>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__malloc_lock+0x8>)
 8009316:	f000 bc1f 	b.w	8009b58 <__retarget_lock_acquire_recursive>
 800931a:	bf00      	nop
 800931c:	200005f4 	.word	0x200005f4

08009320 <__malloc_unlock>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__malloc_unlock+0x8>)
 8009322:	f000 bc1a 	b.w	8009b5a <__retarget_lock_release_recursive>
 8009326:	bf00      	nop
 8009328:	200005f4 	.word	0x200005f4

0800932c <_realloc_r>:
 800932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	4680      	mov	r8, r0
 8009332:	4614      	mov	r4, r2
 8009334:	460e      	mov	r6, r1
 8009336:	b921      	cbnz	r1, 8009342 <_realloc_r+0x16>
 8009338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800933c:	4611      	mov	r1, r2
 800933e:	f7ff bdad 	b.w	8008e9c <_malloc_r>
 8009342:	b92a      	cbnz	r2, 8009350 <_realloc_r+0x24>
 8009344:	f7ff fd3e 	bl	8008dc4 <_free_r>
 8009348:	4625      	mov	r5, r4
 800934a:	4628      	mov	r0, r5
 800934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009350:	f000 fc6a 	bl	8009c28 <_malloc_usable_size_r>
 8009354:	4284      	cmp	r4, r0
 8009356:	4607      	mov	r7, r0
 8009358:	d802      	bhi.n	8009360 <_realloc_r+0x34>
 800935a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800935e:	d812      	bhi.n	8009386 <_realloc_r+0x5a>
 8009360:	4621      	mov	r1, r4
 8009362:	4640      	mov	r0, r8
 8009364:	f7ff fd9a 	bl	8008e9c <_malloc_r>
 8009368:	4605      	mov	r5, r0
 800936a:	2800      	cmp	r0, #0
 800936c:	d0ed      	beq.n	800934a <_realloc_r+0x1e>
 800936e:	42bc      	cmp	r4, r7
 8009370:	4622      	mov	r2, r4
 8009372:	4631      	mov	r1, r6
 8009374:	bf28      	it	cs
 8009376:	463a      	movcs	r2, r7
 8009378:	f7ff f97c 	bl	8008674 <memcpy>
 800937c:	4631      	mov	r1, r6
 800937e:	4640      	mov	r0, r8
 8009380:	f7ff fd20 	bl	8008dc4 <_free_r>
 8009384:	e7e1      	b.n	800934a <_realloc_r+0x1e>
 8009386:	4635      	mov	r5, r6
 8009388:	e7df      	b.n	800934a <_realloc_r+0x1e>

0800938a <__sfputc_r>:
 800938a:	6893      	ldr	r3, [r2, #8]
 800938c:	3b01      	subs	r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	b410      	push	{r4}
 8009392:	6093      	str	r3, [r2, #8]
 8009394:	da08      	bge.n	80093a8 <__sfputc_r+0x1e>
 8009396:	6994      	ldr	r4, [r2, #24]
 8009398:	42a3      	cmp	r3, r4
 800939a:	db01      	blt.n	80093a0 <__sfputc_r+0x16>
 800939c:	290a      	cmp	r1, #10
 800939e:	d103      	bne.n	80093a8 <__sfputc_r+0x1e>
 80093a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093a4:	f000 b94a 	b.w	800963c <__swbuf_r>
 80093a8:	6813      	ldr	r3, [r2, #0]
 80093aa:	1c58      	adds	r0, r3, #1
 80093ac:	6010      	str	r0, [r2, #0]
 80093ae:	7019      	strb	r1, [r3, #0]
 80093b0:	4608      	mov	r0, r1
 80093b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <__sfputs_r>:
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ba:	4606      	mov	r6, r0
 80093bc:	460f      	mov	r7, r1
 80093be:	4614      	mov	r4, r2
 80093c0:	18d5      	adds	r5, r2, r3
 80093c2:	42ac      	cmp	r4, r5
 80093c4:	d101      	bne.n	80093ca <__sfputs_r+0x12>
 80093c6:	2000      	movs	r0, #0
 80093c8:	e007      	b.n	80093da <__sfputs_r+0x22>
 80093ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ce:	463a      	mov	r2, r7
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7ff ffda 	bl	800938a <__sfputc_r>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d1f3      	bne.n	80093c2 <__sfputs_r+0xa>
 80093da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093dc <_vfiprintf_r>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	460d      	mov	r5, r1
 80093e2:	b09d      	sub	sp, #116	; 0x74
 80093e4:	4614      	mov	r4, r2
 80093e6:	4698      	mov	r8, r3
 80093e8:	4606      	mov	r6, r0
 80093ea:	b118      	cbz	r0, 80093f4 <_vfiprintf_r+0x18>
 80093ec:	6983      	ldr	r3, [r0, #24]
 80093ee:	b90b      	cbnz	r3, 80093f4 <_vfiprintf_r+0x18>
 80093f0:	f000 fb14 	bl	8009a1c <__sinit>
 80093f4:	4b89      	ldr	r3, [pc, #548]	; (800961c <_vfiprintf_r+0x240>)
 80093f6:	429d      	cmp	r5, r3
 80093f8:	d11b      	bne.n	8009432 <_vfiprintf_r+0x56>
 80093fa:	6875      	ldr	r5, [r6, #4]
 80093fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d405      	bmi.n	800940e <_vfiprintf_r+0x32>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	059a      	lsls	r2, r3, #22
 8009406:	d402      	bmi.n	800940e <_vfiprintf_r+0x32>
 8009408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800940a:	f000 fba5 	bl	8009b58 <__retarget_lock_acquire_recursive>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	071b      	lsls	r3, r3, #28
 8009412:	d501      	bpl.n	8009418 <_vfiprintf_r+0x3c>
 8009414:	692b      	ldr	r3, [r5, #16]
 8009416:	b9eb      	cbnz	r3, 8009454 <_vfiprintf_r+0x78>
 8009418:	4629      	mov	r1, r5
 800941a:	4630      	mov	r0, r6
 800941c:	f000 f96e 	bl	80096fc <__swsetup_r>
 8009420:	b1c0      	cbz	r0, 8009454 <_vfiprintf_r+0x78>
 8009422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009424:	07dc      	lsls	r4, r3, #31
 8009426:	d50e      	bpl.n	8009446 <_vfiprintf_r+0x6a>
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	b01d      	add	sp, #116	; 0x74
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	4b7b      	ldr	r3, [pc, #492]	; (8009620 <_vfiprintf_r+0x244>)
 8009434:	429d      	cmp	r5, r3
 8009436:	d101      	bne.n	800943c <_vfiprintf_r+0x60>
 8009438:	68b5      	ldr	r5, [r6, #8]
 800943a:	e7df      	b.n	80093fc <_vfiprintf_r+0x20>
 800943c:	4b79      	ldr	r3, [pc, #484]	; (8009624 <_vfiprintf_r+0x248>)
 800943e:	429d      	cmp	r5, r3
 8009440:	bf08      	it	eq
 8009442:	68f5      	ldreq	r5, [r6, #12]
 8009444:	e7da      	b.n	80093fc <_vfiprintf_r+0x20>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	0598      	lsls	r0, r3, #22
 800944a:	d4ed      	bmi.n	8009428 <_vfiprintf_r+0x4c>
 800944c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800944e:	f000 fb84 	bl	8009b5a <__retarget_lock_release_recursive>
 8009452:	e7e9      	b.n	8009428 <_vfiprintf_r+0x4c>
 8009454:	2300      	movs	r3, #0
 8009456:	9309      	str	r3, [sp, #36]	; 0x24
 8009458:	2320      	movs	r3, #32
 800945a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800945e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009462:	2330      	movs	r3, #48	; 0x30
 8009464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009628 <_vfiprintf_r+0x24c>
 8009468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800946c:	f04f 0901 	mov.w	r9, #1
 8009470:	4623      	mov	r3, r4
 8009472:	469a      	mov	sl, r3
 8009474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009478:	b10a      	cbz	r2, 800947e <_vfiprintf_r+0xa2>
 800947a:	2a25      	cmp	r2, #37	; 0x25
 800947c:	d1f9      	bne.n	8009472 <_vfiprintf_r+0x96>
 800947e:	ebba 0b04 	subs.w	fp, sl, r4
 8009482:	d00b      	beq.n	800949c <_vfiprintf_r+0xc0>
 8009484:	465b      	mov	r3, fp
 8009486:	4622      	mov	r2, r4
 8009488:	4629      	mov	r1, r5
 800948a:	4630      	mov	r0, r6
 800948c:	f7ff ff94 	bl	80093b8 <__sfputs_r>
 8009490:	3001      	adds	r0, #1
 8009492:	f000 80aa 	beq.w	80095ea <_vfiprintf_r+0x20e>
 8009496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009498:	445a      	add	r2, fp
 800949a:	9209      	str	r2, [sp, #36]	; 0x24
 800949c:	f89a 3000 	ldrb.w	r3, [sl]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 80a2 	beq.w	80095ea <_vfiprintf_r+0x20e>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f04f 32ff 	mov.w	r2, #4294967295
 80094ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b0:	f10a 0a01 	add.w	sl, sl, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	9307      	str	r3, [sp, #28]
 80094b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094bc:	931a      	str	r3, [sp, #104]	; 0x68
 80094be:	4654      	mov	r4, sl
 80094c0:	2205      	movs	r2, #5
 80094c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c6:	4858      	ldr	r0, [pc, #352]	; (8009628 <_vfiprintf_r+0x24c>)
 80094c8:	f7f6 feaa 	bl	8000220 <memchr>
 80094cc:	9a04      	ldr	r2, [sp, #16]
 80094ce:	b9d8      	cbnz	r0, 8009508 <_vfiprintf_r+0x12c>
 80094d0:	06d1      	lsls	r1, r2, #27
 80094d2:	bf44      	itt	mi
 80094d4:	2320      	movmi	r3, #32
 80094d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094da:	0713      	lsls	r3, r2, #28
 80094dc:	bf44      	itt	mi
 80094de:	232b      	movmi	r3, #43	; 0x2b
 80094e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e4:	f89a 3000 	ldrb.w	r3, [sl]
 80094e8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ea:	d015      	beq.n	8009518 <_vfiprintf_r+0x13c>
 80094ec:	9a07      	ldr	r2, [sp, #28]
 80094ee:	4654      	mov	r4, sl
 80094f0:	2000      	movs	r0, #0
 80094f2:	f04f 0c0a 	mov.w	ip, #10
 80094f6:	4621      	mov	r1, r4
 80094f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094fc:	3b30      	subs	r3, #48	; 0x30
 80094fe:	2b09      	cmp	r3, #9
 8009500:	d94e      	bls.n	80095a0 <_vfiprintf_r+0x1c4>
 8009502:	b1b0      	cbz	r0, 8009532 <_vfiprintf_r+0x156>
 8009504:	9207      	str	r2, [sp, #28]
 8009506:	e014      	b.n	8009532 <_vfiprintf_r+0x156>
 8009508:	eba0 0308 	sub.w	r3, r0, r8
 800950c:	fa09 f303 	lsl.w	r3, r9, r3
 8009510:	4313      	orrs	r3, r2
 8009512:	9304      	str	r3, [sp, #16]
 8009514:	46a2      	mov	sl, r4
 8009516:	e7d2      	b.n	80094be <_vfiprintf_r+0xe2>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	1d19      	adds	r1, r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	9103      	str	r1, [sp, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfbb      	ittet	lt
 8009524:	425b      	neglt	r3, r3
 8009526:	f042 0202 	orrlt.w	r2, r2, #2
 800952a:	9307      	strge	r3, [sp, #28]
 800952c:	9307      	strlt	r3, [sp, #28]
 800952e:	bfb8      	it	lt
 8009530:	9204      	strlt	r2, [sp, #16]
 8009532:	7823      	ldrb	r3, [r4, #0]
 8009534:	2b2e      	cmp	r3, #46	; 0x2e
 8009536:	d10c      	bne.n	8009552 <_vfiprintf_r+0x176>
 8009538:	7863      	ldrb	r3, [r4, #1]
 800953a:	2b2a      	cmp	r3, #42	; 0x2a
 800953c:	d135      	bne.n	80095aa <_vfiprintf_r+0x1ce>
 800953e:	9b03      	ldr	r3, [sp, #12]
 8009540:	1d1a      	adds	r2, r3, #4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	9203      	str	r2, [sp, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	bfb8      	it	lt
 800954a:	f04f 33ff 	movlt.w	r3, #4294967295
 800954e:	3402      	adds	r4, #2
 8009550:	9305      	str	r3, [sp, #20]
 8009552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009638 <_vfiprintf_r+0x25c>
 8009556:	7821      	ldrb	r1, [r4, #0]
 8009558:	2203      	movs	r2, #3
 800955a:	4650      	mov	r0, sl
 800955c:	f7f6 fe60 	bl	8000220 <memchr>
 8009560:	b140      	cbz	r0, 8009574 <_vfiprintf_r+0x198>
 8009562:	2340      	movs	r3, #64	; 0x40
 8009564:	eba0 000a 	sub.w	r0, r0, sl
 8009568:	fa03 f000 	lsl.w	r0, r3, r0
 800956c:	9b04      	ldr	r3, [sp, #16]
 800956e:	4303      	orrs	r3, r0
 8009570:	3401      	adds	r4, #1
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009578:	482c      	ldr	r0, [pc, #176]	; (800962c <_vfiprintf_r+0x250>)
 800957a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800957e:	2206      	movs	r2, #6
 8009580:	f7f6 fe4e 	bl	8000220 <memchr>
 8009584:	2800      	cmp	r0, #0
 8009586:	d03f      	beq.n	8009608 <_vfiprintf_r+0x22c>
 8009588:	4b29      	ldr	r3, [pc, #164]	; (8009630 <_vfiprintf_r+0x254>)
 800958a:	bb1b      	cbnz	r3, 80095d4 <_vfiprintf_r+0x1f8>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	3307      	adds	r3, #7
 8009590:	f023 0307 	bic.w	r3, r3, #7
 8009594:	3308      	adds	r3, #8
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959a:	443b      	add	r3, r7
 800959c:	9309      	str	r3, [sp, #36]	; 0x24
 800959e:	e767      	b.n	8009470 <_vfiprintf_r+0x94>
 80095a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095a4:	460c      	mov	r4, r1
 80095a6:	2001      	movs	r0, #1
 80095a8:	e7a5      	b.n	80094f6 <_vfiprintf_r+0x11a>
 80095aa:	2300      	movs	r3, #0
 80095ac:	3401      	adds	r4, #1
 80095ae:	9305      	str	r3, [sp, #20]
 80095b0:	4619      	mov	r1, r3
 80095b2:	f04f 0c0a 	mov.w	ip, #10
 80095b6:	4620      	mov	r0, r4
 80095b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095bc:	3a30      	subs	r2, #48	; 0x30
 80095be:	2a09      	cmp	r2, #9
 80095c0:	d903      	bls.n	80095ca <_vfiprintf_r+0x1ee>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0c5      	beq.n	8009552 <_vfiprintf_r+0x176>
 80095c6:	9105      	str	r1, [sp, #20]
 80095c8:	e7c3      	b.n	8009552 <_vfiprintf_r+0x176>
 80095ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ce:	4604      	mov	r4, r0
 80095d0:	2301      	movs	r3, #1
 80095d2:	e7f0      	b.n	80095b6 <_vfiprintf_r+0x1da>
 80095d4:	ab03      	add	r3, sp, #12
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	462a      	mov	r2, r5
 80095da:	4b16      	ldr	r3, [pc, #88]	; (8009634 <_vfiprintf_r+0x258>)
 80095dc:	a904      	add	r1, sp, #16
 80095de:	4630      	mov	r0, r6
 80095e0:	f7fd fdd8 	bl	8007194 <_printf_float>
 80095e4:	4607      	mov	r7, r0
 80095e6:	1c78      	adds	r0, r7, #1
 80095e8:	d1d6      	bne.n	8009598 <_vfiprintf_r+0x1bc>
 80095ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ec:	07d9      	lsls	r1, r3, #31
 80095ee:	d405      	bmi.n	80095fc <_vfiprintf_r+0x220>
 80095f0:	89ab      	ldrh	r3, [r5, #12]
 80095f2:	059a      	lsls	r2, r3, #22
 80095f4:	d402      	bmi.n	80095fc <_vfiprintf_r+0x220>
 80095f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f8:	f000 faaf 	bl	8009b5a <__retarget_lock_release_recursive>
 80095fc:	89ab      	ldrh	r3, [r5, #12]
 80095fe:	065b      	lsls	r3, r3, #25
 8009600:	f53f af12 	bmi.w	8009428 <_vfiprintf_r+0x4c>
 8009604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009606:	e711      	b.n	800942c <_vfiprintf_r+0x50>
 8009608:	ab03      	add	r3, sp, #12
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	462a      	mov	r2, r5
 800960e:	4b09      	ldr	r3, [pc, #36]	; (8009634 <_vfiprintf_r+0x258>)
 8009610:	a904      	add	r1, sp, #16
 8009612:	4630      	mov	r0, r6
 8009614:	f7fe f862 	bl	80076dc <_printf_i>
 8009618:	e7e4      	b.n	80095e4 <_vfiprintf_r+0x208>
 800961a:	bf00      	nop
 800961c:	0800a25c 	.word	0x0800a25c
 8009620:	0800a27c 	.word	0x0800a27c
 8009624:	0800a23c 	.word	0x0800a23c
 8009628:	0800a0e4 	.word	0x0800a0e4
 800962c:	0800a0ee 	.word	0x0800a0ee
 8009630:	08007195 	.word	0x08007195
 8009634:	080093b9 	.word	0x080093b9
 8009638:	0800a0ea 	.word	0x0800a0ea

0800963c <__swbuf_r>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	460e      	mov	r6, r1
 8009640:	4614      	mov	r4, r2
 8009642:	4605      	mov	r5, r0
 8009644:	b118      	cbz	r0, 800964e <__swbuf_r+0x12>
 8009646:	6983      	ldr	r3, [r0, #24]
 8009648:	b90b      	cbnz	r3, 800964e <__swbuf_r+0x12>
 800964a:	f000 f9e7 	bl	8009a1c <__sinit>
 800964e:	4b21      	ldr	r3, [pc, #132]	; (80096d4 <__swbuf_r+0x98>)
 8009650:	429c      	cmp	r4, r3
 8009652:	d12b      	bne.n	80096ac <__swbuf_r+0x70>
 8009654:	686c      	ldr	r4, [r5, #4]
 8009656:	69a3      	ldr	r3, [r4, #24]
 8009658:	60a3      	str	r3, [r4, #8]
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	071a      	lsls	r2, r3, #28
 800965e:	d52f      	bpl.n	80096c0 <__swbuf_r+0x84>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	b36b      	cbz	r3, 80096c0 <__swbuf_r+0x84>
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	1ac0      	subs	r0, r0, r3
 800966a:	6963      	ldr	r3, [r4, #20]
 800966c:	b2f6      	uxtb	r6, r6
 800966e:	4283      	cmp	r3, r0
 8009670:	4637      	mov	r7, r6
 8009672:	dc04      	bgt.n	800967e <__swbuf_r+0x42>
 8009674:	4621      	mov	r1, r4
 8009676:	4628      	mov	r0, r5
 8009678:	f000 f93c 	bl	80098f4 <_fflush_r>
 800967c:	bb30      	cbnz	r0, 80096cc <__swbuf_r+0x90>
 800967e:	68a3      	ldr	r3, [r4, #8]
 8009680:	3b01      	subs	r3, #1
 8009682:	60a3      	str	r3, [r4, #8]
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	6022      	str	r2, [r4, #0]
 800968a:	701e      	strb	r6, [r3, #0]
 800968c:	6963      	ldr	r3, [r4, #20]
 800968e:	3001      	adds	r0, #1
 8009690:	4283      	cmp	r3, r0
 8009692:	d004      	beq.n	800969e <__swbuf_r+0x62>
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d506      	bpl.n	80096a8 <__swbuf_r+0x6c>
 800969a:	2e0a      	cmp	r6, #10
 800969c:	d104      	bne.n	80096a8 <__swbuf_r+0x6c>
 800969e:	4621      	mov	r1, r4
 80096a0:	4628      	mov	r0, r5
 80096a2:	f000 f927 	bl	80098f4 <_fflush_r>
 80096a6:	b988      	cbnz	r0, 80096cc <__swbuf_r+0x90>
 80096a8:	4638      	mov	r0, r7
 80096aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <__swbuf_r+0x9c>)
 80096ae:	429c      	cmp	r4, r3
 80096b0:	d101      	bne.n	80096b6 <__swbuf_r+0x7a>
 80096b2:	68ac      	ldr	r4, [r5, #8]
 80096b4:	e7cf      	b.n	8009656 <__swbuf_r+0x1a>
 80096b6:	4b09      	ldr	r3, [pc, #36]	; (80096dc <__swbuf_r+0xa0>)
 80096b8:	429c      	cmp	r4, r3
 80096ba:	bf08      	it	eq
 80096bc:	68ec      	ldreq	r4, [r5, #12]
 80096be:	e7ca      	b.n	8009656 <__swbuf_r+0x1a>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 f81a 	bl	80096fc <__swsetup_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d0cb      	beq.n	8009664 <__swbuf_r+0x28>
 80096cc:	f04f 37ff 	mov.w	r7, #4294967295
 80096d0:	e7ea      	b.n	80096a8 <__swbuf_r+0x6c>
 80096d2:	bf00      	nop
 80096d4:	0800a25c 	.word	0x0800a25c
 80096d8:	0800a27c 	.word	0x0800a27c
 80096dc:	0800a23c 	.word	0x0800a23c

080096e0 <__ascii_wctomb>:
 80096e0:	b149      	cbz	r1, 80096f6 <__ascii_wctomb+0x16>
 80096e2:	2aff      	cmp	r2, #255	; 0xff
 80096e4:	bf85      	ittet	hi
 80096e6:	238a      	movhi	r3, #138	; 0x8a
 80096e8:	6003      	strhi	r3, [r0, #0]
 80096ea:	700a      	strbls	r2, [r1, #0]
 80096ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80096f0:	bf98      	it	ls
 80096f2:	2001      	movls	r0, #1
 80096f4:	4770      	bx	lr
 80096f6:	4608      	mov	r0, r1
 80096f8:	4770      	bx	lr
	...

080096fc <__swsetup_r>:
 80096fc:	4b32      	ldr	r3, [pc, #200]	; (80097c8 <__swsetup_r+0xcc>)
 80096fe:	b570      	push	{r4, r5, r6, lr}
 8009700:	681d      	ldr	r5, [r3, #0]
 8009702:	4606      	mov	r6, r0
 8009704:	460c      	mov	r4, r1
 8009706:	b125      	cbz	r5, 8009712 <__swsetup_r+0x16>
 8009708:	69ab      	ldr	r3, [r5, #24]
 800970a:	b913      	cbnz	r3, 8009712 <__swsetup_r+0x16>
 800970c:	4628      	mov	r0, r5
 800970e:	f000 f985 	bl	8009a1c <__sinit>
 8009712:	4b2e      	ldr	r3, [pc, #184]	; (80097cc <__swsetup_r+0xd0>)
 8009714:	429c      	cmp	r4, r3
 8009716:	d10f      	bne.n	8009738 <__swsetup_r+0x3c>
 8009718:	686c      	ldr	r4, [r5, #4]
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009720:	0719      	lsls	r1, r3, #28
 8009722:	d42c      	bmi.n	800977e <__swsetup_r+0x82>
 8009724:	06dd      	lsls	r5, r3, #27
 8009726:	d411      	bmi.n	800974c <__swsetup_r+0x50>
 8009728:	2309      	movs	r3, #9
 800972a:	6033      	str	r3, [r6, #0]
 800972c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	f04f 30ff 	mov.w	r0, #4294967295
 8009736:	e03e      	b.n	80097b6 <__swsetup_r+0xba>
 8009738:	4b25      	ldr	r3, [pc, #148]	; (80097d0 <__swsetup_r+0xd4>)
 800973a:	429c      	cmp	r4, r3
 800973c:	d101      	bne.n	8009742 <__swsetup_r+0x46>
 800973e:	68ac      	ldr	r4, [r5, #8]
 8009740:	e7eb      	b.n	800971a <__swsetup_r+0x1e>
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <__swsetup_r+0xd8>)
 8009744:	429c      	cmp	r4, r3
 8009746:	bf08      	it	eq
 8009748:	68ec      	ldreq	r4, [r5, #12]
 800974a:	e7e6      	b.n	800971a <__swsetup_r+0x1e>
 800974c:	0758      	lsls	r0, r3, #29
 800974e:	d512      	bpl.n	8009776 <__swsetup_r+0x7a>
 8009750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009752:	b141      	cbz	r1, 8009766 <__swsetup_r+0x6a>
 8009754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009758:	4299      	cmp	r1, r3
 800975a:	d002      	beq.n	8009762 <__swsetup_r+0x66>
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff fb31 	bl	8008dc4 <_free_r>
 8009762:	2300      	movs	r3, #0
 8009764:	6363      	str	r3, [r4, #52]	; 0x34
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	2300      	movs	r3, #0
 8009770:	6063      	str	r3, [r4, #4]
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	f043 0308 	orr.w	r3, r3, #8
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	b94b      	cbnz	r3, 8009796 <__swsetup_r+0x9a>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978c:	d003      	beq.n	8009796 <__swsetup_r+0x9a>
 800978e:	4621      	mov	r1, r4
 8009790:	4630      	mov	r0, r6
 8009792:	f000 fa09 	bl	8009ba8 <__smakebuf_r>
 8009796:	89a0      	ldrh	r0, [r4, #12]
 8009798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800979c:	f010 0301 	ands.w	r3, r0, #1
 80097a0:	d00a      	beq.n	80097b8 <__swsetup_r+0xbc>
 80097a2:	2300      	movs	r3, #0
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	6963      	ldr	r3, [r4, #20]
 80097a8:	425b      	negs	r3, r3
 80097aa:	61a3      	str	r3, [r4, #24]
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	b943      	cbnz	r3, 80097c2 <__swsetup_r+0xc6>
 80097b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b4:	d1ba      	bne.n	800972c <__swsetup_r+0x30>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	0781      	lsls	r1, r0, #30
 80097ba:	bf58      	it	pl
 80097bc:	6963      	ldrpl	r3, [r4, #20]
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	e7f4      	b.n	80097ac <__swsetup_r+0xb0>
 80097c2:	2000      	movs	r0, #0
 80097c4:	e7f7      	b.n	80097b6 <__swsetup_r+0xba>
 80097c6:	bf00      	nop
 80097c8:	20000010 	.word	0x20000010
 80097cc:	0800a25c 	.word	0x0800a25c
 80097d0:	0800a27c 	.word	0x0800a27c
 80097d4:	0800a23c 	.word	0x0800a23c

080097d8 <abort>:
 80097d8:	b508      	push	{r3, lr}
 80097da:	2006      	movs	r0, #6
 80097dc:	f000 fa54 	bl	8009c88 <raise>
 80097e0:	2001      	movs	r0, #1
 80097e2:	f7f8 ffbd 	bl	8002760 <_exit>
	...

080097e8 <__sflush_r>:
 80097e8:	898a      	ldrh	r2, [r1, #12]
 80097ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	4605      	mov	r5, r0
 80097f0:	0710      	lsls	r0, r2, #28
 80097f2:	460c      	mov	r4, r1
 80097f4:	d458      	bmi.n	80098a8 <__sflush_r+0xc0>
 80097f6:	684b      	ldr	r3, [r1, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dc05      	bgt.n	8009808 <__sflush_r+0x20>
 80097fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dc02      	bgt.n	8009808 <__sflush_r+0x20>
 8009802:	2000      	movs	r0, #0
 8009804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800980a:	2e00      	cmp	r6, #0
 800980c:	d0f9      	beq.n	8009802 <__sflush_r+0x1a>
 800980e:	2300      	movs	r3, #0
 8009810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009814:	682f      	ldr	r7, [r5, #0]
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	d032      	beq.n	8009880 <__sflush_r+0x98>
 800981a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	075a      	lsls	r2, r3, #29
 8009820:	d505      	bpl.n	800982e <__sflush_r+0x46>
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	1ac0      	subs	r0, r0, r3
 8009826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009828:	b10b      	cbz	r3, 800982e <__sflush_r+0x46>
 800982a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800982c:	1ac0      	subs	r0, r0, r3
 800982e:	2300      	movs	r3, #0
 8009830:	4602      	mov	r2, r0
 8009832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009834:	6a21      	ldr	r1, [r4, #32]
 8009836:	4628      	mov	r0, r5
 8009838:	47b0      	blx	r6
 800983a:	1c43      	adds	r3, r0, #1
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	d106      	bne.n	800984e <__sflush_r+0x66>
 8009840:	6829      	ldr	r1, [r5, #0]
 8009842:	291d      	cmp	r1, #29
 8009844:	d82c      	bhi.n	80098a0 <__sflush_r+0xb8>
 8009846:	4a2a      	ldr	r2, [pc, #168]	; (80098f0 <__sflush_r+0x108>)
 8009848:	40ca      	lsrs	r2, r1
 800984a:	07d6      	lsls	r6, r2, #31
 800984c:	d528      	bpl.n	80098a0 <__sflush_r+0xb8>
 800984e:	2200      	movs	r2, #0
 8009850:	6062      	str	r2, [r4, #4]
 8009852:	04d9      	lsls	r1, r3, #19
 8009854:	6922      	ldr	r2, [r4, #16]
 8009856:	6022      	str	r2, [r4, #0]
 8009858:	d504      	bpl.n	8009864 <__sflush_r+0x7c>
 800985a:	1c42      	adds	r2, r0, #1
 800985c:	d101      	bne.n	8009862 <__sflush_r+0x7a>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b903      	cbnz	r3, 8009864 <__sflush_r+0x7c>
 8009862:	6560      	str	r0, [r4, #84]	; 0x54
 8009864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009866:	602f      	str	r7, [r5, #0]
 8009868:	2900      	cmp	r1, #0
 800986a:	d0ca      	beq.n	8009802 <__sflush_r+0x1a>
 800986c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009870:	4299      	cmp	r1, r3
 8009872:	d002      	beq.n	800987a <__sflush_r+0x92>
 8009874:	4628      	mov	r0, r5
 8009876:	f7ff faa5 	bl	8008dc4 <_free_r>
 800987a:	2000      	movs	r0, #0
 800987c:	6360      	str	r0, [r4, #52]	; 0x34
 800987e:	e7c1      	b.n	8009804 <__sflush_r+0x1c>
 8009880:	6a21      	ldr	r1, [r4, #32]
 8009882:	2301      	movs	r3, #1
 8009884:	4628      	mov	r0, r5
 8009886:	47b0      	blx	r6
 8009888:	1c41      	adds	r1, r0, #1
 800988a:	d1c7      	bne.n	800981c <__sflush_r+0x34>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0c4      	beq.n	800981c <__sflush_r+0x34>
 8009892:	2b1d      	cmp	r3, #29
 8009894:	d001      	beq.n	800989a <__sflush_r+0xb2>
 8009896:	2b16      	cmp	r3, #22
 8009898:	d101      	bne.n	800989e <__sflush_r+0xb6>
 800989a:	602f      	str	r7, [r5, #0]
 800989c:	e7b1      	b.n	8009802 <__sflush_r+0x1a>
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	e7ad      	b.n	8009804 <__sflush_r+0x1c>
 80098a8:	690f      	ldr	r7, [r1, #16]
 80098aa:	2f00      	cmp	r7, #0
 80098ac:	d0a9      	beq.n	8009802 <__sflush_r+0x1a>
 80098ae:	0793      	lsls	r3, r2, #30
 80098b0:	680e      	ldr	r6, [r1, #0]
 80098b2:	bf08      	it	eq
 80098b4:	694b      	ldreq	r3, [r1, #20]
 80098b6:	600f      	str	r7, [r1, #0]
 80098b8:	bf18      	it	ne
 80098ba:	2300      	movne	r3, #0
 80098bc:	eba6 0807 	sub.w	r8, r6, r7
 80098c0:	608b      	str	r3, [r1, #8]
 80098c2:	f1b8 0f00 	cmp.w	r8, #0
 80098c6:	dd9c      	ble.n	8009802 <__sflush_r+0x1a>
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098cc:	4643      	mov	r3, r8
 80098ce:	463a      	mov	r2, r7
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	2800      	cmp	r0, #0
 80098d6:	dc06      	bgt.n	80098e6 <__sflush_r+0xfe>
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	e78e      	b.n	8009804 <__sflush_r+0x1c>
 80098e6:	4407      	add	r7, r0
 80098e8:	eba8 0800 	sub.w	r8, r8, r0
 80098ec:	e7e9      	b.n	80098c2 <__sflush_r+0xda>
 80098ee:	bf00      	nop
 80098f0:	20400001 	.word	0x20400001

080098f4 <_fflush_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	690b      	ldr	r3, [r1, #16]
 80098f8:	4605      	mov	r5, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	b913      	cbnz	r3, 8009904 <_fflush_r+0x10>
 80098fe:	2500      	movs	r5, #0
 8009900:	4628      	mov	r0, r5
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	b118      	cbz	r0, 800990e <_fflush_r+0x1a>
 8009906:	6983      	ldr	r3, [r0, #24]
 8009908:	b90b      	cbnz	r3, 800990e <_fflush_r+0x1a>
 800990a:	f000 f887 	bl	8009a1c <__sinit>
 800990e:	4b14      	ldr	r3, [pc, #80]	; (8009960 <_fflush_r+0x6c>)
 8009910:	429c      	cmp	r4, r3
 8009912:	d11b      	bne.n	800994c <_fflush_r+0x58>
 8009914:	686c      	ldr	r4, [r5, #4]
 8009916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0ef      	beq.n	80098fe <_fflush_r+0xa>
 800991e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009920:	07d0      	lsls	r0, r2, #31
 8009922:	d404      	bmi.n	800992e <_fflush_r+0x3a>
 8009924:	0599      	lsls	r1, r3, #22
 8009926:	d402      	bmi.n	800992e <_fflush_r+0x3a>
 8009928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992a:	f000 f915 	bl	8009b58 <__retarget_lock_acquire_recursive>
 800992e:	4628      	mov	r0, r5
 8009930:	4621      	mov	r1, r4
 8009932:	f7ff ff59 	bl	80097e8 <__sflush_r>
 8009936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009938:	07da      	lsls	r2, r3, #31
 800993a:	4605      	mov	r5, r0
 800993c:	d4e0      	bmi.n	8009900 <_fflush_r+0xc>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	059b      	lsls	r3, r3, #22
 8009942:	d4dd      	bmi.n	8009900 <_fflush_r+0xc>
 8009944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009946:	f000 f908 	bl	8009b5a <__retarget_lock_release_recursive>
 800994a:	e7d9      	b.n	8009900 <_fflush_r+0xc>
 800994c:	4b05      	ldr	r3, [pc, #20]	; (8009964 <_fflush_r+0x70>)
 800994e:	429c      	cmp	r4, r3
 8009950:	d101      	bne.n	8009956 <_fflush_r+0x62>
 8009952:	68ac      	ldr	r4, [r5, #8]
 8009954:	e7df      	b.n	8009916 <_fflush_r+0x22>
 8009956:	4b04      	ldr	r3, [pc, #16]	; (8009968 <_fflush_r+0x74>)
 8009958:	429c      	cmp	r4, r3
 800995a:	bf08      	it	eq
 800995c:	68ec      	ldreq	r4, [r5, #12]
 800995e:	e7da      	b.n	8009916 <_fflush_r+0x22>
 8009960:	0800a25c 	.word	0x0800a25c
 8009964:	0800a27c 	.word	0x0800a27c
 8009968:	0800a23c 	.word	0x0800a23c

0800996c <std>:
 800996c:	2300      	movs	r3, #0
 800996e:	b510      	push	{r4, lr}
 8009970:	4604      	mov	r4, r0
 8009972:	e9c0 3300 	strd	r3, r3, [r0]
 8009976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997a:	6083      	str	r3, [r0, #8]
 800997c:	8181      	strh	r1, [r0, #12]
 800997e:	6643      	str	r3, [r0, #100]	; 0x64
 8009980:	81c2      	strh	r2, [r0, #14]
 8009982:	6183      	str	r3, [r0, #24]
 8009984:	4619      	mov	r1, r3
 8009986:	2208      	movs	r2, #8
 8009988:	305c      	adds	r0, #92	; 0x5c
 800998a:	f7fd fb5b 	bl	8007044 <memset>
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <std+0x38>)
 8009990:	6263      	str	r3, [r4, #36]	; 0x24
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <std+0x3c>)
 8009994:	62a3      	str	r3, [r4, #40]	; 0x28
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <std+0x40>)
 8009998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <std+0x44>)
 800999c:	6224      	str	r4, [r4, #32]
 800999e:	6323      	str	r3, [r4, #48]	; 0x30
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	bf00      	nop
 80099a4:	08009cc1 	.word	0x08009cc1
 80099a8:	08009ce3 	.word	0x08009ce3
 80099ac:	08009d1b 	.word	0x08009d1b
 80099b0:	08009d3f 	.word	0x08009d3f

080099b4 <_cleanup_r>:
 80099b4:	4901      	ldr	r1, [pc, #4]	; (80099bc <_cleanup_r+0x8>)
 80099b6:	f000 b8af 	b.w	8009b18 <_fwalk_reent>
 80099ba:	bf00      	nop
 80099bc:	080098f5 	.word	0x080098f5

080099c0 <__sfmoreglue>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	2268      	movs	r2, #104	; 0x68
 80099c4:	1e4d      	subs	r5, r1, #1
 80099c6:	4355      	muls	r5, r2
 80099c8:	460e      	mov	r6, r1
 80099ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ce:	f7ff fa65 	bl	8008e9c <_malloc_r>
 80099d2:	4604      	mov	r4, r0
 80099d4:	b140      	cbz	r0, 80099e8 <__sfmoreglue+0x28>
 80099d6:	2100      	movs	r1, #0
 80099d8:	e9c0 1600 	strd	r1, r6, [r0]
 80099dc:	300c      	adds	r0, #12
 80099de:	60a0      	str	r0, [r4, #8]
 80099e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099e4:	f7fd fb2e 	bl	8007044 <memset>
 80099e8:	4620      	mov	r0, r4
 80099ea:	bd70      	pop	{r4, r5, r6, pc}

080099ec <__sfp_lock_acquire>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__sfp_lock_acquire+0x8>)
 80099ee:	f000 b8b3 	b.w	8009b58 <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	200005f5 	.word	0x200005f5

080099f8 <__sfp_lock_release>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__sfp_lock_release+0x8>)
 80099fa:	f000 b8ae 	b.w	8009b5a <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	200005f5 	.word	0x200005f5

08009a04 <__sinit_lock_acquire>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__sinit_lock_acquire+0x8>)
 8009a06:	f000 b8a7 	b.w	8009b58 <__retarget_lock_acquire_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	200005f6 	.word	0x200005f6

08009a10 <__sinit_lock_release>:
 8009a10:	4801      	ldr	r0, [pc, #4]	; (8009a18 <__sinit_lock_release+0x8>)
 8009a12:	f000 b8a2 	b.w	8009b5a <__retarget_lock_release_recursive>
 8009a16:	bf00      	nop
 8009a18:	200005f6 	.word	0x200005f6

08009a1c <__sinit>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	4604      	mov	r4, r0
 8009a20:	f7ff fff0 	bl	8009a04 <__sinit_lock_acquire>
 8009a24:	69a3      	ldr	r3, [r4, #24]
 8009a26:	b11b      	cbz	r3, 8009a30 <__sinit+0x14>
 8009a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a2c:	f7ff bff0 	b.w	8009a10 <__sinit_lock_release>
 8009a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a34:	6523      	str	r3, [r4, #80]	; 0x50
 8009a36:	4b13      	ldr	r3, [pc, #76]	; (8009a84 <__sinit+0x68>)
 8009a38:	4a13      	ldr	r2, [pc, #76]	; (8009a88 <__sinit+0x6c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a3e:	42a3      	cmp	r3, r4
 8009a40:	bf04      	itt	eq
 8009a42:	2301      	moveq	r3, #1
 8009a44:	61a3      	streq	r3, [r4, #24]
 8009a46:	4620      	mov	r0, r4
 8009a48:	f000 f820 	bl	8009a8c <__sfp>
 8009a4c:	6060      	str	r0, [r4, #4]
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 f81c 	bl	8009a8c <__sfp>
 8009a54:	60a0      	str	r0, [r4, #8]
 8009a56:	4620      	mov	r0, r4
 8009a58:	f000 f818 	bl	8009a8c <__sfp>
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	60e0      	str	r0, [r4, #12]
 8009a60:	2104      	movs	r1, #4
 8009a62:	6860      	ldr	r0, [r4, #4]
 8009a64:	f7ff ff82 	bl	800996c <std>
 8009a68:	68a0      	ldr	r0, [r4, #8]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	2109      	movs	r1, #9
 8009a6e:	f7ff ff7d 	bl	800996c <std>
 8009a72:	68e0      	ldr	r0, [r4, #12]
 8009a74:	2202      	movs	r2, #2
 8009a76:	2112      	movs	r1, #18
 8009a78:	f7ff ff78 	bl	800996c <std>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	61a3      	str	r3, [r4, #24]
 8009a80:	e7d2      	b.n	8009a28 <__sinit+0xc>
 8009a82:	bf00      	nop
 8009a84:	08009ec0 	.word	0x08009ec0
 8009a88:	080099b5 	.word	0x080099b5

08009a8c <__sfp>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	4607      	mov	r7, r0
 8009a90:	f7ff ffac 	bl	80099ec <__sfp_lock_acquire>
 8009a94:	4b1e      	ldr	r3, [pc, #120]	; (8009b10 <__sfp+0x84>)
 8009a96:	681e      	ldr	r6, [r3, #0]
 8009a98:	69b3      	ldr	r3, [r6, #24]
 8009a9a:	b913      	cbnz	r3, 8009aa2 <__sfp+0x16>
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f7ff ffbd 	bl	8009a1c <__sinit>
 8009aa2:	3648      	adds	r6, #72	; 0x48
 8009aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	d503      	bpl.n	8009ab4 <__sfp+0x28>
 8009aac:	6833      	ldr	r3, [r6, #0]
 8009aae:	b30b      	cbz	r3, 8009af4 <__sfp+0x68>
 8009ab0:	6836      	ldr	r6, [r6, #0]
 8009ab2:	e7f7      	b.n	8009aa4 <__sfp+0x18>
 8009ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ab8:	b9d5      	cbnz	r5, 8009af0 <__sfp+0x64>
 8009aba:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <__sfp+0x88>)
 8009abc:	60e3      	str	r3, [r4, #12]
 8009abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ac2:	6665      	str	r5, [r4, #100]	; 0x64
 8009ac4:	f000 f847 	bl	8009b56 <__retarget_lock_init_recursive>
 8009ac8:	f7ff ff96 	bl	80099f8 <__sfp_lock_release>
 8009acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ad4:	6025      	str	r5, [r4, #0]
 8009ad6:	61a5      	str	r5, [r4, #24]
 8009ad8:	2208      	movs	r2, #8
 8009ada:	4629      	mov	r1, r5
 8009adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ae0:	f7fd fab0 	bl	8007044 <memset>
 8009ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009aec:	4620      	mov	r0, r4
 8009aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af0:	3468      	adds	r4, #104	; 0x68
 8009af2:	e7d9      	b.n	8009aa8 <__sfp+0x1c>
 8009af4:	2104      	movs	r1, #4
 8009af6:	4638      	mov	r0, r7
 8009af8:	f7ff ff62 	bl	80099c0 <__sfmoreglue>
 8009afc:	4604      	mov	r4, r0
 8009afe:	6030      	str	r0, [r6, #0]
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d1d5      	bne.n	8009ab0 <__sfp+0x24>
 8009b04:	f7ff ff78 	bl	80099f8 <__sfp_lock_release>
 8009b08:	230c      	movs	r3, #12
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	e7ee      	b.n	8009aec <__sfp+0x60>
 8009b0e:	bf00      	nop
 8009b10:	08009ec0 	.word	0x08009ec0
 8009b14:	ffff0001 	.word	0xffff0001

08009b18 <_fwalk_reent>:
 8009b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	4688      	mov	r8, r1
 8009b20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b24:	2700      	movs	r7, #0
 8009b26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b2a:	f1b9 0901 	subs.w	r9, r9, #1
 8009b2e:	d505      	bpl.n	8009b3c <_fwalk_reent+0x24>
 8009b30:	6824      	ldr	r4, [r4, #0]
 8009b32:	2c00      	cmp	r4, #0
 8009b34:	d1f7      	bne.n	8009b26 <_fwalk_reent+0xe>
 8009b36:	4638      	mov	r0, r7
 8009b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3c:	89ab      	ldrh	r3, [r5, #12]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d907      	bls.n	8009b52 <_fwalk_reent+0x3a>
 8009b42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b46:	3301      	adds	r3, #1
 8009b48:	d003      	beq.n	8009b52 <_fwalk_reent+0x3a>
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	47c0      	blx	r8
 8009b50:	4307      	orrs	r7, r0
 8009b52:	3568      	adds	r5, #104	; 0x68
 8009b54:	e7e9      	b.n	8009b2a <_fwalk_reent+0x12>

08009b56 <__retarget_lock_init_recursive>:
 8009b56:	4770      	bx	lr

08009b58 <__retarget_lock_acquire_recursive>:
 8009b58:	4770      	bx	lr

08009b5a <__retarget_lock_release_recursive>:
 8009b5a:	4770      	bx	lr

08009b5c <__swhatbuf_r>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	460e      	mov	r6, r1
 8009b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b64:	2900      	cmp	r1, #0
 8009b66:	b096      	sub	sp, #88	; 0x58
 8009b68:	4614      	mov	r4, r2
 8009b6a:	461d      	mov	r5, r3
 8009b6c:	da08      	bge.n	8009b80 <__swhatbuf_r+0x24>
 8009b6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	602a      	str	r2, [r5, #0]
 8009b76:	061a      	lsls	r2, r3, #24
 8009b78:	d410      	bmi.n	8009b9c <__swhatbuf_r+0x40>
 8009b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b7e:	e00e      	b.n	8009b9e <__swhatbuf_r+0x42>
 8009b80:	466a      	mov	r2, sp
 8009b82:	f000 f903 	bl	8009d8c <_fstat_r>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	dbf1      	blt.n	8009b6e <__swhatbuf_r+0x12>
 8009b8a:	9a01      	ldr	r2, [sp, #4]
 8009b8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b94:	425a      	negs	r2, r3
 8009b96:	415a      	adcs	r2, r3
 8009b98:	602a      	str	r2, [r5, #0]
 8009b9a:	e7ee      	b.n	8009b7a <__swhatbuf_r+0x1e>
 8009b9c:	2340      	movs	r3, #64	; 0x40
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	b016      	add	sp, #88	; 0x58
 8009ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ba8 <__smakebuf_r>:
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bac:	079d      	lsls	r5, r3, #30
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	d507      	bpl.n	8009bc4 <__smakebuf_r+0x1c>
 8009bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	6163      	str	r3, [r4, #20]
 8009bc0:	b002      	add	sp, #8
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	ab01      	add	r3, sp, #4
 8009bc6:	466a      	mov	r2, sp
 8009bc8:	f7ff ffc8 	bl	8009b5c <__swhatbuf_r>
 8009bcc:	9900      	ldr	r1, [sp, #0]
 8009bce:	4605      	mov	r5, r0
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff f963 	bl	8008e9c <_malloc_r>
 8009bd6:	b948      	cbnz	r0, 8009bec <__smakebuf_r+0x44>
 8009bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bdc:	059a      	lsls	r2, r3, #22
 8009bde:	d4ef      	bmi.n	8009bc0 <__smakebuf_r+0x18>
 8009be0:	f023 0303 	bic.w	r3, r3, #3
 8009be4:	f043 0302 	orr.w	r3, r3, #2
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	e7e3      	b.n	8009bb4 <__smakebuf_r+0xc>
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <__smakebuf_r+0x7c>)
 8009bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	6020      	str	r0, [r4, #0]
 8009bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	6163      	str	r3, [r4, #20]
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	6120      	str	r0, [r4, #16]
 8009c02:	b15b      	cbz	r3, 8009c1c <__smakebuf_r+0x74>
 8009c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f000 f8d1 	bl	8009db0 <_isatty_r>
 8009c0e:	b128      	cbz	r0, 8009c1c <__smakebuf_r+0x74>
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	f023 0303 	bic.w	r3, r3, #3
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	89a0      	ldrh	r0, [r4, #12]
 8009c1e:	4305      	orrs	r5, r0
 8009c20:	81a5      	strh	r5, [r4, #12]
 8009c22:	e7cd      	b.n	8009bc0 <__smakebuf_r+0x18>
 8009c24:	080099b5 	.word	0x080099b5

08009c28 <_malloc_usable_size_r>:
 8009c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2c:	1f18      	subs	r0, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfbc      	itt	lt
 8009c32:	580b      	ldrlt	r3, [r1, r0]
 8009c34:	18c0      	addlt	r0, r0, r3
 8009c36:	4770      	bx	lr

08009c38 <_raise_r>:
 8009c38:	291f      	cmp	r1, #31
 8009c3a:	b538      	push	{r3, r4, r5, lr}
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	460d      	mov	r5, r1
 8009c40:	d904      	bls.n	8009c4c <_raise_r+0x14>
 8009c42:	2316      	movs	r3, #22
 8009c44:	6003      	str	r3, [r0, #0]
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c4e:	b112      	cbz	r2, 8009c56 <_raise_r+0x1e>
 8009c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c54:	b94b      	cbnz	r3, 8009c6a <_raise_r+0x32>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f830 	bl	8009cbc <_getpid_r>
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	4601      	mov	r1, r0
 8009c60:	4620      	mov	r0, r4
 8009c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c66:	f000 b817 	b.w	8009c98 <_kill_r>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d00a      	beq.n	8009c84 <_raise_r+0x4c>
 8009c6e:	1c59      	adds	r1, r3, #1
 8009c70:	d103      	bne.n	8009c7a <_raise_r+0x42>
 8009c72:	2316      	movs	r3, #22
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	2001      	movs	r0, #1
 8009c78:	e7e7      	b.n	8009c4a <_raise_r+0x12>
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c80:	4628      	mov	r0, r5
 8009c82:	4798      	blx	r3
 8009c84:	2000      	movs	r0, #0
 8009c86:	e7e0      	b.n	8009c4a <_raise_r+0x12>

08009c88 <raise>:
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <raise+0xc>)
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f7ff bfd3 	b.w	8009c38 <_raise_r>
 8009c92:	bf00      	nop
 8009c94:	20000010 	.word	0x20000010

08009c98 <_kill_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_kill_r+0x20>)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	f7f8 fd4b 	bl	8002740 <_kill>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	d102      	bne.n	8009cb4 <_kill_r+0x1c>
 8009cae:	682b      	ldr	r3, [r5, #0]
 8009cb0:	b103      	cbz	r3, 8009cb4 <_kill_r+0x1c>
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200005f0 	.word	0x200005f0

08009cbc <_getpid_r>:
 8009cbc:	f7f8 bd38 	b.w	8002730 <_getpid>

08009cc0 <__sread>:
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	f000 f894 	bl	8009df4 <_read_r>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	bfab      	itete	ge
 8009cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009cd4:	181b      	addge	r3, r3, r0
 8009cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cda:	bfac      	ite	ge
 8009cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cde:	81a3      	strhlt	r3, [r4, #12]
 8009ce0:	bd10      	pop	{r4, pc}

08009ce2 <__swrite>:
 8009ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	461f      	mov	r7, r3
 8009ce8:	898b      	ldrh	r3, [r1, #12]
 8009cea:	05db      	lsls	r3, r3, #23
 8009cec:	4605      	mov	r5, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	d505      	bpl.n	8009d00 <__swrite+0x1e>
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f000 f868 	bl	8009dd0 <_lseek_r>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	4628      	mov	r0, r5
 8009d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d16:	f000 b817 	b.w	8009d48 <_write_r>

08009d1a <__sseek>:
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d22:	f000 f855 	bl	8009dd0 <_lseek_r>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	bf15      	itete	ne
 8009d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d36:	81a3      	strheq	r3, [r4, #12]
 8009d38:	bf18      	it	ne
 8009d3a:	81a3      	strhne	r3, [r4, #12]
 8009d3c:	bd10      	pop	{r4, pc}

08009d3e <__sclose>:
 8009d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d42:	f000 b813 	b.w	8009d6c <_close_r>
	...

08009d48 <_write_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d07      	ldr	r5, [pc, #28]	; (8009d68 <_write_r+0x20>)
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f8 fd29 	bl	80027ae <_write>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_write_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_write_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	200005f0 	.word	0x200005f0

08009d6c <_close_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d06      	ldr	r5, [pc, #24]	; (8009d88 <_close_r+0x1c>)
 8009d70:	2300      	movs	r3, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f8 fd35 	bl	80027e6 <_close>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_close_r+0x1a>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_close_r+0x1a>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	200005f0 	.word	0x200005f0

08009d8c <_fstat_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d07      	ldr	r5, [pc, #28]	; (8009dac <_fstat_r+0x20>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	f7f8 fd30 	bl	80027fe <_fstat>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	d102      	bne.n	8009da8 <_fstat_r+0x1c>
 8009da2:	682b      	ldr	r3, [r5, #0]
 8009da4:	b103      	cbz	r3, 8009da8 <_fstat_r+0x1c>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	bd38      	pop	{r3, r4, r5, pc}
 8009daa:	bf00      	nop
 8009dac:	200005f0 	.word	0x200005f0

08009db0 <_isatty_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d06      	ldr	r5, [pc, #24]	; (8009dcc <_isatty_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	602b      	str	r3, [r5, #0]
 8009dbc:	f7f8 fd2f 	bl	800281e <_isatty>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_isatty_r+0x1a>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_isatty_r+0x1a>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	200005f0 	.word	0x200005f0

08009dd0 <_lseek_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_lseek_r+0x20>)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f8 fd28 	bl	8002834 <_lseek>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_lseek_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_lseek_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	200005f0 	.word	0x200005f0

08009df4 <_read_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	; (8009e14 <_read_r+0x20>)
 8009df8:	4604      	mov	r4, r0
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f7f8 fcb6 	bl	8002774 <_read>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_read_r+0x1e>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_read_r+0x1e>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	200005f0 	.word	0x200005f0

08009e18 <_init>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr

08009e24 <_fini>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr
