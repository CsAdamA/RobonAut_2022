
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080097b0  080097b0  000197b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bec  08009bec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009bec  08009bec  00019bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bf4  08009bf4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001dc  08009dd8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08009dd8  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123de  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002804  00000000  00000000  000325ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00034df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bfb  00000000  00000000  00036bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013050  00000000  00000000  0005b7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfe46  00000000  00000000  0006e803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c8  00000000  00000000  0014e69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009798 	.word	0x08009798

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009798 	.word	0x08009798

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f001 fc21 	bl	8002738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f84f 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 fca9 	bl	8001850 <MX_GPIO_Init>
  MX_DMA_Init();
 8000efe:	f000 fc87 	bl	8001810 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f02:	f000 f9e1 	bl	80012c8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f06:	f000 fc05 	bl	8001714 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f0a:	f000 fab7 	bl	800147c <MX_TIM4_Init>
  MX_ADC2_Init();
 8000f0e:	f000 f907 	bl	8001120 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000f12:	f000 fa4f 	bl	80013b4 <MX_TIM3_Init>
  MX_UART5_Init();
 8000f16:	f000 fbd3 	bl	80016c0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000f1a:	f000 fc25 	bl	8001768 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000f1e:	f000 fb77 	bl	8001610 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000f22:	f000 f8ab 	bl	800107c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000f26:	f000 fc49 	bl	80017bc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000f2a:	f000 fb23 	bl	8001574 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000f2e:	f000 f949 	bl	80011c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Basic_Init();
 8000f32:	f000 fd57 	bl	80019e4 <Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3); //inicializálunk a megfelelő perifériákkal
 8000f36:	2108      	movs	r1, #8
 8000f38:	4811      	ldr	r0, [pc, #68]	; (8000f80 <main+0x94>)
 8000f3a:	f000 fd95 	bl	8001a68 <Remote_Control_Init>
  Rn42_Init(&huart1, &huart2);
 8000f3e:	4911      	ldr	r1, [pc, #68]	; (8000f84 <main+0x98>)
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <main+0x9c>)
 8000f42:	f000 fe59 	bl	8001bf8 <Rn42_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart2, TICK, 53);
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <main+0xa0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	2235      	movs	r2, #53	; 0x35
 8000f4e:	9200      	str	r2, [sp, #0]
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <main+0x98>)
 8000f52:	2108      	movs	r1, #8
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <main+0x94>)
 8000f56:	f000 fda1 	bl	8001a9c <Remote_Control_Task>
	  HAL_Delay(2000);
 8000f5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f5e:	f001 fc5d 	bl	800281c <HAL_Delay>
	  sprintf(buf,"test\r\n");
 8000f62:	490b      	ldr	r1, [pc, #44]	; (8000f90 <main+0xa4>)
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <main+0xa8>)
 8000f66:	f006 f99f 	bl	80072a8 <siprintf>
	  HAL_UART_Transmit(&huart1, buf, strlen(buf), 100); //kikuljuk a comandot
 8000f6a:	480a      	ldr	r0, [pc, #40]	; (8000f94 <main+0xa8>)
 8000f6c:	f7ff f950 	bl	8000210 <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	4907      	ldr	r1, [pc, #28]	; (8000f94 <main+0xa8>)
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <main+0x9c>)
 8000f7a:	f005 f8e2 	bl	8006142 <HAL_UART_Transmit>
  {
 8000f7e:	e7e2      	b.n	8000f46 <main+0x5a>
 8000f80:	20000360 	.word	0x20000360
 8000f84:	20000520 	.word	0x20000520
 8000f88:	200004dc 	.word	0x200004dc
 8000f8c:	200003a8 	.word	0x200003a8
 8000f90:	080097b0 	.word	0x080097b0
 8000f94:	200005a8 	.word	0x200005a8

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2234      	movs	r2, #52	; 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 fd0c 	bl	80069c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <SystemClock_Config+0xdc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <SystemClock_Config+0xdc>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <SystemClock_Config+0xdc>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <SystemClock_Config+0xe0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a25      	ldr	r2, [pc, #148]	; (8001078 <SystemClock_Config+0xe0>)
 8000fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <SystemClock_Config+0xe0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800100c:	23b4      	movs	r3, #180	; 0xb4
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f003 f88d 	bl	8004140 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800102c:	f000 fd16 	bl	8001a5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001030:	f002 fcec 	bl	8003a0c <HAL_PWREx_EnableOverDrive>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800103a:	f000 fd0f 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2105      	movs	r1, #5
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fd25 	bl	8003aac <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001068:	f000 fcf8 	bl	8001a5c <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_ADC1_Init+0x98>)
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <MX_ADC1_Init+0x9c>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_ADC1_Init+0x98>)
 8001096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800109a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_ADC1_Init+0x98>)
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <MX_ADC1_Init+0xa0>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_ADC1_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_ADC1_Init+0x98>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_ADC1_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_ADC1_Init+0x98>)
 80010d8:	2201      	movs	r2, #1
 80010da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <MX_ADC1_Init+0x98>)
 80010de:	f001 fbc1 	bl	8002864 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 fcb8 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010ec:	2308      	movs	r3, #8
 80010ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_ADC1_Init+0x98>)
 80010fe:	f001 fbf5 	bl	80028ec <HAL_ADC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001108:	f000 fca8 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001f8 	.word	0x200001f8
 8001118:	40012000 	.word	0x40012000
 800111c:	0f000001 	.word	0x0f000001

08001120 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_ADC2_Init+0x9c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC2_Init+0x98>)
 800113a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800113e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_ADC2_Init+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC2_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_ADC2_Init+0xa0>)
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_ADC2_Init+0x98>)
 800116e:	2201      	movs	r2, #1
 8001170:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC2_Init+0x98>)
 800117c:	2201      	movs	r2, #1
 800117e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_ADC2_Init+0x98>)
 8001182:	f001 fb6f 	bl	8002864 <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800118c:	f000 fc66 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001190:	230d      	movs	r3, #13
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_ADC2_Init+0x98>)
 80011a2:	f001 fba3 	bl	80028ec <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011ac:	f000 fc56 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000240 	.word	0x20000240
 80011bc:	40012100 	.word	0x40012100
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b092      	sub	sp, #72	; 0x48
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2220      	movs	r2, #32
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 fbe8 	bl	80069c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f4:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_TIM1_Init+0xfc>)
 80011f6:	4a33      	ldr	r2, [pc, #204]	; (80012c4 <MX_TIM1_Init+0x100>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <MX_TIM1_Init+0xfc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <MX_TIM1_Init+0xfc>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <MX_TIM1_Init+0xfc>)
 8001208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <MX_TIM1_Init+0xfc>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <MX_TIM1_Init+0xfc>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_TIM1_Init+0xfc>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001220:	4827      	ldr	r0, [pc, #156]	; (80012c0 <MX_TIM1_Init+0xfc>)
 8001222:	f003 fae3 	bl	80047ec <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800122c:	f000 fc16 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123c:	4619      	mov	r1, r3
 800123e:	4820      	ldr	r0, [pc, #128]	; (80012c0 <MX_TIM1_Init+0xfc>)
 8001240:	f004 fe50 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800124a:	f000 fc07 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	220c      	movs	r2, #12
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_TIM1_Init+0xfc>)
 8001270:	f003 ff58 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800127a:	f000 fbef 	bl	8001a5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001296:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM1_Init+0xfc>)
 80012a2:	f004 fe9b 	bl	8005fdc <HAL_TIMEx_ConfigBreakDeadTime>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80012ac:	f000 fbd6 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM1_Init+0xfc>)
 80012b2:	f000 ff73 	bl	800219c <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3748      	adds	r7, #72	; 0x48
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000288 	.word	0x20000288
 80012c4:	40010000 	.word	0x40010000

080012c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_TIM2_Init+0xe8>)
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900;
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_TIM2_Init+0xe8>)
 8001302:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <MX_TIM2_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <MX_TIM2_Init+0xe8>)
 8001310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001314:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <MX_TIM2_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_TIM2_Init+0xe8>)
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001322:	4823      	ldr	r0, [pc, #140]	; (80013b0 <MX_TIM2_Init+0xe8>)
 8001324:	f003 f9aa 	bl	800467c <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800132e:	f000 fb95 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133c:	4619      	mov	r1, r3
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <MX_TIM2_Init+0xe8>)
 8001340:	f003 ffb2 	bl	80052a8 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800134a:	f000 fb87 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <MX_TIM2_Init+0xe8>)
 8001350:	f003 fa4c 	bl	80047ec <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800135a:	f000 fb7f 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4619      	mov	r1, r3
 800136c:	4810      	ldr	r0, [pc, #64]	; (80013b0 <MX_TIM2_Init+0xe8>)
 800136e:	f004 fdb9 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001378:	f000 fb70 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	; 0x60
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM2_Init+0xe8>)
 8001394:	f003 fec6 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800139e:	f000 fb5d 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM2_Init+0xe8>)
 80013a4:	f000 fefa 	bl	800219c <HAL_TIM_MspPostInit>

}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002d0 	.word	0x200002d0

080013b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <MX_TIM3_Init+0xc4>)
 80013da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013fc:	481d      	ldr	r0, [pc, #116]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013fe:	f003 f9f5 	bl	80047ec <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fb28 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	4816      	ldr	r0, [pc, #88]	; (8001474 <MX_TIM3_Init+0xc0>)
 800141c:	f004 fd62 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001426:	f000 fb19 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	; 0x60
 800142c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_TIM3_Init+0xc0>)
 8001442:	f003 fe6f 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800144c:	f000 fb06 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2204      	movs	r2, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM3_Init+0xc0>)
 8001458:	f003 fe64 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001462:	f000 fafb 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM3_Init+0xc0>)
 8001468:	f000 fe98 	bl	800219c <HAL_TIM_MspPostInit>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000318 	.word	0x20000318
 8001478:	40000400 	.word	0x40000400

0800147c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <MX_TIM4_Init+0xf0>)
 80014a8:	4a31      	ldr	r2, [pc, #196]	; (8001570 <MX_TIM4_Init+0xf4>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <MX_TIM4_Init+0xf0>)
 80014ae:	f240 321f 	movw	r2, #799	; 0x31f
 80014b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <MX_TIM4_Init+0xf0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MX_TIM4_Init+0xf0>)
 80014bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_TIM4_Init+0xf0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <MX_TIM4_Init+0xf0>)
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014ce:	4827      	ldr	r0, [pc, #156]	; (800156c <MX_TIM4_Init+0xf0>)
 80014d0:	f003 f8d4 	bl	800467c <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80014da:	f000 fabf 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4820      	ldr	r0, [pc, #128]	; (800156c <MX_TIM4_Init+0xf0>)
 80014ec:	f003 fedc 	bl	80052a8 <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014f6:	f000 fab1 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80014fa:	481c      	ldr	r0, [pc, #112]	; (800156c <MX_TIM4_Init+0xf0>)
 80014fc:	f003 f9c5 	bl	800488a <HAL_TIM_IC_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001506:	f000 faa9 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4619      	mov	r1, r3
 8001518:	4814      	ldr	r0, [pc, #80]	; (800156c <MX_TIM4_Init+0xf0>)
 800151a:	f004 fce3 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001524:	f000 fa9a 	bl	8001a5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001528:	230a      	movs	r3, #10
 800152a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800152c:	2301      	movs	r3, #1
 800152e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2208      	movs	r2, #8
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <MX_TIM4_Init+0xf0>)
 8001540:	f003 fd54 	bl	8004fec <HAL_TIM_IC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800154a:	f000 fa87 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	220c      	movs	r2, #12
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM4_Init+0xf0>)
 8001556:	f003 fd49 	bl	8004fec <HAL_TIM_IC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001560:	f000 fa7c 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000360 	.word	0x20000360
 8001570:	40000800 	.word	0x40000800

08001574 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM5_Init+0x94>)
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <MX_TIM5_Init+0x98>)
 8001594:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_TIM5_Init+0x94>)
 8001598:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800159c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM5_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_TIM5_Init+0x94>)
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295
 80015aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_TIM5_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_TIM5_Init+0x94>)
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015b8:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_TIM5_Init+0x94>)
 80015ba:	f003 f85f 	bl	800467c <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80015c4:	f000 fa4a 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_TIM5_Init+0x94>)
 80015d6:	f003 fe67 	bl	80052a8 <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015e0:	f000 fa3c 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_TIM5_Init+0x94>)
 80015f2:	f004 fc77 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 fa2e 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200003a8 	.word	0x200003a8
 800160c:	40000c00 	.word	0x40000c00

08001610 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2224      	movs	r2, #36	; 0x24
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f005 f9d0 	bl	80069c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_TIM8_Init+0xa8>)
 800162e:	4a23      	ldr	r2, [pc, #140]	; (80016bc <MX_TIM8_Init+0xac>)
 8001630:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <MX_TIM8_Init+0xa8>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <MX_TIM8_Init+0xa8>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_TIM8_Init+0xa8>)
 8001640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001644:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_TIM8_Init+0xa8>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM8_Init+0xa8>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_TIM8_Init+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001658:	2301      	movs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001670:	2301      	movs	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_TIM8_Init+0xa8>)
 8001684:	f003 fb04 	bl	8004c90 <HAL_TIM_Encoder_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800168e:	f000 f9e5 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <MX_TIM8_Init+0xa8>)
 80016a0:	f004 fc20 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80016aa:	f000 f9d7 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3730      	adds	r7, #48	; 0x30
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200003f0 	.word	0x200003f0
 80016bc:	40010400 	.word	0x40010400

080016c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_UART5_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_UART5_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_UART5_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_UART5_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_UART5_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_UART5_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_UART5_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_UART5_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_UART5_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_UART5_Init+0x4c>)
 80016f8:	f004 fcd6 	bl	80060a8 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f9ab 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000498 	.word	0x20000498
 8001710:	40005000 	.word	0x40005000

08001714 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_USART1_UART_Init+0x50>)
 800171c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_USART1_UART_Init+0x4c>)
 800174c:	f004 fcac 	bl	80060a8 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001756:	f000 f981 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200004dc 	.word	0x200004dc
 8001764:	40011000 	.word	0x40011000

08001768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART2_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f004 fc82 	bl	80060a8 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 f957 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000520 	.word	0x20000520
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART3_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017f4:	f004 fc58 	bl	80060a8 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f000 f92d 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000564 	.word	0x20000564
 800180c:	40004800 	.word	0x40004800

08001810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_DMA_Init+0x3c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <MX_DMA_Init+0x3c>)
 8001820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_DMA_Init+0x3c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	202f      	movs	r0, #47	; 0x2f
 8001838:	f001 fb85 	bl	8002f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800183c:	202f      	movs	r0, #47	; 0x2f
 800183e:	f001 fb9e 	bl	8002f7e <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <MX_GPIO_Init+0x170>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <MX_GPIO_Init+0x170>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <MX_GPIO_Init+0x170>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <MX_GPIO_Init+0x170>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a4d      	ldr	r2, [pc, #308]	; (80019c0 <MX_GPIO_Init+0x170>)
 800188c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <MX_GPIO_Init+0x170>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a38      	ldr	r2, [pc, #224]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_GPIO_Init+0x170>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2102      	movs	r1, #2
 80018f6:	4833      	ldr	r0, [pc, #204]	; (80019c4 <MX_GPIO_Init+0x174>)
 80018f8:	f002 f86e 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2122      	movs	r1, #34	; 0x22
 8001900:	4831      	ldr	r0, [pc, #196]	; (80019c8 <MX_GPIO_Init+0x178>)
 8001902:	f002 f869 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001906:	2200      	movs	r2, #0
 8001908:	f24e 0142 	movw	r1, #57410	; 0xe042
 800190c:	482f      	ldr	r0, [pc, #188]	; (80019cc <MX_GPIO_Init+0x17c>)
 800190e:	f002 f863 	bl	80039d8 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001918:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4826      	ldr	r0, [pc, #152]	; (80019c4 <MX_GPIO_Init+0x174>)
 800192a:	f001 fec1 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 800192e:	2302      	movs	r3, #2
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	481f      	ldr	r0, [pc, #124]	; (80019c4 <MX_GPIO_Init+0x174>)
 8001946:	f001 feb3 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 800194a:	2322      	movs	r3, #34	; 0x22
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4819      	ldr	r0, [pc, #100]	; (80019c8 <MX_GPIO_Init+0x178>)
 8001962:	f001 fea5 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001966:	f24e 0342 	movw	r3, #57410	; 0xe042
 800196a:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4813      	ldr	r0, [pc, #76]	; (80019cc <MX_GPIO_Init+0x17c>)
 8001980:	f001 fe96 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B1B4_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B1B4_Pin|B2_Pin|Motor_Feedback_Pin;
 8001984:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <MX_GPIO_Init+0x17c>)
 800199a:	f001 fe89 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800199e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_GPIO_Init+0x178>)
 80019b4:	f001 fe7c 	bl	80036b0 <HAL_GPIO_Init>

}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400

080019d0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){};
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <Basic_Init>:

void Basic_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	LED_R(0);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	4816      	ldr	r0, [pc, #88]	; (8001a48 <Basic_Init+0x64>)
 80019f0:	f001 fff2 	bl	80039d8 <HAL_GPIO_WritePin>
	LED_B(0);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fa:	4813      	ldr	r0, [pc, #76]	; (8001a48 <Basic_Init+0x64>)
 80019fc:	f001 ffec 	bl	80039d8 <HAL_GPIO_WritePin>
	LED_G(0);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2102      	movs	r1, #2
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <Basic_Init+0x64>)
 8001a06:	f001 ffe7 	bl	80039d8 <HAL_GPIO_WritePin>
	LED_Y(0);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a10:	480d      	ldr	r0, [pc, #52]	; (8001a48 <Basic_Init+0x64>)
 8001a12:	f001 ffe1 	bl	80039d8 <HAL_GPIO_WritePin>
	memset(buf,0,32); //a buf tömböt feltöltöm 0-kkal
 8001a16:	2220      	movs	r2, #32
 8001a18:	2100      	movs	r1, #0
 8001a1a:	480c      	ldr	r0, [pc, #48]	; (8001a4c <Basic_Init+0x68>)
 8001a1c:	f004 ffd2 	bl	80069c4 <memset>
	sprintf(buf,"RobonAUT 2022 Bit Bangers\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8001a20:	490b      	ldr	r1, [pc, #44]	; (8001a50 <Basic_Init+0x6c>)
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <Basic_Init+0x68>)
 8001a24:	f005 fc40 	bl	80072a8 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <Basic_Init+0x68>)
 8001a2a:	f7fe fbf1 	bl	8000210 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	2364      	movs	r3, #100	; 0x64
 8001a34:	4905      	ldr	r1, [pc, #20]	; (8001a4c <Basic_Init+0x68>)
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <Basic_Init+0x70>)
 8001a38:	f004 fb83 	bl	8006142 <HAL_UART_Transmit>
	HAL_TIM_Base_Start(&htim5);//heart beat timer tick start
 8001a3c:	4806      	ldr	r0, [pc, #24]	; (8001a58 <Basic_Init+0x74>)
 8001a3e:	f002 fe6d 	bl	800471c <HAL_TIM_Base_Start>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	200005a8 	.word	0x200005a8
 8001a50:	080097b8 	.word	0x080097b8
 8001a54:	20000520 	.word	0x20000520
 8001a58:	200003a8 	.word	0x200003a8

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <Error_Handler+0x8>
	...

08001a68 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	tEdge[0] = 0;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <Remote_Control_Init+0x30>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
	tEdge[1] = 0;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <Remote_Control_Init+0x30>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <Remote_Control_Init+0x30>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8001a84:	2303      	movs	r3, #3
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <Remote_Control_Init+0x30>)
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f002 ff56 	bl	800493c <HAL_TIM_IC_Start_DMA>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200005dc 	.word	0x200005dc

08001a9c <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
	static int32_t dt2=0;
	static uint32_t tLow=0;
	static char string[30];//kiiratáshoz
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 8001aaa:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <Remote_Control_Task+0x140>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f0c0 808f 	bcc.w	8001bd4 <Remote_Control_Task+0x138>
	remote_control_tick = tick + period;
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <Remote_Control_Task+0x140>)
 8001abe:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8001ac0:	201e      	movs	r0, #30
 8001ac2:	f001 fa6a 	bl	8002f9a <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <Remote_Control_Task+0x144>)
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4b45      	ldr	r3, [pc, #276]	; (8001be0 <Remote_Control_Task+0x144>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bfb8      	it	lt
 8001ad4:	425b      	neglt	r3, r3
 8001ad6:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <Remote_Control_Task+0x148>)
 8001ad8:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 8001ada:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <Remote_Control_Task+0x144>)
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <Remote_Control_Task+0x144>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bfb8      	it	lt
 8001ae8:	425b      	neglt	r3, r3
 8001aea:	4a3f      	ldr	r2, [pc, #252]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001aec:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <Remote_Control_Task+0x144>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <Remote_Control_Task+0x144>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bfb8      	it	lt
 8001afc:	425b      	neglt	r3, r3
 8001afe:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <Remote_Control_Task+0x150>)
 8001b00:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8001b02:	201e      	movs	r0, #30
 8001b04:	f001 fa3b 	bl	8002f7e <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <Remote_Control_Task+0x148>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	dd06      	ble.n	8001b22 <Remote_Control_Task+0x86>
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <Remote_Control_Task+0x148>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001b1c:	33ff      	adds	r3, #255	; 0xff
 8001b1e:	4a31      	ldr	r2, [pc, #196]	; (8001be4 <Remote_Control_Task+0x148>)
 8001b20:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	dd06      	ble.n	8001b3c <Remote_Control_Task+0xa0>
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001b36:	33ff      	adds	r3, #255	; 0xff
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001b3a:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <Remote_Control_Task+0x150>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	dd06      	ble.n	8001b56 <Remote_Control_Task+0xba>
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <Remote_Control_Task+0x150>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001b50:	33ff      	adds	r3, #255	; 0xff
 8001b52:	4a26      	ldr	r2, [pc, #152]	; (8001bec <Remote_Control_Task+0x150>)
 8001b54:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <Remote_Control_Task+0x148>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da0b      	bge.n	8001b7a <Remote_Control_Task+0xde>
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <Remote_Control_Task+0x148>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <Remote_Control_Task+0x150>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	da05      	bge.n	8001b7a <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <Remote_Control_Task+0x148>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <Remote_Control_Task+0x154>)
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e016      	b.n	8001ba8 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <Remote_Control_Task+0x148>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	da0b      	bge.n	8001b9e <Remote_Control_Task+0x102>
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <Remote_Control_Task+0x150>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	da05      	bge.n	8001b9e <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <Remote_Control_Task+0x14c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <Remote_Control_Task+0x154>)
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e004      	b.n	8001ba8 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <Remote_Control_Task+0x150>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <Remote_Control_Task+0x154>)
 8001ba6:	601a      	str	r2, [r3, #0]
	}
	/*
	sprintf(string,"%d\n\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 100);
	*/
	if(tLow<70 || tLow>100) LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <Remote_Control_Task+0x154>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b45      	cmp	r3, #69	; 0x45
 8001bae:	d903      	bls.n	8001bb8 <Remote_Control_Task+0x11c>
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <Remote_Control_Task+0x154>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d906      	bls.n	8001bc6 <Remote_Control_Task+0x12a>
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <Remote_Control_Task+0x158>)
 8001bc0:	f001 ff0a 	bl	80039d8 <HAL_GPIO_WritePin>
 8001bc4:	e007      	b.n	8001bd6 <Remote_Control_Task+0x13a>
	else LED_R(0);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <Remote_Control_Task+0x158>)
 8001bce:	f001 ff03 	bl	80039d8 <HAL_GPIO_WritePin>
 8001bd2:	e000      	b.n	8001bd6 <Remote_Control_Task+0x13a>
	if(remote_control_tick>tick) return;
 8001bd4:	bf00      	nop
}
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200005e8 	.word	0x200005e8
 8001be0:	200005dc 	.word	0x200005dc
 8001be4:	200005ec 	.word	0x200005ec
 8001be8:	200005f0 	.word	0x200005f0
 8001bec:	200005f4 	.word	0x200005f4
 8001bf0:	200005f8 	.word	0x200005f8
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <Rn42_Init>:
#include <string.h>
#include <math.h>


uint8_t Rn42_Init(UART_HandleTypeDef *uart_rn42, UART_HandleTypeDef *uart_pc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b092      	sub	sp, #72	; 0x48
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	uint8_t tx_buf[30];
	uint8_t rx_buf[30];
	memset(tx_buf,0,30);
 8001c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c06:	221e      	movs	r2, #30
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 feda 	bl	80069c4 <memset>
	memset(rx_buf,0,30);
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	221e      	movs	r2, #30
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fed3 	bl	80069c4 <memset>

	TEL_7(0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2102      	movs	r1, #2
 8001c22:	4871      	ldr	r0, [pc, #452]	; (8001de8 <Rn42_Init+0x1f0>)
 8001c24:	f001 fed8 	bl	80039d8 <HAL_GPIO_WritePin>
	TEL_4(1);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	486f      	ldr	r0, [pc, #444]	; (8001dec <Rn42_Init+0x1f4>)
 8001c2e:	f001 fed3 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_Delay(501);
 8001c32:	f240 10f5 	movw	r0, #501	; 0x1f5
 8001c36:	f000 fdf1 	bl	800281c <HAL_Delay>
	//command mód
	sprintf(tx_buf,"$$$");
 8001c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3e:	496c      	ldr	r1, [pc, #432]	; (8001df0 <Rn42_Init+0x1f8>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f005 fb31 	bl	80072a8 <siprintf>
	HAL_UART_Transmit(uart_rn42, tx_buf, strlen(tx_buf), 100); //kikuljuk a comandot
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fae0 	bl	8000210 <strlen>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c58:	2364      	movs	r3, #100	; 0x64
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f004 fa71 	bl	8006142 <HAL_UART_Transmit>
	HAL_UART_Receive(uart_rn42,rx_buf, 5, 200); //fogadjuk a választ (CMD\n\R)
 8001c60:	f107 0108 	add.w	r1, r7, #8
 8001c64:	23c8      	movs	r3, #200	; 0xc8
 8001c66:	2205      	movs	r2, #5
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f004 fafc 	bl	8006266 <HAL_UART_Receive>
	HAL_UART_Transmit(uart_pc, rx_buf, strlen(rx_buf), 100); //ezt kiiratjuk magunknak
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe facc 	bl	8000210 <strlen>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	f107 0108 	add.w	r1, r7, #8
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f004 fa5d 	bl	8006142 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001c88:	2064      	movs	r0, #100	; 0x64
 8001c8a:	f000 fdc7 	bl	800281c <HAL_Delay>
	memset(tx_buf,0,30);
 8001c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c92:	221e      	movs	r2, #30
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fe94 	bl	80069c4 <memset>
	memset(rx_buf,0,30);
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	221e      	movs	r2, #30
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 fe8d 	bl	80069c4 <memset>
	HAL_Delay(100);
	memset(tx_buf,0,30);
	memset(rx_buf,0,30);
*/
	//connect a megfelelő fizikai cimre
	sprintf(tx_buf,"C,70C94ED33AC8\r");
 8001caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cae:	4951      	ldr	r1, [pc, #324]	; (8001df4 <Rn42_Init+0x1fc>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 faf9 	bl	80072a8 <siprintf>
	HAL_UART_Transmit(uart_rn42, tx_buf, strlen(tx_buf), 300);
 8001cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe faa8 	bl	8000210 <strlen>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cc8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f004 fa38 	bl	8006142 <HAL_UART_Transmit>
	HAL_UART_Receive(uart_rn42,rx_buf, 8, 200);
 8001cd2:	f107 0108 	add.w	r1, r7, #8
 8001cd6:	23c8      	movs	r3, #200	; 0xc8
 8001cd8:	2208      	movs	r2, #8
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f004 fac3 	bl	8006266 <HAL_UART_Receive>
	HAL_UART_Transmit(uart_pc, rx_buf, strlen(rx_buf), 100);
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fa93 	bl	8000210 <strlen>
 8001cea:	4603      	mov	r3, r0
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	f107 0108 	add.w	r1, r7, #8
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f004 fa24 	bl	8006142 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cfe:	f000 fd8d 	bl	800281c <HAL_Delay>
	memset(tx_buf,0,30);
 8001d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d06:	221e      	movs	r2, #30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fe5a 	bl	80069c4 <memset>
	memset(rx_buf,0,30);
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	221e      	movs	r2, #30
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f004 fe53 	bl	80069c4 <memset>

/**/	//connection status olvasás
	sprintf(tx_buf,"GK\r");
 8001d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d22:	4935      	ldr	r1, [pc, #212]	; (8001df8 <Rn42_Init+0x200>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f005 fabf 	bl	80072a8 <siprintf>
	HAL_UART_Transmit(uart_rn42, tx_buf, strlen(tx_buf), 100);
 8001d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa6e 	bl	8000210 <strlen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d3c:	2364      	movs	r3, #100	; 0x64
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f004 f9ff 	bl	8006142 <HAL_UART_Transmit>
	HAL_UART_Receive(uart_rn42,rx_buf, 8, 200);
 8001d44:	f107 0108 	add.w	r1, r7, #8
 8001d48:	23c8      	movs	r3, #200	; 0xc8
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f004 fa8a 	bl	8006266 <HAL_UART_Receive>
	HAL_UART_Transmit(uart_pc, rx_buf, strlen(rx_buf), 100);
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fa5a 	bl	8000210 <strlen>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f107 0108 	add.w	r1, r7, #8
 8001d64:	2364      	movs	r3, #100	; 0x64
 8001d66:	6838      	ldr	r0, [r7, #0]
 8001d68:	f004 f9eb 	bl	8006142 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001d6c:	2064      	movs	r0, #100	; 0x64
 8001d6e:	f000 fd55 	bl	800281c <HAL_Delay>
	memset(tx_buf,0,30);
 8001d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d76:	221e      	movs	r2, #30
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fe22 	bl	80069c4 <memset>
	memset(rx_buf,0,30);
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	221e      	movs	r2, #30
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 fe1b 	bl	80069c4 <memset>

	//megint data mód
	sprintf(tx_buf,"---\r\n");
 8001d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d92:	491a      	ldr	r1, [pc, #104]	; (8001dfc <Rn42_Init+0x204>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f005 fa87 	bl	80072a8 <siprintf>
	HAL_UART_Transmit(uart_rn42, tx_buf, strlen(tx_buf), 100); //kikuljuk a comandot
 8001d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa36 	bl	8000210 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001dac:	2364      	movs	r3, #100	; 0x64
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f004 f9c7 	bl	8006142 <HAL_UART_Transmit>
	HAL_UART_Receive(uart_rn42,rx_buf, 5, 200); //fogadjuk a választ (CMD\n\R)
 8001db4:	f107 0108 	add.w	r1, r7, #8
 8001db8:	23c8      	movs	r3, #200	; 0xc8
 8001dba:	2205      	movs	r2, #5
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f004 fa52 	bl	8006266 <HAL_UART_Receive>
	HAL_UART_Transmit(uart_pc, rx_buf, strlen(rx_buf), 100); //ezt kiiratjuk magunknak
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa22 	bl	8000210 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f107 0108 	add.w	r1, r7, #8
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f004 f9b3 	bl	8006142 <HAL_UART_Transmit>

	return 1;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3748      	adds	r7, #72	; 0x48
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020800 	.word	0x40020800
 8001df0:	080097d4 	.word	0x080097d4
 8001df4:	080097d8 	.word	0x080097d8
 8001df8:	080097e8 	.word	0x080097e8
 8001dfc:	080097ec 	.word	0x080097ec

08001e00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e3e:	2007      	movs	r0, #7
 8001e40:	f001 f876 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2e      	ldr	r2, [pc, #184]	; (8001f28 <HAL_ADC_MspInit+0xd8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d128      	bne.n	8001ec4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481c      	ldr	r0, [pc, #112]	; (8001f30 <HAL_ADC_MspInit+0xe0>)
 8001ebe:	f001 fbf7 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ec2:	e02c      	b.n	8001f1e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_ADC_MspInit+0xe4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d127      	bne.n	8001f1e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001ed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_ADC_MspInit+0xdc>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Curr_Pin|Motor_Bat_Pin;
 8001f06:	230c      	movs	r3, #12
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <HAL_ADC_MspInit+0xe8>)
 8001f1a:	f001 fbc9 	bl	80036b0 <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	3730      	adds	r7, #48	; 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40012100 	.word	0x40012100
 8001f38:	40020800 	.word	0x40020800

08001f3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <HAL_TIM_PWM_MspInit+0x64>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f6a:	e012      	b.n	8001f92 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10d      	bne.n	8001f92 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40000400 	.word	0x40000400

08001fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08c      	sub	sp, #48	; 0x30
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fcc:	d116      	bne.n	8001ffc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a47      	ldr	r2, [pc, #284]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b45      	ldr	r3, [pc, #276]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	201c      	movs	r0, #28
 8001ff0:	f000 ffa9 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ff4:	201c      	movs	r0, #28
 8001ff6:	f000 ffc2 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ffa:	e077      	b.n	80020ec <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3d      	ldr	r2, [pc, #244]	; (80020f8 <HAL_TIM_Base_MspInit+0x14c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d15f      	bne.n	80020c6 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 800203e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002050:	2302      	movs	r3, #2
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4828      	ldr	r0, [pc, #160]	; (80020fc <HAL_TIM_Base_MspInit+0x150>)
 800205c:	f001 fb28 	bl	80036b0 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 8002062:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_TIM_Base_MspInit+0x158>)
 8002064:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 8002068:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800206c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002080:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 8002084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002088:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 800208c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002090:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 8002094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002098:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 800209c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020a0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80020a8:	4815      	ldr	r0, [pc, #84]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 80020aa:	f000 ff91 	bl	8002fd0 <HAL_DMA_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_TIM_Base_MspInit+0x10c>
      Error_Handler();
 80020b4:	f7ff fcd2 	bl	8001a5c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_TIM_Base_MspInit+0x154>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020c4:	e012      	b.n	80020ec <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM5)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_TIM_Base_MspInit+0x15c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10d      	bne.n	80020ec <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 80020da:	f043 0308 	orr.w	r3, r3, #8
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_TIM_Base_MspInit+0x148>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	; 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40020400 	.word	0x40020400
 8002100:	20000438 	.word	0x20000438
 8002104:	400260b8 	.word	0x400260b8
 8002108:	40000c00 	.word	0x40000c00

0800210c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_TIM_Encoder_MspInit+0x84>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12b      	bne.n	8002186 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_TIM_Encoder_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <HAL_TIM_Encoder_MspInit+0x88>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_TIM_Encoder_MspInit+0x88>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_TIM_Encoder_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_TIM_Encoder_MspInit+0x88>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_TIM_Encoder_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = Enkoder_A_Pin|Enkoder_B_Pin;
 8002166:	23c0      	movs	r3, #192	; 0xc0
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002176:	2303      	movs	r3, #3
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002182:	f001 fa95 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40010400 	.word	0x40010400
 8002194:	40023800 	.word	0x40023800
 8002198:	40020800 	.word	0x40020800

0800219c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a37      	ldr	r2, [pc, #220]	; (8002298 <HAL_TIM_MspPostInit+0xfc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d11f      	bne.n	80021fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a35      	ldr	r2, [pc, #212]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 80021da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	482a      	ldr	r0, [pc, #168]	; (80022a0 <HAL_TIM_MspPostInit+0x104>)
 80021f8:	f001 fa5a 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021fc:	e047      	b.n	800228e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002206:	d11f      	bne.n	8002248 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6313      	str	r3, [r2, #48]	; 0x30
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8002224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002236:	2301      	movs	r3, #1
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4817      	ldr	r0, [pc, #92]	; (80022a0 <HAL_TIM_MspPostInit+0x104>)
 8002242:	f001 fa35 	bl	80036b0 <HAL_GPIO_Init>
}
 8002246:	e022      	b.n	800228e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <HAL_TIM_MspPostInit+0x108>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d11d      	bne.n	800228e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_TIM_MspPostInit+0x100>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800227e:	2302      	movs	r3, #2
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_TIM_MspPostInit+0x104>)
 800228a:	f001 fa11 	bl	80036b0 <HAL_GPIO_Init>
}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40000400 	.word	0x40000400

080022a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b090      	sub	sp, #64	; 0x40
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a74      	ldr	r2, [pc, #464]	; (8002498 <HAL_UART_MspInit+0x1f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d14b      	bne.n	8002362 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ce:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a72      	ldr	r2, [pc, #456]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80022d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b70      	ldr	r3, [pc, #448]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	4b6c      	ldr	r3, [pc, #432]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a6b      	ldr	r2, [pc, #428]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b69      	ldr	r3, [pc, #420]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	4b65      	ldr	r3, [pc, #404]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a64      	ldr	r2, [pc, #400]	; (800249c <HAL_UART_MspInit+0x1f4>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b62      	ldr	r3, [pc, #392]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002330:	2308      	movs	r3, #8
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002338:	4619      	mov	r1, r3
 800233a:	4859      	ldr	r0, [pc, #356]	; (80024a0 <HAL_UART_MspInit+0x1f8>)
 800233c:	f001 f9b8 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8002340:	2304      	movs	r3, #4
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002350:	2308      	movs	r3, #8
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002358:	4619      	mov	r1, r3
 800235a:	4852      	ldr	r0, [pc, #328]	; (80024a4 <HAL_UART_MspInit+0x1fc>)
 800235c:	f001 f9a8 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002360:	e096      	b.n	8002490 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a50      	ldr	r2, [pc, #320]	; (80024a8 <HAL_UART_MspInit+0x200>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d12d      	bne.n	80023c8 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART1_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	4a49      	ldr	r2, [pc, #292]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6453      	str	r3, [r2, #68]	; 0x44
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_UART_MspInit+0x1f4>)
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	4b43      	ldr	r3, [pc, #268]	; (800249c <HAL_UART_MspInit+0x1f4>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a42      	ldr	r2, [pc, #264]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <HAL_UART_MspInit+0x1f4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80023a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b6:	2307      	movs	r3, #7
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023be:	4619      	mov	r1, r3
 80023c0:	483a      	ldr	r0, [pc, #232]	; (80024ac <HAL_UART_MspInit+0x204>)
 80023c2:	f001 f975 	bl	80036b0 <HAL_GPIO_Init>
}
 80023c6:	e063      	b.n	8002490 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a38      	ldr	r2, [pc, #224]	; (80024b0 <HAL_UART_MspInit+0x208>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d12c      	bne.n	800242c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_UART_MspInit+0x1f4>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800240a:	230c      	movs	r3, #12
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241a:	2307      	movs	r3, #7
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	4821      	ldr	r0, [pc, #132]	; (80024ac <HAL_UART_MspInit+0x204>)
 8002426:	f001 f943 	bl	80036b0 <HAL_GPIO_Init>
}
 800242a:	e031      	b.n	8002490 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <HAL_UART_MspInit+0x20c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d12c      	bne.n	8002490 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_UART_MspInit+0x1f4>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_UART_MspInit+0x1f4>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <HAL_UART_MspInit+0x1f4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 800246e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002480:	2307      	movs	r3, #7
 8002482:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002488:	4619      	mov	r1, r3
 800248a:	4805      	ldr	r0, [pc, #20]	; (80024a0 <HAL_UART_MspInit+0x1f8>)
 800248c:	f001 f910 	bl	80036b0 <HAL_GPIO_Init>
}
 8002490:	bf00      	nop
 8002492:	3740      	adds	r7, #64	; 0x40
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40005000 	.word	0x40005000
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020800 	.word	0x40020800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40004400 	.word	0x40004400
 80024b4:	40004800 	.word	0x40004800

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002504:	f000 f96a 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <TIM2_IRQHandler+0x10>)
 8002512:	f002 fc63 	bl	8004ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200002d0 	.word	0x200002d0

08002520 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <DMA1_Stream7_IRQHandler+0x10>)
 8002526:	f000 fe59 	bl	80031dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000438 	.word	0x20000438

08002534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	return 1;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_kill>:

int _kill(int pid, int sig)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800254e:	f004 fa0f 	bl	8006970 <__errno>
 8002552:	4603      	mov	r3, r0
 8002554:	2216      	movs	r2, #22
 8002556:	601a      	str	r2, [r3, #0]
	return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_exit>:

void _exit (int status)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ffe7 	bl	8002544 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002576:	e7fe      	b.n	8002576 <_exit+0x12>

08002578 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e00a      	b.n	80025a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800258a:	f3af 8000 	nop.w
 800258e:	4601      	mov	r1, r0
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	60ba      	str	r2, [r7, #8]
 8002596:	b2ca      	uxtb	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	3301      	adds	r3, #1
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	dbf0      	blt.n	800258a <_read+0x12>
	}

return len;
 80025a8:	687b      	ldr	r3, [r7, #4]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e009      	b.n	80025d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	60ba      	str	r2, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3301      	adds	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dbf1      	blt.n	80025c4 <_write+0x12>
	}
	return len;
 80025e0:	687b      	ldr	r3, [r7, #4]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_close>:

int _close(int file)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
	return -1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002612:	605a      	str	r2, [r3, #4]
	return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_isatty>:

int _isatty(int file)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
	return 1;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
	return 0;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f004 f974 	bl	8006970 <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	220c      	movs	r2, #12
 800268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20020000 	.word	0x20020000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	200005fc 	.word	0x200005fc
 80026bc:	20000618 	.word	0x20000618

080026c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <SystemInit+0x20>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <SystemInit+0x20>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800271c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ea:	490e      	ldr	r1, [pc, #56]	; (8002724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002700:	4c0b      	ldr	r4, [pc, #44]	; (8002730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800270e:	f7ff ffd7 	bl	80026c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002712:	f004 f933 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002716:	f7fe fbe9 	bl	8000eec <main>
  bx  lr    
 800271a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800271c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002724:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002728:	08009bfc 	.word	0x08009bfc
  ldr r2, =_sbss
 800272c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002730:	20000614 	.word	0x20000614

08002734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC_IRQHandler>
	...

08002738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <HAL_Init+0x40>)
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_Init+0x40>)
 800274e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_Init+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_Init+0x40>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f000 fbe5 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002766:	2000      	movs	r0, #0
 8002768:	f000 f808 	bl	800277c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276c:	f7ff fb48 	bl	8001e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x54>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_InitTick+0x58>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	fbb3 f3f1 	udiv	r3, r3, r1
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fc0b 	bl	8002fb6 <HAL_SYSTICK_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00e      	b.n	80027c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d80a      	bhi.n	80027c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b0:	2200      	movs	r2, #0
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f000 fbc5 	bl	8002f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027bc:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <HAL_InitTick+0x5c>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000008 	.word	0x20000008
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x20>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_IncTick+0x24>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_IncTick+0x24>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000008 	.word	0x20000008
 8002800:	20000600 	.word	0x20000600

08002804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_GetTick+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000600 	.word	0x20000600

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff ffee 	bl	8002804 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d005      	beq.n	8002842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_Delay+0x44>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002842:	bf00      	nop
 8002844:	f7ff ffde 	bl	8002804 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	429a      	cmp	r2, r3
 8002852:	d8f7      	bhi.n	8002844 <HAL_Delay+0x28>
  {
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000008 	.word	0x20000008

08002864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e033      	b.n	80028e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fae4 	bl	8001e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028aa:	f023 0302 	bic.w	r3, r3, #2
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f94a 	bl	8002b50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f023 0303 	bic.w	r3, r3, #3
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
 80028d2:	e001      	b.n	80028d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1c>
 8002904:	2302      	movs	r3, #2
 8002906:	e113      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x244>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b09      	cmp	r3, #9
 8002916:	d925      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68d9      	ldr	r1, [r3, #12]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	2207      	movs	r2, #7
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43da      	mvns	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	400a      	ands	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4403      	add	r3, r0
 8002956:	3b1e      	subs	r3, #30
 8002958:	409a      	lsls	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e022      	b.n	80029aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	2207      	movs	r2, #7
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	4603      	mov	r3, r0
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4403      	add	r3, r0
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d824      	bhi.n	80029fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b05      	subs	r3, #5
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	e04c      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d824      	bhi.n	8002a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b23      	subs	r3, #35	; 0x23
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b23      	subs	r3, #35	; 0x23
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e023      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b41      	subs	r3, #65	; 0x41
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b41      	subs	r3, #65	; 0x41
 8002a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_ADC_ConfigChannel+0x250>)
 8002a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_ADC_ConfigChannel+0x254>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12b      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x1f4>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d122      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <HAL_ADC_ConfigChannel+0x258>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d111      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_ADC_ConfigChannel+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_ADC_ConfigChannel+0x260>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9a      	lsrs	r2, r3, #18
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40012300 	.word	0x40012300
 8002b40:	40012000 	.word	0x40012000
 8002b44:	10000012 	.word	0x10000012
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	431bde83 	.word	0x431bde83

08002b50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b58:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <ADC_Init+0x1f0>)
 8002b5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <ADC_Init+0x1f4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e00f      	b.n	8002c4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0202 	bic.w	r2, r2, #2
 8002c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7e1b      	ldrb	r3, [r3, #24]
 8002c68:	005a      	lsls	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01b      	beq.n	8002cb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	035a      	lsls	r2, r3, #13
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e007      	b.n	8002cc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	051a      	lsls	r2, r3, #20
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d06:	025a      	lsls	r2, r3, #9
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	029a      	lsls	r2, r3, #10
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40012300 	.word	0x40012300
 8002d44:	0f000001 	.word	0x0f000001

08002d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db12      	blt.n	8002e20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	490a      	ldr	r1, [pc, #40]	; (8002e2c <__NVIC_DisableIRQ+0x44>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	3320      	adds	r3, #32
 8002e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e14:	f3bf 8f4f 	dsb	sy
}
 8002e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e1a:	f3bf 8f6f 	isb	sy
}
 8002e1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d301      	bcc.n	8002f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <SysTick_Config+0x40>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f7ff ff8e 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <SysTick_Config+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <SysTick_Config+0x40>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000e010 	.word	0xe000e010

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff05 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f58:	f7ff ff1a 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ff8e 	bl	8002e84 <NVIC_EncodePriority>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff5d 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff0d 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff1d 	bl	8002de8 <__NVIC_DisableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ff94 	bl	8002eec <SysTick_Config>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fc12 	bl	8002804 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e099      	b.n	8003120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300c:	e00f      	b.n	800302e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300e:	f7ff fbf9 	bl	8002804 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b05      	cmp	r3, #5
 800301a:	d908      	bls.n	800302e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2203      	movs	r2, #3
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e078      	b.n	8003120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e8      	bne.n	800300e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_DMA_Init+0x158>)
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b04      	cmp	r3, #4
 8003086:	d107      	bne.n	8003098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	4313      	orrs	r3, r2
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d117      	bne.n	80030f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00e      	beq.n	80030f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fa6f 	bl	80035b8 <DMA_CheckFifoParam>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ee:	2301      	movs	r3, #1
 80030f0:	e016      	b.n	8003120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa26 	bl	800354c <DMA_CalcBaseAndBitshift>
 8003100:	4603      	mov	r3, r0
 8003102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	223f      	movs	r2, #63	; 0x3f
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	f010803f 	.word	0xf010803f

0800312c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_DMA_Start_IT+0x26>
 800314e:	2302      	movs	r3, #2
 8003150:	e040      	b.n	80031d4 <HAL_DMA_Start_IT+0xa8>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d12f      	bne.n	80031c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f9b8 	bl	80034f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	223f      	movs	r2, #63	; 0x3f
 8003186:	409a      	lsls	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0216 	orr.w	r2, r2, #22
 800319a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0208 	orr.w	r2, r2, #8
 80031b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e005      	b.n	80031d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
 80031d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031e8:	4b8e      	ldr	r3, [pc, #568]	; (8003424 <HAL_DMA_IRQHandler+0x248>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a8e      	ldr	r2, [pc, #568]	; (8003428 <HAL_DMA_IRQHandler+0x24c>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	0a9b      	lsrs	r3, r3, #10
 80031f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	2208      	movs	r2, #8
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01a      	beq.n	8003248 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0204 	bic.w	r2, r2, #4
 800322e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2208      	movs	r2, #8
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2201      	movs	r2, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2201      	movs	r2, #1
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f043 0202 	orr.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	2204      	movs	r2, #4
 8003284:	409a      	lsls	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d012      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	2204      	movs	r2, #4
 80032a2:	409a      	lsls	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2210      	movs	r2, #16
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d043      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d03c      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	2210      	movs	r2, #16
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d018      	beq.n	800331e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d024      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
 800330a:	e01f      	b.n	800334c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
 800331c:	e016      	b.n	800334c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0208 	bic.w	r2, r2, #8
 800333a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2220      	movs	r2, #32
 8003352:	409a      	lsls	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 808f 	beq.w	800347c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8087 	beq.w	800347c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2220      	movs	r2, #32
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b05      	cmp	r3, #5
 8003384:	d136      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0216 	bic.w	r2, r2, #22
 8003394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x1da>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0208 	bic.w	r2, r2, #8
 80033c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	223f      	movs	r2, #63	; 0x3f
 80033cc:	409a      	lsls	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d07e      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
        }
        return;
 80033f2:	e079      	b.n	80034e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01d      	beq.n	800343e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	2b00      	cmp	r3, #0
 8003416:	d031      	beq.n	800347c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
 8003420:	e02c      	b.n	800347c <HAL_DMA_IRQHandler+0x2a0>
 8003422:	bf00      	nop
 8003424:	20000000 	.word	0x20000000
 8003428:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d023      	beq.n	800347c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
 800343c:	e01e      	b.n	800347c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10f      	bne.n	800346c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0210 	bic.w	r2, r2, #16
 800345a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	2b00      	cmp	r3, #0
 8003482:	d032      	beq.n	80034ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2205      	movs	r2, #5
 8003494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3301      	adds	r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d307      	bcc.n	80034c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f2      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x2cc>
 80034c2:	e000      	b.n	80034c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e000      	b.n	80034ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80034e8:	bf00      	nop
    }
  }
}
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800350c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d108      	bne.n	8003530 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800352e:	e007      	b.n	8003540 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3b10      	subs	r3, #16
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <DMA_CalcBaseAndBitshift+0x64>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003566:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d909      	bls.n	800358e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	1d1a      	adds	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	659a      	str	r2, [r3, #88]	; 0x58
 800358c:	e007      	b.n	800359e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	aaaaaaab 	.word	0xaaaaaaab
 80035b4:	0800980c 	.word	0x0800980c

080035b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11f      	bne.n	8003612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d856      	bhi.n	8003686 <DMA_CheckFifoParam+0xce>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <DMA_CheckFifoParam+0x28>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	08003603 	.word	0x08003603
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	08003687 	.word	0x08003687
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d046      	beq.n	800368a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e043      	b.n	800368a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800360a:	d140      	bne.n	800368e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003610:	e03d      	b.n	800368e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	d121      	bne.n	8003660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d837      	bhi.n	8003692 <DMA_CheckFifoParam+0xda>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <DMA_CheckFifoParam+0x70>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	0800363f 	.word	0x0800363f
 8003630:	08003639 	.word	0x08003639
 8003634:	08003651 	.word	0x08003651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e030      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d025      	beq.n	8003696 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364e:	e022      	b.n	8003696 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003658:	d11f      	bne.n	800369a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800365e:	e01c      	b.n	800369a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d903      	bls.n	800366e <DMA_CheckFifoParam+0xb6>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d003      	beq.n	8003674 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800366c:	e018      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      break;
 8003672:	e015      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e00b      	b.n	800369e <DMA_CheckFifoParam+0xe6>
      break;
 8003686:	bf00      	nop
 8003688:	e00a      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800368a:	bf00      	nop
 800368c:	e008      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
 8003690:	e006      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003692:	bf00      	nop
 8003694:	e004      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
    }
  } 
  
  return status; 
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e165      	b.n	8003998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 8154 	bne.w	8003992 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d005      	beq.n	8003702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d130      	bne.n	8003764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d017      	beq.n	80037a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d123      	bne.n	80037f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80ae 	beq.w	8003992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <HAL_GPIO_Init+0x300>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a5c      	ldr	r2, [pc, #368]	; (80039b0 <HAL_GPIO_Init+0x300>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b5a      	ldr	r3, [pc, #360]	; (80039b0 <HAL_GPIO_Init+0x300>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_GPIO_Init+0x304>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4f      	ldr	r2, [pc, #316]	; (80039b8 <HAL_GPIO_Init+0x308>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d025      	beq.n	80038ca <HAL_GPIO_Init+0x21a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4e      	ldr	r2, [pc, #312]	; (80039bc <HAL_GPIO_Init+0x30c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01f      	beq.n	80038c6 <HAL_GPIO_Init+0x216>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4d      	ldr	r2, [pc, #308]	; (80039c0 <HAL_GPIO_Init+0x310>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d019      	beq.n	80038c2 <HAL_GPIO_Init+0x212>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4c      	ldr	r2, [pc, #304]	; (80039c4 <HAL_GPIO_Init+0x314>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_GPIO_Init+0x20e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_GPIO_Init+0x318>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00d      	beq.n	80038ba <HAL_GPIO_Init+0x20a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <HAL_GPIO_Init+0x31c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <HAL_GPIO_Init+0x206>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <HAL_GPIO_Init+0x320>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_GPIO_Init+0x202>
 80038ae:	2306      	movs	r3, #6
 80038b0:	e00c      	b.n	80038cc <HAL_GPIO_Init+0x21c>
 80038b2:	2307      	movs	r3, #7
 80038b4:	e00a      	b.n	80038cc <HAL_GPIO_Init+0x21c>
 80038b6:	2305      	movs	r3, #5
 80038b8:	e008      	b.n	80038cc <HAL_GPIO_Init+0x21c>
 80038ba:	2304      	movs	r3, #4
 80038bc:	e006      	b.n	80038cc <HAL_GPIO_Init+0x21c>
 80038be:	2303      	movs	r3, #3
 80038c0:	e004      	b.n	80038cc <HAL_GPIO_Init+0x21c>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e002      	b.n	80038cc <HAL_GPIO_Init+0x21c>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_GPIO_Init+0x21c>
 80038ca:	2300      	movs	r3, #0
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f002 0203 	and.w	r2, r2, #3
 80038d2:	0092      	lsls	r2, r2, #2
 80038d4:	4093      	lsls	r3, r2
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038dc:	4935      	ldr	r1, [pc, #212]	; (80039b4 <HAL_GPIO_Init+0x304>)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	3302      	adds	r3, #2
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ea:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_GPIO_Init+0x324>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800390e:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <HAL_GPIO_Init+0x324>)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003914:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_GPIO_Init+0x324>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <HAL_GPIO_Init+0x324>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_GPIO_Init+0x324>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_GPIO_Init+0x324>)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_GPIO_Init+0x324>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800398c:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <HAL_GPIO_Init+0x324>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3301      	adds	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b0f      	cmp	r3, #15
 800399c:	f67f ae96 	bls.w	80036cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40013800 	.word	0x40013800
 80039b8:	40020000 	.word	0x40020000
 80039bc:	40020400 	.word	0x40020400
 80039c0:	40020800 	.word	0x40020800
 80039c4:	40020c00 	.word	0x40020c00
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40021400 	.word	0x40021400
 80039d0:	40021800 	.word	0x40021800
 80039d4:	40013c00 	.word	0x40013c00

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039f4:	e003      	b.n	80039fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	041a      	lsls	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	619a      	str	r2, [r3, #24]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x90>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x90>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x90>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a38:	f7fe fee4 	bl	8002804 <HAL_GetTick>
 8003a3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a3e:	e009      	b.n	8003a54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a40:	f7fe fee0 	bl	8002804 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4e:	d901      	bls.n	8003a54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e01f      	b.n	8003a94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d1ee      	bne.n	8003a40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a68:	f7fe fecc 	bl	8002804 <HAL_GetTick>
 8003a6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a6e:	e009      	b.n	8003a84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a70:	f7fe fec8 	bl	8002804 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a7e:	d901      	bls.n	8003a84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e007      	b.n	8003a94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a84:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a90:	d1ee      	bne.n	8003a70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	420e0040 	.word	0x420e0040
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	420e0044 	.word	0x420e0044

08003aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0cc      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b68      	ldr	r3, [pc, #416]	; (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d90c      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b65      	ldr	r3, [pc, #404]	; (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0b8      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d020      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b00:	4b59      	ldr	r3, [pc, #356]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a58      	ldr	r2, [pc, #352]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b18:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a52      	ldr	r2, [pc, #328]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b24:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	494d      	ldr	r1, [pc, #308]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d044      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d119      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e07f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e06f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e067      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4934      	ldr	r1, [pc, #208]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fe32 	bl	8002804 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fe fe2e 	bl	8002804 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e04f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d20c      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e032      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c00:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4916      	ldr	r1, [pc, #88]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	490e      	ldr	r1, [pc, #56]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c32:	f000 f855 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490a      	ldr	r1, [pc, #40]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fd92 	bl	800277c <HAL_InitTick>

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023c00 	.word	0x40023c00
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	080097f4 	.word	0x080097f4
 8003c70:	20000000 	.word	0x20000000
 8003c74:	20000004 	.word	0x20000004

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c94:	f7ff fff0 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08009804 	.word	0x08009804

08003cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cbc:	f7ff ffdc 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0b5b      	lsrs	r3, r3, #13
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08009804 	.word	0x08009804

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce4:	b0ae      	sub	sp, #184	; 0xb8
 8003ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d06:	4bcb      	ldr	r3, [pc, #812]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	f200 8206 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x440>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08004121 	.word	0x08004121
 8003d24:	08004121 	.word	0x08004121
 8003d28:	08004121 	.word	0x08004121
 8003d2c:	08003d59 	.word	0x08003d59
 8003d30:	08004121 	.word	0x08004121
 8003d34:	08004121 	.word	0x08004121
 8003d38:	08004121 	.word	0x08004121
 8003d3c:	08003d61 	.word	0x08003d61
 8003d40:	08004121 	.word	0x08004121
 8003d44:	08004121 	.word	0x08004121
 8003d48:	08004121 	.word	0x08004121
 8003d4c:	08003f51 	.word	0x08003f51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4bb9      	ldr	r3, [pc, #740]	; (8004038 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d56:	e1e7      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d58:	4bb8      	ldr	r3, [pc, #736]	; (800403c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d5e:	e1e3      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4bb4      	ldr	r3, [pc, #720]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6c:	4bb1      	ldr	r3, [pc, #708]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d071      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d78:	4bae      	ldr	r3, [pc, #696]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d9e:	4622      	mov	r2, r4
 8003da0:	462b      	mov	r3, r5
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	0159      	lsls	r1, r3, #5
 8003dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db0:	0150      	lsls	r0, r2, #5
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4621      	mov	r1, r4
 8003db8:	1a51      	subs	r1, r2, r1
 8003dba:	6439      	str	r1, [r7, #64]	; 0x40
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	018b      	lsls	r3, r1, #6
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dda:	4641      	mov	r1, r8
 8003ddc:	018a      	lsls	r2, r1, #6
 8003dde:	4641      	mov	r1, r8
 8003de0:	1a51      	subs	r1, r2, r1
 8003de2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003de4:	4649      	mov	r1, r9
 8003de6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003df8:	4649      	mov	r1, r9
 8003dfa:	00cb      	lsls	r3, r1, #3
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e02:	4641      	mov	r1, r8
 8003e04:	00ca      	lsls	r2, r1, #3
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
 8003e12:	462b      	mov	r3, r5
 8003e14:	460a      	mov	r2, r1
 8003e16:	eb42 0303 	adc.w	r3, r2, r3
 8003e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e28:	4629      	mov	r1, r5
 8003e2a:	024b      	lsls	r3, r1, #9
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e32:	4621      	mov	r1, r4
 8003e34:	024a      	lsls	r2, r1, #9
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e4c:	f7fc fecc 	bl	8000be8 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4613      	mov	r3, r2
 8003e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e5a:	e067      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5c:	4b75      	ldr	r3, [pc, #468]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e76:	2300      	movs	r3, #0
 8003e78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e7e:	4622      	mov	r2, r4
 8003e80:	462b      	mov	r3, r5
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	0159      	lsls	r1, r3, #5
 8003e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e90:	0150      	lsls	r0, r2, #5
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4621      	mov	r1, r4
 8003e98:	1a51      	subs	r1, r2, r1
 8003e9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	018b      	lsls	r3, r1, #6
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eba:	4641      	mov	r1, r8
 8003ebc:	018a      	lsls	r2, r1, #6
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ede:	4692      	mov	sl, r2
 8003ee0:	469b      	mov	fp, r3
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	462b      	mov	r3, r5
 8003eec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003efe:	4629      	mov	r1, r5
 8003f00:	028b      	lsls	r3, r1, #10
 8003f02:	4621      	mov	r1, r4
 8003f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f08:	4621      	mov	r1, r4
 8003f0a:	028a      	lsls	r2, r1, #10
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f14:	2200      	movs	r2, #0
 8003f16:	673b      	str	r3, [r7, #112]	; 0x70
 8003f18:	677a      	str	r2, [r7, #116]	; 0x74
 8003f1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f1e:	f7fc fe63 	bl	8000be8 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4613      	mov	r3, r2
 8003f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f2c:	4b41      	ldr	r3, [pc, #260]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	3301      	adds	r3, #1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f4e:	e0eb      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f5c:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d06b      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f68:	4b32      	ldr	r3, [pc, #200]	; (8004034 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	2200      	movs	r2, #0
 8003f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f84:	4622      	mov	r2, r4
 8003f86:	462b      	mov	r3, r5
 8003f88:	f04f 0000 	mov.w	r0, #0
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	0159      	lsls	r1, r3, #5
 8003f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f96:	0150      	lsls	r0, r2, #5
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	1a51      	subs	r1, r2, r1
 8003fa0:	61b9      	str	r1, [r7, #24]
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	018b      	lsls	r3, r1, #6
 8003fba:	4651      	mov	r1, sl
 8003fbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	018a      	lsls	r2, r1, #6
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ebb2 0801 	subs.w	r8, r2, r1
 8003fca:	4659      	mov	r1, fp
 8003fcc:	eb63 0901 	sbc.w	r9, r3, r1
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe4:	4690      	mov	r8, r2
 8003fe6:	4699      	mov	r9, r3
 8003fe8:	4623      	mov	r3, r4
 8003fea:	eb18 0303 	adds.w	r3, r8, r3
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	462b      	mov	r3, r5
 8003ff2:	eb49 0303 	adc.w	r3, r9, r3
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004004:	4629      	mov	r1, r5
 8004006:	024b      	lsls	r3, r1, #9
 8004008:	4621      	mov	r1, r4
 800400a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800400e:	4621      	mov	r1, r4
 8004010:	024a      	lsls	r2, r1, #9
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800401a:	2200      	movs	r2, #0
 800401c:	65bb      	str	r3, [r7, #88]	; 0x58
 800401e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004024:	f7fc fde0 	bl	8000be8 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004032:	e065      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x420>
 8004034:	40023800 	.word	0x40023800
 8004038:	00f42400 	.word	0x00f42400
 800403c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004040:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <HAL_RCC_GetSysClockFreq+0x458>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	2200      	movs	r2, #0
 8004048:	4618      	mov	r0, r3
 800404a:	4611      	mov	r1, r2
 800404c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004050:	653b      	str	r3, [r7, #80]	; 0x50
 8004052:	2300      	movs	r3, #0
 8004054:	657b      	str	r3, [r7, #84]	; 0x54
 8004056:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800405a:	4642      	mov	r2, r8
 800405c:	464b      	mov	r3, r9
 800405e:	f04f 0000 	mov.w	r0, #0
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	0159      	lsls	r1, r3, #5
 8004068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406c:	0150      	lsls	r0, r2, #5
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4641      	mov	r1, r8
 8004074:	1a51      	subs	r1, r2, r1
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	4649      	mov	r1, r9
 800407a:	eb63 0301 	sbc.w	r3, r3, r1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800408c:	4659      	mov	r1, fp
 800408e:	018b      	lsls	r3, r1, #6
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004096:	4651      	mov	r1, sl
 8004098:	018a      	lsls	r2, r1, #6
 800409a:	4651      	mov	r1, sl
 800409c:	1a54      	subs	r4, r2, r1
 800409e:	4659      	mov	r1, fp
 80040a0:	eb63 0501 	sbc.w	r5, r3, r1
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	00eb      	lsls	r3, r5, #3
 80040ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b2:	00e2      	lsls	r2, r4, #3
 80040b4:	4614      	mov	r4, r2
 80040b6:	461d      	mov	r5, r3
 80040b8:	4643      	mov	r3, r8
 80040ba:	18e3      	adds	r3, r4, r3
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	464b      	mov	r3, r9
 80040c0:	eb45 0303 	adc.w	r3, r5, r3
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d2:	4629      	mov	r1, r5
 80040d4:	028b      	lsls	r3, r1, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040dc:	4621      	mov	r1, r4
 80040de:	028a      	lsls	r2, r1, #10
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e8:	2200      	movs	r2, #0
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80040ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040f2:	f7fc fd79 	bl	8000be8 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4613      	mov	r3, r2
 80040fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <HAL_RCC_GetSysClockFreq+0x458>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0f1b      	lsrs	r3, r3, #28
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800410e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800411e:	e003      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800412c:	4618      	mov	r0, r3
 800412e:	37b8      	adds	r7, #184	; 0xb8
 8004130:	46bd      	mov	sp, r7
 8004132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	00f42400 	.word	0x00f42400

08004140 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e28d      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8083 	beq.w	8004266 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004160:	4b94      	ldr	r3, [pc, #592]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b04      	cmp	r3, #4
 800416a:	d019      	beq.n	80041a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800416c:	4b91      	ldr	r3, [pc, #580]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004174:	2b08      	cmp	r3, #8
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004178:	4b8e      	ldr	r3, [pc, #568]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004184:	d00c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004186:	4b8b      	ldr	r3, [pc, #556]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800418e:	2b0c      	cmp	r3, #12
 8004190:	d112      	bne.n	80041b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419e:	d10b      	bne.n	80041b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	4b84      	ldr	r3, [pc, #528]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05b      	beq.n	8004264 <HAL_RCC_OscConfig+0x124>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d157      	bne.n	8004264 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e25a      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x90>
 80041c2:	4b7c      	ldr	r3, [pc, #496]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7b      	ldr	r2, [pc, #492]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xcc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0xb4>
 80041da:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a72      	ldr	r2, [pc, #456]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xcc>
 80041f4:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b6c      	ldr	r3, [pc, #432]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a6b      	ldr	r2, [pc, #428]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe faf6 	bl	8002804 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7fe faf2 	bl	8002804 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e21f      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b61      	ldr	r3, [pc, #388]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xdc>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fe fae2 	bl	8002804 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe fade 	bl	8002804 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e20b      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	4b57      	ldr	r3, [pc, #348]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x104>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06f      	beq.n	8004352 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004272:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b00      	cmp	r3, #0
 800427c:	d017      	beq.n	80042ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800427e:	4b4d      	ldr	r3, [pc, #308]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004286:	2b08      	cmp	r3, #8
 8004288:	d105      	bne.n	8004296 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d11c      	bne.n	80042dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x186>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e1d3      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4937      	ldr	r1, [pc, #220]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	e03a      	b.n	8004352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e4:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCC_OscConfig+0x278>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fe fa8b 	bl	8002804 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fe fa87 	bl	8002804 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1b4      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4925      	ldr	r1, [pc, #148]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
 8004324:	e015      	b.n	8004352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x278>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fe fa6a 	bl	8002804 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004334:	f7fe fa66 	bl	8002804 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e193      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004346:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d036      	beq.n	80043cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <HAL_RCC_OscConfig+0x27c>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fe fa4a 	bl	8002804 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004374:	f7fe fa46 	bl	8002804 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e173      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x234>
 8004392:	e01b      	b.n	80043cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_OscConfig+0x27c>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fe fa33 	bl	8002804 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	e00e      	b.n	80043c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fe fa2f 	bl	8002804 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d907      	bls.n	80043c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e15c      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	42470000 	.word	0x42470000
 80043bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b8a      	ldr	r3, [pc, #552]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ea      	bne.n	80043a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8097 	beq.w	8004508 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4b83      	ldr	r3, [pc, #524]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	4b7f      	ldr	r3, [pc, #508]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a7e      	ldr	r2, [pc, #504]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b7c      	ldr	r3, [pc, #496]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b79      	ldr	r3, [pc, #484]	; (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004416:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a75      	ldr	r2, [pc, #468]	; (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fe f9ef 	bl	8002804 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fe f9eb 	bl	8002804 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e118      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x31e>
 8004450:	4b66      	ldr	r3, [pc, #408]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4a65      	ldr	r2, [pc, #404]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x358>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x340>
 8004466:	4b61      	ldr	r3, [pc, #388]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a60      	ldr	r2, [pc, #384]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
 8004472:	4b5e      	ldr	r3, [pc, #376]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a5d      	ldr	r2, [pc, #372]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0x358>
 8004480:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4a59      	ldr	r2, [pc, #356]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	; 0x70
 800448c:	4b57      	ldr	r3, [pc, #348]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	4a56      	ldr	r2, [pc, #344]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004492:	f023 0304 	bic.w	r3, r3, #4
 8004496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d015      	beq.n	80044cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fe f9b0 	bl	8002804 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fe f9ac 	bl	8002804 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0d7      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	4b4b      	ldr	r3, [pc, #300]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ee      	beq.n	80044a8 <HAL_RCC_OscConfig+0x368>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fe f99a 	bl	8002804 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fe f996 	bl	8002804 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0c1      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	4b40      	ldr	r3, [pc, #256]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ee      	bne.n	80044d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80ad 	beq.w	800466c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004512:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b08      	cmp	r3, #8
 800451c:	d060      	beq.n	80045e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d145      	bne.n	80045b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <HAL_RCC_OscConfig+0x4b4>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe f96a 	bl	8002804 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe f966 	bl	8002804 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e093      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	071b      	lsls	r3, r3, #28
 800457e:	491b      	ldr	r1, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCC_OscConfig+0x4b4>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fe f93b 	bl	8002804 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004592:	f7fe f937 	bl	8002804 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e064      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x452>
 80045b0:	e05c      	b.n	800466c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <HAL_RCC_OscConfig+0x4b4>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fe f924 	bl	8002804 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fe f920 	bl	8002804 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e04d      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_OscConfig+0x4ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x480>
 80045de:	e045      	b.n	800466c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d107      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e040      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40007000 	.word	0x40007000
 80045f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f8:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <HAL_RCC_OscConfig+0x538>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d030      	beq.n	8004668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d129      	bne.n	8004668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d122      	bne.n	8004668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800462e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004630:	4293      	cmp	r3, r2
 8004632:	d119      	bne.n	8004668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	3b01      	subs	r3, #1
 8004642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d10f      	bne.n	8004668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d107      	bne.n	8004668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800

0800467c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e041      	b.n	8004712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fd fc82 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f000 ffd8 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e046      	b.n	80047c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_TIM_Base_Start+0xb4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d01d      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <HAL_TIM_Base_Start+0xb8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_TIM_Base_Start+0xbc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_TIM_Base_Start+0xc0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_TIM_Base_Start+0xc4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_TIM_Base_Start+0xc8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_TIM_Base_Start+0xcc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d111      	bne.n	80047b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b06      	cmp	r3, #6
 800479c:	d010      	beq.n	80047c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	e007      	b.n	80047c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40001800 	.word	0x40001800

080047ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e041      	b.n	8004882 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd fb92 	bl	8001f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f000 ff20 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e041      	b.n	8004920 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f839 	bl	8004928 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 fed1 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_TIM_IC_Start_DMA+0x22>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e013      	b.n	8004986 <HAL_TIM_IC_Start_DMA+0x4a>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d104      	bne.n	800496e <HAL_TIM_IC_Start_DMA+0x32>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e00b      	b.n	8004986 <HAL_TIM_IC_Start_DMA+0x4a>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d104      	bne.n	800497e <HAL_TIM_IC_Start_DMA+0x42>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e003      	b.n	8004986 <HAL_TIM_IC_Start_DMA+0x4a>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004984:	b2db      	uxtb	r3, r3
 8004986:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_TIM_IC_Start_DMA+0x5c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e013      	b.n	80049c0 <HAL_TIM_IC_Start_DMA+0x84>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b04      	cmp	r3, #4
 800499c:	d104      	bne.n	80049a8 <HAL_TIM_IC_Start_DMA+0x6c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e00b      	b.n	80049c0 <HAL_TIM_IC_Start_DMA+0x84>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_IC_Start_DMA+0x7c>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e003      	b.n	80049c0 <HAL_TIM_IC_Start_DMA+0x84>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80049c2:	7dbb      	ldrb	r3, [r7, #22]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d002      	beq.n	80049ce <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80049c8:	7d7b      	ldrb	r3, [r7, #21]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d101      	bne.n	80049d2 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	e146      	b.n	8004c60 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80049d2:	7dbb      	ldrb	r3, [r7, #22]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d143      	bne.n	8004a60 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80049d8:	7d7b      	ldrb	r3, [r7, #21]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d140      	bne.n	8004a60 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_IC_Start_DMA+0xb2>
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e138      	b.n	8004c60 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_IC_Start_DMA+0xc2>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	e013      	b.n	8004a26 <HAL_TIM_IC_Start_DMA+0xea>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_IC_Start_DMA+0xd2>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_IC_Start_DMA+0xea>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_IC_Start_DMA+0xe2>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1c:	e003      	b.n	8004a26 <HAL_TIM_IC_Start_DMA+0xea>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_IC_Start_DMA+0xfa>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8004a34:	e016      	b.n	8004a64 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_IC_Start_DMA+0x10a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8004a44:	e00e      	b.n	8004a64 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_IC_Start_DMA+0x11a>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8004a54:	e006      	b.n	8004a64 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8004a5e:	e001      	b.n	8004a64 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0fd      	b.n	8004c60 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fa13 	bl	8005e98 <TIM_CCxChannelCmd>

  switch (Channel)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	f200 80ad 	bhi.w	8004bd4 <HAL_TIM_IC_Start_DMA+0x298>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_TIM_IC_Start_DMA+0x144>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004bd5 	.word	0x08004bd5
 8004a88:	08004bd5 	.word	0x08004bd5
 8004a8c:	08004bd5 	.word	0x08004bd5
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004bd5 	.word	0x08004bd5
 8004a98:	08004bd5 	.word	0x08004bd5
 8004a9c:	08004bd5 	.word	0x08004bd5
 8004aa0:	08004b45 	.word	0x08004b45
 8004aa4:	08004bd5 	.word	0x08004bd5
 8004aa8:	08004bd5 	.word	0x08004bd5
 8004aac:	08004bd5 	.word	0x08004bd5
 8004ab0:	08004b8d 	.word	0x08004b8d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	4a6b      	ldr	r2, [pc, #428]	; (8004c68 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004aba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	4a6a      	ldr	r2, [pc, #424]	; (8004c6c <HAL_TIM_IC_Start_DMA+0x330>)
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	4a69      	ldr	r2, [pc, #420]	; (8004c70 <HAL_TIM_IC_Start_DMA+0x334>)
 8004aca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3334      	adds	r3, #52	; 0x34
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	887b      	ldrh	r3, [r7, #2]
 8004adc:	f7fe fb26 	bl	800312c <HAL_DMA_Start_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0ba      	b.n	8004c60 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	60da      	str	r2, [r3, #12]
      break;
 8004afa:	e06e      	b.n	8004bda <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	4a59      	ldr	r2, [pc, #356]	; (8004c68 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <HAL_TIM_IC_Start_DMA+0x330>)
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	4a57      	ldr	r2, [pc, #348]	; (8004c70 <HAL_TIM_IC_Start_DMA+0x334>)
 8004b12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3338      	adds	r3, #56	; 0x38
 8004b1e:	4619      	mov	r1, r3
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	f7fe fb02 	bl	800312c <HAL_DMA_Start_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e096      	b.n	8004c60 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b40:	60da      	str	r2, [r3, #12]
      break;
 8004b42:	e04a      	b.n	8004bda <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4a47      	ldr	r2, [pc, #284]	; (8004c68 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a46      	ldr	r2, [pc, #280]	; (8004c6c <HAL_TIM_IC_Start_DMA+0x330>)
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	4a45      	ldr	r2, [pc, #276]	; (8004c70 <HAL_TIM_IC_Start_DMA+0x334>)
 8004b5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	333c      	adds	r3, #60	; 0x3c
 8004b66:	4619      	mov	r1, r3
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	887b      	ldrh	r3, [r7, #2]
 8004b6c:	f7fe fade 	bl	800312c <HAL_DMA_Start_IT>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e072      	b.n	8004c60 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b88:	60da      	str	r2, [r3, #12]
      break;
 8004b8a:	e026      	b.n	8004bda <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004b92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4a34      	ldr	r2, [pc, #208]	; (8004c6c <HAL_TIM_IC_Start_DMA+0x330>)
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	4a33      	ldr	r2, [pc, #204]	; (8004c70 <HAL_TIM_IC_Start_DMA+0x334>)
 8004ba2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3340      	adds	r3, #64	; 0x40
 8004bae:	4619      	mov	r1, r3
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	f7fe faba 	bl	800312c <HAL_DMA_Start_IT>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e04e      	b.n	8004c60 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bd0:	60da      	str	r2, [r3, #12]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <HAL_TIM_IC_Start_DMA+0x338>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <HAL_TIM_IC_Start_DMA+0x2ee>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d01d      	beq.n	8004c2a <HAL_TIM_IC_Start_DMA+0x2ee>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <HAL_TIM_IC_Start_DMA+0x33c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_TIM_IC_Start_DMA+0x2ee>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_TIM_IC_Start_DMA+0x340>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_TIM_IC_Start_DMA+0x2ee>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <HAL_TIM_IC_Start_DMA+0x344>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_TIM_IC_Start_DMA+0x2ee>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_TIM_IC_Start_DMA+0x348>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_TIM_IC_Start_DMA+0x2ee>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIM_IC_Start_DMA+0x34c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIM_IC_Start_DMA+0x2ee>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <HAL_TIM_IC_Start_DMA+0x350>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d111      	bne.n	8004c4e <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d010      	beq.n	8004c5e <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	e007      	b.n	8004c5e <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0201 	orr.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	08005541 	.word	0x08005541
 8004c6c:	08005609 	.word	0x08005609
 8004c70:	080054af 	.word	0x080054af
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40001800 	.word	0x40001800

08004c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e097      	b.n	8004dd4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fd fa27 	bl	800210c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd4:	f023 0307 	bic.w	r3, r3, #7
 8004cd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f000 fcc3 	bl	8005670 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	4313      	orrs	r3, r2
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d30:	f023 030c 	bic.w	r3, r3, #12
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	011a      	lsls	r2, r3, #4
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	031b      	lsls	r3, r3, #12
 8004d60:	4313      	orrs	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	4313      	orrs	r3, r2
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d122      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d11b      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0202 	mvn.w	r2, #2
 8004e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc fdd6 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fb0f 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fb20 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0204 	mvn.w	r2, #4
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc fdac 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fae5 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 faf6 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d122      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0208 	mvn.w	r2, #8
 8004eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc fd82 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8004ecc:	e005      	b.n	8004eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fabb 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 facc 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d122      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d11b      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0210 	mvn.w	r2, #16
 8004f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2208      	movs	r2, #8
 8004f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc fd58 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa91 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 faa2 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d10e      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0201 	mvn.w	r2, #1
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa6b 	bl	8005436 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d10e      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b80      	cmp	r3, #128	; 0x80
 8004f7a:	d107      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 f884 	bl	8006094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d10e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa67 	bl	8005486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0220 	mvn.w	r2, #32
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 f84e 	bl	8006080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005006:	2302      	movs	r3, #2
 8005008:	e088      	b.n	800511c <HAL_TIM_IC_ConfigChannel+0x130>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f000 fd72 	bl	8005b10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 020c 	bic.w	r2, r2, #12
 800503a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6999      	ldr	r1, [r3, #24]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	619a      	str	r2, [r3, #24]
 800504e:	e060      	b.n	8005112 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d11c      	bne.n	8005090 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f000 fdf6 	bl	8005c56 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005078:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6999      	ldr	r1, [r3, #24]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]
 800508e:	e040      	b.n	8005112 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d11b      	bne.n	80050ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f000 fe43 	bl	8005d30 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 020c 	bic.w	r2, r2, #12
 80050b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69d9      	ldr	r1, [r3, #28]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	61da      	str	r2, [r3, #28]
 80050cc:	e021      	b.n	8005112 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d11c      	bne.n	800510e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f000 fe60 	bl	8005da8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69d9      	ldr	r1, [r3, #28]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	021a      	lsls	r2, r3, #8
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	61da      	str	r2, [r3, #28]
 800510c:	e001      	b.n	8005112 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513e:	2302      	movs	r3, #2
 8005140:	e0ae      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b0c      	cmp	r3, #12
 800514e:	f200 809f 	bhi.w	8005290 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	0800518d 	.word	0x0800518d
 800515c:	08005291 	.word	0x08005291
 8005160:	08005291 	.word	0x08005291
 8005164:	08005291 	.word	0x08005291
 8005168:	080051cd 	.word	0x080051cd
 800516c:	08005291 	.word	0x08005291
 8005170:	08005291 	.word	0x08005291
 8005174:	08005291 	.word	0x08005291
 8005178:	0800520f 	.word	0x0800520f
 800517c:	08005291 	.word	0x08005291
 8005180:	08005291 	.word	0x08005291
 8005184:	08005291 	.word	0x08005291
 8005188:	0800524f 	.word	0x0800524f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fb0c 	bl	80057b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0204 	bic.w	r2, r2, #4
 80051b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	619a      	str	r2, [r3, #24]
      break;
 80051ca:	e064      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb5c 	bl	8005890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]
      break;
 800520c:	e043      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fbb1 	bl	800597c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0208 	orr.w	r2, r2, #8
 8005228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0204 	bic.w	r2, r2, #4
 8005238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69d9      	ldr	r1, [r3, #28]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
      break;
 800524c:	e023      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fc05 	bl	8005a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69d9      	ldr	r1, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	021a      	lsls	r2, r3, #8
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	61da      	str	r2, [r3, #28]
      break;
 800528e:	e002      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
      break;
 8005294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIM_ConfigClockSource+0x1c>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0b4      	b.n	800542e <HAL_TIM_ConfigClockSource+0x186>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fc:	d03e      	beq.n	800537c <HAL_TIM_ConfigClockSource+0xd4>
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	f200 8087 	bhi.w	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	f000 8086 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x172>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005312:	d87f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b70      	cmp	r3, #112	; 0x70
 8005316:	d01a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	d87b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b60      	cmp	r3, #96	; 0x60
 800531e:	d050      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005320:	2b60      	cmp	r3, #96	; 0x60
 8005322:	d877      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b50      	cmp	r3, #80	; 0x50
 8005326:	d03c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005328:	2b50      	cmp	r3, #80	; 0x50
 800532a:	d873      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d058      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d86f      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d064      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d86b      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d060      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d867      	bhi.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d05c      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 8005348:	2b10      	cmp	r3, #16
 800534a:	d05a      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x15a>
 800534c:	e062      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f000 fd7b 	bl	8005e58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
      break;
 800537a:	e04f      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6899      	ldr	r1, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f000 fd64 	bl	8005e58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800539e:	609a      	str	r2, [r3, #8]
      break;
 80053a0:	e03c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f000 fc22 	bl	8005bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2150      	movs	r1, #80	; 0x50
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fd31 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 80053c0:	e02c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 fc7e 	bl	8005cd0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2160      	movs	r1, #96	; 0x60
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fd21 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 80053e0:	e01c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 fc02 	bl	8005bf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2140      	movs	r1, #64	; 0x40
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fd11 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005400:	e00c      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f000 fd08 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005412:	e003      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      break;
 8005418:	e000      	b.n	800541c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800541a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d107      	bne.n	80054d6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d4:	e02a      	b.n	800552c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d107      	bne.n	80054f0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2202      	movs	r2, #2
 80054e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ee:	e01d      	b.n	800552c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d107      	bne.n	800550a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005508:	e010      	b.n	800552c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d107      	bne.n	8005524 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2208      	movs	r2, #8
 8005518:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005522:	e003      	b.n	800552c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff ffb4 	bl	800549a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d10f      	bne.n	8005578 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d146      	bne.n	80055f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005576:	e03d      	b.n	80055f4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	429a      	cmp	r2, r3
 8005580:	d10f      	bne.n	80055a2 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2202      	movs	r2, #2
 8005586:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d131      	bne.n	80055f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a0:	e028      	b.n	80055f4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d10f      	bne.n	80055cc <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2204      	movs	r2, #4
 80055b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11c      	bne.n	80055f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ca:	e013      	b.n	80055f4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d10e      	bne.n	80055f4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2208      	movs	r2, #8
 80055da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d107      	bne.n	80055f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7fc f9eb 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d103      	bne.n	8005628 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	771a      	strb	r2, [r3, #28]
 8005626:	e019      	b.n	800565c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	429a      	cmp	r2, r3
 8005630:	d103      	bne.n	800563a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2202      	movs	r2, #2
 8005636:	771a      	strb	r2, [r3, #28]
 8005638:	e010      	b.n	800565c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d103      	bne.n	800564c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2204      	movs	r2, #4
 8005648:	771a      	strb	r2, [r3, #28]
 800564a:	e007      	b.n	800565c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d102      	bne.n	800565c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2208      	movs	r2, #8
 800565a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff fefe 	bl	800545e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a40      	ldr	r2, [pc, #256]	; (8005784 <TIM_Base_SetConfig+0x114>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d00f      	beq.n	80056b0 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a3d      	ldr	r2, [pc, #244]	; (8005788 <TIM_Base_SetConfig+0x118>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a3c      	ldr	r2, [pc, #240]	; (800578c <TIM_Base_SetConfig+0x11c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a3b      	ldr	r2, [pc, #236]	; (8005790 <TIM_Base_SetConfig+0x120>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3a      	ldr	r2, [pc, #232]	; (8005794 <TIM_Base_SetConfig+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d108      	bne.n	80056c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2f      	ldr	r2, [pc, #188]	; (8005784 <TIM_Base_SetConfig+0x114>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d02b      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d0:	d027      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2c      	ldr	r2, [pc, #176]	; (8005788 <TIM_Base_SetConfig+0x118>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d023      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2b      	ldr	r2, [pc, #172]	; (800578c <TIM_Base_SetConfig+0x11c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01f      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <TIM_Base_SetConfig+0x120>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d01b      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a29      	ldr	r2, [pc, #164]	; (8005794 <TIM_Base_SetConfig+0x124>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d017      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a28      	ldr	r2, [pc, #160]	; (8005798 <TIM_Base_SetConfig+0x128>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a27      	ldr	r2, [pc, #156]	; (800579c <TIM_Base_SetConfig+0x12c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00f      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <TIM_Base_SetConfig+0x130>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00b      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <TIM_Base_SetConfig+0x134>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d007      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a24      	ldr	r2, [pc, #144]	; (80057a8 <TIM_Base_SetConfig+0x138>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a23      	ldr	r2, [pc, #140]	; (80057ac <TIM_Base_SetConfig+0x13c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d108      	bne.n	8005734 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <TIM_Base_SetConfig+0x114>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d003      	beq.n	8005768 <TIM_Base_SetConfig+0xf8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a0c      	ldr	r2, [pc, #48]	; (8005794 <TIM_Base_SetConfig+0x124>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d103      	bne.n	8005770 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	615a      	str	r2, [r3, #20]
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40010000 	.word	0x40010000
 8005788:	40000400 	.word	0x40000400
 800578c:	40000800 	.word	0x40000800
 8005790:	40000c00 	.word	0x40000c00
 8005794:	40010400 	.word	0x40010400
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800
 80057a4:	40001800 	.word	0x40001800
 80057a8:	40001c00 	.word	0x40001c00
 80057ac:	40002000 	.word	0x40002000

080057b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0201 	bic.w	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 0302 	bic.w	r3, r3, #2
 80057f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a20      	ldr	r2, [pc, #128]	; (8005888 <TIM_OC1_SetConfig+0xd8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC1_SetConfig+0x64>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1f      	ldr	r2, [pc, #124]	; (800588c <TIM_OC1_SetConfig+0xdc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10c      	bne.n	800582e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0308 	bic.w	r3, r3, #8
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 0304 	bic.w	r3, r3, #4
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <TIM_OC1_SetConfig+0xd8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_OC1_SetConfig+0x8e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a14      	ldr	r2, [pc, #80]	; (800588c <TIM_OC1_SetConfig+0xdc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0210 	bic.w	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a22      	ldr	r2, [pc, #136]	; (8005974 <TIM_OC2_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x68>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a21      	ldr	r2, [pc, #132]	; (8005978 <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a17      	ldr	r2, [pc, #92]	; (8005974 <TIM_OC2_SetConfig+0xe4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC2_SetConfig+0x94>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a16      	ldr	r2, [pc, #88]	; (8005978 <TIM_OC2_SetConfig+0xe8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d113      	bne.n	800594c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400

0800597c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a21      	ldr	r2, [pc, #132]	; (8005a5c <TIM_OC3_SetConfig+0xe0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x66>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <TIM_OC3_SetConfig+0xe4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10d      	bne.n	80059fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <TIM_OC3_SetConfig+0xe0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0x92>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <TIM_OC3_SetConfig+0xe4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40010400 	.word	0x40010400

08005a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <TIM_OC4_SetConfig+0xa4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC4_SetConfig+0x68>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <TIM_OC4_SetConfig+0xa8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d109      	bne.n	8005ae0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40010400 	.word	0x40010400

08005b10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a28      	ldr	r2, [pc, #160]	; (8005bdc <TIM_TI1_SetConfig+0xcc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01b      	beq.n	8005b76 <TIM_TI1_SetConfig+0x66>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d017      	beq.n	8005b76 <TIM_TI1_SetConfig+0x66>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a25      	ldr	r2, [pc, #148]	; (8005be0 <TIM_TI1_SetConfig+0xd0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <TIM_TI1_SetConfig+0x66>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a24      	ldr	r2, [pc, #144]	; (8005be4 <TIM_TI1_SetConfig+0xd4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00f      	beq.n	8005b76 <TIM_TI1_SetConfig+0x66>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a23      	ldr	r2, [pc, #140]	; (8005be8 <TIM_TI1_SetConfig+0xd8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <TIM_TI1_SetConfig+0x66>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a22      	ldr	r2, [pc, #136]	; (8005bec <TIM_TI1_SetConfig+0xdc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_TI1_SetConfig+0x66>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <TIM_TI1_SetConfig+0xe0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_TI1_SetConfig+0x66>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <TIM_TI1_SetConfig+0xe4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <TIM_TI1_SetConfig+0x6a>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <TIM_TI1_SetConfig+0x6c>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0303 	bic.w	r3, r3, #3
 8005b86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e003      	b.n	8005b9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f023 030a 	bic.w	r3, r3, #10
 8005bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 030a 	and.w	r3, r3, #10
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40000c00 	.word	0x40000c00
 8005bec:	40010400 	.word	0x40010400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40001800 	.word	0x40001800

08005bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f023 0201 	bic.w	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f023 030a 	bic.w	r3, r3, #10
 8005c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f023 0210 	bic.w	r2, r3, #16
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	031b      	lsls	r3, r3, #12
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ca8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	621a      	str	r2, [r3, #32]
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f023 0210 	bic.w	r2, r3, #16
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	031b      	lsls	r3, r3, #12
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 0303 	bic.w	r3, r3, #3
 8005d5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	031b      	lsls	r3, r3, #12
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005dfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	031b      	lsls	r3, r3, #12
 8005e00:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f043 0307 	orr.w	r3, r3, #7
 8005e44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	2201      	movs	r2, #1
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	401a      	ands	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1a      	ldr	r2, [r3, #32]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e05a      	b.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d022      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f48:	d01d      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1b      	ldr	r2, [pc, #108]	; (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1a      	ldr	r2, [pc, #104]	; (8005fcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a18      	ldr	r2, [pc, #96]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d10c      	bne.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800
 8005fcc:	40000c00 	.word	0x40000c00
 8005fd0:	40010400 	.word	0x40010400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40001800 	.word	0x40001800

08005fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e03d      	b.n	8006074 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e03f      	b.n	800613a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fc f8ea 	bl	80022a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2224      	movs	r2, #36	; 0x24
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f9cb 	bl	8006488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b08a      	sub	sp, #40	; 0x28
 8006146:	af02      	add	r7, sp, #8
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b20      	cmp	r3, #32
 8006160:	d17c      	bne.n	800625c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_Transmit+0x2c>
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e075      	b.n	800625e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UART_Transmit+0x3e>
 800617c:	2302      	movs	r3, #2
 800617e:	e06e      	b.n	800625e <HAL_UART_Transmit+0x11c>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2221      	movs	r2, #33	; 0x21
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006196:	f7fc fb35 	bl	8002804 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b0:	d108      	bne.n	80061c4 <HAL_UART_Transmit+0x82>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e003      	b.n	80061cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061d4:	e02a      	b.n	800622c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f8e2 	bl	80063aa <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e036      	b.n	800625e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3302      	adds	r3, #2
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e007      	b.n	800621e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	3301      	adds	r3, #1
 800621c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1cf      	bne.n	80061d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2200      	movs	r2, #0
 800623e:	2140      	movs	r1, #64	; 0x40
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f8b2 	bl	80063aa <UART_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e006      	b.n	800625e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b08a      	sub	sp, #40	; 0x28
 800626a:	af02      	add	r7, sp, #8
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b20      	cmp	r3, #32
 8006284:	f040 808c 	bne.w	80063a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <HAL_UART_Receive+0x2e>
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e084      	b.n	80063a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Receive+0x40>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e07d      	b.n	80063a2 <HAL_UART_Receive+0x13c>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2222      	movs	r2, #34	; 0x22
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062c2:	f7fc fa9f 	bl	8002804 <HAL_GetTick>
 80062c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	88fa      	ldrh	r2, [r7, #6]
 80062d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062dc:	d108      	bne.n	80062f0 <HAL_UART_Receive+0x8a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	e003      	b.n	80062f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006300:	e043      	b.n	800638a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	2120      	movs	r1, #32
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f84c 	bl	80063aa <UART_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e042      	b.n	80063a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10c      	bne.n	800633c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632e:	b29a      	uxth	r2, r3
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	3302      	adds	r3, #2
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	e01f      	b.n	800637c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d007      	beq.n	8006356 <HAL_UART_Receive+0xf0>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <HAL_UART_Receive+0xfe>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e008      	b.n	8006376 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006370:	b2da      	uxtb	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3301      	adds	r3, #1
 800637a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1b6      	bne.n	8006302 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b090      	sub	sp, #64	; 0x40
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	4613      	mov	r3, r2
 80063b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ba:	e050      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d04c      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0x30>
 80063ca:	f7fc fa1b 	bl	8002804 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d241      	bcs.n	800645e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063fa:	637a      	str	r2, [r7, #52]	; 0x34
 80063fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	613b      	str	r3, [r7, #16]
   return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	63bb      	str	r3, [r7, #56]	; 0x38
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800642e:	623a      	str	r2, [r7, #32]
 8006430:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	6a3a      	ldr	r2, [r7, #32]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	61bb      	str	r3, [r7, #24]
   return(result);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e5      	bne.n	800640e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e00f      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	429a      	cmp	r2, r3
 800647a:	d09f      	beq.n	80063bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3740      	adds	r7, #64	; 0x40
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800648c:	b0c0      	sub	sp, #256	; 0x100
 800648e:	af00      	add	r7, sp, #0
 8006490:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	68d9      	ldr	r1, [r3, #12]
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	ea40 0301 	orr.w	r3, r0, r1
 80064b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	431a      	orrs	r2, r3
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064e0:	f021 010c 	bic.w	r1, r1, #12
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064ee:	430b      	orrs	r3, r1
 80064f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006502:	6999      	ldr	r1, [r3, #24]
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	ea40 0301 	orr.w	r3, r0, r1
 800650e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b8f      	ldr	r3, [pc, #572]	; (8006754 <UART_SetConfig+0x2cc>)
 8006518:	429a      	cmp	r2, r3
 800651a:	d005      	beq.n	8006528 <UART_SetConfig+0xa0>
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b8d      	ldr	r3, [pc, #564]	; (8006758 <UART_SetConfig+0x2d0>)
 8006524:	429a      	cmp	r2, r3
 8006526:	d104      	bne.n	8006532 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006528:	f7fd fbc6 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 800652c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006530:	e003      	b.n	800653a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006532:	f7fd fbad 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8006536:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006544:	f040 810c 	bne.w	8006760 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654c:	2200      	movs	r2, #0
 800654e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006552:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006556:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800655a:	4622      	mov	r2, r4
 800655c:	462b      	mov	r3, r5
 800655e:	1891      	adds	r1, r2, r2
 8006560:	65b9      	str	r1, [r7, #88]	; 0x58
 8006562:	415b      	adcs	r3, r3
 8006564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800656a:	4621      	mov	r1, r4
 800656c:	eb12 0801 	adds.w	r8, r2, r1
 8006570:	4629      	mov	r1, r5
 8006572:	eb43 0901 	adc.w	r9, r3, r1
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800658a:	4690      	mov	r8, r2
 800658c:	4699      	mov	r9, r3
 800658e:	4623      	mov	r3, r4
 8006590:	eb18 0303 	adds.w	r3, r8, r3
 8006594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006598:	462b      	mov	r3, r5
 800659a:	eb49 0303 	adc.w	r3, r9, r3
 800659e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065b6:	460b      	mov	r3, r1
 80065b8:	18db      	adds	r3, r3, r3
 80065ba:	653b      	str	r3, [r7, #80]	; 0x50
 80065bc:	4613      	mov	r3, r2
 80065be:	eb42 0303 	adc.w	r3, r2, r3
 80065c2:	657b      	str	r3, [r7, #84]	; 0x54
 80065c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065cc:	f7fa fb0c 	bl	8000be8 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4b61      	ldr	r3, [pc, #388]	; (800675c <UART_SetConfig+0x2d4>)
 80065d6:	fba3 2302 	umull	r2, r3, r3, r2
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	011c      	lsls	r4, r3, #4
 80065de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	1891      	adds	r1, r2, r2
 80065f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80065f8:	415b      	adcs	r3, r3
 80065fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006600:	4641      	mov	r1, r8
 8006602:	eb12 0a01 	adds.w	sl, r2, r1
 8006606:	4649      	mov	r1, r9
 8006608:	eb43 0b01 	adc.w	fp, r3, r1
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800661c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006620:	4692      	mov	sl, r2
 8006622:	469b      	mov	fp, r3
 8006624:	4643      	mov	r3, r8
 8006626:	eb1a 0303 	adds.w	r3, sl, r3
 800662a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800662e:	464b      	mov	r3, r9
 8006630:	eb4b 0303 	adc.w	r3, fp, r3
 8006634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006644:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800664c:	460b      	mov	r3, r1
 800664e:	18db      	adds	r3, r3, r3
 8006650:	643b      	str	r3, [r7, #64]	; 0x40
 8006652:	4613      	mov	r3, r2
 8006654:	eb42 0303 	adc.w	r3, r2, r3
 8006658:	647b      	str	r3, [r7, #68]	; 0x44
 800665a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800665e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006662:	f7fa fac1 	bl	8000be8 <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4611      	mov	r1, r2
 800666c:	4b3b      	ldr	r3, [pc, #236]	; (800675c <UART_SetConfig+0x2d4>)
 800666e:	fba3 2301 	umull	r2, r3, r3, r1
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2264      	movs	r2, #100	; 0x64
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	1acb      	subs	r3, r1, r3
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006682:	4b36      	ldr	r3, [pc, #216]	; (800675c <UART_SetConfig+0x2d4>)
 8006684:	fba3 2302 	umull	r2, r3, r3, r2
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006690:	441c      	add	r4, r3
 8006692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006696:	2200      	movs	r2, #0
 8006698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800669c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066a4:	4642      	mov	r2, r8
 80066a6:	464b      	mov	r3, r9
 80066a8:	1891      	adds	r1, r2, r2
 80066aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80066ac:	415b      	adcs	r3, r3
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066b4:	4641      	mov	r1, r8
 80066b6:	1851      	adds	r1, r2, r1
 80066b8:	6339      	str	r1, [r7, #48]	; 0x30
 80066ba:	4649      	mov	r1, r9
 80066bc:	414b      	adcs	r3, r1
 80066be:	637b      	str	r3, [r7, #52]	; 0x34
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066cc:	4659      	mov	r1, fp
 80066ce:	00cb      	lsls	r3, r1, #3
 80066d0:	4651      	mov	r1, sl
 80066d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d6:	4651      	mov	r1, sl
 80066d8:	00ca      	lsls	r2, r1, #3
 80066da:	4610      	mov	r0, r2
 80066dc:	4619      	mov	r1, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	4642      	mov	r2, r8
 80066e2:	189b      	adds	r3, r3, r2
 80066e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066e8:	464b      	mov	r3, r9
 80066ea:	460a      	mov	r2, r1
 80066ec:	eb42 0303 	adc.w	r3, r2, r3
 80066f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006700:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006704:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006708:	460b      	mov	r3, r1
 800670a:	18db      	adds	r3, r3, r3
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
 800670e:	4613      	mov	r3, r2
 8006710:	eb42 0303 	adc.w	r3, r2, r3
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800671a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800671e:	f7fa fa63 	bl	8000be8 <__aeabi_uldivmod>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4b0d      	ldr	r3, [pc, #52]	; (800675c <UART_SetConfig+0x2d4>)
 8006728:	fba3 1302 	umull	r1, r3, r3, r2
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	2164      	movs	r1, #100	; 0x64
 8006730:	fb01 f303 	mul.w	r3, r1, r3
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	3332      	adds	r3, #50	; 0x32
 800673a:	4a08      	ldr	r2, [pc, #32]	; (800675c <UART_SetConfig+0x2d4>)
 800673c:	fba2 2303 	umull	r2, r3, r2, r3
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	f003 0207 	and.w	r2, r3, #7
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4422      	add	r2, r4
 800674e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006750:	e105      	b.n	800695e <UART_SetConfig+0x4d6>
 8006752:	bf00      	nop
 8006754:	40011000 	.word	0x40011000
 8006758:	40011400 	.word	0x40011400
 800675c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006764:	2200      	movs	r2, #0
 8006766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800676a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800676e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006772:	4642      	mov	r2, r8
 8006774:	464b      	mov	r3, r9
 8006776:	1891      	adds	r1, r2, r2
 8006778:	6239      	str	r1, [r7, #32]
 800677a:	415b      	adcs	r3, r3
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
 800677e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006782:	4641      	mov	r1, r8
 8006784:	1854      	adds	r4, r2, r1
 8006786:	4649      	mov	r1, r9
 8006788:	eb43 0501 	adc.w	r5, r3, r1
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	00eb      	lsls	r3, r5, #3
 8006796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800679a:	00e2      	lsls	r2, r4, #3
 800679c:	4614      	mov	r4, r2
 800679e:	461d      	mov	r5, r3
 80067a0:	4643      	mov	r3, r8
 80067a2:	18e3      	adds	r3, r4, r3
 80067a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067a8:	464b      	mov	r3, r9
 80067aa:	eb45 0303 	adc.w	r3, r5, r3
 80067ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067ce:	4629      	mov	r1, r5
 80067d0:	008b      	lsls	r3, r1, #2
 80067d2:	4621      	mov	r1, r4
 80067d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067d8:	4621      	mov	r1, r4
 80067da:	008a      	lsls	r2, r1, #2
 80067dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067e0:	f7fa fa02 	bl	8000be8 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4b60      	ldr	r3, [pc, #384]	; (800696c <UART_SetConfig+0x4e4>)
 80067ea:	fba3 2302 	umull	r2, r3, r3, r2
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	011c      	lsls	r4, r3, #4
 80067f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006800:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	1891      	adds	r1, r2, r2
 800680a:	61b9      	str	r1, [r7, #24]
 800680c:	415b      	adcs	r3, r3
 800680e:	61fb      	str	r3, [r7, #28]
 8006810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006814:	4641      	mov	r1, r8
 8006816:	1851      	adds	r1, r2, r1
 8006818:	6139      	str	r1, [r7, #16]
 800681a:	4649      	mov	r1, r9
 800681c:	414b      	adcs	r3, r1
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800682c:	4659      	mov	r1, fp
 800682e:	00cb      	lsls	r3, r1, #3
 8006830:	4651      	mov	r1, sl
 8006832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006836:	4651      	mov	r1, sl
 8006838:	00ca      	lsls	r2, r1, #3
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	4603      	mov	r3, r0
 8006840:	4642      	mov	r2, r8
 8006842:	189b      	adds	r3, r3, r2
 8006844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006848:	464b      	mov	r3, r9
 800684a:	460a      	mov	r2, r1
 800684c:	eb42 0303 	adc.w	r3, r2, r3
 8006850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	67bb      	str	r3, [r7, #120]	; 0x78
 800685e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800686c:	4649      	mov	r1, r9
 800686e:	008b      	lsls	r3, r1, #2
 8006870:	4641      	mov	r1, r8
 8006872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006876:	4641      	mov	r1, r8
 8006878:	008a      	lsls	r2, r1, #2
 800687a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800687e:	f7fa f9b3 	bl	8000be8 <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4b39      	ldr	r3, [pc, #228]	; (800696c <UART_SetConfig+0x4e4>)
 8006888:	fba3 1302 	umull	r1, r3, r3, r2
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	2164      	movs	r1, #100	; 0x64
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	3332      	adds	r3, #50	; 0x32
 800689a:	4a34      	ldr	r2, [pc, #208]	; (800696c <UART_SetConfig+0x4e4>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068a6:	441c      	add	r4, r3
 80068a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ac:	2200      	movs	r2, #0
 80068ae:	673b      	str	r3, [r7, #112]	; 0x70
 80068b0:	677a      	str	r2, [r7, #116]	; 0x74
 80068b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068b6:	4642      	mov	r2, r8
 80068b8:	464b      	mov	r3, r9
 80068ba:	1891      	adds	r1, r2, r2
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	415b      	adcs	r3, r3
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068c6:	4641      	mov	r1, r8
 80068c8:	1851      	adds	r1, r2, r1
 80068ca:	6039      	str	r1, [r7, #0]
 80068cc:	4649      	mov	r1, r9
 80068ce:	414b      	adcs	r3, r1
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068de:	4659      	mov	r1, fp
 80068e0:	00cb      	lsls	r3, r1, #3
 80068e2:	4651      	mov	r1, sl
 80068e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e8:	4651      	mov	r1, sl
 80068ea:	00ca      	lsls	r2, r1, #3
 80068ec:	4610      	mov	r0, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	4603      	mov	r3, r0
 80068f2:	4642      	mov	r2, r8
 80068f4:	189b      	adds	r3, r3, r2
 80068f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068f8:	464b      	mov	r3, r9
 80068fa:	460a      	mov	r2, r1
 80068fc:	eb42 0303 	adc.w	r3, r2, r3
 8006900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	663b      	str	r3, [r7, #96]	; 0x60
 800690c:	667a      	str	r2, [r7, #100]	; 0x64
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800691a:	4649      	mov	r1, r9
 800691c:	008b      	lsls	r3, r1, #2
 800691e:	4641      	mov	r1, r8
 8006920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006924:	4641      	mov	r1, r8
 8006926:	008a      	lsls	r2, r1, #2
 8006928:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800692c:	f7fa f95c 	bl	8000be8 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4b0d      	ldr	r3, [pc, #52]	; (800696c <UART_SetConfig+0x4e4>)
 8006936:	fba3 1302 	umull	r1, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	2164      	movs	r1, #100	; 0x64
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	3332      	adds	r3, #50	; 0x32
 8006948:	4a08      	ldr	r2, [pc, #32]	; (800696c <UART_SetConfig+0x4e4>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	f003 020f 	and.w	r2, r3, #15
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4422      	add	r2, r4
 800695c:	609a      	str	r2, [r3, #8]
}
 800695e:	bf00      	nop
 8006960:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006964:	46bd      	mov	sp, r7
 8006966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696a:	bf00      	nop
 800696c:	51eb851f 	.word	0x51eb851f

08006970 <__errno>:
 8006970:	4b01      	ldr	r3, [pc, #4]	; (8006978 <__errno+0x8>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	2000000c 	.word	0x2000000c

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1b64      	subs	r4, r4, r5
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2600      	movs	r6, #0
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4d0b      	ldr	r5, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f002 ff02 	bl	8009798 <_init>
 8006994:	1b64      	subs	r4, r4, r5
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2600      	movs	r6, #0
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08009bf4 	.word	0x08009bf4
 80069b8:	08009bf4 	.word	0x08009bf4
 80069bc:	08009bf4 	.word	0x08009bf4
 80069c0:	08009bf8 	.word	0x08009bf8

080069c4 <memset>:
 80069c4:	4402      	add	r2, r0
 80069c6:	4603      	mov	r3, r0
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d100      	bne.n	80069ce <memset+0xa>
 80069cc:	4770      	bx	lr
 80069ce:	f803 1b01 	strb.w	r1, [r3], #1
 80069d2:	e7f9      	b.n	80069c8 <memset+0x4>

080069d4 <__cvt>:
 80069d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069d8:	ec55 4b10 	vmov	r4, r5, d0
 80069dc:	2d00      	cmp	r5, #0
 80069de:	460e      	mov	r6, r1
 80069e0:	4619      	mov	r1, r3
 80069e2:	462b      	mov	r3, r5
 80069e4:	bfbb      	ittet	lt
 80069e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069ea:	461d      	movlt	r5, r3
 80069ec:	2300      	movge	r3, #0
 80069ee:	232d      	movlt	r3, #45	; 0x2d
 80069f0:	700b      	strb	r3, [r1, #0]
 80069f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069f8:	4691      	mov	r9, r2
 80069fa:	f023 0820 	bic.w	r8, r3, #32
 80069fe:	bfbc      	itt	lt
 8006a00:	4622      	movlt	r2, r4
 8006a02:	4614      	movlt	r4, r2
 8006a04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a08:	d005      	beq.n	8006a16 <__cvt+0x42>
 8006a0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a0e:	d100      	bne.n	8006a12 <__cvt+0x3e>
 8006a10:	3601      	adds	r6, #1
 8006a12:	2102      	movs	r1, #2
 8006a14:	e000      	b.n	8006a18 <__cvt+0x44>
 8006a16:	2103      	movs	r1, #3
 8006a18:	ab03      	add	r3, sp, #12
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	ab02      	add	r3, sp, #8
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	ec45 4b10 	vmov	d0, r4, r5
 8006a24:	4653      	mov	r3, sl
 8006a26:	4632      	mov	r2, r6
 8006a28:	f000 fcea 	bl	8007400 <_dtoa_r>
 8006a2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a30:	4607      	mov	r7, r0
 8006a32:	d102      	bne.n	8006a3a <__cvt+0x66>
 8006a34:	f019 0f01 	tst.w	r9, #1
 8006a38:	d022      	beq.n	8006a80 <__cvt+0xac>
 8006a3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a3e:	eb07 0906 	add.w	r9, r7, r6
 8006a42:	d110      	bne.n	8006a66 <__cvt+0x92>
 8006a44:	783b      	ldrb	r3, [r7, #0]
 8006a46:	2b30      	cmp	r3, #48	; 0x30
 8006a48:	d10a      	bne.n	8006a60 <__cvt+0x8c>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7fa f859 	bl	8000b08 <__aeabi_dcmpeq>
 8006a56:	b918      	cbnz	r0, 8006a60 <__cvt+0x8c>
 8006a58:	f1c6 0601 	rsb	r6, r6, #1
 8006a5c:	f8ca 6000 	str.w	r6, [sl]
 8006a60:	f8da 3000 	ldr.w	r3, [sl]
 8006a64:	4499      	add	r9, r3
 8006a66:	2200      	movs	r2, #0
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	f7fa f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8006a72:	b108      	cbz	r0, 8006a78 <__cvt+0xa4>
 8006a74:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a78:	2230      	movs	r2, #48	; 0x30
 8006a7a:	9b03      	ldr	r3, [sp, #12]
 8006a7c:	454b      	cmp	r3, r9
 8006a7e:	d307      	bcc.n	8006a90 <__cvt+0xbc>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a84:	1bdb      	subs	r3, r3, r7
 8006a86:	4638      	mov	r0, r7
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	b004      	add	sp, #16
 8006a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a90:	1c59      	adds	r1, r3, #1
 8006a92:	9103      	str	r1, [sp, #12]
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e7f0      	b.n	8006a7a <__cvt+0xa6>

08006a98 <__exponent>:
 8006a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	bfb8      	it	lt
 8006aa0:	4249      	neglt	r1, r1
 8006aa2:	f803 2b02 	strb.w	r2, [r3], #2
 8006aa6:	bfb4      	ite	lt
 8006aa8:	222d      	movlt	r2, #45	; 0x2d
 8006aaa:	222b      	movge	r2, #43	; 0x2b
 8006aac:	2909      	cmp	r1, #9
 8006aae:	7042      	strb	r2, [r0, #1]
 8006ab0:	dd2a      	ble.n	8006b08 <__exponent+0x70>
 8006ab2:	f10d 0407 	add.w	r4, sp, #7
 8006ab6:	46a4      	mov	ip, r4
 8006ab8:	270a      	movs	r7, #10
 8006aba:	46a6      	mov	lr, r4
 8006abc:	460a      	mov	r2, r1
 8006abe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ac2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ac6:	3530      	adds	r5, #48	; 0x30
 8006ac8:	2a63      	cmp	r2, #99	; 0x63
 8006aca:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ace:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	dcf1      	bgt.n	8006aba <__exponent+0x22>
 8006ad6:	3130      	adds	r1, #48	; 0x30
 8006ad8:	f1ae 0502 	sub.w	r5, lr, #2
 8006adc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ae0:	1c44      	adds	r4, r0, #1
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4561      	cmp	r1, ip
 8006ae6:	d30a      	bcc.n	8006afe <__exponent+0x66>
 8006ae8:	f10d 0209 	add.w	r2, sp, #9
 8006aec:	eba2 020e 	sub.w	r2, r2, lr
 8006af0:	4565      	cmp	r5, ip
 8006af2:	bf88      	it	hi
 8006af4:	2200      	movhi	r2, #0
 8006af6:	4413      	add	r3, r2
 8006af8:	1a18      	subs	r0, r3, r0
 8006afa:	b003      	add	sp, #12
 8006afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b06:	e7ed      	b.n	8006ae4 <__exponent+0x4c>
 8006b08:	2330      	movs	r3, #48	; 0x30
 8006b0a:	3130      	adds	r1, #48	; 0x30
 8006b0c:	7083      	strb	r3, [r0, #2]
 8006b0e:	70c1      	strb	r1, [r0, #3]
 8006b10:	1d03      	adds	r3, r0, #4
 8006b12:	e7f1      	b.n	8006af8 <__exponent+0x60>

08006b14 <_printf_float>:
 8006b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b18:	ed2d 8b02 	vpush	{d8}
 8006b1c:	b08d      	sub	sp, #52	; 0x34
 8006b1e:	460c      	mov	r4, r1
 8006b20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b24:	4616      	mov	r6, r2
 8006b26:	461f      	mov	r7, r3
 8006b28:	4605      	mov	r5, r0
 8006b2a:	f001 fa57 	bl	8007fdc <_localeconv_r>
 8006b2e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b32:	4650      	mov	r0, sl
 8006b34:	f7f9 fb6c 	bl	8000210 <strlen>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	9305      	str	r3, [sp, #20]
 8006b40:	f8d8 3000 	ldr.w	r3, [r8]
 8006b44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b48:	3307      	adds	r3, #7
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	f103 0208 	add.w	r2, r3, #8
 8006b52:	f8c8 2000 	str.w	r2, [r8]
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b66:	9307      	str	r3, [sp, #28]
 8006b68:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b6c:	ee08 0a10 	vmov	s16, r0
 8006b70:	4b9f      	ldr	r3, [pc, #636]	; (8006df0 <_printf_float+0x2dc>)
 8006b72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	f7f9 fff7 	bl	8000b6c <__aeabi_dcmpun>
 8006b7e:	bb88      	cbnz	r0, 8006be4 <_printf_float+0xd0>
 8006b80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b84:	4b9a      	ldr	r3, [pc, #616]	; (8006df0 <_printf_float+0x2dc>)
 8006b86:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8a:	f7f9 ffd1 	bl	8000b30 <__aeabi_dcmple>
 8006b8e:	bb48      	cbnz	r0, 8006be4 <_printf_float+0xd0>
 8006b90:	2200      	movs	r2, #0
 8006b92:	2300      	movs	r3, #0
 8006b94:	4640      	mov	r0, r8
 8006b96:	4649      	mov	r1, r9
 8006b98:	f7f9 ffc0 	bl	8000b1c <__aeabi_dcmplt>
 8006b9c:	b110      	cbz	r0, 8006ba4 <_printf_float+0x90>
 8006b9e:	232d      	movs	r3, #45	; 0x2d
 8006ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba4:	4b93      	ldr	r3, [pc, #588]	; (8006df4 <_printf_float+0x2e0>)
 8006ba6:	4894      	ldr	r0, [pc, #592]	; (8006df8 <_printf_float+0x2e4>)
 8006ba8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bac:	bf94      	ite	ls
 8006bae:	4698      	movls	r8, r3
 8006bb0:	4680      	movhi	r8, r0
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	6123      	str	r3, [r4, #16]
 8006bb6:	9b05      	ldr	r3, [sp, #20]
 8006bb8:	f023 0204 	bic.w	r2, r3, #4
 8006bbc:	6022      	str	r2, [r4, #0]
 8006bbe:	f04f 0900 	mov.w	r9, #0
 8006bc2:	9700      	str	r7, [sp, #0]
 8006bc4:	4633      	mov	r3, r6
 8006bc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f000 f9d8 	bl	8006f80 <_printf_common>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	f040 8090 	bne.w	8006cf6 <_printf_float+0x1e2>
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	b00d      	add	sp, #52	; 0x34
 8006bdc:	ecbd 8b02 	vpop	{d8}
 8006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	4640      	mov	r0, r8
 8006bea:	4649      	mov	r1, r9
 8006bec:	f7f9 ffbe 	bl	8000b6c <__aeabi_dcmpun>
 8006bf0:	b140      	cbz	r0, 8006c04 <_printf_float+0xf0>
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bfbc      	itt	lt
 8006bf8:	232d      	movlt	r3, #45	; 0x2d
 8006bfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bfe:	487f      	ldr	r0, [pc, #508]	; (8006dfc <_printf_float+0x2e8>)
 8006c00:	4b7f      	ldr	r3, [pc, #508]	; (8006e00 <_printf_float+0x2ec>)
 8006c02:	e7d1      	b.n	8006ba8 <_printf_float+0x94>
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c0a:	9206      	str	r2, [sp, #24]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	d13f      	bne.n	8006c90 <_printf_float+0x17c>
 8006c10:	2306      	movs	r3, #6
 8006c12:	6063      	str	r3, [r4, #4]
 8006c14:	9b05      	ldr	r3, [sp, #20]
 8006c16:	6861      	ldr	r1, [r4, #4]
 8006c18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9303      	str	r3, [sp, #12]
 8006c20:	ab0a      	add	r3, sp, #40	; 0x28
 8006c22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c26:	ab09      	add	r3, sp, #36	; 0x24
 8006c28:	ec49 8b10 	vmov	d0, r8, r9
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c34:	4628      	mov	r0, r5
 8006c36:	f7ff fecd 	bl	80069d4 <__cvt>
 8006c3a:	9b06      	ldr	r3, [sp, #24]
 8006c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c3e:	2b47      	cmp	r3, #71	; 0x47
 8006c40:	4680      	mov	r8, r0
 8006c42:	d108      	bne.n	8006c56 <_printf_float+0x142>
 8006c44:	1cc8      	adds	r0, r1, #3
 8006c46:	db02      	blt.n	8006c4e <_printf_float+0x13a>
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	dd41      	ble.n	8006cd2 <_printf_float+0x1be>
 8006c4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c52:	fa5f fb8b 	uxtb.w	fp, fp
 8006c56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c5a:	d820      	bhi.n	8006c9e <_printf_float+0x18a>
 8006c5c:	3901      	subs	r1, #1
 8006c5e:	465a      	mov	r2, fp
 8006c60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c64:	9109      	str	r1, [sp, #36]	; 0x24
 8006c66:	f7ff ff17 	bl	8006a98 <__exponent>
 8006c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c6c:	1813      	adds	r3, r2, r0
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	4681      	mov	r9, r0
 8006c72:	6123      	str	r3, [r4, #16]
 8006c74:	dc02      	bgt.n	8006c7c <_printf_float+0x168>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d2      	lsls	r2, r2, #31
 8006c7a:	d501      	bpl.n	8006c80 <_printf_float+0x16c>
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d09c      	beq.n	8006bc2 <_printf_float+0xae>
 8006c88:	232d      	movs	r3, #45	; 0x2d
 8006c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c8e:	e798      	b.n	8006bc2 <_printf_float+0xae>
 8006c90:	9a06      	ldr	r2, [sp, #24]
 8006c92:	2a47      	cmp	r2, #71	; 0x47
 8006c94:	d1be      	bne.n	8006c14 <_printf_float+0x100>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1bc      	bne.n	8006c14 <_printf_float+0x100>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e7b9      	b.n	8006c12 <_printf_float+0xfe>
 8006c9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ca2:	d118      	bne.n	8006cd6 <_printf_float+0x1c2>
 8006ca4:	2900      	cmp	r1, #0
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	dd0b      	ble.n	8006cc2 <_printf_float+0x1ae>
 8006caa:	6121      	str	r1, [r4, #16]
 8006cac:	b913      	cbnz	r3, 8006cb4 <_printf_float+0x1a0>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	07d0      	lsls	r0, r2, #31
 8006cb2:	d502      	bpl.n	8006cba <_printf_float+0x1a6>
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	440b      	add	r3, r1
 8006cb8:	6123      	str	r3, [r4, #16]
 8006cba:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cbc:	f04f 0900 	mov.w	r9, #0
 8006cc0:	e7de      	b.n	8006c80 <_printf_float+0x16c>
 8006cc2:	b913      	cbnz	r3, 8006cca <_printf_float+0x1b6>
 8006cc4:	6822      	ldr	r2, [r4, #0]
 8006cc6:	07d2      	lsls	r2, r2, #31
 8006cc8:	d501      	bpl.n	8006cce <_printf_float+0x1ba>
 8006cca:	3302      	adds	r3, #2
 8006ccc:	e7f4      	b.n	8006cb8 <_printf_float+0x1a4>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e7f2      	b.n	8006cb8 <_printf_float+0x1a4>
 8006cd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	db05      	blt.n	8006ce8 <_printf_float+0x1d4>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	6121      	str	r1, [r4, #16]
 8006ce0:	07d8      	lsls	r0, r3, #31
 8006ce2:	d5ea      	bpl.n	8006cba <_printf_float+0x1a6>
 8006ce4:	1c4b      	adds	r3, r1, #1
 8006ce6:	e7e7      	b.n	8006cb8 <_printf_float+0x1a4>
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	bfd4      	ite	le
 8006cec:	f1c1 0202 	rsble	r2, r1, #2
 8006cf0:	2201      	movgt	r2, #1
 8006cf2:	4413      	add	r3, r2
 8006cf4:	e7e0      	b.n	8006cb8 <_printf_float+0x1a4>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	055a      	lsls	r2, r3, #21
 8006cfa:	d407      	bmi.n	8006d0c <_printf_float+0x1f8>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	4642      	mov	r2, r8
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	d12c      	bne.n	8006d64 <_printf_float+0x250>
 8006d0a:	e764      	b.n	8006bd6 <_printf_float+0xc2>
 8006d0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d10:	f240 80e0 	bls.w	8006ed4 <_printf_float+0x3c0>
 8006d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f7f9 fef4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d034      	beq.n	8006d8e <_printf_float+0x27a>
 8006d24:	4a37      	ldr	r2, [pc, #220]	; (8006e04 <_printf_float+0x2f0>)
 8006d26:	2301      	movs	r3, #1
 8006d28:	4631      	mov	r1, r6
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	47b8      	blx	r7
 8006d2e:	3001      	adds	r0, #1
 8006d30:	f43f af51 	beq.w	8006bd6 <_printf_float+0xc2>
 8006d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	db02      	blt.n	8006d42 <_printf_float+0x22e>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	07d8      	lsls	r0, r3, #31
 8006d40:	d510      	bpl.n	8006d64 <_printf_float+0x250>
 8006d42:	ee18 3a10 	vmov	r3, s16
 8006d46:	4652      	mov	r2, sl
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	3001      	adds	r0, #1
 8006d50:	f43f af41 	beq.w	8006bd6 <_printf_float+0xc2>
 8006d54:	f04f 0800 	mov.w	r8, #0
 8006d58:	f104 091a 	add.w	r9, r4, #26
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4543      	cmp	r3, r8
 8006d62:	dc09      	bgt.n	8006d78 <_printf_float+0x264>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	079b      	lsls	r3, r3, #30
 8006d68:	f100 8105 	bmi.w	8006f76 <_printf_float+0x462>
 8006d6c:	68e0      	ldr	r0, [r4, #12]
 8006d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d70:	4298      	cmp	r0, r3
 8006d72:	bfb8      	it	lt
 8006d74:	4618      	movlt	r0, r3
 8006d76:	e730      	b.n	8006bda <_printf_float+0xc6>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	464a      	mov	r2, r9
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	47b8      	blx	r7
 8006d82:	3001      	adds	r0, #1
 8006d84:	f43f af27 	beq.w	8006bd6 <_printf_float+0xc2>
 8006d88:	f108 0801 	add.w	r8, r8, #1
 8006d8c:	e7e6      	b.n	8006d5c <_printf_float+0x248>
 8006d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dc39      	bgt.n	8006e08 <_printf_float+0x2f4>
 8006d94:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <_printf_float+0x2f0>)
 8006d96:	2301      	movs	r3, #1
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	f43f af19 	beq.w	8006bd6 <_printf_float+0xc2>
 8006da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006da8:	4313      	orrs	r3, r2
 8006daa:	d102      	bne.n	8006db2 <_printf_float+0x29e>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	07d9      	lsls	r1, r3, #31
 8006db0:	d5d8      	bpl.n	8006d64 <_printf_float+0x250>
 8006db2:	ee18 3a10 	vmov	r3, s16
 8006db6:	4652      	mov	r2, sl
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af09 	beq.w	8006bd6 <_printf_float+0xc2>
 8006dc4:	f04f 0900 	mov.w	r9, #0
 8006dc8:	f104 0a1a 	add.w	sl, r4, #26
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	425b      	negs	r3, r3
 8006dd0:	454b      	cmp	r3, r9
 8006dd2:	dc01      	bgt.n	8006dd8 <_printf_float+0x2c4>
 8006dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd6:	e792      	b.n	8006cfe <_printf_float+0x1ea>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4652      	mov	r2, sl
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f aef7 	beq.w	8006bd6 <_printf_float+0xc2>
 8006de8:	f109 0901 	add.w	r9, r9, #1
 8006dec:	e7ee      	b.n	8006dcc <_printf_float+0x2b8>
 8006dee:	bf00      	nop
 8006df0:	7fefffff 	.word	0x7fefffff
 8006df4:	08009818 	.word	0x08009818
 8006df8:	0800981c 	.word	0x0800981c
 8006dfc:	08009824 	.word	0x08009824
 8006e00:	08009820 	.word	0x08009820
 8006e04:	08009828 	.word	0x08009828
 8006e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	bfa8      	it	ge
 8006e10:	461a      	movge	r2, r3
 8006e12:	2a00      	cmp	r2, #0
 8006e14:	4691      	mov	r9, r2
 8006e16:	dc37      	bgt.n	8006e88 <_printf_float+0x374>
 8006e18:	f04f 0b00 	mov.w	fp, #0
 8006e1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e20:	f104 021a 	add.w	r2, r4, #26
 8006e24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	eba3 0309 	sub.w	r3, r3, r9
 8006e2c:	455b      	cmp	r3, fp
 8006e2e:	dc33      	bgt.n	8006e98 <_printf_float+0x384>
 8006e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e34:	429a      	cmp	r2, r3
 8006e36:	db3b      	blt.n	8006eb0 <_printf_float+0x39c>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	07da      	lsls	r2, r3, #31
 8006e3c:	d438      	bmi.n	8006eb0 <_printf_float+0x39c>
 8006e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e40:	9a05      	ldr	r2, [sp, #20]
 8006e42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e44:	1a9a      	subs	r2, r3, r2
 8006e46:	eba3 0901 	sub.w	r9, r3, r1
 8006e4a:	4591      	cmp	r9, r2
 8006e4c:	bfa8      	it	ge
 8006e4e:	4691      	movge	r9, r2
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
 8006e54:	dc35      	bgt.n	8006ec2 <_printf_float+0x3ae>
 8006e56:	f04f 0800 	mov.w	r8, #0
 8006e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e5e:	f104 0a1a 	add.w	sl, r4, #26
 8006e62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	eba3 0309 	sub.w	r3, r3, r9
 8006e6c:	4543      	cmp	r3, r8
 8006e6e:	f77f af79 	ble.w	8006d64 <_printf_float+0x250>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4652      	mov	r2, sl
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f aeaa 	beq.w	8006bd6 <_printf_float+0xc2>
 8006e82:	f108 0801 	add.w	r8, r8, #1
 8006e86:	e7ec      	b.n	8006e62 <_printf_float+0x34e>
 8006e88:	4613      	mov	r3, r2
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	d1c0      	bne.n	8006e18 <_printf_float+0x304>
 8006e96:	e69e      	b.n	8006bd6 <_printf_float+0xc2>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	9205      	str	r2, [sp, #20]
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f43f ae97 	beq.w	8006bd6 <_printf_float+0xc2>
 8006ea8:	9a05      	ldr	r2, [sp, #20]
 8006eaa:	f10b 0b01 	add.w	fp, fp, #1
 8006eae:	e7b9      	b.n	8006e24 <_printf_float+0x310>
 8006eb0:	ee18 3a10 	vmov	r3, s16
 8006eb4:	4652      	mov	r2, sl
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d1be      	bne.n	8006e3e <_printf_float+0x32a>
 8006ec0:	e689      	b.n	8006bd6 <_printf_float+0xc2>
 8006ec2:	9a05      	ldr	r2, [sp, #20]
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	4442      	add	r2, r8
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d1c1      	bne.n	8006e56 <_printf_float+0x342>
 8006ed2:	e680      	b.n	8006bd6 <_printf_float+0xc2>
 8006ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed6:	2a01      	cmp	r2, #1
 8006ed8:	dc01      	bgt.n	8006ede <_printf_float+0x3ca>
 8006eda:	07db      	lsls	r3, r3, #31
 8006edc:	d538      	bpl.n	8006f50 <_printf_float+0x43c>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f ae74 	beq.w	8006bd6 <_printf_float+0xc2>
 8006eee:	ee18 3a10 	vmov	r3, s16
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	f43f ae6b 	beq.w	8006bd6 <_printf_float+0xc2>
 8006f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f04:	2200      	movs	r2, #0
 8006f06:	2300      	movs	r3, #0
 8006f08:	f7f9 fdfe 	bl	8000b08 <__aeabi_dcmpeq>
 8006f0c:	b9d8      	cbnz	r0, 8006f46 <_printf_float+0x432>
 8006f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f10:	f108 0201 	add.w	r2, r8, #1
 8006f14:	3b01      	subs	r3, #1
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d10e      	bne.n	8006f3e <_printf_float+0x42a>
 8006f20:	e659      	b.n	8006bd6 <_printf_float+0xc2>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4652      	mov	r2, sl
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f ae52 	beq.w	8006bd6 <_printf_float+0xc2>
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	4543      	cmp	r3, r8
 8006f3c:	dcf1      	bgt.n	8006f22 <_printf_float+0x40e>
 8006f3e:	464b      	mov	r3, r9
 8006f40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f44:	e6dc      	b.n	8006d00 <_printf_float+0x1ec>
 8006f46:	f04f 0800 	mov.w	r8, #0
 8006f4a:	f104 0a1a 	add.w	sl, r4, #26
 8006f4e:	e7f2      	b.n	8006f36 <_printf_float+0x422>
 8006f50:	2301      	movs	r3, #1
 8006f52:	4642      	mov	r2, r8
 8006f54:	e7df      	b.n	8006f16 <_printf_float+0x402>
 8006f56:	2301      	movs	r3, #1
 8006f58:	464a      	mov	r2, r9
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	f43f ae38 	beq.w	8006bd6 <_printf_float+0xc2>
 8006f66:	f108 0801 	add.w	r8, r8, #1
 8006f6a:	68e3      	ldr	r3, [r4, #12]
 8006f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f6e:	1a5b      	subs	r3, r3, r1
 8006f70:	4543      	cmp	r3, r8
 8006f72:	dcf0      	bgt.n	8006f56 <_printf_float+0x442>
 8006f74:	e6fa      	b.n	8006d6c <_printf_float+0x258>
 8006f76:	f04f 0800 	mov.w	r8, #0
 8006f7a:	f104 0919 	add.w	r9, r4, #25
 8006f7e:	e7f4      	b.n	8006f6a <_printf_float+0x456>

08006f80 <_printf_common>:
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	4616      	mov	r6, r2
 8006f86:	4699      	mov	r9, r3
 8006f88:	688a      	ldr	r2, [r1, #8]
 8006f8a:	690b      	ldr	r3, [r1, #16]
 8006f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	bfb8      	it	lt
 8006f94:	4613      	movlt	r3, r2
 8006f96:	6033      	str	r3, [r6, #0]
 8006f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	b10a      	cbz	r2, 8006fa6 <_printf_common+0x26>
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	6033      	str	r3, [r6, #0]
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	0699      	lsls	r1, r3, #26
 8006faa:	bf42      	ittt	mi
 8006fac:	6833      	ldrmi	r3, [r6, #0]
 8006fae:	3302      	addmi	r3, #2
 8006fb0:	6033      	strmi	r3, [r6, #0]
 8006fb2:	6825      	ldr	r5, [r4, #0]
 8006fb4:	f015 0506 	ands.w	r5, r5, #6
 8006fb8:	d106      	bne.n	8006fc8 <_printf_common+0x48>
 8006fba:	f104 0a19 	add.w	sl, r4, #25
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	6832      	ldr	r2, [r6, #0]
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dc26      	bgt.n	8007016 <_printf_common+0x96>
 8006fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fcc:	1e13      	subs	r3, r2, #0
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	bf18      	it	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	0692      	lsls	r2, r2, #26
 8006fd6:	d42b      	bmi.n	8007030 <_printf_common+0xb0>
 8006fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fdc:	4649      	mov	r1, r9
 8006fde:	4638      	mov	r0, r7
 8006fe0:	47c0      	blx	r8
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d01e      	beq.n	8007024 <_printf_common+0xa4>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	68e5      	ldr	r5, [r4, #12]
 8006fea:	6832      	ldr	r2, [r6, #0]
 8006fec:	f003 0306 	and.w	r3, r3, #6
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	bf08      	it	eq
 8006ff4:	1aad      	subeq	r5, r5, r2
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	6922      	ldr	r2, [r4, #16]
 8006ffa:	bf0c      	ite	eq
 8006ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007000:	2500      	movne	r5, #0
 8007002:	4293      	cmp	r3, r2
 8007004:	bfc4      	itt	gt
 8007006:	1a9b      	subgt	r3, r3, r2
 8007008:	18ed      	addgt	r5, r5, r3
 800700a:	2600      	movs	r6, #0
 800700c:	341a      	adds	r4, #26
 800700e:	42b5      	cmp	r5, r6
 8007010:	d11a      	bne.n	8007048 <_printf_common+0xc8>
 8007012:	2000      	movs	r0, #0
 8007014:	e008      	b.n	8007028 <_printf_common+0xa8>
 8007016:	2301      	movs	r3, #1
 8007018:	4652      	mov	r2, sl
 800701a:	4649      	mov	r1, r9
 800701c:	4638      	mov	r0, r7
 800701e:	47c0      	blx	r8
 8007020:	3001      	adds	r0, #1
 8007022:	d103      	bne.n	800702c <_printf_common+0xac>
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702c:	3501      	adds	r5, #1
 800702e:	e7c6      	b.n	8006fbe <_printf_common+0x3e>
 8007030:	18e1      	adds	r1, r4, r3
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	2030      	movs	r0, #48	; 0x30
 8007036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800703a:	4422      	add	r2, r4
 800703c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007044:	3302      	adds	r3, #2
 8007046:	e7c7      	b.n	8006fd8 <_printf_common+0x58>
 8007048:	2301      	movs	r3, #1
 800704a:	4622      	mov	r2, r4
 800704c:	4649      	mov	r1, r9
 800704e:	4638      	mov	r0, r7
 8007050:	47c0      	blx	r8
 8007052:	3001      	adds	r0, #1
 8007054:	d0e6      	beq.n	8007024 <_printf_common+0xa4>
 8007056:	3601      	adds	r6, #1
 8007058:	e7d9      	b.n	800700e <_printf_common+0x8e>
	...

0800705c <_printf_i>:
 800705c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	7e0f      	ldrb	r7, [r1, #24]
 8007062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007064:	2f78      	cmp	r7, #120	; 0x78
 8007066:	4691      	mov	r9, r2
 8007068:	4680      	mov	r8, r0
 800706a:	460c      	mov	r4, r1
 800706c:	469a      	mov	sl, r3
 800706e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007072:	d807      	bhi.n	8007084 <_printf_i+0x28>
 8007074:	2f62      	cmp	r7, #98	; 0x62
 8007076:	d80a      	bhi.n	800708e <_printf_i+0x32>
 8007078:	2f00      	cmp	r7, #0
 800707a:	f000 80d8 	beq.w	800722e <_printf_i+0x1d2>
 800707e:	2f58      	cmp	r7, #88	; 0x58
 8007080:	f000 80a3 	beq.w	80071ca <_printf_i+0x16e>
 8007084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800708c:	e03a      	b.n	8007104 <_printf_i+0xa8>
 800708e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007092:	2b15      	cmp	r3, #21
 8007094:	d8f6      	bhi.n	8007084 <_printf_i+0x28>
 8007096:	a101      	add	r1, pc, #4	; (adr r1, 800709c <_printf_i+0x40>)
 8007098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800709c:	080070f5 	.word	0x080070f5
 80070a0:	08007109 	.word	0x08007109
 80070a4:	08007085 	.word	0x08007085
 80070a8:	08007085 	.word	0x08007085
 80070ac:	08007085 	.word	0x08007085
 80070b0:	08007085 	.word	0x08007085
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007085 	.word	0x08007085
 80070bc:	08007085 	.word	0x08007085
 80070c0:	08007085 	.word	0x08007085
 80070c4:	08007085 	.word	0x08007085
 80070c8:	08007215 	.word	0x08007215
 80070cc:	08007139 	.word	0x08007139
 80070d0:	080071f7 	.word	0x080071f7
 80070d4:	08007085 	.word	0x08007085
 80070d8:	08007085 	.word	0x08007085
 80070dc:	08007237 	.word	0x08007237
 80070e0:	08007085 	.word	0x08007085
 80070e4:	08007139 	.word	0x08007139
 80070e8:	08007085 	.word	0x08007085
 80070ec:	08007085 	.word	0x08007085
 80070f0:	080071ff 	.word	0x080071ff
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	602a      	str	r2, [r5, #0]
 80070fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007104:	2301      	movs	r3, #1
 8007106:	e0a3      	b.n	8007250 <_printf_i+0x1f4>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	6829      	ldr	r1, [r5, #0]
 800710c:	0606      	lsls	r6, r0, #24
 800710e:	f101 0304 	add.w	r3, r1, #4
 8007112:	d50a      	bpl.n	800712a <_printf_i+0xce>
 8007114:	680e      	ldr	r6, [r1, #0]
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	2e00      	cmp	r6, #0
 800711a:	da03      	bge.n	8007124 <_printf_i+0xc8>
 800711c:	232d      	movs	r3, #45	; 0x2d
 800711e:	4276      	negs	r6, r6
 8007120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007124:	485e      	ldr	r0, [pc, #376]	; (80072a0 <_printf_i+0x244>)
 8007126:	230a      	movs	r3, #10
 8007128:	e019      	b.n	800715e <_printf_i+0x102>
 800712a:	680e      	ldr	r6, [r1, #0]
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007132:	bf18      	it	ne
 8007134:	b236      	sxthne	r6, r6
 8007136:	e7ef      	b.n	8007118 <_printf_i+0xbc>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	6820      	ldr	r0, [r4, #0]
 800713c:	1d19      	adds	r1, r3, #4
 800713e:	6029      	str	r1, [r5, #0]
 8007140:	0601      	lsls	r1, r0, #24
 8007142:	d501      	bpl.n	8007148 <_printf_i+0xec>
 8007144:	681e      	ldr	r6, [r3, #0]
 8007146:	e002      	b.n	800714e <_printf_i+0xf2>
 8007148:	0646      	lsls	r6, r0, #25
 800714a:	d5fb      	bpl.n	8007144 <_printf_i+0xe8>
 800714c:	881e      	ldrh	r6, [r3, #0]
 800714e:	4854      	ldr	r0, [pc, #336]	; (80072a0 <_printf_i+0x244>)
 8007150:	2f6f      	cmp	r7, #111	; 0x6f
 8007152:	bf0c      	ite	eq
 8007154:	2308      	moveq	r3, #8
 8007156:	230a      	movne	r3, #10
 8007158:	2100      	movs	r1, #0
 800715a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800715e:	6865      	ldr	r5, [r4, #4]
 8007160:	60a5      	str	r5, [r4, #8]
 8007162:	2d00      	cmp	r5, #0
 8007164:	bfa2      	ittt	ge
 8007166:	6821      	ldrge	r1, [r4, #0]
 8007168:	f021 0104 	bicge.w	r1, r1, #4
 800716c:	6021      	strge	r1, [r4, #0]
 800716e:	b90e      	cbnz	r6, 8007174 <_printf_i+0x118>
 8007170:	2d00      	cmp	r5, #0
 8007172:	d04d      	beq.n	8007210 <_printf_i+0x1b4>
 8007174:	4615      	mov	r5, r2
 8007176:	fbb6 f1f3 	udiv	r1, r6, r3
 800717a:	fb03 6711 	mls	r7, r3, r1, r6
 800717e:	5dc7      	ldrb	r7, [r0, r7]
 8007180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007184:	4637      	mov	r7, r6
 8007186:	42bb      	cmp	r3, r7
 8007188:	460e      	mov	r6, r1
 800718a:	d9f4      	bls.n	8007176 <_printf_i+0x11a>
 800718c:	2b08      	cmp	r3, #8
 800718e:	d10b      	bne.n	80071a8 <_printf_i+0x14c>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	07de      	lsls	r6, r3, #31
 8007194:	d508      	bpl.n	80071a8 <_printf_i+0x14c>
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	6861      	ldr	r1, [r4, #4]
 800719a:	4299      	cmp	r1, r3
 800719c:	bfde      	ittt	le
 800719e:	2330      	movle	r3, #48	; 0x30
 80071a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071a8:	1b52      	subs	r2, r2, r5
 80071aa:	6122      	str	r2, [r4, #16]
 80071ac:	f8cd a000 	str.w	sl, [sp]
 80071b0:	464b      	mov	r3, r9
 80071b2:	aa03      	add	r2, sp, #12
 80071b4:	4621      	mov	r1, r4
 80071b6:	4640      	mov	r0, r8
 80071b8:	f7ff fee2 	bl	8006f80 <_printf_common>
 80071bc:	3001      	adds	r0, #1
 80071be:	d14c      	bne.n	800725a <_printf_i+0x1fe>
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	b004      	add	sp, #16
 80071c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ca:	4835      	ldr	r0, [pc, #212]	; (80072a0 <_printf_i+0x244>)
 80071cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071d0:	6829      	ldr	r1, [r5, #0]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80071d8:	6029      	str	r1, [r5, #0]
 80071da:	061d      	lsls	r5, r3, #24
 80071dc:	d514      	bpl.n	8007208 <_printf_i+0x1ac>
 80071de:	07df      	lsls	r7, r3, #31
 80071e0:	bf44      	itt	mi
 80071e2:	f043 0320 	orrmi.w	r3, r3, #32
 80071e6:	6023      	strmi	r3, [r4, #0]
 80071e8:	b91e      	cbnz	r6, 80071f2 <_printf_i+0x196>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f023 0320 	bic.w	r3, r3, #32
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	2310      	movs	r3, #16
 80071f4:	e7b0      	b.n	8007158 <_printf_i+0xfc>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f043 0320 	orr.w	r3, r3, #32
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	2378      	movs	r3, #120	; 0x78
 8007200:	4828      	ldr	r0, [pc, #160]	; (80072a4 <_printf_i+0x248>)
 8007202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007206:	e7e3      	b.n	80071d0 <_printf_i+0x174>
 8007208:	0659      	lsls	r1, r3, #25
 800720a:	bf48      	it	mi
 800720c:	b2b6      	uxthmi	r6, r6
 800720e:	e7e6      	b.n	80071de <_printf_i+0x182>
 8007210:	4615      	mov	r5, r2
 8007212:	e7bb      	b.n	800718c <_printf_i+0x130>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	6826      	ldr	r6, [r4, #0]
 8007218:	6961      	ldr	r1, [r4, #20]
 800721a:	1d18      	adds	r0, r3, #4
 800721c:	6028      	str	r0, [r5, #0]
 800721e:	0635      	lsls	r5, r6, #24
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	d501      	bpl.n	8007228 <_printf_i+0x1cc>
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	e002      	b.n	800722e <_printf_i+0x1d2>
 8007228:	0670      	lsls	r0, r6, #25
 800722a:	d5fb      	bpl.n	8007224 <_printf_i+0x1c8>
 800722c:	8019      	strh	r1, [r3, #0]
 800722e:	2300      	movs	r3, #0
 8007230:	6123      	str	r3, [r4, #16]
 8007232:	4615      	mov	r5, r2
 8007234:	e7ba      	b.n	80071ac <_printf_i+0x150>
 8007236:	682b      	ldr	r3, [r5, #0]
 8007238:	1d1a      	adds	r2, r3, #4
 800723a:	602a      	str	r2, [r5, #0]
 800723c:	681d      	ldr	r5, [r3, #0]
 800723e:	6862      	ldr	r2, [r4, #4]
 8007240:	2100      	movs	r1, #0
 8007242:	4628      	mov	r0, r5
 8007244:	f7f8 ffec 	bl	8000220 <memchr>
 8007248:	b108      	cbz	r0, 800724e <_printf_i+0x1f2>
 800724a:	1b40      	subs	r0, r0, r5
 800724c:	6060      	str	r0, [r4, #4]
 800724e:	6863      	ldr	r3, [r4, #4]
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	2300      	movs	r3, #0
 8007254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007258:	e7a8      	b.n	80071ac <_printf_i+0x150>
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	462a      	mov	r2, r5
 800725e:	4649      	mov	r1, r9
 8007260:	4640      	mov	r0, r8
 8007262:	47d0      	blx	sl
 8007264:	3001      	adds	r0, #1
 8007266:	d0ab      	beq.n	80071c0 <_printf_i+0x164>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	079b      	lsls	r3, r3, #30
 800726c:	d413      	bmi.n	8007296 <_printf_i+0x23a>
 800726e:	68e0      	ldr	r0, [r4, #12]
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	4298      	cmp	r0, r3
 8007274:	bfb8      	it	lt
 8007276:	4618      	movlt	r0, r3
 8007278:	e7a4      	b.n	80071c4 <_printf_i+0x168>
 800727a:	2301      	movs	r3, #1
 800727c:	4632      	mov	r2, r6
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	47d0      	blx	sl
 8007284:	3001      	adds	r0, #1
 8007286:	d09b      	beq.n	80071c0 <_printf_i+0x164>
 8007288:	3501      	adds	r5, #1
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	9903      	ldr	r1, [sp, #12]
 800728e:	1a5b      	subs	r3, r3, r1
 8007290:	42ab      	cmp	r3, r5
 8007292:	dcf2      	bgt.n	800727a <_printf_i+0x21e>
 8007294:	e7eb      	b.n	800726e <_printf_i+0x212>
 8007296:	2500      	movs	r5, #0
 8007298:	f104 0619 	add.w	r6, r4, #25
 800729c:	e7f5      	b.n	800728a <_printf_i+0x22e>
 800729e:	bf00      	nop
 80072a0:	0800982a 	.word	0x0800982a
 80072a4:	0800983b 	.word	0x0800983b

080072a8 <siprintf>:
 80072a8:	b40e      	push	{r1, r2, r3}
 80072aa:	b500      	push	{lr}
 80072ac:	b09c      	sub	sp, #112	; 0x70
 80072ae:	ab1d      	add	r3, sp, #116	; 0x74
 80072b0:	9002      	str	r0, [sp, #8]
 80072b2:	9006      	str	r0, [sp, #24]
 80072b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072b8:	4809      	ldr	r0, [pc, #36]	; (80072e0 <siprintf+0x38>)
 80072ba:	9107      	str	r1, [sp, #28]
 80072bc:	9104      	str	r1, [sp, #16]
 80072be:	4909      	ldr	r1, [pc, #36]	; (80072e4 <siprintf+0x3c>)
 80072c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c4:	9105      	str	r1, [sp, #20]
 80072c6:	6800      	ldr	r0, [r0, #0]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	a902      	add	r1, sp, #8
 80072cc:	f001 fb76 	bl	80089bc <_svfiprintf_r>
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	b01c      	add	sp, #112	; 0x70
 80072d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072dc:	b003      	add	sp, #12
 80072de:	4770      	bx	lr
 80072e0:	2000000c 	.word	0x2000000c
 80072e4:	ffff0208 	.word	0xffff0208

080072e8 <quorem>:
 80072e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	6903      	ldr	r3, [r0, #16]
 80072ee:	690c      	ldr	r4, [r1, #16]
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	4607      	mov	r7, r0
 80072f4:	f2c0 8081 	blt.w	80073fa <quorem+0x112>
 80072f8:	3c01      	subs	r4, #1
 80072fa:	f101 0814 	add.w	r8, r1, #20
 80072fe:	f100 0514 	add.w	r5, r0, #20
 8007302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800730c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007310:	3301      	adds	r3, #1
 8007312:	429a      	cmp	r2, r3
 8007314:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800731c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007320:	d331      	bcc.n	8007386 <quorem+0x9e>
 8007322:	f04f 0e00 	mov.w	lr, #0
 8007326:	4640      	mov	r0, r8
 8007328:	46ac      	mov	ip, r5
 800732a:	46f2      	mov	sl, lr
 800732c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007330:	b293      	uxth	r3, r2
 8007332:	fb06 e303 	mla	r3, r6, r3, lr
 8007336:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800733a:	b29b      	uxth	r3, r3
 800733c:	ebaa 0303 	sub.w	r3, sl, r3
 8007340:	f8dc a000 	ldr.w	sl, [ip]
 8007344:	0c12      	lsrs	r2, r2, #16
 8007346:	fa13 f38a 	uxtah	r3, r3, sl
 800734a:	fb06 e202 	mla	r2, r6, r2, lr
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	9b00      	ldr	r3, [sp, #0]
 8007352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007356:	b292      	uxth	r2, r2
 8007358:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800735c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007360:	f8bd 3000 	ldrh.w	r3, [sp]
 8007364:	4581      	cmp	r9, r0
 8007366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800736a:	f84c 3b04 	str.w	r3, [ip], #4
 800736e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007372:	d2db      	bcs.n	800732c <quorem+0x44>
 8007374:	f855 300b 	ldr.w	r3, [r5, fp]
 8007378:	b92b      	cbnz	r3, 8007386 <quorem+0x9e>
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	3b04      	subs	r3, #4
 800737e:	429d      	cmp	r5, r3
 8007380:	461a      	mov	r2, r3
 8007382:	d32e      	bcc.n	80073e2 <quorem+0xfa>
 8007384:	613c      	str	r4, [r7, #16]
 8007386:	4638      	mov	r0, r7
 8007388:	f001 f8c4 	bl	8008514 <__mcmp>
 800738c:	2800      	cmp	r0, #0
 800738e:	db24      	blt.n	80073da <quorem+0xf2>
 8007390:	3601      	adds	r6, #1
 8007392:	4628      	mov	r0, r5
 8007394:	f04f 0c00 	mov.w	ip, #0
 8007398:	f858 2b04 	ldr.w	r2, [r8], #4
 800739c:	f8d0 e000 	ldr.w	lr, [r0]
 80073a0:	b293      	uxth	r3, r2
 80073a2:	ebac 0303 	sub.w	r3, ip, r3
 80073a6:	0c12      	lsrs	r2, r2, #16
 80073a8:	fa13 f38e 	uxtah	r3, r3, lr
 80073ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ba:	45c1      	cmp	r9, r8
 80073bc:	f840 3b04 	str.w	r3, [r0], #4
 80073c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073c4:	d2e8      	bcs.n	8007398 <quorem+0xb0>
 80073c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ce:	b922      	cbnz	r2, 80073da <quorem+0xf2>
 80073d0:	3b04      	subs	r3, #4
 80073d2:	429d      	cmp	r5, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	d30a      	bcc.n	80073ee <quorem+0x106>
 80073d8:	613c      	str	r4, [r7, #16]
 80073da:	4630      	mov	r0, r6
 80073dc:	b003      	add	sp, #12
 80073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	d1cc      	bne.n	8007384 <quorem+0x9c>
 80073ea:	3c01      	subs	r4, #1
 80073ec:	e7c7      	b.n	800737e <quorem+0x96>
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	3b04      	subs	r3, #4
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	d1f0      	bne.n	80073d8 <quorem+0xf0>
 80073f6:	3c01      	subs	r4, #1
 80073f8:	e7eb      	b.n	80073d2 <quorem+0xea>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e7ee      	b.n	80073dc <quorem+0xf4>
	...

08007400 <_dtoa_r>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	ed2d 8b04 	vpush	{d8-d9}
 8007408:	ec57 6b10 	vmov	r6, r7, d0
 800740c:	b093      	sub	sp, #76	; 0x4c
 800740e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007414:	9106      	str	r1, [sp, #24]
 8007416:	ee10 aa10 	vmov	sl, s0
 800741a:	4604      	mov	r4, r0
 800741c:	9209      	str	r2, [sp, #36]	; 0x24
 800741e:	930c      	str	r3, [sp, #48]	; 0x30
 8007420:	46bb      	mov	fp, r7
 8007422:	b975      	cbnz	r5, 8007442 <_dtoa_r+0x42>
 8007424:	2010      	movs	r0, #16
 8007426:	f000 fddd 	bl	8007fe4 <malloc>
 800742a:	4602      	mov	r2, r0
 800742c:	6260      	str	r0, [r4, #36]	; 0x24
 800742e:	b920      	cbnz	r0, 800743a <_dtoa_r+0x3a>
 8007430:	4ba7      	ldr	r3, [pc, #668]	; (80076d0 <_dtoa_r+0x2d0>)
 8007432:	21ea      	movs	r1, #234	; 0xea
 8007434:	48a7      	ldr	r0, [pc, #668]	; (80076d4 <_dtoa_r+0x2d4>)
 8007436:	f001 fbd1 	bl	8008bdc <__assert_func>
 800743a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800743e:	6005      	str	r5, [r0, #0]
 8007440:	60c5      	str	r5, [r0, #12]
 8007442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	b151      	cbz	r1, 800745e <_dtoa_r+0x5e>
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	604a      	str	r2, [r1, #4]
 800744c:	2301      	movs	r3, #1
 800744e:	4093      	lsls	r3, r2
 8007450:	608b      	str	r3, [r1, #8]
 8007452:	4620      	mov	r0, r4
 8007454:	f000 fe1c 	bl	8008090 <_Bfree>
 8007458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	1e3b      	subs	r3, r7, #0
 8007460:	bfaa      	itet	ge
 8007462:	2300      	movge	r3, #0
 8007464:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007468:	f8c8 3000 	strge.w	r3, [r8]
 800746c:	4b9a      	ldr	r3, [pc, #616]	; (80076d8 <_dtoa_r+0x2d8>)
 800746e:	bfbc      	itt	lt
 8007470:	2201      	movlt	r2, #1
 8007472:	f8c8 2000 	strlt.w	r2, [r8]
 8007476:	ea33 030b 	bics.w	r3, r3, fp
 800747a:	d11b      	bne.n	80074b4 <_dtoa_r+0xb4>
 800747c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800747e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007488:	4333      	orrs	r3, r6
 800748a:	f000 8592 	beq.w	8007fb2 <_dtoa_r+0xbb2>
 800748e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007490:	b963      	cbnz	r3, 80074ac <_dtoa_r+0xac>
 8007492:	4b92      	ldr	r3, [pc, #584]	; (80076dc <_dtoa_r+0x2dc>)
 8007494:	e022      	b.n	80074dc <_dtoa_r+0xdc>
 8007496:	4b92      	ldr	r3, [pc, #584]	; (80076e0 <_dtoa_r+0x2e0>)
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	3308      	adds	r3, #8
 800749c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	9801      	ldr	r0, [sp, #4]
 80074a2:	b013      	add	sp, #76	; 0x4c
 80074a4:	ecbd 8b04 	vpop	{d8-d9}
 80074a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ac:	4b8b      	ldr	r3, [pc, #556]	; (80076dc <_dtoa_r+0x2dc>)
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	3303      	adds	r3, #3
 80074b2:	e7f3      	b.n	800749c <_dtoa_r+0x9c>
 80074b4:	2200      	movs	r2, #0
 80074b6:	2300      	movs	r3, #0
 80074b8:	4650      	mov	r0, sl
 80074ba:	4659      	mov	r1, fp
 80074bc:	f7f9 fb24 	bl	8000b08 <__aeabi_dcmpeq>
 80074c0:	ec4b ab19 	vmov	d9, sl, fp
 80074c4:	4680      	mov	r8, r0
 80074c6:	b158      	cbz	r0, 80074e0 <_dtoa_r+0xe0>
 80074c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ca:	2301      	movs	r3, #1
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 856b 	beq.w	8007fac <_dtoa_r+0xbac>
 80074d6:	4883      	ldr	r0, [pc, #524]	; (80076e4 <_dtoa_r+0x2e4>)
 80074d8:	6018      	str	r0, [r3, #0]
 80074da:	1e43      	subs	r3, r0, #1
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	e7df      	b.n	80074a0 <_dtoa_r+0xa0>
 80074e0:	ec4b ab10 	vmov	d0, sl, fp
 80074e4:	aa10      	add	r2, sp, #64	; 0x40
 80074e6:	a911      	add	r1, sp, #68	; 0x44
 80074e8:	4620      	mov	r0, r4
 80074ea:	f001 f8b9 	bl	8008660 <__d2b>
 80074ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80074f2:	ee08 0a10 	vmov	s16, r0
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	f000 8084 	beq.w	8007604 <_dtoa_r+0x204>
 80074fc:	ee19 3a90 	vmov	r3, s19
 8007500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007504:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007508:	4656      	mov	r6, sl
 800750a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800750e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007516:	4b74      	ldr	r3, [pc, #464]	; (80076e8 <_dtoa_r+0x2e8>)
 8007518:	2200      	movs	r2, #0
 800751a:	4630      	mov	r0, r6
 800751c:	4639      	mov	r1, r7
 800751e:	f7f8 fed3 	bl	80002c8 <__aeabi_dsub>
 8007522:	a365      	add	r3, pc, #404	; (adr r3, 80076b8 <_dtoa_r+0x2b8>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f9 f886 	bl	8000638 <__aeabi_dmul>
 800752c:	a364      	add	r3, pc, #400	; (adr r3, 80076c0 <_dtoa_r+0x2c0>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f7f8 fecb 	bl	80002cc <__adddf3>
 8007536:	4606      	mov	r6, r0
 8007538:	4628      	mov	r0, r5
 800753a:	460f      	mov	r7, r1
 800753c:	f7f9 f812 	bl	8000564 <__aeabi_i2d>
 8007540:	a361      	add	r3, pc, #388	; (adr r3, 80076c8 <_dtoa_r+0x2c8>)
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f7f9 f877 	bl	8000638 <__aeabi_dmul>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4630      	mov	r0, r6
 8007550:	4639      	mov	r1, r7
 8007552:	f7f8 febb 	bl	80002cc <__adddf3>
 8007556:	4606      	mov	r6, r0
 8007558:	460f      	mov	r7, r1
 800755a:	f7f9 fb1d 	bl	8000b98 <__aeabi_d2iz>
 800755e:	2200      	movs	r2, #0
 8007560:	9000      	str	r0, [sp, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	4630      	mov	r0, r6
 8007566:	4639      	mov	r1, r7
 8007568:	f7f9 fad8 	bl	8000b1c <__aeabi_dcmplt>
 800756c:	b150      	cbz	r0, 8007584 <_dtoa_r+0x184>
 800756e:	9800      	ldr	r0, [sp, #0]
 8007570:	f7f8 fff8 	bl	8000564 <__aeabi_i2d>
 8007574:	4632      	mov	r2, r6
 8007576:	463b      	mov	r3, r7
 8007578:	f7f9 fac6 	bl	8000b08 <__aeabi_dcmpeq>
 800757c:	b910      	cbnz	r0, 8007584 <_dtoa_r+0x184>
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	9b00      	ldr	r3, [sp, #0]
 8007586:	2b16      	cmp	r3, #22
 8007588:	d85a      	bhi.n	8007640 <_dtoa_r+0x240>
 800758a:	9a00      	ldr	r2, [sp, #0]
 800758c:	4b57      	ldr	r3, [pc, #348]	; (80076ec <_dtoa_r+0x2ec>)
 800758e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	ec51 0b19 	vmov	r0, r1, d9
 800759a:	f7f9 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d050      	beq.n	8007644 <_dtoa_r+0x244>
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075ae:	1b5d      	subs	r5, r3, r5
 80075b0:	1e6b      	subs	r3, r5, #1
 80075b2:	9305      	str	r3, [sp, #20]
 80075b4:	bf45      	ittet	mi
 80075b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80075ba:	9304      	strmi	r3, [sp, #16]
 80075bc:	2300      	movpl	r3, #0
 80075be:	2300      	movmi	r3, #0
 80075c0:	bf4c      	ite	mi
 80075c2:	9305      	strmi	r3, [sp, #20]
 80075c4:	9304      	strpl	r3, [sp, #16]
 80075c6:	9b00      	ldr	r3, [sp, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	db3d      	blt.n	8007648 <_dtoa_r+0x248>
 80075cc:	9b05      	ldr	r3, [sp, #20]
 80075ce:	9a00      	ldr	r2, [sp, #0]
 80075d0:	920a      	str	r2, [sp, #40]	; 0x28
 80075d2:	4413      	add	r3, r2
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	2300      	movs	r3, #0
 80075d8:	9307      	str	r3, [sp, #28]
 80075da:	9b06      	ldr	r3, [sp, #24]
 80075dc:	2b09      	cmp	r3, #9
 80075de:	f200 8089 	bhi.w	80076f4 <_dtoa_r+0x2f4>
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	bfc4      	itt	gt
 80075e6:	3b04      	subgt	r3, #4
 80075e8:	9306      	strgt	r3, [sp, #24]
 80075ea:	9b06      	ldr	r3, [sp, #24]
 80075ec:	f1a3 0302 	sub.w	r3, r3, #2
 80075f0:	bfcc      	ite	gt
 80075f2:	2500      	movgt	r5, #0
 80075f4:	2501      	movle	r5, #1
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	f200 8087 	bhi.w	800770a <_dtoa_r+0x30a>
 80075fc:	e8df f003 	tbb	[pc, r3]
 8007600:	59383a2d 	.word	0x59383a2d
 8007604:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007608:	441d      	add	r5, r3
 800760a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800760e:	2b20      	cmp	r3, #32
 8007610:	bfc1      	itttt	gt
 8007612:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007616:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800761a:	fa0b f303 	lslgt.w	r3, fp, r3
 800761e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007622:	bfda      	itte	le
 8007624:	f1c3 0320 	rsble	r3, r3, #32
 8007628:	fa06 f003 	lslle.w	r0, r6, r3
 800762c:	4318      	orrgt	r0, r3
 800762e:	f7f8 ff89 	bl	8000544 <__aeabi_ui2d>
 8007632:	2301      	movs	r3, #1
 8007634:	4606      	mov	r6, r0
 8007636:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800763a:	3d01      	subs	r5, #1
 800763c:	930e      	str	r3, [sp, #56]	; 0x38
 800763e:	e76a      	b.n	8007516 <_dtoa_r+0x116>
 8007640:	2301      	movs	r3, #1
 8007642:	e7b2      	b.n	80075aa <_dtoa_r+0x1aa>
 8007644:	900b      	str	r0, [sp, #44]	; 0x2c
 8007646:	e7b1      	b.n	80075ac <_dtoa_r+0x1ac>
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	9a00      	ldr	r2, [sp, #0]
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	4253      	negs	r3, r2
 8007652:	9307      	str	r3, [sp, #28]
 8007654:	2300      	movs	r3, #0
 8007656:	930a      	str	r3, [sp, #40]	; 0x28
 8007658:	e7bf      	b.n	80075da <_dtoa_r+0x1da>
 800765a:	2300      	movs	r3, #0
 800765c:	9308      	str	r3, [sp, #32]
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	dc55      	bgt.n	8007710 <_dtoa_r+0x310>
 8007664:	2301      	movs	r3, #1
 8007666:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800766a:	461a      	mov	r2, r3
 800766c:	9209      	str	r2, [sp, #36]	; 0x24
 800766e:	e00c      	b.n	800768a <_dtoa_r+0x28a>
 8007670:	2301      	movs	r3, #1
 8007672:	e7f3      	b.n	800765c <_dtoa_r+0x25c>
 8007674:	2300      	movs	r3, #0
 8007676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007678:	9308      	str	r3, [sp, #32]
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	4413      	add	r3, r2
 800767e:	9302      	str	r3, [sp, #8]
 8007680:	3301      	adds	r3, #1
 8007682:	2b01      	cmp	r3, #1
 8007684:	9303      	str	r3, [sp, #12]
 8007686:	bfb8      	it	lt
 8007688:	2301      	movlt	r3, #1
 800768a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800768c:	2200      	movs	r2, #0
 800768e:	6042      	str	r2, [r0, #4]
 8007690:	2204      	movs	r2, #4
 8007692:	f102 0614 	add.w	r6, r2, #20
 8007696:	429e      	cmp	r6, r3
 8007698:	6841      	ldr	r1, [r0, #4]
 800769a:	d93d      	bls.n	8007718 <_dtoa_r+0x318>
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fcb7 	bl	8008010 <_Balloc>
 80076a2:	9001      	str	r0, [sp, #4]
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d13b      	bne.n	8007720 <_dtoa_r+0x320>
 80076a8:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <_dtoa_r+0x2f0>)
 80076aa:	4602      	mov	r2, r0
 80076ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076b0:	e6c0      	b.n	8007434 <_dtoa_r+0x34>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e7df      	b.n	8007676 <_dtoa_r+0x276>
 80076b6:	bf00      	nop
 80076b8:	636f4361 	.word	0x636f4361
 80076bc:	3fd287a7 	.word	0x3fd287a7
 80076c0:	8b60c8b3 	.word	0x8b60c8b3
 80076c4:	3fc68a28 	.word	0x3fc68a28
 80076c8:	509f79fb 	.word	0x509f79fb
 80076cc:	3fd34413 	.word	0x3fd34413
 80076d0:	08009859 	.word	0x08009859
 80076d4:	08009870 	.word	0x08009870
 80076d8:	7ff00000 	.word	0x7ff00000
 80076dc:	08009855 	.word	0x08009855
 80076e0:	0800984c 	.word	0x0800984c
 80076e4:	08009829 	.word	0x08009829
 80076e8:	3ff80000 	.word	0x3ff80000
 80076ec:	08009960 	.word	0x08009960
 80076f0:	080098cb 	.word	0x080098cb
 80076f4:	2501      	movs	r5, #1
 80076f6:	2300      	movs	r3, #0
 80076f8:	9306      	str	r3, [sp, #24]
 80076fa:	9508      	str	r5, [sp, #32]
 80076fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007700:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007704:	2200      	movs	r2, #0
 8007706:	2312      	movs	r3, #18
 8007708:	e7b0      	b.n	800766c <_dtoa_r+0x26c>
 800770a:	2301      	movs	r3, #1
 800770c:	9308      	str	r3, [sp, #32]
 800770e:	e7f5      	b.n	80076fc <_dtoa_r+0x2fc>
 8007710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007716:	e7b8      	b.n	800768a <_dtoa_r+0x28a>
 8007718:	3101      	adds	r1, #1
 800771a:	6041      	str	r1, [r0, #4]
 800771c:	0052      	lsls	r2, r2, #1
 800771e:	e7b8      	b.n	8007692 <_dtoa_r+0x292>
 8007720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007722:	9a01      	ldr	r2, [sp, #4]
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	2b0e      	cmp	r3, #14
 800772a:	f200 809d 	bhi.w	8007868 <_dtoa_r+0x468>
 800772e:	2d00      	cmp	r5, #0
 8007730:	f000 809a 	beq.w	8007868 <_dtoa_r+0x468>
 8007734:	9b00      	ldr	r3, [sp, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	dd32      	ble.n	80077a0 <_dtoa_r+0x3a0>
 800773a:	4ab7      	ldr	r2, [pc, #732]	; (8007a18 <_dtoa_r+0x618>)
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007744:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	05d8      	lsls	r0, r3, #23
 800774c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007750:	d516      	bpl.n	8007780 <_dtoa_r+0x380>
 8007752:	4bb2      	ldr	r3, [pc, #712]	; (8007a1c <_dtoa_r+0x61c>)
 8007754:	ec51 0b19 	vmov	r0, r1, d9
 8007758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800775c:	f7f9 f896 	bl	800088c <__aeabi_ddiv>
 8007760:	f007 070f 	and.w	r7, r7, #15
 8007764:	4682      	mov	sl, r0
 8007766:	468b      	mov	fp, r1
 8007768:	2503      	movs	r5, #3
 800776a:	4eac      	ldr	r6, [pc, #688]	; (8007a1c <_dtoa_r+0x61c>)
 800776c:	b957      	cbnz	r7, 8007784 <_dtoa_r+0x384>
 800776e:	4642      	mov	r2, r8
 8007770:	464b      	mov	r3, r9
 8007772:	4650      	mov	r0, sl
 8007774:	4659      	mov	r1, fp
 8007776:	f7f9 f889 	bl	800088c <__aeabi_ddiv>
 800777a:	4682      	mov	sl, r0
 800777c:	468b      	mov	fp, r1
 800777e:	e028      	b.n	80077d2 <_dtoa_r+0x3d2>
 8007780:	2502      	movs	r5, #2
 8007782:	e7f2      	b.n	800776a <_dtoa_r+0x36a>
 8007784:	07f9      	lsls	r1, r7, #31
 8007786:	d508      	bpl.n	800779a <_dtoa_r+0x39a>
 8007788:	4640      	mov	r0, r8
 800778a:	4649      	mov	r1, r9
 800778c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007790:	f7f8 ff52 	bl	8000638 <__aeabi_dmul>
 8007794:	3501      	adds	r5, #1
 8007796:	4680      	mov	r8, r0
 8007798:	4689      	mov	r9, r1
 800779a:	107f      	asrs	r7, r7, #1
 800779c:	3608      	adds	r6, #8
 800779e:	e7e5      	b.n	800776c <_dtoa_r+0x36c>
 80077a0:	f000 809b 	beq.w	80078da <_dtoa_r+0x4da>
 80077a4:	9b00      	ldr	r3, [sp, #0]
 80077a6:	4f9d      	ldr	r7, [pc, #628]	; (8007a1c <_dtoa_r+0x61c>)
 80077a8:	425e      	negs	r6, r3
 80077aa:	4b9b      	ldr	r3, [pc, #620]	; (8007a18 <_dtoa_r+0x618>)
 80077ac:	f006 020f 	and.w	r2, r6, #15
 80077b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	ec51 0b19 	vmov	r0, r1, d9
 80077bc:	f7f8 ff3c 	bl	8000638 <__aeabi_dmul>
 80077c0:	1136      	asrs	r6, r6, #4
 80077c2:	4682      	mov	sl, r0
 80077c4:	468b      	mov	fp, r1
 80077c6:	2300      	movs	r3, #0
 80077c8:	2502      	movs	r5, #2
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	d17a      	bne.n	80078c4 <_dtoa_r+0x4c4>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1d3      	bne.n	800777a <_dtoa_r+0x37a>
 80077d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8082 	beq.w	80078de <_dtoa_r+0x4de>
 80077da:	4b91      	ldr	r3, [pc, #580]	; (8007a20 <_dtoa_r+0x620>)
 80077dc:	2200      	movs	r2, #0
 80077de:	4650      	mov	r0, sl
 80077e0:	4659      	mov	r1, fp
 80077e2:	f7f9 f99b 	bl	8000b1c <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d079      	beq.n	80078de <_dtoa_r+0x4de>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d076      	beq.n	80078de <_dtoa_r+0x4de>
 80077f0:	9b02      	ldr	r3, [sp, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	dd36      	ble.n	8007864 <_dtoa_r+0x464>
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	4650      	mov	r0, sl
 80077fa:	4659      	mov	r1, fp
 80077fc:	1e5f      	subs	r7, r3, #1
 80077fe:	2200      	movs	r2, #0
 8007800:	4b88      	ldr	r3, [pc, #544]	; (8007a24 <_dtoa_r+0x624>)
 8007802:	f7f8 ff19 	bl	8000638 <__aeabi_dmul>
 8007806:	9e02      	ldr	r6, [sp, #8]
 8007808:	4682      	mov	sl, r0
 800780a:	468b      	mov	fp, r1
 800780c:	3501      	adds	r5, #1
 800780e:	4628      	mov	r0, r5
 8007810:	f7f8 fea8 	bl	8000564 <__aeabi_i2d>
 8007814:	4652      	mov	r2, sl
 8007816:	465b      	mov	r3, fp
 8007818:	f7f8 ff0e 	bl	8000638 <__aeabi_dmul>
 800781c:	4b82      	ldr	r3, [pc, #520]	; (8007a28 <_dtoa_r+0x628>)
 800781e:	2200      	movs	r2, #0
 8007820:	f7f8 fd54 	bl	80002cc <__adddf3>
 8007824:	46d0      	mov	r8, sl
 8007826:	46d9      	mov	r9, fp
 8007828:	4682      	mov	sl, r0
 800782a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800782e:	2e00      	cmp	r6, #0
 8007830:	d158      	bne.n	80078e4 <_dtoa_r+0x4e4>
 8007832:	4b7e      	ldr	r3, [pc, #504]	; (8007a2c <_dtoa_r+0x62c>)
 8007834:	2200      	movs	r2, #0
 8007836:	4640      	mov	r0, r8
 8007838:	4649      	mov	r1, r9
 800783a:	f7f8 fd45 	bl	80002c8 <__aeabi_dsub>
 800783e:	4652      	mov	r2, sl
 8007840:	465b      	mov	r3, fp
 8007842:	4680      	mov	r8, r0
 8007844:	4689      	mov	r9, r1
 8007846:	f7f9 f987 	bl	8000b58 <__aeabi_dcmpgt>
 800784a:	2800      	cmp	r0, #0
 800784c:	f040 8295 	bne.w	8007d7a <_dtoa_r+0x97a>
 8007850:	4652      	mov	r2, sl
 8007852:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007856:	4640      	mov	r0, r8
 8007858:	4649      	mov	r1, r9
 800785a:	f7f9 f95f 	bl	8000b1c <__aeabi_dcmplt>
 800785e:	2800      	cmp	r0, #0
 8007860:	f040 8289 	bne.w	8007d76 <_dtoa_r+0x976>
 8007864:	ec5b ab19 	vmov	sl, fp, d9
 8007868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800786a:	2b00      	cmp	r3, #0
 800786c:	f2c0 8148 	blt.w	8007b00 <_dtoa_r+0x700>
 8007870:	9a00      	ldr	r2, [sp, #0]
 8007872:	2a0e      	cmp	r2, #14
 8007874:	f300 8144 	bgt.w	8007b00 <_dtoa_r+0x700>
 8007878:	4b67      	ldr	r3, [pc, #412]	; (8007a18 <_dtoa_r+0x618>)
 800787a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800787e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	f280 80d5 	bge.w	8007a34 <_dtoa_r+0x634>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f300 80d1 	bgt.w	8007a34 <_dtoa_r+0x634>
 8007892:	f040 826f 	bne.w	8007d74 <_dtoa_r+0x974>
 8007896:	4b65      	ldr	r3, [pc, #404]	; (8007a2c <_dtoa_r+0x62c>)
 8007898:	2200      	movs	r2, #0
 800789a:	4640      	mov	r0, r8
 800789c:	4649      	mov	r1, r9
 800789e:	f7f8 fecb 	bl	8000638 <__aeabi_dmul>
 80078a2:	4652      	mov	r2, sl
 80078a4:	465b      	mov	r3, fp
 80078a6:	f7f9 f94d 	bl	8000b44 <__aeabi_dcmpge>
 80078aa:	9e03      	ldr	r6, [sp, #12]
 80078ac:	4637      	mov	r7, r6
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f040 8245 	bne.w	8007d3e <_dtoa_r+0x93e>
 80078b4:	9d01      	ldr	r5, [sp, #4]
 80078b6:	2331      	movs	r3, #49	; 0x31
 80078b8:	f805 3b01 	strb.w	r3, [r5], #1
 80078bc:	9b00      	ldr	r3, [sp, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	e240      	b.n	8007d46 <_dtoa_r+0x946>
 80078c4:	07f2      	lsls	r2, r6, #31
 80078c6:	d505      	bpl.n	80078d4 <_dtoa_r+0x4d4>
 80078c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078cc:	f7f8 feb4 	bl	8000638 <__aeabi_dmul>
 80078d0:	3501      	adds	r5, #1
 80078d2:	2301      	movs	r3, #1
 80078d4:	1076      	asrs	r6, r6, #1
 80078d6:	3708      	adds	r7, #8
 80078d8:	e777      	b.n	80077ca <_dtoa_r+0x3ca>
 80078da:	2502      	movs	r5, #2
 80078dc:	e779      	b.n	80077d2 <_dtoa_r+0x3d2>
 80078de:	9f00      	ldr	r7, [sp, #0]
 80078e0:	9e03      	ldr	r6, [sp, #12]
 80078e2:	e794      	b.n	800780e <_dtoa_r+0x40e>
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <_dtoa_r+0x618>)
 80078e8:	4431      	add	r1, r6
 80078ea:	910d      	str	r1, [sp, #52]	; 0x34
 80078ec:	9908      	ldr	r1, [sp, #32]
 80078ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078f6:	2900      	cmp	r1, #0
 80078f8:	d043      	beq.n	8007982 <_dtoa_r+0x582>
 80078fa:	494d      	ldr	r1, [pc, #308]	; (8007a30 <_dtoa_r+0x630>)
 80078fc:	2000      	movs	r0, #0
 80078fe:	f7f8 ffc5 	bl	800088c <__aeabi_ddiv>
 8007902:	4652      	mov	r2, sl
 8007904:	465b      	mov	r3, fp
 8007906:	f7f8 fcdf 	bl	80002c8 <__aeabi_dsub>
 800790a:	9d01      	ldr	r5, [sp, #4]
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	4649      	mov	r1, r9
 8007912:	4640      	mov	r0, r8
 8007914:	f7f9 f940 	bl	8000b98 <__aeabi_d2iz>
 8007918:	4606      	mov	r6, r0
 800791a:	f7f8 fe23 	bl	8000564 <__aeabi_i2d>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f7f8 fccf 	bl	80002c8 <__aeabi_dsub>
 800792a:	3630      	adds	r6, #48	; 0x30
 800792c:	f805 6b01 	strb.w	r6, [r5], #1
 8007930:	4652      	mov	r2, sl
 8007932:	465b      	mov	r3, fp
 8007934:	4680      	mov	r8, r0
 8007936:	4689      	mov	r9, r1
 8007938:	f7f9 f8f0 	bl	8000b1c <__aeabi_dcmplt>
 800793c:	2800      	cmp	r0, #0
 800793e:	d163      	bne.n	8007a08 <_dtoa_r+0x608>
 8007940:	4642      	mov	r2, r8
 8007942:	464b      	mov	r3, r9
 8007944:	4936      	ldr	r1, [pc, #216]	; (8007a20 <_dtoa_r+0x620>)
 8007946:	2000      	movs	r0, #0
 8007948:	f7f8 fcbe 	bl	80002c8 <__aeabi_dsub>
 800794c:	4652      	mov	r2, sl
 800794e:	465b      	mov	r3, fp
 8007950:	f7f9 f8e4 	bl	8000b1c <__aeabi_dcmplt>
 8007954:	2800      	cmp	r0, #0
 8007956:	f040 80b5 	bne.w	8007ac4 <_dtoa_r+0x6c4>
 800795a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800795c:	429d      	cmp	r5, r3
 800795e:	d081      	beq.n	8007864 <_dtoa_r+0x464>
 8007960:	4b30      	ldr	r3, [pc, #192]	; (8007a24 <_dtoa_r+0x624>)
 8007962:	2200      	movs	r2, #0
 8007964:	4650      	mov	r0, sl
 8007966:	4659      	mov	r1, fp
 8007968:	f7f8 fe66 	bl	8000638 <__aeabi_dmul>
 800796c:	4b2d      	ldr	r3, [pc, #180]	; (8007a24 <_dtoa_r+0x624>)
 800796e:	4682      	mov	sl, r0
 8007970:	468b      	mov	fp, r1
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	2200      	movs	r2, #0
 8007978:	f7f8 fe5e 	bl	8000638 <__aeabi_dmul>
 800797c:	4680      	mov	r8, r0
 800797e:	4689      	mov	r9, r1
 8007980:	e7c6      	b.n	8007910 <_dtoa_r+0x510>
 8007982:	4650      	mov	r0, sl
 8007984:	4659      	mov	r1, fp
 8007986:	f7f8 fe57 	bl	8000638 <__aeabi_dmul>
 800798a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800798c:	9d01      	ldr	r5, [sp, #4]
 800798e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007990:	4682      	mov	sl, r0
 8007992:	468b      	mov	fp, r1
 8007994:	4649      	mov	r1, r9
 8007996:	4640      	mov	r0, r8
 8007998:	f7f9 f8fe 	bl	8000b98 <__aeabi_d2iz>
 800799c:	4606      	mov	r6, r0
 800799e:	f7f8 fde1 	bl	8000564 <__aeabi_i2d>
 80079a2:	3630      	adds	r6, #48	; 0x30
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4640      	mov	r0, r8
 80079aa:	4649      	mov	r1, r9
 80079ac:	f7f8 fc8c 	bl	80002c8 <__aeabi_dsub>
 80079b0:	f805 6b01 	strb.w	r6, [r5], #1
 80079b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b6:	429d      	cmp	r5, r3
 80079b8:	4680      	mov	r8, r0
 80079ba:	4689      	mov	r9, r1
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	d124      	bne.n	8007a0c <_dtoa_r+0x60c>
 80079c2:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <_dtoa_r+0x630>)
 80079c4:	4650      	mov	r0, sl
 80079c6:	4659      	mov	r1, fp
 80079c8:	f7f8 fc80 	bl	80002cc <__adddf3>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f9 f8c0 	bl	8000b58 <__aeabi_dcmpgt>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d173      	bne.n	8007ac4 <_dtoa_r+0x6c4>
 80079dc:	4652      	mov	r2, sl
 80079de:	465b      	mov	r3, fp
 80079e0:	4913      	ldr	r1, [pc, #76]	; (8007a30 <_dtoa_r+0x630>)
 80079e2:	2000      	movs	r0, #0
 80079e4:	f7f8 fc70 	bl	80002c8 <__aeabi_dsub>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4640      	mov	r0, r8
 80079ee:	4649      	mov	r1, r9
 80079f0:	f7f9 f894 	bl	8000b1c <__aeabi_dcmplt>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f43f af35 	beq.w	8007864 <_dtoa_r+0x464>
 80079fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80079fc:	1e6b      	subs	r3, r5, #1
 80079fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a04:	2b30      	cmp	r3, #48	; 0x30
 8007a06:	d0f8      	beq.n	80079fa <_dtoa_r+0x5fa>
 8007a08:	9700      	str	r7, [sp, #0]
 8007a0a:	e049      	b.n	8007aa0 <_dtoa_r+0x6a0>
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <_dtoa_r+0x624>)
 8007a0e:	f7f8 fe13 	bl	8000638 <__aeabi_dmul>
 8007a12:	4680      	mov	r8, r0
 8007a14:	4689      	mov	r9, r1
 8007a16:	e7bd      	b.n	8007994 <_dtoa_r+0x594>
 8007a18:	08009960 	.word	0x08009960
 8007a1c:	08009938 	.word	0x08009938
 8007a20:	3ff00000 	.word	0x3ff00000
 8007a24:	40240000 	.word	0x40240000
 8007a28:	401c0000 	.word	0x401c0000
 8007a2c:	40140000 	.word	0x40140000
 8007a30:	3fe00000 	.word	0x3fe00000
 8007a34:	9d01      	ldr	r5, [sp, #4]
 8007a36:	4656      	mov	r6, sl
 8007a38:	465f      	mov	r7, fp
 8007a3a:	4642      	mov	r2, r8
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	4630      	mov	r0, r6
 8007a40:	4639      	mov	r1, r7
 8007a42:	f7f8 ff23 	bl	800088c <__aeabi_ddiv>
 8007a46:	f7f9 f8a7 	bl	8000b98 <__aeabi_d2iz>
 8007a4a:	4682      	mov	sl, r0
 8007a4c:	f7f8 fd8a 	bl	8000564 <__aeabi_i2d>
 8007a50:	4642      	mov	r2, r8
 8007a52:	464b      	mov	r3, r9
 8007a54:	f7f8 fdf0 	bl	8000638 <__aeabi_dmul>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	4639      	mov	r1, r7
 8007a60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a64:	f7f8 fc30 	bl	80002c8 <__aeabi_dsub>
 8007a68:	f805 6b01 	strb.w	r6, [r5], #1
 8007a6c:	9e01      	ldr	r6, [sp, #4]
 8007a6e:	9f03      	ldr	r7, [sp, #12]
 8007a70:	1bae      	subs	r6, r5, r6
 8007a72:	42b7      	cmp	r7, r6
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	d135      	bne.n	8007ae6 <_dtoa_r+0x6e6>
 8007a7a:	f7f8 fc27 	bl	80002cc <__adddf3>
 8007a7e:	4642      	mov	r2, r8
 8007a80:	464b      	mov	r3, r9
 8007a82:	4606      	mov	r6, r0
 8007a84:	460f      	mov	r7, r1
 8007a86:	f7f9 f867 	bl	8000b58 <__aeabi_dcmpgt>
 8007a8a:	b9d0      	cbnz	r0, 8007ac2 <_dtoa_r+0x6c2>
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f9 f838 	bl	8000b08 <__aeabi_dcmpeq>
 8007a98:	b110      	cbz	r0, 8007aa0 <_dtoa_r+0x6a0>
 8007a9a:	f01a 0f01 	tst.w	sl, #1
 8007a9e:	d110      	bne.n	8007ac2 <_dtoa_r+0x6c2>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	ee18 1a10 	vmov	r1, s16
 8007aa6:	f000 faf3 	bl	8008090 <_Bfree>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9800      	ldr	r0, [sp, #0]
 8007aae:	702b      	strb	r3, [r5, #0]
 8007ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	6018      	str	r0, [r3, #0]
 8007ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f43f acf1 	beq.w	80074a0 <_dtoa_r+0xa0>
 8007abe:	601d      	str	r5, [r3, #0]
 8007ac0:	e4ee      	b.n	80074a0 <_dtoa_r+0xa0>
 8007ac2:	9f00      	ldr	r7, [sp, #0]
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007acc:	2a39      	cmp	r2, #57	; 0x39
 8007ace:	d106      	bne.n	8007ade <_dtoa_r+0x6de>
 8007ad0:	9a01      	ldr	r2, [sp, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d1f7      	bne.n	8007ac6 <_dtoa_r+0x6c6>
 8007ad6:	9901      	ldr	r1, [sp, #4]
 8007ad8:	2230      	movs	r2, #48	; 0x30
 8007ada:	3701      	adds	r7, #1
 8007adc:	700a      	strb	r2, [r1, #0]
 8007ade:	781a      	ldrb	r2, [r3, #0]
 8007ae0:	3201      	adds	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e790      	b.n	8007a08 <_dtoa_r+0x608>
 8007ae6:	4ba6      	ldr	r3, [pc, #664]	; (8007d80 <_dtoa_r+0x980>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f7f8 fda5 	bl	8000638 <__aeabi_dmul>
 8007aee:	2200      	movs	r2, #0
 8007af0:	2300      	movs	r3, #0
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	f7f9 f807 	bl	8000b08 <__aeabi_dcmpeq>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d09d      	beq.n	8007a3a <_dtoa_r+0x63a>
 8007afe:	e7cf      	b.n	8007aa0 <_dtoa_r+0x6a0>
 8007b00:	9a08      	ldr	r2, [sp, #32]
 8007b02:	2a00      	cmp	r2, #0
 8007b04:	f000 80d7 	beq.w	8007cb6 <_dtoa_r+0x8b6>
 8007b08:	9a06      	ldr	r2, [sp, #24]
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	f300 80ba 	bgt.w	8007c84 <_dtoa_r+0x884>
 8007b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	f000 80b2 	beq.w	8007c7c <_dtoa_r+0x87c>
 8007b18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b1c:	9e07      	ldr	r6, [sp, #28]
 8007b1e:	9d04      	ldr	r5, [sp, #16]
 8007b20:	9a04      	ldr	r2, [sp, #16]
 8007b22:	441a      	add	r2, r3
 8007b24:	9204      	str	r2, [sp, #16]
 8007b26:	9a05      	ldr	r2, [sp, #20]
 8007b28:	2101      	movs	r1, #1
 8007b2a:	441a      	add	r2, r3
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	9205      	str	r2, [sp, #20]
 8007b30:	f000 fb66 	bl	8008200 <__i2b>
 8007b34:	4607      	mov	r7, r0
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	dd0c      	ble.n	8007b54 <_dtoa_r+0x754>
 8007b3a:	9b05      	ldr	r3, [sp, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	dd09      	ble.n	8007b54 <_dtoa_r+0x754>
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	9a04      	ldr	r2, [sp, #16]
 8007b44:	bfa8      	it	ge
 8007b46:	462b      	movge	r3, r5
 8007b48:	1ad2      	subs	r2, r2, r3
 8007b4a:	9204      	str	r2, [sp, #16]
 8007b4c:	9a05      	ldr	r2, [sp, #20]
 8007b4e:	1aed      	subs	r5, r5, r3
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	9305      	str	r3, [sp, #20]
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	b31b      	cbz	r3, 8007ba0 <_dtoa_r+0x7a0>
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 80af 	beq.w	8007cbe <_dtoa_r+0x8be>
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	dd13      	ble.n	8007b8c <_dtoa_r+0x78c>
 8007b64:	4639      	mov	r1, r7
 8007b66:	4632      	mov	r2, r6
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fc09 	bl	8008380 <__pow5mult>
 8007b6e:	ee18 2a10 	vmov	r2, s16
 8007b72:	4601      	mov	r1, r0
 8007b74:	4607      	mov	r7, r0
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 fb58 	bl	800822c <__multiply>
 8007b7c:	ee18 1a10 	vmov	r1, s16
 8007b80:	4680      	mov	r8, r0
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 fa84 	bl	8008090 <_Bfree>
 8007b88:	ee08 8a10 	vmov	s16, r8
 8007b8c:	9b07      	ldr	r3, [sp, #28]
 8007b8e:	1b9a      	subs	r2, r3, r6
 8007b90:	d006      	beq.n	8007ba0 <_dtoa_r+0x7a0>
 8007b92:	ee18 1a10 	vmov	r1, s16
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 fbf2 	bl	8008380 <__pow5mult>
 8007b9c:	ee08 0a10 	vmov	s16, r0
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 fb2c 	bl	8008200 <__i2b>
 8007ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	4606      	mov	r6, r0
 8007bae:	f340 8088 	ble.w	8007cc2 <_dtoa_r+0x8c2>
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fbe2 	bl	8008380 <__pow5mult>
 8007bbc:	9b06      	ldr	r3, [sp, #24]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	f340 8081 	ble.w	8007cc8 <_dtoa_r+0x8c8>
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	6933      	ldr	r3, [r6, #16]
 8007bcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007bd0:	6918      	ldr	r0, [r3, #16]
 8007bd2:	f000 fac5 	bl	8008160 <__hi0bits>
 8007bd6:	f1c0 0020 	rsb	r0, r0, #32
 8007bda:	9b05      	ldr	r3, [sp, #20]
 8007bdc:	4418      	add	r0, r3
 8007bde:	f010 001f 	ands.w	r0, r0, #31
 8007be2:	f000 8092 	beq.w	8007d0a <_dtoa_r+0x90a>
 8007be6:	f1c0 0320 	rsb	r3, r0, #32
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	f340 808a 	ble.w	8007d04 <_dtoa_r+0x904>
 8007bf0:	f1c0 001c 	rsb	r0, r0, #28
 8007bf4:	9b04      	ldr	r3, [sp, #16]
 8007bf6:	4403      	add	r3, r0
 8007bf8:	9304      	str	r3, [sp, #16]
 8007bfa:	9b05      	ldr	r3, [sp, #20]
 8007bfc:	4403      	add	r3, r0
 8007bfe:	4405      	add	r5, r0
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dd07      	ble.n	8007c18 <_dtoa_r+0x818>
 8007c08:	ee18 1a10 	vmov	r1, s16
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 fc10 	bl	8008434 <__lshift>
 8007c14:	ee08 0a10 	vmov	s16, r0
 8007c18:	9b05      	ldr	r3, [sp, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dd05      	ble.n	8007c2a <_dtoa_r+0x82a>
 8007c1e:	4631      	mov	r1, r6
 8007c20:	461a      	mov	r2, r3
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 fc06 	bl	8008434 <__lshift>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d06e      	beq.n	8007d0e <_dtoa_r+0x90e>
 8007c30:	ee18 0a10 	vmov	r0, s16
 8007c34:	4631      	mov	r1, r6
 8007c36:	f000 fc6d 	bl	8008514 <__mcmp>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	da67      	bge.n	8007d0e <_dtoa_r+0x90e>
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	ee18 1a10 	vmov	r1, s16
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	220a      	movs	r2, #10
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fa41 	bl	80080d4 <__multadd>
 8007c52:	9b08      	ldr	r3, [sp, #32]
 8007c54:	ee08 0a10 	vmov	s16, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 81b1 	beq.w	8007fc0 <_dtoa_r+0xbc0>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4639      	mov	r1, r7
 8007c62:	220a      	movs	r2, #10
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fa35 	bl	80080d4 <__multadd>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	4607      	mov	r7, r0
 8007c70:	f300 808e 	bgt.w	8007d90 <_dtoa_r+0x990>
 8007c74:	9b06      	ldr	r3, [sp, #24]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	dc51      	bgt.n	8007d1e <_dtoa_r+0x91e>
 8007c7a:	e089      	b.n	8007d90 <_dtoa_r+0x990>
 8007c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c82:	e74b      	b.n	8007b1c <_dtoa_r+0x71c>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	1e5e      	subs	r6, r3, #1
 8007c88:	9b07      	ldr	r3, [sp, #28]
 8007c8a:	42b3      	cmp	r3, r6
 8007c8c:	bfbf      	itttt	lt
 8007c8e:	9b07      	ldrlt	r3, [sp, #28]
 8007c90:	9607      	strlt	r6, [sp, #28]
 8007c92:	1af2      	sublt	r2, r6, r3
 8007c94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c96:	bfb6      	itet	lt
 8007c98:	189b      	addlt	r3, r3, r2
 8007c9a:	1b9e      	subge	r6, r3, r6
 8007c9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	bfb8      	it	lt
 8007ca2:	2600      	movlt	r6, #0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfb7      	itett	lt
 8007ca8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007cac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007cb0:	1a9d      	sublt	r5, r3, r2
 8007cb2:	2300      	movlt	r3, #0
 8007cb4:	e734      	b.n	8007b20 <_dtoa_r+0x720>
 8007cb6:	9e07      	ldr	r6, [sp, #28]
 8007cb8:	9d04      	ldr	r5, [sp, #16]
 8007cba:	9f08      	ldr	r7, [sp, #32]
 8007cbc:	e73b      	b.n	8007b36 <_dtoa_r+0x736>
 8007cbe:	9a07      	ldr	r2, [sp, #28]
 8007cc0:	e767      	b.n	8007b92 <_dtoa_r+0x792>
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	dc18      	bgt.n	8007cfa <_dtoa_r+0x8fa>
 8007cc8:	f1ba 0f00 	cmp.w	sl, #0
 8007ccc:	d115      	bne.n	8007cfa <_dtoa_r+0x8fa>
 8007cce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cd2:	b993      	cbnz	r3, 8007cfa <_dtoa_r+0x8fa>
 8007cd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cd8:	0d1b      	lsrs	r3, r3, #20
 8007cda:	051b      	lsls	r3, r3, #20
 8007cdc:	b183      	cbz	r3, 8007d00 <_dtoa_r+0x900>
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	9b05      	ldr	r3, [sp, #20]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	f04f 0801 	mov.w	r8, #1
 8007cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f47f af6a 	bne.w	8007bca <_dtoa_r+0x7ca>
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	e76f      	b.n	8007bda <_dtoa_r+0x7da>
 8007cfa:	f04f 0800 	mov.w	r8, #0
 8007cfe:	e7f6      	b.n	8007cee <_dtoa_r+0x8ee>
 8007d00:	4698      	mov	r8, r3
 8007d02:	e7f4      	b.n	8007cee <_dtoa_r+0x8ee>
 8007d04:	f43f af7d 	beq.w	8007c02 <_dtoa_r+0x802>
 8007d08:	4618      	mov	r0, r3
 8007d0a:	301c      	adds	r0, #28
 8007d0c:	e772      	b.n	8007bf4 <_dtoa_r+0x7f4>
 8007d0e:	9b03      	ldr	r3, [sp, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	dc37      	bgt.n	8007d84 <_dtoa_r+0x984>
 8007d14:	9b06      	ldr	r3, [sp, #24]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	dd34      	ble.n	8007d84 <_dtoa_r+0x984>
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	9302      	str	r3, [sp, #8]
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	b96b      	cbnz	r3, 8007d3e <_dtoa_r+0x93e>
 8007d22:	4631      	mov	r1, r6
 8007d24:	2205      	movs	r2, #5
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 f9d4 	bl	80080d4 <__multadd>
 8007d2c:	4601      	mov	r1, r0
 8007d2e:	4606      	mov	r6, r0
 8007d30:	ee18 0a10 	vmov	r0, s16
 8007d34:	f000 fbee 	bl	8008514 <__mcmp>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f73f adbb 	bgt.w	80078b4 <_dtoa_r+0x4b4>
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	9d01      	ldr	r5, [sp, #4]
 8007d42:	43db      	mvns	r3, r3
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	f04f 0800 	mov.w	r8, #0
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f000 f99f 	bl	8008090 <_Bfree>
 8007d52:	2f00      	cmp	r7, #0
 8007d54:	f43f aea4 	beq.w	8007aa0 <_dtoa_r+0x6a0>
 8007d58:	f1b8 0f00 	cmp.w	r8, #0
 8007d5c:	d005      	beq.n	8007d6a <_dtoa_r+0x96a>
 8007d5e:	45b8      	cmp	r8, r7
 8007d60:	d003      	beq.n	8007d6a <_dtoa_r+0x96a>
 8007d62:	4641      	mov	r1, r8
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 f993 	bl	8008090 <_Bfree>
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 f98f 	bl	8008090 <_Bfree>
 8007d72:	e695      	b.n	8007aa0 <_dtoa_r+0x6a0>
 8007d74:	2600      	movs	r6, #0
 8007d76:	4637      	mov	r7, r6
 8007d78:	e7e1      	b.n	8007d3e <_dtoa_r+0x93e>
 8007d7a:	9700      	str	r7, [sp, #0]
 8007d7c:	4637      	mov	r7, r6
 8007d7e:	e599      	b.n	80078b4 <_dtoa_r+0x4b4>
 8007d80:	40240000 	.word	0x40240000
 8007d84:	9b08      	ldr	r3, [sp, #32]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80ca 	beq.w	8007f20 <_dtoa_r+0xb20>
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	9302      	str	r3, [sp, #8]
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	dd05      	ble.n	8007da0 <_dtoa_r+0x9a0>
 8007d94:	4639      	mov	r1, r7
 8007d96:	462a      	mov	r2, r5
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 fb4b 	bl	8008434 <__lshift>
 8007d9e:	4607      	mov	r7, r0
 8007da0:	f1b8 0f00 	cmp.w	r8, #0
 8007da4:	d05b      	beq.n	8007e5e <_dtoa_r+0xa5e>
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 f931 	bl	8008010 <_Balloc>
 8007dae:	4605      	mov	r5, r0
 8007db0:	b928      	cbnz	r0, 8007dbe <_dtoa_r+0x9be>
 8007db2:	4b87      	ldr	r3, [pc, #540]	; (8007fd0 <_dtoa_r+0xbd0>)
 8007db4:	4602      	mov	r2, r0
 8007db6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007dba:	f7ff bb3b 	b.w	8007434 <_dtoa_r+0x34>
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	3202      	adds	r2, #2
 8007dc2:	0092      	lsls	r2, r2, #2
 8007dc4:	f107 010c 	add.w	r1, r7, #12
 8007dc8:	300c      	adds	r0, #12
 8007dca:	f000 f913 	bl	8007ff4 <memcpy>
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fb2e 	bl	8008434 <__lshift>
 8007dd8:	9b01      	ldr	r3, [sp, #4]
 8007dda:	f103 0901 	add.w	r9, r3, #1
 8007dde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007de2:	4413      	add	r3, r2
 8007de4:	9305      	str	r3, [sp, #20]
 8007de6:	f00a 0301 	and.w	r3, sl, #1
 8007dea:	46b8      	mov	r8, r7
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	4607      	mov	r7, r0
 8007df0:	4631      	mov	r1, r6
 8007df2:	ee18 0a10 	vmov	r0, s16
 8007df6:	f7ff fa77 	bl	80072e8 <quorem>
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	9002      	str	r0, [sp, #8]
 8007dfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e02:	ee18 0a10 	vmov	r0, s16
 8007e06:	f000 fb85 	bl	8008514 <__mcmp>
 8007e0a:	463a      	mov	r2, r7
 8007e0c:	9003      	str	r0, [sp, #12]
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fb9b 	bl	800854c <__mdiff>
 8007e16:	68c2      	ldr	r2, [r0, #12]
 8007e18:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	bb02      	cbnz	r2, 8007e62 <_dtoa_r+0xa62>
 8007e20:	4601      	mov	r1, r0
 8007e22:	ee18 0a10 	vmov	r0, s16
 8007e26:	f000 fb75 	bl	8008514 <__mcmp>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	9207      	str	r2, [sp, #28]
 8007e32:	f000 f92d 	bl	8008090 <_Bfree>
 8007e36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e3a:	ea43 0102 	orr.w	r1, r3, r2
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	464d      	mov	r5, r9
 8007e44:	d10f      	bne.n	8007e66 <_dtoa_r+0xa66>
 8007e46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e4a:	d02a      	beq.n	8007ea2 <_dtoa_r+0xaa2>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dd02      	ble.n	8007e58 <_dtoa_r+0xa58>
 8007e52:	9b02      	ldr	r3, [sp, #8]
 8007e54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e58:	f88b a000 	strb.w	sl, [fp]
 8007e5c:	e775      	b.n	8007d4a <_dtoa_r+0x94a>
 8007e5e:	4638      	mov	r0, r7
 8007e60:	e7ba      	b.n	8007dd8 <_dtoa_r+0x9d8>
 8007e62:	2201      	movs	r2, #1
 8007e64:	e7e2      	b.n	8007e2c <_dtoa_r+0xa2c>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	db04      	blt.n	8007e76 <_dtoa_r+0xa76>
 8007e6c:	9906      	ldr	r1, [sp, #24]
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	9904      	ldr	r1, [sp, #16]
 8007e72:	430b      	orrs	r3, r1
 8007e74:	d122      	bne.n	8007ebc <_dtoa_r+0xabc>
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	ddee      	ble.n	8007e58 <_dtoa_r+0xa58>
 8007e7a:	ee18 1a10 	vmov	r1, s16
 8007e7e:	2201      	movs	r2, #1
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fad7 	bl	8008434 <__lshift>
 8007e86:	4631      	mov	r1, r6
 8007e88:	ee08 0a10 	vmov	s16, r0
 8007e8c:	f000 fb42 	bl	8008514 <__mcmp>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	dc03      	bgt.n	8007e9c <_dtoa_r+0xa9c>
 8007e94:	d1e0      	bne.n	8007e58 <_dtoa_r+0xa58>
 8007e96:	f01a 0f01 	tst.w	sl, #1
 8007e9a:	d0dd      	beq.n	8007e58 <_dtoa_r+0xa58>
 8007e9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ea0:	d1d7      	bne.n	8007e52 <_dtoa_r+0xa52>
 8007ea2:	2339      	movs	r3, #57	; 0x39
 8007ea4:	f88b 3000 	strb.w	r3, [fp]
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	461d      	mov	r5, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eb2:	2a39      	cmp	r2, #57	; 0x39
 8007eb4:	d071      	beq.n	8007f9a <_dtoa_r+0xb9a>
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	701a      	strb	r2, [r3, #0]
 8007eba:	e746      	b.n	8007d4a <_dtoa_r+0x94a>
 8007ebc:	2a00      	cmp	r2, #0
 8007ebe:	dd07      	ble.n	8007ed0 <_dtoa_r+0xad0>
 8007ec0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ec4:	d0ed      	beq.n	8007ea2 <_dtoa_r+0xaa2>
 8007ec6:	f10a 0301 	add.w	r3, sl, #1
 8007eca:	f88b 3000 	strb.w	r3, [fp]
 8007ece:	e73c      	b.n	8007d4a <_dtoa_r+0x94a>
 8007ed0:	9b05      	ldr	r3, [sp, #20]
 8007ed2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ed6:	4599      	cmp	r9, r3
 8007ed8:	d047      	beq.n	8007f6a <_dtoa_r+0xb6a>
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	2300      	movs	r3, #0
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 f8f6 	bl	80080d4 <__multadd>
 8007ee8:	45b8      	cmp	r8, r7
 8007eea:	ee08 0a10 	vmov	s16, r0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	f04f 020a 	mov.w	r2, #10
 8007ef6:	4641      	mov	r1, r8
 8007ef8:	4620      	mov	r0, r4
 8007efa:	d106      	bne.n	8007f0a <_dtoa_r+0xb0a>
 8007efc:	f000 f8ea 	bl	80080d4 <__multadd>
 8007f00:	4680      	mov	r8, r0
 8007f02:	4607      	mov	r7, r0
 8007f04:	f109 0901 	add.w	r9, r9, #1
 8007f08:	e772      	b.n	8007df0 <_dtoa_r+0x9f0>
 8007f0a:	f000 f8e3 	bl	80080d4 <__multadd>
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4680      	mov	r8, r0
 8007f12:	2300      	movs	r3, #0
 8007f14:	220a      	movs	r2, #10
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 f8dc 	bl	80080d4 <__multadd>
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	e7f1      	b.n	8007f04 <_dtoa_r+0xb04>
 8007f20:	9b03      	ldr	r3, [sp, #12]
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	9d01      	ldr	r5, [sp, #4]
 8007f26:	ee18 0a10 	vmov	r0, s16
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	f7ff f9dc 	bl	80072e8 <quorem>
 8007f30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f34:	9b01      	ldr	r3, [sp, #4]
 8007f36:	f805 ab01 	strb.w	sl, [r5], #1
 8007f3a:	1aea      	subs	r2, r5, r3
 8007f3c:	9b02      	ldr	r3, [sp, #8]
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	dd09      	ble.n	8007f56 <_dtoa_r+0xb56>
 8007f42:	ee18 1a10 	vmov	r1, s16
 8007f46:	2300      	movs	r3, #0
 8007f48:	220a      	movs	r2, #10
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f8c2 	bl	80080d4 <__multadd>
 8007f50:	ee08 0a10 	vmov	s16, r0
 8007f54:	e7e7      	b.n	8007f26 <_dtoa_r+0xb26>
 8007f56:	9b02      	ldr	r3, [sp, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bfc8      	it	gt
 8007f5c:	461d      	movgt	r5, r3
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	bfd8      	it	le
 8007f62:	2501      	movle	r5, #1
 8007f64:	441d      	add	r5, r3
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	ee18 1a10 	vmov	r1, s16
 8007f6e:	2201      	movs	r2, #1
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fa5f 	bl	8008434 <__lshift>
 8007f76:	4631      	mov	r1, r6
 8007f78:	ee08 0a10 	vmov	s16, r0
 8007f7c:	f000 faca 	bl	8008514 <__mcmp>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	dc91      	bgt.n	8007ea8 <_dtoa_r+0xaa8>
 8007f84:	d102      	bne.n	8007f8c <_dtoa_r+0xb8c>
 8007f86:	f01a 0f01 	tst.w	sl, #1
 8007f8a:	d18d      	bne.n	8007ea8 <_dtoa_r+0xaa8>
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	461d      	mov	r5, r3
 8007f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f94:	2a30      	cmp	r2, #48	; 0x30
 8007f96:	d0fa      	beq.n	8007f8e <_dtoa_r+0xb8e>
 8007f98:	e6d7      	b.n	8007d4a <_dtoa_r+0x94a>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d184      	bne.n	8007eaa <_dtoa_r+0xaaa>
 8007fa0:	9b00      	ldr	r3, [sp, #0]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2331      	movs	r3, #49	; 0x31
 8007fa8:	7013      	strb	r3, [r2, #0]
 8007faa:	e6ce      	b.n	8007d4a <_dtoa_r+0x94a>
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <_dtoa_r+0xbd4>)
 8007fae:	f7ff ba95 	b.w	80074dc <_dtoa_r+0xdc>
 8007fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f47f aa6e 	bne.w	8007496 <_dtoa_r+0x96>
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <_dtoa_r+0xbd8>)
 8007fbc:	f7ff ba8e 	b.w	80074dc <_dtoa_r+0xdc>
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dcae      	bgt.n	8007f24 <_dtoa_r+0xb24>
 8007fc6:	9b06      	ldr	r3, [sp, #24]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	f73f aea8 	bgt.w	8007d1e <_dtoa_r+0x91e>
 8007fce:	e7a9      	b.n	8007f24 <_dtoa_r+0xb24>
 8007fd0:	080098cb 	.word	0x080098cb
 8007fd4:	08009828 	.word	0x08009828
 8007fd8:	0800984c 	.word	0x0800984c

08007fdc <_localeconv_r>:
 8007fdc:	4800      	ldr	r0, [pc, #0]	; (8007fe0 <_localeconv_r+0x4>)
 8007fde:	4770      	bx	lr
 8007fe0:	20000160 	.word	0x20000160

08007fe4 <malloc>:
 8007fe4:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <malloc+0xc>)
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f000 bc17 	b.w	800881c <_malloc_r>
 8007fee:	bf00      	nop
 8007ff0:	2000000c 	.word	0x2000000c

08007ff4 <memcpy>:
 8007ff4:	440a      	add	r2, r1
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ffc:	d100      	bne.n	8008000 <memcpy+0xc>
 8007ffe:	4770      	bx	lr
 8008000:	b510      	push	{r4, lr}
 8008002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800a:	4291      	cmp	r1, r2
 800800c:	d1f9      	bne.n	8008002 <memcpy+0xe>
 800800e:	bd10      	pop	{r4, pc}

08008010 <_Balloc>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	b976      	cbnz	r6, 8008038 <_Balloc+0x28>
 800801a:	2010      	movs	r0, #16
 800801c:	f7ff ffe2 	bl	8007fe4 <malloc>
 8008020:	4602      	mov	r2, r0
 8008022:	6260      	str	r0, [r4, #36]	; 0x24
 8008024:	b920      	cbnz	r0, 8008030 <_Balloc+0x20>
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <_Balloc+0x78>)
 8008028:	4818      	ldr	r0, [pc, #96]	; (800808c <_Balloc+0x7c>)
 800802a:	2166      	movs	r1, #102	; 0x66
 800802c:	f000 fdd6 	bl	8008bdc <__assert_func>
 8008030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008034:	6006      	str	r6, [r0, #0]
 8008036:	60c6      	str	r6, [r0, #12]
 8008038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800803a:	68f3      	ldr	r3, [r6, #12]
 800803c:	b183      	cbz	r3, 8008060 <_Balloc+0x50>
 800803e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008046:	b9b8      	cbnz	r0, 8008078 <_Balloc+0x68>
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f605 	lsl.w	r6, r1, r5
 800804e:	1d72      	adds	r2, r6, #5
 8008050:	0092      	lsls	r2, r2, #2
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fb60 	bl	8008718 <_calloc_r>
 8008058:	b160      	cbz	r0, 8008074 <_Balloc+0x64>
 800805a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800805e:	e00e      	b.n	800807e <_Balloc+0x6e>
 8008060:	2221      	movs	r2, #33	; 0x21
 8008062:	2104      	movs	r1, #4
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fb57 	bl	8008718 <_calloc_r>
 800806a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800806c:	60f0      	str	r0, [r6, #12]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e4      	bne.n	800803e <_Balloc+0x2e>
 8008074:	2000      	movs	r0, #0
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	6802      	ldr	r2, [r0, #0]
 800807a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800807e:	2300      	movs	r3, #0
 8008080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008084:	e7f7      	b.n	8008076 <_Balloc+0x66>
 8008086:	bf00      	nop
 8008088:	08009859 	.word	0x08009859
 800808c:	080098dc 	.word	0x080098dc

08008090 <_Bfree>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	b976      	cbnz	r6, 80080b8 <_Bfree+0x28>
 800809a:	2010      	movs	r0, #16
 800809c:	f7ff ffa2 	bl	8007fe4 <malloc>
 80080a0:	4602      	mov	r2, r0
 80080a2:	6268      	str	r0, [r5, #36]	; 0x24
 80080a4:	b920      	cbnz	r0, 80080b0 <_Bfree+0x20>
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <_Bfree+0x3c>)
 80080a8:	4809      	ldr	r0, [pc, #36]	; (80080d0 <_Bfree+0x40>)
 80080aa:	218a      	movs	r1, #138	; 0x8a
 80080ac:	f000 fd96 	bl	8008bdc <__assert_func>
 80080b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b4:	6006      	str	r6, [r0, #0]
 80080b6:	60c6      	str	r6, [r0, #12]
 80080b8:	b13c      	cbz	r4, 80080ca <_Bfree+0x3a>
 80080ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080bc:	6862      	ldr	r2, [r4, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080c4:	6021      	str	r1, [r4, #0]
 80080c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	08009859 	.word	0x08009859
 80080d0:	080098dc 	.word	0x080098dc

080080d4 <__multadd>:
 80080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	690d      	ldr	r5, [r1, #16]
 80080da:	4607      	mov	r7, r0
 80080dc:	460c      	mov	r4, r1
 80080de:	461e      	mov	r6, r3
 80080e0:	f101 0c14 	add.w	ip, r1, #20
 80080e4:	2000      	movs	r0, #0
 80080e6:	f8dc 3000 	ldr.w	r3, [ip]
 80080ea:	b299      	uxth	r1, r3
 80080ec:	fb02 6101 	mla	r1, r2, r1, r6
 80080f0:	0c1e      	lsrs	r6, r3, #16
 80080f2:	0c0b      	lsrs	r3, r1, #16
 80080f4:	fb02 3306 	mla	r3, r2, r6, r3
 80080f8:	b289      	uxth	r1, r1
 80080fa:	3001      	adds	r0, #1
 80080fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008100:	4285      	cmp	r5, r0
 8008102:	f84c 1b04 	str.w	r1, [ip], #4
 8008106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800810a:	dcec      	bgt.n	80080e6 <__multadd+0x12>
 800810c:	b30e      	cbz	r6, 8008152 <__multadd+0x7e>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	42ab      	cmp	r3, r5
 8008112:	dc19      	bgt.n	8008148 <__multadd+0x74>
 8008114:	6861      	ldr	r1, [r4, #4]
 8008116:	4638      	mov	r0, r7
 8008118:	3101      	adds	r1, #1
 800811a:	f7ff ff79 	bl	8008010 <_Balloc>
 800811e:	4680      	mov	r8, r0
 8008120:	b928      	cbnz	r0, 800812e <__multadd+0x5a>
 8008122:	4602      	mov	r2, r0
 8008124:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <__multadd+0x84>)
 8008126:	480d      	ldr	r0, [pc, #52]	; (800815c <__multadd+0x88>)
 8008128:	21b5      	movs	r1, #181	; 0xb5
 800812a:	f000 fd57 	bl	8008bdc <__assert_func>
 800812e:	6922      	ldr	r2, [r4, #16]
 8008130:	3202      	adds	r2, #2
 8008132:	f104 010c 	add.w	r1, r4, #12
 8008136:	0092      	lsls	r2, r2, #2
 8008138:	300c      	adds	r0, #12
 800813a:	f7ff ff5b 	bl	8007ff4 <memcpy>
 800813e:	4621      	mov	r1, r4
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ffa5 	bl	8008090 <_Bfree>
 8008146:	4644      	mov	r4, r8
 8008148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800814c:	3501      	adds	r5, #1
 800814e:	615e      	str	r6, [r3, #20]
 8008150:	6125      	str	r5, [r4, #16]
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	080098cb 	.word	0x080098cb
 800815c:	080098dc 	.word	0x080098dc

08008160 <__hi0bits>:
 8008160:	0c03      	lsrs	r3, r0, #16
 8008162:	041b      	lsls	r3, r3, #16
 8008164:	b9d3      	cbnz	r3, 800819c <__hi0bits+0x3c>
 8008166:	0400      	lsls	r0, r0, #16
 8008168:	2310      	movs	r3, #16
 800816a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800816e:	bf04      	itt	eq
 8008170:	0200      	lsleq	r0, r0, #8
 8008172:	3308      	addeq	r3, #8
 8008174:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008178:	bf04      	itt	eq
 800817a:	0100      	lsleq	r0, r0, #4
 800817c:	3304      	addeq	r3, #4
 800817e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008182:	bf04      	itt	eq
 8008184:	0080      	lsleq	r0, r0, #2
 8008186:	3302      	addeq	r3, #2
 8008188:	2800      	cmp	r0, #0
 800818a:	db05      	blt.n	8008198 <__hi0bits+0x38>
 800818c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008190:	f103 0301 	add.w	r3, r3, #1
 8008194:	bf08      	it	eq
 8008196:	2320      	moveq	r3, #32
 8008198:	4618      	mov	r0, r3
 800819a:	4770      	bx	lr
 800819c:	2300      	movs	r3, #0
 800819e:	e7e4      	b.n	800816a <__hi0bits+0xa>

080081a0 <__lo0bits>:
 80081a0:	6803      	ldr	r3, [r0, #0]
 80081a2:	f013 0207 	ands.w	r2, r3, #7
 80081a6:	4601      	mov	r1, r0
 80081a8:	d00b      	beq.n	80081c2 <__lo0bits+0x22>
 80081aa:	07da      	lsls	r2, r3, #31
 80081ac:	d423      	bmi.n	80081f6 <__lo0bits+0x56>
 80081ae:	0798      	lsls	r0, r3, #30
 80081b0:	bf49      	itett	mi
 80081b2:	085b      	lsrmi	r3, r3, #1
 80081b4:	089b      	lsrpl	r3, r3, #2
 80081b6:	2001      	movmi	r0, #1
 80081b8:	600b      	strmi	r3, [r1, #0]
 80081ba:	bf5c      	itt	pl
 80081bc:	600b      	strpl	r3, [r1, #0]
 80081be:	2002      	movpl	r0, #2
 80081c0:	4770      	bx	lr
 80081c2:	b298      	uxth	r0, r3
 80081c4:	b9a8      	cbnz	r0, 80081f2 <__lo0bits+0x52>
 80081c6:	0c1b      	lsrs	r3, r3, #16
 80081c8:	2010      	movs	r0, #16
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	b90a      	cbnz	r2, 80081d2 <__lo0bits+0x32>
 80081ce:	3008      	adds	r0, #8
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	071a      	lsls	r2, r3, #28
 80081d4:	bf04      	itt	eq
 80081d6:	091b      	lsreq	r3, r3, #4
 80081d8:	3004      	addeq	r0, #4
 80081da:	079a      	lsls	r2, r3, #30
 80081dc:	bf04      	itt	eq
 80081de:	089b      	lsreq	r3, r3, #2
 80081e0:	3002      	addeq	r0, #2
 80081e2:	07da      	lsls	r2, r3, #31
 80081e4:	d403      	bmi.n	80081ee <__lo0bits+0x4e>
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	f100 0001 	add.w	r0, r0, #1
 80081ec:	d005      	beq.n	80081fa <__lo0bits+0x5a>
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	4770      	bx	lr
 80081f2:	4610      	mov	r0, r2
 80081f4:	e7e9      	b.n	80081ca <__lo0bits+0x2a>
 80081f6:	2000      	movs	r0, #0
 80081f8:	4770      	bx	lr
 80081fa:	2020      	movs	r0, #32
 80081fc:	4770      	bx	lr
	...

08008200 <__i2b>:
 8008200:	b510      	push	{r4, lr}
 8008202:	460c      	mov	r4, r1
 8008204:	2101      	movs	r1, #1
 8008206:	f7ff ff03 	bl	8008010 <_Balloc>
 800820a:	4602      	mov	r2, r0
 800820c:	b928      	cbnz	r0, 800821a <__i2b+0x1a>
 800820e:	4b05      	ldr	r3, [pc, #20]	; (8008224 <__i2b+0x24>)
 8008210:	4805      	ldr	r0, [pc, #20]	; (8008228 <__i2b+0x28>)
 8008212:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008216:	f000 fce1 	bl	8008bdc <__assert_func>
 800821a:	2301      	movs	r3, #1
 800821c:	6144      	str	r4, [r0, #20]
 800821e:	6103      	str	r3, [r0, #16]
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	080098cb 	.word	0x080098cb
 8008228:	080098dc 	.word	0x080098dc

0800822c <__multiply>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4691      	mov	r9, r2
 8008232:	690a      	ldr	r2, [r1, #16]
 8008234:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008238:	429a      	cmp	r2, r3
 800823a:	bfb8      	it	lt
 800823c:	460b      	movlt	r3, r1
 800823e:	460c      	mov	r4, r1
 8008240:	bfbc      	itt	lt
 8008242:	464c      	movlt	r4, r9
 8008244:	4699      	movlt	r9, r3
 8008246:	6927      	ldr	r7, [r4, #16]
 8008248:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	6861      	ldr	r1, [r4, #4]
 8008250:	eb07 060a 	add.w	r6, r7, sl
 8008254:	42b3      	cmp	r3, r6
 8008256:	b085      	sub	sp, #20
 8008258:	bfb8      	it	lt
 800825a:	3101      	addlt	r1, #1
 800825c:	f7ff fed8 	bl	8008010 <_Balloc>
 8008260:	b930      	cbnz	r0, 8008270 <__multiply+0x44>
 8008262:	4602      	mov	r2, r0
 8008264:	4b44      	ldr	r3, [pc, #272]	; (8008378 <__multiply+0x14c>)
 8008266:	4845      	ldr	r0, [pc, #276]	; (800837c <__multiply+0x150>)
 8008268:	f240 115d 	movw	r1, #349	; 0x15d
 800826c:	f000 fcb6 	bl	8008bdc <__assert_func>
 8008270:	f100 0514 	add.w	r5, r0, #20
 8008274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008278:	462b      	mov	r3, r5
 800827a:	2200      	movs	r2, #0
 800827c:	4543      	cmp	r3, r8
 800827e:	d321      	bcc.n	80082c4 <__multiply+0x98>
 8008280:	f104 0314 	add.w	r3, r4, #20
 8008284:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008288:	f109 0314 	add.w	r3, r9, #20
 800828c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008290:	9202      	str	r2, [sp, #8]
 8008292:	1b3a      	subs	r2, r7, r4
 8008294:	3a15      	subs	r2, #21
 8008296:	f022 0203 	bic.w	r2, r2, #3
 800829a:	3204      	adds	r2, #4
 800829c:	f104 0115 	add.w	r1, r4, #21
 80082a0:	428f      	cmp	r7, r1
 80082a2:	bf38      	it	cc
 80082a4:	2204      	movcc	r2, #4
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9a02      	ldr	r2, [sp, #8]
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d80c      	bhi.n	80082ca <__multiply+0x9e>
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	dd03      	ble.n	80082bc <__multiply+0x90>
 80082b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05a      	beq.n	8008372 <__multiply+0x146>
 80082bc:	6106      	str	r6, [r0, #16]
 80082be:	b005      	add	sp, #20
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	f843 2b04 	str.w	r2, [r3], #4
 80082c8:	e7d8      	b.n	800827c <__multiply+0x50>
 80082ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80082ce:	f1ba 0f00 	cmp.w	sl, #0
 80082d2:	d024      	beq.n	800831e <__multiply+0xf2>
 80082d4:	f104 0e14 	add.w	lr, r4, #20
 80082d8:	46a9      	mov	r9, r5
 80082da:	f04f 0c00 	mov.w	ip, #0
 80082de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082e2:	f8d9 1000 	ldr.w	r1, [r9]
 80082e6:	fa1f fb82 	uxth.w	fp, r2
 80082ea:	b289      	uxth	r1, r1
 80082ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80082f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082f4:	f8d9 2000 	ldr.w	r2, [r9]
 80082f8:	4461      	add	r1, ip
 80082fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008302:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008306:	b289      	uxth	r1, r1
 8008308:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800830c:	4577      	cmp	r7, lr
 800830e:	f849 1b04 	str.w	r1, [r9], #4
 8008312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008316:	d8e2      	bhi.n	80082de <__multiply+0xb2>
 8008318:	9a01      	ldr	r2, [sp, #4]
 800831a:	f845 c002 	str.w	ip, [r5, r2]
 800831e:	9a03      	ldr	r2, [sp, #12]
 8008320:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008324:	3304      	adds	r3, #4
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	d020      	beq.n	800836e <__multiply+0x142>
 800832c:	6829      	ldr	r1, [r5, #0]
 800832e:	f104 0c14 	add.w	ip, r4, #20
 8008332:	46ae      	mov	lr, r5
 8008334:	f04f 0a00 	mov.w	sl, #0
 8008338:	f8bc b000 	ldrh.w	fp, [ip]
 800833c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008340:	fb09 220b 	mla	r2, r9, fp, r2
 8008344:	4492      	add	sl, r2
 8008346:	b289      	uxth	r1, r1
 8008348:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800834c:	f84e 1b04 	str.w	r1, [lr], #4
 8008350:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008354:	f8be 1000 	ldrh.w	r1, [lr]
 8008358:	0c12      	lsrs	r2, r2, #16
 800835a:	fb09 1102 	mla	r1, r9, r2, r1
 800835e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008362:	4567      	cmp	r7, ip
 8008364:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008368:	d8e6      	bhi.n	8008338 <__multiply+0x10c>
 800836a:	9a01      	ldr	r2, [sp, #4]
 800836c:	50a9      	str	r1, [r5, r2]
 800836e:	3504      	adds	r5, #4
 8008370:	e79a      	b.n	80082a8 <__multiply+0x7c>
 8008372:	3e01      	subs	r6, #1
 8008374:	e79c      	b.n	80082b0 <__multiply+0x84>
 8008376:	bf00      	nop
 8008378:	080098cb 	.word	0x080098cb
 800837c:	080098dc 	.word	0x080098dc

08008380 <__pow5mult>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4615      	mov	r5, r2
 8008386:	f012 0203 	ands.w	r2, r2, #3
 800838a:	4606      	mov	r6, r0
 800838c:	460f      	mov	r7, r1
 800838e:	d007      	beq.n	80083a0 <__pow5mult+0x20>
 8008390:	4c25      	ldr	r4, [pc, #148]	; (8008428 <__pow5mult+0xa8>)
 8008392:	3a01      	subs	r2, #1
 8008394:	2300      	movs	r3, #0
 8008396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800839a:	f7ff fe9b 	bl	80080d4 <__multadd>
 800839e:	4607      	mov	r7, r0
 80083a0:	10ad      	asrs	r5, r5, #2
 80083a2:	d03d      	beq.n	8008420 <__pow5mult+0xa0>
 80083a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083a6:	b97c      	cbnz	r4, 80083c8 <__pow5mult+0x48>
 80083a8:	2010      	movs	r0, #16
 80083aa:	f7ff fe1b 	bl	8007fe4 <malloc>
 80083ae:	4602      	mov	r2, r0
 80083b0:	6270      	str	r0, [r6, #36]	; 0x24
 80083b2:	b928      	cbnz	r0, 80083c0 <__pow5mult+0x40>
 80083b4:	4b1d      	ldr	r3, [pc, #116]	; (800842c <__pow5mult+0xac>)
 80083b6:	481e      	ldr	r0, [pc, #120]	; (8008430 <__pow5mult+0xb0>)
 80083b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083bc:	f000 fc0e 	bl	8008bdc <__assert_func>
 80083c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c4:	6004      	str	r4, [r0, #0]
 80083c6:	60c4      	str	r4, [r0, #12]
 80083c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d0:	b94c      	cbnz	r4, 80083e6 <__pow5mult+0x66>
 80083d2:	f240 2171 	movw	r1, #625	; 0x271
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7ff ff12 	bl	8008200 <__i2b>
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c8 0008 	str.w	r0, [r8, #8]
 80083e2:	4604      	mov	r4, r0
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	07eb      	lsls	r3, r5, #31
 80083ec:	d50a      	bpl.n	8008404 <__pow5mult+0x84>
 80083ee:	4639      	mov	r1, r7
 80083f0:	4622      	mov	r2, r4
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ff1a 	bl	800822c <__multiply>
 80083f8:	4639      	mov	r1, r7
 80083fa:	4680      	mov	r8, r0
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7ff fe47 	bl	8008090 <_Bfree>
 8008402:	4647      	mov	r7, r8
 8008404:	106d      	asrs	r5, r5, #1
 8008406:	d00b      	beq.n	8008420 <__pow5mult+0xa0>
 8008408:	6820      	ldr	r0, [r4, #0]
 800840a:	b938      	cbnz	r0, 800841c <__pow5mult+0x9c>
 800840c:	4622      	mov	r2, r4
 800840e:	4621      	mov	r1, r4
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff ff0b 	bl	800822c <__multiply>
 8008416:	6020      	str	r0, [r4, #0]
 8008418:	f8c0 9000 	str.w	r9, [r0]
 800841c:	4604      	mov	r4, r0
 800841e:	e7e4      	b.n	80083ea <__pow5mult+0x6a>
 8008420:	4638      	mov	r0, r7
 8008422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008426:	bf00      	nop
 8008428:	08009a28 	.word	0x08009a28
 800842c:	08009859 	.word	0x08009859
 8008430:	080098dc 	.word	0x080098dc

08008434 <__lshift>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	460c      	mov	r4, r1
 800843a:	6849      	ldr	r1, [r1, #4]
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	4607      	mov	r7, r0
 8008446:	4691      	mov	r9, r2
 8008448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800844c:	f108 0601 	add.w	r6, r8, #1
 8008450:	42b3      	cmp	r3, r6
 8008452:	db0b      	blt.n	800846c <__lshift+0x38>
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff fddb 	bl	8008010 <_Balloc>
 800845a:	4605      	mov	r5, r0
 800845c:	b948      	cbnz	r0, 8008472 <__lshift+0x3e>
 800845e:	4602      	mov	r2, r0
 8008460:	4b2a      	ldr	r3, [pc, #168]	; (800850c <__lshift+0xd8>)
 8008462:	482b      	ldr	r0, [pc, #172]	; (8008510 <__lshift+0xdc>)
 8008464:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008468:	f000 fbb8 	bl	8008bdc <__assert_func>
 800846c:	3101      	adds	r1, #1
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	e7ee      	b.n	8008450 <__lshift+0x1c>
 8008472:	2300      	movs	r3, #0
 8008474:	f100 0114 	add.w	r1, r0, #20
 8008478:	f100 0210 	add.w	r2, r0, #16
 800847c:	4618      	mov	r0, r3
 800847e:	4553      	cmp	r3, sl
 8008480:	db37      	blt.n	80084f2 <__lshift+0xbe>
 8008482:	6920      	ldr	r0, [r4, #16]
 8008484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008488:	f104 0314 	add.w	r3, r4, #20
 800848c:	f019 091f 	ands.w	r9, r9, #31
 8008490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008498:	d02f      	beq.n	80084fa <__lshift+0xc6>
 800849a:	f1c9 0e20 	rsb	lr, r9, #32
 800849e:	468a      	mov	sl, r1
 80084a0:	f04f 0c00 	mov.w	ip, #0
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	fa02 f209 	lsl.w	r2, r2, r9
 80084aa:	ea42 020c 	orr.w	r2, r2, ip
 80084ae:	f84a 2b04 	str.w	r2, [sl], #4
 80084b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b6:	4298      	cmp	r0, r3
 80084b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084bc:	d8f2      	bhi.n	80084a4 <__lshift+0x70>
 80084be:	1b03      	subs	r3, r0, r4
 80084c0:	3b15      	subs	r3, #21
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	3304      	adds	r3, #4
 80084c8:	f104 0215 	add.w	r2, r4, #21
 80084cc:	4290      	cmp	r0, r2
 80084ce:	bf38      	it	cc
 80084d0:	2304      	movcc	r3, #4
 80084d2:	f841 c003 	str.w	ip, [r1, r3]
 80084d6:	f1bc 0f00 	cmp.w	ip, #0
 80084da:	d001      	beq.n	80084e0 <__lshift+0xac>
 80084dc:	f108 0602 	add.w	r6, r8, #2
 80084e0:	3e01      	subs	r6, #1
 80084e2:	4638      	mov	r0, r7
 80084e4:	612e      	str	r6, [r5, #16]
 80084e6:	4621      	mov	r1, r4
 80084e8:	f7ff fdd2 	bl	8008090 <_Bfree>
 80084ec:	4628      	mov	r0, r5
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084f6:	3301      	adds	r3, #1
 80084f8:	e7c1      	b.n	800847e <__lshift+0x4a>
 80084fa:	3904      	subs	r1, #4
 80084fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008500:	f841 2f04 	str.w	r2, [r1, #4]!
 8008504:	4298      	cmp	r0, r3
 8008506:	d8f9      	bhi.n	80084fc <__lshift+0xc8>
 8008508:	e7ea      	b.n	80084e0 <__lshift+0xac>
 800850a:	bf00      	nop
 800850c:	080098cb 	.word	0x080098cb
 8008510:	080098dc 	.word	0x080098dc

08008514 <__mcmp>:
 8008514:	b530      	push	{r4, r5, lr}
 8008516:	6902      	ldr	r2, [r0, #16]
 8008518:	690c      	ldr	r4, [r1, #16]
 800851a:	1b12      	subs	r2, r2, r4
 800851c:	d10e      	bne.n	800853c <__mcmp+0x28>
 800851e:	f100 0314 	add.w	r3, r0, #20
 8008522:	3114      	adds	r1, #20
 8008524:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008528:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800852c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008530:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008534:	42a5      	cmp	r5, r4
 8008536:	d003      	beq.n	8008540 <__mcmp+0x2c>
 8008538:	d305      	bcc.n	8008546 <__mcmp+0x32>
 800853a:	2201      	movs	r2, #1
 800853c:	4610      	mov	r0, r2
 800853e:	bd30      	pop	{r4, r5, pc}
 8008540:	4283      	cmp	r3, r0
 8008542:	d3f3      	bcc.n	800852c <__mcmp+0x18>
 8008544:	e7fa      	b.n	800853c <__mcmp+0x28>
 8008546:	f04f 32ff 	mov.w	r2, #4294967295
 800854a:	e7f7      	b.n	800853c <__mcmp+0x28>

0800854c <__mdiff>:
 800854c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	460c      	mov	r4, r1
 8008552:	4606      	mov	r6, r0
 8008554:	4611      	mov	r1, r2
 8008556:	4620      	mov	r0, r4
 8008558:	4690      	mov	r8, r2
 800855a:	f7ff ffdb 	bl	8008514 <__mcmp>
 800855e:	1e05      	subs	r5, r0, #0
 8008560:	d110      	bne.n	8008584 <__mdiff+0x38>
 8008562:	4629      	mov	r1, r5
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff fd53 	bl	8008010 <_Balloc>
 800856a:	b930      	cbnz	r0, 800857a <__mdiff+0x2e>
 800856c:	4b3a      	ldr	r3, [pc, #232]	; (8008658 <__mdiff+0x10c>)
 800856e:	4602      	mov	r2, r0
 8008570:	f240 2132 	movw	r1, #562	; 0x232
 8008574:	4839      	ldr	r0, [pc, #228]	; (800865c <__mdiff+0x110>)
 8008576:	f000 fb31 	bl	8008bdc <__assert_func>
 800857a:	2301      	movs	r3, #1
 800857c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	bfa4      	itt	ge
 8008586:	4643      	movge	r3, r8
 8008588:	46a0      	movge	r8, r4
 800858a:	4630      	mov	r0, r6
 800858c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008590:	bfa6      	itte	ge
 8008592:	461c      	movge	r4, r3
 8008594:	2500      	movge	r5, #0
 8008596:	2501      	movlt	r5, #1
 8008598:	f7ff fd3a 	bl	8008010 <_Balloc>
 800859c:	b920      	cbnz	r0, 80085a8 <__mdiff+0x5c>
 800859e:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <__mdiff+0x10c>)
 80085a0:	4602      	mov	r2, r0
 80085a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085a6:	e7e5      	b.n	8008574 <__mdiff+0x28>
 80085a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085ac:	6926      	ldr	r6, [r4, #16]
 80085ae:	60c5      	str	r5, [r0, #12]
 80085b0:	f104 0914 	add.w	r9, r4, #20
 80085b4:	f108 0514 	add.w	r5, r8, #20
 80085b8:	f100 0e14 	add.w	lr, r0, #20
 80085bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085c4:	f108 0210 	add.w	r2, r8, #16
 80085c8:	46f2      	mov	sl, lr
 80085ca:	2100      	movs	r1, #0
 80085cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80085d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085d4:	fa1f f883 	uxth.w	r8, r3
 80085d8:	fa11 f18b 	uxtah	r1, r1, fp
 80085dc:	0c1b      	lsrs	r3, r3, #16
 80085de:	eba1 0808 	sub.w	r8, r1, r8
 80085e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085ea:	fa1f f888 	uxth.w	r8, r8
 80085ee:	1419      	asrs	r1, r3, #16
 80085f0:	454e      	cmp	r6, r9
 80085f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085f6:	f84a 3b04 	str.w	r3, [sl], #4
 80085fa:	d8e7      	bhi.n	80085cc <__mdiff+0x80>
 80085fc:	1b33      	subs	r3, r6, r4
 80085fe:	3b15      	subs	r3, #21
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	3304      	adds	r3, #4
 8008606:	3415      	adds	r4, #21
 8008608:	42a6      	cmp	r6, r4
 800860a:	bf38      	it	cc
 800860c:	2304      	movcc	r3, #4
 800860e:	441d      	add	r5, r3
 8008610:	4473      	add	r3, lr
 8008612:	469e      	mov	lr, r3
 8008614:	462e      	mov	r6, r5
 8008616:	4566      	cmp	r6, ip
 8008618:	d30e      	bcc.n	8008638 <__mdiff+0xec>
 800861a:	f10c 0203 	add.w	r2, ip, #3
 800861e:	1b52      	subs	r2, r2, r5
 8008620:	f022 0203 	bic.w	r2, r2, #3
 8008624:	3d03      	subs	r5, #3
 8008626:	45ac      	cmp	ip, r5
 8008628:	bf38      	it	cc
 800862a:	2200      	movcc	r2, #0
 800862c:	441a      	add	r2, r3
 800862e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008632:	b17b      	cbz	r3, 8008654 <__mdiff+0x108>
 8008634:	6107      	str	r7, [r0, #16]
 8008636:	e7a3      	b.n	8008580 <__mdiff+0x34>
 8008638:	f856 8b04 	ldr.w	r8, [r6], #4
 800863c:	fa11 f288 	uxtah	r2, r1, r8
 8008640:	1414      	asrs	r4, r2, #16
 8008642:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008646:	b292      	uxth	r2, r2
 8008648:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800864c:	f84e 2b04 	str.w	r2, [lr], #4
 8008650:	1421      	asrs	r1, r4, #16
 8008652:	e7e0      	b.n	8008616 <__mdiff+0xca>
 8008654:	3f01      	subs	r7, #1
 8008656:	e7ea      	b.n	800862e <__mdiff+0xe2>
 8008658:	080098cb 	.word	0x080098cb
 800865c:	080098dc 	.word	0x080098dc

08008660 <__d2b>:
 8008660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008664:	4689      	mov	r9, r1
 8008666:	2101      	movs	r1, #1
 8008668:	ec57 6b10 	vmov	r6, r7, d0
 800866c:	4690      	mov	r8, r2
 800866e:	f7ff fccf 	bl	8008010 <_Balloc>
 8008672:	4604      	mov	r4, r0
 8008674:	b930      	cbnz	r0, 8008684 <__d2b+0x24>
 8008676:	4602      	mov	r2, r0
 8008678:	4b25      	ldr	r3, [pc, #148]	; (8008710 <__d2b+0xb0>)
 800867a:	4826      	ldr	r0, [pc, #152]	; (8008714 <__d2b+0xb4>)
 800867c:	f240 310a 	movw	r1, #778	; 0x30a
 8008680:	f000 faac 	bl	8008bdc <__assert_func>
 8008684:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800868c:	bb35      	cbnz	r5, 80086dc <__d2b+0x7c>
 800868e:	2e00      	cmp	r6, #0
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	d028      	beq.n	80086e6 <__d2b+0x86>
 8008694:	4668      	mov	r0, sp
 8008696:	9600      	str	r6, [sp, #0]
 8008698:	f7ff fd82 	bl	80081a0 <__lo0bits>
 800869c:	9900      	ldr	r1, [sp, #0]
 800869e:	b300      	cbz	r0, 80086e2 <__d2b+0x82>
 80086a0:	9a01      	ldr	r2, [sp, #4]
 80086a2:	f1c0 0320 	rsb	r3, r0, #32
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	430b      	orrs	r3, r1
 80086ac:	40c2      	lsrs	r2, r0
 80086ae:	6163      	str	r3, [r4, #20]
 80086b0:	9201      	str	r2, [sp, #4]
 80086b2:	9b01      	ldr	r3, [sp, #4]
 80086b4:	61a3      	str	r3, [r4, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bf14      	ite	ne
 80086ba:	2202      	movne	r2, #2
 80086bc:	2201      	moveq	r2, #1
 80086be:	6122      	str	r2, [r4, #16]
 80086c0:	b1d5      	cbz	r5, 80086f8 <__d2b+0x98>
 80086c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086c6:	4405      	add	r5, r0
 80086c8:	f8c9 5000 	str.w	r5, [r9]
 80086cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086d0:	f8c8 0000 	str.w	r0, [r8]
 80086d4:	4620      	mov	r0, r4
 80086d6:	b003      	add	sp, #12
 80086d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086e0:	e7d5      	b.n	800868e <__d2b+0x2e>
 80086e2:	6161      	str	r1, [r4, #20]
 80086e4:	e7e5      	b.n	80086b2 <__d2b+0x52>
 80086e6:	a801      	add	r0, sp, #4
 80086e8:	f7ff fd5a 	bl	80081a0 <__lo0bits>
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	2201      	movs	r2, #1
 80086f2:	6122      	str	r2, [r4, #16]
 80086f4:	3020      	adds	r0, #32
 80086f6:	e7e3      	b.n	80086c0 <__d2b+0x60>
 80086f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008700:	f8c9 0000 	str.w	r0, [r9]
 8008704:	6918      	ldr	r0, [r3, #16]
 8008706:	f7ff fd2b 	bl	8008160 <__hi0bits>
 800870a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800870e:	e7df      	b.n	80086d0 <__d2b+0x70>
 8008710:	080098cb 	.word	0x080098cb
 8008714:	080098dc 	.word	0x080098dc

08008718 <_calloc_r>:
 8008718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800871a:	fba1 2402 	umull	r2, r4, r1, r2
 800871e:	b94c      	cbnz	r4, 8008734 <_calloc_r+0x1c>
 8008720:	4611      	mov	r1, r2
 8008722:	9201      	str	r2, [sp, #4]
 8008724:	f000 f87a 	bl	800881c <_malloc_r>
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	4605      	mov	r5, r0
 800872c:	b930      	cbnz	r0, 800873c <_calloc_r+0x24>
 800872e:	4628      	mov	r0, r5
 8008730:	b003      	add	sp, #12
 8008732:	bd30      	pop	{r4, r5, pc}
 8008734:	220c      	movs	r2, #12
 8008736:	6002      	str	r2, [r0, #0]
 8008738:	2500      	movs	r5, #0
 800873a:	e7f8      	b.n	800872e <_calloc_r+0x16>
 800873c:	4621      	mov	r1, r4
 800873e:	f7fe f941 	bl	80069c4 <memset>
 8008742:	e7f4      	b.n	800872e <_calloc_r+0x16>

08008744 <_free_r>:
 8008744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008746:	2900      	cmp	r1, #0
 8008748:	d044      	beq.n	80087d4 <_free_r+0x90>
 800874a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874e:	9001      	str	r0, [sp, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f1a1 0404 	sub.w	r4, r1, #4
 8008756:	bfb8      	it	lt
 8008758:	18e4      	addlt	r4, r4, r3
 800875a:	f000 fa9b 	bl	8008c94 <__malloc_lock>
 800875e:	4a1e      	ldr	r2, [pc, #120]	; (80087d8 <_free_r+0x94>)
 8008760:	9801      	ldr	r0, [sp, #4]
 8008762:	6813      	ldr	r3, [r2, #0]
 8008764:	b933      	cbnz	r3, 8008774 <_free_r+0x30>
 8008766:	6063      	str	r3, [r4, #4]
 8008768:	6014      	str	r4, [r2, #0]
 800876a:	b003      	add	sp, #12
 800876c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008770:	f000 ba96 	b.w	8008ca0 <__malloc_unlock>
 8008774:	42a3      	cmp	r3, r4
 8008776:	d908      	bls.n	800878a <_free_r+0x46>
 8008778:	6825      	ldr	r5, [r4, #0]
 800877a:	1961      	adds	r1, r4, r5
 800877c:	428b      	cmp	r3, r1
 800877e:	bf01      	itttt	eq
 8008780:	6819      	ldreq	r1, [r3, #0]
 8008782:	685b      	ldreq	r3, [r3, #4]
 8008784:	1949      	addeq	r1, r1, r5
 8008786:	6021      	streq	r1, [r4, #0]
 8008788:	e7ed      	b.n	8008766 <_free_r+0x22>
 800878a:	461a      	mov	r2, r3
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	b10b      	cbz	r3, 8008794 <_free_r+0x50>
 8008790:	42a3      	cmp	r3, r4
 8008792:	d9fa      	bls.n	800878a <_free_r+0x46>
 8008794:	6811      	ldr	r1, [r2, #0]
 8008796:	1855      	adds	r5, r2, r1
 8008798:	42a5      	cmp	r5, r4
 800879a:	d10b      	bne.n	80087b4 <_free_r+0x70>
 800879c:	6824      	ldr	r4, [r4, #0]
 800879e:	4421      	add	r1, r4
 80087a0:	1854      	adds	r4, r2, r1
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	6011      	str	r1, [r2, #0]
 80087a6:	d1e0      	bne.n	800876a <_free_r+0x26>
 80087a8:	681c      	ldr	r4, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	6053      	str	r3, [r2, #4]
 80087ae:	4421      	add	r1, r4
 80087b0:	6011      	str	r1, [r2, #0]
 80087b2:	e7da      	b.n	800876a <_free_r+0x26>
 80087b4:	d902      	bls.n	80087bc <_free_r+0x78>
 80087b6:	230c      	movs	r3, #12
 80087b8:	6003      	str	r3, [r0, #0]
 80087ba:	e7d6      	b.n	800876a <_free_r+0x26>
 80087bc:	6825      	ldr	r5, [r4, #0]
 80087be:	1961      	adds	r1, r4, r5
 80087c0:	428b      	cmp	r3, r1
 80087c2:	bf04      	itt	eq
 80087c4:	6819      	ldreq	r1, [r3, #0]
 80087c6:	685b      	ldreq	r3, [r3, #4]
 80087c8:	6063      	str	r3, [r4, #4]
 80087ca:	bf04      	itt	eq
 80087cc:	1949      	addeq	r1, r1, r5
 80087ce:	6021      	streq	r1, [r4, #0]
 80087d0:	6054      	str	r4, [r2, #4]
 80087d2:	e7ca      	b.n	800876a <_free_r+0x26>
 80087d4:	b003      	add	sp, #12
 80087d6:	bd30      	pop	{r4, r5, pc}
 80087d8:	20000604 	.word	0x20000604

080087dc <sbrk_aligned>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0e      	ldr	r6, [pc, #56]	; (8008818 <sbrk_aligned+0x3c>)
 80087e0:	460c      	mov	r4, r1
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	4605      	mov	r5, r0
 80087e6:	b911      	cbnz	r1, 80087ee <sbrk_aligned+0x12>
 80087e8:	f000 f9e8 	bl	8008bbc <_sbrk_r>
 80087ec:	6030      	str	r0, [r6, #0]
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 f9e3 	bl	8008bbc <_sbrk_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d00a      	beq.n	8008810 <sbrk_aligned+0x34>
 80087fa:	1cc4      	adds	r4, r0, #3
 80087fc:	f024 0403 	bic.w	r4, r4, #3
 8008800:	42a0      	cmp	r0, r4
 8008802:	d007      	beq.n	8008814 <sbrk_aligned+0x38>
 8008804:	1a21      	subs	r1, r4, r0
 8008806:	4628      	mov	r0, r5
 8008808:	f000 f9d8 	bl	8008bbc <_sbrk_r>
 800880c:	3001      	adds	r0, #1
 800880e:	d101      	bne.n	8008814 <sbrk_aligned+0x38>
 8008810:	f04f 34ff 	mov.w	r4, #4294967295
 8008814:	4620      	mov	r0, r4
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	20000608 	.word	0x20000608

0800881c <_malloc_r>:
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008820:	1ccd      	adds	r5, r1, #3
 8008822:	f025 0503 	bic.w	r5, r5, #3
 8008826:	3508      	adds	r5, #8
 8008828:	2d0c      	cmp	r5, #12
 800882a:	bf38      	it	cc
 800882c:	250c      	movcc	r5, #12
 800882e:	2d00      	cmp	r5, #0
 8008830:	4607      	mov	r7, r0
 8008832:	db01      	blt.n	8008838 <_malloc_r+0x1c>
 8008834:	42a9      	cmp	r1, r5
 8008836:	d905      	bls.n	8008844 <_malloc_r+0x28>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	2600      	movs	r6, #0
 800883e:	4630      	mov	r0, r6
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	4e2e      	ldr	r6, [pc, #184]	; (8008900 <_malloc_r+0xe4>)
 8008846:	f000 fa25 	bl	8008c94 <__malloc_lock>
 800884a:	6833      	ldr	r3, [r6, #0]
 800884c:	461c      	mov	r4, r3
 800884e:	bb34      	cbnz	r4, 800889e <_malloc_r+0x82>
 8008850:	4629      	mov	r1, r5
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ffc2 	bl	80087dc <sbrk_aligned>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	4604      	mov	r4, r0
 800885c:	d14d      	bne.n	80088fa <_malloc_r+0xde>
 800885e:	6834      	ldr	r4, [r6, #0]
 8008860:	4626      	mov	r6, r4
 8008862:	2e00      	cmp	r6, #0
 8008864:	d140      	bne.n	80088e8 <_malloc_r+0xcc>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	4631      	mov	r1, r6
 800886a:	4638      	mov	r0, r7
 800886c:	eb04 0803 	add.w	r8, r4, r3
 8008870:	f000 f9a4 	bl	8008bbc <_sbrk_r>
 8008874:	4580      	cmp	r8, r0
 8008876:	d13a      	bne.n	80088ee <_malloc_r+0xd2>
 8008878:	6821      	ldr	r1, [r4, #0]
 800887a:	3503      	adds	r5, #3
 800887c:	1a6d      	subs	r5, r5, r1
 800887e:	f025 0503 	bic.w	r5, r5, #3
 8008882:	3508      	adds	r5, #8
 8008884:	2d0c      	cmp	r5, #12
 8008886:	bf38      	it	cc
 8008888:	250c      	movcc	r5, #12
 800888a:	4629      	mov	r1, r5
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff ffa5 	bl	80087dc <sbrk_aligned>
 8008892:	3001      	adds	r0, #1
 8008894:	d02b      	beq.n	80088ee <_malloc_r+0xd2>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	442b      	add	r3, r5
 800889a:	6023      	str	r3, [r4, #0]
 800889c:	e00e      	b.n	80088bc <_malloc_r+0xa0>
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	1b52      	subs	r2, r2, r5
 80088a2:	d41e      	bmi.n	80088e2 <_malloc_r+0xc6>
 80088a4:	2a0b      	cmp	r2, #11
 80088a6:	d916      	bls.n	80088d6 <_malloc_r+0xba>
 80088a8:	1961      	adds	r1, r4, r5
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	6025      	str	r5, [r4, #0]
 80088ae:	bf18      	it	ne
 80088b0:	6059      	strne	r1, [r3, #4]
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	bf08      	it	eq
 80088b6:	6031      	streq	r1, [r6, #0]
 80088b8:	5162      	str	r2, [r4, r5]
 80088ba:	604b      	str	r3, [r1, #4]
 80088bc:	4638      	mov	r0, r7
 80088be:	f104 060b 	add.w	r6, r4, #11
 80088c2:	f000 f9ed 	bl	8008ca0 <__malloc_unlock>
 80088c6:	f026 0607 	bic.w	r6, r6, #7
 80088ca:	1d23      	adds	r3, r4, #4
 80088cc:	1af2      	subs	r2, r6, r3
 80088ce:	d0b6      	beq.n	800883e <_malloc_r+0x22>
 80088d0:	1b9b      	subs	r3, r3, r6
 80088d2:	50a3      	str	r3, [r4, r2]
 80088d4:	e7b3      	b.n	800883e <_malloc_r+0x22>
 80088d6:	6862      	ldr	r2, [r4, #4]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	bf0c      	ite	eq
 80088dc:	6032      	streq	r2, [r6, #0]
 80088de:	605a      	strne	r2, [r3, #4]
 80088e0:	e7ec      	b.n	80088bc <_malloc_r+0xa0>
 80088e2:	4623      	mov	r3, r4
 80088e4:	6864      	ldr	r4, [r4, #4]
 80088e6:	e7b2      	b.n	800884e <_malloc_r+0x32>
 80088e8:	4634      	mov	r4, r6
 80088ea:	6876      	ldr	r6, [r6, #4]
 80088ec:	e7b9      	b.n	8008862 <_malloc_r+0x46>
 80088ee:	230c      	movs	r3, #12
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4638      	mov	r0, r7
 80088f4:	f000 f9d4 	bl	8008ca0 <__malloc_unlock>
 80088f8:	e7a1      	b.n	800883e <_malloc_r+0x22>
 80088fa:	6025      	str	r5, [r4, #0]
 80088fc:	e7de      	b.n	80088bc <_malloc_r+0xa0>
 80088fe:	bf00      	nop
 8008900:	20000604 	.word	0x20000604

08008904 <__ssputs_r>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	688e      	ldr	r6, [r1, #8]
 800890a:	429e      	cmp	r6, r3
 800890c:	4682      	mov	sl, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4690      	mov	r8, r2
 8008912:	461f      	mov	r7, r3
 8008914:	d838      	bhi.n	8008988 <__ssputs_r+0x84>
 8008916:	898a      	ldrh	r2, [r1, #12]
 8008918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800891c:	d032      	beq.n	8008984 <__ssputs_r+0x80>
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	6909      	ldr	r1, [r1, #16]
 8008922:	eba5 0901 	sub.w	r9, r5, r1
 8008926:	6965      	ldr	r5, [r4, #20]
 8008928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800892c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008930:	3301      	adds	r3, #1
 8008932:	444b      	add	r3, r9
 8008934:	106d      	asrs	r5, r5, #1
 8008936:	429d      	cmp	r5, r3
 8008938:	bf38      	it	cc
 800893a:	461d      	movcc	r5, r3
 800893c:	0553      	lsls	r3, r2, #21
 800893e:	d531      	bpl.n	80089a4 <__ssputs_r+0xa0>
 8008940:	4629      	mov	r1, r5
 8008942:	f7ff ff6b 	bl	800881c <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b950      	cbnz	r0, 8008960 <__ssputs_r+0x5c>
 800894a:	230c      	movs	r3, #12
 800894c:	f8ca 3000 	str.w	r3, [sl]
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008960:	6921      	ldr	r1, [r4, #16]
 8008962:	464a      	mov	r2, r9
 8008964:	f7ff fb46 	bl	8007ff4 <memcpy>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800896e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	6126      	str	r6, [r4, #16]
 8008976:	6165      	str	r5, [r4, #20]
 8008978:	444e      	add	r6, r9
 800897a:	eba5 0509 	sub.w	r5, r5, r9
 800897e:	6026      	str	r6, [r4, #0]
 8008980:	60a5      	str	r5, [r4, #8]
 8008982:	463e      	mov	r6, r7
 8008984:	42be      	cmp	r6, r7
 8008986:	d900      	bls.n	800898a <__ssputs_r+0x86>
 8008988:	463e      	mov	r6, r7
 800898a:	6820      	ldr	r0, [r4, #0]
 800898c:	4632      	mov	r2, r6
 800898e:	4641      	mov	r1, r8
 8008990:	f000 f966 	bl	8008c60 <memmove>
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	1b9b      	subs	r3, r3, r6
 8008998:	60a3      	str	r3, [r4, #8]
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	4433      	add	r3, r6
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	2000      	movs	r0, #0
 80089a2:	e7db      	b.n	800895c <__ssputs_r+0x58>
 80089a4:	462a      	mov	r2, r5
 80089a6:	f000 f981 	bl	8008cac <_realloc_r>
 80089aa:	4606      	mov	r6, r0
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d1e1      	bne.n	8008974 <__ssputs_r+0x70>
 80089b0:	6921      	ldr	r1, [r4, #16]
 80089b2:	4650      	mov	r0, sl
 80089b4:	f7ff fec6 	bl	8008744 <_free_r>
 80089b8:	e7c7      	b.n	800894a <__ssputs_r+0x46>
	...

080089bc <_svfiprintf_r>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	4698      	mov	r8, r3
 80089c2:	898b      	ldrh	r3, [r1, #12]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	b09d      	sub	sp, #116	; 0x74
 80089c8:	4607      	mov	r7, r0
 80089ca:	460d      	mov	r5, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	d50e      	bpl.n	80089ee <_svfiprintf_r+0x32>
 80089d0:	690b      	ldr	r3, [r1, #16]
 80089d2:	b963      	cbnz	r3, 80089ee <_svfiprintf_r+0x32>
 80089d4:	2140      	movs	r1, #64	; 0x40
 80089d6:	f7ff ff21 	bl	800881c <_malloc_r>
 80089da:	6028      	str	r0, [r5, #0]
 80089dc:	6128      	str	r0, [r5, #16]
 80089de:	b920      	cbnz	r0, 80089ea <_svfiprintf_r+0x2e>
 80089e0:	230c      	movs	r3, #12
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e0d1      	b.n	8008b8e <_svfiprintf_r+0x1d2>
 80089ea:	2340      	movs	r3, #64	; 0x40
 80089ec:	616b      	str	r3, [r5, #20]
 80089ee:	2300      	movs	r3, #0
 80089f0:	9309      	str	r3, [sp, #36]	; 0x24
 80089f2:	2320      	movs	r3, #32
 80089f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089fc:	2330      	movs	r3, #48	; 0x30
 80089fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ba8 <_svfiprintf_r+0x1ec>
 8008a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a06:	f04f 0901 	mov.w	r9, #1
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	469a      	mov	sl, r3
 8008a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a12:	b10a      	cbz	r2, 8008a18 <_svfiprintf_r+0x5c>
 8008a14:	2a25      	cmp	r2, #37	; 0x25
 8008a16:	d1f9      	bne.n	8008a0c <_svfiprintf_r+0x50>
 8008a18:	ebba 0b04 	subs.w	fp, sl, r4
 8008a1c:	d00b      	beq.n	8008a36 <_svfiprintf_r+0x7a>
 8008a1e:	465b      	mov	r3, fp
 8008a20:	4622      	mov	r2, r4
 8008a22:	4629      	mov	r1, r5
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff ff6d 	bl	8008904 <__ssputs_r>
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	f000 80aa 	beq.w	8008b84 <_svfiprintf_r+0x1c8>
 8008a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a32:	445a      	add	r2, fp
 8008a34:	9209      	str	r2, [sp, #36]	; 0x24
 8008a36:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80a2 	beq.w	8008b84 <_svfiprintf_r+0x1c8>
 8008a40:	2300      	movs	r3, #0
 8008a42:	f04f 32ff 	mov.w	r2, #4294967295
 8008a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a4a:	f10a 0a01 	add.w	sl, sl, #1
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	9307      	str	r3, [sp, #28]
 8008a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a56:	931a      	str	r3, [sp, #104]	; 0x68
 8008a58:	4654      	mov	r4, sl
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a60:	4851      	ldr	r0, [pc, #324]	; (8008ba8 <_svfiprintf_r+0x1ec>)
 8008a62:	f7f7 fbdd 	bl	8000220 <memchr>
 8008a66:	9a04      	ldr	r2, [sp, #16]
 8008a68:	b9d8      	cbnz	r0, 8008aa2 <_svfiprintf_r+0xe6>
 8008a6a:	06d0      	lsls	r0, r2, #27
 8008a6c:	bf44      	itt	mi
 8008a6e:	2320      	movmi	r3, #32
 8008a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a74:	0711      	lsls	r1, r2, #28
 8008a76:	bf44      	itt	mi
 8008a78:	232b      	movmi	r3, #43	; 0x2b
 8008a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a82:	2b2a      	cmp	r3, #42	; 0x2a
 8008a84:	d015      	beq.n	8008ab2 <_svfiprintf_r+0xf6>
 8008a86:	9a07      	ldr	r2, [sp, #28]
 8008a88:	4654      	mov	r4, sl
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f04f 0c0a 	mov.w	ip, #10
 8008a90:	4621      	mov	r1, r4
 8008a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a96:	3b30      	subs	r3, #48	; 0x30
 8008a98:	2b09      	cmp	r3, #9
 8008a9a:	d94e      	bls.n	8008b3a <_svfiprintf_r+0x17e>
 8008a9c:	b1b0      	cbz	r0, 8008acc <_svfiprintf_r+0x110>
 8008a9e:	9207      	str	r2, [sp, #28]
 8008aa0:	e014      	b.n	8008acc <_svfiprintf_r+0x110>
 8008aa2:	eba0 0308 	sub.w	r3, r0, r8
 8008aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	46a2      	mov	sl, r4
 8008ab0:	e7d2      	b.n	8008a58 <_svfiprintf_r+0x9c>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	1d19      	adds	r1, r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	9103      	str	r1, [sp, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfbb      	ittet	lt
 8008abe:	425b      	neglt	r3, r3
 8008ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac4:	9307      	strge	r3, [sp, #28]
 8008ac6:	9307      	strlt	r3, [sp, #28]
 8008ac8:	bfb8      	it	lt
 8008aca:	9204      	strlt	r2, [sp, #16]
 8008acc:	7823      	ldrb	r3, [r4, #0]
 8008ace:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad0:	d10c      	bne.n	8008aec <_svfiprintf_r+0x130>
 8008ad2:	7863      	ldrb	r3, [r4, #1]
 8008ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad6:	d135      	bne.n	8008b44 <_svfiprintf_r+0x188>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	1d1a      	adds	r2, r3, #4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	9203      	str	r2, [sp, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bfb8      	it	lt
 8008ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ae8:	3402      	adds	r4, #2
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bb8 <_svfiprintf_r+0x1fc>
 8008af0:	7821      	ldrb	r1, [r4, #0]
 8008af2:	2203      	movs	r2, #3
 8008af4:	4650      	mov	r0, sl
 8008af6:	f7f7 fb93 	bl	8000220 <memchr>
 8008afa:	b140      	cbz	r0, 8008b0e <_svfiprintf_r+0x152>
 8008afc:	2340      	movs	r3, #64	; 0x40
 8008afe:	eba0 000a 	sub.w	r0, r0, sl
 8008b02:	fa03 f000 	lsl.w	r0, r3, r0
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	4303      	orrs	r3, r0
 8008b0a:	3401      	adds	r4, #1
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b12:	4826      	ldr	r0, [pc, #152]	; (8008bac <_svfiprintf_r+0x1f0>)
 8008b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b18:	2206      	movs	r2, #6
 8008b1a:	f7f7 fb81 	bl	8000220 <memchr>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d038      	beq.n	8008b94 <_svfiprintf_r+0x1d8>
 8008b22:	4b23      	ldr	r3, [pc, #140]	; (8008bb0 <_svfiprintf_r+0x1f4>)
 8008b24:	bb1b      	cbnz	r3, 8008b6e <_svfiprintf_r+0x1b2>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	3307      	adds	r3, #7
 8008b2a:	f023 0307 	bic.w	r3, r3, #7
 8008b2e:	3308      	adds	r3, #8
 8008b30:	9303      	str	r3, [sp, #12]
 8008b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b34:	4433      	add	r3, r6
 8008b36:	9309      	str	r3, [sp, #36]	; 0x24
 8008b38:	e767      	b.n	8008a0a <_svfiprintf_r+0x4e>
 8008b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b3e:	460c      	mov	r4, r1
 8008b40:	2001      	movs	r0, #1
 8008b42:	e7a5      	b.n	8008a90 <_svfiprintf_r+0xd4>
 8008b44:	2300      	movs	r3, #0
 8008b46:	3401      	adds	r4, #1
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	4620      	mov	r0, r4
 8008b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b56:	3a30      	subs	r2, #48	; 0x30
 8008b58:	2a09      	cmp	r2, #9
 8008b5a:	d903      	bls.n	8008b64 <_svfiprintf_r+0x1a8>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0c5      	beq.n	8008aec <_svfiprintf_r+0x130>
 8008b60:	9105      	str	r1, [sp, #20]
 8008b62:	e7c3      	b.n	8008aec <_svfiprintf_r+0x130>
 8008b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b68:	4604      	mov	r4, r0
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7f0      	b.n	8008b50 <_svfiprintf_r+0x194>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <_svfiprintf_r+0x1f8>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7fd ffcb 	bl	8006b14 <_printf_float>
 8008b7e:	1c42      	adds	r2, r0, #1
 8008b80:	4606      	mov	r6, r0
 8008b82:	d1d6      	bne.n	8008b32 <_svfiprintf_r+0x176>
 8008b84:	89ab      	ldrh	r3, [r5, #12]
 8008b86:	065b      	lsls	r3, r3, #25
 8008b88:	f53f af2c 	bmi.w	80089e4 <_svfiprintf_r+0x28>
 8008b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8e:	b01d      	add	sp, #116	; 0x74
 8008b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b94:	ab03      	add	r3, sp, #12
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	462a      	mov	r2, r5
 8008b9a:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <_svfiprintf_r+0x1f8>)
 8008b9c:	a904      	add	r1, sp, #16
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f7fe fa5c 	bl	800705c <_printf_i>
 8008ba4:	e7eb      	b.n	8008b7e <_svfiprintf_r+0x1c2>
 8008ba6:	bf00      	nop
 8008ba8:	08009a34 	.word	0x08009a34
 8008bac:	08009a3e 	.word	0x08009a3e
 8008bb0:	08006b15 	.word	0x08006b15
 8008bb4:	08008905 	.word	0x08008905
 8008bb8:	08009a3a 	.word	0x08009a3a

08008bbc <_sbrk_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d06      	ldr	r5, [pc, #24]	; (8008bd8 <_sbrk_r+0x1c>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	f7f9 fd44 	bl	8002654 <_sbrk>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_sbrk_r+0x1a>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_sbrk_r+0x1a>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	2000060c 	.word	0x2000060c

08008bdc <__assert_func>:
 8008bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bde:	4614      	mov	r4, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <__assert_func+0x2c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4605      	mov	r5, r0
 8008be8:	68d8      	ldr	r0, [r3, #12]
 8008bea:	b14c      	cbz	r4, 8008c00 <__assert_func+0x24>
 8008bec:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <__assert_func+0x30>)
 8008bee:	9100      	str	r1, [sp, #0]
 8008bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bf4:	4906      	ldr	r1, [pc, #24]	; (8008c10 <__assert_func+0x34>)
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	f000 f80e 	bl	8008c18 <fiprintf>
 8008bfc:	f000 faac 	bl	8009158 <abort>
 8008c00:	4b04      	ldr	r3, [pc, #16]	; (8008c14 <__assert_func+0x38>)
 8008c02:	461c      	mov	r4, r3
 8008c04:	e7f3      	b.n	8008bee <__assert_func+0x12>
 8008c06:	bf00      	nop
 8008c08:	2000000c 	.word	0x2000000c
 8008c0c:	08009a45 	.word	0x08009a45
 8008c10:	08009a52 	.word	0x08009a52
 8008c14:	08009a80 	.word	0x08009a80

08008c18 <fiprintf>:
 8008c18:	b40e      	push	{r1, r2, r3}
 8008c1a:	b503      	push	{r0, r1, lr}
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	ab03      	add	r3, sp, #12
 8008c20:	4805      	ldr	r0, [pc, #20]	; (8008c38 <fiprintf+0x20>)
 8008c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c26:	6800      	ldr	r0, [r0, #0]
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	f000 f897 	bl	8008d5c <_vfiprintf_r>
 8008c2e:	b002      	add	sp, #8
 8008c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c34:	b003      	add	sp, #12
 8008c36:	4770      	bx	lr
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <__ascii_mbtowc>:
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	b901      	cbnz	r1, 8008c42 <__ascii_mbtowc+0x6>
 8008c40:	a901      	add	r1, sp, #4
 8008c42:	b142      	cbz	r2, 8008c56 <__ascii_mbtowc+0x1a>
 8008c44:	b14b      	cbz	r3, 8008c5a <__ascii_mbtowc+0x1e>
 8008c46:	7813      	ldrb	r3, [r2, #0]
 8008c48:	600b      	str	r3, [r1, #0]
 8008c4a:	7812      	ldrb	r2, [r2, #0]
 8008c4c:	1e10      	subs	r0, r2, #0
 8008c4e:	bf18      	it	ne
 8008c50:	2001      	movne	r0, #1
 8008c52:	b002      	add	sp, #8
 8008c54:	4770      	bx	lr
 8008c56:	4610      	mov	r0, r2
 8008c58:	e7fb      	b.n	8008c52 <__ascii_mbtowc+0x16>
 8008c5a:	f06f 0001 	mvn.w	r0, #1
 8008c5e:	e7f8      	b.n	8008c52 <__ascii_mbtowc+0x16>

08008c60 <memmove>:
 8008c60:	4288      	cmp	r0, r1
 8008c62:	b510      	push	{r4, lr}
 8008c64:	eb01 0402 	add.w	r4, r1, r2
 8008c68:	d902      	bls.n	8008c70 <memmove+0x10>
 8008c6a:	4284      	cmp	r4, r0
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	d807      	bhi.n	8008c80 <memmove+0x20>
 8008c70:	1e43      	subs	r3, r0, #1
 8008c72:	42a1      	cmp	r1, r4
 8008c74:	d008      	beq.n	8008c88 <memmove+0x28>
 8008c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c7e:	e7f8      	b.n	8008c72 <memmove+0x12>
 8008c80:	4402      	add	r2, r0
 8008c82:	4601      	mov	r1, r0
 8008c84:	428a      	cmp	r2, r1
 8008c86:	d100      	bne.n	8008c8a <memmove+0x2a>
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c92:	e7f7      	b.n	8008c84 <memmove+0x24>

08008c94 <__malloc_lock>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__malloc_lock+0x8>)
 8008c96:	f000 bc1f 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20000610 	.word	0x20000610

08008ca0 <__malloc_unlock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__malloc_unlock+0x8>)
 8008ca2:	f000 bc1a 	b.w	80094da <__retarget_lock_release_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20000610 	.word	0x20000610

08008cac <_realloc_r>:
 8008cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	b921      	cbnz	r1, 8008cc2 <_realloc_r+0x16>
 8008cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	f7ff bdad 	b.w	800881c <_malloc_r>
 8008cc2:	b92a      	cbnz	r2, 8008cd0 <_realloc_r+0x24>
 8008cc4:	f7ff fd3e 	bl	8008744 <_free_r>
 8008cc8:	4625      	mov	r5, r4
 8008cca:	4628      	mov	r0, r5
 8008ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd0:	f000 fc6a 	bl	80095a8 <_malloc_usable_size_r>
 8008cd4:	4284      	cmp	r4, r0
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	d802      	bhi.n	8008ce0 <_realloc_r+0x34>
 8008cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cde:	d812      	bhi.n	8008d06 <_realloc_r+0x5a>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	f7ff fd9a 	bl	800881c <_malloc_r>
 8008ce8:	4605      	mov	r5, r0
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d0ed      	beq.n	8008cca <_realloc_r+0x1e>
 8008cee:	42bc      	cmp	r4, r7
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	bf28      	it	cs
 8008cf6:	463a      	movcs	r2, r7
 8008cf8:	f7ff f97c 	bl	8007ff4 <memcpy>
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4640      	mov	r0, r8
 8008d00:	f7ff fd20 	bl	8008744 <_free_r>
 8008d04:	e7e1      	b.n	8008cca <_realloc_r+0x1e>
 8008d06:	4635      	mov	r5, r6
 8008d08:	e7df      	b.n	8008cca <_realloc_r+0x1e>

08008d0a <__sfputc_r>:
 8008d0a:	6893      	ldr	r3, [r2, #8]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	b410      	push	{r4}
 8008d12:	6093      	str	r3, [r2, #8]
 8008d14:	da08      	bge.n	8008d28 <__sfputc_r+0x1e>
 8008d16:	6994      	ldr	r4, [r2, #24]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	db01      	blt.n	8008d20 <__sfputc_r+0x16>
 8008d1c:	290a      	cmp	r1, #10
 8008d1e:	d103      	bne.n	8008d28 <__sfputc_r+0x1e>
 8008d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d24:	f000 b94a 	b.w	8008fbc <__swbuf_r>
 8008d28:	6813      	ldr	r3, [r2, #0]
 8008d2a:	1c58      	adds	r0, r3, #1
 8008d2c:	6010      	str	r0, [r2, #0]
 8008d2e:	7019      	strb	r1, [r3, #0]
 8008d30:	4608      	mov	r0, r1
 8008d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <__sfputs_r>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	460f      	mov	r7, r1
 8008d3e:	4614      	mov	r4, r2
 8008d40:	18d5      	adds	r5, r2, r3
 8008d42:	42ac      	cmp	r4, r5
 8008d44:	d101      	bne.n	8008d4a <__sfputs_r+0x12>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e007      	b.n	8008d5a <__sfputs_r+0x22>
 8008d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4e:	463a      	mov	r2, r7
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff ffda 	bl	8008d0a <__sfputc_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d1f3      	bne.n	8008d42 <__sfputs_r+0xa>
 8008d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d5c <_vfiprintf_r>:
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	460d      	mov	r5, r1
 8008d62:	b09d      	sub	sp, #116	; 0x74
 8008d64:	4614      	mov	r4, r2
 8008d66:	4698      	mov	r8, r3
 8008d68:	4606      	mov	r6, r0
 8008d6a:	b118      	cbz	r0, 8008d74 <_vfiprintf_r+0x18>
 8008d6c:	6983      	ldr	r3, [r0, #24]
 8008d6e:	b90b      	cbnz	r3, 8008d74 <_vfiprintf_r+0x18>
 8008d70:	f000 fb14 	bl	800939c <__sinit>
 8008d74:	4b89      	ldr	r3, [pc, #548]	; (8008f9c <_vfiprintf_r+0x240>)
 8008d76:	429d      	cmp	r5, r3
 8008d78:	d11b      	bne.n	8008db2 <_vfiprintf_r+0x56>
 8008d7a:	6875      	ldr	r5, [r6, #4]
 8008d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7e:	07d9      	lsls	r1, r3, #31
 8008d80:	d405      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	059a      	lsls	r2, r3, #22
 8008d86:	d402      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8a:	f000 fba5 	bl	80094d8 <__retarget_lock_acquire_recursive>
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	071b      	lsls	r3, r3, #28
 8008d92:	d501      	bpl.n	8008d98 <_vfiprintf_r+0x3c>
 8008d94:	692b      	ldr	r3, [r5, #16]
 8008d96:	b9eb      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x78>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 f96e 	bl	800907c <__swsetup_r>
 8008da0:	b1c0      	cbz	r0, 8008dd4 <_vfiprintf_r+0x78>
 8008da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da4:	07dc      	lsls	r4, r3, #31
 8008da6:	d50e      	bpl.n	8008dc6 <_vfiprintf_r+0x6a>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	b01d      	add	sp, #116	; 0x74
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	4b7b      	ldr	r3, [pc, #492]	; (8008fa0 <_vfiprintf_r+0x244>)
 8008db4:	429d      	cmp	r5, r3
 8008db6:	d101      	bne.n	8008dbc <_vfiprintf_r+0x60>
 8008db8:	68b5      	ldr	r5, [r6, #8]
 8008dba:	e7df      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dbc:	4b79      	ldr	r3, [pc, #484]	; (8008fa4 <_vfiprintf_r+0x248>)
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	bf08      	it	eq
 8008dc2:	68f5      	ldreq	r5, [r6, #12]
 8008dc4:	e7da      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	0598      	lsls	r0, r3, #22
 8008dca:	d4ed      	bmi.n	8008da8 <_vfiprintf_r+0x4c>
 8008dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dce:	f000 fb84 	bl	80094da <__retarget_lock_release_recursive>
 8008dd2:	e7e9      	b.n	8008da8 <_vfiprintf_r+0x4c>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	2320      	movs	r3, #32
 8008dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de2:	2330      	movs	r3, #48	; 0x30
 8008de4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fa8 <_vfiprintf_r+0x24c>
 8008de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dec:	f04f 0901 	mov.w	r9, #1
 8008df0:	4623      	mov	r3, r4
 8008df2:	469a      	mov	sl, r3
 8008df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df8:	b10a      	cbz	r2, 8008dfe <_vfiprintf_r+0xa2>
 8008dfa:	2a25      	cmp	r2, #37	; 0x25
 8008dfc:	d1f9      	bne.n	8008df2 <_vfiprintf_r+0x96>
 8008dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8008e02:	d00b      	beq.n	8008e1c <_vfiprintf_r+0xc0>
 8008e04:	465b      	mov	r3, fp
 8008e06:	4622      	mov	r2, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ff94 	bl	8008d38 <__sfputs_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	f000 80aa 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e18:	445a      	add	r2, fp
 8008e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80a2 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e30:	f10a 0a01 	add.w	sl, sl, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e3e:	4654      	mov	r4, sl
 8008e40:	2205      	movs	r2, #5
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	4858      	ldr	r0, [pc, #352]	; (8008fa8 <_vfiprintf_r+0x24c>)
 8008e48:	f7f7 f9ea 	bl	8000220 <memchr>
 8008e4c:	9a04      	ldr	r2, [sp, #16]
 8008e4e:	b9d8      	cbnz	r0, 8008e88 <_vfiprintf_r+0x12c>
 8008e50:	06d1      	lsls	r1, r2, #27
 8008e52:	bf44      	itt	mi
 8008e54:	2320      	movmi	r3, #32
 8008e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e5a:	0713      	lsls	r3, r2, #28
 8008e5c:	bf44      	itt	mi
 8008e5e:	232b      	movmi	r3, #43	; 0x2b
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e64:	f89a 3000 	ldrb.w	r3, [sl]
 8008e68:	2b2a      	cmp	r3, #42	; 0x2a
 8008e6a:	d015      	beq.n	8008e98 <_vfiprintf_r+0x13c>
 8008e6c:	9a07      	ldr	r2, [sp, #28]
 8008e6e:	4654      	mov	r4, sl
 8008e70:	2000      	movs	r0, #0
 8008e72:	f04f 0c0a 	mov.w	ip, #10
 8008e76:	4621      	mov	r1, r4
 8008e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7c:	3b30      	subs	r3, #48	; 0x30
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d94e      	bls.n	8008f20 <_vfiprintf_r+0x1c4>
 8008e82:	b1b0      	cbz	r0, 8008eb2 <_vfiprintf_r+0x156>
 8008e84:	9207      	str	r2, [sp, #28]
 8008e86:	e014      	b.n	8008eb2 <_vfiprintf_r+0x156>
 8008e88:	eba0 0308 	sub.w	r3, r0, r8
 8008e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	46a2      	mov	sl, r4
 8008e96:	e7d2      	b.n	8008e3e <_vfiprintf_r+0xe2>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	1d19      	adds	r1, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfbb      	ittet	lt
 8008ea4:	425b      	neglt	r3, r3
 8008ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eaa:	9307      	strge	r3, [sp, #28]
 8008eac:	9307      	strlt	r3, [sp, #28]
 8008eae:	bfb8      	it	lt
 8008eb0:	9204      	strlt	r2, [sp, #16]
 8008eb2:	7823      	ldrb	r3, [r4, #0]
 8008eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb6:	d10c      	bne.n	8008ed2 <_vfiprintf_r+0x176>
 8008eb8:	7863      	ldrb	r3, [r4, #1]
 8008eba:	2b2a      	cmp	r3, #42	; 0x2a
 8008ebc:	d135      	bne.n	8008f2a <_vfiprintf_r+0x1ce>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	9203      	str	r2, [sp, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfb8      	it	lt
 8008eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ece:	3402      	adds	r4, #2
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fb8 <_vfiprintf_r+0x25c>
 8008ed6:	7821      	ldrb	r1, [r4, #0]
 8008ed8:	2203      	movs	r2, #3
 8008eda:	4650      	mov	r0, sl
 8008edc:	f7f7 f9a0 	bl	8000220 <memchr>
 8008ee0:	b140      	cbz	r0, 8008ef4 <_vfiprintf_r+0x198>
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	eba0 000a 	sub.w	r0, r0, sl
 8008ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4303      	orrs	r3, r0
 8008ef0:	3401      	adds	r4, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	482c      	ldr	r0, [pc, #176]	; (8008fac <_vfiprintf_r+0x250>)
 8008efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008efe:	2206      	movs	r2, #6
 8008f00:	f7f7 f98e 	bl	8000220 <memchr>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d03f      	beq.n	8008f88 <_vfiprintf_r+0x22c>
 8008f08:	4b29      	ldr	r3, [pc, #164]	; (8008fb0 <_vfiprintf_r+0x254>)
 8008f0a:	bb1b      	cbnz	r3, 8008f54 <_vfiprintf_r+0x1f8>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	3307      	adds	r3, #7
 8008f10:	f023 0307 	bic.w	r3, r3, #7
 8008f14:	3308      	adds	r3, #8
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1a:	443b      	add	r3, r7
 8008f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1e:	e767      	b.n	8008df0 <_vfiprintf_r+0x94>
 8008f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f24:	460c      	mov	r4, r1
 8008f26:	2001      	movs	r0, #1
 8008f28:	e7a5      	b.n	8008e76 <_vfiprintf_r+0x11a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	9305      	str	r3, [sp, #20]
 8008f30:	4619      	mov	r1, r3
 8008f32:	f04f 0c0a 	mov.w	ip, #10
 8008f36:	4620      	mov	r0, r4
 8008f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f3c:	3a30      	subs	r2, #48	; 0x30
 8008f3e:	2a09      	cmp	r2, #9
 8008f40:	d903      	bls.n	8008f4a <_vfiprintf_r+0x1ee>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0c5      	beq.n	8008ed2 <_vfiprintf_r+0x176>
 8008f46:	9105      	str	r1, [sp, #20]
 8008f48:	e7c3      	b.n	8008ed2 <_vfiprintf_r+0x176>
 8008f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4e:	4604      	mov	r4, r0
 8008f50:	2301      	movs	r3, #1
 8008f52:	e7f0      	b.n	8008f36 <_vfiprintf_r+0x1da>
 8008f54:	ab03      	add	r3, sp, #12
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4b16      	ldr	r3, [pc, #88]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f5c:	a904      	add	r1, sp, #16
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7fd fdd8 	bl	8006b14 <_printf_float>
 8008f64:	4607      	mov	r7, r0
 8008f66:	1c78      	adds	r0, r7, #1
 8008f68:	d1d6      	bne.n	8008f18 <_vfiprintf_r+0x1bc>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6c:	07d9      	lsls	r1, r3, #31
 8008f6e:	d405      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f70:	89ab      	ldrh	r3, [r5, #12]
 8008f72:	059a      	lsls	r2, r3, #22
 8008f74:	d402      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f78:	f000 faaf 	bl	80094da <__retarget_lock_release_recursive>
 8008f7c:	89ab      	ldrh	r3, [r5, #12]
 8008f7e:	065b      	lsls	r3, r3, #25
 8008f80:	f53f af12 	bmi.w	8008da8 <_vfiprintf_r+0x4c>
 8008f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f86:	e711      	b.n	8008dac <_vfiprintf_r+0x50>
 8008f88:	ab03      	add	r3, sp, #12
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f90:	a904      	add	r1, sp, #16
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7fe f862 	bl	800705c <_printf_i>
 8008f98:	e7e4      	b.n	8008f64 <_vfiprintf_r+0x208>
 8008f9a:	bf00      	nop
 8008f9c:	08009bac 	.word	0x08009bac
 8008fa0:	08009bcc 	.word	0x08009bcc
 8008fa4:	08009b8c 	.word	0x08009b8c
 8008fa8:	08009a34 	.word	0x08009a34
 8008fac:	08009a3e 	.word	0x08009a3e
 8008fb0:	08006b15 	.word	0x08006b15
 8008fb4:	08008d39 	.word	0x08008d39
 8008fb8:	08009a3a 	.word	0x08009a3a

08008fbc <__swbuf_r>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	460e      	mov	r6, r1
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	b118      	cbz	r0, 8008fce <__swbuf_r+0x12>
 8008fc6:	6983      	ldr	r3, [r0, #24]
 8008fc8:	b90b      	cbnz	r3, 8008fce <__swbuf_r+0x12>
 8008fca:	f000 f9e7 	bl	800939c <__sinit>
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <__swbuf_r+0x98>)
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d12b      	bne.n	800902c <__swbuf_r+0x70>
 8008fd4:	686c      	ldr	r4, [r5, #4]
 8008fd6:	69a3      	ldr	r3, [r4, #24]
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	071a      	lsls	r2, r3, #28
 8008fde:	d52f      	bpl.n	8009040 <__swbuf_r+0x84>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	b36b      	cbz	r3, 8009040 <__swbuf_r+0x84>
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	6963      	ldr	r3, [r4, #20]
 8008fec:	b2f6      	uxtb	r6, r6
 8008fee:	4283      	cmp	r3, r0
 8008ff0:	4637      	mov	r7, r6
 8008ff2:	dc04      	bgt.n	8008ffe <__swbuf_r+0x42>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 f93c 	bl	8009274 <_fflush_r>
 8008ffc:	bb30      	cbnz	r0, 800904c <__swbuf_r+0x90>
 8008ffe:	68a3      	ldr	r3, [r4, #8]
 8009000:	3b01      	subs	r3, #1
 8009002:	60a3      	str	r3, [r4, #8]
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	6022      	str	r2, [r4, #0]
 800900a:	701e      	strb	r6, [r3, #0]
 800900c:	6963      	ldr	r3, [r4, #20]
 800900e:	3001      	adds	r0, #1
 8009010:	4283      	cmp	r3, r0
 8009012:	d004      	beq.n	800901e <__swbuf_r+0x62>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	07db      	lsls	r3, r3, #31
 8009018:	d506      	bpl.n	8009028 <__swbuf_r+0x6c>
 800901a:	2e0a      	cmp	r6, #10
 800901c:	d104      	bne.n	8009028 <__swbuf_r+0x6c>
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f000 f927 	bl	8009274 <_fflush_r>
 8009026:	b988      	cbnz	r0, 800904c <__swbuf_r+0x90>
 8009028:	4638      	mov	r0, r7
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <__swbuf_r+0x9c>)
 800902e:	429c      	cmp	r4, r3
 8009030:	d101      	bne.n	8009036 <__swbuf_r+0x7a>
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	e7cf      	b.n	8008fd6 <__swbuf_r+0x1a>
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <__swbuf_r+0xa0>)
 8009038:	429c      	cmp	r4, r3
 800903a:	bf08      	it	eq
 800903c:	68ec      	ldreq	r4, [r5, #12]
 800903e:	e7ca      	b.n	8008fd6 <__swbuf_r+0x1a>
 8009040:	4621      	mov	r1, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f81a 	bl	800907c <__swsetup_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0cb      	beq.n	8008fe4 <__swbuf_r+0x28>
 800904c:	f04f 37ff 	mov.w	r7, #4294967295
 8009050:	e7ea      	b.n	8009028 <__swbuf_r+0x6c>
 8009052:	bf00      	nop
 8009054:	08009bac 	.word	0x08009bac
 8009058:	08009bcc 	.word	0x08009bcc
 800905c:	08009b8c 	.word	0x08009b8c

08009060 <__ascii_wctomb>:
 8009060:	b149      	cbz	r1, 8009076 <__ascii_wctomb+0x16>
 8009062:	2aff      	cmp	r2, #255	; 0xff
 8009064:	bf85      	ittet	hi
 8009066:	238a      	movhi	r3, #138	; 0x8a
 8009068:	6003      	strhi	r3, [r0, #0]
 800906a:	700a      	strbls	r2, [r1, #0]
 800906c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009070:	bf98      	it	ls
 8009072:	2001      	movls	r0, #1
 8009074:	4770      	bx	lr
 8009076:	4608      	mov	r0, r1
 8009078:	4770      	bx	lr
	...

0800907c <__swsetup_r>:
 800907c:	4b32      	ldr	r3, [pc, #200]	; (8009148 <__swsetup_r+0xcc>)
 800907e:	b570      	push	{r4, r5, r6, lr}
 8009080:	681d      	ldr	r5, [r3, #0]
 8009082:	4606      	mov	r6, r0
 8009084:	460c      	mov	r4, r1
 8009086:	b125      	cbz	r5, 8009092 <__swsetup_r+0x16>
 8009088:	69ab      	ldr	r3, [r5, #24]
 800908a:	b913      	cbnz	r3, 8009092 <__swsetup_r+0x16>
 800908c:	4628      	mov	r0, r5
 800908e:	f000 f985 	bl	800939c <__sinit>
 8009092:	4b2e      	ldr	r3, [pc, #184]	; (800914c <__swsetup_r+0xd0>)
 8009094:	429c      	cmp	r4, r3
 8009096:	d10f      	bne.n	80090b8 <__swsetup_r+0x3c>
 8009098:	686c      	ldr	r4, [r5, #4]
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090a0:	0719      	lsls	r1, r3, #28
 80090a2:	d42c      	bmi.n	80090fe <__swsetup_r+0x82>
 80090a4:	06dd      	lsls	r5, r3, #27
 80090a6:	d411      	bmi.n	80090cc <__swsetup_r+0x50>
 80090a8:	2309      	movs	r3, #9
 80090aa:	6033      	str	r3, [r6, #0]
 80090ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	e03e      	b.n	8009136 <__swsetup_r+0xba>
 80090b8:	4b25      	ldr	r3, [pc, #148]	; (8009150 <__swsetup_r+0xd4>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d101      	bne.n	80090c2 <__swsetup_r+0x46>
 80090be:	68ac      	ldr	r4, [r5, #8]
 80090c0:	e7eb      	b.n	800909a <__swsetup_r+0x1e>
 80090c2:	4b24      	ldr	r3, [pc, #144]	; (8009154 <__swsetup_r+0xd8>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	bf08      	it	eq
 80090c8:	68ec      	ldreq	r4, [r5, #12]
 80090ca:	e7e6      	b.n	800909a <__swsetup_r+0x1e>
 80090cc:	0758      	lsls	r0, r3, #29
 80090ce:	d512      	bpl.n	80090f6 <__swsetup_r+0x7a>
 80090d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d2:	b141      	cbz	r1, 80090e6 <__swsetup_r+0x6a>
 80090d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d8:	4299      	cmp	r1, r3
 80090da:	d002      	beq.n	80090e2 <__swsetup_r+0x66>
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff fb31 	bl	8008744 <_free_r>
 80090e2:	2300      	movs	r3, #0
 80090e4:	6363      	str	r3, [r4, #52]	; 0x34
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090ec:	81a3      	strh	r3, [r4, #12]
 80090ee:	2300      	movs	r3, #0
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f043 0308 	orr.w	r3, r3, #8
 80090fc:	81a3      	strh	r3, [r4, #12]
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	b94b      	cbnz	r3, 8009116 <__swsetup_r+0x9a>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800910c:	d003      	beq.n	8009116 <__swsetup_r+0x9a>
 800910e:	4621      	mov	r1, r4
 8009110:	4630      	mov	r0, r6
 8009112:	f000 fa09 	bl	8009528 <__smakebuf_r>
 8009116:	89a0      	ldrh	r0, [r4, #12]
 8009118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800911c:	f010 0301 	ands.w	r3, r0, #1
 8009120:	d00a      	beq.n	8009138 <__swsetup_r+0xbc>
 8009122:	2300      	movs	r3, #0
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6963      	ldr	r3, [r4, #20]
 8009128:	425b      	negs	r3, r3
 800912a:	61a3      	str	r3, [r4, #24]
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	b943      	cbnz	r3, 8009142 <__swsetup_r+0xc6>
 8009130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009134:	d1ba      	bne.n	80090ac <__swsetup_r+0x30>
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	0781      	lsls	r1, r0, #30
 800913a:	bf58      	it	pl
 800913c:	6963      	ldrpl	r3, [r4, #20]
 800913e:	60a3      	str	r3, [r4, #8]
 8009140:	e7f4      	b.n	800912c <__swsetup_r+0xb0>
 8009142:	2000      	movs	r0, #0
 8009144:	e7f7      	b.n	8009136 <__swsetup_r+0xba>
 8009146:	bf00      	nop
 8009148:	2000000c 	.word	0x2000000c
 800914c:	08009bac 	.word	0x08009bac
 8009150:	08009bcc 	.word	0x08009bcc
 8009154:	08009b8c 	.word	0x08009b8c

08009158 <abort>:
 8009158:	b508      	push	{r3, lr}
 800915a:	2006      	movs	r0, #6
 800915c:	f000 fa54 	bl	8009608 <raise>
 8009160:	2001      	movs	r0, #1
 8009162:	f7f9 f9ff 	bl	8002564 <_exit>
	...

08009168 <__sflush_r>:
 8009168:	898a      	ldrh	r2, [r1, #12]
 800916a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916e:	4605      	mov	r5, r0
 8009170:	0710      	lsls	r0, r2, #28
 8009172:	460c      	mov	r4, r1
 8009174:	d458      	bmi.n	8009228 <__sflush_r+0xc0>
 8009176:	684b      	ldr	r3, [r1, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dc05      	bgt.n	8009188 <__sflush_r+0x20>
 800917c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	dc02      	bgt.n	8009188 <__sflush_r+0x20>
 8009182:	2000      	movs	r0, #0
 8009184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800918a:	2e00      	cmp	r6, #0
 800918c:	d0f9      	beq.n	8009182 <__sflush_r+0x1a>
 800918e:	2300      	movs	r3, #0
 8009190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009194:	682f      	ldr	r7, [r5, #0]
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	d032      	beq.n	8009200 <__sflush_r+0x98>
 800919a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	075a      	lsls	r2, r3, #29
 80091a0:	d505      	bpl.n	80091ae <__sflush_r+0x46>
 80091a2:	6863      	ldr	r3, [r4, #4]
 80091a4:	1ac0      	subs	r0, r0, r3
 80091a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091a8:	b10b      	cbz	r3, 80091ae <__sflush_r+0x46>
 80091aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091ac:	1ac0      	subs	r0, r0, r3
 80091ae:	2300      	movs	r3, #0
 80091b0:	4602      	mov	r2, r0
 80091b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091b4:	6a21      	ldr	r1, [r4, #32]
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b0      	blx	r6
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	d106      	bne.n	80091ce <__sflush_r+0x66>
 80091c0:	6829      	ldr	r1, [r5, #0]
 80091c2:	291d      	cmp	r1, #29
 80091c4:	d82c      	bhi.n	8009220 <__sflush_r+0xb8>
 80091c6:	4a2a      	ldr	r2, [pc, #168]	; (8009270 <__sflush_r+0x108>)
 80091c8:	40ca      	lsrs	r2, r1
 80091ca:	07d6      	lsls	r6, r2, #31
 80091cc:	d528      	bpl.n	8009220 <__sflush_r+0xb8>
 80091ce:	2200      	movs	r2, #0
 80091d0:	6062      	str	r2, [r4, #4]
 80091d2:	04d9      	lsls	r1, r3, #19
 80091d4:	6922      	ldr	r2, [r4, #16]
 80091d6:	6022      	str	r2, [r4, #0]
 80091d8:	d504      	bpl.n	80091e4 <__sflush_r+0x7c>
 80091da:	1c42      	adds	r2, r0, #1
 80091dc:	d101      	bne.n	80091e2 <__sflush_r+0x7a>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	b903      	cbnz	r3, 80091e4 <__sflush_r+0x7c>
 80091e2:	6560      	str	r0, [r4, #84]	; 0x54
 80091e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e6:	602f      	str	r7, [r5, #0]
 80091e8:	2900      	cmp	r1, #0
 80091ea:	d0ca      	beq.n	8009182 <__sflush_r+0x1a>
 80091ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091f0:	4299      	cmp	r1, r3
 80091f2:	d002      	beq.n	80091fa <__sflush_r+0x92>
 80091f4:	4628      	mov	r0, r5
 80091f6:	f7ff faa5 	bl	8008744 <_free_r>
 80091fa:	2000      	movs	r0, #0
 80091fc:	6360      	str	r0, [r4, #52]	; 0x34
 80091fe:	e7c1      	b.n	8009184 <__sflush_r+0x1c>
 8009200:	6a21      	ldr	r1, [r4, #32]
 8009202:	2301      	movs	r3, #1
 8009204:	4628      	mov	r0, r5
 8009206:	47b0      	blx	r6
 8009208:	1c41      	adds	r1, r0, #1
 800920a:	d1c7      	bne.n	800919c <__sflush_r+0x34>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0c4      	beq.n	800919c <__sflush_r+0x34>
 8009212:	2b1d      	cmp	r3, #29
 8009214:	d001      	beq.n	800921a <__sflush_r+0xb2>
 8009216:	2b16      	cmp	r3, #22
 8009218:	d101      	bne.n	800921e <__sflush_r+0xb6>
 800921a:	602f      	str	r7, [r5, #0]
 800921c:	e7b1      	b.n	8009182 <__sflush_r+0x1a>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	e7ad      	b.n	8009184 <__sflush_r+0x1c>
 8009228:	690f      	ldr	r7, [r1, #16]
 800922a:	2f00      	cmp	r7, #0
 800922c:	d0a9      	beq.n	8009182 <__sflush_r+0x1a>
 800922e:	0793      	lsls	r3, r2, #30
 8009230:	680e      	ldr	r6, [r1, #0]
 8009232:	bf08      	it	eq
 8009234:	694b      	ldreq	r3, [r1, #20]
 8009236:	600f      	str	r7, [r1, #0]
 8009238:	bf18      	it	ne
 800923a:	2300      	movne	r3, #0
 800923c:	eba6 0807 	sub.w	r8, r6, r7
 8009240:	608b      	str	r3, [r1, #8]
 8009242:	f1b8 0f00 	cmp.w	r8, #0
 8009246:	dd9c      	ble.n	8009182 <__sflush_r+0x1a>
 8009248:	6a21      	ldr	r1, [r4, #32]
 800924a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800924c:	4643      	mov	r3, r8
 800924e:	463a      	mov	r2, r7
 8009250:	4628      	mov	r0, r5
 8009252:	47b0      	blx	r6
 8009254:	2800      	cmp	r0, #0
 8009256:	dc06      	bgt.n	8009266 <__sflush_r+0xfe>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	e78e      	b.n	8009184 <__sflush_r+0x1c>
 8009266:	4407      	add	r7, r0
 8009268:	eba8 0800 	sub.w	r8, r8, r0
 800926c:	e7e9      	b.n	8009242 <__sflush_r+0xda>
 800926e:	bf00      	nop
 8009270:	20400001 	.word	0x20400001

08009274 <_fflush_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	690b      	ldr	r3, [r1, #16]
 8009278:	4605      	mov	r5, r0
 800927a:	460c      	mov	r4, r1
 800927c:	b913      	cbnz	r3, 8009284 <_fflush_r+0x10>
 800927e:	2500      	movs	r5, #0
 8009280:	4628      	mov	r0, r5
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	b118      	cbz	r0, 800928e <_fflush_r+0x1a>
 8009286:	6983      	ldr	r3, [r0, #24]
 8009288:	b90b      	cbnz	r3, 800928e <_fflush_r+0x1a>
 800928a:	f000 f887 	bl	800939c <__sinit>
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <_fflush_r+0x6c>)
 8009290:	429c      	cmp	r4, r3
 8009292:	d11b      	bne.n	80092cc <_fflush_r+0x58>
 8009294:	686c      	ldr	r4, [r5, #4]
 8009296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0ef      	beq.n	800927e <_fflush_r+0xa>
 800929e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092a0:	07d0      	lsls	r0, r2, #31
 80092a2:	d404      	bmi.n	80092ae <_fflush_r+0x3a>
 80092a4:	0599      	lsls	r1, r3, #22
 80092a6:	d402      	bmi.n	80092ae <_fflush_r+0x3a>
 80092a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092aa:	f000 f915 	bl	80094d8 <__retarget_lock_acquire_recursive>
 80092ae:	4628      	mov	r0, r5
 80092b0:	4621      	mov	r1, r4
 80092b2:	f7ff ff59 	bl	8009168 <__sflush_r>
 80092b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092b8:	07da      	lsls	r2, r3, #31
 80092ba:	4605      	mov	r5, r0
 80092bc:	d4e0      	bmi.n	8009280 <_fflush_r+0xc>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	059b      	lsls	r3, r3, #22
 80092c2:	d4dd      	bmi.n	8009280 <_fflush_r+0xc>
 80092c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092c6:	f000 f908 	bl	80094da <__retarget_lock_release_recursive>
 80092ca:	e7d9      	b.n	8009280 <_fflush_r+0xc>
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <_fflush_r+0x70>)
 80092ce:	429c      	cmp	r4, r3
 80092d0:	d101      	bne.n	80092d6 <_fflush_r+0x62>
 80092d2:	68ac      	ldr	r4, [r5, #8]
 80092d4:	e7df      	b.n	8009296 <_fflush_r+0x22>
 80092d6:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <_fflush_r+0x74>)
 80092d8:	429c      	cmp	r4, r3
 80092da:	bf08      	it	eq
 80092dc:	68ec      	ldreq	r4, [r5, #12]
 80092de:	e7da      	b.n	8009296 <_fflush_r+0x22>
 80092e0:	08009bac 	.word	0x08009bac
 80092e4:	08009bcc 	.word	0x08009bcc
 80092e8:	08009b8c 	.word	0x08009b8c

080092ec <std>:
 80092ec:	2300      	movs	r3, #0
 80092ee:	b510      	push	{r4, lr}
 80092f0:	4604      	mov	r4, r0
 80092f2:	e9c0 3300 	strd	r3, r3, [r0]
 80092f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092fa:	6083      	str	r3, [r0, #8]
 80092fc:	8181      	strh	r1, [r0, #12]
 80092fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009300:	81c2      	strh	r2, [r0, #14]
 8009302:	6183      	str	r3, [r0, #24]
 8009304:	4619      	mov	r1, r3
 8009306:	2208      	movs	r2, #8
 8009308:	305c      	adds	r0, #92	; 0x5c
 800930a:	f7fd fb5b 	bl	80069c4 <memset>
 800930e:	4b05      	ldr	r3, [pc, #20]	; (8009324 <std+0x38>)
 8009310:	6263      	str	r3, [r4, #36]	; 0x24
 8009312:	4b05      	ldr	r3, [pc, #20]	; (8009328 <std+0x3c>)
 8009314:	62a3      	str	r3, [r4, #40]	; 0x28
 8009316:	4b05      	ldr	r3, [pc, #20]	; (800932c <std+0x40>)
 8009318:	62e3      	str	r3, [r4, #44]	; 0x2c
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <std+0x44>)
 800931c:	6224      	str	r4, [r4, #32]
 800931e:	6323      	str	r3, [r4, #48]	; 0x30
 8009320:	bd10      	pop	{r4, pc}
 8009322:	bf00      	nop
 8009324:	08009641 	.word	0x08009641
 8009328:	08009663 	.word	0x08009663
 800932c:	0800969b 	.word	0x0800969b
 8009330:	080096bf 	.word	0x080096bf

08009334 <_cleanup_r>:
 8009334:	4901      	ldr	r1, [pc, #4]	; (800933c <_cleanup_r+0x8>)
 8009336:	f000 b8af 	b.w	8009498 <_fwalk_reent>
 800933a:	bf00      	nop
 800933c:	08009275 	.word	0x08009275

08009340 <__sfmoreglue>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	2268      	movs	r2, #104	; 0x68
 8009344:	1e4d      	subs	r5, r1, #1
 8009346:	4355      	muls	r5, r2
 8009348:	460e      	mov	r6, r1
 800934a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800934e:	f7ff fa65 	bl	800881c <_malloc_r>
 8009352:	4604      	mov	r4, r0
 8009354:	b140      	cbz	r0, 8009368 <__sfmoreglue+0x28>
 8009356:	2100      	movs	r1, #0
 8009358:	e9c0 1600 	strd	r1, r6, [r0]
 800935c:	300c      	adds	r0, #12
 800935e:	60a0      	str	r0, [r4, #8]
 8009360:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009364:	f7fd fb2e 	bl	80069c4 <memset>
 8009368:	4620      	mov	r0, r4
 800936a:	bd70      	pop	{r4, r5, r6, pc}

0800936c <__sfp_lock_acquire>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sfp_lock_acquire+0x8>)
 800936e:	f000 b8b3 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20000611 	.word	0x20000611

08009378 <__sfp_lock_release>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__sfp_lock_release+0x8>)
 800937a:	f000 b8ae 	b.w	80094da <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20000611 	.word	0x20000611

08009384 <__sinit_lock_acquire>:
 8009384:	4801      	ldr	r0, [pc, #4]	; (800938c <__sinit_lock_acquire+0x8>)
 8009386:	f000 b8a7 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 800938a:	bf00      	nop
 800938c:	20000612 	.word	0x20000612

08009390 <__sinit_lock_release>:
 8009390:	4801      	ldr	r0, [pc, #4]	; (8009398 <__sinit_lock_release+0x8>)
 8009392:	f000 b8a2 	b.w	80094da <__retarget_lock_release_recursive>
 8009396:	bf00      	nop
 8009398:	20000612 	.word	0x20000612

0800939c <__sinit>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	f7ff fff0 	bl	8009384 <__sinit_lock_acquire>
 80093a4:	69a3      	ldr	r3, [r4, #24]
 80093a6:	b11b      	cbz	r3, 80093b0 <__sinit+0x14>
 80093a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ac:	f7ff bff0 	b.w	8009390 <__sinit_lock_release>
 80093b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093b4:	6523      	str	r3, [r4, #80]	; 0x50
 80093b6:	4b13      	ldr	r3, [pc, #76]	; (8009404 <__sinit+0x68>)
 80093b8:	4a13      	ldr	r2, [pc, #76]	; (8009408 <__sinit+0x6c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80093be:	42a3      	cmp	r3, r4
 80093c0:	bf04      	itt	eq
 80093c2:	2301      	moveq	r3, #1
 80093c4:	61a3      	streq	r3, [r4, #24]
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 f820 	bl	800940c <__sfp>
 80093cc:	6060      	str	r0, [r4, #4]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 f81c 	bl	800940c <__sfp>
 80093d4:	60a0      	str	r0, [r4, #8]
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 f818 	bl	800940c <__sfp>
 80093dc:	2200      	movs	r2, #0
 80093de:	60e0      	str	r0, [r4, #12]
 80093e0:	2104      	movs	r1, #4
 80093e2:	6860      	ldr	r0, [r4, #4]
 80093e4:	f7ff ff82 	bl	80092ec <std>
 80093e8:	68a0      	ldr	r0, [r4, #8]
 80093ea:	2201      	movs	r2, #1
 80093ec:	2109      	movs	r1, #9
 80093ee:	f7ff ff7d 	bl	80092ec <std>
 80093f2:	68e0      	ldr	r0, [r4, #12]
 80093f4:	2202      	movs	r2, #2
 80093f6:	2112      	movs	r1, #18
 80093f8:	f7ff ff78 	bl	80092ec <std>
 80093fc:	2301      	movs	r3, #1
 80093fe:	61a3      	str	r3, [r4, #24]
 8009400:	e7d2      	b.n	80093a8 <__sinit+0xc>
 8009402:	bf00      	nop
 8009404:	08009814 	.word	0x08009814
 8009408:	08009335 	.word	0x08009335

0800940c <__sfp>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	4607      	mov	r7, r0
 8009410:	f7ff ffac 	bl	800936c <__sfp_lock_acquire>
 8009414:	4b1e      	ldr	r3, [pc, #120]	; (8009490 <__sfp+0x84>)
 8009416:	681e      	ldr	r6, [r3, #0]
 8009418:	69b3      	ldr	r3, [r6, #24]
 800941a:	b913      	cbnz	r3, 8009422 <__sfp+0x16>
 800941c:	4630      	mov	r0, r6
 800941e:	f7ff ffbd 	bl	800939c <__sinit>
 8009422:	3648      	adds	r6, #72	; 0x48
 8009424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009428:	3b01      	subs	r3, #1
 800942a:	d503      	bpl.n	8009434 <__sfp+0x28>
 800942c:	6833      	ldr	r3, [r6, #0]
 800942e:	b30b      	cbz	r3, 8009474 <__sfp+0x68>
 8009430:	6836      	ldr	r6, [r6, #0]
 8009432:	e7f7      	b.n	8009424 <__sfp+0x18>
 8009434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009438:	b9d5      	cbnz	r5, 8009470 <__sfp+0x64>
 800943a:	4b16      	ldr	r3, [pc, #88]	; (8009494 <__sfp+0x88>)
 800943c:	60e3      	str	r3, [r4, #12]
 800943e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009442:	6665      	str	r5, [r4, #100]	; 0x64
 8009444:	f000 f847 	bl	80094d6 <__retarget_lock_init_recursive>
 8009448:	f7ff ff96 	bl	8009378 <__sfp_lock_release>
 800944c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009450:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009454:	6025      	str	r5, [r4, #0]
 8009456:	61a5      	str	r5, [r4, #24]
 8009458:	2208      	movs	r2, #8
 800945a:	4629      	mov	r1, r5
 800945c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009460:	f7fd fab0 	bl	80069c4 <memset>
 8009464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800946c:	4620      	mov	r0, r4
 800946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009470:	3468      	adds	r4, #104	; 0x68
 8009472:	e7d9      	b.n	8009428 <__sfp+0x1c>
 8009474:	2104      	movs	r1, #4
 8009476:	4638      	mov	r0, r7
 8009478:	f7ff ff62 	bl	8009340 <__sfmoreglue>
 800947c:	4604      	mov	r4, r0
 800947e:	6030      	str	r0, [r6, #0]
 8009480:	2800      	cmp	r0, #0
 8009482:	d1d5      	bne.n	8009430 <__sfp+0x24>
 8009484:	f7ff ff78 	bl	8009378 <__sfp_lock_release>
 8009488:	230c      	movs	r3, #12
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	e7ee      	b.n	800946c <__sfp+0x60>
 800948e:	bf00      	nop
 8009490:	08009814 	.word	0x08009814
 8009494:	ffff0001 	.word	0xffff0001

08009498 <_fwalk_reent>:
 8009498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800949c:	4606      	mov	r6, r0
 800949e:	4688      	mov	r8, r1
 80094a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094a4:	2700      	movs	r7, #0
 80094a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094aa:	f1b9 0901 	subs.w	r9, r9, #1
 80094ae:	d505      	bpl.n	80094bc <_fwalk_reent+0x24>
 80094b0:	6824      	ldr	r4, [r4, #0]
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	d1f7      	bne.n	80094a6 <_fwalk_reent+0xe>
 80094b6:	4638      	mov	r0, r7
 80094b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094bc:	89ab      	ldrh	r3, [r5, #12]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d907      	bls.n	80094d2 <_fwalk_reent+0x3a>
 80094c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094c6:	3301      	adds	r3, #1
 80094c8:	d003      	beq.n	80094d2 <_fwalk_reent+0x3a>
 80094ca:	4629      	mov	r1, r5
 80094cc:	4630      	mov	r0, r6
 80094ce:	47c0      	blx	r8
 80094d0:	4307      	orrs	r7, r0
 80094d2:	3568      	adds	r5, #104	; 0x68
 80094d4:	e7e9      	b.n	80094aa <_fwalk_reent+0x12>

080094d6 <__retarget_lock_init_recursive>:
 80094d6:	4770      	bx	lr

080094d8 <__retarget_lock_acquire_recursive>:
 80094d8:	4770      	bx	lr

080094da <__retarget_lock_release_recursive>:
 80094da:	4770      	bx	lr

080094dc <__swhatbuf_r>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	460e      	mov	r6, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	2900      	cmp	r1, #0
 80094e6:	b096      	sub	sp, #88	; 0x58
 80094e8:	4614      	mov	r4, r2
 80094ea:	461d      	mov	r5, r3
 80094ec:	da08      	bge.n	8009500 <__swhatbuf_r+0x24>
 80094ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	602a      	str	r2, [r5, #0]
 80094f6:	061a      	lsls	r2, r3, #24
 80094f8:	d410      	bmi.n	800951c <__swhatbuf_r+0x40>
 80094fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094fe:	e00e      	b.n	800951e <__swhatbuf_r+0x42>
 8009500:	466a      	mov	r2, sp
 8009502:	f000 f903 	bl	800970c <_fstat_r>
 8009506:	2800      	cmp	r0, #0
 8009508:	dbf1      	blt.n	80094ee <__swhatbuf_r+0x12>
 800950a:	9a01      	ldr	r2, [sp, #4]
 800950c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009510:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009514:	425a      	negs	r2, r3
 8009516:	415a      	adcs	r2, r3
 8009518:	602a      	str	r2, [r5, #0]
 800951a:	e7ee      	b.n	80094fa <__swhatbuf_r+0x1e>
 800951c:	2340      	movs	r3, #64	; 0x40
 800951e:	2000      	movs	r0, #0
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	b016      	add	sp, #88	; 0x58
 8009524:	bd70      	pop	{r4, r5, r6, pc}
	...

08009528 <__smakebuf_r>:
 8009528:	898b      	ldrh	r3, [r1, #12]
 800952a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800952c:	079d      	lsls	r5, r3, #30
 800952e:	4606      	mov	r6, r0
 8009530:	460c      	mov	r4, r1
 8009532:	d507      	bpl.n	8009544 <__smakebuf_r+0x1c>
 8009534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	6123      	str	r3, [r4, #16]
 800953c:	2301      	movs	r3, #1
 800953e:	6163      	str	r3, [r4, #20]
 8009540:	b002      	add	sp, #8
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	ab01      	add	r3, sp, #4
 8009546:	466a      	mov	r2, sp
 8009548:	f7ff ffc8 	bl	80094dc <__swhatbuf_r>
 800954c:	9900      	ldr	r1, [sp, #0]
 800954e:	4605      	mov	r5, r0
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff f963 	bl	800881c <_malloc_r>
 8009556:	b948      	cbnz	r0, 800956c <__smakebuf_r+0x44>
 8009558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d4ef      	bmi.n	8009540 <__smakebuf_r+0x18>
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	f043 0302 	orr.w	r3, r3, #2
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	e7e3      	b.n	8009534 <__smakebuf_r+0xc>
 800956c:	4b0d      	ldr	r3, [pc, #52]	; (80095a4 <__smakebuf_r+0x7c>)
 800956e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	6020      	str	r0, [r4, #0]
 8009574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	9b00      	ldr	r3, [sp, #0]
 800957c:	6163      	str	r3, [r4, #20]
 800957e:	9b01      	ldr	r3, [sp, #4]
 8009580:	6120      	str	r0, [r4, #16]
 8009582:	b15b      	cbz	r3, 800959c <__smakebuf_r+0x74>
 8009584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009588:	4630      	mov	r0, r6
 800958a:	f000 f8d1 	bl	8009730 <_isatty_r>
 800958e:	b128      	cbz	r0, 800959c <__smakebuf_r+0x74>
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	f023 0303 	bic.w	r3, r3, #3
 8009596:	f043 0301 	orr.w	r3, r3, #1
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	89a0      	ldrh	r0, [r4, #12]
 800959e:	4305      	orrs	r5, r0
 80095a0:	81a5      	strh	r5, [r4, #12]
 80095a2:	e7cd      	b.n	8009540 <__smakebuf_r+0x18>
 80095a4:	08009335 	.word	0x08009335

080095a8 <_malloc_usable_size_r>:
 80095a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ac:	1f18      	subs	r0, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bfbc      	itt	lt
 80095b2:	580b      	ldrlt	r3, [r1, r0]
 80095b4:	18c0      	addlt	r0, r0, r3
 80095b6:	4770      	bx	lr

080095b8 <_raise_r>:
 80095b8:	291f      	cmp	r1, #31
 80095ba:	b538      	push	{r3, r4, r5, lr}
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	d904      	bls.n	80095cc <_raise_r+0x14>
 80095c2:	2316      	movs	r3, #22
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095ce:	b112      	cbz	r2, 80095d6 <_raise_r+0x1e>
 80095d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095d4:	b94b      	cbnz	r3, 80095ea <_raise_r+0x32>
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 f830 	bl	800963c <_getpid_r>
 80095dc:	462a      	mov	r2, r5
 80095de:	4601      	mov	r1, r0
 80095e0:	4620      	mov	r0, r4
 80095e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e6:	f000 b817 	b.w	8009618 <_kill_r>
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d00a      	beq.n	8009604 <_raise_r+0x4c>
 80095ee:	1c59      	adds	r1, r3, #1
 80095f0:	d103      	bne.n	80095fa <_raise_r+0x42>
 80095f2:	2316      	movs	r3, #22
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	2001      	movs	r0, #1
 80095f8:	e7e7      	b.n	80095ca <_raise_r+0x12>
 80095fa:	2400      	movs	r4, #0
 80095fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009600:	4628      	mov	r0, r5
 8009602:	4798      	blx	r3
 8009604:	2000      	movs	r0, #0
 8009606:	e7e0      	b.n	80095ca <_raise_r+0x12>

08009608 <raise>:
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <raise+0xc>)
 800960a:	4601      	mov	r1, r0
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f7ff bfd3 	b.w	80095b8 <_raise_r>
 8009612:	bf00      	nop
 8009614:	2000000c 	.word	0x2000000c

08009618 <_kill_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	; (8009638 <_kill_r+0x20>)
 800961c:	2300      	movs	r3, #0
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	f7f8 ff8d 	bl	8002544 <_kill>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	d102      	bne.n	8009634 <_kill_r+0x1c>
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	b103      	cbz	r3, 8009634 <_kill_r+0x1c>
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	bd38      	pop	{r3, r4, r5, pc}
 8009636:	bf00      	nop
 8009638:	2000060c 	.word	0x2000060c

0800963c <_getpid_r>:
 800963c:	f7f8 bf7a 	b.w	8002534 <_getpid>

08009640 <__sread>:
 8009640:	b510      	push	{r4, lr}
 8009642:	460c      	mov	r4, r1
 8009644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009648:	f000 f894 	bl	8009774 <_read_r>
 800964c:	2800      	cmp	r0, #0
 800964e:	bfab      	itete	ge
 8009650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009652:	89a3      	ldrhlt	r3, [r4, #12]
 8009654:	181b      	addge	r3, r3, r0
 8009656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800965a:	bfac      	ite	ge
 800965c:	6563      	strge	r3, [r4, #84]	; 0x54
 800965e:	81a3      	strhlt	r3, [r4, #12]
 8009660:	bd10      	pop	{r4, pc}

08009662 <__swrite>:
 8009662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009666:	461f      	mov	r7, r3
 8009668:	898b      	ldrh	r3, [r1, #12]
 800966a:	05db      	lsls	r3, r3, #23
 800966c:	4605      	mov	r5, r0
 800966e:	460c      	mov	r4, r1
 8009670:	4616      	mov	r6, r2
 8009672:	d505      	bpl.n	8009680 <__swrite+0x1e>
 8009674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009678:	2302      	movs	r3, #2
 800967a:	2200      	movs	r2, #0
 800967c:	f000 f868 	bl	8009750 <_lseek_r>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	4632      	mov	r2, r6
 800968e:	463b      	mov	r3, r7
 8009690:	4628      	mov	r0, r5
 8009692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	f000 b817 	b.w	80096c8 <_write_r>

0800969a <__sseek>:
 800969a:	b510      	push	{r4, lr}
 800969c:	460c      	mov	r4, r1
 800969e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a2:	f000 f855 	bl	8009750 <_lseek_r>
 80096a6:	1c43      	adds	r3, r0, #1
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	bf15      	itete	ne
 80096ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80096ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096b6:	81a3      	strheq	r3, [r4, #12]
 80096b8:	bf18      	it	ne
 80096ba:	81a3      	strhne	r3, [r4, #12]
 80096bc:	bd10      	pop	{r4, pc}

080096be <__sclose>:
 80096be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c2:	f000 b813 	b.w	80096ec <_close_r>
	...

080096c8 <_write_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d07      	ldr	r5, [pc, #28]	; (80096e8 <_write_r+0x20>)
 80096cc:	4604      	mov	r4, r0
 80096ce:	4608      	mov	r0, r1
 80096d0:	4611      	mov	r1, r2
 80096d2:	2200      	movs	r2, #0
 80096d4:	602a      	str	r2, [r5, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f7f8 ff6b 	bl	80025b2 <_write>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_write_r+0x1e>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_write_r+0x1e>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	2000060c 	.word	0x2000060c

080096ec <_close_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d06      	ldr	r5, [pc, #24]	; (8009708 <_close_r+0x1c>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f7f8 ff77 	bl	80025ea <_close>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_close_r+0x1a>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_close_r+0x1a>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	2000060c 	.word	0x2000060c

0800970c <_fstat_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d07      	ldr	r5, [pc, #28]	; (800972c <_fstat_r+0x20>)
 8009710:	2300      	movs	r3, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	4611      	mov	r1, r2
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	f7f8 ff72 	bl	8002602 <_fstat>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	d102      	bne.n	8009728 <_fstat_r+0x1c>
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	b103      	cbz	r3, 8009728 <_fstat_r+0x1c>
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	bf00      	nop
 800972c:	2000060c 	.word	0x2000060c

08009730 <_isatty_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d06      	ldr	r5, [pc, #24]	; (800974c <_isatty_r+0x1c>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	602b      	str	r3, [r5, #0]
 800973c:	f7f8 ff71 	bl	8002622 <_isatty>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_isatty_r+0x1a>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_isatty_r+0x1a>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	2000060c 	.word	0x2000060c

08009750 <_lseek_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d07      	ldr	r5, [pc, #28]	; (8009770 <_lseek_r+0x20>)
 8009754:	4604      	mov	r4, r0
 8009756:	4608      	mov	r0, r1
 8009758:	4611      	mov	r1, r2
 800975a:	2200      	movs	r2, #0
 800975c:	602a      	str	r2, [r5, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f7f8 ff6a 	bl	8002638 <_lseek>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_lseek_r+0x1e>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_lseek_r+0x1e>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	2000060c 	.word	0x2000060c

08009774 <_read_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d07      	ldr	r5, [pc, #28]	; (8009794 <_read_r+0x20>)
 8009778:	4604      	mov	r4, r0
 800977a:	4608      	mov	r0, r1
 800977c:	4611      	mov	r1, r2
 800977e:	2200      	movs	r2, #0
 8009780:	602a      	str	r2, [r5, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	f7f8 fef8 	bl	8002578 <_read>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_read_r+0x1e>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_read_r+0x1e>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	2000060c 	.word	0x2000060c

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
