
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f774  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800f948  0800f948  0001f948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010098  08010098  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08010098  08010098  00020098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100a0  080100a0  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100a0  080100a0  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100a4  080100a4  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  080100a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  20000254  080102fc  00030254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  080102fc  00030a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dc8  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003860  00000000  00000000  0004804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0004b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0004cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026317  00000000  00000000  0004dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b1d  00000000  00000000  00073f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e137f  00000000  00000000  0008ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016de0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  0016de5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000254 	.word	0x20000254
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f92c 	.word	0x0800f92c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000258 	.word	0x20000258
 800020c:	0800f92c 	.word	0x0800f92c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0c      	blt.n	8000fb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_ClearPendingIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	3360      	adds	r3, #96	; 0x60
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fcc:	f3bf 8f4f 	dsb	sy
}
 8000fd0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <__NVIC_SystemReset+0x24>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <__NVIC_SystemReset+0x24>)
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_SystemReset+0x28>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <__NVIC_SystemReset+0x20>
 8000fec:	e000ed00 	.word	0xe000ed00
 8000ff0:	05fa0004 	.word	0x05fa0004

08000ff4 <F4_Basic_Init>:
volatile uint8_t fromPC[2];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4851      	ldr	r0, [pc, #324]	; (8001150 <F4_Basic_Init+0x15c>)
 800100a:	f006 fd0b 	bl	8007a24 <HAL_GPIO_WritePin>
	LED_B(0);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	484e      	ldr	r0, [pc, #312]	; (8001150 <F4_Basic_Init+0x15c>)
 8001016:	f006 fd05 	bl	8007a24 <HAL_GPIO_WritePin>
	LED_G(0);
 800101a:	2201      	movs	r2, #1
 800101c:	2102      	movs	r1, #2
 800101e:	484c      	ldr	r0, [pc, #304]	; (8001150 <F4_Basic_Init+0x15c>)
 8001020:	f006 fd00 	bl	8007a24 <HAL_GPIO_WritePin>
	LED_Y(0);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	4849      	ldr	r0, [pc, #292]	; (8001150 <F4_Basic_Init+0x15c>)
 800102c:	f006 fcfa 	bl	8007a24 <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 8001030:	2200      	movs	r2, #0
 8001032:	2120      	movs	r1, #32
 8001034:	4847      	ldr	r0, [pc, #284]	; (8001154 <F4_Basic_Init+0x160>)
 8001036:	f006 fcf5 	bl	8007a24 <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4946      	ldr	r1, [pc, #280]	; (8001158 <F4_Basic_Init+0x164>)
 8001040:	4618      	mov	r0, r3
 8001042:	f00a ffab 	bl	800bf9c <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8e0 	bl	8000210 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 0110 	add.w	r1, r7, #16
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f009 fa35 	bl	800a4ca <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 8001060:	4b3e      	ldr	r3, [pc, #248]	; (800115c <F4_Basic_Init+0x168>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <F4_Basic_Init+0x16c>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]

	NVIC_ClearPendingIRQ(On_Board_Button_EXTI_IRQn);
 800106c:	2028      	movs	r0, #40	; 0x28
 800106e:	f7ff ff8d 	bl	8000f8c <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(B1_EXTI_IRQn);
 8001072:	200a      	movs	r0, #10
 8001074:	f7ff ff8a 	bl	8000f8c <__NVIC_ClearPendingIRQ>

	swState[0] = SW1;
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	4835      	ldr	r0, [pc, #212]	; (8001154 <F4_Basic_Init+0x160>)
 800107e:	f006 fcb9 	bl	80079f4 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <F4_Basic_Init+0x170>)
 8001088:	701a      	strb	r2, [r3, #0]
	swState[1] = SW2;
 800108a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108e:	4830      	ldr	r0, [pc, #192]	; (8001150 <F4_Basic_Init+0x15c>)
 8001090:	f006 fcb0 	bl	80079f4 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b32      	ldr	r3, [pc, #200]	; (8001164 <F4_Basic_Init+0x170>)
 800109a:	705a      	strb	r2, [r3, #1]
	if(SW2)LED_R(1);
 800109c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a0:	482b      	ldr	r0, [pc, #172]	; (8001150 <F4_Basic_Init+0x15c>)
 80010a2:	f006 fca7 	bl	80079f4 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <F4_Basic_Init+0xc6>
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b2:	4827      	ldr	r0, [pc, #156]	; (8001150 <F4_Basic_Init+0x15c>)
 80010b4:	f006 fcb6 	bl	8007a24 <HAL_GPIO_WritePin>
 80010b8:	e005      	b.n	80010c6 <F4_Basic_Init+0xd2>
	else LED_R(0);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4823      	ldr	r0, [pc, #140]	; (8001150 <F4_Basic_Init+0x15c>)
 80010c2:	f006 fcaf 	bl	8007a24 <HAL_GPIO_WritePin>

	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 80010c6:	2200      	movs	r2, #0
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <F4_Basic_Init+0x174>)
 80010ca:	4611      	mov	r1, r2
 80010cc:	7099      	strb	r1, [r3, #2]
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <F4_Basic_Init+0x174>)
 80010d0:	4611      	mov	r1, r2
 80010d2:	7059      	strb	r1, [r3, #1]
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <F4_Basic_Init+0x174>)
 80010d6:	701a      	strb	r2, [r3, #0]
	fromPC[0]=150;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <F4_Basic_Init+0x178>)
 80010da:	2296      	movs	r2, #150	; 0x96
 80010dc:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <F4_Basic_Init+0x178>)
 80010e0:	2296      	movs	r2, #150	; 0x96
 80010e2:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <F4_Basic_Init+0x17c>)
 80010e6:	2252      	movs	r2, #82	; 0x52
 80010e8:	701a      	strb	r2, [r3, #0]
	v_ref = 1000;
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <F4_Basic_Init+0x180>)
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <F4_Basic_Init+0x184>)
 80010ee:	601a      	str	r2, [r3, #0]
	v=0;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <F4_Basic_Init+0x188>)
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=680;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <F4_Basic_Init+0x18c>)
 80010fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=684;
 8001100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001104:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <F4_Basic_Init+0x190>)
 800110c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <F4_Basic_Init+0x190>)
 8001114:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001118:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f007 fb56 	bl	80087cc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 8001120:	2100      	movs	r1, #0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f007 fc14 	bl	8008950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 8001128:	2104      	movs	r1, #4
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f007 fc10 	bl	8008950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 8001130:	2100      	movs	r1, #0
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f007 fc0c 	bl	8008950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 8001138:	210c      	movs	r1, #12
 800113a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800113c:	f007 fc08 	bl	8008950 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 8001140:	213c      	movs	r1, #60	; 0x3c
 8001142:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001144:	f007 ff76 	bl	8009034 <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	//HAL_UART_Receive_IT(huart_debugg, fromPC, 2);
}
 8001148:	bf00      	nop
 800114a:	3738      	adds	r7, #56	; 0x38
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020400 	.word	0x40020400
 8001154:	40020000 	.word	0x40020000
 8001158:	0800f948 	.word	0x0800f948
 800115c:	200009b4 	.word	0x200009b4
 8001160:	200009b5 	.word	0x200009b5
 8001164:	20000270 	.word	0x20000270
 8001168:	20000274 	.word	0x20000274
 800116c:	20000278 	.word	0x20000278
 8001170:	2000027a 	.word	0x2000027a
 8001174:	2000027c 	.word	0x2000027c
 8001178:	447a0000 	.word	0x447a0000
 800117c:	20000580 	.word	0x20000580
 8001180:	40010000 	.word	0x40010000
 8001184:	40000400 	.word	0x40000400

08001188 <HDI_Read_Task>:


void HDI_Read_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
	static uint32_t hdi_read_task_tick=0;

	if(hdi_read_task_tick>tick) return;
 8001198:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <HDI_Read_Task+0x25c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	f0c0 811a 	bcc.w	80013d8 <HDI_Read_Task+0x250>
	hdi_read_task_tick = tick + period;
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a8e      	ldr	r2, [pc, #568]	; (80013e4 <HDI_Read_Task+0x25c>)
 80011ac:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	488d      	ldr	r0, [pc, #564]	; (80013e8 <HDI_Read_Task+0x260>)
 80011b4:	f006 fc1e 	bl	80079f4 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HDI_Read_Task+0x264>)
 80011be:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	488a      	ldr	r0, [pc, #552]	; (80013f0 <HDI_Read_Task+0x268>)
 80011c6:	f006 fc15 	bl	80079f4 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b87      	ldr	r3, [pc, #540]	; (80013ec <HDI_Read_Task+0x264>)
 80011d0:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <HDI_Read_Task+0x264>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d008      	beq.n	80011ec <HDI_Read_Task+0x64>
 80011da:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <HDI_Read_Task+0x26c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b3f      	cmp	r3, #63	; 0x3f
 80011e0:	d104      	bne.n	80011ec <HDI_Read_Task+0x64>
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	4882      	ldr	r0, [pc, #520]	; (80013f0 <HDI_Read_Task+0x268>)
 80011e8:	f006 fc1c 	bl	8007a24 <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 80011ec:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HDI_Read_Task+0x264>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <HDI_Read_Task+0x7e>
 80011f4:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <HDI_Read_Task+0x26c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b3f      	cmp	r3, #63	; 0x3f
 80011fa:	d104      	bne.n	8001206 <HDI_Read_Task+0x7e>
 80011fc:	2201      	movs	r2, #1
 80011fe:	2102      	movs	r1, #2
 8001200:	487b      	ldr	r0, [pc, #492]	; (80013f0 <HDI_Read_Task+0x268>)
 8001202:	f006 fc0f 	bl	8007a24 <HAL_GPIO_WritePin>
	if(swState[1]) LED_R(1);
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <HDI_Read_Task+0x264>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HDI_Read_Task+0x92>
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001214:	4876      	ldr	r0, [pc, #472]	; (80013f0 <HDI_Read_Task+0x268>)
 8001216:	f006 fc05 	bl	8007a24 <HAL_GPIO_WritePin>
	if(!swState[1]) LED_R(0);
 800121a:	4b74      	ldr	r3, [pc, #464]	; (80013ec <HDI_Read_Task+0x264>)
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <HDI_Read_Task+0xa6>
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	4871      	ldr	r0, [pc, #452]	; (80013f0 <HDI_Read_Task+0x268>)
 800122a:	f006 fbfb 	bl	8007a24 <HAL_GPIO_WritePin>

	if(bFlag[0])
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <HDI_Read_Task+0x270>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d06f      	beq.n	8001318 <HDI_Read_Task+0x190>
	{
		bFlag[0]=0;
 8001238:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <HDI_Read_Task+0x270>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
		//Milyen módban voltunk eddig?
		mode= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR;
 800123e:	4b6f      	ldr	r3, [pc, #444]	; (80013fc <HDI_Read_Task+0x274>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <HDI_Read_Task+0x26c>)
 8001246:	701a      	strb	r2, [r3, #0]

		//section 7 törlése, hogy újraírhassuk a módot jelző bytot
		HAL_FLASH_Unlock();
 8001248:	f006 f886 	bl	8007358 <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 800124c:	2102      	movs	r1, #2
 800124e:	2007      	movs	r0, #7
 8001250:	f006 f9f4 	bl	800763c <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 8001254:	f006 f8a2 	bl	800739c <HAL_FLASH_Lock>

		LED_NUCLEO(0);
 8001258:	2200      	movs	r2, #0
 800125a:	2120      	movs	r1, #32
 800125c:	4862      	ldr	r0, [pc, #392]	; (80013e8 <HDI_Read_Task+0x260>)
 800125e:	f006 fbe1 	bl	8007a24 <HAL_GPIO_WritePin>
		LED_Y(0);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001268:	4861      	ldr	r0, [pc, #388]	; (80013f0 <HDI_Read_Task+0x268>)
 800126a:	f006 fbdb 	bl	8007a24 <HAL_GPIO_WritePin>
		LED_G(0);
 800126e:	2201      	movs	r2, #1
 8001270:	2102      	movs	r1, #2
 8001272:	485f      	ldr	r0, [pc, #380]	; (80013f0 <HDI_Read_Task+0x268>)
 8001274:	f006 fbd6 	bl	8007a24 <HAL_GPIO_WritePin>
		LED_B(0);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	485c      	ldr	r0, [pc, #368]	; (80013f0 <HDI_Read_Task+0x268>)
 8001280:	f006 fbd0 	bl	8007a24 <HAL_GPIO_WritePin>
		LED_R(0);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4859      	ldr	r0, [pc, #356]	; (80013f0 <HDI_Read_Task+0x268>)
 800128c:	f006 fbca 	bl	8007a24 <HAL_GPIO_WritePin>
		int i;
		for(i=0;i<10;i++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e01c      	b.n	80012d0 <HDI_Read_Task+0x148>
		{
			LED_NUCLEO_TOGGLE;
 8001296:	2120      	movs	r1, #32
 8001298:	4853      	ldr	r0, [pc, #332]	; (80013e8 <HDI_Read_Task+0x260>)
 800129a:	f006 fbdc 	bl	8007a56 <HAL_GPIO_TogglePin>
			LED_Y_TOGGLE;
 800129e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a2:	4853      	ldr	r0, [pc, #332]	; (80013f0 <HDI_Read_Task+0x268>)
 80012a4:	f006 fbd7 	bl	8007a56 <HAL_GPIO_TogglePin>
			LED_G_TOGGLE;
 80012a8:	2102      	movs	r1, #2
 80012aa:	4851      	ldr	r0, [pc, #324]	; (80013f0 <HDI_Read_Task+0x268>)
 80012ac:	f006 fbd3 	bl	8007a56 <HAL_GPIO_TogglePin>
			LED_B_TOGGLE;
 80012b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b4:	484e      	ldr	r0, [pc, #312]	; (80013f0 <HDI_Read_Task+0x268>)
 80012b6:	f006 fbce 	bl	8007a56 <HAL_GPIO_TogglePin>
			LED_R_TOGGLE;
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	484c      	ldr	r0, [pc, #304]	; (80013f0 <HDI_Read_Task+0x268>)
 80012c0:	f006 fbc9 	bl	8007a56 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80012c4:	20c8      	movs	r0, #200	; 0xc8
 80012c6:	f004 fd13 	bl	8005cf0 <HAL_Delay>
		for(i=0;i<10;i++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	dddf      	ble.n	8001296 <HDI_Read_Task+0x10e>
		}

		//Állítsuk át a módot
		HAL_FLASH_Unlock();
 80012d6:	f006 f83f 	bl	8007358 <HAL_FLASH_Unlock>
		if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, FAST); //ha eddig skill mód volt akor msot gyors lesz
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HDI_Read_Task+0x26c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b52      	cmp	r3, #82	; 0x52
 80012e0:	d108      	bne.n	80012f4 <HDI_Read_Task+0x16c>
 80012e2:	f04f 023f 	mov.w	r2, #63	; 0x3f
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	4944      	ldr	r1, [pc, #272]	; (80013fc <HDI_Read_Task+0x274>)
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 ffdf 	bl	80072b0 <HAL_FLASH_Program>
 80012f2:	e007      	b.n	8001304 <HDI_Read_Task+0x17c>
		else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig gyors mód vagy memóriaszemét volt akkor msot skil lesz
 80012f4:	f04f 0252 	mov.w	r2, #82	; 0x52
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	493f      	ldr	r1, [pc, #252]	; (80013fc <HDI_Read_Task+0x274>)
 80012fe:	2000      	movs	r0, #0
 8001300:	f005 ffd6 	bl	80072b0 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8001304:	f006 f84a 	bl	800739c <HAL_FLASH_Lock>

		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\rMode change!\n\r", 16, 10);
 8001308:	230a      	movs	r3, #10
 800130a:	2210      	movs	r2, #16
 800130c:	493c      	ldr	r1, [pc, #240]	; (8001400 <HDI_Read_Task+0x278>)
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f009 f8db 	bl	800a4ca <HAL_UART_Transmit>

		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 8001314:	f7ff fe58 	bl	8000fc8 <__NVIC_SystemReset>
	}

	if(bFlag[1])
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HDI_Read_Task+0x270>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d05b      	beq.n	80013da <HDI_Read_Task+0x252>
	{
		bFlag[1]=0;
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HDI_Read_Task+0x270>)
 8001324:	2200      	movs	r2, #0
 8001326:	705a      	strb	r2, [r3, #1]
		HAL_FLASH_Unlock();
 8001328:	f006 f816 	bl	8007358 <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);//
 800132c:	2102      	movs	r1, #2
 800132e:	2006      	movs	r0, #6
 8001330:	f006 f984 	bl	800763c <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 8001334:	f006 f832 	bl	800739c <HAL_FLASH_Lock>

		int i;
		for(i=0;i<10;i++)
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	e00a      	b.n	8001354 <HDI_Read_Task+0x1cc>
		{
			LED_R_TOGGLE;
 800133e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <HDI_Read_Task+0x268>)
 8001344:	f006 fb87 	bl	8007a56 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001348:	20c8      	movs	r0, #200	; 0xc8
 800134a:	f004 fcd1 	bl	8005cf0 <HAL_Delay>
		for(i=0;i<10;i++)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	3301      	adds	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b09      	cmp	r3, #9
 8001358:	ddf1      	ble.n	800133e <HDI_Read_Task+0x1b6>
		}
		LED_R(0);
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4823      	ldr	r0, [pc, #140]	; (80013f0 <HDI_Read_Task+0x268>)
 8001362:	f006 fb5f 	bl	8007a24 <HAL_GPIO_WritePin>

		HAL_FLASH_Unlock();
 8001366:	f005 fff7 	bl	8007358 <HAL_FLASH_Unlock>
		for(i=0;i<25;i++)
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	e01a      	b.n	80013a6 <HDI_Read_Task+0x21e>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001376:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800137a:	4618      	mov	r0, r3
 800137c:	4921      	ldr	r1, [pc, #132]	; (8001404 <HDI_Read_Task+0x27c>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3304      	adds	r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	17da      	asrs	r2, r3, #31
 8001390:	4698      	mov	r8, r3
 8001392:	4691      	mov	r9, r2
 8001394:	4642      	mov	r2, r8
 8001396:	464b      	mov	r3, r9
 8001398:	4601      	mov	r1, r0
 800139a:	2000      	movs	r0, #0
 800139c:	f005 ff88 	bl	80072b0 <HAL_FLASH_Program>
		for(i=0;i<25;i++)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	3301      	adds	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2b18      	cmp	r3, #24
 80013aa:	dde1      	ble.n	8001370 <HDI_Read_Task+0x1e8>
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+25, collectedPoints);
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HDI_Read_Task+0x280>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	461c      	mov	r4, r3
 80013b6:	4615      	mov	r5, r2
 80013b8:	4622      	mov	r2, r4
 80013ba:	462b      	mov	r3, r5
 80013bc:	4913      	ldr	r1, [pc, #76]	; (800140c <HDI_Read_Task+0x284>)
 80013be:	2000      	movs	r0, #0
 80013c0:	f005 ff76 	bl	80072b0 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80013c4:	f005 ffea 	bl	800739c <HAL_FLASH_Lock>
		HAL_UART_Transmit(huart_debugg,(uint8_t*) "\n\rBackup save!\n\r", 16, 10);
 80013c8:	230a      	movs	r3, #10
 80013ca:	2210      	movs	r2, #16
 80013cc:	4910      	ldr	r1, [pc, #64]	; (8001410 <HDI_Read_Task+0x288>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f009 f87b 	bl	800a4ca <HAL_UART_Transmit>
		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 80013d4:	f7ff fdf8 	bl	8000fc8 <__NVIC_SystemReset>
	if(hdi_read_task_tick>tick) return;
 80013d8:	bf00      	nop
	}

}
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013e2:	bf00      	nop
 80013e4:	20000280 	.word	0x20000280
 80013e8:	40020000 	.word	0x40020000
 80013ec:	20000270 	.word	0x20000270
 80013f0:	40020400 	.word	0x40020400
 80013f4:	2000027a 	.word	0x2000027a
 80013f8:	20000274 	.word	0x20000274
 80013fc:	08060000 	.word	0x08060000
 8001400:	0800f96c 	.word	0x0800f96c
 8001404:	2000029c 	.word	0x2000029c
 8001408:	20000287 	.word	0x20000287
 800140c:	08040019 	.word	0x08040019
 8001410:	0800f980 	.word	0x0800f980

08001414 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <Uart_Receive_From_PC_ISR+0x40>)
 8001422:	f006 fb18 	bl	8007a56 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 2);
 8001426:	2202      	movs	r2, #2
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <Uart_Receive_From_PC_ISR+0x44>)
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f009 f981 	bl	800a732 <HAL_UART_Receive_IT>
	TIM2->CCR1 = 4*fromPC[0];
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Uart_Receive_From_PC_ISR+0x44>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	009a      	lsls	r2, r3, #2
 8001438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR4 = 4*fromPC[1];
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <Uart_Receive_From_PC_ISR+0x44>)
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	009a      	lsls	r2, r3, #2
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <Uart_Receive_From_PC_ISR+0x48>)
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40020400 	.word	0x40020400
 8001458:	20000278 	.word	0x20000278
 800145c:	40010000 	.word	0x40010000

08001460 <Create_Nodes>:
volatile uint8_t uartThunder[6];

node Nodes[25];

void Create_Nodes(UART_HandleTypeDef *huart_debugg)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b09c      	sub	sp, #112	; 0x70
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	int i;
	orientation=FORWARD;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <Create_Nodes+0x20>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
	nodeDetected=1;
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <Create_Nodes+0x24>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
	collectedPoints=0;
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <Create_Nodes+0x28>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]

	for(i=0;i<25;i++)
 800147a:	2300      	movs	r3, #0
 800147c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800147e:	e0a1      	b.n	80015c4 <Create_Nodes+0x164>
 8001480:	20000284 	.word	0x20000284
 8001484:	20000285 	.word	0x20000285
 8001488:	20000287 	.word	0x20000287
	{
		Nodes[i].id=65+i;
 800148c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3341      	adds	r3, #65	; 0x41
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	49c1      	ldr	r1, [pc, #772]	; (800179c <Create_Nodes+0x33c>)
 8001496:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	4602      	mov	r2, r0
 80014a4:	701a      	strb	r2, [r3, #0]
		Nodes[i].worth=0;
 80014a6:	49bd      	ldr	r1, [pc, #756]	; (800179c <Create_Nodes+0x33c>)
 80014a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
		Nodes[i].type=0;
 80014ba:	49b8      	ldr	r1, [pc, #736]	; (800179c <Create_Nodes+0x33c>)
 80014bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3308      	adds	r3, #8
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
		VALUE(Nodes[i].neighbours,0,0,0,0);
 80014ce:	49b3      	ldr	r1, [pc, #716]	; (800179c <Create_Nodes+0x33c>)
 80014d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	330c      	adds	r3, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	49ae      	ldr	r1, [pc, #696]	; (800179c <Create_Nodes+0x33c>)
 80014e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	330d      	adds	r3, #13
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	49a9      	ldr	r1, [pc, #676]	; (800179c <Create_Nodes+0x33c>)
 80014f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	330e      	adds	r3, #14
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	49a4      	ldr	r1, [pc, #656]	; (800179c <Create_Nodes+0x33c>)
 800150c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	330f      	adds	r3, #15
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].directions,0,0,0,0);
 800151e:	499f      	ldr	r1, [pc, #636]	; (800179c <Create_Nodes+0x33c>)
 8001520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3310      	adds	r3, #16
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	499a      	ldr	r1, [pc, #616]	; (800179c <Create_Nodes+0x33c>)
 8001534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3311      	adds	r3, #17
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	4995      	ldr	r1, [pc, #596]	; (800179c <Create_Nodes+0x33c>)
 8001548:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3312      	adds	r3, #18
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	4990      	ldr	r1, [pc, #576]	; (800179c <Create_Nodes+0x33c>)
 800155c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3313      	adds	r3, #19
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		VALUE(Nodes[i].distance,0,0,0,0);
 800156e:	498b      	ldr	r1, [pc, #556]	; (800179c <Create_Nodes+0x33c>)
 8001570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	3314      	adds	r3, #20
 800157e:	2200      	movs	r2, #0
 8001580:	801a      	strh	r2, [r3, #0]
 8001582:	4986      	ldr	r1, [pc, #536]	; (800179c <Create_Nodes+0x33c>)
 8001584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3316      	adds	r3, #22
 8001592:	2200      	movs	r2, #0
 8001594:	801a      	strh	r2, [r3, #0]
 8001596:	4981      	ldr	r1, [pc, #516]	; (800179c <Create_Nodes+0x33c>)
 8001598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3318      	adds	r3, #24
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	497c      	ldr	r1, [pc, #496]	; (800179c <Create_Nodes+0x33c>)
 80015ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	331a      	adds	r3, #26
 80015ba:	2200      	movs	r2, #0
 80015bc:	801a      	strh	r2, [r3, #0]
	for(i=0;i<25;i++)
 80015be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c0:	3301      	adds	r3, #1
 80015c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c6:	2b18      	cmp	r3, #24
 80015c8:	f77f af60 	ble.w	800148c <Create_Nodes+0x2c>
	}
	//A node
	N('A').worth=0;
 80015cc:	4b73      	ldr	r3, [pc, #460]	; (800179c <Create_Nodes+0x33c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
	N('A').type=1;
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <Create_Nodes+0x33c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	609a      	str	r2, [r3, #8]
	VALUE(N('A').neighbours,0,0,0,'C');
 80015d8:	4b70      	ldr	r3, [pc, #448]	; (800179c <Create_Nodes+0x33c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	731a      	strb	r2, [r3, #12]
 80015de:	4b6f      	ldr	r3, [pc, #444]	; (800179c <Create_Nodes+0x33c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	735a      	strb	r2, [r3, #13]
 80015e4:	4b6d      	ldr	r3, [pc, #436]	; (800179c <Create_Nodes+0x33c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	739a      	strb	r2, [r3, #14]
 80015ea:	4b6c      	ldr	r3, [pc, #432]	; (800179c <Create_Nodes+0x33c>)
 80015ec:	2243      	movs	r2, #67	; 0x43
 80015ee:	73da      	strb	r2, [r3, #15]
	VALUE(N('A').directions,0,0,0,2);
 80015f0:	4b6a      	ldr	r3, [pc, #424]	; (800179c <Create_Nodes+0x33c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	741a      	strb	r2, [r3, #16]
 80015f6:	4b69      	ldr	r3, [pc, #420]	; (800179c <Create_Nodes+0x33c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	745a      	strb	r2, [r3, #17]
 80015fc:	4b67      	ldr	r3, [pc, #412]	; (800179c <Create_Nodes+0x33c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	749a      	strb	r2, [r3, #18]
 8001602:	4b66      	ldr	r3, [pc, #408]	; (800179c <Create_Nodes+0x33c>)
 8001604:	2202      	movs	r2, #2
 8001606:	74da      	strb	r2, [r3, #19]
	VALUE(N('A').distance,0,0,0,365);
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <Create_Nodes+0x33c>)
 800160a:	2200      	movs	r2, #0
 800160c:	829a      	strh	r2, [r3, #20]
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <Create_Nodes+0x33c>)
 8001610:	2200      	movs	r2, #0
 8001612:	82da      	strh	r2, [r3, #22]
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <Create_Nodes+0x33c>)
 8001616:	2200      	movs	r2, #0
 8001618:	831a      	strh	r2, [r3, #24]
 800161a:	4b60      	ldr	r3, [pc, #384]	; (800179c <Create_Nodes+0x33c>)
 800161c:	f240 126d 	movw	r2, #365	; 0x16d
 8001620:	835a      	strh	r2, [r3, #26]

	//B node
	N('B').worth=2;
 8001622:	4b5e      	ldr	r3, [pc, #376]	; (800179c <Create_Nodes+0x33c>)
 8001624:	2202      	movs	r2, #2
 8001626:	621a      	str	r2, [r3, #32]
	N('B').type=2;
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <Create_Nodes+0x33c>)
 800162a:	2202      	movs	r2, #2
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
	VALUE(N('B').neighbours,'D',0,'C',0);
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <Create_Nodes+0x33c>)
 8001630:	2244      	movs	r2, #68	; 0x44
 8001632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001636:	4b59      	ldr	r3, [pc, #356]	; (800179c <Create_Nodes+0x33c>)
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <Create_Nodes+0x33c>)
 8001640:	2243      	movs	r2, #67	; 0x43
 8001642:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001646:	4b55      	ldr	r3, [pc, #340]	; (800179c <Create_Nodes+0x33c>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	VALUE(N('B').directions,2,0,2,0);
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <Create_Nodes+0x33c>)
 8001650:	2202      	movs	r2, #2
 8001652:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001656:	4b51      	ldr	r3, [pc, #324]	; (800179c <Create_Nodes+0x33c>)
 8001658:	2200      	movs	r2, #0
 800165a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800165e:	4b4f      	ldr	r3, [pc, #316]	; (800179c <Create_Nodes+0x33c>)
 8001660:	2202      	movs	r2, #2
 8001662:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <Create_Nodes+0x33c>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	VALUE(N('B').distance,452,0,168,0);
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <Create_Nodes+0x33c>)
 8001670:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001674:	861a      	strh	r2, [r3, #48]	; 0x30
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <Create_Nodes+0x33c>)
 8001678:	2200      	movs	r2, #0
 800167a:	865a      	strh	r2, [r3, #50]	; 0x32
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <Create_Nodes+0x33c>)
 800167e:	22a8      	movs	r2, #168	; 0xa8
 8001680:	869a      	strh	r2, [r3, #52]	; 0x34
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <Create_Nodes+0x33c>)
 8001684:	2200      	movs	r2, #0
 8001686:	86da      	strh	r2, [r3, #54]	; 0x36

	//C node
	N('C').worth=0;
 8001688:	4b44      	ldr	r3, [pc, #272]	; (800179c <Create_Nodes+0x33c>)
 800168a:	2200      	movs	r2, #0
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
	N('C').type=3;
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <Create_Nodes+0x33c>)
 8001690:	2203      	movs	r2, #3
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
	VALUE(N('C').neighbours,0,'B','E',0);
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <Create_Nodes+0x33c>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <Create_Nodes+0x33c>)
 800169e:	2242      	movs	r2, #66	; 0x42
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016a4:	4b3d      	ldr	r3, [pc, #244]	; (800179c <Create_Nodes+0x33c>)
 80016a6:	2245      	movs	r2, #69	; 0x45
 80016a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <Create_Nodes+0x33c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	VALUE(N('C').directions,0,1,2,0);
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <Create_Nodes+0x33c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <Create_Nodes+0x33c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <Create_Nodes+0x33c>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <Create_Nodes+0x33c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	VALUE(N('C').distance,0,218,130,0);
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <Create_Nodes+0x33c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <Create_Nodes+0x33c>)
 80016de:	22da      	movs	r2, #218	; 0xda
 80016e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <Create_Nodes+0x33c>)
 80016e6:	2282      	movs	r2, #130	; 0x82
 80016e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <Create_Nodes+0x33c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	//D node
	N('D').worth=2;
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <Create_Nodes+0x33c>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	659a      	str	r2, [r3, #88]	; 0x58
	N('D').type=1;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <Create_Nodes+0x33c>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	65da      	str	r2, [r3, #92]	; 0x5c
	VALUE(N('D').neighbours,'B',0,'F',0);
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <Create_Nodes+0x33c>)
 8001702:	2242      	movs	r2, #66	; 0x42
 8001704:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <Create_Nodes+0x33c>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <Create_Nodes+0x33c>)
 8001712:	2246      	movs	r2, #70	; 0x46
 8001714:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <Create_Nodes+0x33c>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	VALUE(N('D').directions,2,0,2,0);
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <Create_Nodes+0x33c>)
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <Create_Nodes+0x33c>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <Create_Nodes+0x33c>)
 8001732:	2202      	movs	r2, #2
 8001734:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <Create_Nodes+0x33c>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	VALUE(N('D').distance,452,0,316,0);
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <Create_Nodes+0x33c>)
 8001742:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <Create_Nodes+0x33c>)
 800174c:	2200      	movs	r2, #0
 800174e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <Create_Nodes+0x33c>)
 8001754:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8001758:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <Create_Nodes+0x33c>)
 800175e:	2200      	movs	r2, #0
 8001760:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	//E node
	N('E').worth=0;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <Create_Nodes+0x33c>)
 8001766:	2200      	movs	r2, #0
 8001768:	675a      	str	r2, [r3, #116]	; 0x74
	N('E').type=3;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <Create_Nodes+0x33c>)
 800176c:	2203      	movs	r2, #3
 800176e:	679a      	str	r2, [r3, #120]	; 0x78
	VALUE(N('E').neighbours,'C',0,'F','G');
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <Create_Nodes+0x33c>)
 8001772:	2243      	movs	r2, #67	; 0x43
 8001774:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <Create_Nodes+0x33c>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <Create_Nodes+0x33c>)
 8001782:	2246      	movs	r2, #70	; 0x46
 8001784:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <Create_Nodes+0x33c>)
 800178a:	2247      	movs	r2, #71	; 0x47
 800178c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	VALUE(N('E').directions,1,0,2,2);
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <Create_Nodes+0x33c>)
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001798:	e002      	b.n	80017a0 <Create_Nodes+0x340>
 800179a:	bf00      	nop
 800179c:	2000029c 	.word	0x2000029c
 80017a0:	4bcd      	ldr	r3, [pc, #820]	; (8001ad8 <Create_Nodes+0x678>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80017a8:	4bcb      	ldr	r3, [pc, #812]	; (8001ad8 <Create_Nodes+0x678>)
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80017b0:	4bc9      	ldr	r3, [pc, #804]	; (8001ad8 <Create_Nodes+0x678>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	VALUE(N('E').distance,130,0,428,385);
 80017b8:	4bc7      	ldr	r3, [pc, #796]	; (8001ad8 <Create_Nodes+0x678>)
 80017ba:	2282      	movs	r2, #130	; 0x82
 80017bc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80017c0:	4bc5      	ldr	r3, [pc, #788]	; (8001ad8 <Create_Nodes+0x678>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80017c8:	4bc3      	ldr	r3, [pc, #780]	; (8001ad8 <Create_Nodes+0x678>)
 80017ca:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80017ce:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80017d2:	4bc1      	ldr	r3, [pc, #772]	; (8001ad8 <Create_Nodes+0x678>)
 80017d4:	f240 1281 	movw	r2, #385	; 0x181
 80017d8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	//F node
	N('F').worth=2;
 80017dc:	4bbe      	ldr	r3, [pc, #760]	; (8001ad8 <Create_Nodes+0x678>)
 80017de:	2202      	movs	r2, #2
 80017e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	N('F').type=1;
 80017e4:	4bbc      	ldr	r3, [pc, #752]	; (8001ad8 <Create_Nodes+0x678>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	VALUE(N('F').neighbours,'E','D','H','I');
 80017ec:	4bba      	ldr	r3, [pc, #744]	; (8001ad8 <Create_Nodes+0x678>)
 80017ee:	2245      	movs	r2, #69	; 0x45
 80017f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80017f4:	4bb8      	ldr	r3, [pc, #736]	; (8001ad8 <Create_Nodes+0x678>)
 80017f6:	2244      	movs	r2, #68	; 0x44
 80017f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80017fc:	4bb6      	ldr	r3, [pc, #728]	; (8001ad8 <Create_Nodes+0x678>)
 80017fe:	2248      	movs	r2, #72	; 0x48
 8001800:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8001804:	4bb4      	ldr	r3, [pc, #720]	; (8001ad8 <Create_Nodes+0x678>)
 8001806:	2249      	movs	r2, #73	; 0x49
 8001808:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	VALUE(N('F').directions,1,1,2,2);
 800180c:	4bb2      	ldr	r3, [pc, #712]	; (8001ad8 <Create_Nodes+0x678>)
 800180e:	2201      	movs	r2, #1
 8001810:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8001814:	4bb0      	ldr	r3, [pc, #704]	; (8001ad8 <Create_Nodes+0x678>)
 8001816:	2201      	movs	r2, #1
 8001818:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800181c:	4bae      	ldr	r3, [pc, #696]	; (8001ad8 <Create_Nodes+0x678>)
 800181e:	2202      	movs	r2, #2
 8001820:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8001824:	4bac      	ldr	r3, [pc, #688]	; (8001ad8 <Create_Nodes+0x678>)
 8001826:	2202      	movs	r2, #2
 8001828:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	VALUE(N('F').distance,428,316,284,335);
 800182c:	4baa      	ldr	r3, [pc, #680]	; (8001ad8 <Create_Nodes+0x678>)
 800182e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001832:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8001836:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <Create_Nodes+0x678>)
 8001838:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800183c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001840:	4ba5      	ldr	r3, [pc, #660]	; (8001ad8 <Create_Nodes+0x678>)
 8001842:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001846:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800184a:	4ba3      	ldr	r3, [pc, #652]	; (8001ad8 <Create_Nodes+0x678>)
 800184c:	f240 124f 	movw	r2, #335	; 0x14f
 8001850:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	//G node
	N('G').worth=2;
 8001854:	4ba0      	ldr	r3, [pc, #640]	; (8001ad8 <Create_Nodes+0x678>)
 8001856:	2202      	movs	r2, #2
 8001858:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	N('G').type=1;
 800185c:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <Create_Nodes+0x678>)
 800185e:	2201      	movs	r2, #1
 8001860:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	VALUE(N('G').neighbours,'E',0,'H','I');
 8001864:	4b9c      	ldr	r3, [pc, #624]	; (8001ad8 <Create_Nodes+0x678>)
 8001866:	2245      	movs	r2, #69	; 0x45
 8001868:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800186c:	4b9a      	ldr	r3, [pc, #616]	; (8001ad8 <Create_Nodes+0x678>)
 800186e:	2200      	movs	r2, #0
 8001870:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8001874:	4b98      	ldr	r3, [pc, #608]	; (8001ad8 <Create_Nodes+0x678>)
 8001876:	2248      	movs	r2, #72	; 0x48
 8001878:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 800187c:	4b96      	ldr	r3, [pc, #600]	; (8001ad8 <Create_Nodes+0x678>)
 800187e:	2249      	movs	r2, #73	; 0x49
 8001880:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	VALUE(N('G').directions,1,0,2,2);
 8001884:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <Create_Nodes+0x678>)
 8001886:	2201      	movs	r2, #1
 8001888:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800188c:	4b92      	ldr	r3, [pc, #584]	; (8001ad8 <Create_Nodes+0x678>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8001894:	4b90      	ldr	r3, [pc, #576]	; (8001ad8 <Create_Nodes+0x678>)
 8001896:	2202      	movs	r2, #2
 8001898:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 800189c:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <Create_Nodes+0x678>)
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	VALUE(N('G').distance,385,0,336,284);
 80018a4:	4b8c      	ldr	r3, [pc, #560]	; (8001ad8 <Create_Nodes+0x678>)
 80018a6:	f240 1281 	movw	r2, #385	; 0x181
 80018aa:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80018ae:	4b8a      	ldr	r3, [pc, #552]	; (8001ad8 <Create_Nodes+0x678>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <Create_Nodes+0x678>)
 80018b8:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80018bc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80018c0:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <Create_Nodes+0x678>)
 80018c2:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80018c6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

	//H node
	N('H').worth=2;
 80018ca:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <Create_Nodes+0x678>)
 80018cc:	2202      	movs	r2, #2
 80018ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	N('H').type=1;
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <Create_Nodes+0x678>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	VALUE(N('H').neighbours,'G','F','K','J');
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <Create_Nodes+0x678>)
 80018dc:	2247      	movs	r2, #71	; 0x47
 80018de:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80018e2:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <Create_Nodes+0x678>)
 80018e4:	2246      	movs	r2, #70	; 0x46
 80018e6:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80018ea:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <Create_Nodes+0x678>)
 80018ec:	224b      	movs	r2, #75	; 0x4b
 80018ee:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80018f2:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <Create_Nodes+0x678>)
 80018f4:	224a      	movs	r2, #74	; 0x4a
 80018f6:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	VALUE(N('H').directions,1,1,2,2);
 80018fa:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <Create_Nodes+0x678>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8001902:	4b75      	ldr	r3, [pc, #468]	; (8001ad8 <Create_Nodes+0x678>)
 8001904:	2201      	movs	r2, #1
 8001906:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <Create_Nodes+0x678>)
 800190c:	2202      	movs	r2, #2
 800190e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8001912:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <Create_Nodes+0x678>)
 8001914:	2202      	movs	r2, #2
 8001916:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	VALUE(N('H').distance,336,284,407,230);
 800191a:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <Create_Nodes+0x678>)
 800191c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001920:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <Create_Nodes+0x678>)
 8001926:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800192a:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <Create_Nodes+0x678>)
 8001930:	f240 1297 	movw	r2, #407	; 0x197
 8001934:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
 8001938:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <Create_Nodes+0x678>)
 800193a:	22e6      	movs	r2, #230	; 0xe6
 800193c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	//I node
	N('I').worth=0;
 8001940:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <Create_Nodes+0x678>)
 8001942:	2200      	movs	r2, #0
 8001944:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	N('I').type=3;
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <Create_Nodes+0x678>)
 800194a:	2203      	movs	r2, #3
 800194c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	VALUE(N('I').neighbours,'G','F',0,'L');
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <Create_Nodes+0x678>)
 8001952:	2247      	movs	r2, #71	; 0x47
 8001954:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8001958:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <Create_Nodes+0x678>)
 800195a:	2246      	movs	r2, #70	; 0x46
 800195c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8001960:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <Create_Nodes+0x678>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <Create_Nodes+0x678>)
 800196a:	224c      	movs	r2, #76	; 0x4c
 800196c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	VALUE(N('I').directions,1,1,0,2);
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <Create_Nodes+0x678>)
 8001972:	2201      	movs	r2, #1
 8001974:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <Create_Nodes+0x678>)
 800197a:	2201      	movs	r2, #1
 800197c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <Create_Nodes+0x678>)
 8001982:	2200      	movs	r2, #0
 8001984:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <Create_Nodes+0x678>)
 800198a:	2202      	movs	r2, #2
 800198c:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
	VALUE(N('I').distance,284,335,0,418);
 8001990:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <Create_Nodes+0x678>)
 8001992:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001996:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <Create_Nodes+0x678>)
 800199c:	f240 124f 	movw	r2, #335	; 0x14f
 80019a0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <Create_Nodes+0x678>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <Create_Nodes+0x678>)
 80019ae:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 80019b2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

	//J node
	N('J').worth=0;
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <Create_Nodes+0x678>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	N('J').type=3;
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <Create_Nodes+0x678>)
 80019c0:	2203      	movs	r2, #3
 80019c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	VALUE(N('J').neighbours,'H',0,'K','L');
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <Create_Nodes+0x678>)
 80019c8:	2248      	movs	r2, #72	; 0x48
 80019ca:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <Create_Nodes+0x678>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <Create_Nodes+0x678>)
 80019d8:	224b      	movs	r2, #75	; 0x4b
 80019da:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 80019de:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <Create_Nodes+0x678>)
 80019e0:	224c      	movs	r2, #76	; 0x4c
 80019e2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	VALUE(N('J').directions,1,0,2,2);
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <Create_Nodes+0x678>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <Create_Nodes+0x678>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <Create_Nodes+0x678>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <Create_Nodes+0x678>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
	VALUE(N('J').distance,230,0,204,229);
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <Create_Nodes+0x678>)
 8001a08:	22e6      	movs	r2, #230	; 0xe6
 8001a0a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <Create_Nodes+0x678>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <Create_Nodes+0x678>)
 8001a18:	22cc      	movs	r2, #204	; 0xcc
 8001a1a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <Create_Nodes+0x678>)
 8001a20:	22e5      	movs	r2, #229	; 0xe5
 8001a22:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

	//K node
	N('K').worth=2;
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <Create_Nodes+0x678>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	N('K').type=1;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <Create_Nodes+0x678>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	VALUE(N('K').neighbours,'J','H','M','N');
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <Create_Nodes+0x678>)
 8001a38:	224a      	movs	r2, #74	; 0x4a
 8001a3a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <Create_Nodes+0x678>)
 8001a40:	2248      	movs	r2, #72	; 0x48
 8001a42:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <Create_Nodes+0x678>)
 8001a48:	224d      	movs	r2, #77	; 0x4d
 8001a4a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <Create_Nodes+0x678>)
 8001a50:	224e      	movs	r2, #78	; 0x4e
 8001a52:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	VALUE(N('K').directions,1,1,2,2);
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <Create_Nodes+0x678>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <Create_Nodes+0x678>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <Create_Nodes+0x678>)
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <Create_Nodes+0x678>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
	VALUE(N('K').distance,204,407,288,319);
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <Create_Nodes+0x678>)
 8001a78:	22cc      	movs	r2, #204	; 0xcc
 8001a7a:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <Create_Nodes+0x678>)
 8001a80:	f240 1297 	movw	r2, #407	; 0x197
 8001a84:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <Create_Nodes+0x678>)
 8001a8a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001a8e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <Create_Nodes+0x678>)
 8001a94:	f240 123f 	movw	r2, #319	; 0x13f
 8001a98:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132

	//L node
	N('L').worth=2;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <Create_Nodes+0x678>)
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	N('L').type=1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <Create_Nodes+0x678>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	VALUE(N('L').neighbours,'I','J','M','N');
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <Create_Nodes+0x678>)
 8001aae:	2249      	movs	r2, #73	; 0x49
 8001ab0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <Create_Nodes+0x678>)
 8001ab6:	224a      	movs	r2, #74	; 0x4a
 8001ab8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <Create_Nodes+0x678>)
 8001abe:	224d      	movs	r2, #77	; 0x4d
 8001ac0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <Create_Nodes+0x678>)
 8001ac6:	224e      	movs	r2, #78	; 0x4e
 8001ac8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
	VALUE(N('L').directions,1,1,2,2);
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <Create_Nodes+0x678>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8001ad4:	e002      	b.n	8001adc <Create_Nodes+0x67c>
 8001ad6:	bf00      	nop
 8001ad8:	2000029c 	.word	0x2000029c
 8001adc:	4bcd      	ldr	r3, [pc, #820]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8001ae4:	4bcb      	ldr	r3, [pc, #812]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8001aec:	4bc9      	ldr	r3, [pc, #804]	; (8001e14 <Create_Nodes+0x9b4>)
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	VALUE(N('L').distance,418,229,329,258);
 8001af4:	4bc7      	ldr	r3, [pc, #796]	; (8001e14 <Create_Nodes+0x9b4>)
 8001af6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8001afa:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
 8001afe:	4bc5      	ldr	r3, [pc, #788]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b00:	22e5      	movs	r2, #229	; 0xe5
 8001b02:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001b06:	4bc3      	ldr	r3, [pc, #780]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b08:	f240 1249 	movw	r2, #329	; 0x149
 8001b0c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001b10:	4bc0      	ldr	r3, [pc, #768]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b12:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001b16:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	//M node
	N('M').worth=2;
 8001b1a:	4bbe      	ldr	r3, [pc, #760]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	N('M').type=1;
 8001b22:	4bbc      	ldr	r3, [pc, #752]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	VALUE(N('M').neighbours,'L','K','P','O');
 8001b2a:	4bba      	ldr	r3, [pc, #744]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b2c:	224c      	movs	r2, #76	; 0x4c
 8001b2e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8001b32:	4bb8      	ldr	r3, [pc, #736]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b34:	224b      	movs	r2, #75	; 0x4b
 8001b36:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
 8001b3a:	4bb6      	ldr	r3, [pc, #728]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b3c:	2250      	movs	r2, #80	; 0x50
 8001b3e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
 8001b42:	4bb4      	ldr	r3, [pc, #720]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b44:	224f      	movs	r2, #79	; 0x4f
 8001b46:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
	VALUE(N('M').directions,1,1,2,2);
 8001b4a:	4bb2      	ldr	r3, [pc, #712]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001b52:	4bb0      	ldr	r3, [pc, #704]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8001b5a:	4bae      	ldr	r3, [pc, #696]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8001b62:	4bac      	ldr	r3, [pc, #688]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	VALUE(N('M').distance,329,288,416,198);
 8001b6a:	4baa      	ldr	r3, [pc, #680]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b6c:	f240 1249 	movw	r2, #329	; 0x149
 8001b70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001b74:	4ba7      	ldr	r3, [pc, #668]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b76:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001b7a:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
 8001b7e:	4ba5      	ldr	r3, [pc, #660]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b80:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b84:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
 8001b88:	4ba2      	ldr	r3, [pc, #648]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b8a:	22c6      	movs	r2, #198	; 0xc6
 8001b8c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

	//N node
	N('N').worth=0;
 8001b90:	4ba0      	ldr	r3, [pc, #640]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	N('N').type=3;
 8001b98:	4b9e      	ldr	r3, [pc, #632]	; (8001e14 <Create_Nodes+0x9b4>)
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	VALUE(N('N').neighbours,'L','K','O','Q');
 8001ba0:	4b9c      	ldr	r3, [pc, #624]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ba2:	224c      	movs	r2, #76	; 0x4c
 8001ba4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8001ba8:	4b9a      	ldr	r3, [pc, #616]	; (8001e14 <Create_Nodes+0x9b4>)
 8001baa:	224b      	movs	r2, #75	; 0x4b
 8001bac:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8001bb0:	4b98      	ldr	r3, [pc, #608]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bb2:	224f      	movs	r2, #79	; 0x4f
 8001bb4:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8001bb8:	4b96      	ldr	r3, [pc, #600]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bba:	2251      	movs	r2, #81	; 0x51
 8001bbc:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
	VALUE(N('N').directions,1,1,2,2);
 8001bc0:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
 8001bc8:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
 8001bd0:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
	VALUE(N('N').distance,258,318,228,447);
 8001be0:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <Create_Nodes+0x9b4>)
 8001be2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001be6:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
 8001bea:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bec:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8001bf0:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
 8001bf4:	4b87      	ldr	r3, [pc, #540]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bf6:	22e4      	movs	r2, #228	; 0xe4
 8001bf8:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
 8001bfc:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <Create_Nodes+0x9b4>)
 8001bfe:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001c02:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186

	//O node
	N('O').worth=2;
 8001c06:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	N('O').type=1;
 8001c0e:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	VALUE(N('O').neighbours,'N','M','P',0);
 8001c16:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c18:	224e      	movs	r2, #78	; 0x4e
 8001c1a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001c1e:	4b7d      	ldr	r3, [pc, #500]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c20:	224d      	movs	r2, #77	; 0x4d
 8001c22:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
 8001c26:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c28:	2250      	movs	r2, #80	; 0x50
 8001c2a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8001c2e:	4b79      	ldr	r3, [pc, #484]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	VALUE(N('O').directions,1,1,2,0);
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8001c46:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8001c4e:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	VALUE(N('O').distance,228,198,248,0);
 8001c56:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c58:	22e4      	movs	r2, #228	; 0xe4
 8001c5a:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 8001c5e:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c60:	22c6      	movs	r2, #198	; 0xc6
 8001c62:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c68:	22f8      	movs	r2, #248	; 0xf8
 8001c6a:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

	//P node
	N('P').worth=2;
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	N('P').type=1;
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	VALUE(N('P').neighbours,'O','M','R','S');
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c88:	224f      	movs	r2, #79	; 0x4f
 8001c8a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001c8e:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c90:	224d      	movs	r2, #77	; 0x4d
 8001c92:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <Create_Nodes+0x9b4>)
 8001c98:	2252      	movs	r2, #82	; 0x52
 8001c9a:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ca0:	2253      	movs	r2, #83	; 0x53
 8001ca2:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
	VALUE(N('P').directions,1,1,2,2);
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
 8001cae:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
 8001cb6:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8001cbe:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
	VALUE(N('P').distance,248,416,305,346);
 8001cc6:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cc8:	22f8      	movs	r2, #248	; 0xf8
 8001cca:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cd0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001cd4:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cda:	f240 1231 	movw	r2, #305	; 0x131
 8001cde:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <Create_Nodes+0x9b4>)
 8001ce4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001ce8:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

	//Q node
	N('Q').worth=2;
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	N('Q').type=1;
 8001cf4:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	VALUE(N('Q').neighbours,'N',0,'R','S');
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <Create_Nodes+0x9b4>)
 8001cfe:	224e      	movs	r2, #78	; 0x4e
 8001d00:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 8001d0c:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d0e:	2252      	movs	r2, #82	; 0x52
 8001d10:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d16:	2253      	movs	r2, #83	; 0x53
 8001d18:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
	VALUE(N('Q').directions,1,0,2,2);
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
	VALUE(N('Q').distance,447,0,346,284);
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d3e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001d42:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d50:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001d54:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d5a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001d5e:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da

	//R node
	N('R').worth=2;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	N('R').type=1;
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	VALUE(N('R').neighbours,'Q','P','U','T');
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d74:	2251      	movs	r2, #81	; 0x51
 8001d76:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d7c:	2250      	movs	r2, #80	; 0x50
 8001d7e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d84:	2255      	movs	r2, #85	; 0x55
 8001d86:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d8c:	2254      	movs	r2, #84	; 0x54
 8001d8e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
	VALUE(N('R').directions,1,1,2,2);
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <Create_Nodes+0x9b4>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <Create_Nodes+0x9b4>)
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
	VALUE(N('R').distance,346,305,366,204);
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <Create_Nodes+0x9b4>)
 8001db4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001db8:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dbe:	f240 1231 	movw	r2, #305	; 0x131
 8001dc2:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dc8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001dcc:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dd2:	22cc      	movs	r2, #204	; 0xcc
 8001dd4:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6

	//S node
	N('S').worth=2;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	N('S').type=1;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <Create_Nodes+0x9b4>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	VALUE(N('S').neighbours,'Q','P','T','V');
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dea:	2251      	movs	r2, #81	; 0x51
 8001dec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <Create_Nodes+0x9b4>)
 8001df2:	2250      	movs	r2, #80	; 0x50
 8001df4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <Create_Nodes+0x9b4>)
 8001dfa:	2254      	movs	r2, #84	; 0x54
 8001dfc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <Create_Nodes+0x9b4>)
 8001e02:	2256      	movs	r2, #86	; 0x56
 8001e04:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
	VALUE(N('S').directions,1,1,2,2);
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <Create_Nodes+0x9b4>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8001e10:	e002      	b.n	8001e18 <Create_Nodes+0x9b8>
 8001e12:	bf00      	nop
 8001e14:	2000029c 	.word	0x2000029c
 8001e18:	4bca      	ldr	r3, [pc, #808]	; (8002144 <Create_Nodes+0xce4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 8001e20:	4bc8      	ldr	r3, [pc, #800]	; (8002144 <Create_Nodes+0xce4>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 8001e28:	4bc6      	ldr	r3, [pc, #792]	; (8002144 <Create_Nodes+0xce4>)
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	VALUE(N('S').distance,284,346,223,406);
 8001e30:	4bc4      	ldr	r3, [pc, #784]	; (8002144 <Create_Nodes+0xce4>)
 8001e32:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001e36:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
 8001e3a:	4bc2      	ldr	r3, [pc, #776]	; (8002144 <Create_Nodes+0xce4>)
 8001e3c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001e40:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8001e44:	4bbf      	ldr	r3, [pc, #764]	; (8002144 <Create_Nodes+0xce4>)
 8001e46:	22df      	movs	r2, #223	; 0xdf
 8001e48:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
 8001e4c:	4bbd      	ldr	r3, [pc, #756]	; (8002144 <Create_Nodes+0xce4>)
 8001e4e:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001e52:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212

	//T node
	N('T').worth=2;
 8001e56:	4bbb      	ldr	r3, [pc, #748]	; (8002144 <Create_Nodes+0xce4>)
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	N('T').type=1;
 8001e5e:	4bb9      	ldr	r3, [pc, #740]	; (8002144 <Create_Nodes+0xce4>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	VALUE(N('T').neighbours,'S','R','U','V');
 8001e66:	4bb7      	ldr	r3, [pc, #732]	; (8002144 <Create_Nodes+0xce4>)
 8001e68:	2253      	movs	r2, #83	; 0x53
 8001e6a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001e6e:	4bb5      	ldr	r3, [pc, #724]	; (8002144 <Create_Nodes+0xce4>)
 8001e70:	2252      	movs	r2, #82	; 0x52
 8001e72:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8001e76:	4bb3      	ldr	r3, [pc, #716]	; (8002144 <Create_Nodes+0xce4>)
 8001e78:	2255      	movs	r2, #85	; 0x55
 8001e7a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8001e7e:	4bb1      	ldr	r3, [pc, #708]	; (8002144 <Create_Nodes+0xce4>)
 8001e80:	2256      	movs	r2, #86	; 0x56
 8001e82:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	VALUE(N('T').directions,1,1,2,2);
 8001e86:	4baf      	ldr	r3, [pc, #700]	; (8002144 <Create_Nodes+0xce4>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8001e8e:	4bad      	ldr	r3, [pc, #692]	; (8002144 <Create_Nodes+0xce4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
 8001e96:	4bab      	ldr	r3, [pc, #684]	; (8002144 <Create_Nodes+0xce4>)
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8001e9e:	4ba9      	ldr	r3, [pc, #676]	; (8002144 <Create_Nodes+0xce4>)
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
	VALUE(N('T').distance,223,204,192,233);
 8001ea6:	4ba7      	ldr	r3, [pc, #668]	; (8002144 <Create_Nodes+0xce4>)
 8001ea8:	22df      	movs	r2, #223	; 0xdf
 8001eaa:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
 8001eae:	4ba5      	ldr	r3, [pc, #660]	; (8002144 <Create_Nodes+0xce4>)
 8001eb0:	22cc      	movs	r2, #204	; 0xcc
 8001eb2:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
 8001eb6:	4ba3      	ldr	r3, [pc, #652]	; (8002144 <Create_Nodes+0xce4>)
 8001eb8:	22c0      	movs	r2, #192	; 0xc0
 8001eba:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
 8001ebe:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <Create_Nodes+0xce4>)
 8001ec0:	22e9      	movs	r2, #233	; 0xe9
 8001ec2:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e

	//U node
	N('U').worth=2;
 8001ec6:	4b9f      	ldr	r3, [pc, #636]	; (8002144 <Create_Nodes+0xce4>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	N('U').type=1;
 8001ece:	4b9d      	ldr	r3, [pc, #628]	; (8002144 <Create_Nodes+0xce4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	VALUE(N('U').neighbours,'T','R','X',0);
 8001ed6:	4b9b      	ldr	r3, [pc, #620]	; (8002144 <Create_Nodes+0xce4>)
 8001ed8:	2254      	movs	r2, #84	; 0x54
 8001eda:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8001ede:	4b99      	ldr	r3, [pc, #612]	; (8002144 <Create_Nodes+0xce4>)
 8001ee0:	2252      	movs	r2, #82	; 0x52
 8001ee2:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <Create_Nodes+0xce4>)
 8001ee8:	2258      	movs	r2, #88	; 0x58
 8001eea:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8001eee:	4b95      	ldr	r3, [pc, #596]	; (8002144 <Create_Nodes+0xce4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
	VALUE(N('U').directions,1,1,2,0);
 8001ef6:	4b93      	ldr	r3, [pc, #588]	; (8002144 <Create_Nodes+0xce4>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8001efe:	4b91      	ldr	r3, [pc, #580]	; (8002144 <Create_Nodes+0xce4>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8001f06:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <Create_Nodes+0xce4>)
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8001f0e:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <Create_Nodes+0xce4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
	VALUE(N('U').distance,192,366,371,0);
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <Create_Nodes+0xce4>)
 8001f18:	22c0      	movs	r2, #192	; 0xc0
 8001f1a:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <Create_Nodes+0xce4>)
 8001f20:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001f24:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <Create_Nodes+0xce4>)
 8001f2a:	f240 1273 	movw	r2, #371	; 0x173
 8001f2e:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
 8001f32:	4b84      	ldr	r3, [pc, #528]	; (8002144 <Create_Nodes+0xce4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a

	//V node
	N('V').worth=2;
 8001f3a:	4b82      	ldr	r3, [pc, #520]	; (8002144 <Create_Nodes+0xce4>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	N('V').type=1;
 8001f42:	4b80      	ldr	r3, [pc, #512]	; (8002144 <Create_Nodes+0xce4>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	VALUE(N('V').neighbours,'S','T','W',0);
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <Create_Nodes+0xce4>)
 8001f4c:	2253      	movs	r2, #83	; 0x53
 8001f4e:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8001f52:	4b7c      	ldr	r3, [pc, #496]	; (8002144 <Create_Nodes+0xce4>)
 8001f54:	2254      	movs	r2, #84	; 0x54
 8001f56:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8001f5a:	4b7a      	ldr	r3, [pc, #488]	; (8002144 <Create_Nodes+0xce4>)
 8001f5c:	2257      	movs	r2, #87	; 0x57
 8001f5e:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8001f62:	4b78      	ldr	r3, [pc, #480]	; (8002144 <Create_Nodes+0xce4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
	VALUE(N('V').directions,1,1,2,0);
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <Create_Nodes+0xce4>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8001f72:	4b74      	ldr	r3, [pc, #464]	; (8002144 <Create_Nodes+0xce4>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <Create_Nodes+0xce4>)
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 8001f82:	4b70      	ldr	r3, [pc, #448]	; (8002144 <Create_Nodes+0xce4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
	VALUE(N('V').distance,406,233,149,0);
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	; (8002144 <Create_Nodes+0xce4>)
 8001f8c:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001f90:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
 8001f94:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <Create_Nodes+0xce4>)
 8001f96:	22e9      	movs	r2, #233	; 0xe9
 8001f98:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
 8001f9c:	4b69      	ldr	r3, [pc, #420]	; (8002144 <Create_Nodes+0xce4>)
 8001f9e:	2295      	movs	r2, #149	; 0x95
 8001fa0:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
 8001fa4:	4b67      	ldr	r3, [pc, #412]	; (8002144 <Create_Nodes+0xce4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266

	//W node
	N('W').worth=0;
 8001fac:	4b65      	ldr	r3, [pc, #404]	; (8002144 <Create_Nodes+0xce4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	N('W').type=3;
 8001fb4:	4b63      	ldr	r3, [pc, #396]	; (8002144 <Create_Nodes+0xce4>)
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	VALUE(N('W').neighbours,'V',0,'X',0);
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <Create_Nodes+0xce4>)
 8001fbe:	2256      	movs	r2, #86	; 0x56
 8001fc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8001fc4:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <Create_Nodes+0xce4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 8001fcc:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <Create_Nodes+0xce4>)
 8001fce:	2258      	movs	r2, #88	; 0x58
 8001fd0:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <Create_Nodes+0xce4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
	VALUE(N('W').directions,1,0,1,0);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <Create_Nodes+0xce4>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <Create_Nodes+0xce4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8001fec:	4b55      	ldr	r3, [pc, #340]	; (8002144 <Create_Nodes+0xce4>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <Create_Nodes+0xce4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
	VALUE(N('W').distance,149,0,189,0);
 8001ffc:	4b51      	ldr	r3, [pc, #324]	; (8002144 <Create_Nodes+0xce4>)
 8001ffe:	2295      	movs	r2, #149	; 0x95
 8002000:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <Create_Nodes+0xce4>)
 8002006:	2200      	movs	r2, #0
 8002008:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <Create_Nodes+0xce4>)
 800200e:	22bd      	movs	r2, #189	; 0xbd
 8002010:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <Create_Nodes+0xce4>)
 8002016:	2200      	movs	r2, #0
 8002018:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282

	//X node
	N('X').worth=2;
 800201c:	4b49      	ldr	r3, [pc, #292]	; (8002144 <Create_Nodes+0xce4>)
 800201e:	2202      	movs	r2, #2
 8002020:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	N('X').type=2;
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <Create_Nodes+0xce4>)
 8002026:	2202      	movs	r2, #2
 8002028:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	VALUE(N('X').neighbours,'U',0,0,'W');
 800202c:	4b45      	ldr	r3, [pc, #276]	; (8002144 <Create_Nodes+0xce4>)
 800202e:	2255      	movs	r2, #85	; 0x55
 8002030:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8002034:	4b43      	ldr	r3, [pc, #268]	; (8002144 <Create_Nodes+0xce4>)
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 800203c:	4b41      	ldr	r3, [pc, #260]	; (8002144 <Create_Nodes+0xce4>)
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <Create_Nodes+0xce4>)
 8002046:	2257      	movs	r2, #87	; 0x57
 8002048:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
	VALUE(N('X').directions,1,0,0,1);
 800204c:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <Create_Nodes+0xce4>)
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <Create_Nodes+0xce4>)
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <Create_Nodes+0xce4>)
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <Create_Nodes+0xce4>)
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
	VALUE(N('X').distance,371,0,0,189);
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <Create_Nodes+0xce4>)
 800206e:	f240 1273 	movw	r2, #371	; 0x173
 8002072:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
 8002076:	4b33      	ldr	r3, [pc, #204]	; (8002144 <Create_Nodes+0xce4>)
 8002078:	2200      	movs	r2, #0
 800207a:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <Create_Nodes+0xce4>)
 8002080:	2200      	movs	r2, #0
 8002082:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
 8002086:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <Create_Nodes+0xce4>)
 8002088:	22bd      	movs	r2, #189	; 0xbd
 800208a:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e

	//Y node
	/**/N('Y').worth=0;
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <Create_Nodes+0xce4>)
 8002090:	2200      	movs	r2, #0
 8002092:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	N('Y').type=1;
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <Create_Nodes+0xce4>)
 8002098:	2201      	movs	r2, #1
 800209a:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	VALUE(N('Y').neighbours,'W',0,0,0);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <Create_Nodes+0xce4>)
 80020a0:	2257      	movs	r2, #87	; 0x57
 80020a2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <Create_Nodes+0xce4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <Create_Nodes+0xce4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <Create_Nodes+0xce4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
	VALUE(N('Y').directions,1,0,0,0);
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <Create_Nodes+0xce4>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <Create_Nodes+0xce4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <Create_Nodes+0xce4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <Create_Nodes+0xce4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
	VALUE(N('Y').distance,351,0,0,0);
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <Create_Nodes+0xce4>)
 80020e0:	f240 125f 	movw	r2, #351	; 0x15f
 80020e4:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <Create_Nodes+0xce4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <Create_Nodes+0xce4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <Create_Nodes+0xce4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba

	//Nodeértékek backup mentésből való visszatöltése
	if(SW2)//ha a kacsapoló2 a megfelelő állapotban van (világít a sárga LED)
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	4810      	ldr	r0, [pc, #64]	; (8002148 <Create_Nodes+0xce8>)
 8002106:	f005 fc75 	bl	80079f4 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d061      	beq.n	80021d4 <Create_Nodes+0xd74>
	{
		uint8_t check_flash = *(__IO uint8_t *) FLASH_ADDRESS_NODEWORTH; //tényleg ottvanak  flashbena megfelelő helyen a worth értékek?
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <Create_Nodes+0xcec>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if(check_flash==0xff)
 8002118:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800211c:	2bff      	cmp	r3, #255	; 0xff
 800211e:	d122      	bne.n	8002166 <Create_Nodes+0xd06>
		{
			char str[]="Default worths because of FLASH ERROR!\n\r";
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <Create_Nodes+0xcf0>)
 8002122:	f107 040c 	add.w	r4, r7, #12
 8002126:	461d      	mov	r5, r3
 8002128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002130:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002134:	c403      	stmia	r4!, {r0, r1}
 8002136:	7022      	strb	r2, [r4, #0]
			HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f867 	bl	8000210 <strlen>
 8002142:	e007      	b.n	8002154 <Create_Nodes+0xcf4>
 8002144:	2000029c 	.word	0x2000029c
 8002148:	40020400 	.word	0x40020400
 800214c:	08040000 	.word	0x08040000
 8002150:	0800f994 	.word	0x0800f994
 8002154:	4603      	mov	r3, r0
 8002156:	b29a      	uxth	r2, r3
 8002158:	f107 010c 	add.w	r1, r7, #12
 800215c:	230a      	movs	r3, #10
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f008 f9b3 	bl	800a4ca <HAL_UART_Transmit>
 8002164:	e04b      	b.n	80021fe <Create_Nodes+0xd9e>
			return; //ha nem akkor használjuk a default értékeket
		}
		for(i=0;i<25;i++)
 8002166:	2300      	movs	r3, #0
 8002168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800216a:	e013      	b.n	8002194 <Create_Nodes+0xd34>
		{
			Nodes[i].worth=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+i); //ha igen akkor töltsük be a backup mentést
 800216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002172:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4618      	mov	r0, r3
 800217c:	4921      	ldr	r1, [pc, #132]	; (8002204 <Create_Nodes+0xda4>)
 800217e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3304      	adds	r3, #4
 800218c:	6018      	str	r0, [r3, #0]
		for(i=0;i<25;i++)
 800218e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002190:	3301      	adds	r3, #1
 8002192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	2b18      	cmp	r3, #24
 8002198:	dde8      	ble.n	800216c <Create_Nodes+0xd0c>
		}
		collectedPoints=*(__IO uint8_t *) (FLASH_ADDRESS_NODEWORTH+25);
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <Create_Nodes+0xda8>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <Create_Nodes+0xdac>)
 80021a2:	701a      	strb	r2, [r3, #0]
		char str[]="Worths from FLASH backup!\n\r";
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <Create_Nodes+0xdb0>)
 80021a6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80021aa:	461d      	mov	r5, r3
 80021ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80021b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f827 	bl	8000210 <strlen>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80021ca:	230a      	movs	r3, #10
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f008 f97c 	bl	800a4ca <HAL_UART_Transmit>
 80021d2:	e014      	b.n	80021fe <Create_Nodes+0xd9e>
	}
	else
	{
		char str[]="Default worths!\n\r";
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <Create_Nodes+0xdb4>)
 80021d6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80021da:	461d      	mov	r5, r3
 80021dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(huart_debugg,(uint8_t*) str, strlen(str), 10);
 80021e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f811 	bl	8000210 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021f6:	230a      	movs	r3, #10
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f008 f966 	bl	800a4ca <HAL_UART_Transmit>
	}

}
 80021fe:	3770      	adds	r7, #112	; 0x70
 8002200:	46bd      	mov	sp, r7
 8002202:	bdb0      	pop	{r4, r5, r7, pc}
 8002204:	2000029c 	.word	0x2000029c
 8002208:	08040019 	.word	0x08040019
 800220c:	20000287 	.word	0x20000287
 8002210:	0800f9c0 	.word	0x0800f9c0
 8002214:	0800f9dc 	.word	0x0800f9dc

08002218 <Control_Task>:


void Control_Task(UART_HandleTypeDef *huart_debugg,uint32_t tick, uint32_t period)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
	static uint32_t control_task_tick = 0;
	static uint8_t control_task_state=NEIGHBOUR1;//5 db állapot ->5.után megint 1.jön
	//szomszéd1,szomszéd2,szomszéd3,szomszéd4,kiértékelés

	static uint8_t lane_change=0;
	uint8_t nID=0;
 8002224:	2300      	movs	r3, #0
 8002226:	77fb      	strb	r3, [r7, #31]

	if(control_task_tick>tick)return;
 8002228:	4b8b      	ldr	r3, [pc, #556]	; (8002458 <Control_Task+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	f0c0 8364 	bcc.w	80028fc <Control_Task+0x6e4>
	control_task_tick=tick+period;
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <Control_Task+0x240>)
 800223c:	6013      	str	r3, [r2, #0]
	if(mode!=SKILL)return;
 800223e:	4b87      	ldr	r3, [pc, #540]	; (800245c <Control_Task+0x244>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b52      	cmp	r3, #82	; 0x52
 8002244:	f040 835c 	bne.w	8002900 <Control_Task+0x6e8>
	//if(!readytorace)return;

	//ha kapu nélküli nodeba tartunk éppen, akkor időzítéssel "detektáljuk" a nodot
	if(N(pos[MY]).type>2)
 8002248:	4b85      	ldr	r3, [pc, #532]	; (8002460 <Control_Task+0x248>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002250:	4984      	ldr	r1, [pc, #528]	; (8002464 <Control_Task+0x24c>)
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	3308      	adds	r3, #8
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d934      	bls.n	80022ce <Control_Task+0xb6>
	{
		s += (float)(tick-tick_prev)*abs((int)v)/10000;
 8002264:	4b80      	ldr	r3, [pc, #512]	; (8002468 <Control_Task+0x250>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002274:	4b7d      	ldr	r3, [pc, #500]	; (800246c <Control_Task+0x254>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227e:	ee17 3a90 	vmov	r3, s15
 8002282:	2b00      	cmp	r3, #0
 8002284:	bfb8      	it	lt
 8002286:	425b      	neglt	r3, r3
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002294:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002470 <Control_Task+0x258>
 8002298:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <Control_Task+0x25c>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a6:	4b73      	ldr	r3, [pc, #460]	; (8002474 <Control_Task+0x25c>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]
		if(s>sMAX)nodeDetected=1;
 80022ac:	4b72      	ldr	r3, [pc, #456]	; (8002478 <Control_Task+0x260>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b8:	4b6e      	ldr	r3, [pc, #440]	; (8002474 <Control_Task+0x25c>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d502      	bpl.n	80022ce <Control_Task+0xb6>
 80022c8:	4b6c      	ldr	r3, [pc, #432]	; (800247c <Control_Task+0x264>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]

	}
	tick_prev=tick;//mostantól mérjük az időt
 80022ce:	4a66      	ldr	r2, [pc, #408]	; (8002468 <Control_Task+0x250>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6013      	str	r3, [r2, #0]

	//ha odaértünk a myPositionbe, akkor indulhat a mozgás a nextPosition felé
	if(nodeDetected)
 80022d4:	4b69      	ldr	r3, [pc, #420]	; (800247c <Control_Task+0x264>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8095 	beq.w	8002408 <Control_Task+0x1f0>
	{
		LED_B_TOGGLE;
 80022de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e2:	4867      	ldr	r0, [pc, #412]	; (8002480 <Control_Task+0x268>)
 80022e4:	f005 fbb7 	bl	8007a56 <HAL_GPIO_TogglePin>
		if(N(pos[NEXT]).type>2)//ha a kövi node-on nincs kapu
 80022e8:	4b5d      	ldr	r3, [pc, #372]	; (8002460 <Control_Task+0x248>)
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80022f0:	495c      	ldr	r1, [pc, #368]	; (8002464 <Control_Task+0x24c>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3308      	adds	r3, #8
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d918      	bls.n	8002336 <Control_Task+0x11e>
		{
			s=0;
 8002304:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <Control_Task+0x25c>)
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
			sMAX=N(pos[MY]).distance[bestNb[NEXT]]+25;
 800230c:	4b54      	ldr	r3, [pc, #336]	; (8002460 <Control_Task+0x248>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002314:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <Control_Task+0x26c>)
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	4618      	mov	r0, r3
 800231a:	4952      	ldr	r1, [pc, #328]	; (8002464 <Control_Task+0x24c>)
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4403      	add	r3, r0
 8002326:	3308      	adds	r3, #8
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	440b      	add	r3, r1
 800232c:	889b      	ldrh	r3, [r3, #4]
 800232e:	3319      	adds	r3, #25
 8002330:	461a      	mov	r2, r3
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <Control_Task+0x260>)
 8002334:	601a      	str	r2, [r3, #0]
		}

		//pontok nyugtázása
		if(!lane_change)//ha nem sávváltó üzemmódban vagyunk pontotszámolunk és felszedett kapukat nullázzuk
 8002336:	4b54      	ldr	r3, [pc, #336]	; (8002488 <Control_Task+0x270>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <Control_Task+0x166>
		{
			collectedPoints +=N(pos[MY]).worth;//sávváltás módik vizsgáljuk az össezgyűjtött kapuk számát
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <Control_Task+0x248>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002346:	4947      	ldr	r1, [pc, #284]	; (8002464 <Control_Task+0x24c>)
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <Control_Task+0x274>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4413      	add	r3, r2
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b4a      	ldr	r3, [pc, #296]	; (800248c <Control_Task+0x274>)
 8002362:	701a      	strb	r2, [r3, #0]
			N(pos[MY]).worth=0;//ez a kapu már nem ér pontot
 8002364:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <Control_Task+0x248>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800236c:	493d      	ldr	r1, [pc, #244]	; (8002464 <Control_Task+0x24c>)
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3304      	adds	r3, #4
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
		}

		if(collectedPoints >= 20 && !lane_change) //átváltás lane change módba
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <Control_Task+0x274>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b13      	cmp	r3, #19
 8002384:	d90e      	bls.n	80023a4 <Control_Task+0x18c>
 8002386:	4b40      	ldr	r3, [pc, #256]	; (8002488 <Control_Task+0x270>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <Control_Task+0x18c>
		{
			lane_change=1; //flag állítás
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <Control_Task+0x270>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
			Lane_Change_Init(); //a sávváltóhely felé nőnek a rewardok
 8002394:	f000 fc80 	bl	8002c98 <Lane_Change_Init>
			LED_Y(1); //sárga led világít
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800239e:	4838      	ldr	r0, [pc, #224]	; (8002480 <Control_Task+0x268>)
 80023a0:	f005 fb40 	bl	8007a24 <HAL_GPIO_WritePin>
		}

		char str[12]; //kiiratás
		sprintf(str,"d,d,%d\n\r",(int)collectedPoints);
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <Control_Task+0x274>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4938      	ldr	r1, [pc, #224]	; (8002490 <Control_Task+0x278>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f009 fdf3 	bl	800bf9c <siprintf>
		str[0]=pos[MY];
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <Control_Task+0x248>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	743b      	strb	r3, [r7, #16]
		str[2]=pos[NEXT];
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <Control_Task+0x248>)
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	74bb      	strb	r3, [r7, #18]
		HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 3);
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fd ff22 	bl	8000210 <strlen>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f107 0110 	add.w	r1, r7, #16
 80023d4:	2303      	movs	r3, #3
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f008 f877 	bl	800a4ca <HAL_UART_Transmit>

		pos[MY]=pos[NEXT];
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <Control_Task+0x248>)
 80023de:	785a      	ldrb	r2, [r3, #1]
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <Control_Task+0x248>)
 80023e2:	701a      	strb	r2, [r3, #0]
		path=nextPath;
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <Control_Task+0x27c>)
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <Control_Task+0x280>)
 80023ea:	701a      	strb	r2, [r3, #0]
		dir[MY]=dir[NEXT];
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <Control_Task+0x284>)
 80023ee:	785a      	ldrb	r2, [r3, #1]
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <Control_Task+0x284>)
 80023f2:	701a      	strb	r2, [r3, #0]
		orientation=nextOri;//FORWARD
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <Control_Task+0x288>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <Control_Task+0x28c>)
 80023fa:	701a      	strb	r2, [r3, #0]


		control_task_state=NEIGHBOUR1;
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <Control_Task+0x290>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
		nodeDetected=0;
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <Control_Task+0x264>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
	}

	if(thunderboardFlag)//ha új kalózpozíció jött a TB-től ujrakezdjük a számolást (első szomszéd vizsgálata jön)
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <Control_Task+0x294>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d075      	beq.n	80024fe <Control_Task+0x2e6>
	{
		if(piratePos_prev[1]!=piratePos[1])//a kalóz átment egy Node-on
 8002412:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <Control_Task+0x298>)
 8002414:	785a      	ldrb	r2, [r3, #1]
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <Control_Task+0x29c>)
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	429a      	cmp	r2, r3
 800241c:	d059      	beq.n	80024d2 <Control_Task+0x2ba>
		{
			if(N(piratePos[0]).worth==2)N(piratePos[0]).worth=1; //az a node már kevesebbet ér
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <Control_Task+0x29c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002426:	490f      	ldr	r1, [pc, #60]	; (8002464 <Control_Task+0x24c>)
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d13e      	bne.n	80024b8 <Control_Task+0x2a0>
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <Control_Task+0x29c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <Control_Task+0x24c>)
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3304      	adds	r3, #4
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e03d      	b.n	80024d2 <Control_Task+0x2ba>
 8002456:	bf00      	nop
 8002458:	20000558 	.word	0x20000558
 800245c:	2000027a 	.word	0x2000027a
 8002460:	20000000 	.word	0x20000000
 8002464:	2000029c 	.word	0x2000029c
 8002468:	2000055c 	.word	0x2000055c
 800246c:	20000580 	.word	0x20000580
 8002470:	461c4000 	.word	0x461c4000
 8002474:	20000560 	.word	0x20000560
 8002478:	20000004 	.word	0x20000004
 800247c:	20000285 	.word	0x20000285
 8002480:	40020400 	.word	0x40020400
 8002484:	20000564 	.word	0x20000564
 8002488:	20000566 	.word	0x20000566
 800248c:	20000287 	.word	0x20000287
 8002490:	0800f9f0 	.word	0x0800f9f0
 8002494:	20000567 	.word	0x20000567
 8002498:	20000286 	.word	0x20000286
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000568 	.word	0x20000568
 80024a4:	20000284 	.word	0x20000284
 80024a8:	20000569 	.word	0x20000569
 80024ac:	20000288 	.word	0x20000288
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	20000294 	.word	0x20000294
			else N(piratePos[0]).worth=0;
 80024b8:	4ba7      	ldr	r3, [pc, #668]	; (8002758 <Control_Task+0x540>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80024c0:	49a6      	ldr	r1, [pc, #664]	; (800275c <Control_Task+0x544>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3304      	adds	r3, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
		}
		control_task_state=NEIGHBOUR1;//kezdjük előrröl a fitneszérték számítást az 1. szomszédtól
 80024d2:	4ba3      	ldr	r3, [pc, #652]	; (8002760 <Control_Task+0x548>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]

		piratePos_prev[0]=piratePos[0];//előző kalozpozíció frissítése
 80024d8:	4b9f      	ldr	r3, [pc, #636]	; (8002758 <Control_Task+0x540>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4ba1      	ldr	r3, [pc, #644]	; (8002764 <Control_Task+0x54c>)
 80024de:	701a      	strb	r2, [r3, #0]
		piratePos_prev[1]=piratePos[1];
 80024e0:	4b9d      	ldr	r3, [pc, #628]	; (8002758 <Control_Task+0x540>)
 80024e2:	785a      	ldrb	r2, [r3, #1]
 80024e4:	4b9f      	ldr	r3, [pc, #636]	; (8002764 <Control_Task+0x54c>)
 80024e6:	705a      	strb	r2, [r3, #1]
		piratePos_prev[2]=piratePos[2];
 80024e8:	4b9b      	ldr	r3, [pc, #620]	; (8002758 <Control_Task+0x540>)
 80024ea:	789a      	ldrb	r2, [r3, #2]
 80024ec:	4b9d      	ldr	r3, [pc, #628]	; (8002764 <Control_Task+0x54c>)
 80024ee:	709a      	strb	r2, [r3, #2]
		piratePos_prev[3]=piratePos[3];
 80024f0:	4b99      	ldr	r3, [pc, #612]	; (8002758 <Control_Task+0x540>)
 80024f2:	78da      	ldrb	r2, [r3, #3]
 80024f4:	4b9b      	ldr	r3, [pc, #620]	; (8002764 <Control_Task+0x54c>)
 80024f6:	70da      	strb	r2, [r3, #3]

		thunderboardFlag=0; //várjuk az újabb kalózrobot pozíciókat a thunderboardtól
 80024f8:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <Control_Task+0x550>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]

	}
	if(control_task_state>EVALUATE)return;//ha már kiértékelés is megvolt akkor nincs mit számolni
 80024fe:	4b98      	ldr	r3, [pc, #608]	; (8002760 <Control_Task+0x548>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b04      	cmp	r3, #4
 8002504:	f200 81fe 	bhi.w	8002904 <Control_Task+0x6ec>
	str[15]=control_task_state+0x30;
	HAL_UART_Transmit(huart_debugg, (uint8_t*)str, strlen(str), 2);
#endif

	/******************LEGJOBB SZOMSZÉD KIVÁLASZTÁSA (első 4 állapot)******************/
	if(control_task_state <= NEIGHBOUR4)//1.szomszéd/2.szomszéd/3.szomszéd/4.szomszéd
 8002508:	4b95      	ldr	r3, [pc, #596]	; (8002760 <Control_Task+0x548>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b03      	cmp	r3, #3
 800250e:	f200 8164 	bhi.w	80027da <Control_Task+0x5c2>
	{
		if(control_task_state==NEIGHBOUR1)
 8002512:	4b93      	ldr	r3, [pc, #588]	; (8002760 <Control_Task+0x548>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <Control_Task+0x308>
		{
			bestFitness=-100;//az előző számolás legjob fitneszértéke volt még benne
 800251a:	4b94      	ldr	r3, [pc, #592]	; (800276c <Control_Task+0x554>)
 800251c:	4a94      	ldr	r2, [pc, #592]	; (8002770 <Control_Task+0x558>)
 800251e:	601a      	str	r2, [r3, #0]
		}
		nID=N(pos[MY]).neighbours[control_task_state]; //a vizsgált 1.rendű szomszéd azonosítója
 8002520:	4b94      	ldr	r3, [pc, #592]	; (8002774 <Control_Task+0x55c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002528:	4b8d      	ldr	r3, [pc, #564]	; (8002760 <Control_Task+0x548>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	498b      	ldr	r1, [pc, #556]	; (800275c <Control_Task+0x544>)
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	4403      	add	r3, r0
 800253c:	330c      	adds	r3, #12
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	77fb      	strb	r3, [r7, #31]
		if(nID) //ha létezik a szomszéd
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 811f 	beq.w	8002788 <Control_Task+0x570>
		{
			fitness[control_task_state]=(float)N(nID).worth; //fitneszérték 1.rendű szomszéd alapján
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002550:	4982      	ldr	r1, [pc, #520]	; (800275c <Control_Task+0x544>)
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3304      	adds	r3, #4
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b7f      	ldr	r3, [pc, #508]	; (8002760 <Control_Task+0x548>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	ee07 2a90 	vmov	s15, r2
 8002568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256c:	4a82      	ldr	r2, [pc, #520]	; (8002778 <Control_Task+0x560>)
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	edc3 7a00 	vstr	s15, [r3]
			//kalozrobot hatása az 1.rendű szomszéd esetén
			if(piratePos[1]==nID) fitness[control_task_state] -= 100/*P*/;//ha a kalóz is ebbe az 1.rendű tart éppen akkor kerüljük el az ütközést
 8002576:	4b78      	ldr	r3, [pc, #480]	; (8002758 <Control_Task+0x540>)
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	7ffa      	ldrb	r2, [r7, #31]
 800257c:	429a      	cmp	r2, r3
 800257e:	d112      	bne.n	80025a6 <Control_Task+0x38e>
 8002580:	4b77      	ldr	r3, [pc, #476]	; (8002760 <Control_Task+0x548>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4a7c      	ldr	r2, [pc, #496]	; (8002778 <Control_Task+0x560>)
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	4b74      	ldr	r3, [pc, #464]	; (8002760 <Control_Task+0x548>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800277c <Control_Task+0x564>
 8002596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800259a:	4a77      	ldr	r2, [pc, #476]	; (8002778 <Control_Task+0x560>)
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	edc3 7a00 	vstr	s15, [r3]
 80025a4:	e016      	b.n	80025d4 <Control_Task+0x3bc>
			else if(piratePos[2]==nID) fitness[control_task_state] += 2/*P*/;//ha még csak tervezi, hogy odamegy, akkor halásszuk el előle a pontot
 80025a6:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <Control_Task+0x540>)
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	7ffa      	ldrb	r2, [r7, #31]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d111      	bne.n	80025d4 <Control_Task+0x3bc>
 80025b0:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <Control_Task+0x548>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4a70      	ldr	r2, [pc, #448]	; (8002778 <Control_Task+0x560>)
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	4b68      	ldr	r3, [pc, #416]	; (8002760 <Control_Task+0x548>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80025c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ca:	4a6b      	ldr	r2, [pc, #428]	; (8002778 <Control_Task+0x560>)
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	edc3 7a00 	vstr	s15, [r3]
			int i;
			uint8_t nnID;
			float nnFit=0;
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
			for(i=0;i<4;i++)//2.rednű szomszédok
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
 80025de:	e088      	b.n	80026f2 <Control_Task+0x4da>
			{
				nnID=N(nID).neighbours[i]; //2.rednű szomszéd ID-ja
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80025e6:	495d      	ldr	r1, [pc, #372]	; (800275c <Control_Task+0x544>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	18ca      	adds	r2, r1, r3
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	4413      	add	r3, r2
 80025f6:	330c      	adds	r3, #12
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	77bb      	strb	r3, [r7, #30]
				if(nnID && nnID!=pos[MY])//ha létezik a 2.rendű szomszéd
 80025fc:	7fbb      	ldrb	r3, [r7, #30]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d05e      	beq.n	80026c0 <Control_Task+0x4a8>
 8002602:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <Control_Task+0x55c>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	7fba      	ldrb	r2, [r7, #30]
 8002608:	429a      	cmp	r2, r3
 800260a:	d059      	beq.n	80026c0 <Control_Task+0x4a8>
				{
					nnFit+=(float)N(nnID).worth;
 800260c:	7fbb      	ldrb	r3, [r7, #30]
 800260e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002612:	4952      	ldr	r1, [pc, #328]	; (800275c <Control_Task+0x544>)
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3304      	adds	r3, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262a:	ed97 7a08 	vldr	s14, [r7, #32]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	edc7 7a08 	vstr	s15, [r7, #32]
					if(piratePos[1]==nnID) nnFit -= 3/*P*/;//ha a kalóz is ebbe a pontba tart éppen akkor kerüljük el az ütközést
 8002636:	4b48      	ldr	r3, [pc, #288]	; (8002758 <Control_Task+0x540>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	7fba      	ldrb	r2, [r7, #30]
 800263c:	429a      	cmp	r2, r3
 800263e:	d108      	bne.n	8002652 <Control_Task+0x43a>
 8002640:	edd7 7a08 	vldr	s15, [r7, #32]
 8002644:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800264c:	edc7 7a08 	vstr	s15, [r7, #32]
 8002650:	e016      	b.n	8002680 <Control_Task+0x468>
					else if(piratePos[2]==nnID) fitness[control_task_state] -= 1/*P*/;//ha még csak tervezi, hogy odamegy, akkor se fogjuk tudni megelőnzi, mert mi 3 nodnyira vagyunk ő pedig csak 2
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <Control_Task+0x540>)
 8002654:	789b      	ldrb	r3, [r3, #2]
 8002656:	7fba      	ldrb	r2, [r7, #30]
 8002658:	429a      	cmp	r2, r3
 800265a:	d111      	bne.n	8002680 <Control_Task+0x468>
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <Control_Task+0x548>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4a45      	ldr	r2, [pc, #276]	; (8002778 <Control_Task+0x560>)
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <Control_Task+0x548>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002676:	4a40      	ldr	r2, [pc, #256]	; (8002778 <Control_Task+0x560>)
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	edc3 7a00 	vstr	s15, [r3]
					if(!lane_change)nnFit *= (float) DIST_AVG/N(nID).distance[i];//a 2.rendű szomszédhoz tartozó fitneszérték jobb ha az közelebb van az 1.rendű szomszédjához
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <Control_Task+0x568>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11b      	bne.n	80026c0 <Control_Task+0x4a8>
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800268e:	4933      	ldr	r1, [pc, #204]	; (800275c <Control_Task+0x544>)
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4413      	add	r3, r2
 800269c:	3308      	adds	r3, #8
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	440b      	add	r3, r1
 80026a2:	889b      	ldrh	r3, [r3, #4]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ac:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002784 <Control_Task+0x56c>
 80026b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	edc7 7a08 	vstr	s15, [r7, #32]
					//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget
				}
				fitness[control_task_state] += nnFit/5/*P*/;
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <Control_Task+0x548>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	; (8002778 <Control_Task+0x560>)
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	ed93 7a00 	vldr	s14, [r3]
 80026ce:	edd7 6a08 	vldr	s13, [r7, #32]
 80026d2:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80026d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <Control_Task+0x548>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e2:	4a25      	ldr	r2, [pc, #148]	; (8002778 <Control_Task+0x560>)
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	edc3 7a00 	vstr	s15, [r3]
			for(i=0;i<4;i++)//2.rednű szomszédok
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	3301      	adds	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	f77f af73 	ble.w	80025e0 <Control_Task+0x3c8>
			}
			if(!lane_change) fitness[control_task_state] *= DIST_AVG/N(pos[MY]).distance[control_task_state]; //minél közelebb van a szomszéd annál jobb
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <Control_Task+0x568>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d149      	bne.n	8002796 <Control_Task+0x57e>
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <Control_Task+0x548>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <Control_Task+0x560>)
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <Control_Task+0x55c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <Control_Task+0x548>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	490f      	ldr	r1, [pc, #60]	; (800275c <Control_Task+0x544>)
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4403      	add	r3, r0
 800272a:	3308      	adds	r3, #8
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	889b      	ldrh	r3, [r3, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002738:	fb93 f3f2 	sdiv	r3, r3, r2
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <Control_Task+0x548>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <Control_Task+0x560>)
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	edc3 7a00 	vstr	s15, [r3]
 8002756:	e01e      	b.n	8002796 <Control_Task+0x57e>
 8002758:	20000294 	.word	0x20000294
 800275c:	2000029c 	.word	0x2000029c
 8002760:	20000569 	.word	0x20000569
 8002764:	2000000c 	.word	0x2000000c
 8002768:	20000288 	.word	0x20000288
 800276c:	20000010 	.word	0x20000010
 8002770:	c2c80000 	.word	0xc2c80000
 8002774:	20000000 	.word	0x20000000
 8002778:	2000056c 	.word	0x2000056c
 800277c:	42c80000 	.word	0x42c80000
 8002780:	20000566 	.word	0x20000566
 8002784:	43960000 	.word	0x43960000
			//ha a sávváltó szakaszt keressük akkor viszont nem díjazzuk a közelséget

		}
		else fitness[control_task_state]=-100.0;//ha nem létezik a szomszéd erre tuti ne menjünk
 8002788:	4b60      	ldr	r3, [pc, #384]	; (800290c <Control_Task+0x6f4>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4a60      	ldr	r2, [pc, #384]	; (8002910 <Control_Task+0x6f8>)
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	4a60      	ldr	r2, [pc, #384]	; (8002914 <Control_Task+0x6fc>)
 8002794:	601a      	str	r2, [r3, #0]


		if(fitness[control_task_state]>=bestFitness)//ha ez a fitness jobb mint az eddigi legjobb, akkor mostantól ez a legjobb
 8002796:	4b5d      	ldr	r3, [pc, #372]	; (800290c <Control_Task+0x6f4>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <Control_Task+0x6f8>)
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	ed93 7a00 	vldr	s14, [r3]
 80027a4:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <Control_Task+0x700>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	db0b      	blt.n	80027cc <Control_Task+0x5b4>
		{
			bestFitness=fitness[control_task_state];
 80027b4:	4b55      	ldr	r3, [pc, #340]	; (800290c <Control_Task+0x6f4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4a55      	ldr	r2, [pc, #340]	; (8002910 <Control_Task+0x6f8>)
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a55      	ldr	r2, [pc, #340]	; (8002918 <Control_Task+0x700>)
 80027c2:	6013      	str	r3, [r2, #0]
			bestNb[TMP] = control_task_state;//ez az egy érték amivel a task első 4 (fitnesszámoló) álapota kommunikál a kiértékelő álapottal
 80027c4:	4b51      	ldr	r3, [pc, #324]	; (800290c <Control_Task+0x6f4>)
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	4b54      	ldr	r3, [pc, #336]	; (800291c <Control_Task+0x704>)
 80027ca:	701a      	strb	r2, [r3, #0]
		}
		control_task_state++;
 80027cc:	4b4f      	ldr	r3, [pc, #316]	; (800290c <Control_Task+0x6f4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <Control_Task+0x6f4>)
 80027d6:	701a      	strb	r2, [r3, #0]
		return; //ha csak valamelyik szomszédot vizsgáltuk még akkor eddig tartott ez a task fuitás, itt kilépünk
 80027d8:	e095      	b.n	8002906 <Control_Task+0x6ee>
	}
	/**************************************************************************************/
	//ide csak akkor jutunk el ha control_task_state>NEIGHBOUR4

	/**********************KIÉRTÉKELÉS (control_task_state=EVALUATE ->5.állapot)**********************/
	bestNb[NEXT]=bestNb[TMP];
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <Control_Task+0x704>)
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	4b4f      	ldr	r3, [pc, #316]	; (800291c <Control_Task+0x704>)
 80027e0:	705a      	strb	r2, [r3, #1]
	pos[NEXT]=N(pos[MY]).neighbours[bestNb[NEXT]];//a következő poziciónk a legjobb szomszéd lesz
 80027e2:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <Control_Task+0x708>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80027ea:	4b4c      	ldr	r3, [pc, #304]	; (800291c <Control_Task+0x704>)
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	4618      	mov	r0, r3
 80027f0:	494c      	ldr	r1, [pc, #304]	; (8002924 <Control_Task+0x70c>)
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	4403      	add	r3, r0
 80027fe:	330c      	adds	r3, #12
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <Control_Task+0x708>)
 8002804:	705a      	strb	r2, [r3, #1]
	dir[NEXT]=N(pos[MY]).directions[bestNb[NEXT]];//már most tudjuk, mi lesz az irányunk, ha odaértünk
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <Control_Task+0x708>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800280e:	4b43      	ldr	r3, [pc, #268]	; (800291c <Control_Task+0x704>)
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	4618      	mov	r0, r3
 8002814:	4943      	ldr	r1, [pc, #268]	; (8002924 <Control_Task+0x70c>)
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	4403      	add	r3, r0
 8002822:	3310      	adds	r3, #16
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <Control_Task+0x710>)
 8002828:	705a      	strb	r2, [r3, #1]

	//a kocsi az egyik node-ból átmegy egy másikba-> az irányok segítségével meghatározzu az új orientationt
	if(bestNb[NEXT] <= NEIGHBOUR2) //ha balra/le kell majd mennünk a nextPosition -höz
 800282a:	4b3c      	ldr	r3, [pc, #240]	; (800291c <Control_Task+0x704>)
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d813      	bhi.n	800285a <Control_Task+0x642>
	{
		if(dir[MY]==2)//és eddig jobbra/fel mentünk,
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <Control_Task+0x710>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d10a      	bne.n	8002850 <Control_Task+0x638>
			nextOri = !orientation;//akkor most orientációt kell váltanunk
 800283a:	4b3c      	ldr	r3, [pc, #240]	; (800292c <Control_Task+0x714>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	bf0c      	ite	eq
 8002842:	2301      	moveq	r3, #1
 8002844:	2300      	movne	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <Control_Task+0x718>)
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e017      	b.n	8002880 <Control_Task+0x668>
		else nextOri = orientation; //különben nem kell
 8002850:	4b36      	ldr	r3, [pc, #216]	; (800292c <Control_Task+0x714>)
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <Control_Task+0x718>)
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e012      	b.n	8002880 <Control_Task+0x668>
	}
	else //ha jobbra kell majd mennünk
	{
		if(dir[MY]==1)//és eddig jobbra/fel mentünk,
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <Control_Task+0x710>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10a      	bne.n	8002878 <Control_Task+0x660>
			nextOri =! orientation;//akkor most irányt kell váltanunk
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <Control_Task+0x714>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <Control_Task+0x718>)
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e003      	b.n	8002880 <Control_Task+0x668>
		else nextOri = orientation; //különben nem kell
 8002878:	4b2c      	ldr	r3, [pc, #176]	; (800292c <Control_Task+0x714>)
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <Control_Task+0x718>)
 800287e:	701a      	strb	r2, [r3, #0]
	}

	//path kiválasztás -> az orientációt mostmár tudjuk (tolatás/előre), már csak az ösvény kell kivákasztani, hogy a megfelelő szomszédhoz jussunk
	if(nextOri==FORWARD)
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <Control_Task+0x718>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d117      	bne.n	80028b8 <Control_Task+0x6a0>
	{
		if(bestNb[NEXT]==0 || bestNb[NEXT]==2)nextPath=LEFT;
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <Control_Task+0x704>)
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <Control_Task+0x680>
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <Control_Task+0x704>)
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d103      	bne.n	80028a0 <Control_Task+0x688>
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <Control_Task+0x71c>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e026      	b.n	80028ee <Control_Task+0x6d6>
		else if(bestNb[NEXT]==1 || bestNb[NEXT]==3)nextPath=RIGHT;
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <Control_Task+0x704>)
 80028a2:	785b      	ldrb	r3, [r3, #1]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d003      	beq.n	80028b0 <Control_Task+0x698>
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <Control_Task+0x704>)
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d11e      	bne.n	80028ee <Control_Task+0x6d6>
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <Control_Task+0x71c>)
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e01a      	b.n	80028ee <Control_Task+0x6d6>
	}
	else if(nextOri==REVERSE) //tolatásnál pont forditva vannak a pathirányok
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <Control_Task+0x718>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d116      	bne.n	80028ee <Control_Task+0x6d6>
	{
		if(bestNb[NEXT]==0 || bestNb[NEXT]==2)nextPath=RIGHT;
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <Control_Task+0x704>)
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <Control_Task+0x6b8>
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <Control_Task+0x704>)
 80028ca:	785b      	ldrb	r3, [r3, #1]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d103      	bne.n	80028d8 <Control_Task+0x6c0>
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <Control_Task+0x71c>)
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e00a      	b.n	80028ee <Control_Task+0x6d6>
		else if(bestNb[NEXT]==1 || bestNb[NEXT]==3)nextPath=LEFT;
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <Control_Task+0x704>)
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d003      	beq.n	80028e8 <Control_Task+0x6d0>
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <Control_Task+0x704>)
 80028e2:	785b      	ldrb	r3, [r3, #1]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d102      	bne.n	80028ee <Control_Task+0x6d6>
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <Control_Task+0x71c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	}
	control_task_state++;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <Control_Task+0x6f4>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <Control_Task+0x6f4>)
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e004      	b.n	8002906 <Control_Task+0x6ee>
	if(control_task_tick>tick)return;
 80028fc:	bf00      	nop
 80028fe:	e002      	b.n	8002906 <Control_Task+0x6ee>
	if(mode!=SKILL)return;
 8002900:	bf00      	nop
 8002902:	e000      	b.n	8002906 <Control_Task+0x6ee>
	if(control_task_state>EVALUATE)return;//ha már kiértékelés is megvolt akkor nincs mit számolni
 8002904:	bf00      	nop

	/**************************************************************************************/
}
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000569 	.word	0x20000569
 8002910:	2000056c 	.word	0x2000056c
 8002914:	c2c80000 	.word	0xc2c80000
 8002918:	20000010 	.word	0x20000010
 800291c:	20000564 	.word	0x20000564
 8002920:	20000000 	.word	0x20000000
 8002924:	2000029c 	.word	0x2000029c
 8002928:	20000008 	.word	0x20000008
 800292c:	20000284 	.word	0x20000284
 8002930:	20000568 	.word	0x20000568
 8002934:	20000567 	.word	0x20000567

08002938 <Mode_Selector>:


void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	; 0x38
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint32_t tmp=0;
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34

	//HAL_FLASH_Unlock();
	tmp= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 8002946:	4b4e      	ldr	r3, [pc, #312]	; (8002a80 <Mode_Selector+0x148>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
	//HAL_FLASH_Lock();
	if(tmp==SKILL || tmp==FAST) mode = (uint8_t)tmp;
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2b52      	cmp	r3, #82	; 0x52
 8002952:	d002      	beq.n	800295a <Mode_Selector+0x22>
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	2b3f      	cmp	r3, #63	; 0x3f
 8002958:	d104      	bne.n	8002964 <Mode_Selector+0x2c>
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <Mode_Selector+0x14c>)
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e002      	b.n	800296a <Mode_Selector+0x32>
	else mode=SKILL;
 8002964:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <Mode_Selector+0x14c>)
 8002966:	2252      	movs	r2, #82	; 0x52
 8002968:	701a      	strb	r2, [r3, #0]

	if(mode==SKILL)
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <Mode_Selector+0x14c>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b52      	cmp	r3, #82	; 0x52
 8002970:	d135      	bne.n	80029de <Mode_Selector+0xa6>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 8002972:	2352      	movs	r3, #82	; 0x52
 8002974:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002976:	f107 010c 	add.w	r1, r7, #12
 800297a:	230a      	movs	r3, #10
 800297c:	2201      	movs	r2, #1
 800297e:	6838      	ldr	r0, [r7, #0]
 8002980:	f007 fda3 	bl	800a4ca <HAL_UART_Transmit>
		HAL_Delay(10);
 8002984:	200a      	movs	r0, #10
 8002986:	f003 f9b3 	bl	8005cf0 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 800298a:	f107 010c 	add.w	r1, r7, #12
 800298e:	230a      	movs	r3, #10
 8002990:	2201      	movs	r2, #1
 8002992:	6838      	ldr	r0, [r7, #0]
 8002994:	f007 fd99 	bl	800a4ca <HAL_UART_Transmit>
		HAL_Delay(10);
 8002998:	200a      	movs	r0, #10
 800299a:	f003 f9a9 	bl	8005cf0 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800299e:	f107 010c 	add.w	r1, r7, #12
 80029a2:	230a      	movs	r3, #10
 80029a4:	2201      	movs	r2, #1
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f007 fd8f 	bl	800a4ca <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4935      	ldr	r1, [pc, #212]	; (8002a88 <Mode_Selector+0x150>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f009 faf2 	bl	800bf9c <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fc27 	bl	8000210 <strlen>
 80029c2:	4603      	mov	r3, r0
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f107 010c 	add.w	r1, r7, #12
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f007 fd7c 	bl	800a4ca <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 80029d2:	2201      	movs	r2, #1
 80029d4:	2120      	movs	r1, #32
 80029d6:	482d      	ldr	r0, [pc, #180]	; (8002a8c <Mode_Selector+0x154>)
 80029d8:	f005 f824 	bl	8007a24 <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 80029dc:	e04c      	b.n	8002a78 <Mode_Selector+0x140>
	else if(mode==FAST)
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <Mode_Selector+0x14c>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b3f      	cmp	r3, #63	; 0x3f
 80029e4:	d135      	bne.n	8002a52 <Mode_Selector+0x11a>
		buffer[0] = CMD_MODE_FAST;
 80029e6:	233f      	movs	r3, #63	; 0x3f
 80029e8:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80029ea:	f107 010c 	add.w	r1, r7, #12
 80029ee:	230a      	movs	r3, #10
 80029f0:	2201      	movs	r2, #1
 80029f2:	6838      	ldr	r0, [r7, #0]
 80029f4:	f007 fd69 	bl	800a4ca <HAL_UART_Transmit>
		HAL_Delay(10);
 80029f8:	200a      	movs	r0, #10
 80029fa:	f003 f979 	bl	8005cf0 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80029fe:	f107 010c 	add.w	r1, r7, #12
 8002a02:	230a      	movs	r3, #10
 8002a04:	2201      	movs	r2, #1
 8002a06:	6838      	ldr	r0, [r7, #0]
 8002a08:	f007 fd5f 	bl	800a4ca <HAL_UART_Transmit>
		HAL_Delay(10);
 8002a0c:	200a      	movs	r0, #10
 8002a0e:	f003 f96f 	bl	8005cf0 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8002a12:	f107 010c 	add.w	r1, r7, #12
 8002a16:	230a      	movs	r3, #10
 8002a18:	2201      	movs	r2, #1
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	f007 fd55 	bl	800a4ca <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	491a      	ldr	r1, [pc, #104]	; (8002a90 <Mode_Selector+0x158>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f009 fab8 	bl	800bf9c <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fbed 	bl	8000210 <strlen>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	f107 010c 	add.w	r1, r7, #12
 8002a3e:	2364      	movs	r3, #100	; 0x64
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f007 fd42 	bl	800a4ca <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2120      	movs	r1, #32
 8002a4a:	4810      	ldr	r0, [pc, #64]	; (8002a8c <Mode_Selector+0x154>)
 8002a4c:	f004 ffea 	bl	8007a24 <HAL_GPIO_WritePin>
}
 8002a50:	e012      	b.n	8002a78 <Mode_Selector+0x140>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	490f      	ldr	r1, [pc, #60]	; (8002a94 <Mode_Selector+0x15c>)
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f009 fa9f 	bl	800bf9c <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fbd4 	bl	8000210 <strlen>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	f107 010c 	add.w	r1, r7, #12
 8002a70:	2364      	movs	r3, #100	; 0x64
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f007 fd29 	bl	800a4ca <HAL_UART_Transmit>
}
 8002a78:	bf00      	nop
 8002a7a:	3738      	adds	r7, #56	; 0x38
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	08060000 	.word	0x08060000
 8002a84:	2000027a 	.word	0x2000027a
 8002a88:	0800f9fc 	.word	0x0800f9fc
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	0800fa0c 	.word	0x0800fa0c
 8002a94:	0800fa1c 	.word	0x0800fa1c

08002a98 <Wait_For_Start_Sigal>:
	HAL_UART_Transmit(huart_monitoring, data, 11, 4);
}


void Wait_For_Start_Sigal(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	uint8_t rcv[]={0};
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	733b      	strb	r3, [r7, #12]
	static uint8_t cnt=5;
	if(mode==FAST)return;
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <Wait_For_Start_Sigal+0xec>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b3f      	cmp	r3, #63	; 0x3f
 8002aac:	d066      	beq.n	8002b7c <Wait_For_Start_Sigal+0xe4>
	while(1)
	{
		if(SW2) //Gombal töerténő indítás
 8002aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab2:	4835      	ldr	r0, [pc, #212]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002ab4:	f004 ff9e 	bl	80079f4 <HAL_GPIO_ReadPin>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <Wait_For_Start_Sigal+0x42>
		{
			if(B2)
 8002abe:	2120      	movs	r1, #32
 8002ac0:	4831      	ldr	r0, [pc, #196]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002ac2:	f004 ff97 	bl	80079f4 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d033      	beq.n	8002b34 <Wait_For_Start_Sigal+0x9c>
			{
				LED_R(0);//kilaszik a sárga fény pár másodpercre amiíg el nem indul a robot
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ad2:	482d      	ldr	r0, [pc, #180]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002ad4:	f004 ffa6 	bl	8007a24 <HAL_GPIO_WritePin>
				break;//ha megnyomtuka 2-es gombot kiugrunk a while ciklusból
 8002ad8:	e038      	b.n	8002b4c <Wait_For_Start_Sigal+0xb4>
			}
		}
		else //Bluetooth-on érkezika  start jel
		{
			HAL_UART_Receive(huart_TB, rcv, 1, HAL_MAX_DELAY);
 8002ada:	f107 010c 	add.w	r1, r7, #12
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f007 fd82 	bl	800a5ee <HAL_UART_Receive>
			if(rcv[0]==cnt+0x30)
 8002aea:	7b3b      	ldrb	r3, [r7, #12]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3330      	adds	r3, #48	; 0x30
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d11a      	bne.n	8002b2e <Wait_For_Start_Sigal+0x96>
			{
				if(cnt<4)
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d80c      	bhi.n	8002b1a <Wait_For_Start_Sigal+0x82>
				{
					HAL_UART_Transmit(huart_debugg, rcv, 1, 2);
 8002b00:	f107 010c 	add.w	r1, r7, #12
 8002b04:	2302      	movs	r3, #2
 8002b06:	2201      	movs	r2, #1
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	f007 fcde 	bl	800a4ca <HAL_UART_Transmit>
					HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
 8002b0e:	2302      	movs	r3, #2
 8002b10:	2202      	movs	r2, #2
 8002b12:	491f      	ldr	r1, [pc, #124]	; (8002b90 <Wait_For_Start_Sigal+0xf8>)
 8002b14:	6838      	ldr	r0, [r7, #0]
 8002b16:	f007 fcd8 	bl	800a4ca <HAL_UART_Transmit>
				}
				if(rcv[0]=='0')break;
 8002b1a:	7b3b      	ldrb	r3, [r7, #12]
 8002b1c:	2b30      	cmp	r3, #48	; 0x30
 8002b1e:	d012      	beq.n	8002b46 <Wait_For_Start_Sigal+0xae>
				cnt--;
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e002      	b.n	8002b34 <Wait_For_Start_Sigal+0x9c>
			}
			else cnt=5;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <Wait_For_Start_Sigal+0xf4>)
 8002b30:	2205      	movs	r2, #5
 8002b32:	701a      	strb	r2, [r3, #0]
		}
		if(!B_NUCLEO)break;
 8002b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b38:	4816      	ldr	r0, [pc, #88]	; (8002b94 <Wait_For_Start_Sigal+0xfc>)
 8002b3a:	f004 ff5b 	bl	80079f4 <HAL_GPIO_ReadPin>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <Wait_For_Start_Sigal+0xb2>
		if(SW2) //Gombal töerténő indítás
 8002b44:	e7b3      	b.n	8002aae <Wait_For_Start_Sigal+0x16>
				if(rcv[0]=='0')break;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <Wait_For_Start_Sigal+0xb4>
		if(!B_NUCLEO)break;
 8002b4a:	bf00      	nop

	}
	if(SW2)	HAL_Delay(2000);
 8002b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b50:	480d      	ldr	r0, [pc, #52]	; (8002b88 <Wait_For_Start_Sigal+0xf0>)
 8002b52:	f004 ff4f 	bl	80079f4 <HAL_GPIO_ReadPin>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <Wait_For_Start_Sigal+0xcc>
 8002b5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b60:	f003 f8c6 	bl	8005cf0 <HAL_Delay>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"START!\n\r",8, 3);
 8002b64:	2303      	movs	r3, #3
 8002b66:	2208      	movs	r2, #8
 8002b68:	490b      	ldr	r1, [pc, #44]	; (8002b98 <Wait_For_Start_Sigal+0x100>)
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f007 fcad 	bl	800a4ca <HAL_UART_Transmit>
	HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002b70:	2206      	movs	r2, #6
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <Wait_For_Start_Sigal+0x104>)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f007 fddc 	bl	800a732 <HAL_UART_Receive_IT>
 8002b7a:	e000      	b.n	8002b7e <Wait_For_Start_Sigal+0xe6>
	if(mode==FAST)return;
 8002b7c:	bf00      	nop
}
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2000027a 	.word	0x2000027a
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	20000014 	.word	0x20000014
 8002b90:	0800fa40 	.word	0x0800fa40
 8002b94:	40020800 	.word	0x40020800
 8002b98:	0800fa44 	.word	0x0800fa44
 8002b9c:	2000028c 	.word	0x2000028c

08002ba0 <Uart_Receive_Thunderboard_ISR>:
void Uart_Receive_Thunderboard_ISR(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	static uint8_t sp[]={0};//slip protection
	static uint8_t cnt=0;
	if(tb_msg[0]>='A' && tb_msg[0]<='Z' && tb_msg[5]>='0' && tb_msg[5]<='9')
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d93d      	bls.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b5a      	cmp	r3, #90	; 0x5a
 8002bb8:	d839      	bhi.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bba:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bbc:	795b      	ldrb	r3, [r3, #5]
 8002bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8002bc0:	d935      	bls.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bc4:	795b      	ldrb	r3, [r3, #5]
 8002bc6:	2b39      	cmp	r3, #57	; 0x39
 8002bc8:	d831      	bhi.n	8002c2e <Uart_Receive_Thunderboard_ISR+0x8e>
	{
		piratePos[0]=tb_msg[0];	piratePos[1]=tb_msg[1];	piratePos[2]=tb_msg[2];
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bd4:	785a      	ldrb	r2, [r3, #1]
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002bd8:	705a      	strb	r2, [r3, #1]
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bdc:	789a      	ldrb	r2, [r3, #2]
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002be0:	709a      	strb	r2, [r3, #2]
		piratePos[3]=100*(tb_msg[3]-0x30) + 10*(tb_msg[4]-0x30) + (tb_msg[5]-0x30);
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002be4:	78db      	ldrb	r3, [r3, #3]
 8002be6:	461a      	mov	r2, r3
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	0091      	lsls	r1, r2, #2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002bfc:	791b      	ldrb	r3, [r3, #4]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	0089      	lsls	r1, r1, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002c0e:	795b      	ldrb	r3, [r3, #5]
 8002c10:	4413      	add	r3, r2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3330      	adds	r3, #48	; 0x30
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <Uart_Receive_Thunderboard_ISR+0xe8>)
 8002c1a:	70da      	strb	r2, [r3, #3]
		thunderboardFlag=1;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <Uart_Receive_Thunderboard_ISR+0xec>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002c22:	2206      	movs	r2, #6
 8002c24:	4917      	ldr	r1, [pc, #92]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f007 fd83 	bl	800a732 <HAL_UART_Receive_IT>
#ifdef TB_DEBUGG
		HAL_UART_Transmit(huart_debugg, tb_msg, 6, 2);
		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
#endif
		return;
 8002c2c:	e026      	b.n	8002c7c <Uart_Receive_Thunderboard_ISR+0xdc>
	}
	//SLIP PROTECTION
	if(sp[0]>='0' && sp[0]<='9')cnt++;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b2f      	cmp	r3, #47	; 0x2f
 8002c34:	d90a      	bls.n	8002c4c <Uart_Receive_Thunderboard_ISR+0xac>
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b39      	cmp	r3, #57	; 0x39
 8002c3c:	d806      	bhi.n	8002c4c <Uart_Receive_Thunderboard_ISR+0xac>
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e002      	b.n	8002c52 <Uart_Receive_Thunderboard_ISR+0xb2>
	else cnt=0;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]

	if(cnt<3) //3 darab ASCI számnak össze kell gyűlnie egymás után
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d805      	bhi.n	8002c66 <Uart_Receive_Thunderboard_ISR+0xc6>
	{
		HAL_UART_Receive_IT(huart_TB, sp, 1);//amig ez nincs meg addig cask egyesével olvasunk
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	490c      	ldr	r1, [pc, #48]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f007 fd67 	bl	800a732 <HAL_UART_Receive_IT>
 8002c64:	e00a      	b.n	8002c7c <Uart_Receive_Thunderboard_ISR+0xdc>
	}
	else//ha megvan megint 6-ossával olvasunk
	{
		sp[0]=0;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
		cnt=0;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8002c72:	2206      	movs	r2, #6
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <Uart_Receive_Thunderboard_ISR+0xe4>)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f007 fd5b 	bl	800a732 <HAL_UART_Receive_IT>
	}

}
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000028c 	.word	0x2000028c
 8002c88:	20000294 	.word	0x20000294
 8002c8c:	20000288 	.word	0x20000288
 8002c90:	2000057c 	.word	0x2000057c
 8002c94:	2000057d 	.word	0x2000057d

08002c98 <Lane_Change_Init>:


void Lane_Change_Init(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
	N('A').worth = N('B').worth = N('C').worth = N('Y').worth = 0;
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <Lane_Change_Init+0x114>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <Lane_Change_Init+0x114>)
 8002ca6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8002caa:	4a40      	ldr	r2, [pc, #256]	; (8002dac <Lane_Change_Init+0x114>)
 8002cac:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002cae:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <Lane_Change_Init+0x114>)
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <Lane_Change_Init+0x114>)
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <Lane_Change_Init+0x114>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a3c      	ldr	r2, [pc, #240]	; (8002dac <Lane_Change_Init+0x114>)
 8002cbc:	6053      	str	r3, [r2, #4]
	N('D').worth = N('E').worth=1;
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <Lane_Change_Init+0x114>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	675a      	str	r2, [r3, #116]	; 0x74
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <Lane_Change_Init+0x114>)
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc8:	4a38      	ldr	r2, [pc, #224]	; (8002dac <Lane_Change_Init+0x114>)
 8002cca:	6593      	str	r3, [r2, #88]	; 0x58
	N('F').worth = N('G').worth = N('W').worth = N('X').worth = 2;
 8002ccc:	4b37      	ldr	r3, [pc, #220]	; (8002dac <Lane_Change_Init+0x114>)
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <Lane_Change_Init+0x114>)
 8002cd6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8002cda:	4a34      	ldr	r2, [pc, #208]	; (8002dac <Lane_Change_Init+0x114>)
 8002cdc:	f8c2 326c 	str.w	r3, [r2, #620]	; 0x26c
 8002ce0:	4b32      	ldr	r3, [pc, #200]	; (8002dac <Lane_Change_Init+0x114>)
 8002ce2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8002ce6:	4a31      	ldr	r2, [pc, #196]	; (8002dac <Lane_Change_Init+0x114>)
 8002ce8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <Lane_Change_Init+0x114>)
 8002cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cf2:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <Lane_Change_Init+0x114>)
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	N('H').worth = N('I').worth = N('J').worth = N('M').worth = N('P').worth = N('T').worth = N('V').worth = N('U').worth = 4;
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <Lane_Change_Init+0x114>)
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 8002d00:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <Lane_Change_Init+0x114>)
 8002d02:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8002d06:	4a29      	ldr	r2, [pc, #164]	; (8002dac <Lane_Change_Init+0x114>)
 8002d08:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <Lane_Change_Init+0x114>)
 8002d0e:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002d12:	4a26      	ldr	r2, [pc, #152]	; (8002dac <Lane_Change_Init+0x114>)
 8002d14:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <Lane_Change_Init+0x114>)
 8002d1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <Lane_Change_Init+0x114>)
 8002d20:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <Lane_Change_Init+0x114>)
 8002d26:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002d2a:	4a20      	ldr	r2, [pc, #128]	; (8002dac <Lane_Change_Init+0x114>)
 8002d2c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <Lane_Change_Init+0x114>)
 8002d32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <Lane_Change_Init+0x114>)
 8002d38:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <Lane_Change_Init+0x114>)
 8002d3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <Lane_Change_Init+0x114>)
 8002d44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <Lane_Change_Init+0x114>)
 8002d4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <Lane_Change_Init+0x114>)
 8002d50:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
	N('L').worth = N('K').worth = N('O').worth = N('R').worth = N('S').worth = 8;
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <Lane_Change_Init+0x114>)
 8002d56:	2208      	movs	r2, #8
 8002d58:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <Lane_Change_Init+0x114>)
 8002d5e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <Lane_Change_Init+0x114>)
 8002d64:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <Lane_Change_Init+0x114>)
 8002d6a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <Lane_Change_Init+0x114>)
 8002d70:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <Lane_Change_Init+0x114>)
 8002d76:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8002d7a:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <Lane_Change_Init+0x114>)
 8002d7c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <Lane_Change_Init+0x114>)
 8002d82:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <Lane_Change_Init+0x114>)
 8002d88:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	N('N').worth = N('Q').worth = 16;
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <Lane_Change_Init+0x114>)
 8002d8e:	2210      	movs	r2, #16
 8002d90:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <Lane_Change_Init+0x114>)
 8002d96:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <Lane_Change_Init+0x114>)
 8002d9c:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	2000029c 	.word	0x2000029c

08002db0 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b090      	sub	sp, #64	; 0x40
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc4:	e016      	b.n	8002df4 <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f002 fffa 	bl	8005dc0 <HAL_ADC_Start>
		HAL_Delay(10);
 8002dcc:	200a      	movs	r0, #10
 8002dce:	f002 ff8f 	bl	8005cf0 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8002dd2:	2114      	movs	r1, #20
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f003 f8c5 	bl	8005f64 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002dda:	200a      	movs	r0, #10
 8002ddc:	f002 ff88 	bl	8005cf0 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f003 f94a 	bl	800607a <HAL_ADC_GetValue>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	4413      	add	r3, r2
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	3301      	adds	r3, #1
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	2b13      	cmp	r3, #19
 8002df8:	dde5      	ble.n	8002dc6 <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e04:	ee17 0a90 	vmov	r0, s15
 8002e08:	f7fd fbbe 	bl	8000588 <__aeabi_f2d>
 8002e0c:	a37b      	add	r3, pc, #492	; (adr r3, 8002ffc <Battery_Voltage_Compensate+0x24c>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd fc11 	bl	8000638 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <Battery_Voltage_Compensate+0x238>)
 8002e24:	f7fd fd32 	bl	800088c <__aeabi_ddiv>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f7fd feda 	bl	8000be8 <__aeabi_d2f>
 8002e34:	4603      	mov	r3, r0
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 8002e38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e3a:	f7fd fba5 	bl	8000588 <__aeabi_f2d>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	f107 0014 	add.w	r0, r7, #20
 8002e46:	4969      	ldr	r1, [pc, #420]	; (8002fec <Battery_Voltage_Compensate+0x23c>)
 8002e48:	f009 f8a8 	bl	800bf9c <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd f9dd 	bl	8000210 <strlen>
 8002e56:	4603      	mov	r3, r0
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	f107 0114 	add.w	r1, r7, #20
 8002e5e:	230a      	movs	r3, #10
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f007 fb32 	bl	800a4ca <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 8002e66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d009      	beq.n	8002e88 <Battery_Voltage_Compensate+0xd8>
 8002e74:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 8002e78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e80:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <Battery_Voltage_Compensate+0x240>)
 8002e82:	edc3 7a00 	vstr	s15, [r3]
 8002e86:	e003      	b.n	8002e90 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <Battery_Voltage_Compensate+0x240>)
 8002e8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e8e:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 8002e90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e92:	f7fd fb79 	bl	8000588 <__aeabi_f2d>
 8002e96:	a34e      	add	r3, pc, #312	; (adr r3, 8002fd0 <Battery_Voltage_Compensate+0x220>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f7fd fe3e 	bl	8000b1c <__aeabi_dcmplt>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eaa:	e00a      	b.n	8002ec2 <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 8002eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb0:	4850      	ldr	r0, [pc, #320]	; (8002ff4 <Battery_Voltage_Compensate+0x244>)
 8002eb2:	f004 fdd0 	bl	8007a56 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002eb6:	20c8      	movs	r0, #200	; 0xc8
 8002eb8:	f002 ff1a 	bl	8005cf0 <HAL_Delay>
		for(i=0;i<10;i++)
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	ddf1      	ble.n	8002eac <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed0:	e016      	b.n	8002f00 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8002ed2:	68b8      	ldr	r0, [r7, #8]
 8002ed4:	f002 ff74 	bl	8005dc0 <HAL_ADC_Start>
		HAL_Delay(10);
 8002ed8:	200a      	movs	r0, #10
 8002eda:	f002 ff09 	bl	8005cf0 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 8002ede:	2114      	movs	r1, #20
 8002ee0:	68b8      	ldr	r0, [r7, #8]
 8002ee2:	f003 f83f 	bl	8005f64 <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8002ee6:	200a      	movs	r0, #10
 8002ee8:	f002 ff02 	bl	8005cf0 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	f003 f8c4 	bl	800607a <HAL_ADC_GetValue>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef6:	4413      	add	r3, r2
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	3301      	adds	r3, #1
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	2b13      	cmp	r3, #19
 8002f04:	dde5      	ble.n	8002ed2 <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f10:	ee17 0a90 	vmov	r0, s15
 8002f14:	f7fd fb38 	bl	8000588 <__aeabi_f2d>
 8002f18:	a32f      	add	r3, pc, #188	; (adr r3, 8002fd8 <Battery_Voltage_Compensate+0x228>)
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f7fd fb8b 	bl	8000638 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <Battery_Voltage_Compensate+0x238>)
 8002f30:	f7fd fcac 	bl	800088c <__aeabi_ddiv>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	a328      	add	r3, pc, #160	; (adr r3, 8002fe0 <Battery_Voltage_Compensate+0x230>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd f9c3 	bl	80002cc <__adddf3>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f7fd fe4b 	bl	8000be8 <__aeabi_d2f>
 8002f52:	4603      	mov	r3, r0
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 8002f56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f58:	f7fd fb16 	bl	8000588 <__aeabi_f2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	f107 0014 	add.w	r0, r7, #20
 8002f64:	4924      	ldr	r1, [pc, #144]	; (8002ff8 <Battery_Voltage_Compensate+0x248>)
 8002f66:	f009 f819 	bl	800bf9c <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd f94e 	bl	8000210 <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	f107 0114 	add.w	r1, r7, #20
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f007 faa3 	bl	800a4ca <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 8002f84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	d510      	bpl.n	8002fb8 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9a:	e00a      	b.n	8002fb2 <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 8002f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa0:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <Battery_Voltage_Compensate+0x244>)
 8002fa2:	f004 fd58 	bl	8007a56 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8002fa6:	20c8      	movs	r0, #200	; 0xc8
 8002fa8:	f002 fea2 	bl	8005cf0 <HAL_Delay>
		for(i=0;i<20;i++)
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	3301      	adds	r3, #1
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	2b13      	cmp	r3, #19
 8002fb6:	ddf1      	ble.n	8002f9c <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fbe:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <Battery_Voltage_Compensate+0x244>)
 8002fc0:	f004 fd30 	bl	8007a24 <HAL_GPIO_WritePin>

}
 8002fc4:	bf00      	nop
 8002fc6:	3740      	adds	r7, #64	; 0x40
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	401ccccc 	.word	0x401ccccc
 8002fd8:	8c6df334 	.word	0x8c6df334
 8002fdc:	3f6a8d60 	.word	0x3f6a8d60
 8002fe0:	47ae147b 	.word	0x47ae147b
 8002fe4:	3f947ae1 	.word	0x3f947ae1
 8002fe8:	40340000 	.word	0x40340000
 8002fec:	0800fa50 	.word	0x0800fa50
 8002ff0:	20000018 	.word	0x20000018
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	0800fa68 	.word	0x0800fa68
 8002ffc:	99fa11a9 	.word	0x99fa11a9
 8003000:	3f72dd7a 	.word	0x3f72dd7a
 8003004:	00000000 	.word	0x00000000

08003008 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <Measure_Velocity_Task+0xd8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d354      	bcc.n	80030ce <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	4a2d      	ldr	r2, [pc, #180]	; (80030e0 <Measure_Velocity_Task+0xd8>)
 800302c:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <Measure_Velocity_Task+0xdc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8003036:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <Measure_Velocity_Task+0xdc>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6013      	str	r3, [r2, #0]
		return;
 800303c:	e048      	b.n	80030d0 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80030e8 <Measure_Velocity_Task+0xe0>
 8003050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003054:	ee17 0a90 	vmov	r0, s15
 8003058:	f7fd fa96 	bl	8000588 <__aeabi_f2d>
 800305c:	a31e      	add	r3, pc, #120	; (adr r3, 80030d8 <Measure_Velocity_Task+0xd0>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd fae9 	bl	8000638 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4614      	mov	r4, r2
 800306c:	461d      	mov	r5, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	ee17 0a90 	vmov	r0, s15
 800307c:	f7fd fa84 	bl	8000588 <__aeabi_f2d>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4620      	mov	r0, r4
 8003086:	4629      	mov	r1, r5
 8003088:	f7fd fc00 	bl	800088c <__aeabi_ddiv>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	f7fd fda8 	bl	8000be8 <__aeabi_d2f>
 8003098:	4603      	mov	r3, r0
 800309a:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <Measure_Velocity_Task+0xe4>)
 800309e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <Measure_Velocity_Task+0xe8>)
 80030a6:	ed93 7a00 	vldr	s14, [r3]
 80030aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <Measure_Velocity_Task+0xec>)
 80030b4:	edd3 6a00 	vldr	s13, [r3]
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <Measure_Velocity_Task+0xf0>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <Measure_Velocity_Task+0xf0>)
 80030c8:	edc3 7a00 	vstr	s15, [r3]
 80030cc:	e000      	b.n	80030d0 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 80030ce:	bf00      	nop
}
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	8f5c28f6 	.word	0x8f5c28f6
 80030dc:	401df5c2 	.word	0x401df5c2
 80030e0:	2000001c 	.word	0x2000001c
 80030e4:	20000584 	.word	0x20000584
 80030e8:	47000000 	.word	0x47000000
 80030ec:	40010400 	.word	0x40010400
 80030f0:	20000020 	.word	0x20000020
 80030f4:	20000024 	.word	0x20000024
 80030f8:	20000580 	.word	0x20000580
 80030fc:	00000000 	.word	0x00000000

08003100 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 800310e:	4b90      	ldr	r3, [pc, #576]	; (8003350 <Motor_Drive_Task+0x250>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	f0c0 8109 	bcc.w	800332c <Motor_Drive_Task+0x22c>
	motor_drive_task_tick= tick + period;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a8b      	ldr	r2, [pc, #556]	; (8003350 <Motor_Drive_Task+0x250>)
 8003122:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8003124:	4b8b      	ldr	r3, [pc, #556]	; (8003354 <Motor_Drive_Task+0x254>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80b4 	beq.w	8003296 <Motor_Drive_Task+0x196>
 800312e:	4b8a      	ldr	r3, [pc, #552]	; (8003358 <Motor_Drive_Task+0x258>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80af 	beq.w	8003296 <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8003138:	4b88      	ldr	r3, [pc, #544]	; (800335c <Motor_Drive_Task+0x25c>)
 800313a:	ed93 7a00 	vldr	s14, [r3]
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <Motor_Drive_Task+0x260>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003148:	ee17 0a90 	vmov	r0, s15
 800314c:	f7fd fa1c 	bl	8000588 <__aeabi_f2d>
 8003150:	a379      	add	r3, pc, #484	; (adr r3, 8003338 <Motor_Drive_Task+0x238>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd fa6f 	bl	8000638 <__aeabi_dmul>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4614      	mov	r4, r2
 8003160:	461d      	mov	r5, r3
 8003162:	4b80      	ldr	r3, [pc, #512]	; (8003364 <Motor_Drive_Task+0x264>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fa0e 	bl	8000588 <__aeabi_f2d>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fa60 	bl	8000638 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4b79      	ldr	r3, [pc, #484]	; (8003368 <Motor_Drive_Task+0x268>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f9ff 	bl	8000588 <__aeabi_f2d>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd f89b 	bl	80002cc <__adddf3>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd23 	bl	8000be8 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a71      	ldr	r2, [pc, #452]	; (800336c <Motor_Drive_Task+0x26c>)
 80031a6:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 80031a8:	4b70      	ldr	r3, [pc, #448]	; (800336c <Motor_Drive_Task+0x26c>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003370 <Motor_Drive_Task+0x270>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	dd03      	ble.n	80031c4 <Motor_Drive_Task+0xc4>
 80031bc:	4b6b      	ldr	r3, [pc, #428]	; (800336c <Motor_Drive_Task+0x26c>)
 80031be:	4a6d      	ldr	r2, [pc, #436]	; (8003374 <Motor_Drive_Task+0x274>)
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e00c      	b.n	80031de <Motor_Drive_Task+0xde>
		else if(u<-500)u=-500;
 80031c4:	4b69      	ldr	r3, [pc, #420]	; (800336c <Motor_Drive_Task+0x26c>)
 80031c6:	edd3 7a00 	vldr	s15, [r3]
 80031ca:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003378 <Motor_Drive_Task+0x278>
 80031ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d502      	bpl.n	80031de <Motor_Drive_Task+0xde>
 80031d8:	4b64      	ldr	r3, [pc, #400]	; (800336c <Motor_Drive_Task+0x26c>)
 80031da:	4a68      	ldr	r2, [pc, #416]	; (800337c <Motor_Drive_Task+0x27c>)
 80031dc:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 80031de:	4b62      	ldr	r3, [pc, #392]	; (8003368 <Motor_Drive_Task+0x268>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f9d0 	bl	8000588 <__aeabi_f2d>
 80031e8:	a355      	add	r3, pc, #340	; (adr r3, 8003340 <Motor_Drive_Task+0x240>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fd fa23 	bl	8000638 <__aeabi_dmul>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4614      	mov	r4, r2
 80031f8:	461d      	mov	r5, r3
 80031fa:	4b5c      	ldr	r3, [pc, #368]	; (800336c <Motor_Drive_Task+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f9c2 	bl	8000588 <__aeabi_f2d>
 8003204:	a350      	add	r3, pc, #320	; (adr r3, 8003348 <Motor_Drive_Task+0x248>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd fa15 	bl	8000638 <__aeabi_dmul>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f7fd f859 	bl	80002cc <__adddf3>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f7fd fce1 	bl	8000be8 <__aeabi_d2f>
 8003226:	4603      	mov	r3, r0
 8003228:	4a4f      	ldr	r2, [pc, #316]	; (8003368 <Motor_Drive_Task+0x268>)
 800322a:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 800322c:	4b4f      	ldr	r3, [pc, #316]	; (800336c <Motor_Drive_Task+0x26c>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	dd0a      	ble.n	8003252 <Motor_Drive_Task+0x152>
 800323c:	4b4b      	ldr	r3, [pc, #300]	; (800336c <Motor_Drive_Task+0x26c>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003246:	ee17 3a90 	vmov	r3, s15
 800324a:	3346      	adds	r3, #70	; 0x46
 800324c:	4a4c      	ldr	r2, [pc, #304]	; (8003380 <Motor_Drive_Task+0x280>)
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e01b      	b.n	800328a <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 8003252:	4b46      	ldr	r3, [pc, #280]	; (800336c <Motor_Drive_Task+0x26c>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	d50a      	bpl.n	8003278 <Motor_Drive_Task+0x178>
 8003262:	4b42      	ldr	r3, [pc, #264]	; (800336c <Motor_Drive_Task+0x26c>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800326c:	ee17 3a90 	vmov	r3, s15
 8003270:	3b46      	subs	r3, #70	; 0x46
 8003272:	4a43      	ldr	r2, [pc, #268]	; (8003380 <Motor_Drive_Task+0x280>)
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e008      	b.n	800328a <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8003278:	4b3c      	ldr	r3, [pc, #240]	; (800336c <Motor_Drive_Task+0x26c>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003282:	ee17 2a90 	vmov	r2, s15
 8003286:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <Motor_Drive_Task+0x280>)
 8003288:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 800328a:	2201      	movs	r2, #1
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	483d      	ldr	r0, [pc, #244]	; (8003384 <Motor_Drive_Task+0x284>)
 8003290:	f004 fbc8 	bl	8007a24 <HAL_GPIO_WritePin>
 8003294:	e00c      	b.n	80032b0 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 8003296:	4b35      	ldr	r3, [pc, #212]	; (800336c <Motor_Drive_Task+0x26c>)
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <Motor_Drive_Task+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a31      	ldr	r2, [pc, #196]	; (8003368 <Motor_Drive_Task+0x268>)
 80032a4:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 80032a6:	2200      	movs	r2, #0
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	4836      	ldr	r0, [pc, #216]	; (8003384 <Motor_Drive_Task+0x284>)
 80032ac:	f004 fbba 	bl	8007a24 <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	/**/
	if(mode==FAST && rxBuf[1]<1)
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <Motor_Drive_Task+0x288>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b3f      	cmp	r3, #63	; 0x3f
 80032b6:	d10c      	bne.n	80032d2 <Motor_Drive_Task+0x1d2>
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <Motor_Drive_Task+0x28c>)
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d108      	bne.n	80032d2 <Motor_Drive_Task+0x1d2>
	{
		TIM3->CCR1=499;
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <Motor_Drive_Task+0x290>)
 80032c2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2=499;
 80032c8:	4b31      	ldr	r3, [pc, #196]	; (8003390 <Motor_Drive_Task+0x290>)
 80032ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
 80032d0:	e027      	b.n	8003322 <Motor_Drive_Task+0x222>
		//LED_Y_TOGGLE;
	}
	else if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 80032d2:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <Motor_Drive_Task+0x280>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <Motor_Drive_Task+0x294>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d021      	beq.n	8003322 <Motor_Drive_Task+0x222>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <Motor_Drive_Task+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80032e6:	0fda      	lsrs	r2, r3, #31
 80032e8:	4413      	add	r3, r2
 80032ea:	105b      	asrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f240 32b6 	movw	r2, #950	; 0x3b6
 80032f6:	4293      	cmp	r3, r2
 80032f8:	dd02      	ble.n	8003300 <Motor_Drive_Task+0x200>
 80032fa:	f240 33b6 	movw	r3, #950	; 0x3b6
 80032fe:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	4a25      	ldr	r2, [pc, #148]	; (8003398 <Motor_Drive_Task+0x298>)
 8003304:	4293      	cmp	r3, r2
 8003306:	da01      	bge.n	800330c <Motor_Drive_Task+0x20c>
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <Motor_Drive_Task+0x298>)
 800330a:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003312:	3302      	adds	r3, #2
 8003314:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd

		TIM3->CCR1=ccr1;
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <Motor_Drive_Task+0x290>)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <Motor_Drive_Task+0x290>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <Motor_Drive_Task+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <Motor_Drive_Task+0x294>)
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e000      	b.n	800332e <Motor_Drive_Task+0x22e>
	if(motor_drive_task_tick>tick) return;
 800332c:	bf00      	nop
}
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	f3af 8000 	nop.w
 8003338:	30be0ded 	.word	0x30be0ded
 800333c:	3fd02a99 	.word	0x3fd02a99
 8003340:	9b3d07c8 	.word	0x9b3d07c8
 8003344:	3fef9f55 	.word	0x3fef9f55
 8003348:	30be0e00 	.word	0x30be0e00
 800334c:	3f882a99 	.word	0x3f882a99
 8003350:	20000028 	.word	0x20000028
 8003354:	200009b4 	.word	0x200009b4
 8003358:	200009b5 	.word	0x200009b5
 800335c:	2000027c 	.word	0x2000027c
 8003360:	20000580 	.word	0x20000580
 8003364:	20000018 	.word	0x20000018
 8003368:	20000588 	.word	0x20000588
 800336c:	2000058c 	.word	0x2000058c
 8003370:	445c0000 	.word	0x445c0000
 8003374:	445c0000 	.word	0x445c0000
 8003378:	c3fa0000 	.word	0xc3fa0000
 800337c:	c3fa0000 	.word	0xc3fa0000
 8003380:	20000590 	.word	0x20000590
 8003384:	40020400 	.word	0x40020400
 8003388:	2000027a 	.word	0x2000027a
 800338c:	20000598 	.word	0x20000598
 8003390:	40000400 	.word	0x40000400
 8003394:	20000594 	.word	0x20000594
 8003398:	fffffc4a 	.word	0xfffffc4a

0800339c <G0_Read_Fast>:

volatile uint8_t flagG0=0;


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <G0_Read_Fast+0x5c>)
 80033ac:	222a      	movs	r2, #42	; 0x2a
 80033ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 80033b0:	2302      	movs	r3, #2
 80033b2:	2201      	movs	r2, #1
 80033b4:	4910      	ldr	r1, [pc, #64]	; (80033f8 <G0_Read_Fast+0x5c>)
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f007 f887 	bl	800a4ca <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 4);
 80033bc:	2304      	movs	r3, #4
 80033be:	2208      	movs	r2, #8
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <G0_Read_Fast+0x60>)
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f007 f913 	bl	800a5ee <HAL_UART_Receive>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <G0_Read_Fast+0x64>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE_FAST) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <G0_Read_Fast+0x50>
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <G0_Read_Fast+0x60>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b41      	cmp	r3, #65	; 0x41
 80033de:	d105      	bne.n	80033ec <G0_Read_Fast+0x50>
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <G0_Read_Fast+0x60>)
 80033e2:	79db      	ldrb	r3, [r3, #7]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d101      	bne.n	80033ec <G0_Read_Fast+0x50>
	{
		return 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 80033ec:	2301      	movs	r3, #1
	}
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000002c 	.word	0x2000002c
 80033fc:	20000598 	.word	0x20000598
 8003400:	200009b5 	.word	0x200009b5

08003404 <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	71fb      	strb	r3, [r7, #7]
	uint8_t state=1;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 8003416:	4a15      	ldr	r2, [pc, #84]	; (800346c <G0_Read_Skill+0x68>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 800341c:	2302      	movs	r3, #2
 800341e:	2201      	movs	r2, #1
 8003420:	4912      	ldr	r1, [pc, #72]	; (800346c <G0_Read_Skill+0x68>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f007 f851 	bl	800a4ca <HAL_UART_Transmit>
	state = HAL_UART_Receive(huart_stm, rxBuf, 10, 4);
 8003428:	2304      	movs	r3, #4
 800342a:	220a      	movs	r2, #10
 800342c:	4910      	ldr	r1, [pc, #64]	; (8003470 <G0_Read_Skill+0x6c>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f007 f8dd 	bl	800a5ee <HAL_UART_Receive>
 8003434:	4603      	mov	r3, r0
 8003436:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <G0_Read_Skill+0x70>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE_SKILL_FORWARD || rxBuf[0]==START_BYTE_SKILL_REVERSE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <G0_Read_Skill+0x5c>
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <G0_Read_Skill+0x6c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b50      	cmp	r3, #80	; 0x50
 800344a:	d003      	beq.n	8003454 <G0_Read_Skill+0x50>
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <G0_Read_Skill+0x6c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2ba8      	cmp	r3, #168	; 0xa8
 8003452:	d105      	bne.n	8003460 <G0_Read_Skill+0x5c>
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <G0_Read_Skill+0x6c>)
 8003456:	7a5b      	ldrb	r3, [r3, #9]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d101      	bne.n	8003460 <G0_Read_Skill+0x5c>
	{
		return 0;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <G0_Read_Skill+0x5e>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8003460:	2301      	movs	r3, #1
	}
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000002c 	.word	0x2000002c
 8003470:	20000598 	.word	0x20000598
 8003474:	200009b5 	.word	0x200009b5

08003478 <Line_Track_Task>:
	}
	else flagG0=0;
}

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t ccr_front_prev=0;
	static uint32_t tick_prev=0;

	if(line_track_task_tick>tick) return;
 8003486:	4bb2      	ldr	r3, [pc, #712]	; (8003750 <Line_Track_Task+0x2d8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	f0c0 824f 	bcc.w	8003930 <Line_Track_Task+0x4b8>
	line_track_task_tick = tick + period;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4413      	add	r3, r2
 8003498:	4aad      	ldr	r2, [pc, #692]	; (8003750 <Line_Track_Task+0x2d8>)
 800349a:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 800349c:	4bad      	ldr	r3, [pc, #692]	; (8003754 <Line_Track_Task+0x2dc>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b52      	cmp	r3, #82	; 0x52
 80034a2:	f040 81a0 	bne.w	80037e6 <Line_Track_Task+0x36e>
	{
		//if(orientation==FORWARD) //ELŐREMENET
		if(orientation==FORWARD)
 80034a6:	4bac      	ldr	r3, [pc, #688]	; (8003758 <Line_Track_Task+0x2e0>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 80a0 	bne.w	80035f0 <Line_Track_Task+0x178>
				if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
				gamma = Skill_Mode(huart_debugg, -0.004, -0.05, tick);
			}
			HAL_UART_Transmit_IT(huart_stm, txBuf, 1);//elindítom a következő olvasást egy CMD parancs kiküldésével
			*/
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 80034b0:	2239      	movs	r2, #57	; 0x39
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff ffa5 	bl	8003404 <G0_Read_Skill>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 8239 	bne.w	8003934 <Line_Track_Task+0x4bc>
			Detect_Node2(huart_debugg, tick);
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f000 fe81 	bl	80041cc <Detect_Node2>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80034ca:	4ba4      	ldr	r3, [pc, #656]	; (800375c <Line_Track_Task+0x2e4>)
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8232 	beq.w	8003938 <Line_Track_Task+0x4c0>
 80034d4:	4ba1      	ldr	r3, [pc, #644]	; (800375c <Line_Track_Task+0x2e4>)
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	f200 822d 	bhi.w	8003938 <Line_Track_Task+0x4c0>
			v_ref=1100;
 80034de:	4ba0      	ldr	r3, [pc, #640]	; (8003760 <Line_Track_Task+0x2e8>)
 80034e0:	4aa0      	ldr	r2, [pc, #640]	; (8003764 <Line_Track_Task+0x2ec>)
 80034e2:	601a      	str	r2, [r3, #0]
			//Detect_Node3(huart_debugg, tick);
			gamma = Skill_Mode(huart_debugg, -0.004, -0.05*8/(tick-tick_prev), tick);
 80034e4:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <Line_Track_Task+0x2f0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f829 	bl	8000544 <__aeabi_ui2d>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	a18e      	add	r1, pc, #568	; (adr r1, 8003730 <Line_Track_Task+0x2b8>)
 80034f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034fc:	f7fd f9c6 	bl	800088c <__aeabi_ddiv>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fb6e 	bl	8000be8 <__aeabi_d2f>
 800350c:	4603      	mov	r3, r0
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	ee00 3a90 	vmov	s1, r3
 8003514:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800376c <Line_Track_Task+0x2f4>
 8003518:	68b8      	ldr	r0, [r7, #8]
 800351a:	f000 fcb5 	bl	8003e88 <Skill_Mode>
 800351e:	eef0 7a40 	vmov.f32	s15, s0
 8003522:	4b93      	ldr	r3, [pc, #588]	; (8003770 <Line_Track_Task+0x2f8>)
 8003524:	edc3 7a00 	vstr	s15, [r3]

			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8003528:	4b91      	ldr	r3, [pc, #580]	; (8003770 <Line_Track_Task+0x2f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f82b 	bl	8000588 <__aeabi_f2d>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	ec43 2b10 	vmov	d0, r2, r3
 800353a:	f00b f955 	bl	800e7e8 <tan>
 800353e:	ec51 0b10 	vmov	r0, r1, d0
 8003542:	a37d      	add	r3, pc, #500	; (adr r3, 8003738 <Line_Track_Task+0x2c0>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f7fd f876 	bl	8000638 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	ec43 2b17 	vmov	d7, r2, r3
 8003554:	eeb0 0a47 	vmov.f32	s0, s14
 8003558:	eef0 0a67 	vmov.f32	s1, s15
 800355c:	f00a ff98 	bl	800e490 <atan>
 8003560:	ec53 2b10 	vmov	r2, r3, d0
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fb3e 	bl	8000be8 <__aeabi_d2f>
 800356c:	4603      	mov	r3, r0
 800356e:	4a81      	ldr	r2, [pc, #516]	; (8003774 <Line_Track_Task+0x2fc>)
 8003570:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(-1470 * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8003572:	4b80      	ldr	r3, [pc, #512]	; (8003774 <Line_Track_Task+0x2fc>)
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003778 <Line_Track_Task+0x300>
 800357c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003580:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800377c <Line_Track_Task+0x304>
 8003584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800358c:	ee17 3a90 	vmov	r3, s15
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	4b7a      	ldr	r3, [pc, #488]	; (8003780 <Line_Track_Task+0x308>)
 8003596:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <Line_Track_Task+0x308>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80035a0:	dd04      	ble.n	80035ac <Line_Track_Task+0x134>
			{
				ccr = CCR_FRONT_MAX;
 80035a2:	4b77      	ldr	r3, [pc, #476]	; (8003780 <Line_Track_Task+0x308>)
 80035a4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e008      	b.n	80035be <Line_Track_Task+0x146>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 80035ac:	4b74      	ldr	r3, [pc, #464]	; (8003780 <Line_Track_Task+0x308>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80035b4:	da03      	bge.n	80035be <Line_Track_Task+0x146>
			{
				ccr = CCR_FRONT_MIN;
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <Line_Track_Task+0x308>)
 80035b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80035bc:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 80035be:	4b70      	ldr	r3, [pc, #448]	; (8003780 <Line_Track_Task+0x308>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34
			ccr_front_prev= ccr;
 80035c8:	4b6d      	ldr	r3, [pc, #436]	; (8003780 <Line_Track_Task+0x308>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b6d      	ldr	r3, [pc, #436]	; (8003784 <Line_Track_Task+0x30c>)
 80035d0:	601a      	str	r2, [r3, #0]
			if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 80035d2:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <Line_Track_Task+0x310>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f240 22b2 	movw	r2, #690	; 0x2b2
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <Line_Track_Task+0x16e>
 80035de:	4b6b      	ldr	r3, [pc, #428]	; (800378c <Line_Track_Task+0x314>)
 80035e0:	f240 22b2 	movw	r2, #690	; 0x2b2
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
			ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 80035e6:	4b68      	ldr	r3, [pc, #416]	; (8003788 <Line_Track_Task+0x310>)
 80035e8:	f240 22b2 	movw	r2, #690	; 0x2b2
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e19b      	b.n	8003928 <Line_Track_Task+0x4b0>
		}
		else if(orientation==REVERSE)//TOLATÁS
 80035f0:	4b59      	ldr	r3, [pc, #356]	; (8003758 <Line_Track_Task+0x2e0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 8197 	bne.w	8003928 <Line_Track_Task+0x4b0>
				gamma = Skill_Mode(huart_debugg, 0.005, 0.12, tick);

			}
			HAL_UART_Transmit_IT(huart_stm, txBuf, 1);//elindítom a következő olvasást egy CMD parancs kiküldésével
			*/
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 80035fa:	2291      	movs	r2, #145	; 0x91
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff ff00 	bl	8003404 <G0_Read_Skill>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 8198 	bne.w	800393c <Line_Track_Task+0x4c4>
			Detect_Node2(huart_debugg, tick);
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	68b8      	ldr	r0, [r7, #8]
 8003610:	f000 fddc 	bl	80041cc <Detect_Node2>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003614:	4b51      	ldr	r3, [pc, #324]	; (800375c <Line_Track_Task+0x2e4>)
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8191 	beq.w	8003940 <Line_Track_Task+0x4c8>
 800361e:	4b4f      	ldr	r3, [pc, #316]	; (800375c <Line_Track_Task+0x2e4>)
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	2b04      	cmp	r3, #4
 8003624:	f200 818c 	bhi.w	8003940 <Line_Track_Task+0x4c8>
			v_ref=-900;
 8003628:	4b4d      	ldr	r3, [pc, #308]	; (8003760 <Line_Track_Task+0x2e8>)
 800362a:	4a59      	ldr	r2, [pc, #356]	; (8003790 <Line_Track_Task+0x318>)
 800362c:	601a      	str	r2, [r3, #0]
			//Detect_Node3(huart_debugg, tick);

			gamma = Skill_Mode(huart_debugg, 0.0047, 0.127*8/(tick-tick_prev), tick);
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <Line_Track_Task+0x2f0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ff84 	bl	8000544 <__aeabi_ui2d>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	a13f      	add	r1, pc, #252	; (adr r1, 8003740 <Line_Track_Task+0x2c8>)
 8003642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003646:	f7fd f921 	bl	800088c <__aeabi_ddiv>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	f7fd fac9 	bl	8000be8 <__aeabi_d2f>
 8003656:	4603      	mov	r3, r0
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	ee00 3a90 	vmov	s1, r3
 800365e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8003794 <Line_Track_Task+0x31c>
 8003662:	68b8      	ldr	r0, [r7, #8]
 8003664:	f000 fc10 	bl	8003e88 <Skill_Mode>
 8003668:	eef0 7a40 	vmov.f32	s15, s0
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <Line_Track_Task+0x2f8>)
 800366e:	edc3 7a00 	vstr	s15, [r3]
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 8003672:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <Line_Track_Task+0x2f8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc ff86 	bl	8000588 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	ec43 2b10 	vmov	d0, r2, r3
 8003684:	f00b f8b0 	bl	800e7e8 <tan>
 8003688:	ec51 0b10 	vmov	r0, r1, d0
 800368c:	a32e      	add	r3, pc, #184	; (adr r3, 8003748 <Line_Track_Task+0x2d0>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fc ffd1 	bl	8000638 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	ec43 2b17 	vmov	d7, r2, r3
 800369e:	eeb0 0a47 	vmov.f32	s0, s14
 80036a2:	eef0 0a67 	vmov.f32	s1, s15
 80036a6:	f00a fef3 	bl	800e490 <atan>
 80036aa:	ec53 2b10 	vmov	r2, r3, d0
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7fd fa99 	bl	8000be8 <__aeabi_d2f>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4a2e      	ldr	r2, [pc, #184]	; (8003774 <Line_Track_Task+0x2fc>)
 80036ba:	6013      	str	r3, [r2, #0]
			if(PHI>0)ccr = (uint16_t)(1260 * PHI + SERVO_REAR_CCR_MIDDLE);
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <Line_Track_Task+0x2fc>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	dd13      	ble.n	80036f4 <Line_Track_Task+0x27c>
 80036cc:	4b29      	ldr	r3, [pc, #164]	; (8003774 <Line_Track_Task+0x2fc>)
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003798 <Line_Track_Task+0x320>
 80036d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036da:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800379c <Line_Track_Task+0x324>
 80036de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e6:	ee17 3a90 	vmov	r3, s15
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b24      	ldr	r3, [pc, #144]	; (8003780 <Line_Track_Task+0x308>)
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e012      	b.n	800371a <Line_Track_Task+0x2a2>
			else ccr = (uint16_t)(1311 * PHI + SERVO_REAR_CCR_MIDDLE);
 80036f4:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <Line_Track_Task+0x2fc>)
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80037a0 <Line_Track_Task+0x328>
 80036fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003702:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800379c <Line_Track_Task+0x324>
 8003706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800370a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370e:	ee17 3a90 	vmov	r3, s15
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <Line_Track_Task+0x308>)
 8003718:	601a      	str	r2, [r3, #0]
			//HÁTSÓ SZERVÓ
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <Line_Track_Task+0x308>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f240 327a 	movw	r2, #890	; 0x37a
 8003722:	4293      	cmp	r3, r2
 8003724:	dd3e      	ble.n	80037a4 <Line_Track_Task+0x32c>
			{
				ccr = CCR_REAR_MAX;
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <Line_Track_Task+0x308>)
 8003728:	f240 327a 	movw	r2, #890	; 0x37a
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e042      	b.n	80037b6 <Line_Track_Task+0x33e>
 8003730:	9999999a 	.word	0x9999999a
 8003734:	bfd99999 	.word	0xbfd99999
 8003738:	c4830201 	.word	0xc4830201
 800373c:	3fe73a26 	.word	0x3fe73a26
 8003740:	374bc6a8 	.word	0x374bc6a8
 8003744:	3ff04189 	.word	0x3ff04189
 8003748:	a3f47e90 	.word	0xa3f47e90
 800374c:	3fe8fd1f 	.word	0x3fe8fd1f
 8003750:	20000030 	.word	0x20000030
 8003754:	2000027a 	.word	0x2000027a
 8003758:	20000284 	.word	0x20000284
 800375c:	20000598 	.word	0x20000598
 8003760:	2000027c 	.word	0x2000027c
 8003764:	44898000 	.word	0x44898000
 8003768:	200005a4 	.word	0x200005a4
 800376c:	bb83126f 	.word	0xbb83126f
 8003770:	200005a8 	.word	0x200005a8
 8003774:	200005ac 	.word	0x200005ac
 8003778:	c4b7c000 	.word	0xc4b7c000
 800377c:	442d0000 	.word	0x442d0000
 8003780:	20000034 	.word	0x20000034
 8003784:	200005b0 	.word	0x200005b0
 8003788:	200005b4 	.word	0x200005b4
 800378c:	40010000 	.word	0x40010000
 8003790:	c4610000 	.word	0xc4610000
 8003794:	3b9a0275 	.word	0x3b9a0275
 8003798:	449d8000 	.word	0x449d8000
 800379c:	442c8000 	.word	0x442c8000
 80037a0:	44a3e000 	.word	0x44a3e000
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 80037a4:	4b6c      	ldr	r3, [pc, #432]	; (8003958 <Line_Track_Task+0x4e0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80037ac:	da03      	bge.n	80037b6 <Line_Track_Task+0x33e>
			{
				ccr = CCR_REAR_MIN;
 80037ae:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <Line_Track_Task+0x4e0>)
 80037b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80037b4:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 80037b6:	4b68      	ldr	r3, [pc, #416]	; (8003958 <Line_Track_Task+0x4e0>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b68      	ldr	r3, [pc, #416]	; (800395c <Line_Track_Task+0x4e4>)
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
			ccr_rear_prev=ccr;
 80037be:	4b66      	ldr	r3, [pc, #408]	; (8003958 <Line_Track_Task+0x4e0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <Line_Track_Task+0x4e8>)
 80037c6:	601a      	str	r2, [r3, #0]
			if(ccr_front_prev!=SERVO_FRONT_CCR_MIDDLE) TIM2->CCR1 = SERVO_FRONT_CCR_MIDDLE;
 80037c8:	4b66      	ldr	r3, [pc, #408]	; (8003964 <Line_Track_Task+0x4ec>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f5b3 7f2d 	cmp.w	r3, #692	; 0x2b4
 80037d0:	d004      	beq.n	80037dc <Line_Track_Task+0x364>
 80037d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037d6:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80037da:	635a      	str	r2, [r3, #52]	; 0x34
			ccr_front_prev=SERVO_FRONT_CCR_MIDDLE;
 80037dc:	4b61      	ldr	r3, [pc, #388]	; (8003964 <Line_Track_Task+0x4ec>)
 80037de:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e0a0      	b.n	8003928 <Line_Track_Task+0x4b0>
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 80037e6:	4b60      	ldr	r3, [pc, #384]	; (8003968 <Line_Track_Task+0x4f0>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b3f      	cmp	r3, #63	; 0x3f
 80037ec:	f040 809c 	bne.w	8003928 <Line_Track_Task+0x4b0>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff fdd2 	bl	800339c <G0_Read_Fast>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80a2 	bne.w	8003944 <Line_Track_Task+0x4cc>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 8003800:	4b5a      	ldr	r3, [pc, #360]	; (800396c <Line_Track_Task+0x4f4>)
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 809f 	beq.w	8003948 <Line_Track_Task+0x4d0>
 800380a:	4b58      	ldr	r3, [pc, #352]	; (800396c <Line_Track_Task+0x4f4>)
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b03      	cmp	r3, #3
 8003810:	f200 809a 	bhi.w	8003948 <Line_Track_Task+0x4d0>
		gamma = Fast_Mode(huart_debugg,tick);
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	68b8      	ldr	r0, [r7, #8]
 8003818:	f000 f8ba 	bl	8003990 <Fast_Mode>
 800381c:	eef0 7a40 	vmov.f32	s15, s0
 8003820:	4b53      	ldr	r3, [pc, #332]	; (8003970 <Line_Track_Task+0x4f8>)
 8003822:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8003826:	4b52      	ldr	r3, [pc, #328]	; (8003970 <Line_Track_Task+0x4f8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fc feac 	bl	8000588 <__aeabi_f2d>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	ec43 2b10 	vmov	d0, r2, r3
 8003838:	f00a ffd6 	bl	800e7e8 <tan>
 800383c:	ec51 0b10 	vmov	r0, r1, d0
 8003840:	a343      	add	r3, pc, #268	; (adr r3, 8003950 <Line_Track_Task+0x4d8>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fc fef7 	bl	8000638 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	ec43 2b17 	vmov	d7, r2, r3
 8003852:	eeb0 0a47 	vmov.f32	s0, s14
 8003856:	eef0 0a67 	vmov.f32	s1, s15
 800385a:	f00a fe19 	bl	800e490 <atan>
 800385e:	ec53 2b10 	vmov	r2, r3, d0
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	f7fd f9bf 	bl	8000be8 <__aeabi_d2f>
 800386a:	4603      	mov	r3, r0
 800386c:	4a41      	ldr	r2, [pc, #260]	; (8003974 <Line_Track_Task+0x4fc>)
 800386e:	6013      	str	r3, [r2, #0]
		if(v>2000) ccr = (uint16_t)(-SERVO_M_STRAIGHT * PHI + SERVO_FRONT_CCR_MIDDLE);
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <Line_Track_Task+0x500>)
 8003872:	edd3 7a00 	vldr	s15, [r3]
 8003876:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800397c <Line_Track_Task+0x504>
 800387a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	dd13      	ble.n	80038ac <Line_Track_Task+0x434>
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <Line_Track_Task+0x4fc>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003980 <Line_Track_Task+0x508>
 800388e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003892:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003984 <Line_Track_Task+0x50c>
 8003896:	ee77 7a87 	vadd.f32	s15, s15, s14
 800389a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389e:	ee17 3a90 	vmov	r3, s15
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b2c      	ldr	r3, [pc, #176]	; (8003958 <Line_Track_Task+0x4e0>)
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e012      	b.n	80038d2 <Line_Track_Task+0x45a>
		else ccr =(uint16_t)(-SERVO_M_CORNER * PHI + SERVO_FRONT_CCR_MIDDLE);
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <Line_Track_Task+0x4fc>)
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003988 <Line_Track_Task+0x510>
 80038b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ba:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003984 <Line_Track_Task+0x50c>
 80038be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c6:	ee17 3a90 	vmov	r3, s15
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b22      	ldr	r3, [pc, #136]	; (8003958 <Line_Track_Task+0x4e0>)
 80038d0:	601a      	str	r2, [r3, #0]
		if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <Line_Track_Task+0x4e0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80038da:	dd04      	ble.n	80038e6 <Line_Track_Task+0x46e>
		{
			ccr = CCR_FRONT_MAX;
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <Line_Track_Task+0x4e0>)
 80038de:	f44f 7261 	mov.w	r2, #900	; 0x384
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e008      	b.n	80038f8 <Line_Track_Task+0x480>
		}
		else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <Line_Track_Task+0x4e0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80038ee:	da03      	bge.n	80038f8 <Line_Track_Task+0x480>
		{
			ccr = CCR_FRONT_MIN;
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <Line_Track_Task+0x4e0>)
 80038f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038f6:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = ccr;
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <Line_Track_Task+0x4e0>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
		ccr_front_prev= ccr;
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <Line_Track_Task+0x4e0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <Line_Track_Task+0x4ec>)
 800390a:	601a      	str	r2, [r3, #0]
		if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <Line_Track_Task+0x4e8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f240 22b2 	movw	r2, #690	; 0x2b2
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <Line_Track_Task+0x4a8>
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <Line_Track_Task+0x4e4>)
 800391a:	f240 22b2 	movw	r2, #690	; 0x2b2
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
		ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <Line_Track_Task+0x4e8>)
 8003922:	f240 22b2 	movw	r2, #690	; 0x2b2
 8003926:	601a      	str	r2, [r3, #0]
	}

	tick_prev=tick;
 8003928:	4a18      	ldr	r2, [pc, #96]	; (800398c <Line_Track_Task+0x514>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00c      	b.n	800394a <Line_Track_Task+0x4d2>
	if(line_track_task_tick>tick) return;
 8003930:	bf00      	nop
 8003932:	e00a      	b.n	800394a <Line_Track_Task+0x4d2>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 8003934:	bf00      	nop
 8003936:	e008      	b.n	800394a <Line_Track_Task+0x4d2>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003938:	bf00      	nop
 800393a:	e006      	b.n	800394a <Line_Track_Task+0x4d2>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 800393c:	bf00      	nop
 800393e:	e004      	b.n	800394a <Line_Track_Task+0x4d2>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <Line_Track_Task+0x4d2>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <Line_Track_Task+0x4d2>
		if (LINE_CNT<1 || LINE_CNT > 3) return;//ha nincs vonal a kocsi alatt
 8003948:	bf00      	nop
}
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	c4830201 	.word	0xc4830201
 8003954:	3fe73a26 	.word	0x3fe73a26
 8003958:	20000034 	.word	0x20000034
 800395c:	40010000 	.word	0x40010000
 8003960:	200005b4 	.word	0x200005b4
 8003964:	200005b0 	.word	0x200005b0
 8003968:	2000027a 	.word	0x2000027a
 800396c:	20000598 	.word	0x20000598
 8003970:	200005a8 	.word	0x200005a8
 8003974:	200005ac 	.word	0x200005ac
 8003978:	20000580 	.word	0x20000580
 800397c:	44fa0000 	.word	0x44fa0000
 8003980:	c4610000 	.word	0xc4610000
 8003984:	442d0000 	.word	0x442d0000
 8003988:	c4c1c000 	.word	0xc4c1c000
 800398c:	200005a4 	.word	0x200005a4

08003990 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	static float delta;
	static float gamma;

	static float kD=K_D;

	uint32_t sum=0;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 80039a2:	4b50      	ldr	r3, [pc, #320]	; (8003ae4 <Fast_Mode+0x154>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	f040 8084 	bne.w	8003ab4 <Fast_Mode+0x124>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2) && (LINE_CNT==1 || LINE_CNT==3)) //ha változik az alattunk lévő vonalak száma
 80039ac:	4b4e      	ldr	r3, [pc, #312]	; (8003ae8 <Fast_Mode+0x158>)
 80039ae:	785a      	ldrb	r2, [r3, #1]
 80039b0:	4b4e      	ldr	r3, [pc, #312]	; (8003aec <Fast_Mode+0x15c>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d056      	beq.n	8003a66 <Fast_Mode+0xd6>
 80039b8:	4b4d      	ldr	r3, [pc, #308]	; (8003af0 <Fast_Mode+0x160>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <Fast_Mode+0x38>
 80039c0:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <Fast_Mode+0x160>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d14e      	bne.n	8003a66 <Fast_Mode+0xd6>
 80039c8:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <Fast_Mode+0x158>)
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d003      	beq.n	80039d8 <Fast_Mode+0x48>
 80039d0:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <Fast_Mode+0x158>)
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d146      	bne.n	8003a66 <Fast_Mode+0xd6>
		{
			dt[index] = t - t_prev;
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <Fast_Mode+0x164>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <Fast_Mode+0x168>)
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	4611      	mov	r1, r2
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	4a45      	ldr	r2, [pc, #276]	; (8003afc <Fast_Mode+0x16c>)
 80039e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4]+dt[5] + dt[6] + dt[7];
 80039ec:	4b43      	ldr	r3, [pc, #268]	; (8003afc <Fast_Mode+0x16c>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b42      	ldr	r3, [pc, #264]	; (8003afc <Fast_Mode+0x16c>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	441a      	add	r2, r3
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <Fast_Mode+0x16c>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	441a      	add	r2, r3
 80039fc:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <Fast_Mode+0x16c>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	441a      	add	r2, r3
 8003a02:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <Fast_Mode+0x16c>)
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	441a      	add	r2, r3
 8003a08:	4b3c      	ldr	r3, [pc, #240]	; (8003afc <Fast_Mode+0x16c>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	441a      	add	r2, r3
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <Fast_Mode+0x16c>)
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	441a      	add	r2, r3
 8003a14:	4b39      	ldr	r3, [pc, #228]	; (8003afc <Fast_Mode+0x16c>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
			if((sum > 400) && (sum < 1100))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003a22:	d910      	bls.n	8003a46 <Fast_Mode+0xb6>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f240 424b 	movw	r2, #1099	; 0x44b
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d80b      	bhi.n	8003a46 <Fast_Mode+0xb6>
			{
				v_ref=5500;
 8003a2e:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <Fast_Mode+0x170>)
 8003a30:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <Fast_Mode+0x174>)
 8003a32:	601a      	str	r2, [r3, #0]
				LED_B(1);
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a3a:	4833      	ldr	r0, [pc, #204]	; (8003b08 <Fast_Mode+0x178>)
 8003a3c:	f003 fff2 	bl	8007a24 <HAL_GPIO_WritePin>
				Free_Run_State=1;
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <Fast_Mode+0x160>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
			}
			index++;
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <Fast_Mode+0x168>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <Fast_Mode+0x168>)
 8003a50:	701a      	strb	r2, [r3, #0]
			if(index>7) index=0;
 8003a52:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <Fast_Mode+0x168>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d902      	bls.n	8003a60 <Fast_Mode+0xd0>
 8003a5a:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <Fast_Mode+0x168>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <Fast_Mode+0x164>)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <Fast_Mode+0x158>)
 8003a68:	785a      	ldrb	r2, [r3, #1]
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <Fast_Mode+0x15c>)
 8003a6c:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <Fast_Mode+0x158>)
 8003a70:	785b      	ldrb	r3, [r3, #1]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d91a      	bls.n	8003aac <Fast_Mode+0x11c>
 8003a76:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <Fast_Mode+0x160>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <Fast_Mode+0xf6>
 8003a7e:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <Fast_Mode+0x160>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d112      	bne.n	8003aac <Fast_Mode+0x11c>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <Fast_Mode+0x17c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3350      	adds	r3, #80	; 0x50
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d952      	bls.n	8003b38 <Fast_Mode+0x1a8>
			{
				v_ref = 1600;
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <Fast_Mode+0x170>)
 8003a94:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <Fast_Mode+0x180>)
 8003a96:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <Fast_Mode+0x160>)
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aa4:	4818      	ldr	r0, [pc, #96]	; (8003b08 <Fast_Mode+0x178>)
 8003aa6:	f003 ffbd 	bl	8007a24 <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 8003aaa:	e045      	b.n	8003b38 <Fast_Mode+0x1a8>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <Fast_Mode+0x17c>)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e041      	b.n	8003b38 <Fast_Mode+0x1a8>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <Fast_Mode+0x154>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d13d      	bne.n	8003b38 <Fast_Mode+0x1a8>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <Fast_Mode+0x158>)
 8003abe:	795b      	ldrb	r3, [r3, #5]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <Fast_Mode+0x158>)
 8003ac4:	7992      	ldrb	r2, [r2, #6]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60bb      	str	r3, [r7, #8]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad0:	d803      	bhi.n	8003ada <Fast_Mode+0x14a>
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <Fast_Mode+0x158>)
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <Fast_Mode+0x18c>
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <Fast_Mode+0x170>)
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <Fast_Mode+0x184>)
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e02a      	b.n	8003b38 <Fast_Mode+0x1a8>
 8003ae2:	bf00      	nop
 8003ae4:	20000270 	.word	0x20000270
 8003ae8:	20000598 	.word	0x20000598
 8003aec:	20000038 	.word	0x20000038
 8003af0:	200005b8 	.word	0x200005b8
 8003af4:	200005bc 	.word	0x200005bc
 8003af8:	200005c0 	.word	0x200005c0
 8003afc:	2000003c 	.word	0x2000003c
 8003b00:	2000027c 	.word	0x2000027c
 8003b04:	45abe000 	.word	0x45abe000
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	200005c4 	.word	0x200005c4
 8003b10:	44c80000 	.word	0x44c80000
 8003b14:	44bb8000 	.word	0x44bb8000
 8003b18:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b2a:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003b18 <Fast_Mode+0x188>
 8003b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b32:	4bc1      	ldr	r3, [pc, #772]	; (8003e38 <Fast_Mode+0x4a8>)
 8003b34:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/255.0-102;//248
 8003b38:	4bc0      	ldr	r3, [pc, #768]	; (8003e3c <Fast_Mode+0x4ac>)
 8003b3a:	789b      	ldrb	r3, [r3, #2]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b44:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8003e40 <Fast_Mode+0x4b0>
 8003b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b4c:	ee17 0a90 	vmov	r0, s15
 8003b50:	f7fc fd1a 	bl	8000588 <__aeabi_f2d>
 8003b54:	a3b0      	add	r3, pc, #704	; (adr r3, 8003e18 <Fast_Mode+0x488>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fe97 	bl	800088c <__aeabi_ddiv>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	4bb6      	ldr	r3, [pc, #728]	; (8003e44 <Fast_Mode+0x4b4>)
 8003b6c:	f7fc fbac 	bl	80002c8 <__aeabi_dsub>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	f7fd f836 	bl	8000be8 <__aeabi_d2f>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4ab2      	ldr	r2, [pc, #712]	; (8003e48 <Fast_Mode+0x4b8>)
 8003b80:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/255.0-102; //244
 8003b82:	4bae      	ldr	r3, [pc, #696]	; (8003e3c <Fast_Mode+0x4ac>)
 8003b84:	78db      	ldrb	r3, [r3, #3]
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003e40 <Fast_Mode+0x4b0>
 8003b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b96:	ee17 0a90 	vmov	r0, s15
 8003b9a:	f7fc fcf5 	bl	8000588 <__aeabi_f2d>
 8003b9e:	a39e      	add	r3, pc, #632	; (adr r3, 8003e18 <Fast_Mode+0x488>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f7fc fe72 	bl	800088c <__aeabi_ddiv>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	4ba3      	ldr	r3, [pc, #652]	; (8003e44 <Fast_Mode+0x4b4>)
 8003bb6:	f7fc fb87 	bl	80002c8 <__aeabi_dsub>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fd f811 	bl	8000be8 <__aeabi_d2f>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4aa0      	ldr	r2, [pc, #640]	; (8003e4c <Fast_Mode+0x4bc>)
 8003bca:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 8003bcc:	4b9e      	ldr	r3, [pc, #632]	; (8003e48 <Fast_Mode+0x4b8>)
 8003bce:	ed93 7a00 	vldr	s14, [r3]
 8003bd2:	4b9e      	ldr	r3, [pc, #632]	; (8003e4c <Fast_Mode+0x4bc>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bdc:	ee17 0a90 	vmov	r0, s15
 8003be0:	f7fc fcd2 	bl	8000588 <__aeabi_f2d>
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	4b99      	ldr	r3, [pc, #612]	; (8003e50 <Fast_Mode+0x4c0>)
 8003bea:	f7fc fe4f 	bl	800088c <__aeabi_ddiv>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	ec43 2b17 	vmov	d7, r2, r3
 8003bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8003bfa:	eef0 0a67 	vmov.f32	s1, s15
 8003bfe:	f00a fc47 	bl	800e490 <atan>
 8003c02:	ec53 2b10 	vmov	r2, r3, d0
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f7fc ffed 	bl	8000be8 <__aeabi_d2f>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4a90      	ldr	r2, [pc, #576]	; (8003e54 <Fast_Mode+0x4c4>)
 8003c12:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100 || v<-100)
 8003c14:	4b90      	ldr	r3, [pc, #576]	; (8003e58 <Fast_Mode+0x4c8>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003e5c <Fast_Mode+0x4cc>
 8003c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	dc0a      	bgt.n	8003c3e <Fast_Mode+0x2ae>
 8003c28:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <Fast_Mode+0x4c8>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003e60 <Fast_Mode+0x4d0>
 8003c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	f140 80b9 	bpl.w	8003db0 <Fast_Mode+0x420>
	{
		if(v<2400)
 8003c3e:	4b86      	ldr	r3, [pc, #536]	; (8003e58 <Fast_Mode+0x4c8>)
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003e64 <Fast_Mode+0x4d4>
 8003c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d557      	bpl.n	8003d02 <Fast_Mode+0x372>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8003c52:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <Fast_Mode+0x4c8>)
 8003c54:	ed93 7a00 	vldr	s14, [r3]
 8003c58:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <Fast_Mode+0x4c8>)
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	ee17 0a90 	vmov	r0, s15
 8003c66:	f7fc fc8f 	bl	8000588 <__aeabi_f2d>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	a16c      	add	r1, pc, #432	; (adr r1, 8003e20 <Fast_Mode+0x490>)
 8003c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c74:	f7fc fe0a 	bl	800088c <__aeabi_ddiv>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	a369      	add	r3, pc, #420	; (adr r3, 8003e28 <Fast_Mode+0x498>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fcd7 	bl	8000638 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fc ffa9 	bl	8000be8 <__aeabi_d2f>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4a73      	ldr	r2, [pc, #460]	; (8003e68 <Fast_Mode+0x4d8>)
 8003c9a:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8003c9c:	4b6e      	ldr	r3, [pc, #440]	; (8003e58 <Fast_Mode+0x4c8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fc71 	bl	8000588 <__aeabi_f2d>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	a161      	add	r1, pc, #388	; (adr r1, 8003e30 <Fast_Mode+0x4a0>)
 8003cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cb0:	f7fc fdec 	bl	800088c <__aeabi_ddiv>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4614      	mov	r4, r2
 8003cba:	461d      	mov	r5, r3
 8003cbc:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <Fast_Mode+0x4c8>)
 8003cbe:	ed93 7a00 	vldr	s14, [r3]
 8003cc2:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <Fast_Mode+0x4d8>)
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ccc:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8003cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd4:	ee17 0a90 	vmov	r0, s15
 8003cd8:	f7fc fc56 	bl	8000588 <__aeabi_f2d>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7fc fca8 	bl	8000638 <__aeabi_dmul>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f7fc ff7a 	bl	8000be8 <__aeabi_d2f>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4a5d      	ldr	r2, [pc, #372]	; (8003e6c <Fast_Mode+0x4dc>)
 8003cf8:	6013      	str	r3, [r2, #0]
			kD=-0.06;
 8003cfa:	4b5d      	ldr	r3, [pc, #372]	; (8003e70 <Fast_Mode+0x4e0>)
 8003cfc:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <Fast_Mode+0x4e4>)
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e056      	b.n	8003db0 <Fast_Mode+0x420>
			//kD=0;
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8003d02:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <Fast_Mode+0x4c8>)
 8003d04:	ed93 7a00 	vldr	s14, [r3]
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <Fast_Mode+0x4c8>)
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	ee17 0a90 	vmov	r0, s15
 8003d16:	f7fc fc37 	bl	8000588 <__aeabi_f2d>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	a140      	add	r1, pc, #256	; (adr r1, 8003e20 <Fast_Mode+0x490>)
 8003d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d24:	f7fc fdb2 	bl	800088c <__aeabi_ddiv>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	a33d      	add	r3, pc, #244	; (adr r3, 8003e28 <Fast_Mode+0x498>)
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f7fc fc7f 	bl	8000638 <__aeabi_dmul>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	f7fc ff51 	bl	8000be8 <__aeabi_d2f>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a47      	ldr	r2, [pc, #284]	; (8003e68 <Fast_Mode+0x4d8>)
 8003d4a:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <Fast_Mode+0x4c8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc fc19 	bl	8000588 <__aeabi_f2d>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	a135      	add	r1, pc, #212	; (adr r1, 8003e30 <Fast_Mode+0x4a0>)
 8003d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d60:	f7fc fd94 	bl	800088c <__aeabi_ddiv>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	461d      	mov	r5, r3
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <Fast_Mode+0x4c8>)
 8003d6e:	ed93 7a00 	vldr	s14, [r3]
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <Fast_Mode+0x4d8>)
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8003d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d84:	ee17 0a90 	vmov	r0, s15
 8003d88:	f7fc fbfe 	bl	8000588 <__aeabi_f2d>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc fc50 	bl	8000638 <__aeabi_dmul>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f7fc ff22 	bl	8000be8 <__aeabi_d2f>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <Fast_Mode+0x4dc>)
 8003da8:	6013      	str	r3, [r2, #0]
			kD=-0.05;
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <Fast_Mode+0x4e0>)
 8003dac:	4a32      	ldr	r2, [pc, #200]	; (8003e78 <Fast_Mode+0x4e8>)
 8003dae:	601a      	str	r2, [r3, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - kD * (x_elso-x_elso_prev);
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <Fast_Mode+0x4d8>)
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	eeb1 7a67 	vneg.f32	s14, s15
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <Fast_Mode+0x4b8>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc4:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <Fast_Mode+0x4dc>)
 8003dc6:	edd3 6a00 	vldr	s13, [r3]
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <Fast_Mode+0x4c4>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <Fast_Mode+0x4b8>)
 8003dda:	edd3 6a00 	vldr	s13, [r3]
 8003dde:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <Fast_Mode+0x4ec>)
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <Fast_Mode+0x4e0>)
 8003dea:	edd3 7a00 	vldr	s15, [r3]
 8003dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df6:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <Fast_Mode+0x4f0>)
 8003df8:	edc3 7a00 	vstr	s15, [r3]
	x_elso_prev = x_elso;
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <Fast_Mode+0x4b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <Fast_Mode+0x4ec>)
 8003e02:	6013      	str	r3, [r2, #0]

	return gamma;
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <Fast_Mode+0x4f0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	ee07 3a90 	vmov	s15, r3
}
 8003e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bdb0      	pop	{r4, r5, r7, pc}
 8003e16:	bf00      	nop
 8003e18:	00000000 	.word	0x00000000
 8003e1c:	406fe000 	.word	0x406fe000
 8003e20:	00000000 	.word	0x00000000
 8003e24:	c0716000 	.word	0xc0716000
 8003e28:	fd21ff2e 	.word	0xfd21ff2e
 8003e2c:	402275f6 	.word	0x402275f6
 8003e30:	00000000 	.word	0x00000000
 8003e34:	40716000 	.word	0x40716000
 8003e38:	2000027c 	.word	0x2000027c
 8003e3c:	20000598 	.word	0x20000598
 8003e40:	434c0000 	.word	0x434c0000
 8003e44:	40598000 	.word	0x40598000
 8003e48:	200005c8 	.word	0x200005c8
 8003e4c:	200005cc 	.word	0x200005cc
 8003e50:	407c4000 	.word	0x407c4000
 8003e54:	200005d0 	.word	0x200005d0
 8003e58:	20000580 	.word	0x20000580
 8003e5c:	42c80000 	.word	0x42c80000
 8003e60:	c2c80000 	.word	0xc2c80000
 8003e64:	45160000 	.word	0x45160000
 8003e68:	2000005c 	.word	0x2000005c
 8003e6c:	20000060 	.word	0x20000060
 8003e70:	20000064 	.word	0x20000064
 8003e74:	bd75c28f 	.word	0xbd75c28f
 8003e78:	bd4ccccd 	.word	0xbd4ccccd
 8003e7c:	200005d4 	.word	0x200005d4
 8003e80:	200005d8 	.word	0x200005d8
 8003e84:	00000000 	.word	0x00000000

08003e88 <Skill_Mode>:

float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e94:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	int byte=0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
	static int byte_prev=0;
	uint8_t delta_byte;
	float p=0;
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 8003ea4:	4b8c      	ldr	r3, [pc, #560]	; (80040d8 <Skill_Mode+0x250>)
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d803      	bhi.n	8003eb4 <Skill_Mode+0x2c>
 8003eac:	4b8b      	ldr	r3, [pc, #556]	; (80040dc <Skill_Mode+0x254>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d022      	beq.n	8003efa <Skill_Mode+0x72>
	{
		byte=0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	e00a      	b.n	8003ed4 <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	4a85      	ldr	r2, [pc, #532]	; (80040d8 <Skill_Mode+0x250>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	4b80      	ldr	r3, [pc, #512]	; (80040d8 <Skill_Mode+0x250>)
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	dbee      	blt.n	8003ebe <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 8003ee0:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <Skill_Mode+0x250>)
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 810c 	beq.w	8004102 <Skill_Mode+0x27a>
 8003eea:	4b7b      	ldr	r3, [pc, #492]	; (80040d8 <Skill_Mode+0x250>)
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e103      	b.n	8004102 <Skill_Mode+0x27a>
	}
	else if(path==LEFT)
 8003efa:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <Skill_Mode+0x258>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d15a      	bne.n	8003fb8 <Skill_Mode+0x130>
	{
		byte = LINE1; //az első vonalt kell követni
 8003f02:	4b75      	ldr	r3, [pc, #468]	; (80040d8 <Skill_Mode+0x250>)
 8003f04:	789b      	ldrb	r3, [r3, #2]
 8003f06:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8003f08:	4b76      	ldr	r3, [pc, #472]	; (80040e4 <Skill_Mode+0x25c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bfb8      	it	lt
 8003f14:	425b      	neglt	r3, r3
 8003f16:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b4b      	cmp	r3, #75	; 0x4b
 8003f1c:	d903      	bls.n	8003f26 <Skill_Mode+0x9e>
 8003f1e:	4b72      	ldr	r3, [pc, #456]	; (80040e8 <Skill_Mode+0x260>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <Skill_Mode+0xa6>
 8003f26:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <Skill_Mode+0x260>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d132      	bne.n	8003f94 <Skill_Mode+0x10c>
		{
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <Skill_Mode+0x250>)
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d925      	bls.n	8003f82 <Skill_Mode+0xfa>
			{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 8003f36:	4b6c      	ldr	r3, [pc, #432]	; (80040e8 <Skill_Mode+0x260>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d102      	bne.n	8003f44 <Skill_Mode+0xbc>
 8003f3e:	4a6b      	ldr	r2, [pc, #428]	; (80040ec <Skill_Mode+0x264>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8003f44:	4b69      	ldr	r3, [pc, #420]	; (80040ec <Skill_Mode+0x264>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f50:	d908      	bls.n	8003f64 <Skill_Mode+0xdc>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 8003f52:	4b65      	ldr	r3, [pc, #404]	; (80040e8 <Skill_Mode+0x260>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4864      	ldr	r0, [pc, #400]	; (80040f0 <Skill_Mode+0x268>)
 8003f5e:	f003 fd61 	bl	8007a24 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8003f62:	e0ce      	b.n	8004102 <Skill_Mode+0x27a>
				}
				else //ha még nem telt le az timout idő
				{
					byte = rxBuf[1+LINE_CNT]; //ilyenkor az utolsó vonalat nézzük az első helyett
 8003f64:	4b5c      	ldr	r3, [pc, #368]	; (80040d8 <Skill_Mode+0x250>)
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	4a5b      	ldr	r2, [pc, #364]	; (80040d8 <Skill_Mode+0x250>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
 8003f6e:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 8003f70:	4b5d      	ldr	r3, [pc, #372]	; (80040e8 <Skill_Mode+0x260>)
 8003f72:	2202      	movs	r2, #2
 8003f74:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 8003f76:	2200      	movs	r2, #0
 8003f78:	2102      	movs	r1, #2
 8003f7a:	485d      	ldr	r0, [pc, #372]	; (80040f0 <Skill_Mode+0x268>)
 8003f7c:	f003 fd52 	bl	8007a24 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8003f80:	e0bf      	b.n	8004102 <Skill_Mode+0x27a>
				}

			}
			else
			{
				estuary=ESTUARY_MODE_OFF; //ha nincs elég vonal kikapcsoljuk az öntartást (legalább2 vonal esetén beszélhetünk torkolatról)
 8003f82:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <Skill_Mode+0x260>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 8003f88:	2201      	movs	r2, #1
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4858      	ldr	r0, [pc, #352]	; (80040f0 <Skill_Mode+0x268>)
 8003f8e:	f003 fd49 	bl	8007a24 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8003f92:	e0b6      	b.n	8004102 <Skill_Mode+0x27a>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	2b2c      	cmp	r3, #44	; 0x2c
 8003f98:	f200 80b3 	bhi.w	8004102 <Skill_Mode+0x27a>
 8003f9c:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <Skill_Mode+0x260>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	f040 80ae 	bne.w	8004102 <Skill_Mode+0x27a>
		{
			estuary=ESTUARY_MODE_OFF;
 8003fa6:	4b50      	ldr	r3, [pc, #320]	; (80040e8 <Skill_Mode+0x260>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 8003fac:	2201      	movs	r2, #1
 8003fae:	2102      	movs	r1, #2
 8003fb0:	484f      	ldr	r0, [pc, #316]	; (80040f0 <Skill_Mode+0x268>)
 8003fb2:	f003 fd37 	bl	8007a24 <HAL_GPIO_WritePin>
 8003fb6:	e0a4      	b.n	8004102 <Skill_Mode+0x27a>
		}

	}
	else if(path==RIGHT)
 8003fb8:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <Skill_Mode+0x258>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d158      	bne.n	8004072 <Skill_Mode+0x1ea>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 8003fc0:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <Skill_Mode+0x250>)
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a44      	ldr	r2, [pc, #272]	; (80040d8 <Skill_Mode+0x250>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8003fcc:	4b45      	ldr	r3, [pc, #276]	; (80040e4 <Skill_Mode+0x25c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bfb8      	it	lt
 8003fd8:	425b      	neglt	r3, r3
 8003fda:	74fb      	strb	r3, [r7, #19]
		/**/
		if((delta_byte>ESTUARY_TH && estuary!=ESTUARY_MODE_INIT)|| estuary==ESTUARY_MODE_ON) //torkolatkompenzálás
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b4b      	cmp	r3, #75	; 0x4b
 8003fe0:	d903      	bls.n	8003fea <Skill_Mode+0x162>
 8003fe2:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <Skill_Mode+0x260>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <Skill_Mode+0x16a>
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <Skill_Mode+0x260>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d12f      	bne.n	8004052 <Skill_Mode+0x1ca>
		{
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8003ff2:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <Skill_Mode+0x250>)
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d922      	bls.n	8004040 <Skill_Mode+0x1b8>
			{
				if(estuary==ESTUARY_MODE_OFF)t_prev=t;//ha most kapcsoltuk be a torkolatkompenzálást, akkor mostantól mérjük az eltelt időt
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <Skill_Mode+0x260>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d102      	bne.n	8004008 <Skill_Mode+0x180>
 8004002:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <Skill_Mode+0x264>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6013      	str	r3, [r2, #0]
				if((t-t_prev)>ESTURAY_TIMEOUT)//400ms után mindenképpen kilépünk a kompenzálásból
 8004008:	4b38      	ldr	r3, [pc, #224]	; (80040ec <Skill_Mode+0x264>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004014:	d908      	bls.n	8004028 <Skill_Mode+0x1a0>
				{
					estuary=ESTUARY_MODE_OFF; //ha letelt a timeout kilépünk a kompenzálásból
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <Skill_Mode+0x260>)
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
					LED_G(0);
 800401c:	2201      	movs	r2, #1
 800401e:	2102      	movs	r1, #2
 8004020:	4833      	ldr	r0, [pc, #204]	; (80040f0 <Skill_Mode+0x268>)
 8004022:	f003 fcff 	bl	8007a24 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8004026:	e06c      	b.n	8004102 <Skill_Mode+0x27a>
				}
				else //ha még nem telt le az idő
				{
					byte = rxBuf[2]; //ilyenkor az első vonalat nézzük az utolsó helyett
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <Skill_Mode+0x250>)
 800402a:	789b      	ldrb	r3, [r3, #2]
 800402c:	61fb      	str	r3, [r7, #28]
					estuary=ESTUARY_MODE_ON; //öntartás
 800402e:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <Skill_Mode+0x260>)
 8004030:	2202      	movs	r2, #2
 8004032:	701a      	strb	r2, [r3, #0]
					LED_G(1);
 8004034:	2200      	movs	r2, #0
 8004036:	2102      	movs	r1, #2
 8004038:	482d      	ldr	r0, [pc, #180]	; (80040f0 <Skill_Mode+0x268>)
 800403a:	f003 fcf3 	bl	8007a24 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 800403e:	e060      	b.n	8004102 <Skill_Mode+0x27a>
				}

			}
			else
			{
				estuary=ESTUARY_MODE_OFF; //ha nincs elég vonal kikapcsoljuk az öntartást
 8004040:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <Skill_Mode+0x260>)
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
				LED_G(0);
 8004046:	2201      	movs	r2, #1
 8004048:	2102      	movs	r1, #2
 800404a:	4829      	ldr	r0, [pc, #164]	; (80040f0 <Skill_Mode+0x268>)
 800404c:	f003 fcea 	bl	8007a24 <HAL_GPIO_WritePin>
			if(LINE_CNT>1)//torkolatkompenzálás csak akkor van ha legalább 2 vonalat látunk
 8004050:	e057      	b.n	8004102 <Skill_Mode+0x27a>
			}
		}
		else if(delta_byte<ESTUARY_EXIT && estuary==ESTUARY_MODE_ON) //ha már eléggé összeszűkült a torkolat, akkor nem kell kompenzálni
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b2c      	cmp	r3, #44	; 0x2c
 8004056:	d854      	bhi.n	8004102 <Skill_Mode+0x27a>
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <Skill_Mode+0x260>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d150      	bne.n	8004102 <Skill_Mode+0x27a>
		{
			estuary=ESTUARY_MODE_OFF;
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <Skill_Mode+0x260>)
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
			LED_G(0);
 8004066:	2201      	movs	r2, #1
 8004068:	2102      	movs	r1, #2
 800406a:	4821      	ldr	r0, [pc, #132]	; (80040f0 <Skill_Mode+0x268>)
 800406c:	f003 fcda 	bl	8007a24 <HAL_GPIO_WritePin>
 8004070:	e047      	b.n	8004102 <Skill_Mode+0x27a>
		}

	}

	else if(path==MIDDLE)
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <Skill_Mode+0x258>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d143      	bne.n	8004102 <Skill_Mode+0x27a>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <Skill_Mode+0x250>)
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d103      	bne.n	800408a <Skill_Mode+0x202>
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <Skill_Mode+0x250>)
 8004084:	789b      	ldrb	r3, [r3, #2]
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e03b      	b.n	8004102 <Skill_Mode+0x27a>
		else if(LINE_CNT==3)//ha 3 vonal van
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <Skill_Mode+0x250>)
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d113      	bne.n	80040ba <Skill_Mode+0x232>
		{
			byte = rxBuf[3];//a középsőt követjük
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <Skill_Mode+0x250>)
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <Skill_Mode+0x250>)
 800409a:	789b      	ldrb	r3, [r3, #2]
 800409c:	3b7b      	subs	r3, #123	; 0x7b
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bfb8      	it	lt
 80040a2:	425b      	neglt	r3, r3
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <Skill_Mode+0x26c>)
 80040a6:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <Skill_Mode+0x250>)
 80040aa:	791b      	ldrb	r3, [r3, #4]
 80040ac:	3b7b      	subs	r3, #123	; 0x7b
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bfb8      	it	lt
 80040b2:	425b      	neglt	r3, r3
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <Skill_Mode+0x270>)
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e023      	b.n	8004102 <Skill_Mode+0x27a>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <Skill_Mode+0x250>)
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d11f      	bne.n	8004102 <Skill_Mode+0x27a>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <Skill_Mode+0x26c>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <Skill_Mode+0x270>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	da16      	bge.n	80040fc <Skill_Mode+0x274>
 80040ce:	4b02      	ldr	r3, [pc, #8]	; (80040d8 <Skill_Mode+0x250>)
 80040d0:	789b      	ldrb	r3, [r3, #2]
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e015      	b.n	8004102 <Skill_Mode+0x27a>
 80040d6:	bf00      	nop
 80040d8:	20000598 	.word	0x20000598
 80040dc:	200005a2 	.word	0x200005a2
 80040e0:	20000286 	.word	0x20000286
 80040e4:	200005dc 	.word	0x200005dc
 80040e8:	200005e0 	.word	0x200005e0
 80040ec:	200005e4 	.word	0x200005e4
 80040f0:	40020400 	.word	0x40020400
 80040f4:	200005e8 	.word	0x200005e8
 80040f8:	200005ec 	.word	0x200005ec
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <Skill_Mode+0x328>)
 80040fe:	78db      	ldrb	r3, [r3, #3]
 8004100:	61fb      	str	r3, [r7, #28]
		}
	}
	if(estuary==ESTUARY_MODE_INIT)estuary=ESTUARY_MODE_OFF;
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <Skill_Mode+0x32c>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <Skill_Mode+0x288>
 800410a:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <Skill_Mode+0x32c>)
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
	//p = (float)byte * 204/248.0-102;
	p = (float)byte * 204/255.0-102;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800411a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80041b8 <Skill_Mode+0x330>
 800411e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004122:	ee17 0a90 	vmov	r0, s15
 8004126:	f7fc fa2f 	bl	8000588 <__aeabi_f2d>
 800412a:	a31f      	add	r3, pc, #124	; (adr r3, 80041a8 <Skill_Mode+0x320>)
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f7fc fbac 	bl	800088c <__aeabi_ddiv>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <Skill_Mode+0x334>)
 8004142:	f7fc f8c1 	bl	80002c8 <__aeabi_dsub>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	f7fc fd4b 	bl	8000be8 <__aeabi_d2f>
 8004152:	4603      	mov	r3, r0
 8004154:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 8004156:	edd7 7a02 	vldr	s15, [r7, #8]
 800415a:	eeb1 7a67 	vneg.f32	s14, s15
 800415e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <Skill_Mode+0x338>)
 8004168:	edd3 7a00 	vldr	s15, [r3]
 800416c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004170:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004174:	edd7 7a01 	vldr	s15, [r7, #4]
 8004178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800417c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <Skill_Mode+0x33c>)
 8004182:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <Skill_Mode+0x338>)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 800418c:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <Skill_Mode+0x340>)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	6013      	str	r3, [r2, #0]

	return gamma;
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <Skill_Mode+0x33c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	ee07 3a90 	vmov	s15, r3
}
 800419a:	eeb0 0a67 	vmov.f32	s0, s15
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	f3af 8000 	nop.w
 80041a8:	00000000 	.word	0x00000000
 80041ac:	406fe000 	.word	0x406fe000
 80041b0:	20000598 	.word	0x20000598
 80041b4:	200005e0 	.word	0x200005e0
 80041b8:	434c0000 	.word	0x434c0000
 80041bc:	40598000 	.word	0x40598000
 80041c0:	200005f0 	.word	0x200005f0
 80041c4:	200005f4 	.word	0x200005f4
 80041c8:	200005dc 	.word	0x200005dc

080041cc <Detect_Node2>:

void Detect_Node2(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]


	sprintf(str,"%2d\r\n",rxBuf[1]);
	HAL_UART_Transmit(huart_debugg, str, 4, 10);
*/
	if (LINE_CNT<1 || LINE_CNT > 4)
 80041d6:	4b5b      	ldr	r3, [pc, #364]	; (8004344 <Detect_Node2+0x178>)
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <Detect_Node2+0x1a>
 80041de:	4b59      	ldr	r3, [pc, #356]	; (8004344 <Detect_Node2+0x178>)
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d908      	bls.n	80041f8 <Detect_Node2+0x2c>
	{
		t_prev=t;
 80041e6:	4a58      	ldr	r2, [pc, #352]	; (8004348 <Detect_Node2+0x17c>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6013      	str	r3, [r2, #0]
		detect_node_state=STEADY;
 80041ec:	4b57      	ldr	r3, [pc, #348]	; (800434c <Detect_Node2+0x180>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
		val=4;
 80041f2:	4b57      	ldr	r3, [pc, #348]	; (8004350 <Detect_Node2+0x184>)
 80041f4:	2204      	movs	r2, #4
 80041f6:	701a      	strb	r2, [r3, #0]
	}
	switch(detect_node_state)
 80041f8:	4b54      	ldr	r3, [pc, #336]	; (800434c <Detect_Node2+0x180>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <Detect_Node2+0x3a>
 8004200:	2b01      	cmp	r3, #1
 8004202:	d02e      	beq.n	8004262 <Detect_Node2+0x96>
			val=0;
		}
		break;
	}

}
 8004204:	e098      	b.n	8004338 <Detect_Node2+0x16c>
		if(rxBuf[1]==4)
 8004206:	4b4f      	ldr	r3, [pc, #316]	; (8004344 <Detect_Node2+0x178>)
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d122      	bne.n	8004254 <Detect_Node2+0x88>
			dt = t-t_prev;//mennyi ideje van alattunk 4 vonal
 800420e:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <Detect_Node2+0x17c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	4a4f      	ldr	r2, [pc, #316]	; (8004354 <Detect_Node2+0x188>)
 8004218:	6013      	str	r3, [r2, #0]
			if(dt > TH_MIN(70))
 800421a:	4b4f      	ldr	r3, [pc, #316]	; (8004358 <Detect_Node2+0x18c>)
 800421c:	edd3 7a00 	vldr	s15, [r3]
 8004220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004224:	ee17 3a90 	vmov	r3, s15
 8004228:	2b00      	cmp	r3, #0
 800422a:	bfb8      	it	lt
 800422c:	425b      	neglt	r3, r3
 800422e:	f64b 7268 	movw	r2, #49000	; 0xbf68
 8004232:	fb92 f3f3 	sdiv	r3, r2, r3
 8004236:	461a      	mov	r2, r3
 8004238:	4b46      	ldr	r3, [pc, #280]	; (8004354 <Detect_Node2+0x188>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d205      	bcs.n	800424c <Detect_Node2+0x80>
				ignore=1;
 8004240:	4b46      	ldr	r3, [pc, #280]	; (800435c <Detect_Node2+0x190>)
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
				detect_node_state=QUAD_LINE_DETECTED;
 8004246:	4b41      	ldr	r3, [pc, #260]	; (800434c <Detect_Node2+0x180>)
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
			val=0;
 800424c:	4b40      	ldr	r3, [pc, #256]	; (8004350 <Detect_Node2+0x184>)
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
		break;
 8004252:	e071      	b.n	8004338 <Detect_Node2+0x16c>
			t_prev=t;
 8004254:	4a3c      	ldr	r2, [pc, #240]	; (8004348 <Detect_Node2+0x17c>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6013      	str	r3, [r2, #0]
			ignore=0;
 800425a:	4b40      	ldr	r3, [pc, #256]	; (800435c <Detect_Node2+0x190>)
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
		break;
 8004260:	e06a      	b.n	8004338 <Detect_Node2+0x16c>
		if(rxBuf[1]==2 && !val) val=1; //horizontal node lehetséges
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <Detect_Node2+0x178>)
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d107      	bne.n	800427a <Detect_Node2+0xae>
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <Detect_Node2+0x184>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <Detect_Node2+0xae>
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <Detect_Node2+0x184>)
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e00a      	b.n	8004290 <Detect_Node2+0xc4>
		else if(rxBuf[1]==4 && val==1) val=2; //horizontal node tuti
 800427a:	4b32      	ldr	r3, [pc, #200]	; (8004344 <Detect_Node2+0x178>)
 800427c:	785b      	ldrb	r3, [r3, #1]
 800427e:	2b04      	cmp	r3, #4
 8004280:	d106      	bne.n	8004290 <Detect_Node2+0xc4>
 8004282:	4b33      	ldr	r3, [pc, #204]	; (8004350 <Detect_Node2+0x184>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d102      	bne.n	8004290 <Detect_Node2+0xc4>
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <Detect_Node2+0x184>)
 800428c:	2202      	movs	r2, #2
 800428e:	701a      	strb	r2, [r3, #0]
		dt=t-t_prev;
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <Detect_Node2+0x17c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	4a2e      	ldr	r2, [pc, #184]	; (8004354 <Detect_Node2+0x188>)
 800429a:	6013      	str	r3, [r2, #0]
		if(dt> TH(170) && rxBuf[1]==4 && !val)val=3;
 800429c:	4b2e      	ldr	r3, [pc, #184]	; (8004358 <Detect_Node2+0x18c>)
 800429e:	edd3 7a00 	vldr	s15, [r3]
 80042a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042a6:	ee17 3a90 	vmov	r3, s15
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfb8      	it	lt
 80042ae:	425b      	neglt	r3, r3
 80042b0:	4a2b      	ldr	r2, [pc, #172]	; (8004360 <Detect_Node2+0x194>)
 80042b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b26      	ldr	r3, [pc, #152]	; (8004354 <Detect_Node2+0x188>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d20a      	bcs.n	80042d6 <Detect_Node2+0x10a>
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <Detect_Node2+0x178>)
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d106      	bne.n	80042d6 <Detect_Node2+0x10a>
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <Detect_Node2+0x184>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <Detect_Node2+0x10a>
 80042d0:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <Detect_Node2+0x184>)
 80042d2:	2203      	movs	r2, #3
 80042d4:	701a      	strb	r2, [r3, #0]
		if(dt> (TH(200)+100))
 80042d6:	4b20      	ldr	r3, [pc, #128]	; (8004358 <Detect_Node2+0x18c>)
 80042d8:	edd3 7a00 	vldr	s15, [r3]
 80042dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042e0:	ee17 3a90 	vmov	r3, s15
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bfb8      	it	lt
 80042e8:	425b      	neglt	r3, r3
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <Detect_Node2+0x198>)
 80042ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80042f0:	3364      	adds	r3, #100	; 0x64
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <Detect_Node2+0x188>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d21c      	bcs.n	8004336 <Detect_Node2+0x16a>
			if(val==3 && rxBuf[1]<4)nodeDetected=1;//vert node
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <Detect_Node2+0x184>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d107      	bne.n	8004314 <Detect_Node2+0x148>
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <Detect_Node2+0x178>)
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d803      	bhi.n	8004314 <Detect_Node2+0x148>
 800430c:	4b16      	ldr	r3, [pc, #88]	; (8004368 <Detect_Node2+0x19c>)
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e00a      	b.n	800432a <Detect_Node2+0x15e>
			else if(val==2 && rxBuf[1]<4)
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <Detect_Node2+0x184>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d106      	bne.n	800432a <Detect_Node2+0x15e>
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <Detect_Node2+0x178>)
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d802      	bhi.n	800432a <Detect_Node2+0x15e>
				nodeDetected=1; //horizont node
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <Detect_Node2+0x19c>)
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
			detect_node_state=STEADY;
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <Detect_Node2+0x180>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
			val=0;
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <Detect_Node2+0x184>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
		break;
 8004336:	bf00      	nop
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000598 	.word	0x20000598
 8004348:	200005f8 	.word	0x200005f8
 800434c:	200005fc 	.word	0x200005fc
 8004350:	200005fd 	.word	0x200005fd
 8004354:	20000600 	.word	0x20000600
 8004358:	20000580 	.word	0x20000580
 800435c:	200005a2 	.word	0x200005a2
 8004360:	00029810 	.word	0x00029810
 8004364:	00030d40 	.word	0x00030d40
 8004368:	20000285 	.word	0x20000285

0800436c <__NVIC_DisableIRQ>:
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	2b00      	cmp	r3, #0
 800437c:	db12      	blt.n	80043a4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	f003 021f 	and.w	r2, r3, #31
 8004384:	490a      	ldr	r1, [pc, #40]	; (80043b0 <__NVIC_DisableIRQ+0x44>)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2001      	movs	r0, #1
 800438e:	fa00 f202 	lsl.w	r2, r0, r2
 8004392:	3320      	adds	r3, #32
 8004394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004398:	f3bf 8f4f 	dsb	sy
}
 800439c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800439e:	f3bf 8f6f 	isb	sy
}
 80043a2:	bf00      	nop
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000e100 	.word	0xe000e100

080043b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043ba:	f001 fc27 	bl	8005c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043be:	f000 f883 	bl	80044c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043c2:	f000 fd59 	bl	8004e78 <MX_GPIO_Init>
  MX_DMA_Init();
 80043c6:	f000 fd37 	bl	8004e38 <MX_DMA_Init>
  MX_TIM2_Init();
 80043ca:	f000 fa73 	bl	80048b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80043ce:	f000 fcb5 	bl	8004d3c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80043d2:	f000 fb67 	bl	8004aa4 <MX_TIM4_Init>
  MX_ADC2_Init();
 80043d6:	f000 f97b 	bl	80046d0 <MX_ADC2_Init>
  MX_TIM3_Init();
 80043da:	f000 fae1 	bl	80049a0 <MX_TIM3_Init>
  MX_UART5_Init();
 80043de:	f000 fc83 	bl	8004ce8 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80043e2:	f000 fcd5 	bl	8004d90 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80043e6:	f000 fc27 	bl	8004c38 <MX_TIM8_Init>
  MX_ADC1_Init();
 80043ea:	f000 f8df 	bl	80045ac <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80043ee:	f000 fcf9 	bl	8004de4 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80043f2:	f000 fbd3 	bl	8004b9c <MX_TIM5_Init>
  MX_TIM1_Init();
 80043f6:	f000 f9bd 	bl	8004774 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8);
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <main+0xe8>)
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <main+0xec>)
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	4b28      	ldr	r3, [pc, #160]	; (80044a4 <main+0xf0>)
 8004404:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <main+0xf4>)
 8004406:	4929      	ldr	r1, [pc, #164]	; (80044ac <main+0xf8>)
 8004408:	4829      	ldr	r0, [pc, #164]	; (80044b0 <main+0xfc>)
 800440a:	f7fc fdf3 	bl	8000ff4 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 800440e:	2108      	movs	r1, #8
 8004410:	4828      	ldr	r0, [pc, #160]	; (80044b4 <main+0x100>)
 8004412:	f000 fe4f 	bl	80050b4 <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 8004416:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <main+0xfc>)
 8004418:	4927      	ldr	r1, [pc, #156]	; (80044b8 <main+0x104>)
 800441a:	4828      	ldr	r0, [pc, #160]	; (80044bc <main+0x108>)
 800441c:	f7fe fcc8 	bl	8002db0 <Battery_Voltage_Compensate>

  Mode_Selector(&huart1, &huart5);
 8004420:	4927      	ldr	r1, [pc, #156]	; (80044c0 <main+0x10c>)
 8004422:	4823      	ldr	r0, [pc, #140]	; (80044b0 <main+0xfc>)
 8004424:	f7fe fa88 	bl	8002938 <Mode_Selector>
  Create_Nodes(&huart1);
 8004428:	4821      	ldr	r0, [pc, #132]	; (80044b0 <main+0xfc>)
 800442a:	f7fd f819 	bl	8001460 <Create_Nodes>
  Wait_For_Start_Sigal(&huart3,&huart1);
 800442e:	4920      	ldr	r1, [pc, #128]	; (80044b0 <main+0xfc>)
 8004430:	4824      	ldr	r0, [pc, #144]	; (80044c4 <main+0x110>)
 8004432:	f7fe fb31 	bl	8002a98 <Wait_For_Start_Sigal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Measure_Velocity_Task(&htim8,TICK, 4);
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <main+0xf8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2204      	movs	r2, #4
 800443e:	4619      	mov	r1, r3
 8004440:	4816      	ldr	r0, [pc, #88]	; (800449c <main+0xe8>)
 8004442:	f7fe fde1 	bl	8003008 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <main+0xf8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444c:	230a      	movs	r3, #10
 800444e:	4918      	ldr	r1, [pc, #96]	; (80044b0 <main+0xfc>)
 8004450:	4815      	ldr	r0, [pc, #84]	; (80044a8 <main+0xf4>)
 8004452:	f7fe fe55 	bl	8003100 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 4);
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <main+0xf8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800445c:	2304      	movs	r3, #4
 800445e:	4914      	ldr	r1, [pc, #80]	; (80044b0 <main+0xfc>)
 8004460:	4817      	ldr	r0, [pc, #92]	; (80044c0 <main+0x10c>)
 8004462:	f7ff f809 	bl	8003478 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <main+0xf8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	221d      	movs	r2, #29
 800446e:	9200      	str	r2, [sp, #0]
 8004470:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <main+0xfc>)
 8004472:	2108      	movs	r1, #8
 8004474:	480f      	ldr	r0, [pc, #60]	; (80044b4 <main+0x100>)
 8004476:	f000 fe39 	bl	80050ec <Remote_Control_Task>
	  HDI_Read_Task(&huart1,&htim2,TICK, 200);
 800447a:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <main+0xf8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004480:	23c8      	movs	r3, #200	; 0xc8
 8004482:	4908      	ldr	r1, [pc, #32]	; (80044a4 <main+0xf0>)
 8004484:	480a      	ldr	r0, [pc, #40]	; (80044b0 <main+0xfc>)
 8004486:	f7fc fe7f 	bl	8001188 <HDI_Read_Task>
	  Control_Task(&huart1,TICK, 43);
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <main+0xf8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	222b      	movs	r2, #43	; 0x2b
 8004492:	4619      	mov	r1, r3
 8004494:	4806      	ldr	r0, [pc, #24]	; (80044b0 <main+0xfc>)
 8004496:	f7fd febf 	bl	8002218 <Control_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 800449a:	e7cc      	b.n	8004436 <main+0x82>
 800449c:	200007fc 	.word	0x200007fc
 80044a0:	20000694 	.word	0x20000694
 80044a4:	200006dc 	.word	0x200006dc
 80044a8:	20000724 	.word	0x20000724
 80044ac:	200007b4 	.word	0x200007b4
 80044b0:	200008e8 	.word	0x200008e8
 80044b4:	2000076c 	.word	0x2000076c
 80044b8:	20000604 	.word	0x20000604
 80044bc:	2000064c 	.word	0x2000064c
 80044c0:	200008a4 	.word	0x200008a4
 80044c4:	20000970 	.word	0x20000970

080044c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b094      	sub	sp, #80	; 0x50
 80044cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ce:	f107 031c 	add.w	r3, r7, #28
 80044d2:	2234      	movs	r2, #52	; 0x34
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f007 f8ee 	bl	800b6b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044dc:	f107 0308 	add.w	r3, r7, #8
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	4b2c      	ldr	r3, [pc, #176]	; (80045a4 <SystemClock_Config+0xdc>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	4a2b      	ldr	r2, [pc, #172]	; (80045a4 <SystemClock_Config+0xdc>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6413      	str	r3, [r2, #64]	; 0x40
 80044fc:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <SystemClock_Config+0xdc>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004508:	2300      	movs	r3, #0
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <SystemClock_Config+0xe0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <SystemClock_Config+0xe0>)
 8004512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <SystemClock_Config+0xe0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004524:	2301      	movs	r3, #1
 8004526:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800452c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800452e:	2302      	movs	r3, #2
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004538:	2304      	movs	r3, #4
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800453c:	23b4      	movs	r3, #180	; 0xb4
 800453e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004540:	2302      	movs	r3, #2
 8004542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004544:	2302      	movs	r3, #2
 8004546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004548:	2302      	movs	r3, #2
 800454a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800454c:	f107 031c 	add.w	r3, r7, #28
 8004550:	4618      	mov	r0, r3
 8004552:	f003 fe4d 	bl	80081f0 <HAL_RCC_OscConfig>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800455c:	f000 fda4 	bl	80050a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004560:	f003 faac 	bl	8007abc <HAL_PWREx_EnableOverDrive>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800456a:	f000 fd9d 	bl	80050a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800456e:	230f      	movs	r3, #15
 8004570:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004572:	2302      	movs	r3, #2
 8004574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800457a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800457e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004584:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	2105      	movs	r1, #5
 800458c:	4618      	mov	r0, r3
 800458e:	f003 fae5 	bl	8007b5c <HAL_RCC_ClockConfig>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004598:	f000 fd86 	bl	80050a8 <Error_Handler>
  }
}
 800459c:	bf00      	nop
 800459e:	3750      	adds	r7, #80	; 0x50
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000

080045ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08c      	sub	sp, #48	; 0x30
 80045b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80045b2:	f107 0320 	add.w	r3, r7, #32
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80045c0:	463b      	mov	r3, r7
 80045c2:	2220      	movs	r2, #32
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f007 f876 	bl	800b6b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80045cc:	4b3c      	ldr	r3, [pc, #240]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045ce:	4a3d      	ldr	r2, [pc, #244]	; (80046c4 <MX_ADC1_Init+0x118>)
 80045d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80045d2:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80045e6:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045ec:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045f4:	4b32      	ldr	r3, [pc, #200]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045fa:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <MX_ADC1_Init+0x114>)
 80045fc:	4a32      	ldr	r2, [pc, #200]	; (80046c8 <MX_ADC1_Init+0x11c>)
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004600:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <MX_ADC1_Init+0x114>)
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <MX_ADC1_Init+0x114>)
 8004608:	2203      	movs	r2, #3
 800460a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800460c:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <MX_ADC1_Init+0x114>)
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <MX_ADC1_Init+0x114>)
 8004616:	2201      	movs	r2, #1
 8004618:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800461a:	4829      	ldr	r0, [pc, #164]	; (80046c0 <MX_ADC1_Init+0x114>)
 800461c:	f001 fb8c 	bl	8005d38 <HAL_ADC_Init>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8004626:	f000 fd3f 	bl	80050a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800462a:	2308      	movs	r3, #8
 800462c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800462e:	2301      	movs	r3, #1
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004632:	2307      	movs	r3, #7
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004636:	f107 0320 	add.w	r3, r7, #32
 800463a:	4619      	mov	r1, r3
 800463c:	4820      	ldr	r0, [pc, #128]	; (80046c0 <MX_ADC1_Init+0x114>)
 800463e:	f001 fd29 	bl	8006094 <HAL_ADC_ConfigChannel>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004648:	f000 fd2e 	bl	80050a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800464c:	2302      	movs	r3, #2
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004650:	f107 0320 	add.w	r3, r7, #32
 8004654:	4619      	mov	r1, r3
 8004656:	481a      	ldr	r0, [pc, #104]	; (80046c0 <MX_ADC1_Init+0x114>)
 8004658:	f001 fd1c 	bl	8006094 <HAL_ADC_ConfigChannel>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8004662:	f000 fd21 	bl	80050a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8004666:	2303      	movs	r3, #3
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800466a:	f107 0320 	add.w	r3, r7, #32
 800466e:	4619      	mov	r1, r3
 8004670:	4813      	ldr	r0, [pc, #76]	; (80046c0 <MX_ADC1_Init+0x114>)
 8004672:	f001 fd0f 	bl	8006094 <HAL_ADC_ConfigChannel>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800467c:	f000 fd14 	bl	80050a8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004680:	2308      	movs	r3, #8
 8004682:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004684:	2301      	movs	r3, #1
 8004686:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8004688:	2301      	movs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <MX_ADC1_Init+0x120>)
 8004696:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004698:	2300      	movs	r3, #0
 800469a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800469c:	2300      	movs	r3, #0
 800469e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80046a4:	463b      	mov	r3, r7
 80046a6:	4619      	mov	r1, r3
 80046a8:	4805      	ldr	r0, [pc, #20]	; (80046c0 <MX_ADC1_Init+0x114>)
 80046aa:	f001 ff21 	bl	80064f0 <HAL_ADCEx_InjectedConfigChannel>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80046b4:	f000 fcf8 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80046b8:	bf00      	nop
 80046ba:	3730      	adds	r7, #48	; 0x30
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000604 	.word	0x20000604
 80046c4:	40012000 	.word	0x40012000
 80046c8:	0f000001 	.word	0x0f000001
 80046cc:	000f0001 	.word	0x000f0001

080046d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046d6:	463b      	mov	r3, r7
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <MX_ADC2_Init+0x98>)
 80046e4:	4a21      	ldr	r2, [pc, #132]	; (800476c <MX_ADC2_Init+0x9c>)
 80046e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80046e8:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <MX_ADC2_Init+0x98>)
 80046ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <MX_ADC2_Init+0x98>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <MX_ADC2_Init+0x98>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <MX_ADC2_Init+0x98>)
 80046fe:	2200      	movs	r2, #0
 8004700:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004702:	4b19      	ldr	r3, [pc, #100]	; (8004768 <MX_ADC2_Init+0x98>)
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <MX_ADC2_Init+0x98>)
 800470c:	2200      	movs	r2, #0
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <MX_ADC2_Init+0x98>)
 8004712:	4a17      	ldr	r2, [pc, #92]	; (8004770 <MX_ADC2_Init+0xa0>)
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <MX_ADC2_Init+0x98>)
 8004718:	2200      	movs	r2, #0
 800471a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <MX_ADC2_Init+0x98>)
 800471e:	2201      	movs	r2, #1
 8004720:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <MX_ADC2_Init+0x98>)
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <MX_ADC2_Init+0x98>)
 800472c:	2201      	movs	r2, #1
 800472e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004730:	480d      	ldr	r0, [pc, #52]	; (8004768 <MX_ADC2_Init+0x98>)
 8004732:	f001 fb01 	bl	8005d38 <HAL_ADC_Init>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800473c:	f000 fcb4 	bl	80050a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004740:	230d      	movs	r3, #13
 8004742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004744:	2301      	movs	r3, #1
 8004746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004748:	2307      	movs	r3, #7
 800474a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800474c:	463b      	mov	r3, r7
 800474e:	4619      	mov	r1, r3
 8004750:	4805      	ldr	r0, [pc, #20]	; (8004768 <MX_ADC2_Init+0x98>)
 8004752:	f001 fc9f 	bl	8006094 <HAL_ADC_ConfigChannel>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800475c:	f000 fca4 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	2000064c 	.word	0x2000064c
 800476c:	40012100 	.word	0x40012100
 8004770:	0f000001 	.word	0x0f000001

08004774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b096      	sub	sp, #88	; 0x58
 8004778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800477a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	609a      	str	r2, [r3, #8]
 800479e:	60da      	str	r2, [r3, #12]
 80047a0:	611a      	str	r2, [r3, #16]
 80047a2:	615a      	str	r2, [r3, #20]
 80047a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	2220      	movs	r2, #32
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f006 ff83 	bl	800b6b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047b2:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <MX_TIM1_Init+0x138>)
 80047b4:	4a3e      	ldr	r2, [pc, #248]	; (80048b0 <MX_TIM1_Init+0x13c>)
 80047b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 80047b8:	4b3c      	ldr	r3, [pc, #240]	; (80048ac <MX_TIM1_Init+0x138>)
 80047ba:	f240 1267 	movw	r2, #359	; 0x167
 80047be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c0:	4b3a      	ldr	r3, [pc, #232]	; (80048ac <MX_TIM1_Init+0x138>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <MX_TIM1_Init+0x138>)
 80047c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80047cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <MX_TIM1_Init+0x138>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <MX_TIM1_Init+0x138>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047da:	4b34      	ldr	r3, [pc, #208]	; (80048ac <MX_TIM1_Init+0x138>)
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047e0:	4832      	ldr	r0, [pc, #200]	; (80048ac <MX_TIM1_Init+0x138>)
 80047e2:	f003 ffa3 	bl	800872c <HAL_TIM_Base_Init>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80047ec:	f000 fc5c 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047fa:	4619      	mov	r1, r3
 80047fc:	482b      	ldr	r0, [pc, #172]	; (80048ac <MX_TIM1_Init+0x138>)
 80047fe:	f004 ff0d 	bl	800961c <HAL_TIM_ConfigClockSource>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004808:	f000 fc4e 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800480c:	4827      	ldr	r0, [pc, #156]	; (80048ac <MX_TIM1_Init+0x138>)
 800480e:	f004 f845 	bl	800889c <HAL_TIM_PWM_Init>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004818:	f000 fc46 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800481c:	2300      	movs	r3, #0
 800481e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004820:	2300      	movs	r3, #0
 8004822:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004828:	4619      	mov	r1, r3
 800482a:	4820      	ldr	r0, [pc, #128]	; (80048ac <MX_TIM1_Init+0x138>)
 800482c:	f005 fd1e 	bl	800a26c <HAL_TIMEx_MasterConfigSynchronization>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004836:	f000 fc37 	bl	80050a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800483a:	2360      	movs	r3, #96	; 0x60
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 800483e:	f240 23ed 	movw	r3, #749	; 0x2ed
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004844:	2300      	movs	r3, #0
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800484c:	2300      	movs	r3, #0
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004850:	2300      	movs	r3, #0
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004858:	220c      	movs	r2, #12
 800485a:	4619      	mov	r1, r3
 800485c:	4813      	ldr	r0, [pc, #76]	; (80048ac <MX_TIM1_Init+0x138>)
 800485e:	f004 fe1b 	bl	8009498 <HAL_TIM_PWM_ConfigChannel>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004868:	f000 fc1e 	bl	80050a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800486c:	2300      	movs	r3, #0
 800486e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4807      	ldr	r0, [pc, #28]	; (80048ac <MX_TIM1_Init+0x138>)
 8004890:	f005 fd68 	bl	800a364 <HAL_TIMEx_ConfigBreakDeadTime>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800489a:	f000 fc05 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800489e:	4803      	ldr	r0, [pc, #12]	; (80048ac <MX_TIM1_Init+0x138>)
 80048a0:	f000 fea0 	bl	80055e4 <HAL_TIM_MspPostInit>

}
 80048a4:	bf00      	nop
 80048a6:	3758      	adds	r7, #88	; 0x58
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000694 	.word	0x20000694
 80048b0:	40010000 	.word	0x40010000

080048b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048c8:	f107 0320 	add.w	r3, r7, #32
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
 80048e0:	615a      	str	r2, [r3, #20]
 80048e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <MX_TIM2_Init+0xe8>)
 80048e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <MX_TIM2_Init+0xe8>)
 80048ee:	2259      	movs	r2, #89	; 0x59
 80048f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	4b2a      	ldr	r3, [pc, #168]	; (800499c <MX_TIM2_Init+0xe8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80048f8:	4b28      	ldr	r3, [pc, #160]	; (800499c <MX_TIM2_Init+0xe8>)
 80048fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80048fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <MX_TIM2_Init+0xe8>)
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004906:	4b25      	ldr	r3, [pc, #148]	; (800499c <MX_TIM2_Init+0xe8>)
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800490c:	4823      	ldr	r0, [pc, #140]	; (800499c <MX_TIM2_Init+0xe8>)
 800490e:	f003 ff0d 	bl	800872c <HAL_TIM_Base_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004918:	f000 fbc6 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800491c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004926:	4619      	mov	r1, r3
 8004928:	481c      	ldr	r0, [pc, #112]	; (800499c <MX_TIM2_Init+0xe8>)
 800492a:	f004 fe77 	bl	800961c <HAL_TIM_ConfigClockSource>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004934:	f000 fbb8 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004938:	4818      	ldr	r0, [pc, #96]	; (800499c <MX_TIM2_Init+0xe8>)
 800493a:	f003 ffaf 	bl	800889c <HAL_TIM_PWM_Init>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004944:	f000 fbb0 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004948:	2300      	movs	r3, #0
 800494a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004950:	f107 0320 	add.w	r3, r7, #32
 8004954:	4619      	mov	r1, r3
 8004956:	4811      	ldr	r0, [pc, #68]	; (800499c <MX_TIM2_Init+0xe8>)
 8004958:	f005 fc88 	bl	800a26c <HAL_TIMEx_MasterConfigSynchronization>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004962:	f000 fba1 	bl	80050a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004966:	2360      	movs	r3, #96	; 0x60
 8004968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 800496a:	f240 23ed 	movw	r3, #749	; 0x2ed
 800496e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	2200      	movs	r2, #0
 800497c:	4619      	mov	r1, r3
 800497e:	4807      	ldr	r0, [pc, #28]	; (800499c <MX_TIM2_Init+0xe8>)
 8004980:	f004 fd8a 	bl	8009498 <HAL_TIM_PWM_ConfigChannel>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800498a:	f000 fb8d 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800498e:	4803      	ldr	r0, [pc, #12]	; (800499c <MX_TIM2_Init+0xe8>)
 8004990:	f000 fe28 	bl	80055e4 <HAL_TIM_MspPostInit>

}
 8004994:	bf00      	nop
 8004996:	3738      	adds	r7, #56	; 0x38
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	200006dc 	.word	0x200006dc

080049a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	; 0x38
 80049a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b4:	f107 0320 	add.w	r3, r7, #32
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
 80049cc:	615a      	str	r2, [r3, #20]
 80049ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80049d0:	4b32      	ldr	r3, [pc, #200]	; (8004a9c <MX_TIM3_Init+0xfc>)
 80049d2:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <MX_TIM3_Init+0x100>)
 80049d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <MX_TIM3_Init+0xfc>)
 80049d8:	2201      	movs	r2, #1
 80049da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80049dc:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <MX_TIM3_Init+0xfc>)
 80049de:	2260      	movs	r2, #96	; 0x60
 80049e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80049e2:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <MX_TIM3_Init+0xfc>)
 80049e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ea:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <MX_TIM3_Init+0xfc>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <MX_TIM3_Init+0xfc>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049f6:	4829      	ldr	r0, [pc, #164]	; (8004a9c <MX_TIM3_Init+0xfc>)
 80049f8:	f003 fe98 	bl	800872c <HAL_TIM_Base_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004a02:	f000 fb51 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a10:	4619      	mov	r1, r3
 8004a12:	4822      	ldr	r0, [pc, #136]	; (8004a9c <MX_TIM3_Init+0xfc>)
 8004a14:	f004 fe02 	bl	800961c <HAL_TIM_ConfigClockSource>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004a1e:	f000 fb43 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a22:	481e      	ldr	r0, [pc, #120]	; (8004a9c <MX_TIM3_Init+0xfc>)
 8004a24:	f003 ff3a 	bl	800889c <HAL_TIM_PWM_Init>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004a2e:	f000 fb3b 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a3a:	f107 0320 	add.w	r3, r7, #32
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4816      	ldr	r0, [pc, #88]	; (8004a9c <MX_TIM3_Init+0xfc>)
 8004a42:	f005 fc13 	bl	800a26c <HAL_TIMEx_MasterConfigSynchronization>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004a4c:	f000 fb2c 	bl	80050a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a50:	2360      	movs	r3, #96	; 0x60
 8004a52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	2200      	movs	r2, #0
 8004a64:	4619      	mov	r1, r3
 8004a66:	480d      	ldr	r0, [pc, #52]	; (8004a9c <MX_TIM3_Init+0xfc>)
 8004a68:	f004 fd16 	bl	8009498 <HAL_TIM_PWM_ConfigChannel>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004a72:	f000 fb19 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	2204      	movs	r2, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4807      	ldr	r0, [pc, #28]	; (8004a9c <MX_TIM3_Init+0xfc>)
 8004a7e:	f004 fd0b 	bl	8009498 <HAL_TIM_PWM_ConfigChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004a88:	f000 fb0e 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a8c:	4803      	ldr	r0, [pc, #12]	; (8004a9c <MX_TIM3_Init+0xfc>)
 8004a8e:	f000 fda9 	bl	80055e4 <HAL_TIM_MspPostInit>

}
 8004a92:	bf00      	nop
 8004a94:	3738      	adds	r7, #56	; 0x38
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000724 	.word	0x20000724
 8004aa0:	40000400 	.word	0x40000400

08004aa4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aaa:	f107 0318 	add.w	r3, r7, #24
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
 8004ab4:	609a      	str	r2, [r3, #8]
 8004ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab8:	f107 0310 	add.w	r3, r7, #16
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ace:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004ad0:	4a31      	ldr	r2, [pc, #196]	; (8004b98 <MX_TIM4_Init+0xf4>)
 8004ad2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8004ad4:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004ad6:	f240 321f 	movw	r2, #799	; 0x31f
 8004ada:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004af2:	2280      	movs	r2, #128	; 0x80
 8004af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004af6:	4827      	ldr	r0, [pc, #156]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004af8:	f003 fe18 	bl	800872c <HAL_TIM_Base_Init>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8004b02:	f000 fad1 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b0a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b0c:	f107 0318 	add.w	r3, r7, #24
 8004b10:	4619      	mov	r1, r3
 8004b12:	4820      	ldr	r0, [pc, #128]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004b14:	f004 fd82 	bl	800961c <HAL_TIM_ConfigClockSource>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004b1e:	f000 fac3 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004b22:	481c      	ldr	r0, [pc, #112]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004b24:	f003 ffdc 	bl	8008ae0 <HAL_TIM_IC_Init>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004b2e:	f000 fabb 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b3a:	f107 0310 	add.w	r3, r7, #16
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4814      	ldr	r0, [pc, #80]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004b42:	f005 fb93 	bl	800a26c <HAL_TIMEx_MasterConfigSynchronization>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004b4c:	f000 faac 	bl	80050a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004b50:	230a      	movs	r3, #10
 8004b52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b54:	2301      	movs	r3, #1
 8004b56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004b60:	463b      	mov	r3, r7
 8004b62:	2208      	movs	r2, #8
 8004b64:	4619      	mov	r1, r3
 8004b66:	480b      	ldr	r0, [pc, #44]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004b68:	f004 fbfa 	bl	8009360 <HAL_TIM_IC_ConfigChannel>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004b72:	f000 fa99 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004b76:	463b      	mov	r3, r7
 8004b78:	220c      	movs	r2, #12
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4805      	ldr	r0, [pc, #20]	; (8004b94 <MX_TIM4_Init+0xf0>)
 8004b7e:	f004 fbef 	bl	8009360 <HAL_TIM_IC_ConfigChannel>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8004b88:	f000 fa8e 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b8c:	bf00      	nop
 8004b8e:	3728      	adds	r7, #40	; 0x28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2000076c 	.word	0x2000076c
 8004b98:	40000800 	.word	0x40000800

08004b9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <MX_TIM5_Init+0x98>)
 8004bbc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004bc0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8004bc4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004bcc:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004bce:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004bdc:	2280      	movs	r2, #128	; 0x80
 8004bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004be0:	4813      	ldr	r0, [pc, #76]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004be2:	f003 fda3 	bl	800872c <HAL_TIM_Base_Init>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004bec:	f000 fa5c 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004bf6:	f107 0308 	add.w	r3, r7, #8
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	480c      	ldr	r0, [pc, #48]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004bfe:	f004 fd0d 	bl	800961c <HAL_TIM_ConfigClockSource>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004c08:	f000 fa4e 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004c14:	463b      	mov	r3, r7
 8004c16:	4619      	mov	r1, r3
 8004c18:	4805      	ldr	r0, [pc, #20]	; (8004c30 <MX_TIM5_Init+0x94>)
 8004c1a:	f005 fb27 	bl	800a26c <HAL_TIMEx_MasterConfigSynchronization>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004c24:	f000 fa40 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	200007b4 	.word	0x200007b4
 8004c34:	40000c00 	.word	0x40000c00

08004c38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	2224      	movs	r2, #36	; 0x24
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f006 fd36 	bl	800b6b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c4c:	1d3b      	adds	r3, r7, #4
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004c54:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <MX_TIM8_Init+0xac>)
 8004c58:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004c5a:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c60:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004c66:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004c74:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c7a:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004c80:	2303      	movs	r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8004c90:	230c      	movs	r3, #12
 8004c92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c94:	2300      	movs	r3, #0
 8004c96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	4619      	mov	r1, r3
 8004caa:	480d      	ldr	r0, [pc, #52]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004cac:	f004 f91c 	bl	8008ee8 <HAL_TIM_Encoder_Init>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004cb6:	f000 f9f7 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4806      	ldr	r0, [pc, #24]	; (8004ce0 <MX_TIM8_Init+0xa8>)
 8004cc8:	f005 fad0 	bl	800a26c <HAL_TIMEx_MasterConfigSynchronization>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004cd2:	f000 f9e9 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004cd6:	bf00      	nop
 8004cd8:	3730      	adds	r7, #48	; 0x30
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200007fc 	.word	0x200007fc
 8004ce4:	40010400 	.word	0x40010400

08004ce8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <MX_UART5_Init+0x50>)
 8004cf0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004cf4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004cf8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004cfa:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004d0e:	220c      	movs	r2, #12
 8004d10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004d1e:	4805      	ldr	r0, [pc, #20]	; (8004d34 <MX_UART5_Init+0x4c>)
 8004d20:	f005 fb86 	bl	800a430 <HAL_UART_Init>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004d2a:	f000 f9bd 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200008a4 	.word	0x200008a4
 8004d38:	40005000 	.word	0x40005000

08004d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d42:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <MX_USART1_UART_Init+0x50>)
 8004d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d62:	220c      	movs	r2, #12
 8004d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d72:	4805      	ldr	r0, [pc, #20]	; (8004d88 <MX_USART1_UART_Init+0x4c>)
 8004d74:	f005 fb5c 	bl	800a430 <HAL_UART_Init>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d7e:	f000 f993 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200008e8 	.word	0x200008e8
 8004d8c:	40011000 	.word	0x40011000

08004d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004d96:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <MX_USART2_UART_Init+0x50>)
 8004d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004da2:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004db6:	220c      	movs	r2, #12
 8004db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dc6:	4805      	ldr	r0, [pc, #20]	; (8004ddc <MX_USART2_UART_Init+0x4c>)
 8004dc8:	f005 fb32 	bl	800a430 <HAL_UART_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004dd2:	f000 f969 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dd6:	bf00      	nop
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	2000092c 	.word	0x2000092c
 8004de0:	40004400 	.word	0x40004400

08004de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004de8:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <MX_USART3_UART_Init+0x50>)
 8004dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004df6:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004e0a:	220c      	movs	r2, #12
 8004e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e1a:	4805      	ldr	r0, [pc, #20]	; (8004e30 <MX_USART3_UART_Init+0x4c>)
 8004e1c:	f005 fb08 	bl	800a430 <HAL_UART_Init>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004e26:	f000 f93f 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000970 	.word	0x20000970
 8004e34:	40004800 	.word	0x40004800

08004e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <MX_DMA_Init+0x3c>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <MX_DMA_Init+0x3c>)
 8004e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <MX_DMA_Init+0x3c>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	202f      	movs	r0, #47	; 0x2f
 8004e60:	f001 fddf 	bl	8006a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004e64:	202f      	movs	r0, #47	; 0x2f
 8004e66:	f001 fdf8 	bl	8006a5a <HAL_NVIC_EnableIRQ>

}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800

08004e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	609a      	str	r2, [r3, #8]
 8004e8a:	60da      	str	r2, [r3, #12]
 8004e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	4b64      	ldr	r3, [pc, #400]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	4a63      	ldr	r2, [pc, #396]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004e98:	f043 0304 	orr.w	r3, r3, #4
 8004e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9e:	4b61      	ldr	r3, [pc, #388]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4b5d      	ldr	r3, [pc, #372]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4a5c      	ldr	r2, [pc, #368]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eba:	4b5a      	ldr	r3, [pc, #360]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	4b56      	ldr	r3, [pc, #344]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a55      	ldr	r2, [pc, #340]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed6:	4b53      	ldr	r3, [pc, #332]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	4b4f      	ldr	r3, [pc, #316]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4a4e      	ldr	r2, [pc, #312]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef2:	4b4c      	ldr	r3, [pc, #304]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4b48      	ldr	r3, [pc, #288]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a47      	ldr	r2, [pc, #284]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004f08:	f043 0308 	orr.w	r3, r3, #8
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b45      	ldr	r3, [pc, #276]	; (8005024 <MX_GPIO_Init+0x1ac>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	4842      	ldr	r0, [pc, #264]	; (8005028 <MX_GPIO_Init+0x1b0>)
 8004f20:	f002 fd80 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8004f24:	2200      	movs	r2, #0
 8004f26:	2122      	movs	r1, #34	; 0x22
 8004f28:	4840      	ldr	r0, [pc, #256]	; (800502c <MX_GPIO_Init+0x1b4>)
 8004f2a:	f002 fd7b 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f24e 0142 	movw	r1, #57410	; 0xe042
 8004f34:	483e      	ldr	r0, [pc, #248]	; (8005030 <MX_GPIO_Init+0x1b8>)
 8004f36:	f002 fd75 	bl	8007a24 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 8004f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4835      	ldr	r0, [pc, #212]	; (8005028 <MX_GPIO_Init+0x1b0>)
 8004f52:	f002 fbbb 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8004f56:	2302      	movs	r3, #2
 8004f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	482e      	ldr	r0, [pc, #184]	; (8005028 <MX_GPIO_Init+0x1b0>)
 8004f6e:	f002 fbad 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8004f72:	2322      	movs	r3, #34	; 0x22
 8004f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f82:	f107 0314 	add.w	r3, r7, #20
 8004f86:	4619      	mov	r1, r3
 8004f88:	4828      	ldr	r0, [pc, #160]	; (800502c <MX_GPIO_Init+0x1b4>)
 8004f8a:	f002 fb9f 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8004f8e:	f24e 0342 	movw	r3, #57410	; 0xe042
 8004f92:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f94:	2301      	movs	r3, #1
 8004f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4822      	ldr	r0, [pc, #136]	; (8005030 <MX_GPIO_Init+0x1b8>)
 8004fa8:	f002 fb90 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 8004fac:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8004fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	481b      	ldr	r0, [pc, #108]	; (8005030 <MX_GPIO_Init+0x1b8>)
 8004fc2:	f002 fb83 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8004fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4814      	ldr	r0, [pc, #80]	; (800502c <MX_GPIO_Init+0x1b4>)
 8004fdc:	f002 fb76 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fe4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	480e      	ldr	r0, [pc, #56]	; (8005030 <MX_GPIO_Init+0x1b8>)
 8004ff6:	f002 fb69 	bl	80076cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	200a      	movs	r0, #10
 8005000:	f001 fd0f 	bl	8006a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005004:	200a      	movs	r0, #10
 8005006:	f001 fd28 	bl	8006a5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	2028      	movs	r0, #40	; 0x28
 8005010:	f001 fd07 	bl	8006a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005014:	2028      	movs	r0, #40	; 0x28
 8005016:	f001 fd20 	bl	8006a5a <HAL_NVIC_EnableIRQ>

}
 800501a:	bf00      	nop
 800501c:	3728      	adds	r7, #40	; 0x28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	40020800 	.word	0x40020800
 800502c:	40020000 	.word	0x40020000
 8005030:	40020400 	.word	0x40020400

08005034 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005044:	d105      	bne.n	8005052 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		bFlag[0]=1;
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_GPIO_EXTI_Callback+0x38>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
		NVIC_DisableIRQ(On_Board_Button_EXTI_IRQn);
 800504c:	2028      	movs	r0, #40	; 0x28
 800504e:	f7ff f98d 	bl	800436c <__NVIC_DisableIRQ>
	}
	if(GPIO_Pin == B1_Pin)
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	2b10      	cmp	r3, #16
 8005056:	d105      	bne.n	8005064 <HAL_GPIO_EXTI_Callback+0x30>
	{
		bFlag[1]=1;
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <HAL_GPIO_EXTI_Callback+0x38>)
 800505a:	2201      	movs	r2, #1
 800505c:	705a      	strb	r2, [r3, #1]
		NVIC_DisableIRQ(B1_EXTI_IRQn);
 800505e:	200a      	movs	r0, #10
 8005060:	f7ff f984 	bl	800436c <__NVIC_DisableIRQ>
	}
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20000274 	.word	0x20000274

08005070 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(&huart1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_UART_RxCpltCallback+0x30>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d103      	bne.n	8005088 <HAL_UART_RxCpltCallback+0x18>
 8005080:	4807      	ldr	r0, [pc, #28]	; (80050a0 <HAL_UART_RxCpltCallback+0x30>)
 8005082:	f7fc f9c7 	bl	8001414 <Uart_Receive_From_PC_ISR>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
}
 8005086:	e007      	b.n	8005098 <HAL_UART_RxCpltCallback+0x28>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a06      	ldr	r2, [pc, #24]	; (80050a4 <HAL_UART_RxCpltCallback+0x34>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d103      	bne.n	8005098 <HAL_UART_RxCpltCallback+0x28>
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_UART_RxCpltCallback+0x30>)
 8005092:	4804      	ldr	r0, [pc, #16]	; (80050a4 <HAL_UART_RxCpltCallback+0x34>)
 8005094:	f7fd fd84 	bl	8002ba0 <Uart_Receive_Thunderboard_ISR>
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	200008e8 	.word	0x200008e8
 80050a4:	20000970 	.word	0x20000970

080050a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050ac:	b672      	cpsid	i
}
 80050ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050b0:	e7fe      	b.n	80050b0 <Error_Handler+0x8>
	...

080050b4 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <Remote_Control_Init+0x34>)
 80050c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050c4:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <Remote_Control_Init+0x34>)
 80050c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80050cc:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <Remote_Control_Init+0x34>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 80050d4:	2303      	movs	r3, #3
 80050d6:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <Remote_Control_Init+0x34>)
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f003 fd5a 	bl	8008b94 <HAL_TIM_IC_Start_DMA>
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200009b8 	.word	0x200009b8

080050ec <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 80050fa:	4b51      	ldr	r3, [pc, #324]	; (8005240 <Remote_Control_Task+0x154>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	f0c0 8099 	bcc.w	8005238 <Remote_Control_Task+0x14c>
	remote_control_tick = tick + period;
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	4413      	add	r3, r2
 800510c:	4a4c      	ldr	r2, [pc, #304]	; (8005240 <Remote_Control_Task+0x154>)
 800510e:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8005110:	201e      	movs	r0, #30
 8005112:	f001 fcb0 	bl	8006a76 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 8005116:	4b4b      	ldr	r3, [pc, #300]	; (8005244 <Remote_Control_Task+0x158>)
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <Remote_Control_Task+0x158>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfb8      	it	lt
 8005124:	425b      	neglt	r3, r3
 8005126:	4a48      	ldr	r2, [pc, #288]	; (8005248 <Remote_Control_Task+0x15c>)
 8005128:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 800512a:	4b46      	ldr	r3, [pc, #280]	; (8005244 <Remote_Control_Task+0x158>)
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	4b45      	ldr	r3, [pc, #276]	; (8005244 <Remote_Control_Task+0x158>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	bfb8      	it	lt
 8005138:	425b      	neglt	r3, r3
 800513a:	4a44      	ldr	r2, [pc, #272]	; (800524c <Remote_Control_Task+0x160>)
 800513c:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <Remote_Control_Task+0x158>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b40      	ldr	r3, [pc, #256]	; (8005244 <Remote_Control_Task+0x158>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	bfb8      	it	lt
 800514c:	425b      	neglt	r3, r3
 800514e:	4a40      	ldr	r2, [pc, #256]	; (8005250 <Remote_Control_Task+0x164>)
 8005150:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8005152:	201e      	movs	r0, #30
 8005154:	f001 fc81 	bl	8006a5a <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8005158:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <Remote_Control_Task+0x15c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	dd06      	ble.n	8005172 <Remote_Control_Task+0x86>
 8005164:	4b38      	ldr	r3, [pc, #224]	; (8005248 <Remote_Control_Task+0x15c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800516c:	33ff      	adds	r3, #255	; 0xff
 800516e:	4a36      	ldr	r2, [pc, #216]	; (8005248 <Remote_Control_Task+0x15c>)
 8005170:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <Remote_Control_Task+0x160>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	dd06      	ble.n	800518c <Remote_Control_Task+0xa0>
 800517e:	4b33      	ldr	r3, [pc, #204]	; (800524c <Remote_Control_Task+0x160>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005186:	33ff      	adds	r3, #255	; 0xff
 8005188:	4a30      	ldr	r2, [pc, #192]	; (800524c <Remote_Control_Task+0x160>)
 800518a:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 800518c:	4b30      	ldr	r3, [pc, #192]	; (8005250 <Remote_Control_Task+0x164>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	dd06      	ble.n	80051a6 <Remote_Control_Task+0xba>
 8005198:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <Remote_Control_Task+0x164>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80051a0:	33ff      	adds	r3, #255	; 0xff
 80051a2:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <Remote_Control_Task+0x164>)
 80051a4:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 80051a6:	4b28      	ldr	r3, [pc, #160]	; (8005248 <Remote_Control_Task+0x15c>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b28      	ldr	r3, [pc, #160]	; (800524c <Remote_Control_Task+0x160>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	da0b      	bge.n	80051ca <Remote_Control_Task+0xde>
 80051b2:	4b25      	ldr	r3, [pc, #148]	; (8005248 <Remote_Control_Task+0x15c>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <Remote_Control_Task+0x164>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	da05      	bge.n	80051ca <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <Remote_Control_Task+0x15c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <Remote_Control_Task+0x168>)
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e016      	b.n	80051f8 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <Remote_Control_Task+0x160>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <Remote_Control_Task+0x15c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	da0b      	bge.n	80051ee <Remote_Control_Task+0x102>
 80051d6:	4b1d      	ldr	r3, [pc, #116]	; (800524c <Remote_Control_Task+0x160>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <Remote_Control_Task+0x164>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	da05      	bge.n	80051ee <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <Remote_Control_Task+0x160>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <Remote_Control_Task+0x168>)
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	e004      	b.n	80051f8 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 80051ee:	4b18      	ldr	r3, [pc, #96]	; (8005250 <Remote_Control_Task+0x164>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b17      	ldr	r3, [pc, #92]	; (8005254 <Remote_Control_Task+0x168>)
 80051f6:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 80051f8:	4b16      	ldr	r3, [pc, #88]	; (8005254 <Remote_Control_Task+0x168>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b46      	cmp	r3, #70	; 0x46
 80051fe:	d903      	bls.n	8005208 <Remote_Control_Task+0x11c>
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <Remote_Control_Task+0x168>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b63      	cmp	r3, #99	; 0x63
 8005206:	d904      	bls.n	8005212 <Remote_Control_Task+0x126>
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <Remote_Control_Task+0x168>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005210:	d103      	bne.n	800521a <Remote_Control_Task+0x12e>
	{
		//LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <Remote_Control_Task+0x16c>)
 8005214:	2200      	movs	r2, #0
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e00f      	b.n	800523a <Remote_Control_Task+0x14e>
	}
	else
	{
		//LED_R(0);
		if(tLow <= 70) motorEnRemote=1;
 800521a:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <Remote_Control_Task+0x168>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b46      	cmp	r3, #70	; 0x46
 8005220:	d803      	bhi.n	800522a <Remote_Control_Task+0x13e>
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <Remote_Control_Task+0x16c>)
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	e002      	b.n	8005230 <Remote_Control_Task+0x144>
		else motorEnRemote=2;
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <Remote_Control_Task+0x16c>)
 800522c:	2202      	movs	r2, #2
 800522e:	701a      	strb	r2, [r3, #0]
		readytorace=1;
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <Remote_Control_Task+0x170>)
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e000      	b.n	800523a <Remote_Control_Task+0x14e>
	if(remote_control_tick>tick) return;
 8005238:	bf00      	nop

	}
}
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	200009c4 	.word	0x200009c4
 8005244:	200009b8 	.word	0x200009b8
 8005248:	20000068 	.word	0x20000068
 800524c:	2000006c 	.word	0x2000006c
 8005250:	20000070 	.word	0x20000070
 8005254:	20000074 	.word	0x20000074
 8005258:	200009b4 	.word	0x200009b4
 800525c:	20000298 	.word	0x20000298

08005260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_MspInit+0x4c>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	4a0f      	ldr	r2, [pc, #60]	; (80052ac <HAL_MspInit+0x4c>)
 8005270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005274:	6453      	str	r3, [r2, #68]	; 0x44
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <HAL_MspInit+0x4c>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_MspInit+0x4c>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <HAL_MspInit+0x4c>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_MspInit+0x4c>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800529e:	2007      	movs	r0, #7
 80052a0:	f001 fbb4 	bl	8006a0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40023800 	.word	0x40023800

080052b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	; 0x30
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b8:	f107 031c 	add.w	r3, r7, #28
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	60da      	str	r2, [r3, #12]
 80052c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2e      	ldr	r2, [pc, #184]	; (8005388 <HAL_ADC_MspInit+0xd8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d128      	bne.n	8005324 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	4b2d      	ldr	r3, [pc, #180]	; (800538c <HAL_ADC_MspInit+0xdc>)
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	4a2c      	ldr	r2, [pc, #176]	; (800538c <HAL_ADC_MspInit+0xdc>)
 80052dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e0:	6453      	str	r3, [r2, #68]	; 0x44
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_ADC_MspInit+0xdc>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	4b26      	ldr	r3, [pc, #152]	; (800538c <HAL_ADC_MspInit+0xdc>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	4a25      	ldr	r2, [pc, #148]	; (800538c <HAL_ADC_MspInit+0xdc>)
 80052f8:	f043 0302 	orr.w	r3, r3, #2
 80052fc:	6313      	str	r3, [r2, #48]	; 0x30
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <HAL_ADC_MspInit+0xdc>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 800530a:	2301      	movs	r3, #1
 800530c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800530e:	2303      	movs	r3, #3
 8005310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005312:	2300      	movs	r3, #0
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8005316:	f107 031c 	add.w	r3, r7, #28
 800531a:	4619      	mov	r1, r3
 800531c:	481c      	ldr	r0, [pc, #112]	; (8005390 <HAL_ADC_MspInit+0xe0>)
 800531e:	f002 f9d5 	bl	80076cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005322:	e02c      	b.n	800537e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <HAL_ADC_MspInit+0xe4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d127      	bne.n	800537e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	4b16      	ldr	r3, [pc, #88]	; (800538c <HAL_ADC_MspInit+0xdc>)
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	4a15      	ldr	r2, [pc, #84]	; (800538c <HAL_ADC_MspInit+0xdc>)
 8005338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533c:	6453      	str	r3, [r2, #68]	; 0x44
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <HAL_ADC_MspInit+0xdc>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	4b0f      	ldr	r3, [pc, #60]	; (800538c <HAL_ADC_MspInit+0xdc>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <HAL_ADC_MspInit+0xdc>)
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	6313      	str	r3, [r2, #48]	; 0x30
 800535a:	4b0c      	ldr	r3, [pc, #48]	; (800538c <HAL_ADC_MspInit+0xdc>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 8005366:	2308      	movs	r3, #8
 8005368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800536a:	2303      	movs	r3, #3
 800536c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536e:	2300      	movs	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8005372:	f107 031c 	add.w	r3, r7, #28
 8005376:	4619      	mov	r1, r3
 8005378:	4807      	ldr	r0, [pc, #28]	; (8005398 <HAL_ADC_MspInit+0xe8>)
 800537a:	f002 f9a7 	bl	80076cc <HAL_GPIO_Init>
}
 800537e:	bf00      	nop
 8005380:	3730      	adds	r7, #48	; 0x30
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40012000 	.word	0x40012000
 800538c:	40023800 	.word	0x40023800
 8005390:	40020400 	.word	0x40020400
 8005394:	40012100 	.word	0x40012100
 8005398:	40020800 	.word	0x40020800

0800539c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08e      	sub	sp, #56	; 0x38
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5e      	ldr	r2, [pc, #376]	; (8005534 <HAL_TIM_Base_MspInit+0x198>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	4b5d      	ldr	r3, [pc, #372]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	4a5c      	ldr	r2, [pc, #368]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6453      	str	r3, [r2, #68]	; 0x44
 80053ce:	4b5a      	ldr	r3, [pc, #360]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80053da:	e0a7      	b.n	800552c <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d116      	bne.n	8005414 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	4b53      	ldr	r3, [pc, #332]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	4a52      	ldr	r2, [pc, #328]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40
 80053f6:	4b50      	ldr	r3, [pc, #320]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005402:	2200      	movs	r2, #0
 8005404:	2100      	movs	r1, #0
 8005406:	201c      	movs	r0, #28
 8005408:	f001 fb0b 	bl	8006a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800540c:	201c      	movs	r0, #28
 800540e:	f001 fb24 	bl	8006a5a <HAL_NVIC_EnableIRQ>
}
 8005412:	e08b      	b.n	800552c <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM3)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a48      	ldr	r2, [pc, #288]	; (800553c <HAL_TIM_Base_MspInit+0x1a0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10e      	bne.n	800543c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a44      	ldr	r2, [pc, #272]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005428:	f043 0302 	orr.w	r3, r3, #2
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
 800542e:	4b42      	ldr	r3, [pc, #264]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	69bb      	ldr	r3, [r7, #24]
}
 800543a:	e077      	b.n	800552c <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM4)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a3f      	ldr	r2, [pc, #252]	; (8005540 <HAL_TIM_Base_MspInit+0x1a4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d15f      	bne.n	8005506 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	4b3b      	ldr	r3, [pc, #236]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	4a3a      	ldr	r2, [pc, #232]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005450:	f043 0304 	orr.w	r3, r3, #4
 8005454:	6413      	str	r3, [r2, #64]	; 0x40
 8005456:	4b38      	ldr	r3, [pc, #224]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	4b34      	ldr	r3, [pc, #208]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	4a33      	ldr	r2, [pc, #204]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 800546c:	f043 0302 	orr.w	r3, r3, #2
 8005470:	6313      	str	r3, [r2, #48]	; 0x30
 8005472:	4b31      	ldr	r3, [pc, #196]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 800547e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005484:	2302      	movs	r3, #2
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	2300      	movs	r3, #0
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548c:	2300      	movs	r3, #0
 800548e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005490:	2302      	movs	r3, #2
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005498:	4619      	mov	r1, r3
 800549a:	482a      	ldr	r0, [pc, #168]	; (8005544 <HAL_TIM_Base_MspInit+0x1a8>)
 800549c:	f002 f916 	bl	80076cc <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80054a0:	4b29      	ldr	r3, [pc, #164]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054a2:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_TIM_Base_MspInit+0x1b0>)
 80054a4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80054a6:	4b28      	ldr	r3, [pc, #160]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80054ac:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80054ba:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054c0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80054c2:	4b21      	ldr	r3, [pc, #132]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054c8:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80054ca:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054d0:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80054da:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054e0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054e2:	4b19      	ldr	r3, [pc, #100]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80054e8:	4817      	ldr	r0, [pc, #92]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054ea:	f001 fadf 	bl	8006aac <HAL_DMA_Init>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 80054f4:	f7ff fdd8 	bl	80050a8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a13      	ldr	r2, [pc, #76]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80054fe:	4a12      	ldr	r2, [pc, #72]	; (8005548 <HAL_TIM_Base_MspInit+0x1ac>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005504:	e012      	b.n	800552c <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM5)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_TIM_Base_MspInit+0x1b4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10d      	bne.n	800552c <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	4a07      	ldr	r2, [pc, #28]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 800551a:	f043 0308 	orr.w	r3, r3, #8
 800551e:	6413      	str	r3, [r2, #64]	; 0x40
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <HAL_TIM_Base_MspInit+0x19c>)
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	bf00      	nop
 800552e:	3738      	adds	r7, #56	; 0x38
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40010000 	.word	0x40010000
 8005538:	40023800 	.word	0x40023800
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40020400 	.word	0x40020400
 8005548:	20000844 	.word	0x20000844
 800554c:	400260b8 	.word	0x400260b8
 8005550:	40000c00 	.word	0x40000c00

08005554 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	; 0x28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d12b      	bne.n	80055ce <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	4b18      	ldr	r3, [pc, #96]	; (80055dc <HAL_TIM_Encoder_MspInit+0x88>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	4a17      	ldr	r2, [pc, #92]	; (80055dc <HAL_TIM_Encoder_MspInit+0x88>)
 8005580:	f043 0302 	orr.w	r3, r3, #2
 8005584:	6453      	str	r3, [r2, #68]	; 0x44
 8005586:	4b15      	ldr	r3, [pc, #84]	; (80055dc <HAL_TIM_Encoder_MspInit+0x88>)
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	4b11      	ldr	r3, [pc, #68]	; (80055dc <HAL_TIM_Encoder_MspInit+0x88>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	4a10      	ldr	r2, [pc, #64]	; (80055dc <HAL_TIM_Encoder_MspInit+0x88>)
 800559c:	f043 0304 	orr.w	r3, r3, #4
 80055a0:	6313      	str	r3, [r2, #48]	; 0x30
 80055a2:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <HAL_TIM_Encoder_MspInit+0x88>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055ae:	23c0      	movs	r3, #192	; 0xc0
 80055b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b2:	2302      	movs	r3, #2
 80055b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ba:	2300      	movs	r3, #0
 80055bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80055be:	2303      	movs	r3, #3
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055c2:	f107 0314 	add.w	r3, r7, #20
 80055c6:	4619      	mov	r1, r3
 80055c8:	4805      	ldr	r0, [pc, #20]	; (80055e0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80055ca:	f002 f87f 	bl	80076cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80055ce:	bf00      	nop
 80055d0:	3728      	adds	r7, #40	; 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40010400 	.word	0x40010400
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40020800 	.word	0x40020800

080055e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a37      	ldr	r2, [pc, #220]	; (80056e0 <HAL_TIM_MspPostInit+0xfc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d11f      	bne.n	8005646 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	4a35      	ldr	r2, [pc, #212]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	6313      	str	r3, [r2, #48]	; 0x30
 8005616:	4b33      	ldr	r3, [pc, #204]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 8005622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005628:	2302      	movs	r3, #2
 800562a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005630:	2300      	movs	r3, #0
 8005632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005634:	2301      	movs	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	4619      	mov	r1, r3
 800563e:	482a      	ldr	r0, [pc, #168]	; (80056e8 <HAL_TIM_MspPostInit+0x104>)
 8005640:	f002 f844 	bl	80076cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005644:	e047      	b.n	80056d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d11f      	bne.n	8005690 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6313      	str	r3, [r2, #48]	; 0x30
 8005660:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 800566c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005672:	2302      	movs	r3, #2
 8005674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800567e:	2301      	movs	r3, #1
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8005682:	f107 0314 	add.w	r3, r7, #20
 8005686:	4619      	mov	r1, r3
 8005688:	4817      	ldr	r0, [pc, #92]	; (80056e8 <HAL_TIM_MspPostInit+0x104>)
 800568a:	f002 f81f 	bl	80076cc <HAL_GPIO_Init>
}
 800568e:	e022      	b.n	80056d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a15      	ldr	r2, [pc, #84]	; (80056ec <HAL_TIM_MspPostInit+0x108>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d11d      	bne.n	80056d6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	4a10      	ldr	r2, [pc, #64]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6313      	str	r3, [r2, #48]	; 0x30
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_TIM_MspPostInit+0x100>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 80056b6:	23c0      	movs	r3, #192	; 0xc0
 80056b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ba:	2302      	movs	r3, #2
 80056bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	2300      	movs	r3, #0
 80056c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056c6:	2302      	movs	r3, #2
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ca:	f107 0314 	add.w	r3, r7, #20
 80056ce:	4619      	mov	r1, r3
 80056d0:	4805      	ldr	r0, [pc, #20]	; (80056e8 <HAL_TIM_MspPostInit+0x104>)
 80056d2:	f001 fffb 	bl	80076cc <HAL_GPIO_Init>
}
 80056d6:	bf00      	nop
 80056d8:	3728      	adds	r7, #40	; 0x28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40023800 	.word	0x40023800
 80056e8:	40020000 	.word	0x40020000
 80056ec:	40000400 	.word	0x40000400

080056f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b090      	sub	sp, #64	; 0x40
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a80      	ldr	r2, [pc, #512]	; (8005910 <HAL_UART_MspInit+0x220>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d153      	bne.n	80057ba <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005712:	2300      	movs	r3, #0
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
 8005716:	4b7f      	ldr	r3, [pc, #508]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	4a7e      	ldr	r2, [pc, #504]	; (8005914 <HAL_UART_MspInit+0x224>)
 800571c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005720:	6413      	str	r3, [r2, #64]	; 0x40
 8005722:	4b7c      	ldr	r3, [pc, #496]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	4b78      	ldr	r3, [pc, #480]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	4a77      	ldr	r2, [pc, #476]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005738:	f043 0304 	orr.w	r3, r3, #4
 800573c:	6313      	str	r3, [r2, #48]	; 0x30
 800573e:	4b75      	ldr	r3, [pc, #468]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800574a:	2300      	movs	r3, #0
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	4b71      	ldr	r3, [pc, #452]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	4a70      	ldr	r2, [pc, #448]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005754:	f043 0308 	orr.w	r3, r3, #8
 8005758:	6313      	str	r3, [r2, #48]	; 0x30
 800575a:	4b6e      	ldr	r3, [pc, #440]	; (8005914 <HAL_UART_MspInit+0x224>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8005766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576c:	2302      	movs	r3, #2
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005770:	2300      	movs	r3, #0
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005774:	2303      	movs	r3, #3
 8005776:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005778:	2308      	movs	r3, #8
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 800577c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005780:	4619      	mov	r1, r3
 8005782:	4865      	ldr	r0, [pc, #404]	; (8005918 <HAL_UART_MspInit+0x228>)
 8005784:	f001 ffa2 	bl	80076cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8005788:	2304      	movs	r3, #4
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2302      	movs	r3, #2
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005790:	2300      	movs	r3, #0
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005794:	2303      	movs	r3, #3
 8005796:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005798:	2308      	movs	r3, #8
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 800579c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057a0:	4619      	mov	r1, r3
 80057a2:	485e      	ldr	r0, [pc, #376]	; (800591c <HAL_UART_MspInit+0x22c>)
 80057a4:	f001 ff92 	bl	80076cc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	2035      	movs	r0, #53	; 0x35
 80057ae:	f001 f938 	bl	8006a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80057b2:	2035      	movs	r0, #53	; 0x35
 80057b4:	f001 f951 	bl	8006a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80057b8:	e0a6      	b.n	8005908 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a58      	ldr	r2, [pc, #352]	; (8005920 <HAL_UART_MspInit+0x230>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d135      	bne.n	8005830 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 80057c4:	2300      	movs	r3, #0
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	4b52      	ldr	r3, [pc, #328]	; (8005914 <HAL_UART_MspInit+0x224>)
 80057ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057cc:	4a51      	ldr	r2, [pc, #324]	; (8005914 <HAL_UART_MspInit+0x224>)
 80057ce:	f043 0310 	orr.w	r3, r3, #16
 80057d2:	6453      	str	r3, [r2, #68]	; 0x44
 80057d4:	4b4f      	ldr	r3, [pc, #316]	; (8005914 <HAL_UART_MspInit+0x224>)
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	4b4b      	ldr	r3, [pc, #300]	; (8005914 <HAL_UART_MspInit+0x224>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	4a4a      	ldr	r2, [pc, #296]	; (8005914 <HAL_UART_MspInit+0x224>)
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6313      	str	r3, [r2, #48]	; 0x30
 80057f0:	4b48      	ldr	r3, [pc, #288]	; (8005914 <HAL_UART_MspInit+0x224>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80057fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005802:	2302      	movs	r3, #2
 8005804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005806:	2300      	movs	r3, #0
 8005808:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800580a:	2303      	movs	r3, #3
 800580c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800580e:	2307      	movs	r3, #7
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005816:	4619      	mov	r1, r3
 8005818:	4842      	ldr	r0, [pc, #264]	; (8005924 <HAL_UART_MspInit+0x234>)
 800581a:	f001 ff57 	bl	80076cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	2025      	movs	r0, #37	; 0x25
 8005824:	f001 f8fd 	bl	8006a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005828:	2025      	movs	r0, #37	; 0x25
 800582a:	f001 f916 	bl	8006a5a <HAL_NVIC_EnableIRQ>
}
 800582e:	e06b      	b.n	8005908 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a3c      	ldr	r2, [pc, #240]	; (8005928 <HAL_UART_MspInit+0x238>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d12c      	bne.n	8005894 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	4b35      	ldr	r3, [pc, #212]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
 800584a:	4b32      	ldr	r3, [pc, #200]	; (8005914 <HAL_UART_MspInit+0x224>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <HAL_UART_MspInit+0x224>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6313      	str	r3, [r2, #48]	; 0x30
 8005866:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <HAL_UART_MspInit+0x224>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8005872:	230c      	movs	r3, #12
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005876:	2302      	movs	r3, #2
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587a:	2300      	movs	r3, #0
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800587e:	2303      	movs	r3, #3
 8005880:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005882:	2307      	movs	r3, #7
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800588a:	4619      	mov	r1, r3
 800588c:	4825      	ldr	r0, [pc, #148]	; (8005924 <HAL_UART_MspInit+0x234>)
 800588e:	f001 ff1d 	bl	80076cc <HAL_GPIO_Init>
}
 8005892:	e039      	b.n	8005908 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a24      	ldr	r2, [pc, #144]	; (800592c <HAL_UART_MspInit+0x23c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d134      	bne.n	8005908 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <HAL_UART_MspInit+0x224>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_UART_MspInit+0x224>)
 80058a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ac:	6413      	str	r3, [r2, #64]	; 0x40
 80058ae:	4b19      	ldr	r3, [pc, #100]	; (8005914 <HAL_UART_MspInit+0x224>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	4b15      	ldr	r3, [pc, #84]	; (8005914 <HAL_UART_MspInit+0x224>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	4a14      	ldr	r2, [pc, #80]	; (8005914 <HAL_UART_MspInit+0x224>)
 80058c4:	f043 0304 	orr.w	r3, r3, #4
 80058c8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_UART_MspInit+0x224>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 80058d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058dc:	2302      	movs	r3, #2
 80058de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e4:	2303      	movs	r3, #3
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058e8:	2307      	movs	r3, #7
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058f0:	4619      	mov	r1, r3
 80058f2:	4809      	ldr	r0, [pc, #36]	; (8005918 <HAL_UART_MspInit+0x228>)
 80058f4:	f001 feea 	bl	80076cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80058f8:	2200      	movs	r2, #0
 80058fa:	2100      	movs	r1, #0
 80058fc:	2027      	movs	r0, #39	; 0x27
 80058fe:	f001 f890 	bl	8006a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005902:	2027      	movs	r0, #39	; 0x27
 8005904:	f001 f8a9 	bl	8006a5a <HAL_NVIC_EnableIRQ>
}
 8005908:	bf00      	nop
 800590a:	3740      	adds	r7, #64	; 0x40
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40005000 	.word	0x40005000
 8005914:	40023800 	.word	0x40023800
 8005918:	40020800 	.word	0x40020800
 800591c:	40020c00 	.word	0x40020c00
 8005920:	40011000 	.word	0x40011000
 8005924:	40020000 	.word	0x40020000
 8005928:	40004400 	.word	0x40004400
 800592c:	40004800 	.word	0x40004800

08005930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005934:	e7fe      	b.n	8005934 <NMI_Handler+0x4>

08005936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005936:	b480      	push	{r7}
 8005938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800593a:	e7fe      	b.n	800593a <HardFault_Handler+0x4>

0800593c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005940:	e7fe      	b.n	8005940 <MemManage_Handler+0x4>

08005942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005942:	b480      	push	{r7}
 8005944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005946:	e7fe      	b.n	8005946 <BusFault_Handler+0x4>

08005948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800594c:	e7fe      	b.n	800594c <UsageFault_Handler+0x4>

0800594e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800594e:	b480      	push	{r7}
 8005950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005952:	bf00      	nop
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005960:	bf00      	nop
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800597c:	f000 f998 	bl	8005cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005980:	bf00      	nop
 8005982:	bd80      	pop	{r7, pc}

08005984 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005988:	2010      	movs	r0, #16
 800598a:	f002 f87f 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005998:	4802      	ldr	r0, [pc, #8]	; (80059a4 <TIM2_IRQHandler+0x10>)
 800599a:	f003 fbd9 	bl	8009150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200006dc 	.word	0x200006dc

080059a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <USART1_IRQHandler+0x10>)
 80059ae:	f004 fef1 	bl	800a794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200008e8 	.word	0x200008e8

080059bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80059c0:	4802      	ldr	r0, [pc, #8]	; (80059cc <USART3_IRQHandler+0x10>)
 80059c2:	f004 fee7 	bl	800a794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000970 	.word	0x20000970

080059d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 80059d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80059d8:	f002 f858 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80059dc:	bf00      	nop
 80059de:	bd80      	pop	{r7, pc}

080059e0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80059e4:	4802      	ldr	r0, [pc, #8]	; (80059f0 <DMA1_Stream7_IRQHandler+0x10>)
 80059e6:	f001 f9f9 	bl	8006ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80059ea:	bf00      	nop
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000844 	.word	0x20000844

080059f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80059f8:	4802      	ldr	r0, [pc, #8]	; (8005a04 <UART5_IRQHandler+0x10>)
 80059fa:	f004 fecb 	bl	800a794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200008a4 	.word	0x200008a4

08005a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
	return 1;
 8005a0c:	2301      	movs	r3, #1
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <_kill>:

int _kill(int pid, int sig)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a22:	f005 fe1f 	bl	800b664 <__errno>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2216      	movs	r2, #22
 8005a2a:	601a      	str	r2, [r3, #0]
	return -1;
 8005a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <_exit>:

void _exit (int status)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a40:	f04f 31ff 	mov.w	r1, #4294967295
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ffe7 	bl	8005a18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a4a:	e7fe      	b.n	8005a4a <_exit+0x12>

08005a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e00a      	b.n	8005a74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a5e:	f3af 8000 	nop.w
 8005a62:	4601      	mov	r1, r0
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	60ba      	str	r2, [r7, #8]
 8005a6a:	b2ca      	uxtb	r2, r1
 8005a6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	3301      	adds	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	dbf0      	blt.n	8005a5e <_read+0x12>
	}

return len;
 8005a7c:	687b      	ldr	r3, [r7, #4]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	e009      	b.n	8005aac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	60ba      	str	r2, [r7, #8]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	dbf1      	blt.n	8005a98 <_write+0x12>
	}
	return len;
 8005ab4:	687b      	ldr	r3, [r7, #4]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <_close>:

int _close(int file)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <_isatty>:

int _isatty(int file)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
	return 1;
 8005afe:	2301      	movs	r3, #1
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
	return 0;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <_sbrk+0x5c>)
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <_sbrk+0x60>)
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b3c:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <_sbrk+0x64>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b44:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <_sbrk+0x64>)
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <_sbrk+0x68>)
 8005b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <_sbrk+0x64>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4413      	add	r3, r2
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d207      	bcs.n	8005b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b58:	f005 fd84 	bl	800b664 <__errno>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	220c      	movs	r2, #12
 8005b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	e009      	b.n	8005b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b68:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <_sbrk+0x64>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <_sbrk+0x64>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	4a05      	ldr	r2, [pc, #20]	; (8005b8c <_sbrk+0x64>)
 8005b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20020000 	.word	0x20020000
 8005b88:	00000400 	.word	0x00000400
 8005b8c:	200009c8 	.word	0x200009c8
 8005b90:	20000a00 	.word	0x20000a00

08005b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b98:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <SystemInit+0x20>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <SystemInit+0x20>)
 8005ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	e000ed00 	.word	0xe000ed00

08005bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8005bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005bbc:	480d      	ldr	r0, [pc, #52]	; (8005bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005bbe:	490e      	ldr	r1, [pc, #56]	; (8005bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005bc0:	4a0e      	ldr	r2, [pc, #56]	; (8005bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005bc4:	e002      	b.n	8005bcc <LoopCopyDataInit>

08005bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bca:	3304      	adds	r3, #4

08005bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bd0:	d3f9      	bcc.n	8005bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bd2:	4a0b      	ldr	r2, [pc, #44]	; (8005c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005bd4:	4c0b      	ldr	r4, [pc, #44]	; (8005c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bd8:	e001      	b.n	8005bde <LoopFillZerobss>

08005bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bdc:	3204      	adds	r2, #4

08005bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005be0:	d3fb      	bcc.n	8005bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005be2:	f7ff ffd7 	bl	8005b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005be6:	f005 fd43 	bl	800b670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bea:	f7fe fbe3 	bl	80043b4 <main>
  bx  lr    
 8005bee:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8005bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bf8:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8005bfc:	080100a8 	.word	0x080100a8
  ldr r2, =_sbss
 8005c00:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8005c04:	20000a00 	.word	0x20000a00

08005c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c08:	e7fe      	b.n	8005c08 <ADC_IRQHandler>
	...

08005c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c10:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <HAL_Init+0x40>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <HAL_Init+0x40>)
 8005c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_Init+0x40>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <HAL_Init+0x40>)
 8005c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <HAL_Init+0x40>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a07      	ldr	r2, [pc, #28]	; (8005c4c <HAL_Init+0x40>)
 8005c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c34:	2003      	movs	r0, #3
 8005c36:	f000 fee9 	bl	8006a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f000 f808 	bl	8005c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c40:	f7ff fb0e 	bl	8005260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40023c00 	.word	0x40023c00

08005c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c58:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <HAL_InitTick+0x54>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <HAL_InitTick+0x58>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	4619      	mov	r1, r3
 8005c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 ff0f 	bl	8006a92 <HAL_SYSTICK_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e00e      	b.n	8005c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b0f      	cmp	r3, #15
 8005c82:	d80a      	bhi.n	8005c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c84:	2200      	movs	r2, #0
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	f000 fec9 	bl	8006a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c90:	4a06      	ldr	r2, [pc, #24]	; (8005cac <HAL_InitTick+0x5c>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e000      	b.n	8005c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000078 	.word	0x20000078
 8005ca8:	20000080 	.word	0x20000080
 8005cac:	2000007c 	.word	0x2000007c

08005cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_IncTick+0x20>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_IncTick+0x24>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	4a04      	ldr	r2, [pc, #16]	; (8005cd4 <HAL_IncTick+0x24>)
 8005cc2:	6013      	str	r3, [r2, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000080 	.word	0x20000080
 8005cd4:	200009cc 	.word	0x200009cc

08005cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  return uwTick;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <HAL_GetTick+0x14>)
 8005cde:	681b      	ldr	r3, [r3, #0]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	200009cc 	.word	0x200009cc

08005cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005cf8:	f7ff ffee 	bl	8005cd8 <HAL_GetTick>
 8005cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d005      	beq.n	8005d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HAL_Delay+0x44>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d16:	bf00      	nop
 8005d18:	f7ff ffde 	bl	8005cd8 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d8f7      	bhi.n	8005d18 <HAL_Delay+0x28>
  {
  }
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000080 	.word	0x20000080

08005d38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e033      	b.n	8005db6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff faaa 	bl	80052b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d118      	bne.n	8005da8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d7e:	f023 0302 	bic.w	r3, r3, #2
 8005d82:	f043 0202 	orr.w	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fab4 	bl	80062f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
 8005da6:	e001      	b.n	8005dac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_ADC_Start+0x1a>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e0b2      	b.n	8005f40 <HAL_ADC_Start+0x180>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d018      	beq.n	8005e22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e00:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <HAL_ADC_Start+0x18c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a52      	ldr	r2, [pc, #328]	; (8005f50 <HAL_ADC_Start+0x190>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	0c9a      	lsrs	r2, r3, #18
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e14:	e002      	b.n	8005e1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f9      	bne.n	8005e16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d17a      	bne.n	8005f26 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6e:	d106      	bne.n	8005e7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e74:	f023 0206 	bic.w	r2, r3, #6
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8005e7c:	e002      	b.n	8005e84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e8c:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <HAL_ADC_Start+0x194>)
 8005e8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d12a      	bne.n	8005efc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2b      	ldr	r2, [pc, #172]	; (8005f58 <HAL_ADC_Start+0x198>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d015      	beq.n	8005edc <HAL_ADC_Start+0x11c>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a29      	ldr	r2, [pc, #164]	; (8005f5c <HAL_ADC_Start+0x19c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d105      	bne.n	8005ec6 <HAL_ADC_Start+0x106>
 8005eba:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <HAL_ADC_Start+0x194>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a25      	ldr	r2, [pc, #148]	; (8005f60 <HAL_ADC_Start+0x1a0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d136      	bne.n	8005f3e <HAL_ADC_Start+0x17e>
 8005ed0:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <HAL_ADC_Start+0x194>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d130      	bne.n	8005f3e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d129      	bne.n	8005f3e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	e020      	b.n	8005f3e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <HAL_ADC_Start+0x198>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d11b      	bne.n	8005f3e <HAL_ADC_Start+0x17e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d114      	bne.n	8005f3e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	e00b      	b.n	8005f3e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0210 	orr.w	r2, r3, #16
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	f043 0201 	orr.w	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	20000078 	.word	0x20000078
 8005f50:	431bde83 	.word	0x431bde83
 8005f54:	40012300 	.word	0x40012300
 8005f58:	40012000 	.word	0x40012000
 8005f5c:	40012100 	.word	0x40012100
 8005f60:	40012200 	.word	0x40012200

08005f64 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f80:	d113      	bne.n	8005faa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f90:	d10b      	bne.n	8005faa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e063      	b.n	8006072 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005faa:	f7ff fe95 	bl	8005cd8 <HAL_GetTick>
 8005fae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005fb0:	e021      	b.n	8005ff6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d01d      	beq.n	8005ff6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <HAL_ADC_PollForConversion+0x6c>
 8005fc0:	f7ff fe8a 	bl	8005cd8 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d212      	bcs.n	8005ff6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d00b      	beq.n	8005ff6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e03d      	b.n	8006072 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d1d6      	bne.n	8005fb2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0212 	mvn.w	r2, #18
 800600c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d123      	bne.n	8006070 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11f      	bne.n	8006070 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800603a:	2b00      	cmp	r3, #0
 800603c:	d006      	beq.n	800604c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006048:	2b00      	cmp	r3, #0
 800604a:	d111      	bne.n	8006070 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	f043 0201 	orr.w	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_ADC_ConfigChannel+0x1c>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e113      	b.n	80062d8 <HAL_ADC_ConfigChannel+0x244>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b09      	cmp	r3, #9
 80060be:	d925      	bls.n	800610c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68d9      	ldr	r1, [r3, #12]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	4613      	mov	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	3b1e      	subs	r3, #30
 80060d6:	2207      	movs	r2, #7
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43da      	mvns	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	400a      	ands	r2, r1
 80060e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68d9      	ldr	r1, [r3, #12]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	4618      	mov	r0, r3
 80060f8:	4603      	mov	r3, r0
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	4403      	add	r3, r0
 80060fe:	3b1e      	subs	r3, #30
 8006100:	409a      	lsls	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	e022      	b.n	8006152 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6919      	ldr	r1, [r3, #16]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	2207      	movs	r2, #7
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43da      	mvns	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	400a      	ands	r2, r1
 800612e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6919      	ldr	r1, [r3, #16]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	4618      	mov	r0, r3
 8006142:	4603      	mov	r3, r0
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	4403      	add	r3, r0
 8006148:	409a      	lsls	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b06      	cmp	r3, #6
 8006158:	d824      	bhi.n	80061a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	3b05      	subs	r3, #5
 800616c:	221f      	movs	r2, #31
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43da      	mvns	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	400a      	ands	r2, r1
 800617a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	4618      	mov	r0, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	3b05      	subs	r3, #5
 8006196:	fa00 f203 	lsl.w	r2, r0, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	635a      	str	r2, [r3, #52]	; 0x34
 80061a2:	e04c      	b.n	800623e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b0c      	cmp	r3, #12
 80061aa:	d824      	bhi.n	80061f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	3b23      	subs	r3, #35	; 0x23
 80061be:	221f      	movs	r2, #31
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43da      	mvns	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	400a      	ands	r2, r1
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4618      	mov	r0, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	3b23      	subs	r3, #35	; 0x23
 80061e8:	fa00 f203 	lsl.w	r2, r0, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
 80061f4:	e023      	b.n	800623e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	3b41      	subs	r3, #65	; 0x41
 8006208:	221f      	movs	r2, #31
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	43da      	mvns	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	400a      	ands	r2, r1
 8006216:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	4618      	mov	r0, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	3b41      	subs	r3, #65	; 0x41
 8006232:	fa00 f203 	lsl.w	r2, r0, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800623e:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <HAL_ADC_ConfigChannel+0x250>)
 8006240:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <HAL_ADC_ConfigChannel+0x254>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10f      	bne.n	800626c <HAL_ADC_ConfigChannel+0x1d8>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b12      	cmp	r3, #18
 8006252:	d10b      	bne.n	800626c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <HAL_ADC_ConfigChannel+0x254>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d12b      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x23a>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1c      	ldr	r2, [pc, #112]	; (80062ec <HAL_ADC_ConfigChannel+0x258>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <HAL_ADC_ConfigChannel+0x1f4>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b11      	cmp	r3, #17
 8006286:	d122      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a11      	ldr	r2, [pc, #68]	; (80062ec <HAL_ADC_ConfigChannel+0x258>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d111      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062aa:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <HAL_ADC_ConfigChannel+0x25c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a11      	ldr	r2, [pc, #68]	; (80062f4 <HAL_ADC_ConfigChannel+0x260>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	0c9a      	lsrs	r2, r3, #18
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062c0:	e002      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f9      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012300 	.word	0x40012300
 80062e8:	40012000 	.word	0x40012000
 80062ec:	10000012 	.word	0x10000012
 80062f0:	20000078 	.word	0x20000078
 80062f4:	431bde83 	.word	0x431bde83

080062f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006300:	4b79      	ldr	r3, [pc, #484]	; (80064e8 <ADC_Init+0x1f0>)
 8006302:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	431a      	orrs	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800632c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6859      	ldr	r1, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	021a      	lsls	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6899      	ldr	r1, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	4a58      	ldr	r2, [pc, #352]	; (80064ec <ADC_Init+0x1f4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d022      	beq.n	80063d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800639e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6899      	ldr	r1, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	609a      	str	r2, [r3, #8]
 80063d4:	e00f      	b.n	80063f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0202 	bic.w	r2, r2, #2
 8006404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6899      	ldr	r1, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7e1b      	ldrb	r3, [r3, #24]
 8006410:	005a      	lsls	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01b      	beq.n	800645c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006432:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006442:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6859      	ldr	r1, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	3b01      	subs	r3, #1
 8006450:	035a      	lsls	r2, r3, #13
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	e007      	b.n	800646c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800646a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	3b01      	subs	r3, #1
 8006488:	051a      	lsls	r2, r3, #20
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6899      	ldr	r1, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064ae:	025a      	lsls	r2, r3, #9
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6899      	ldr	r1, [r3, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	029a      	lsls	r2, r3, #10
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	609a      	str	r2, [r3, #8]
}
 80064dc:	bf00      	nop
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40012300 	.word	0x40012300
 80064ec:	0f000001 	.word	0x0f000001

080064f0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e17e      	b.n	8006806 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b09      	cmp	r3, #9
 8006516:	d925      	bls.n	8006564 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68d9      	ldr	r1, [r3, #12]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	3b1e      	subs	r3, #30
 800652e:	2207      	movs	r2, #7
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	43da      	mvns	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	400a      	ands	r2, r1
 800653c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68d9      	ldr	r1, [r3, #12]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	4618      	mov	r0, r3
 8006550:	4603      	mov	r3, r0
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	4403      	add	r3, r0
 8006556:	3b1e      	subs	r3, #30
 8006558:	409a      	lsls	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	60da      	str	r2, [r3, #12]
 8006562:	e022      	b.n	80065aa <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6919      	ldr	r1, [r3, #16]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	4613      	mov	r3, r2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4413      	add	r3, r2
 8006578:	2207      	movs	r2, #7
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	43da      	mvns	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	400a      	ands	r2, r1
 8006586:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6919      	ldr	r1, [r3, #16]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	4618      	mov	r0, r3
 800659a:	4603      	mov	r3, r0
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4403      	add	r3, r0
 80065a0:	409a      	lsls	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	051a      	lsls	r2, r3, #20
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	3303      	adds	r3, #3
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	221f      	movs	r2, #31
 80065f4:	fa02 f303 	lsl.w	r3, r2, r3
 80065f8:	43da      	mvns	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	400a      	ands	r2, r1
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	4618      	mov	r0, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	b2db      	uxtb	r3, r3
 8006620:	3303      	adds	r3, #3
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	fa00 f203 	lsl.w	r2, r0, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	4a75      	ldr	r2, [pc, #468]	; (8006814 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6899      	ldr	r1, [r3, #8]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006672:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6899      	ldr	r1, [r3, #8]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	69da      	ldr	r2, [r3, #28]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
 8006686:	e00f      	b.n	80066a8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80066a6:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	7d5b      	ldrb	r3, [r3, #21]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	e007      	b.n	80066d2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	7d1b      	ldrb	r3, [r3, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	e007      	b.n	80066fc <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066fa:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d02e      	beq.n	8006762 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006704:	2b03      	cmp	r3, #3
 8006706:	d840      	bhi.n	800678a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8006708:	2b01      	cmp	r3, #1
 800670a:	d002      	beq.n	8006712 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800670c:	2b02      	cmp	r3, #2
 800670e:	d014      	beq.n	800673a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006710:	e03b      	b.n	800678a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006720:	f023 030f 	bic.w	r3, r3, #15
 8006724:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6959      	ldr	r1, [r3, #20]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	615a      	str	r2, [r3, #20]
      break;
 8006738:	e03b      	b.n	80067b2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006748:	f023 030f 	bic.w	r3, r3, #15
 800674c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6999      	ldr	r1, [r3, #24]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	619a      	str	r2, [r3, #24]
      break;
 8006760:	e027      	b.n	80067b2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006770:	f023 030f 	bic.w	r3, r3, #15
 8006774:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	61da      	str	r2, [r3, #28]
      break;
 8006788:	e013      	b.n	80067b2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006798:	f023 030f 	bic.w	r3, r3, #15
 800679c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a19      	ldr	r1, [r3, #32]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	621a      	str	r2, [r3, #32]
      break;
 80067b0:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067b2:	4b19      	ldr	r3, [pc, #100]	; (8006818 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80067b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a18      	ldr	r2, [pc, #96]	; (800681c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d109      	bne.n	80067d4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b12      	cmp	r3, #18
 80067c6:	d105      	bne.n	80067d4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a10      	ldr	r2, [pc, #64]	; (800681c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d10e      	bne.n	80067fc <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a0f      	ldr	r2, [pc, #60]	; (8006820 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b11      	cmp	r3, #17
 80067ee:	d105      	bne.n	80067fc <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	000f0001 	.word	0x000f0001
 8006818:	40012300 	.word	0x40012300
 800681c:	40012000 	.word	0x40012000
 8006820:	10000012 	.word	0x10000012

08006824 <__NVIC_SetPriorityGrouping>:
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <__NVIC_SetPriorityGrouping+0x44>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006840:	4013      	ands	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800684c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006856:	4a04      	ldr	r2, [pc, #16]	; (8006868 <__NVIC_SetPriorityGrouping+0x44>)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	60d3      	str	r3, [r2, #12]
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	e000ed00 	.word	0xe000ed00

0800686c <__NVIC_GetPriorityGrouping>:
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <__NVIC_GetPriorityGrouping+0x18>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	0a1b      	lsrs	r3, r3, #8
 8006876:	f003 0307 	and.w	r3, r3, #7
}
 800687a:	4618      	mov	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	e000ed00 	.word	0xe000ed00

08006888 <__NVIC_EnableIRQ>:
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006896:	2b00      	cmp	r3, #0
 8006898:	db0b      	blt.n	80068b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	f003 021f 	and.w	r2, r3, #31
 80068a0:	4907      	ldr	r1, [pc, #28]	; (80068c0 <__NVIC_EnableIRQ+0x38>)
 80068a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	2001      	movs	r0, #1
 80068aa:	fa00 f202 	lsl.w	r2, r0, r2
 80068ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	e000e100 	.word	0xe000e100

080068c4 <__NVIC_DisableIRQ>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	db12      	blt.n	80068fc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	f003 021f 	and.w	r2, r3, #31
 80068dc:	490a      	ldr	r1, [pc, #40]	; (8006908 <__NVIC_DisableIRQ+0x44>)
 80068de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	2001      	movs	r0, #1
 80068e6:	fa00 f202 	lsl.w	r2, r0, r2
 80068ea:	3320      	adds	r3, #32
 80068ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80068f0:	f3bf 8f4f 	dsb	sy
}
 80068f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80068f6:	f3bf 8f6f 	isb	sy
}
 80068fa:	bf00      	nop
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	e000e100 	.word	0xe000e100

0800690c <__NVIC_SetPriority>:
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	6039      	str	r1, [r7, #0]
 8006916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800691c:	2b00      	cmp	r3, #0
 800691e:	db0a      	blt.n	8006936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	490c      	ldr	r1, [pc, #48]	; (8006958 <__NVIC_SetPriority+0x4c>)
 8006926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692a:	0112      	lsls	r2, r2, #4
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	440b      	add	r3, r1
 8006930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006934:	e00a      	b.n	800694c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	4908      	ldr	r1, [pc, #32]	; (800695c <__NVIC_SetPriority+0x50>)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	3b04      	subs	r3, #4
 8006944:	0112      	lsls	r2, r2, #4
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	440b      	add	r3, r1
 800694a:	761a      	strb	r2, [r3, #24]
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	e000e100 	.word	0xe000e100
 800695c:	e000ed00 	.word	0xe000ed00

08006960 <NVIC_EncodePriority>:
{
 8006960:	b480      	push	{r7}
 8006962:	b089      	sub	sp, #36	; 0x24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f1c3 0307 	rsb	r3, r3, #7
 800697a:	2b04      	cmp	r3, #4
 800697c:	bf28      	it	cs
 800697e:	2304      	movcs	r3, #4
 8006980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3304      	adds	r3, #4
 8006986:	2b06      	cmp	r3, #6
 8006988:	d902      	bls.n	8006990 <NVIC_EncodePriority+0x30>
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3b03      	subs	r3, #3
 800698e:	e000      	b.n	8006992 <NVIC_EncodePriority+0x32>
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006994:	f04f 32ff 	mov.w	r2, #4294967295
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43da      	mvns	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	401a      	ands	r2, r3
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069a8:	f04f 31ff 	mov.w	r1, #4294967295
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	fa01 f303 	lsl.w	r3, r1, r3
 80069b2:	43d9      	mvns	r1, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069b8:	4313      	orrs	r3, r2
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3724      	adds	r7, #36	; 0x24
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069d8:	d301      	bcc.n	80069de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069da:	2301      	movs	r3, #1
 80069dc:	e00f      	b.n	80069fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069de:	4a0a      	ldr	r2, [pc, #40]	; (8006a08 <SysTick_Config+0x40>)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069e6:	210f      	movs	r1, #15
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	f7ff ff8e 	bl	800690c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069f0:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <SysTick_Config+0x40>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069f6:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <SysTick_Config+0x40>)
 80069f8:	2207      	movs	r2, #7
 80069fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	e000e010 	.word	0xe000e010

08006a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff ff05 	bl	8006824 <__NVIC_SetPriorityGrouping>
}
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	4603      	mov	r3, r0
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a34:	f7ff ff1a 	bl	800686c <__NVIC_GetPriorityGrouping>
 8006a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	6978      	ldr	r0, [r7, #20]
 8006a40:	f7ff ff8e 	bl	8006960 <NVIC_EncodePriority>
 8006a44:	4602      	mov	r2, r0
 8006a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff ff5d 	bl	800690c <__NVIC_SetPriority>
}
 8006a52:	bf00      	nop
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	4603      	mov	r3, r0
 8006a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff ff0d 	bl	8006888 <__NVIC_EnableIRQ>
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff ff1d 	bl	80068c4 <__NVIC_DisableIRQ>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ff94 	bl	80069c8 <SysTick_Config>
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ab8:	f7ff f90e 	bl	8005cd8 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e099      	b.n	8006bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ae8:	e00f      	b.n	8006b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006aea:	f7ff f8f5 	bl	8005cd8 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b05      	cmp	r3, #5
 8006af6:	d908      	bls.n	8006b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2203      	movs	r2, #3
 8006b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e078      	b.n	8006bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e8      	bne.n	8006aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4b38      	ldr	r3, [pc, #224]	; (8006c04 <HAL_DMA_Init+0x158>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d107      	bne.n	8006b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d117      	bne.n	8006bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00e      	beq.n	8006bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fb01 	bl	80071b8 <DMA_CheckFifoParam>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2240      	movs	r2, #64	; 0x40
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e016      	b.n	8006bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fab8 	bl	800714c <DMA_CalcBaseAndBitshift>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be4:	223f      	movs	r2, #63	; 0x3f
 8006be6:	409a      	lsls	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	f010803f 	.word	0xf010803f

08006c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_DMA_Start_IT+0x26>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e040      	b.n	8006cb0 <HAL_DMA_Start_IT+0xa8>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d12f      	bne.n	8006ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 fa4a 	bl	80070f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c60:	223f      	movs	r2, #63	; 0x3f
 8006c62:	409a      	lsls	r2, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0216 	orr.w	r2, r2, #22
 8006c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0208 	orr.w	r2, r2, #8
 8006c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e005      	b.n	8006cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006caa:	2302      	movs	r3, #2
 8006cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006cc6:	f7ff f807 	bl	8005cd8 <HAL_GetTick>
 8006cca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d008      	beq.n	8006cea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2280      	movs	r2, #128	; 0x80
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e052      	b.n	8006d90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0216 	bic.w	r2, r2, #22
 8006cf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695a      	ldr	r2, [r3, #20]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d103      	bne.n	8006d1a <HAL_DMA_Abort+0x62>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0208 	bic.w	r2, r2, #8
 8006d28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d3a:	e013      	b.n	8006d64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d3c:	f7fe ffcc 	bl	8005cd8 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d90c      	bls.n	8006d64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2203      	movs	r2, #3
 8006d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e015      	b.n	8006d90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e4      	bne.n	8006d3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	223f      	movs	r2, #63	; 0x3f
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d004      	beq.n	8006db6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2280      	movs	r2, #128	; 0x80
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e00c      	b.n	8006dd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2205      	movs	r2, #5
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006de8:	4b8e      	ldr	r3, [pc, #568]	; (8007024 <HAL_DMA_IRQHandler+0x248>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a8e      	ldr	r2, [pc, #568]	; (8007028 <HAL_DMA_IRQHandler+0x24c>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	0a9b      	lsrs	r3, r3, #10
 8006df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e06:	2208      	movs	r2, #8
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01a      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0204 	bic.w	r2, r2, #4
 8006e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e34:	2208      	movs	r2, #8
 8006e36:	409a      	lsls	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	f043 0201 	orr.w	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	409a      	lsls	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d012      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	f043 0202 	orr.w	r2, r3, #2
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e82:	2204      	movs	r2, #4
 8006e84:	409a      	lsls	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d012      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	409a      	lsls	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eac:	f043 0204 	orr.w	r2, r3, #4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb8:	2210      	movs	r2, #16
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d043      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d03c      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d018      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d108      	bne.n	8006f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d024      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
 8006f0a:	e01f      	b.n	8006f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
 8006f1c:	e016      	b.n	8006f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0208 	bic.w	r2, r2, #8
 8006f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f50:	2220      	movs	r2, #32
 8006f52:	409a      	lsls	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 808f 	beq.w	800707c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8087 	beq.w	800707c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f72:	2220      	movs	r2, #32
 8006f74:	409a      	lsls	r2, r3
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d136      	bne.n	8006ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0216 	bic.w	r2, r2, #22
 8006f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <HAL_DMA_IRQHandler+0x1da>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0208 	bic.w	r2, r2, #8
 8006fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	223f      	movs	r2, #63	; 0x3f
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d07e      	beq.n	80070e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
        }
        return;
 8006ff2:	e079      	b.n	80070e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d01d      	beq.n	800703e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10d      	bne.n	800702c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	2b00      	cmp	r3, #0
 8007016:	d031      	beq.n	800707c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
 8007020:	e02c      	b.n	800707c <HAL_DMA_IRQHandler+0x2a0>
 8007022:	bf00      	nop
 8007024:	20000078 	.word	0x20000078
 8007028:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d023      	beq.n	800707c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	4798      	blx	r3
 800703c:	e01e      	b.n	800707c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10f      	bne.n	800706c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0210 	bic.w	r2, r2, #16
 800705a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007080:	2b00      	cmp	r3, #0
 8007082:	d032      	beq.n	80070ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d022      	beq.n	80070d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2205      	movs	r2, #5
 8007094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d307      	bcc.n	80070c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f2      	bne.n	80070a8 <HAL_DMA_IRQHandler+0x2cc>
 80070c2:	e000      	b.n	80070c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80070c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
 80070e6:	e000      	b.n	80070ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80070e8:	bf00      	nop
    }
  }
}
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800710c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d108      	bne.n	8007130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800712e:	e007      	b.n	8007140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
}
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	3b10      	subs	r3, #16
 800715c:	4a14      	ldr	r2, [pc, #80]	; (80071b0 <DMA_CalcBaseAndBitshift+0x64>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007166:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <DMA_CalcBaseAndBitshift+0x68>)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d909      	bls.n	800718e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	659a      	str	r2, [r3, #88]	; 0x58
 800718c:	e007      	b.n	800719e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	aaaaaaab 	.word	0xaaaaaaab
 80071b4:	0800fa98 	.word	0x0800fa98

080071b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d11f      	bne.n	8007212 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d856      	bhi.n	8007286 <DMA_CheckFifoParam+0xce>
 80071d8:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <DMA_CheckFifoParam+0x28>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	08007203 	.word	0x08007203
 80071e8:	080071f1 	.word	0x080071f1
 80071ec:	08007287 	.word	0x08007287
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d046      	beq.n	800728a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007200:	e043      	b.n	800728a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800720a:	d140      	bne.n	800728e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007210:	e03d      	b.n	800728e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	d121      	bne.n	8007260 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d837      	bhi.n	8007292 <DMA_CheckFifoParam+0xda>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <DMA_CheckFifoParam+0x70>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007239 	.word	0x08007239
 800722c:	0800723f 	.word	0x0800723f
 8007230:	08007239 	.word	0x08007239
 8007234:	08007251 	.word	0x08007251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
      break;
 800723c:	e030      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d025      	beq.n	8007296 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800724e:	e022      	b.n	8007296 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007258:	d11f      	bne.n	800729a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800725e:	e01c      	b.n	800729a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d903      	bls.n	800726e <DMA_CheckFifoParam+0xb6>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d003      	beq.n	8007274 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800726c:	e018      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	73fb      	strb	r3, [r7, #15]
      break;
 8007272:	e015      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00e      	beq.n	800729e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
      break;
 8007284:	e00b      	b.n	800729e <DMA_CheckFifoParam+0xe6>
      break;
 8007286:	bf00      	nop
 8007288:	e00a      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 800728a:	bf00      	nop
 800728c:	e008      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 800728e:	bf00      	nop
 8007290:	e006      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 8007292:	bf00      	nop
 8007294:	e004      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 800729e:	bf00      	nop
    }
  } 
  
  return status; 
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop

080072b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80072c2:	4b23      	ldr	r3, [pc, #140]	; (8007350 <HAL_FLASH_Program+0xa0>)
 80072c4:	7e1b      	ldrb	r3, [r3, #24]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_FLASH_Program+0x1e>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e03b      	b.n	8007346 <HAL_FLASH_Program+0x96>
 80072ce:	4b20      	ldr	r3, [pc, #128]	; (8007350 <HAL_FLASH_Program+0xa0>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80072d8:	f000 f870 	bl	80073bc <FLASH_WaitForLastOperation>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d12b      	bne.n	800733e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d105      	bne.n	80072f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80072ec:	783b      	ldrb	r3, [r7, #0]
 80072ee:	4619      	mov	r1, r3
 80072f0:	68b8      	ldr	r0, [r7, #8]
 80072f2:	f000 f91b 	bl	800752c <FLASH_Program_Byte>
 80072f6:	e016      	b.n	8007326 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d105      	bne.n	800730a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80072fe:	883b      	ldrh	r3, [r7, #0]
 8007300:	4619      	mov	r1, r3
 8007302:	68b8      	ldr	r0, [r7, #8]
 8007304:	f000 f8ee 	bl	80074e4 <FLASH_Program_HalfWord>
 8007308:	e00d      	b.n	8007326 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d105      	bne.n	800731c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	68b8      	ldr	r0, [r7, #8]
 8007316:	f000 f8c3 	bl	80074a0 <FLASH_Program_Word>
 800731a:	e004      	b.n	8007326 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800731c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	f000 f88b 	bl	800743c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007326:	f24c 3050 	movw	r0, #50000	; 0xc350
 800732a:	f000 f847 	bl	80073bc <FLASH_WaitForLastOperation>
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007332:	4b08      	ldr	r3, [pc, #32]	; (8007354 <HAL_FLASH_Program+0xa4>)
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	4a07      	ldr	r2, [pc, #28]	; (8007354 <HAL_FLASH_Program+0xa4>)
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800733e:	4b04      	ldr	r3, [pc, #16]	; (8007350 <HAL_FLASH_Program+0xa0>)
 8007340:	2200      	movs	r2, #0
 8007342:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200009d0 	.word	0x200009d0
 8007354:	40023c00 	.word	0x40023c00

08007358 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <HAL_FLASH_Unlock+0x38>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	da0b      	bge.n	8007382 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800736a:	4b09      	ldr	r3, [pc, #36]	; (8007390 <HAL_FLASH_Unlock+0x38>)
 800736c:	4a09      	ldr	r2, [pc, #36]	; (8007394 <HAL_FLASH_Unlock+0x3c>)
 800736e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007370:	4b07      	ldr	r3, [pc, #28]	; (8007390 <HAL_FLASH_Unlock+0x38>)
 8007372:	4a09      	ldr	r2, [pc, #36]	; (8007398 <HAL_FLASH_Unlock+0x40>)
 8007374:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007376:	4b06      	ldr	r3, [pc, #24]	; (8007390 <HAL_FLASH_Unlock+0x38>)
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da01      	bge.n	8007382 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007382:	79fb      	ldrb	r3, [r7, #7]
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40023c00 	.word	0x40023c00
 8007394:	45670123 	.word	0x45670123
 8007398:	cdef89ab 	.word	0xcdef89ab

0800739c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <HAL_FLASH_Lock+0x1c>)
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	4a04      	ldr	r2, [pc, #16]	; (80073b8 <HAL_FLASH_Lock+0x1c>)
 80073a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	40023c00 	.word	0x40023c00

080073bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80073c8:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <FLASH_WaitForLastOperation+0x78>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80073ce:	f7fe fc83 	bl	8005cd8 <HAL_GetTick>
 80073d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80073d4:	e010      	b.n	80073f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d00c      	beq.n	80073f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <FLASH_WaitForLastOperation+0x38>
 80073e4:	f7fe fc78 	bl	8005cd8 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d201      	bcs.n	80073f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e019      	b.n	800742c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80073f8:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <FLASH_WaitForLastOperation+0x7c>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e8      	bne.n	80073d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <FLASH_WaitForLastOperation+0x7c>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <FLASH_WaitForLastOperation+0x7c>)
 8007412:	2201      	movs	r2, #1
 8007414:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007416:	4b08      	ldr	r3, [pc, #32]	; (8007438 <FLASH_WaitForLastOperation+0x7c>)
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007422:	f000 f8a5 	bl	8007570 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
  
}  
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	200009d0 	.word	0x200009d0
 8007438:	40023c00 	.word	0x40023c00

0800743c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007448:	4b14      	ldr	r3, [pc, #80]	; (800749c <FLASH_Program_DoubleWord+0x60>)
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	4a13      	ldr	r2, [pc, #76]	; (800749c <FLASH_Program_DoubleWord+0x60>)
 800744e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <FLASH_Program_DoubleWord+0x60>)
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	4a10      	ldr	r2, [pc, #64]	; (800749c <FLASH_Program_DoubleWord+0x60>)
 800745a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800745e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007460:	4b0e      	ldr	r3, [pc, #56]	; (800749c <FLASH_Program_DoubleWord+0x60>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	4a0d      	ldr	r2, [pc, #52]	; (800749c <FLASH_Program_DoubleWord+0x60>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007472:	f3bf 8f6f 	isb	sy
}
 8007476:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	000a      	movs	r2, r1
 8007486:	2300      	movs	r3, #0
 8007488:	68f9      	ldr	r1, [r7, #12]
 800748a:	3104      	adds	r1, #4
 800748c:	4613      	mov	r3, r2
 800748e:	600b      	str	r3, [r1, #0]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40023c00 	.word	0x40023c00

080074a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <FLASH_Program_Word+0x40>)
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	4a0c      	ldr	r2, [pc, #48]	; (80074e0 <FLASH_Program_Word+0x40>)
 80074b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <FLASH_Program_Word+0x40>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <FLASH_Program_Word+0x40>)
 80074bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <FLASH_Program_Word+0x40>)
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	4a06      	ldr	r2, [pc, #24]	; (80074e0 <FLASH_Program_Word+0x40>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	40023c00 	.word	0x40023c00

080074e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <FLASH_Program_HalfWord+0x44>)
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	4a0c      	ldr	r2, [pc, #48]	; (8007528 <FLASH_Program_HalfWord+0x44>)
 80074f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <FLASH_Program_HalfWord+0x44>)
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	4a09      	ldr	r2, [pc, #36]	; (8007528 <FLASH_Program_HalfWord+0x44>)
 8007502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007508:	4b07      	ldr	r3, [pc, #28]	; (8007528 <FLASH_Program_HalfWord+0x44>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	4a06      	ldr	r2, [pc, #24]	; (8007528 <FLASH_Program_HalfWord+0x44>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	887a      	ldrh	r2, [r7, #2]
 8007518:	801a      	strh	r2, [r3, #0]
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40023c00 	.word	0x40023c00

0800752c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <FLASH_Program_Byte+0x40>)
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	4a0b      	ldr	r2, [pc, #44]	; (800756c <FLASH_Program_Byte+0x40>)
 800753e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007544:	4b09      	ldr	r3, [pc, #36]	; (800756c <FLASH_Program_Byte+0x40>)
 8007546:	4a09      	ldr	r2, [pc, #36]	; (800756c <FLASH_Program_Byte+0x40>)
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <FLASH_Program_Byte+0x40>)
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	4a06      	ldr	r2, [pc, #24]	; (800756c <FLASH_Program_Byte+0x40>)
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	701a      	strb	r2, [r3, #0]
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40023c00 	.word	0x40023c00

08007570 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007574:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007580:	4b2d      	ldr	r3, [pc, #180]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f043 0310 	orr.w	r3, r3, #16
 8007588:	4a2b      	ldr	r2, [pc, #172]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 800758a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800758c:	4b29      	ldr	r3, [pc, #164]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 800758e:	2210      	movs	r2, #16
 8007590:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007592:	4b28      	ldr	r3, [pc, #160]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800759e:	4b26      	ldr	r3, [pc, #152]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f043 0308 	orr.w	r3, r3, #8
 80075a6:	4a24      	ldr	r2, [pc, #144]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 80075a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80075aa:	4b22      	ldr	r3, [pc, #136]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 80075ac:	2220      	movs	r2, #32
 80075ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80075b0:	4b20      	ldr	r3, [pc, #128]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80075bc:	4b1e      	ldr	r3, [pc, #120]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f043 0304 	orr.w	r3, r3, #4
 80075c4:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 80075c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80075c8:	4b1a      	ldr	r3, [pc, #104]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 80075ca:	2240      	movs	r2, #64	; 0x40
 80075cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80075ce:	4b19      	ldr	r3, [pc, #100]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80075da:	4b17      	ldr	r3, [pc, #92]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f043 0302 	orr.w	r3, r3, #2
 80075e2:	4a15      	ldr	r2, [pc, #84]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 80075e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 80075e8:	2280      	movs	r2, #128	; 0x80
 80075ea:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80075ec:	4b11      	ldr	r3, [pc, #68]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d009      	beq.n	800760c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	4a0d      	ldr	r2, [pc, #52]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 8007602:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 8007606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800760a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800760c:	4b09      	ldr	r3, [pc, #36]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f043 0320 	orr.w	r3, r3, #32
 8007620:	4a05      	ldr	r2, [pc, #20]	; (8007638 <FLASH_SetErrorCode+0xc8>)
 8007622:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007624:	4b03      	ldr	r3, [pc, #12]	; (8007634 <FLASH_SetErrorCode+0xc4>)
 8007626:	2202      	movs	r2, #2
 8007628:	60da      	str	r2, [r3, #12]
  }
}
 800762a:	bf00      	nop
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	40023c00 	.word	0x40023c00
 8007638:	200009d0 	.word	0x200009d0

0800763c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	e010      	b.n	800767a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d103      	bne.n	8007666 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800765e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e009      	b.n	800767a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d103      	bne.n	8007674 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800766c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e002      	b.n	800767a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007674:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007678:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800767a:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	4a12      	ldr	r2, [pc, #72]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 8007680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007684:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007686:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 8007688:	691a      	ldr	r2, [r3, #16]
 800768a:	490f      	ldr	r1, [pc, #60]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007692:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	4a0c      	ldr	r2, [pc, #48]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 8007698:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800769c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4313      	orrs	r3, r2
 80076a8:	4a07      	ldr	r2, [pc, #28]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 80076aa:	f043 0302 	orr.w	r3, r3, #2
 80076ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	4a04      	ldr	r2, [pc, #16]	; (80076c8 <FLASH_Erase_Sector+0x8c>)
 80076b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ba:	6113      	str	r3, [r2, #16]
}
 80076bc:	bf00      	nop
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	40023c00 	.word	0x40023c00

080076cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	e165      	b.n	80079b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076e8:	2201      	movs	r2, #1
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4013      	ands	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	429a      	cmp	r2, r3
 8007702:	f040 8154 	bne.w	80079ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	2b01      	cmp	r3, #1
 8007710:	d005      	beq.n	800771e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800771a:	2b02      	cmp	r3, #2
 800771c:	d130      	bne.n	8007780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	2203      	movs	r2, #3
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	43db      	mvns	r3, r3
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	4013      	ands	r3, r2
 8007734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4313      	orrs	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007754:	2201      	movs	r2, #1
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4013      	ands	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	091b      	lsrs	r3, r3, #4
 800776a:	f003 0201 	and.w	r2, r3, #1
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4313      	orrs	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b03      	cmp	r3, #3
 800778a:	d017      	beq.n	80077bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	2203      	movs	r2, #3
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	43db      	mvns	r3, r3
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	4013      	ands	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d123      	bne.n	8007810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	08da      	lsrs	r2, r3, #3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3208      	adds	r2, #8
 80077d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	220f      	movs	r2, #15
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	08da      	lsrs	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3208      	adds	r2, #8
 800780a:	69b9      	ldr	r1, [r7, #24]
 800780c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	2203      	movs	r2, #3
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4013      	ands	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f003 0203 	and.w	r2, r3, #3
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80ae 	beq.w	80079ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	4b5d      	ldr	r3, [pc, #372]	; (80079cc <HAL_GPIO_Init+0x300>)
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	4a5c      	ldr	r2, [pc, #368]	; (80079cc <HAL_GPIO_Init+0x300>)
 800785c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007860:	6453      	str	r3, [r2, #68]	; 0x44
 8007862:	4b5a      	ldr	r3, [pc, #360]	; (80079cc <HAL_GPIO_Init+0x300>)
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800786e:	4a58      	ldr	r2, [pc, #352]	; (80079d0 <HAL_GPIO_Init+0x304>)
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	089b      	lsrs	r3, r3, #2
 8007874:	3302      	adds	r3, #2
 8007876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	220f      	movs	r2, #15
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a4f      	ldr	r2, [pc, #316]	; (80079d4 <HAL_GPIO_Init+0x308>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d025      	beq.n	80078e6 <HAL_GPIO_Init+0x21a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a4e      	ldr	r2, [pc, #312]	; (80079d8 <HAL_GPIO_Init+0x30c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01f      	beq.n	80078e2 <HAL_GPIO_Init+0x216>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a4d      	ldr	r2, [pc, #308]	; (80079dc <HAL_GPIO_Init+0x310>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d019      	beq.n	80078de <HAL_GPIO_Init+0x212>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a4c      	ldr	r2, [pc, #304]	; (80079e0 <HAL_GPIO_Init+0x314>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <HAL_GPIO_Init+0x20e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a4b      	ldr	r2, [pc, #300]	; (80079e4 <HAL_GPIO_Init+0x318>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00d      	beq.n	80078d6 <HAL_GPIO_Init+0x20a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a4a      	ldr	r2, [pc, #296]	; (80079e8 <HAL_GPIO_Init+0x31c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d007      	beq.n	80078d2 <HAL_GPIO_Init+0x206>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a49      	ldr	r2, [pc, #292]	; (80079ec <HAL_GPIO_Init+0x320>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <HAL_GPIO_Init+0x202>
 80078ca:	2306      	movs	r3, #6
 80078cc:	e00c      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078ce:	2307      	movs	r3, #7
 80078d0:	e00a      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078d2:	2305      	movs	r3, #5
 80078d4:	e008      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078d6:	2304      	movs	r3, #4
 80078d8:	e006      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078da:	2303      	movs	r3, #3
 80078dc:	e004      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078de:	2302      	movs	r3, #2
 80078e0:	e002      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078e6:	2300      	movs	r3, #0
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	f002 0203 	and.w	r2, r2, #3
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	4093      	lsls	r3, r2
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078f8:	4935      	ldr	r1, [pc, #212]	; (80079d0 <HAL_GPIO_Init+0x304>)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	089b      	lsrs	r3, r3, #2
 80078fe:	3302      	adds	r3, #2
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007906:	4b3a      	ldr	r3, [pc, #232]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	43db      	mvns	r3, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4013      	ands	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800792a:	4a31      	ldr	r2, [pc, #196]	; (80079f0 <HAL_GPIO_Init+0x324>)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007930:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	43db      	mvns	r3, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4013      	ands	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007954:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800795a:	4b25      	ldr	r3, [pc, #148]	; (80079f0 <HAL_GPIO_Init+0x324>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	43db      	mvns	r3, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4013      	ands	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800797e:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079a8:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <HAL_GPIO_Init+0x324>)
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	f67f ae96 	bls.w	80076e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	3724      	adds	r7, #36	; 0x24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40023800 	.word	0x40023800
 80079d0:	40013800 	.word	0x40013800
 80079d4:	40020000 	.word	0x40020000
 80079d8:	40020400 	.word	0x40020400
 80079dc:	40020800 	.word	0x40020800
 80079e0:	40020c00 	.word	0x40020c00
 80079e4:	40021000 	.word	0x40021000
 80079e8:	40021400 	.word	0x40021400
 80079ec:	40021800 	.word	0x40021800
 80079f0:	40013c00 	.word	0x40013c00

080079f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	887b      	ldrh	r3, [r7, #2]
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
 8007a10:	e001      	b.n	8007a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
 8007a30:	4613      	mov	r3, r2
 8007a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a34:	787b      	ldrb	r3, [r7, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a3a:	887a      	ldrh	r2, [r7, #2]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a40:	e003      	b.n	8007a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a42:	887b      	ldrh	r3, [r7, #2]
 8007a44:	041a      	lsls	r2, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	619a      	str	r2, [r3, #24]
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a68:	887a      	ldrh	r2, [r7, #2]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	041a      	lsls	r2, r3, #16
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	43d9      	mvns	r1, r3
 8007a74:	887b      	ldrh	r3, [r7, #2]
 8007a76:	400b      	ands	r3, r1
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	619a      	str	r2, [r3, #24]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a96:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d006      	beq.n	8007ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007aa2:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fd fac2 	bl	8005034 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40013c00 	.word	0x40013c00

08007abc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	4b20      	ldr	r3, [pc, #128]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x90>)
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	4a1f      	ldr	r2, [pc, #124]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x90>)
 8007ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ad6:	4b1d      	ldr	r3, [pc, #116]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x90>)
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <HAL_PWREx_EnableOverDrive+0x94>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ae8:	f7fe f8f6 	bl	8005cd8 <HAL_GetTick>
 8007aec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007aee:	e009      	b.n	8007b04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007af0:	f7fe f8f2 	bl	8005cd8 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007afe:	d901      	bls.n	8007b04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e01f      	b.n	8007b44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b10:	d1ee      	bne.n	8007af0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b12:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b18:	f7fe f8de 	bl	8005cd8 <HAL_GetTick>
 8007b1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b1e:	e009      	b.n	8007b34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b20:	f7fe f8da 	bl	8005cd8 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b2e:	d901      	bls.n	8007b34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e007      	b.n	8007b44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b40:	d1ee      	bne.n	8007b20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	420e0040 	.word	0x420e0040
 8007b54:	40007000 	.word	0x40007000
 8007b58:	420e0044 	.word	0x420e0044

08007b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e0cc      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b70:	4b68      	ldr	r3, [pc, #416]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d90c      	bls.n	8007b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b7e:	4b65      	ldr	r3, [pc, #404]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b86:	4b63      	ldr	r3, [pc, #396]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d001      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0b8      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d020      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bb0:	4b59      	ldr	r3, [pc, #356]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a58      	ldr	r2, [pc, #352]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bc8:	4b53      	ldr	r3, [pc, #332]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	4a52      	ldr	r2, [pc, #328]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd4:	4b50      	ldr	r3, [pc, #320]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	494d      	ldr	r1, [pc, #308]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d044      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d107      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfa:	4b47      	ldr	r3, [pc, #284]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d119      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e07f      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d003      	beq.n	8007c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d107      	bne.n	8007c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c1a:	4b3f      	ldr	r3, [pc, #252]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e06f      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c2a:	4b3b      	ldr	r3, [pc, #236]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e067      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c3a:	4b37      	ldr	r3, [pc, #220]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f023 0203 	bic.w	r2, r3, #3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	4934      	ldr	r1, [pc, #208]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c4c:	f7fe f844 	bl	8005cd8 <HAL_GetTick>
 8007c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c52:	e00a      	b.n	8007c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c54:	f7fe f840 	bl	8005cd8 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e04f      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6a:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 020c 	and.w	r2, r3, #12
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d1eb      	bne.n	8007c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c7c:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d20c      	bcs.n	8007ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c8a:	4b22      	ldr	r3, [pc, #136]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c92:	4b20      	ldr	r3, [pc, #128]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d001      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e032      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cb0:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	4916      	ldr	r1, [pc, #88]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	490e      	ldr	r1, [pc, #56]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ce2:	f000 f855 	bl	8007d90 <HAL_RCC_GetSysClockFreq>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	091b      	lsrs	r3, r3, #4
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	490a      	ldr	r1, [pc, #40]	; (8007d1c <HAL_RCC_ClockConfig+0x1c0>)
 8007cf4:	5ccb      	ldrb	r3, [r1, r3]
 8007cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfa:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <HAL_RCC_ClockConfig+0x1c4>)
 8007cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fd ffa4 	bl	8005c50 <HAL_InitTick>

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40023c00 	.word	0x40023c00
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	0800fa80 	.word	0x0800fa80
 8007d20:	20000078 	.word	0x20000078
 8007d24:	2000007c 	.word	0x2000007c

08007d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d2c:	4b03      	ldr	r3, [pc, #12]	; (8007d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20000078 	.word	0x20000078

08007d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d44:	f7ff fff0 	bl	8007d28 <HAL_RCC_GetHCLKFreq>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	0a9b      	lsrs	r3, r3, #10
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	4903      	ldr	r1, [pc, #12]	; (8007d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d56:	5ccb      	ldrb	r3, [r1, r3]
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40023800 	.word	0x40023800
 8007d64:	0800fa90 	.word	0x0800fa90

08007d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d6c:	f7ff ffdc 	bl	8007d28 <HAL_RCC_GetHCLKFreq>
 8007d70:	4602      	mov	r2, r0
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	0b5b      	lsrs	r3, r3, #13
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	4903      	ldr	r1, [pc, #12]	; (8007d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d7e:	5ccb      	ldrb	r3, [r1, r3]
 8007d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	40023800 	.word	0x40023800
 8007d8c:	0800fa90 	.word	0x0800fa90

08007d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d94:	b0ae      	sub	sp, #184	; 0xb8
 8007d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007db6:	4bcb      	ldr	r3, [pc, #812]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	2b0c      	cmp	r3, #12
 8007dc0:	f200 8206 	bhi.w	80081d0 <HAL_RCC_GetSysClockFreq+0x440>
 8007dc4:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <HAL_RCC_GetSysClockFreq+0x3c>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007e01 	.word	0x08007e01
 8007dd0:	080081d1 	.word	0x080081d1
 8007dd4:	080081d1 	.word	0x080081d1
 8007dd8:	080081d1 	.word	0x080081d1
 8007ddc:	08007e09 	.word	0x08007e09
 8007de0:	080081d1 	.word	0x080081d1
 8007de4:	080081d1 	.word	0x080081d1
 8007de8:	080081d1 	.word	0x080081d1
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	080081d1 	.word	0x080081d1
 8007df4:	080081d1 	.word	0x080081d1
 8007df8:	080081d1 	.word	0x080081d1
 8007dfc:	08008001 	.word	0x08008001
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e00:	4bb9      	ldr	r3, [pc, #740]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007e06:	e1e7      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e08:	4bb8      	ldr	r3, [pc, #736]	; (80080ec <HAL_RCC_GetSysClockFreq+0x35c>)
 8007e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007e0e:	e1e3      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e10:	4bb4      	ldr	r3, [pc, #720]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e1c:	4bb1      	ldr	r3, [pc, #708]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d071      	beq.n	8007f0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e28:	4bae      	ldr	r3, [pc, #696]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	099b      	lsrs	r3, r3, #6
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	0159      	lsls	r1, r3, #5
 8007e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e60:	0150      	lsls	r0, r2, #5
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4621      	mov	r1, r4
 8007e68:	1a51      	subs	r1, r2, r1
 8007e6a:	6439      	str	r1, [r7, #64]	; 0x40
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e72:	647b      	str	r3, [r7, #68]	; 0x44
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007e80:	4649      	mov	r1, r9
 8007e82:	018b      	lsls	r3, r1, #6
 8007e84:	4641      	mov	r1, r8
 8007e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	018a      	lsls	r2, r1, #6
 8007e8e:	4641      	mov	r1, r8
 8007e90:	1a51      	subs	r1, r2, r1
 8007e92:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e94:	4649      	mov	r1, r9
 8007e96:	eb63 0301 	sbc.w	r3, r3, r1
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	00cb      	lsls	r3, r1, #3
 8007eac:	4641      	mov	r1, r8
 8007eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	00ca      	lsls	r2, r1, #3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	189b      	adds	r3, r3, r2
 8007ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	460a      	mov	r2, r1
 8007ec6:	eb42 0303 	adc.w	r3, r2, r3
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007ed8:	4629      	mov	r1, r5
 8007eda:	024b      	lsls	r3, r1, #9
 8007edc:	4621      	mov	r1, r4
 8007ede:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	024a      	lsls	r2, r1, #9
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ef4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ef8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007efc:	f7f8 fec4 	bl	8000c88 <__aeabi_uldivmod>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4613      	mov	r3, r2
 8007f06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f0a:	e067      	b.n	8007fdc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f0c:	4b75      	ldr	r3, [pc, #468]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	099b      	lsrs	r3, r3, #6
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f26:	2300      	movs	r3, #0
 8007f28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007f2e:	4622      	mov	r2, r4
 8007f30:	462b      	mov	r3, r5
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f04f 0100 	mov.w	r1, #0
 8007f3a:	0159      	lsls	r1, r3, #5
 8007f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f40:	0150      	lsls	r0, r2, #5
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4621      	mov	r1, r4
 8007f48:	1a51      	subs	r1, r2, r1
 8007f4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	f04f 0300 	mov.w	r3, #0
 8007f5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007f60:	4649      	mov	r1, r9
 8007f62:	018b      	lsls	r3, r1, #6
 8007f64:	4641      	mov	r1, r8
 8007f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	018a      	lsls	r2, r1, #6
 8007f6e:	4641      	mov	r1, r8
 8007f70:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f74:	4649      	mov	r1, r9
 8007f76:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f8e:	4692      	mov	sl, r2
 8007f90:	469b      	mov	fp, r3
 8007f92:	4623      	mov	r3, r4
 8007f94:	eb1a 0303 	adds.w	r3, sl, r3
 8007f98:	623b      	str	r3, [r7, #32]
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007fae:	4629      	mov	r1, r5
 8007fb0:	028b      	lsls	r3, r1, #10
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fb8:	4621      	mov	r1, r4
 8007fba:	028a      	lsls	r2, r1, #10
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8007fc8:	677a      	str	r2, [r7, #116]	; 0x74
 8007fca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007fce:	f7f8 fe5b 	bl	8000c88 <__aeabi_uldivmod>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fdc:	4b41      	ldr	r3, [pc, #260]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007ffe:	e0eb      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008000:	4b38      	ldr	r3, [pc, #224]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800800c:	4b35      	ldr	r3, [pc, #212]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d06b      	beq.n	80080f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008018:	4b32      	ldr	r3, [pc, #200]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	099b      	lsrs	r3, r3, #6
 800801e:	2200      	movs	r2, #0
 8008020:	66bb      	str	r3, [r7, #104]	; 0x68
 8008022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	663b      	str	r3, [r7, #96]	; 0x60
 800802c:	2300      	movs	r3, #0
 800802e:	667b      	str	r3, [r7, #100]	; 0x64
 8008030:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008034:	4622      	mov	r2, r4
 8008036:	462b      	mov	r3, r5
 8008038:	f04f 0000 	mov.w	r0, #0
 800803c:	f04f 0100 	mov.w	r1, #0
 8008040:	0159      	lsls	r1, r3, #5
 8008042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008046:	0150      	lsls	r0, r2, #5
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4621      	mov	r1, r4
 800804e:	1a51      	subs	r1, r2, r1
 8008050:	61b9      	str	r1, [r7, #24]
 8008052:	4629      	mov	r1, r5
 8008054:	eb63 0301 	sbc.w	r3, r3, r1
 8008058:	61fb      	str	r3, [r7, #28]
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	f04f 0300 	mov.w	r3, #0
 8008062:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008066:	4659      	mov	r1, fp
 8008068:	018b      	lsls	r3, r1, #6
 800806a:	4651      	mov	r1, sl
 800806c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008070:	4651      	mov	r1, sl
 8008072:	018a      	lsls	r2, r1, #6
 8008074:	4651      	mov	r1, sl
 8008076:	ebb2 0801 	subs.w	r8, r2, r1
 800807a:	4659      	mov	r1, fp
 800807c:	eb63 0901 	sbc.w	r9, r3, r1
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800808c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008090:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008094:	4690      	mov	r8, r2
 8008096:	4699      	mov	r9, r3
 8008098:	4623      	mov	r3, r4
 800809a:	eb18 0303 	adds.w	r3, r8, r3
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	462b      	mov	r3, r5
 80080a2:	eb49 0303 	adc.w	r3, r9, r3
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80080b4:	4629      	mov	r1, r5
 80080b6:	024b      	lsls	r3, r1, #9
 80080b8:	4621      	mov	r1, r4
 80080ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080be:	4621      	mov	r1, r4
 80080c0:	024a      	lsls	r2, r1, #9
 80080c2:	4610      	mov	r0, r2
 80080c4:	4619      	mov	r1, r3
 80080c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ca:	2200      	movs	r2, #0
 80080cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80080ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80080d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080d4:	f7f8 fdd8 	bl	8000c88 <__aeabi_uldivmod>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4613      	mov	r3, r2
 80080de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080e2:	e065      	b.n	80081b0 <HAL_RCC_GetSysClockFreq+0x420>
 80080e4:	40023800 	.word	0x40023800
 80080e8:	00f42400 	.word	0x00f42400
 80080ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080f0:	4b3d      	ldr	r3, [pc, #244]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	099b      	lsrs	r3, r3, #6
 80080f6:	2200      	movs	r2, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	4611      	mov	r1, r2
 80080fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008100:	653b      	str	r3, [r7, #80]	; 0x50
 8008102:	2300      	movs	r3, #0
 8008104:	657b      	str	r3, [r7, #84]	; 0x54
 8008106:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800810a:	4642      	mov	r2, r8
 800810c:	464b      	mov	r3, r9
 800810e:	f04f 0000 	mov.w	r0, #0
 8008112:	f04f 0100 	mov.w	r1, #0
 8008116:	0159      	lsls	r1, r3, #5
 8008118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800811c:	0150      	lsls	r0, r2, #5
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4641      	mov	r1, r8
 8008124:	1a51      	subs	r1, r2, r1
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	4649      	mov	r1, r9
 800812a:	eb63 0301 	sbc.w	r3, r3, r1
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	f04f 0300 	mov.w	r3, #0
 8008138:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800813c:	4659      	mov	r1, fp
 800813e:	018b      	lsls	r3, r1, #6
 8008140:	4651      	mov	r1, sl
 8008142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008146:	4651      	mov	r1, sl
 8008148:	018a      	lsls	r2, r1, #6
 800814a:	4651      	mov	r1, sl
 800814c:	1a54      	subs	r4, r2, r1
 800814e:	4659      	mov	r1, fp
 8008150:	eb63 0501 	sbc.w	r5, r3, r1
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	f04f 0300 	mov.w	r3, #0
 800815c:	00eb      	lsls	r3, r5, #3
 800815e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008162:	00e2      	lsls	r2, r4, #3
 8008164:	4614      	mov	r4, r2
 8008166:	461d      	mov	r5, r3
 8008168:	4643      	mov	r3, r8
 800816a:	18e3      	adds	r3, r4, r3
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	464b      	mov	r3, r9
 8008170:	eb45 0303 	adc.w	r3, r5, r3
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	f04f 0200 	mov.w	r2, #0
 800817a:	f04f 0300 	mov.w	r3, #0
 800817e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008182:	4629      	mov	r1, r5
 8008184:	028b      	lsls	r3, r1, #10
 8008186:	4621      	mov	r1, r4
 8008188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800818c:	4621      	mov	r1, r4
 800818e:	028a      	lsls	r2, r1, #10
 8008190:	4610      	mov	r0, r2
 8008192:	4619      	mov	r1, r3
 8008194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008198:	2200      	movs	r2, #0
 800819a:	64bb      	str	r3, [r7, #72]	; 0x48
 800819c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800819e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081a2:	f7f8 fd71 	bl	8000c88 <__aeabi_uldivmod>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4613      	mov	r3, r2
 80081ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80081b0:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	0f1b      	lsrs	r3, r3, #28
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80081be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80081ce:	e003      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80081d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80081d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	37b8      	adds	r7, #184	; 0xb8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e6:	bf00      	nop
 80081e8:	40023800 	.word	0x40023800
 80081ec:	00f42400 	.word	0x00f42400

080081f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e28d      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8083 	beq.w	8008316 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008210:	4b94      	ldr	r3, [pc, #592]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 030c 	and.w	r3, r3, #12
 8008218:	2b04      	cmp	r3, #4
 800821a:	d019      	beq.n	8008250 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800821c:	4b91      	ldr	r3, [pc, #580]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008224:	2b08      	cmp	r3, #8
 8008226:	d106      	bne.n	8008236 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008228:	4b8e      	ldr	r3, [pc, #568]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008234:	d00c      	beq.n	8008250 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008236:	4b8b      	ldr	r3, [pc, #556]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800823e:	2b0c      	cmp	r3, #12
 8008240:	d112      	bne.n	8008268 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008242:	4b88      	ldr	r3, [pc, #544]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800824a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800824e:	d10b      	bne.n	8008268 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008250:	4b84      	ldr	r3, [pc, #528]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d05b      	beq.n	8008314 <HAL_RCC_OscConfig+0x124>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d157      	bne.n	8008314 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e25a      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008270:	d106      	bne.n	8008280 <HAL_RCC_OscConfig+0x90>
 8008272:	4b7c      	ldr	r3, [pc, #496]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a7b      	ldr	r2, [pc, #492]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	e01d      	b.n	80082bc <HAL_RCC_OscConfig+0xcc>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008288:	d10c      	bne.n	80082a4 <HAL_RCC_OscConfig+0xb4>
 800828a:	4b76      	ldr	r3, [pc, #472]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a75      	ldr	r2, [pc, #468]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	4b73      	ldr	r3, [pc, #460]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a72      	ldr	r2, [pc, #456]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 800829c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	e00b      	b.n	80082bc <HAL_RCC_OscConfig+0xcc>
 80082a4:	4b6f      	ldr	r3, [pc, #444]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a6e      	ldr	r2, [pc, #440]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80082aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	4b6c      	ldr	r3, [pc, #432]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a6b      	ldr	r2, [pc, #428]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80082b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d013      	beq.n	80082ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c4:	f7fd fd08 	bl	8005cd8 <HAL_GetTick>
 80082c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ca:	e008      	b.n	80082de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082cc:	f7fd fd04 	bl	8005cd8 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b64      	cmp	r3, #100	; 0x64
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e21f      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082de:	4b61      	ldr	r3, [pc, #388]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0f0      	beq.n	80082cc <HAL_RCC_OscConfig+0xdc>
 80082ea:	e014      	b.n	8008316 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ec:	f7fd fcf4 	bl	8005cd8 <HAL_GetTick>
 80082f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082f2:	e008      	b.n	8008306 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082f4:	f7fd fcf0 	bl	8005cd8 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b64      	cmp	r3, #100	; 0x64
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e20b      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008306:	4b57      	ldr	r3, [pc, #348]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f0      	bne.n	80082f4 <HAL_RCC_OscConfig+0x104>
 8008312:	e000      	b.n	8008316 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d06f      	beq.n	8008402 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008322:	4b50      	ldr	r3, [pc, #320]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 030c 	and.w	r3, r3, #12
 800832a:	2b00      	cmp	r3, #0
 800832c:	d017      	beq.n	800835e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800832e:	4b4d      	ldr	r3, [pc, #308]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008336:	2b08      	cmp	r3, #8
 8008338:	d105      	bne.n	8008346 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800833a:	4b4a      	ldr	r3, [pc, #296]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008346:	4b47      	ldr	r3, [pc, #284]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800834e:	2b0c      	cmp	r3, #12
 8008350:	d11c      	bne.n	800838c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008352:	4b44      	ldr	r3, [pc, #272]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d116      	bne.n	800838c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800835e:	4b41      	ldr	r3, [pc, #260]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d005      	beq.n	8008376 <HAL_RCC_OscConfig+0x186>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d001      	beq.n	8008376 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e1d3      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008376:	4b3b      	ldr	r3, [pc, #236]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4937      	ldr	r1, [pc, #220]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008386:	4313      	orrs	r3, r2
 8008388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800838a:	e03a      	b.n	8008402 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d020      	beq.n	80083d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008394:	4b34      	ldr	r3, [pc, #208]	; (8008468 <HAL_RCC_OscConfig+0x278>)
 8008396:	2201      	movs	r2, #1
 8008398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839a:	f7fd fc9d 	bl	8005cd8 <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083a2:	f7fd fc99 	bl	8005cd8 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e1b4      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083b4:	4b2b      	ldr	r3, [pc, #172]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c0:	4b28      	ldr	r3, [pc, #160]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	4925      	ldr	r1, [pc, #148]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	600b      	str	r3, [r1, #0]
 80083d4:	e015      	b.n	8008402 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083d6:	4b24      	ldr	r3, [pc, #144]	; (8008468 <HAL_RCC_OscConfig+0x278>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083dc:	f7fd fc7c 	bl	8005cd8 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e4:	f7fd fc78 	bl	8005cd8 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e193      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083f6:	4b1b      	ldr	r3, [pc, #108]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f0      	bne.n	80083e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0308 	and.w	r3, r3, #8
 800840a:	2b00      	cmp	r3, #0
 800840c:	d036      	beq.n	800847c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008416:	4b15      	ldr	r3, [pc, #84]	; (800846c <HAL_RCC_OscConfig+0x27c>)
 8008418:	2201      	movs	r2, #1
 800841a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841c:	f7fd fc5c 	bl	8005cd8 <HAL_GetTick>
 8008420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008424:	f7fd fc58 	bl	8005cd8 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e173      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008436:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <HAL_RCC_OscConfig+0x274>)
 8008438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0f0      	beq.n	8008424 <HAL_RCC_OscConfig+0x234>
 8008442:	e01b      	b.n	800847c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008444:	4b09      	ldr	r3, [pc, #36]	; (800846c <HAL_RCC_OscConfig+0x27c>)
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800844a:	f7fd fc45 	bl	8005cd8 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008450:	e00e      	b.n	8008470 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008452:	f7fd fc41 	bl	8005cd8 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d907      	bls.n	8008470 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e15c      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
 8008464:	40023800 	.word	0x40023800
 8008468:	42470000 	.word	0x42470000
 800846c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008470:	4b8a      	ldr	r3, [pc, #552]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1ea      	bne.n	8008452 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8097 	beq.w	80085b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800848a:	2300      	movs	r3, #0
 800848c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800848e:	4b83      	ldr	r3, [pc, #524]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]
 800849e:	4b7f      	ldr	r3, [pc, #508]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	4a7e      	ldr	r2, [pc, #504]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 80084a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a8:	6413      	str	r3, [r2, #64]	; 0x40
 80084aa:	4b7c      	ldr	r3, [pc, #496]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b2:	60bb      	str	r3, [r7, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084b6:	2301      	movs	r3, #1
 80084b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ba:	4b79      	ldr	r3, [pc, #484]	; (80086a0 <HAL_RCC_OscConfig+0x4b0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d118      	bne.n	80084f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084c6:	4b76      	ldr	r3, [pc, #472]	; (80086a0 <HAL_RCC_OscConfig+0x4b0>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a75      	ldr	r2, [pc, #468]	; (80086a0 <HAL_RCC_OscConfig+0x4b0>)
 80084cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084d2:	f7fd fc01 	bl	8005cd8 <HAL_GetTick>
 80084d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084d8:	e008      	b.n	80084ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084da:	f7fd fbfd 	bl	8005cd8 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d901      	bls.n	80084ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e118      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ec:	4b6c      	ldr	r3, [pc, #432]	; (80086a0 <HAL_RCC_OscConfig+0x4b0>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0f0      	beq.n	80084da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d106      	bne.n	800850e <HAL_RCC_OscConfig+0x31e>
 8008500:	4b66      	ldr	r3, [pc, #408]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008504:	4a65      	ldr	r2, [pc, #404]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	6713      	str	r3, [r2, #112]	; 0x70
 800850c:	e01c      	b.n	8008548 <HAL_RCC_OscConfig+0x358>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	2b05      	cmp	r3, #5
 8008514:	d10c      	bne.n	8008530 <HAL_RCC_OscConfig+0x340>
 8008516:	4b61      	ldr	r3, [pc, #388]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4a60      	ldr	r2, [pc, #384]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 800851c:	f043 0304 	orr.w	r3, r3, #4
 8008520:	6713      	str	r3, [r2, #112]	; 0x70
 8008522:	4b5e      	ldr	r3, [pc, #376]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008526:	4a5d      	ldr	r2, [pc, #372]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	6713      	str	r3, [r2, #112]	; 0x70
 800852e:	e00b      	b.n	8008548 <HAL_RCC_OscConfig+0x358>
 8008530:	4b5a      	ldr	r3, [pc, #360]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008534:	4a59      	ldr	r2, [pc, #356]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	6713      	str	r3, [r2, #112]	; 0x70
 800853c:	4b57      	ldr	r3, [pc, #348]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 800853e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008540:	4a56      	ldr	r2, [pc, #344]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008542:	f023 0304 	bic.w	r3, r3, #4
 8008546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d015      	beq.n	800857c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008550:	f7fd fbc2 	bl	8005cd8 <HAL_GetTick>
 8008554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008556:	e00a      	b.n	800856e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008558:	f7fd fbbe 	bl	8005cd8 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f241 3288 	movw	r2, #5000	; 0x1388
 8008566:	4293      	cmp	r3, r2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e0d7      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800856e:	4b4b      	ldr	r3, [pc, #300]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0ee      	beq.n	8008558 <HAL_RCC_OscConfig+0x368>
 800857a:	e014      	b.n	80085a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800857c:	f7fd fbac 	bl	8005cd8 <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008582:	e00a      	b.n	800859a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008584:	f7fd fba8 	bl	8005cd8 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008592:	4293      	cmp	r3, r2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e0c1      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800859a:	4b40      	ldr	r3, [pc, #256]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1ee      	bne.n	8008584 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d105      	bne.n	80085b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085ac:	4b3b      	ldr	r3, [pc, #236]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	4a3a      	ldr	r2, [pc, #232]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 80085b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80ad 	beq.w	800871c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085c2:	4b36      	ldr	r3, [pc, #216]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 030c 	and.w	r3, r3, #12
 80085ca:	2b08      	cmp	r3, #8
 80085cc:	d060      	beq.n	8008690 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d145      	bne.n	8008662 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d6:	4b33      	ldr	r3, [pc, #204]	; (80086a4 <HAL_RCC_OscConfig+0x4b4>)
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085dc:	f7fd fb7c 	bl	8005cd8 <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085e2:	e008      	b.n	80085f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085e4:	f7fd fb78 	bl	8005cd8 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e093      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f6:	4b29      	ldr	r3, [pc, #164]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1f0      	bne.n	80085e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69da      	ldr	r2, [r3, #28]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	019b      	lsls	r3, r3, #6
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	3b01      	subs	r3, #1
 800861c:	041b      	lsls	r3, r3, #16
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	061b      	lsls	r3, r3, #24
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	071b      	lsls	r3, r3, #28
 800862e:	491b      	ldr	r1, [pc, #108]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008630:	4313      	orrs	r3, r2
 8008632:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008634:	4b1b      	ldr	r3, [pc, #108]	; (80086a4 <HAL_RCC_OscConfig+0x4b4>)
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863a:	f7fd fb4d 	bl	8005cd8 <HAL_GetTick>
 800863e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008640:	e008      	b.n	8008654 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008642:	f7fd fb49 	bl	8005cd8 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e064      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008654:	4b11      	ldr	r3, [pc, #68]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0f0      	beq.n	8008642 <HAL_RCC_OscConfig+0x452>
 8008660:	e05c      	b.n	800871c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008662:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <HAL_RCC_OscConfig+0x4b4>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008668:	f7fd fb36 	bl	8005cd8 <HAL_GetTick>
 800866c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008670:	f7fd fb32 	bl	8005cd8 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e04d      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_RCC_OscConfig+0x4ac>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1f0      	bne.n	8008670 <HAL_RCC_OscConfig+0x480>
 800868e:	e045      	b.n	800871c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d107      	bne.n	80086a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e040      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
 800869c:	40023800 	.word	0x40023800
 80086a0:	40007000 	.word	0x40007000
 80086a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80086a8:	4b1f      	ldr	r3, [pc, #124]	; (8008728 <HAL_RCC_OscConfig+0x538>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d030      	beq.n	8008718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d129      	bne.n	8008718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d122      	bne.n	8008718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086d8:	4013      	ands	r3, r2
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d119      	bne.n	8008718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	085b      	lsrs	r3, r3, #1
 80086f0:	3b01      	subs	r3, #1
 80086f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d10f      	bne.n	8008718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008704:	429a      	cmp	r2, r3
 8008706:	d107      	bne.n	8008718 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008714:	429a      	cmp	r2, r3
 8008716:	d001      	beq.n	800871c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e000      	b.n	800871e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40023800 	.word	0x40023800

0800872c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e041      	b.n	80087c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d106      	bne.n	8008758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fc fe22 	bl	800539c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3304      	adds	r3, #4
 8008768:	4619      	mov	r1, r3
 800876a:	4610      	mov	r0, r2
 800876c:	f001 f944 	bl	80099f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d001      	beq.n	80087e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e046      	b.n	8008872 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a23      	ldr	r2, [pc, #140]	; (8008880 <HAL_TIM_Base_Start+0xb4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d022      	beq.n	800883c <HAL_TIM_Base_Start+0x70>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087fe:	d01d      	beq.n	800883c <HAL_TIM_Base_Start+0x70>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1f      	ldr	r2, [pc, #124]	; (8008884 <HAL_TIM_Base_Start+0xb8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d018      	beq.n	800883c <HAL_TIM_Base_Start+0x70>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1e      	ldr	r2, [pc, #120]	; (8008888 <HAL_TIM_Base_Start+0xbc>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d013      	beq.n	800883c <HAL_TIM_Base_Start+0x70>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1c      	ldr	r2, [pc, #112]	; (800888c <HAL_TIM_Base_Start+0xc0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00e      	beq.n	800883c <HAL_TIM_Base_Start+0x70>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1b      	ldr	r2, [pc, #108]	; (8008890 <HAL_TIM_Base_Start+0xc4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d009      	beq.n	800883c <HAL_TIM_Base_Start+0x70>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a19      	ldr	r2, [pc, #100]	; (8008894 <HAL_TIM_Base_Start+0xc8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d004      	beq.n	800883c <HAL_TIM_Base_Start+0x70>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a18      	ldr	r2, [pc, #96]	; (8008898 <HAL_TIM_Base_Start+0xcc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d111      	bne.n	8008860 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b06      	cmp	r3, #6
 800884c:	d010      	beq.n	8008870 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0201 	orr.w	r2, r2, #1
 800885c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885e:	e007      	b.n	8008870 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40000400 	.word	0x40000400
 8008888:	40000800 	.word	0x40000800
 800888c:	40000c00 	.word	0x40000c00
 8008890:	40010400 	.word	0x40010400
 8008894:	40014000 	.word	0x40014000
 8008898:	40001800 	.word	0x40001800

0800889c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e041      	b.n	8008932 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d106      	bne.n	80088c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f839 	bl	800893a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f001 f88c 	bl	80099f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d109      	bne.n	8008974 <HAL_TIM_PWM_Start+0x24>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b01      	cmp	r3, #1
 800896a:	bf14      	ite	ne
 800896c:	2301      	movne	r3, #1
 800896e:	2300      	moveq	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	e022      	b.n	80089ba <HAL_TIM_PWM_Start+0x6a>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b04      	cmp	r3, #4
 8008978:	d109      	bne.n	800898e <HAL_TIM_PWM_Start+0x3e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b01      	cmp	r3, #1
 8008984:	bf14      	ite	ne
 8008986:	2301      	movne	r3, #1
 8008988:	2300      	moveq	r3, #0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	e015      	b.n	80089ba <HAL_TIM_PWM_Start+0x6a>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b08      	cmp	r3, #8
 8008992:	d109      	bne.n	80089a8 <HAL_TIM_PWM_Start+0x58>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	bf14      	ite	ne
 80089a0:	2301      	movne	r3, #1
 80089a2:	2300      	moveq	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	e008      	b.n	80089ba <HAL_TIM_PWM_Start+0x6a>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	bf14      	ite	ne
 80089b4:	2301      	movne	r3, #1
 80089b6:	2300      	moveq	r3, #0
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e07c      	b.n	8008abc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <HAL_TIM_PWM_Start+0x82>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089d0:	e013      	b.n	80089fa <HAL_TIM_PWM_Start+0xaa>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d104      	bne.n	80089e2 <HAL_TIM_PWM_Start+0x92>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089e0:	e00b      	b.n	80089fa <HAL_TIM_PWM_Start+0xaa>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d104      	bne.n	80089f2 <HAL_TIM_PWM_Start+0xa2>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089f0:	e003      	b.n	80089fa <HAL_TIM_PWM_Start+0xaa>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2202      	movs	r2, #2
 80089f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2201      	movs	r2, #1
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fc0c 	bl	800a220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a2d      	ldr	r2, [pc, #180]	; (8008ac4 <HAL_TIM_PWM_Start+0x174>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d004      	beq.n	8008a1c <HAL_TIM_PWM_Start+0xcc>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2c      	ldr	r2, [pc, #176]	; (8008ac8 <HAL_TIM_PWM_Start+0x178>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d101      	bne.n	8008a20 <HAL_TIM_PWM_Start+0xd0>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e000      	b.n	8008a22 <HAL_TIM_PWM_Start+0xd2>
 8008a20:	2300      	movs	r3, #0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a22      	ldr	r2, [pc, #136]	; (8008ac4 <HAL_TIM_PWM_Start+0x174>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d022      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x136>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a48:	d01d      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x136>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a1f      	ldr	r2, [pc, #124]	; (8008acc <HAL_TIM_PWM_Start+0x17c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d018      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x136>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1d      	ldr	r2, [pc, #116]	; (8008ad0 <HAL_TIM_PWM_Start+0x180>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d013      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x136>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <HAL_TIM_PWM_Start+0x184>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00e      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x136>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a16      	ldr	r2, [pc, #88]	; (8008ac8 <HAL_TIM_PWM_Start+0x178>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d009      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x136>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <HAL_TIM_PWM_Start+0x188>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d004      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x136>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a16      	ldr	r2, [pc, #88]	; (8008adc <HAL_TIM_PWM_Start+0x18c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d111      	bne.n	8008aaa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	d010      	beq.n	8008aba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0201 	orr.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa8:	e007      	b.n	8008aba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f042 0201 	orr.w	r2, r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40010400 	.word	0x40010400
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	40000800 	.word	0x40000800
 8008ad4:	40000c00 	.word	0x40000c00
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40001800 	.word	0x40001800

08008ae0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e041      	b.n	8008b76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d106      	bne.n	8008b0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f839 	bl	8008b7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f000 ff6a 	bl	80099f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
	...

08008b94 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <HAL_TIM_IC_Start_DMA+0x22>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	e013      	b.n	8008bde <HAL_TIM_IC_Start_DMA+0x4a>
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d104      	bne.n	8008bc6 <HAL_TIM_IC_Start_DMA+0x32>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	e00b      	b.n	8008bde <HAL_TIM_IC_Start_DMA+0x4a>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d104      	bne.n	8008bd6 <HAL_TIM_IC_Start_DMA+0x42>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	e003      	b.n	8008bde <HAL_TIM_IC_Start_DMA+0x4a>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d104      	bne.n	8008bf0 <HAL_TIM_IC_Start_DMA+0x5c>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	e013      	b.n	8008c18 <HAL_TIM_IC_Start_DMA+0x84>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d104      	bne.n	8008c00 <HAL_TIM_IC_Start_DMA+0x6c>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e00b      	b.n	8008c18 <HAL_TIM_IC_Start_DMA+0x84>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d104      	bne.n	8008c10 <HAL_TIM_IC_Start_DMA+0x7c>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	e003      	b.n	8008c18 <HAL_TIM_IC_Start_DMA+0x84>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008c1a:	7dbb      	ldrb	r3, [r7, #22]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d002      	beq.n	8008c26 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008c20:	7d7b      	ldrb	r3, [r7, #21]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d101      	bne.n	8008c2a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8008c26:	2302      	movs	r3, #2
 8008c28:	e146      	b.n	8008eb8 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008c2a:	7dbb      	ldrb	r3, [r7, #22]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d143      	bne.n	8008cb8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008c30:	7d7b      	ldrb	r3, [r7, #21]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d140      	bne.n	8008cb8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d104      	bne.n	8008c46 <HAL_TIM_IC_Start_DMA+0xb2>
 8008c3c:	887b      	ldrh	r3, [r7, #2]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e138      	b.n	8008eb8 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <HAL_TIM_IC_Start_DMA+0xc2>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c54:	e013      	b.n	8008c7e <HAL_TIM_IC_Start_DMA+0xea>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d104      	bne.n	8008c66 <HAL_TIM_IC_Start_DMA+0xd2>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c64:	e00b      	b.n	8008c7e <HAL_TIM_IC_Start_DMA+0xea>
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d104      	bne.n	8008c76 <HAL_TIM_IC_Start_DMA+0xe2>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c74:	e003      	b.n	8008c7e <HAL_TIM_IC_Start_DMA+0xea>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <HAL_TIM_IC_Start_DMA+0xfa>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8008c8c:	e016      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d104      	bne.n	8008c9e <HAL_TIM_IC_Start_DMA+0x10a>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8008c9c:	e00e      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_IC_Start_DMA+0x11a>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8008cac:	e006      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008cb6:	e001      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0fd      	b.n	8008eb8 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 faab 	bl	800a220 <TIM_CCxChannelCmd>

  switch (Channel)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b0c      	cmp	r3, #12
 8008cce:	f200 80ad 	bhi.w	8008e2c <HAL_TIM_IC_Start_DMA+0x298>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <HAL_TIM_IC_Start_DMA+0x144>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008d0d 	.word	0x08008d0d
 8008cdc:	08008e2d 	.word	0x08008e2d
 8008ce0:	08008e2d 	.word	0x08008e2d
 8008ce4:	08008e2d 	.word	0x08008e2d
 8008ce8:	08008d55 	.word	0x08008d55
 8008cec:	08008e2d 	.word	0x08008e2d
 8008cf0:	08008e2d 	.word	0x08008e2d
 8008cf4:	08008e2d 	.word	0x08008e2d
 8008cf8:	08008d9d 	.word	0x08008d9d
 8008cfc:	08008e2d 	.word	0x08008e2d
 8008d00:	08008e2d 	.word	0x08008e2d
 8008d04:	08008e2d 	.word	0x08008e2d
 8008d08:	08008de5 	.word	0x08008de5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	4a6b      	ldr	r2, [pc, #428]	; (8008ec0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008d12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	4a6a      	ldr	r2, [pc, #424]	; (8008ec4 <HAL_TIM_IC_Start_DMA+0x330>)
 8008d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	4a69      	ldr	r2, [pc, #420]	; (8008ec8 <HAL_TIM_IC_Start_DMA+0x334>)
 8008d22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3334      	adds	r3, #52	; 0x34
 8008d2e:	4619      	mov	r1, r3
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	f7fd ff68 	bl	8006c08 <HAL_DMA_Start_IT>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e0ba      	b.n	8008eb8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d50:	60da      	str	r2, [r3, #12]
      break;
 8008d52:	e06e      	b.n	8008e32 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	4a59      	ldr	r2, [pc, #356]	; (8008ec0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	4a58      	ldr	r2, [pc, #352]	; (8008ec4 <HAL_TIM_IC_Start_DMA+0x330>)
 8008d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d68:	4a57      	ldr	r2, [pc, #348]	; (8008ec8 <HAL_TIM_IC_Start_DMA+0x334>)
 8008d6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3338      	adds	r3, #56	; 0x38
 8008d76:	4619      	mov	r1, r3
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	887b      	ldrh	r3, [r7, #2]
 8008d7c:	f7fd ff44 	bl	8006c08 <HAL_DMA_Start_IT>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e096      	b.n	8008eb8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d98:	60da      	str	r2, [r3, #12]
      break;
 8008d9a:	e04a      	b.n	8008e32 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	4a47      	ldr	r2, [pc, #284]	; (8008ec0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008da2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	4a46      	ldr	r2, [pc, #280]	; (8008ec4 <HAL_TIM_IC_Start_DMA+0x330>)
 8008daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	4a45      	ldr	r2, [pc, #276]	; (8008ec8 <HAL_TIM_IC_Start_DMA+0x334>)
 8008db2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	333c      	adds	r3, #60	; 0x3c
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	887b      	ldrh	r3, [r7, #2]
 8008dc4:	f7fd ff20 	bl	8006c08 <HAL_DMA_Start_IT>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e072      	b.n	8008eb8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008de0:	60da      	str	r2, [r3, #12]
      break;
 8008de2:	e026      	b.n	8008e32 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	4a35      	ldr	r2, [pc, #212]	; (8008ec0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008dea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df0:	4a34      	ldr	r2, [pc, #208]	; (8008ec4 <HAL_TIM_IC_Start_DMA+0x330>)
 8008df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df8:	4a33      	ldr	r2, [pc, #204]	; (8008ec8 <HAL_TIM_IC_Start_DMA+0x334>)
 8008dfa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3340      	adds	r3, #64	; 0x40
 8008e06:	4619      	mov	r1, r3
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	887b      	ldrh	r3, [r7, #2]
 8008e0c:	f7fd fefc 	bl	8006c08 <HAL_DMA_Start_IT>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e04e      	b.n	8008eb8 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e28:	60da      	str	r2, [r3, #12]
      break;
 8008e2a:	e002      	b.n	8008e32 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e30:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a25      	ldr	r2, [pc, #148]	; (8008ecc <HAL_TIM_IC_Start_DMA+0x338>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d022      	beq.n	8008e82 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e44:	d01d      	beq.n	8008e82 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a21      	ldr	r2, [pc, #132]	; (8008ed0 <HAL_TIM_IC_Start_DMA+0x33c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d018      	beq.n	8008e82 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a1f      	ldr	r2, [pc, #124]	; (8008ed4 <HAL_TIM_IC_Start_DMA+0x340>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d013      	beq.n	8008e82 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <HAL_TIM_IC_Start_DMA+0x344>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00e      	beq.n	8008e82 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a1c      	ldr	r2, [pc, #112]	; (8008edc <HAL_TIM_IC_Start_DMA+0x348>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d009      	beq.n	8008e82 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a1b      	ldr	r2, [pc, #108]	; (8008ee0 <HAL_TIM_IC_Start_DMA+0x34c>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d004      	beq.n	8008e82 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a19      	ldr	r2, [pc, #100]	; (8008ee4 <HAL_TIM_IC_Start_DMA+0x350>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d111      	bne.n	8008ea6 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b06      	cmp	r3, #6
 8008e92:	d010      	beq.n	8008eb6 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f042 0201 	orr.w	r2, r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea4:	e007      	b.n	8008eb6 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f042 0201 	orr.w	r2, r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	080098c9 	.word	0x080098c9
 8008ec4:	08009991 	.word	0x08009991
 8008ec8:	08009837 	.word	0x08009837
 8008ecc:	40010000 	.word	0x40010000
 8008ed0:	40000400 	.word	0x40000400
 8008ed4:	40000800 	.word	0x40000800
 8008ed8:	40000c00 	.word	0x40000c00
 8008edc:	40010400 	.word	0x40010400
 8008ee0:	40014000 	.word	0x40014000
 8008ee4:	40001800 	.word	0x40001800

08008ee8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e097      	b.n	800902c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d106      	bne.n	8008f16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7fc fb1f 	bl	8005554 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	6812      	ldr	r2, [r2, #0]
 8008f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f2c:	f023 0307 	bic.w	r3, r3, #7
 8008f30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f000 fd5b 	bl	80099f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008f88:	f023 030c 	bic.w	r3, r3, #12
 8008f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	021b      	lsls	r3, r3, #8
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	011a      	lsls	r2, r3, #4
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	031b      	lsls	r3, r3, #12
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008fce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009044:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800904c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009054:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800905c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d110      	bne.n	8009086 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d102      	bne.n	8009070 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800906a:	7b7b      	ldrb	r3, [r7, #13]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d001      	beq.n	8009074 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e069      	b.n	8009148 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009084:	e031      	b.n	80090ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d110      	bne.n	80090ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d102      	bne.n	8009098 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009092:	7b3b      	ldrb	r3, [r7, #12]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d001      	beq.n	800909c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e055      	b.n	8009148 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090ac:	e01d      	b.n	80090ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d108      	bne.n	80090c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d105      	bne.n	80090c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090ba:	7b7b      	ldrb	r3, [r7, #13]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d102      	bne.n	80090c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090c0:	7b3b      	ldrb	r3, [r7, #12]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d001      	beq.n	80090ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e03e      	b.n	8009148 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2202      	movs	r2, #2
 80090ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2202      	movs	r2, #2
 80090e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <HAL_TIM_Encoder_Start+0xc4>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d008      	beq.n	8009108 <HAL_TIM_Encoder_Start+0xd4>
 80090f6:	e00f      	b.n	8009118 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2201      	movs	r2, #1
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f001 f88d 	bl	800a220 <TIM_CCxChannelCmd>
      break;
 8009106:	e016      	b.n	8009136 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2201      	movs	r2, #1
 800910e:	2104      	movs	r1, #4
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f885 	bl	800a220 <TIM_CCxChannelCmd>
      break;
 8009116:	e00e      	b.n	8009136 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2201      	movs	r2, #1
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f001 f87d 	bl	800a220 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2201      	movs	r2, #1
 800912c:	2104      	movs	r1, #4
 800912e:	4618      	mov	r0, r3
 8009130:	f001 f876 	bl	800a220 <TIM_CCxChannelCmd>
      break;
 8009134:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0201 	orr.w	r2, r2, #1
 8009144:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b02      	cmp	r3, #2
 8009164:	d122      	bne.n	80091ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b02      	cmp	r3, #2
 8009172:	d11b      	bne.n	80091ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0202 	mvn.w	r2, #2
 800917c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb1d 	bl	80097d2 <HAL_TIM_IC_CaptureCallback>
 8009198:	e005      	b.n	80091a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fb0f 	bl	80097be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fb2a 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0304 	and.w	r3, r3, #4
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d122      	bne.n	8009200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d11b      	bne.n	8009200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0204 	mvn.w	r2, #4
 80091d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2202      	movs	r2, #2
 80091d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 faf3 	bl	80097d2 <HAL_TIM_IC_CaptureCallback>
 80091ec:	e005      	b.n	80091fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fae5 	bl	80097be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fb00 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0308 	and.w	r3, r3, #8
 800920a:	2b08      	cmp	r3, #8
 800920c:	d122      	bne.n	8009254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b08      	cmp	r3, #8
 800921a:	d11b      	bne.n	8009254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0208 	mvn.w	r2, #8
 8009224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2204      	movs	r2, #4
 800922a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fac9 	bl	80097d2 <HAL_TIM_IC_CaptureCallback>
 8009240:	e005      	b.n	800924e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fabb 	bl	80097be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fad6 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f003 0310 	and.w	r3, r3, #16
 800925e:	2b10      	cmp	r3, #16
 8009260:	d122      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	2b10      	cmp	r3, #16
 800926e:	d11b      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0210 	mvn.w	r2, #16
 8009278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2208      	movs	r2, #8
 800927e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa9f 	bl	80097d2 <HAL_TIM_IC_CaptureCallback>
 8009294:	e005      	b.n	80092a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa91 	bl	80097be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 faac 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d10e      	bne.n	80092d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d107      	bne.n	80092d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f06f 0201 	mvn.w	r2, #1
 80092cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa6b 	bl	80097aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092de:	2b80      	cmp	r3, #128	; 0x80
 80092e0:	d10e      	bne.n	8009300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b80      	cmp	r3, #128	; 0x80
 80092ee:	d107      	bne.n	8009300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f88e 	bl	800a41c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	d10e      	bne.n	800932c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b40      	cmp	r3, #64	; 0x40
 800931a:	d107      	bne.n	800932c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa71 	bl	800980e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b20      	cmp	r3, #32
 8009338:	d10e      	bne.n	8009358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f003 0320 	and.w	r3, r3, #32
 8009344:	2b20      	cmp	r3, #32
 8009346:	d107      	bne.n	8009358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0220 	mvn.w	r2, #32
 8009350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f858 	bl	800a408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <HAL_TIM_IC_ConfigChannel+0x1e>
 800937a:	2302      	movs	r3, #2
 800937c:	e088      	b.n	8009490 <HAL_TIM_IC_ConfigChannel+0x130>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d11b      	bne.n	80093c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	6819      	ldr	r1, [r3, #0]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f000 fd7c 	bl	8009e98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 020c 	bic.w	r2, r2, #12
 80093ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6999      	ldr	r1, [r3, #24]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	619a      	str	r2, [r3, #24]
 80093c2:	e060      	b.n	8009486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d11c      	bne.n	8009404 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6819      	ldr	r1, [r3, #0]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f000 fe00 	bl	8009fde <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	699a      	ldr	r2, [r3, #24]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80093ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6999      	ldr	r1, [r3, #24]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	021a      	lsls	r2, r3, #8
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	619a      	str	r2, [r3, #24]
 8009402:	e040      	b.n	8009486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b08      	cmp	r3, #8
 8009408:	d11b      	bne.n	8009442 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6819      	ldr	r1, [r3, #0]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f000 fe4d 	bl	800a0b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 020c 	bic.w	r2, r2, #12
 800942c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69d9      	ldr	r1, [r3, #28]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	689a      	ldr	r2, [r3, #8]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	61da      	str	r2, [r3, #28]
 8009440:	e021      	b.n	8009486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b0c      	cmp	r3, #12
 8009446:	d11c      	bne.n	8009482 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f000 fe6a 	bl	800a130 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69da      	ldr	r2, [r3, #28]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800946a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69d9      	ldr	r1, [r3, #28]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	021a      	lsls	r2, r3, #8
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	61da      	str	r2, [r3, #28]
 8009480:	e001      	b.n	8009486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e0ae      	b.n	8009614 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b0c      	cmp	r3, #12
 80094c2:	f200 809f 	bhi.w	8009604 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094c6:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	08009501 	.word	0x08009501
 80094d0:	08009605 	.word	0x08009605
 80094d4:	08009605 	.word	0x08009605
 80094d8:	08009605 	.word	0x08009605
 80094dc:	08009541 	.word	0x08009541
 80094e0:	08009605 	.word	0x08009605
 80094e4:	08009605 	.word	0x08009605
 80094e8:	08009605 	.word	0x08009605
 80094ec:	08009583 	.word	0x08009583
 80094f0:	08009605 	.word	0x08009605
 80094f4:	08009605 	.word	0x08009605
 80094f8:	08009605 	.word	0x08009605
 80094fc:	080095c3 	.word	0x080095c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 fb16 	bl	8009b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0208 	orr.w	r2, r2, #8
 800951a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 0204 	bic.w	r2, r2, #4
 800952a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6999      	ldr	r1, [r3, #24]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	691a      	ldr	r2, [r3, #16]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	619a      	str	r2, [r3, #24]
      break;
 800953e:	e064      	b.n	800960a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fb66 	bl	8009c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800955a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800956a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6999      	ldr	r1, [r3, #24]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	021a      	lsls	r2, r3, #8
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	619a      	str	r2, [r3, #24]
      break;
 8009580:	e043      	b.n	800960a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fbbb 	bl	8009d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69da      	ldr	r2, [r3, #28]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f042 0208 	orr.w	r2, r2, #8
 800959c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69da      	ldr	r2, [r3, #28]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0204 	bic.w	r2, r2, #4
 80095ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69d9      	ldr	r1, [r3, #28]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	691a      	ldr	r2, [r3, #16]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	61da      	str	r2, [r3, #28]
      break;
 80095c0:	e023      	b.n	800960a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fc0f 	bl	8009dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69da      	ldr	r2, [r3, #28]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69d9      	ldr	r1, [r3, #28]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	021a      	lsls	r2, r3, #8
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	61da      	str	r2, [r3, #28]
      break;
 8009602:	e002      	b.n	800960a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
      break;
 8009608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_TIM_ConfigClockSource+0x1c>
 8009634:	2302      	movs	r3, #2
 8009636:	e0b4      	b.n	80097a2 <HAL_TIM_ConfigClockSource+0x186>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800965e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009670:	d03e      	beq.n	80096f0 <HAL_TIM_ConfigClockSource+0xd4>
 8009672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009676:	f200 8087 	bhi.w	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 800967a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967e:	f000 8086 	beq.w	800978e <HAL_TIM_ConfigClockSource+0x172>
 8009682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009686:	d87f      	bhi.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 8009688:	2b70      	cmp	r3, #112	; 0x70
 800968a:	d01a      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0xa6>
 800968c:	2b70      	cmp	r3, #112	; 0x70
 800968e:	d87b      	bhi.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 8009690:	2b60      	cmp	r3, #96	; 0x60
 8009692:	d050      	beq.n	8009736 <HAL_TIM_ConfigClockSource+0x11a>
 8009694:	2b60      	cmp	r3, #96	; 0x60
 8009696:	d877      	bhi.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 8009698:	2b50      	cmp	r3, #80	; 0x50
 800969a:	d03c      	beq.n	8009716 <HAL_TIM_ConfigClockSource+0xfa>
 800969c:	2b50      	cmp	r3, #80	; 0x50
 800969e:	d873      	bhi.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 80096a0:	2b40      	cmp	r3, #64	; 0x40
 80096a2:	d058      	beq.n	8009756 <HAL_TIM_ConfigClockSource+0x13a>
 80096a4:	2b40      	cmp	r3, #64	; 0x40
 80096a6:	d86f      	bhi.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 80096a8:	2b30      	cmp	r3, #48	; 0x30
 80096aa:	d064      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x15a>
 80096ac:	2b30      	cmp	r3, #48	; 0x30
 80096ae:	d86b      	bhi.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	d060      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x15a>
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	d867      	bhi.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d05c      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x15a>
 80096bc:	2b10      	cmp	r3, #16
 80096be:	d05a      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0x15a>
 80096c0:	e062      	b.n	8009788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6899      	ldr	r1, [r3, #8]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f000 fd85 	bl	800a1e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	609a      	str	r2, [r3, #8]
      break;
 80096ee:	e04f      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	6899      	ldr	r1, [r3, #8]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f000 fd6e 	bl	800a1e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009712:	609a      	str	r2, [r3, #8]
      break;
 8009714:	e03c      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	6859      	ldr	r1, [r3, #4]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	461a      	mov	r2, r3
 8009724:	f000 fc2c 	bl	8009f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2150      	movs	r1, #80	; 0x50
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fd3b 	bl	800a1aa <TIM_ITRx_SetConfig>
      break;
 8009734:	e02c      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	6859      	ldr	r1, [r3, #4]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	461a      	mov	r2, r3
 8009744:	f000 fc88 	bl	800a058 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2160      	movs	r1, #96	; 0x60
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fd2b 	bl	800a1aa <TIM_ITRx_SetConfig>
      break;
 8009754:	e01c      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	6859      	ldr	r1, [r3, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	461a      	mov	r2, r3
 8009764:	f000 fc0c 	bl	8009f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2140      	movs	r1, #64	; 0x40
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fd1b 	bl	800a1aa <TIM_ITRx_SetConfig>
      break;
 8009774:	e00c      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f000 fd12 	bl	800a1aa <TIM_ITRx_SetConfig>
      break;
 8009786:	e003      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
      break;
 800978c:	e000      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800978e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80097b2:	bf00      	nop
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80097ee:	bf00      	nop
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	429a      	cmp	r2, r3
 800984c:	d107      	bne.n	800985e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2201      	movs	r2, #1
 8009852:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800985c:	e02a      	b.n	80098b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d107      	bne.n	8009878 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2202      	movs	r2, #2
 800986c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009876:	e01d      	b.n	80098b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	429a      	cmp	r2, r3
 8009880:	d107      	bne.n	8009892 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2204      	movs	r2, #4
 8009886:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009890:	e010      	b.n	80098b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	d107      	bne.n	80098ac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2208      	movs	r2, #8
 80098a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098aa:	e003      	b.n	80098b4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f7ff ffb4 	bl	8009822 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	771a      	strb	r2, [r3, #28]
}
 80098c0:	bf00      	nop
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d10f      	bne.n	8009900 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2201      	movs	r2, #1
 80098e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d146      	bne.n	800997c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098fe:	e03d      	b.n	800997c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d10f      	bne.n	800992a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2202      	movs	r2, #2
 800990e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d131      	bne.n	800997c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009928:	e028      	b.n	800997c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d10f      	bne.n	8009954 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2204      	movs	r2, #4
 8009938:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d11c      	bne.n	800997c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009952:	e013      	b.n	800997c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	429a      	cmp	r2, r3
 800995c:	d10e      	bne.n	800997c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2208      	movs	r2, #8
 8009962:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d107      	bne.n	800997c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff ff28 	bl	80097d2 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	771a      	strb	r2, [r3, #28]
}
 8009988:	bf00      	nop
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d103      	bne.n	80099b0 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	771a      	strb	r2, [r3, #28]
 80099ae:	e019      	b.n	80099e4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d103      	bne.n	80099c2 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2202      	movs	r2, #2
 80099be:	771a      	strb	r2, [r3, #28]
 80099c0:	e010      	b.n	80099e4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d103      	bne.n	80099d4 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2204      	movs	r2, #4
 80099d0:	771a      	strb	r2, [r3, #28]
 80099d2:	e007      	b.n	80099e4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d102      	bne.n	80099e4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2208      	movs	r2, #8
 80099e2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff fefe 	bl	80097e6 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	771a      	strb	r2, [r3, #28]
}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a40      	ldr	r2, [pc, #256]	; (8009b0c <TIM_Base_SetConfig+0x114>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d013      	beq.n	8009a38 <TIM_Base_SetConfig+0x40>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a16:	d00f      	beq.n	8009a38 <TIM_Base_SetConfig+0x40>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a3d      	ldr	r2, [pc, #244]	; (8009b10 <TIM_Base_SetConfig+0x118>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00b      	beq.n	8009a38 <TIM_Base_SetConfig+0x40>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a3c      	ldr	r2, [pc, #240]	; (8009b14 <TIM_Base_SetConfig+0x11c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d007      	beq.n	8009a38 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a3b      	ldr	r2, [pc, #236]	; (8009b18 <TIM_Base_SetConfig+0x120>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d003      	beq.n	8009a38 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a3a      	ldr	r2, [pc, #232]	; (8009b1c <TIM_Base_SetConfig+0x124>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d108      	bne.n	8009a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a2f      	ldr	r2, [pc, #188]	; (8009b0c <TIM_Base_SetConfig+0x114>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d02b      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a58:	d027      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a2c      	ldr	r2, [pc, #176]	; (8009b10 <TIM_Base_SetConfig+0x118>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d023      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a2b      	ldr	r2, [pc, #172]	; (8009b14 <TIM_Base_SetConfig+0x11c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01f      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a2a      	ldr	r2, [pc, #168]	; (8009b18 <TIM_Base_SetConfig+0x120>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01b      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a29      	ldr	r2, [pc, #164]	; (8009b1c <TIM_Base_SetConfig+0x124>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d017      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a28      	ldr	r2, [pc, #160]	; (8009b20 <TIM_Base_SetConfig+0x128>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a27      	ldr	r2, [pc, #156]	; (8009b24 <TIM_Base_SetConfig+0x12c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00f      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a26      	ldr	r2, [pc, #152]	; (8009b28 <TIM_Base_SetConfig+0x130>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a25      	ldr	r2, [pc, #148]	; (8009b2c <TIM_Base_SetConfig+0x134>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a24      	ldr	r2, [pc, #144]	; (8009b30 <TIM_Base_SetConfig+0x138>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_Base_SetConfig+0xb2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a23      	ldr	r2, [pc, #140]	; (8009b34 <TIM_Base_SetConfig+0x13c>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d108      	bne.n	8009abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a0a      	ldr	r2, [pc, #40]	; (8009b0c <TIM_Base_SetConfig+0x114>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d003      	beq.n	8009af0 <TIM_Base_SetConfig+0xf8>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a0c      	ldr	r2, [pc, #48]	; (8009b1c <TIM_Base_SetConfig+0x124>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d103      	bne.n	8009af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	691a      	ldr	r2, [r3, #16]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	615a      	str	r2, [r3, #20]
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	40010000 	.word	0x40010000
 8009b10:	40000400 	.word	0x40000400
 8009b14:	40000800 	.word	0x40000800
 8009b18:	40000c00 	.word	0x40000c00
 8009b1c:	40010400 	.word	0x40010400
 8009b20:	40014000 	.word	0x40014000
 8009b24:	40014400 	.word	0x40014400
 8009b28:	40014800 	.word	0x40014800
 8009b2c:	40001800 	.word	0x40001800
 8009b30:	40001c00 	.word	0x40001c00
 8009b34:	40002000 	.word	0x40002000

08009b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	f023 0201 	bic.w	r2, r3, #1
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 0303 	bic.w	r3, r3, #3
 8009b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f023 0302 	bic.w	r3, r3, #2
 8009b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a20      	ldr	r2, [pc, #128]	; (8009c10 <TIM_OC1_SetConfig+0xd8>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d003      	beq.n	8009b9c <TIM_OC1_SetConfig+0x64>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <TIM_OC1_SetConfig+0xdc>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d10c      	bne.n	8009bb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f023 0308 	bic.w	r3, r3, #8
 8009ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f023 0304 	bic.w	r3, r3, #4
 8009bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <TIM_OC1_SetConfig+0xd8>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d003      	beq.n	8009bc6 <TIM_OC1_SetConfig+0x8e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a14      	ldr	r2, [pc, #80]	; (8009c14 <TIM_OC1_SetConfig+0xdc>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d111      	bne.n	8009bea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	621a      	str	r2, [r3, #32]
}
 8009c04:	bf00      	nop
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400

08009c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f023 0210 	bic.w	r2, r3, #16
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f023 0320 	bic.w	r3, r3, #32
 8009c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a22      	ldr	r2, [pc, #136]	; (8009cfc <TIM_OC2_SetConfig+0xe4>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d003      	beq.n	8009c80 <TIM_OC2_SetConfig+0x68>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a21      	ldr	r2, [pc, #132]	; (8009d00 <TIM_OC2_SetConfig+0xe8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d10d      	bne.n	8009c9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	011b      	lsls	r3, r3, #4
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a17      	ldr	r2, [pc, #92]	; (8009cfc <TIM_OC2_SetConfig+0xe4>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_OC2_SetConfig+0x94>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a16      	ldr	r2, [pc, #88]	; (8009d00 <TIM_OC2_SetConfig+0xe8>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d113      	bne.n	8009cd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	621a      	str	r2, [r3, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40010400 	.word	0x40010400

08009d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0303 	bic.w	r3, r3, #3
 8009d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	021b      	lsls	r3, r3, #8
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a21      	ldr	r2, [pc, #132]	; (8009de4 <TIM_OC3_SetConfig+0xe0>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d003      	beq.n	8009d6a <TIM_OC3_SetConfig+0x66>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a20      	ldr	r2, [pc, #128]	; (8009de8 <TIM_OC3_SetConfig+0xe4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d10d      	bne.n	8009d86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	021b      	lsls	r3, r3, #8
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a16      	ldr	r2, [pc, #88]	; (8009de4 <TIM_OC3_SetConfig+0xe0>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d003      	beq.n	8009d96 <TIM_OC3_SetConfig+0x92>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a15      	ldr	r2, [pc, #84]	; (8009de8 <TIM_OC3_SetConfig+0xe4>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d113      	bne.n	8009dbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	011b      	lsls	r3, r3, #4
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	621a      	str	r2, [r3, #32]
}
 8009dd8:	bf00      	nop
 8009dda:	371c      	adds	r7, #28
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	40010000 	.word	0x40010000
 8009de8:	40010400 	.word	0x40010400

08009dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	031b      	lsls	r3, r3, #12
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a12      	ldr	r2, [pc, #72]	; (8009e90 <TIM_OC4_SetConfig+0xa4>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d003      	beq.n	8009e54 <TIM_OC4_SetConfig+0x68>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a11      	ldr	r2, [pc, #68]	; (8009e94 <TIM_OC4_SetConfig+0xa8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d109      	bne.n	8009e68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	019b      	lsls	r3, r3, #6
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	621a      	str	r2, [r3, #32]
}
 8009e82:	bf00      	nop
 8009e84:	371c      	adds	r7, #28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	40010000 	.word	0x40010000
 8009e94:	40010400 	.word	0x40010400

08009e98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	f023 0201 	bic.w	r2, r3, #1
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4a28      	ldr	r2, [pc, #160]	; (8009f64 <TIM_TI1_SetConfig+0xcc>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d01b      	beq.n	8009efe <TIM_TI1_SetConfig+0x66>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ecc:	d017      	beq.n	8009efe <TIM_TI1_SetConfig+0x66>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4a25      	ldr	r2, [pc, #148]	; (8009f68 <TIM_TI1_SetConfig+0xd0>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d013      	beq.n	8009efe <TIM_TI1_SetConfig+0x66>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4a24      	ldr	r2, [pc, #144]	; (8009f6c <TIM_TI1_SetConfig+0xd4>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00f      	beq.n	8009efe <TIM_TI1_SetConfig+0x66>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4a23      	ldr	r2, [pc, #140]	; (8009f70 <TIM_TI1_SetConfig+0xd8>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00b      	beq.n	8009efe <TIM_TI1_SetConfig+0x66>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4a22      	ldr	r2, [pc, #136]	; (8009f74 <TIM_TI1_SetConfig+0xdc>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d007      	beq.n	8009efe <TIM_TI1_SetConfig+0x66>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a21      	ldr	r2, [pc, #132]	; (8009f78 <TIM_TI1_SetConfig+0xe0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d003      	beq.n	8009efe <TIM_TI1_SetConfig+0x66>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4a20      	ldr	r2, [pc, #128]	; (8009f7c <TIM_TI1_SetConfig+0xe4>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d101      	bne.n	8009f02 <TIM_TI1_SetConfig+0x6a>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e000      	b.n	8009f04 <TIM_TI1_SetConfig+0x6c>
 8009f02:	2300      	movs	r3, #0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d008      	beq.n	8009f1a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f023 0303 	bic.w	r3, r3, #3
 8009f0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e003      	b.n	8009f22 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f043 0301 	orr.w	r3, r3, #1
 8009f20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	011b      	lsls	r3, r3, #4
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f023 030a 	bic.w	r3, r3, #10
 8009f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 030a 	and.w	r3, r3, #10
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	621a      	str	r2, [r3, #32]
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40000400 	.word	0x40000400
 8009f6c:	40000800 	.word	0x40000800
 8009f70:	40000c00 	.word	0x40000c00
 8009f74:	40010400 	.word	0x40010400
 8009f78:	40014000 	.word	0x40014000
 8009f7c:	40001800 	.word	0x40001800

08009f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	f023 0201 	bic.w	r2, r3, #1
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f023 030a 	bic.w	r3, r3, #10
 8009fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	621a      	str	r2, [r3, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b087      	sub	sp, #28
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	f023 0210 	bic.w	r2, r3, #16
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a00a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	4313      	orrs	r3, r2
 800a014:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a01c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	031b      	lsls	r3, r3, #12
 800a022:	b29b      	uxth	r3, r3
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	4313      	orrs	r3, r2
 800a028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a030:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	011b      	lsls	r3, r3, #4
 800a036:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	621a      	str	r2, [r3, #32]
}
 800a04c:	bf00      	nop
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	f023 0210 	bic.w	r2, r3, #16
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a082:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	031b      	lsls	r3, r3, #12
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a094:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	621a      	str	r2, [r3, #32]
}
 800a0ac:	bf00      	nop
 800a0ae:	371c      	adds	r7, #28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f023 0303 	bic.w	r3, r3, #3
 800a0e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a108:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	4313      	orrs	r3, r2
 800a116:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	621a      	str	r2, [r3, #32]
}
 800a124:	bf00      	nop
 800a126:	371c      	adds	r7, #28
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a15c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	021b      	lsls	r3, r3, #8
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	4313      	orrs	r3, r2
 800a166:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a16e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	031b      	lsls	r3, r3, #12
 800a174:	b29b      	uxth	r3, r3
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4313      	orrs	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a182:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	031b      	lsls	r3, r3, #12
 800a188:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	f043 0307 	orr.w	r3, r3, #7
 800a1cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	609a      	str	r2, [r3, #8]
}
 800a1d4:	bf00      	nop
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
 800a1ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	021a      	lsls	r2, r3, #8
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	431a      	orrs	r2, r3
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	4313      	orrs	r3, r2
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	609a      	str	r2, [r3, #8]
}
 800a214:	bf00      	nop
 800a216:	371c      	adds	r7, #28
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f003 031f 	and.w	r3, r3, #31
 800a232:	2201      	movs	r2, #1
 800a234:	fa02 f303 	lsl.w	r3, r2, r3
 800a238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a1a      	ldr	r2, [r3, #32]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	43db      	mvns	r3, r3
 800a242:	401a      	ands	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6a1a      	ldr	r2, [r3, #32]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f003 031f 	and.w	r3, r3, #31
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	fa01 f303 	lsl.w	r3, r1, r3
 800a258:	431a      	orrs	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
	...

0800a26c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d101      	bne.n	800a284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a280:	2302      	movs	r3, #2
 800a282:	e05a      	b.n	800a33a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a21      	ldr	r2, [pc, #132]	; (800a348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d022      	beq.n	800a30e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d0:	d01d      	beq.n	800a30e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a1d      	ldr	r2, [pc, #116]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d018      	beq.n	800a30e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a1b      	ldr	r2, [pc, #108]	; (800a350 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d013      	beq.n	800a30e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a1a      	ldr	r2, [pc, #104]	; (800a354 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d00e      	beq.n	800a30e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a18      	ldr	r2, [pc, #96]	; (800a358 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d009      	beq.n	800a30e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a17      	ldr	r2, [pc, #92]	; (800a35c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d004      	beq.n	800a30e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a15      	ldr	r2, [pc, #84]	; (800a360 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d10c      	bne.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	40010000 	.word	0x40010000
 800a34c:	40000400 	.word	0x40000400
 800a350:	40000800 	.word	0x40000800
 800a354:	40000c00 	.word	0x40000c00
 800a358:	40010400 	.word	0x40010400
 800a35c:	40014000 	.word	0x40014000
 800a360:	40001800 	.word	0x40001800

0800a364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d101      	bne.n	800a380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e03d      	b.n	800a3fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	4313      	orrs	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e03f      	b.n	800a4c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7fb f94a 	bl	80056f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2224      	movs	r2, #36	; 0x24
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68da      	ldr	r2, [r3, #12]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fe81 	bl	800b17c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691a      	ldr	r2, [r3, #16]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	695a      	ldr	r2, [r3, #20]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68da      	ldr	r2, [r3, #12]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b08a      	sub	sp, #40	; 0x28
 800a4ce:	af02      	add	r7, sp, #8
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	603b      	str	r3, [r7, #0]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b20      	cmp	r3, #32
 800a4e8:	d17c      	bne.n	800a5e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_UART_Transmit+0x2c>
 800a4f0:	88fb      	ldrh	r3, [r7, #6]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e075      	b.n	800a5e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_UART_Transmit+0x3e>
 800a504:	2302      	movs	r3, #2
 800a506:	e06e      	b.n	800a5e6 <HAL_UART_Transmit+0x11c>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2221      	movs	r2, #33	; 0x21
 800a51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a51e:	f7fb fbdb 	bl	8005cd8 <HAL_GetTick>
 800a522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	88fa      	ldrh	r2, [r7, #6]
 800a528:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	88fa      	ldrh	r2, [r7, #6]
 800a52e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a538:	d108      	bne.n	800a54c <HAL_UART_Transmit+0x82>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d104      	bne.n	800a54c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	61bb      	str	r3, [r7, #24]
 800a54a:	e003      	b.n	800a554 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a550:	2300      	movs	r3, #0
 800a552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a55c:	e02a      	b.n	800a5b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2200      	movs	r2, #0
 800a566:	2180      	movs	r1, #128	; 0x80
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fbc1 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e036      	b.n	800a5e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a58c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	3302      	adds	r3, #2
 800a592:	61bb      	str	r3, [r7, #24]
 800a594:	e007      	b.n	800a5a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	781a      	ldrb	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1cf      	bne.n	800a55e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2140      	movs	r1, #64	; 0x40
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f000 fb91 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e006      	b.n	800a5e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e000      	b.n	800a5e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a5e4:	2302      	movs	r3, #2
  }
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3720      	adds	r7, #32
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b08a      	sub	sp, #40	; 0x28
 800a5f2:	af02      	add	r7, sp, #8
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	603b      	str	r3, [r7, #0]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	f040 808c 	bne.w	800a728 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <HAL_UART_Receive+0x2e>
 800a616:	88fb      	ldrh	r3, [r7, #6]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e084      	b.n	800a72a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <HAL_UART_Receive+0x40>
 800a62a:	2302      	movs	r3, #2
 800a62c:	e07d      	b.n	800a72a <HAL_UART_Receive+0x13c>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2222      	movs	r2, #34	; 0x22
 800a640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a64a:	f7fb fb45 	bl	8005cd8 <HAL_GetTick>
 800a64e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	88fa      	ldrh	r2, [r7, #6]
 800a654:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	88fa      	ldrh	r2, [r7, #6]
 800a65a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a664:	d108      	bne.n	800a678 <HAL_UART_Receive+0x8a>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d104      	bne.n	800a678 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	61bb      	str	r3, [r7, #24]
 800a676:	e003      	b.n	800a680 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a688:	e043      	b.n	800a712 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2200      	movs	r2, #0
 800a692:	2120      	movs	r1, #32
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 fb2b 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e042      	b.n	800a72a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10c      	bne.n	800a6c4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	3302      	adds	r3, #2
 800a6c0:	61bb      	str	r3, [r7, #24]
 800a6c2:	e01f      	b.n	800a704 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6cc:	d007      	beq.n	800a6de <HAL_UART_Receive+0xf0>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <HAL_UART_Receive+0xfe>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	e008      	b.n	800a6fe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	3301      	adds	r3, #1
 800a702:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a716:	b29b      	uxth	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1b6      	bne.n	800a68a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2220      	movs	r2, #32
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	e000      	b.n	800a72a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a728:	2302      	movs	r3, #2
  }
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3720      	adds	r7, #32
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	4613      	mov	r3, r2
 800a73e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b20      	cmp	r3, #32
 800a74a:	d11d      	bne.n	800a788 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <HAL_UART_Receive_IT+0x26>
 800a752:	88fb      	ldrh	r3, [r7, #6]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e016      	b.n	800a78a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a762:	2b01      	cmp	r3, #1
 800a764:	d101      	bne.n	800a76a <HAL_UART_Receive_IT+0x38>
 800a766:	2302      	movs	r3, #2
 800a768:	e00f      	b.n	800a78a <HAL_UART_Receive_IT+0x58>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a778:	88fb      	ldrh	r3, [r7, #6]
 800a77a:	461a      	mov	r2, r3
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fb24 	bl	800adcc <UART_Start_Receive_IT>
 800a784:	4603      	mov	r3, r0
 800a786:	e000      	b.n	800a78a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a788:	2302      	movs	r3, #2
  }
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b0ba      	sub	sp, #232	; 0xe8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ca:	f003 030f 	and.w	r3, r3, #15
 800a7ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a7d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10f      	bne.n	800a7fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7de:	f003 0320 	and.w	r3, r3, #32
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <HAL_UART_IRQHandler+0x66>
 800a7e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ea:	f003 0320 	and.w	r3, r3, #32
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fc07 	bl	800b006 <UART_Receive_IT>
      return;
 800a7f8:	e256      	b.n	800aca8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 80de 	beq.w	800a9c0 <HAL_UART_IRQHandler+0x22c>
 800a804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d106      	bne.n	800a81e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a814:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 80d1 	beq.w	800a9c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00b      	beq.n	800a842 <HAL_UART_IRQHandler+0xae>
 800a82a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	f043 0201 	orr.w	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <HAL_UART_IRQHandler+0xd2>
 800a84e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	f043 0202 	orr.w	r2, r3, #2
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00b      	beq.n	800a88a <HAL_UART_IRQHandler+0xf6>
 800a872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d005      	beq.n	800a88a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	f043 0204 	orr.w	r2, r3, #4
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a88e:	f003 0308 	and.w	r3, r3, #8
 800a892:	2b00      	cmp	r3, #0
 800a894:	d011      	beq.n	800a8ba <HAL_UART_IRQHandler+0x126>
 800a896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d105      	bne.n	800a8ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d005      	beq.n	800a8ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	f043 0208 	orr.w	r2, r3, #8
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 81ed 	beq.w	800ac9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c8:	f003 0320 	and.w	r3, r3, #32
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d008      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x14e>
 800a8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d4:	f003 0320 	and.w	r3, r3, #32
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fb92 	bl	800b006 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ec:	2b40      	cmp	r3, #64	; 0x40
 800a8ee:	bf0c      	ite	eq
 800a8f0:	2301      	moveq	r3, #1
 800a8f2:	2300      	movne	r3, #0
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d103      	bne.n	800a90e <HAL_UART_IRQHandler+0x17a>
 800a906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d04f      	beq.n	800a9ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa9a 	bl	800ae48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91e:	2b40      	cmp	r3, #64	; 0x40
 800a920:	d141      	bne.n	800a9a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3314      	adds	r3, #20
 800a928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a930:	e853 3f00 	ldrex	r3, [r3]
 800a934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a93c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3314      	adds	r3, #20
 800a94a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a94e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a95a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a95e:	e841 2300 	strex	r3, r2, [r1]
 800a962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1d9      	bne.n	800a922 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a972:	2b00      	cmp	r3, #0
 800a974:	d013      	beq.n	800a99e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	4a7d      	ldr	r2, [pc, #500]	; (800ab70 <HAL_UART_IRQHandler+0x3dc>)
 800a97c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	4618      	mov	r0, r3
 800a984:	f7fc fa08 	bl	8006d98 <HAL_DMA_Abort_IT>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d016      	beq.n	800a9bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99c:	e00e      	b.n	800a9bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f990 	bl	800acc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a4:	e00a      	b.n	800a9bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f98c 	bl	800acc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ac:	e006      	b.n	800a9bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f988 	bl	800acc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a9ba:	e170      	b.n	800ac9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9bc:	bf00      	nop
    return;
 800a9be:	e16e      	b.n	800ac9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	f040 814a 	bne.w	800ac5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ce:	f003 0310 	and.w	r3, r3, #16
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 8143 	beq.w	800ac5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 813c 	beq.w	800ac5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60bb      	str	r3, [r7, #8]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60bb      	str	r3, [r7, #8]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	60bb      	str	r3, [r7, #8]
 800a9fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa06:	2b40      	cmp	r3, #64	; 0x40
 800aa08:	f040 80b4 	bne.w	800ab74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8140 	beq.w	800aca2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	f080 8139 	bcs.w	800aca2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa42:	f000 8088 	beq.w	800ab56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	330c      	adds	r3, #12
 800aa4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa54:	e853 3f00 	ldrex	r3, [r3]
 800aa58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	330c      	adds	r3, #12
 800aa6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1d9      	bne.n	800aa46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3314      	adds	r3, #20
 800aa98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aaa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaa4:	f023 0301 	bic.w	r3, r3, #1
 800aaa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3314      	adds	r3, #20
 800aab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aab6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aaba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aabe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e1      	bne.n	800aa92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3314      	adds	r3, #20
 800aad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3314      	adds	r3, #20
 800aaee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aaf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aaf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aaf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e3      	bne.n	800aace <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2220      	movs	r2, #32
 800ab0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab26:	f023 0310 	bic.w	r3, r3, #16
 800ab2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	330c      	adds	r3, #12
 800ab34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab38:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e3      	bne.n	800ab14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fc f8b1 	bl	8006cb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f8b6 	bl	800acd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab6c:	e099      	b.n	800aca2 <HAL_UART_IRQHandler+0x50e>
 800ab6e:	bf00      	nop
 800ab70:	0800af0f 	.word	0x0800af0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 808b 	beq.w	800aca6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ab90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 8086 	beq.w	800aca6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	330c      	adds	r3, #12
 800aba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	330c      	adds	r3, #12
 800abba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800abbe:	647a      	str	r2, [r7, #68]	; 0x44
 800abc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e3      	bne.n	800ab9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3314      	adds	r3, #20
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	623b      	str	r3, [r7, #32]
   return(result);
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	f023 0301 	bic.w	r3, r3, #1
 800abe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3314      	adds	r3, #20
 800abf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abf6:	633a      	str	r2, [r7, #48]	; 0x30
 800abf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfe:	e841 2300 	strex	r3, r2, [r1]
 800ac02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e3      	bne.n	800abd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 0310 	bic.w	r3, r3, #16
 800ac2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	330c      	adds	r3, #12
 800ac38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac3c:	61fa      	str	r2, [r7, #28]
 800ac3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac40:	69b9      	ldr	r1, [r7, #24]
 800ac42:	69fa      	ldr	r2, [r7, #28]
 800ac44:	e841 2300 	strex	r3, r2, [r1]
 800ac48:	617b      	str	r3, [r7, #20]
   return(result);
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1e3      	bne.n	800ac18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f83e 	bl	800acd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac5c:	e023      	b.n	800aca6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d009      	beq.n	800ac7e <HAL_UART_IRQHandler+0x4ea>
 800ac6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f95d 	bl	800af36 <UART_Transmit_IT>
    return;
 800ac7c:	e014      	b.n	800aca8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00e      	beq.n	800aca8 <HAL_UART_IRQHandler+0x514>
 800ac8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d008      	beq.n	800aca8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f99d 	bl	800afd6 <UART_EndTransmit_IT>
    return;
 800ac9c:	e004      	b.n	800aca8 <HAL_UART_IRQHandler+0x514>
    return;
 800ac9e:	bf00      	nop
 800aca0:	e002      	b.n	800aca8 <HAL_UART_IRQHandler+0x514>
      return;
 800aca2:	bf00      	nop
 800aca4:	e000      	b.n	800aca8 <HAL_UART_IRQHandler+0x514>
      return;
 800aca6:	bf00      	nop
  }
}
 800aca8:	37e8      	adds	r7, #232	; 0xe8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop

0800acb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b090      	sub	sp, #64	; 0x40
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad00:	e050      	b.n	800ada4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad08:	d04c      	beq.n	800ada4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ad0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d007      	beq.n	800ad20 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad10:	f7fa ffe2 	bl	8005cd8 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d241      	bcs.n	800ada4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	330c      	adds	r3, #12
 800ad26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	e853 3f00 	ldrex	r3, [r3]
 800ad2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	330c      	adds	r3, #12
 800ad3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad40:	637a      	str	r2, [r7, #52]	; 0x34
 800ad42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad48:	e841 2300 	strex	r3, r2, [r1]
 800ad4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e5      	bne.n	800ad20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3314      	adds	r3, #20
 800ad5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	e853 3f00 	ldrex	r3, [r3]
 800ad62:	613b      	str	r3, [r7, #16]
   return(result);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	f023 0301 	bic.w	r3, r3, #1
 800ad6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3314      	adds	r3, #20
 800ad72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad74:	623a      	str	r2, [r7, #32]
 800ad76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad78:	69f9      	ldr	r1, [r7, #28]
 800ad7a:	6a3a      	ldr	r2, [r7, #32]
 800ad7c:	e841 2300 	strex	r3, r2, [r1]
 800ad80:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1e5      	bne.n	800ad54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2220      	movs	r2, #32
 800ad8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e00f      	b.n	800adc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	4013      	ands	r3, r2
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	bf0c      	ite	eq
 800adb4:	2301      	moveq	r3, #1
 800adb6:	2300      	movne	r3, #0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	461a      	mov	r2, r3
 800adbc:	79fb      	ldrb	r3, [r7, #7]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d09f      	beq.n	800ad02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3740      	adds	r7, #64	; 0x40
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	4613      	mov	r3, r2
 800add8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	88fa      	ldrh	r2, [r7, #6]
 800ade4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	88fa      	ldrh	r2, [r7, #6]
 800adea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2222      	movs	r2, #34	; 0x22
 800adf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	695a      	ldr	r2, [r3, #20]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f042 0201 	orr.w	r2, r2, #1
 800ae28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f042 0220 	orr.w	r2, r2, #32
 800ae38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b095      	sub	sp, #84	; 0x54
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	330c      	adds	r3, #12
 800ae56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5a:	e853 3f00 	ldrex	r3, [r3]
 800ae5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae70:	643a      	str	r2, [r7, #64]	; 0x40
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae78:	e841 2300 	strex	r3, r2, [r1]
 800ae7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1e5      	bne.n	800ae50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3314      	adds	r3, #20
 800ae8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	e853 3f00 	ldrex	r3, [r3]
 800ae92:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	f023 0301 	bic.w	r3, r3, #1
 800ae9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3314      	adds	r3, #20
 800aea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeac:	e841 2300 	strex	r3, r2, [r1]
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e5      	bne.n	800ae84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d119      	bne.n	800aef4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	330c      	adds	r3, #12
 800aec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	60bb      	str	r3, [r7, #8]
   return(result);
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	f023 0310 	bic.w	r3, r3, #16
 800aed6:	647b      	str	r3, [r7, #68]	; 0x44
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	330c      	adds	r3, #12
 800aede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee0:	61ba      	str	r2, [r7, #24]
 800aee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee4:	6979      	ldr	r1, [r7, #20]
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	e841 2300 	strex	r3, r2, [r1]
 800aeec:	613b      	str	r3, [r7, #16]
   return(result);
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1e5      	bne.n	800aec0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	631a      	str	r2, [r3, #48]	; 0x30
}
 800af02:	bf00      	nop
 800af04:	3754      	adds	r7, #84	; 0x54
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7ff fecb 	bl	800acc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af2e:	bf00      	nop
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af36:	b480      	push	{r7}
 800af38:	b085      	sub	sp, #20
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b21      	cmp	r3, #33	; 0x21
 800af48:	d13e      	bne.n	800afc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af52:	d114      	bne.n	800af7e <UART_Transmit_IT+0x48>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d110      	bne.n	800af7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	1c9a      	adds	r2, r3, #2
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	621a      	str	r2, [r3, #32]
 800af7c:	e008      	b.n	800af90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	1c59      	adds	r1, r3, #1
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	6211      	str	r1, [r2, #32]
 800af88:	781a      	ldrb	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af94:	b29b      	uxth	r3, r3
 800af96:	3b01      	subs	r3, #1
 800af98:	b29b      	uxth	r3, r3
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	4619      	mov	r1, r3
 800af9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10f      	bne.n	800afc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e000      	b.n	800afca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afc8:	2302      	movs	r3, #2
  }
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b082      	sub	sp, #8
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff fe5a 	bl	800acb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b08c      	sub	sp, #48	; 0x30
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b22      	cmp	r3, #34	; 0x22
 800b018:	f040 80ab 	bne.w	800b172 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b024:	d117      	bne.n	800b056 <UART_Receive_IT+0x50>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d113      	bne.n	800b056 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b02e:	2300      	movs	r3, #0
 800b030:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b044:	b29a      	uxth	r2, r3
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04e:	1c9a      	adds	r2, r3, #2
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	629a      	str	r2, [r3, #40]	; 0x28
 800b054:	e026      	b.n	800b0a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b068:	d007      	beq.n	800b07a <UART_Receive_IT+0x74>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <UART_Receive_IT+0x82>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	e008      	b.n	800b09a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b094:	b2da      	uxtb	r2, r3
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d15a      	bne.n	800b16e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0220 	bic.w	r2, r2, #32
 800b0c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68da      	ldr	r2, [r3, #12]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	695a      	ldr	r2, [r3, #20]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 0201 	bic.w	r2, r2, #1
 800b0e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d135      	bne.n	800b164 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	330c      	adds	r3, #12
 800b104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	613b      	str	r3, [r7, #16]
   return(result);
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	f023 0310 	bic.w	r3, r3, #16
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	330c      	adds	r3, #12
 800b11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11e:	623a      	str	r2, [r7, #32]
 800b120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	69f9      	ldr	r1, [r7, #28]
 800b124:	6a3a      	ldr	r2, [r7, #32]
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e5      	bne.n	800b0fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b10      	cmp	r3, #16
 800b13e:	d10a      	bne.n	800b156 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b140:	2300      	movs	r3, #0
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff fdbb 	bl	800acd8 <HAL_UARTEx_RxEventCallback>
 800b162:	e002      	b.n	800b16a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7f9 ff83 	bl	8005070 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	e002      	b.n	800b174 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	e000      	b.n	800b174 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b172:	2302      	movs	r3, #2
  }
}
 800b174:	4618      	mov	r0, r3
 800b176:	3730      	adds	r7, #48	; 0x30
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b17c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b180:	b0c0      	sub	sp, #256	; 0x100
 800b182:	af00      	add	r7, sp, #0
 800b184:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b198:	68d9      	ldr	r1, [r3, #12]
 800b19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	ea40 0301 	orr.w	r3, r0, r1
 800b1a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1aa:	689a      	ldr	r2, [r3, #8]
 800b1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b1d4:	f021 010c 	bic.w	r1, r1, #12
 800b1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1e2:	430b      	orrs	r3, r1
 800b1e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b1f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f6:	6999      	ldr	r1, [r3, #24]
 800b1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	ea40 0301 	orr.w	r3, r0, r1
 800b202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	4b8f      	ldr	r3, [pc, #572]	; (800b448 <UART_SetConfig+0x2cc>)
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d005      	beq.n	800b21c <UART_SetConfig+0xa0>
 800b210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	4b8d      	ldr	r3, [pc, #564]	; (800b44c <UART_SetConfig+0x2d0>)
 800b218:	429a      	cmp	r2, r3
 800b21a:	d104      	bne.n	800b226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b21c:	f7fc fda4 	bl	8007d68 <HAL_RCC_GetPCLK2Freq>
 800b220:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b224:	e003      	b.n	800b22e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b226:	f7fc fd8b 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
 800b22a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b238:	f040 810c 	bne.w	800b454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b23c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b240:	2200      	movs	r2, #0
 800b242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b246:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b24a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b24e:	4622      	mov	r2, r4
 800b250:	462b      	mov	r3, r5
 800b252:	1891      	adds	r1, r2, r2
 800b254:	65b9      	str	r1, [r7, #88]	; 0x58
 800b256:	415b      	adcs	r3, r3
 800b258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b25a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b25e:	4621      	mov	r1, r4
 800b260:	eb12 0801 	adds.w	r8, r2, r1
 800b264:	4629      	mov	r1, r5
 800b266:	eb43 0901 	adc.w	r9, r3, r1
 800b26a:	f04f 0200 	mov.w	r2, #0
 800b26e:	f04f 0300 	mov.w	r3, #0
 800b272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b27a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b27e:	4690      	mov	r8, r2
 800b280:	4699      	mov	r9, r3
 800b282:	4623      	mov	r3, r4
 800b284:	eb18 0303 	adds.w	r3, r8, r3
 800b288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b28c:	462b      	mov	r3, r5
 800b28e:	eb49 0303 	adc.w	r3, r9, r3
 800b292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b2a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	18db      	adds	r3, r3, r3
 800b2ae:	653b      	str	r3, [r7, #80]	; 0x50
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	eb42 0303 	adc.w	r3, r2, r3
 800b2b6:	657b      	str	r3, [r7, #84]	; 0x54
 800b2b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b2bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b2c0:	f7f5 fce2 	bl	8000c88 <__aeabi_uldivmod>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4b61      	ldr	r3, [pc, #388]	; (800b450 <UART_SetConfig+0x2d4>)
 800b2ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b2ce:	095b      	lsrs	r3, r3, #5
 800b2d0:	011c      	lsls	r4, r3, #4
 800b2d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b2e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	1891      	adds	r1, r2, r2
 800b2ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800b2ec:	415b      	adcs	r3, r3
 800b2ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b2f4:	4641      	mov	r1, r8
 800b2f6:	eb12 0a01 	adds.w	sl, r2, r1
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	eb43 0b01 	adc.w	fp, r3, r1
 800b300:	f04f 0200 	mov.w	r2, #0
 800b304:	f04f 0300 	mov.w	r3, #0
 800b308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b30c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b314:	4692      	mov	sl, r2
 800b316:	469b      	mov	fp, r3
 800b318:	4643      	mov	r3, r8
 800b31a:	eb1a 0303 	adds.w	r3, sl, r3
 800b31e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b322:	464b      	mov	r3, r9
 800b324:	eb4b 0303 	adc.w	r3, fp, r3
 800b328:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b338:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b33c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b340:	460b      	mov	r3, r1
 800b342:	18db      	adds	r3, r3, r3
 800b344:	643b      	str	r3, [r7, #64]	; 0x40
 800b346:	4613      	mov	r3, r2
 800b348:	eb42 0303 	adc.w	r3, r2, r3
 800b34c:	647b      	str	r3, [r7, #68]	; 0x44
 800b34e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b356:	f7f5 fc97 	bl	8000c88 <__aeabi_uldivmod>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	4611      	mov	r1, r2
 800b360:	4b3b      	ldr	r3, [pc, #236]	; (800b450 <UART_SetConfig+0x2d4>)
 800b362:	fba3 2301 	umull	r2, r3, r3, r1
 800b366:	095b      	lsrs	r3, r3, #5
 800b368:	2264      	movs	r2, #100	; 0x64
 800b36a:	fb02 f303 	mul.w	r3, r2, r3
 800b36e:	1acb      	subs	r3, r1, r3
 800b370:	00db      	lsls	r3, r3, #3
 800b372:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b376:	4b36      	ldr	r3, [pc, #216]	; (800b450 <UART_SetConfig+0x2d4>)
 800b378:	fba3 2302 	umull	r2, r3, r3, r2
 800b37c:	095b      	lsrs	r3, r3, #5
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b384:	441c      	add	r4, r3
 800b386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b38a:	2200      	movs	r2, #0
 800b38c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b390:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b398:	4642      	mov	r2, r8
 800b39a:	464b      	mov	r3, r9
 800b39c:	1891      	adds	r1, r2, r2
 800b39e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3a0:	415b      	adcs	r3, r3
 800b3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3a8:	4641      	mov	r1, r8
 800b3aa:	1851      	adds	r1, r2, r1
 800b3ac:	6339      	str	r1, [r7, #48]	; 0x30
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	414b      	adcs	r3, r1
 800b3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3b4:	f04f 0200 	mov.w	r2, #0
 800b3b8:	f04f 0300 	mov.w	r3, #0
 800b3bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b3c0:	4659      	mov	r1, fp
 800b3c2:	00cb      	lsls	r3, r1, #3
 800b3c4:	4651      	mov	r1, sl
 800b3c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3ca:	4651      	mov	r1, sl
 800b3cc:	00ca      	lsls	r2, r1, #3
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	4642      	mov	r2, r8
 800b3d6:	189b      	adds	r3, r3, r2
 800b3d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3dc:	464b      	mov	r3, r9
 800b3de:	460a      	mov	r2, r1
 800b3e0:	eb42 0303 	adc.w	r3, r2, r3
 800b3e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b3f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	18db      	adds	r3, r3, r3
 800b400:	62bb      	str	r3, [r7, #40]	; 0x28
 800b402:	4613      	mov	r3, r2
 800b404:	eb42 0303 	adc.w	r3, r2, r3
 800b408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b40a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b40e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b412:	f7f5 fc39 	bl	8000c88 <__aeabi_uldivmod>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <UART_SetConfig+0x2d4>)
 800b41c:	fba3 1302 	umull	r1, r3, r3, r2
 800b420:	095b      	lsrs	r3, r3, #5
 800b422:	2164      	movs	r1, #100	; 0x64
 800b424:	fb01 f303 	mul.w	r3, r1, r3
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	00db      	lsls	r3, r3, #3
 800b42c:	3332      	adds	r3, #50	; 0x32
 800b42e:	4a08      	ldr	r2, [pc, #32]	; (800b450 <UART_SetConfig+0x2d4>)
 800b430:	fba2 2303 	umull	r2, r3, r2, r3
 800b434:	095b      	lsrs	r3, r3, #5
 800b436:	f003 0207 	and.w	r2, r3, #7
 800b43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4422      	add	r2, r4
 800b442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b444:	e105      	b.n	800b652 <UART_SetConfig+0x4d6>
 800b446:	bf00      	nop
 800b448:	40011000 	.word	0x40011000
 800b44c:	40011400 	.word	0x40011400
 800b450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b458:	2200      	movs	r2, #0
 800b45a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b45e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b466:	4642      	mov	r2, r8
 800b468:	464b      	mov	r3, r9
 800b46a:	1891      	adds	r1, r2, r2
 800b46c:	6239      	str	r1, [r7, #32]
 800b46e:	415b      	adcs	r3, r3
 800b470:	627b      	str	r3, [r7, #36]	; 0x24
 800b472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b476:	4641      	mov	r1, r8
 800b478:	1854      	adds	r4, r2, r1
 800b47a:	4649      	mov	r1, r9
 800b47c:	eb43 0501 	adc.w	r5, r3, r1
 800b480:	f04f 0200 	mov.w	r2, #0
 800b484:	f04f 0300 	mov.w	r3, #0
 800b488:	00eb      	lsls	r3, r5, #3
 800b48a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b48e:	00e2      	lsls	r2, r4, #3
 800b490:	4614      	mov	r4, r2
 800b492:	461d      	mov	r5, r3
 800b494:	4643      	mov	r3, r8
 800b496:	18e3      	adds	r3, r4, r3
 800b498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b49c:	464b      	mov	r3, r9
 800b49e:	eb45 0303 	adc.w	r3, r5, r3
 800b4a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4b6:	f04f 0200 	mov.w	r2, #0
 800b4ba:	f04f 0300 	mov.w	r3, #0
 800b4be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	008b      	lsls	r3, r1, #2
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	008a      	lsls	r2, r1, #2
 800b4d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4d4:	f7f5 fbd8 	bl	8000c88 <__aeabi_uldivmod>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4b60      	ldr	r3, [pc, #384]	; (800b660 <UART_SetConfig+0x4e4>)
 800b4de:	fba3 2302 	umull	r2, r3, r3, r2
 800b4e2:	095b      	lsrs	r3, r3, #5
 800b4e4:	011c      	lsls	r4, r3, #4
 800b4e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b4f8:	4642      	mov	r2, r8
 800b4fa:	464b      	mov	r3, r9
 800b4fc:	1891      	adds	r1, r2, r2
 800b4fe:	61b9      	str	r1, [r7, #24]
 800b500:	415b      	adcs	r3, r3
 800b502:	61fb      	str	r3, [r7, #28]
 800b504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b508:	4641      	mov	r1, r8
 800b50a:	1851      	adds	r1, r2, r1
 800b50c:	6139      	str	r1, [r7, #16]
 800b50e:	4649      	mov	r1, r9
 800b510:	414b      	adcs	r3, r1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	f04f 0200 	mov.w	r2, #0
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b520:	4659      	mov	r1, fp
 800b522:	00cb      	lsls	r3, r1, #3
 800b524:	4651      	mov	r1, sl
 800b526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b52a:	4651      	mov	r1, sl
 800b52c:	00ca      	lsls	r2, r1, #3
 800b52e:	4610      	mov	r0, r2
 800b530:	4619      	mov	r1, r3
 800b532:	4603      	mov	r3, r0
 800b534:	4642      	mov	r2, r8
 800b536:	189b      	adds	r3, r3, r2
 800b538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b53c:	464b      	mov	r3, r9
 800b53e:	460a      	mov	r2, r1
 800b540:	eb42 0303 	adc.w	r3, r2, r3
 800b544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	67bb      	str	r3, [r7, #120]	; 0x78
 800b552:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b554:	f04f 0200 	mov.w	r2, #0
 800b558:	f04f 0300 	mov.w	r3, #0
 800b55c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b560:	4649      	mov	r1, r9
 800b562:	008b      	lsls	r3, r1, #2
 800b564:	4641      	mov	r1, r8
 800b566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b56a:	4641      	mov	r1, r8
 800b56c:	008a      	lsls	r2, r1, #2
 800b56e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b572:	f7f5 fb89 	bl	8000c88 <__aeabi_uldivmod>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4b39      	ldr	r3, [pc, #228]	; (800b660 <UART_SetConfig+0x4e4>)
 800b57c:	fba3 1302 	umull	r1, r3, r3, r2
 800b580:	095b      	lsrs	r3, r3, #5
 800b582:	2164      	movs	r1, #100	; 0x64
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	3332      	adds	r3, #50	; 0x32
 800b58e:	4a34      	ldr	r2, [pc, #208]	; (800b660 <UART_SetConfig+0x4e4>)
 800b590:	fba2 2303 	umull	r2, r3, r2, r3
 800b594:	095b      	lsrs	r3, r3, #5
 800b596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b59a:	441c      	add	r4, r3
 800b59c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	673b      	str	r3, [r7, #112]	; 0x70
 800b5a4:	677a      	str	r2, [r7, #116]	; 0x74
 800b5a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b5aa:	4642      	mov	r2, r8
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	1891      	adds	r1, r2, r2
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	415b      	adcs	r3, r3
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5ba:	4641      	mov	r1, r8
 800b5bc:	1851      	adds	r1, r2, r1
 800b5be:	6039      	str	r1, [r7, #0]
 800b5c0:	4649      	mov	r1, r9
 800b5c2:	414b      	adcs	r3, r1
 800b5c4:	607b      	str	r3, [r7, #4]
 800b5c6:	f04f 0200 	mov.w	r2, #0
 800b5ca:	f04f 0300 	mov.w	r3, #0
 800b5ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5d2:	4659      	mov	r1, fp
 800b5d4:	00cb      	lsls	r3, r1, #3
 800b5d6:	4651      	mov	r1, sl
 800b5d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5dc:	4651      	mov	r1, sl
 800b5de:	00ca      	lsls	r2, r1, #3
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4642      	mov	r2, r8
 800b5e8:	189b      	adds	r3, r3, r2
 800b5ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5ec:	464b      	mov	r3, r9
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	eb42 0303 	adc.w	r3, r2, r3
 800b5f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b600:	667a      	str	r2, [r7, #100]	; 0x64
 800b602:	f04f 0200 	mov.w	r2, #0
 800b606:	f04f 0300 	mov.w	r3, #0
 800b60a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b60e:	4649      	mov	r1, r9
 800b610:	008b      	lsls	r3, r1, #2
 800b612:	4641      	mov	r1, r8
 800b614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b618:	4641      	mov	r1, r8
 800b61a:	008a      	lsls	r2, r1, #2
 800b61c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b620:	f7f5 fb32 	bl	8000c88 <__aeabi_uldivmod>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <UART_SetConfig+0x4e4>)
 800b62a:	fba3 1302 	umull	r1, r3, r3, r2
 800b62e:	095b      	lsrs	r3, r3, #5
 800b630:	2164      	movs	r1, #100	; 0x64
 800b632:	fb01 f303 	mul.w	r3, r1, r3
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	3332      	adds	r3, #50	; 0x32
 800b63c:	4a08      	ldr	r2, [pc, #32]	; (800b660 <UART_SetConfig+0x4e4>)
 800b63e:	fba2 2303 	umull	r2, r3, r2, r3
 800b642:	095b      	lsrs	r3, r3, #5
 800b644:	f003 020f 	and.w	r2, r3, #15
 800b648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4422      	add	r2, r4
 800b650:	609a      	str	r2, [r3, #8]
}
 800b652:	bf00      	nop
 800b654:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b658:	46bd      	mov	sp, r7
 800b65a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b65e:	bf00      	nop
 800b660:	51eb851f 	.word	0x51eb851f

0800b664 <__errno>:
 800b664:	4b01      	ldr	r3, [pc, #4]	; (800b66c <__errno+0x8>)
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	20000084 	.word	0x20000084

0800b670 <__libc_init_array>:
 800b670:	b570      	push	{r4, r5, r6, lr}
 800b672:	4d0d      	ldr	r5, [pc, #52]	; (800b6a8 <__libc_init_array+0x38>)
 800b674:	4c0d      	ldr	r4, [pc, #52]	; (800b6ac <__libc_init_array+0x3c>)
 800b676:	1b64      	subs	r4, r4, r5
 800b678:	10a4      	asrs	r4, r4, #2
 800b67a:	2600      	movs	r6, #0
 800b67c:	42a6      	cmp	r6, r4
 800b67e:	d109      	bne.n	800b694 <__libc_init_array+0x24>
 800b680:	4d0b      	ldr	r5, [pc, #44]	; (800b6b0 <__libc_init_array+0x40>)
 800b682:	4c0c      	ldr	r4, [pc, #48]	; (800b6b4 <__libc_init_array+0x44>)
 800b684:	f004 f952 	bl	800f92c <_init>
 800b688:	1b64      	subs	r4, r4, r5
 800b68a:	10a4      	asrs	r4, r4, #2
 800b68c:	2600      	movs	r6, #0
 800b68e:	42a6      	cmp	r6, r4
 800b690:	d105      	bne.n	800b69e <__libc_init_array+0x2e>
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	f855 3b04 	ldr.w	r3, [r5], #4
 800b698:	4798      	blx	r3
 800b69a:	3601      	adds	r6, #1
 800b69c:	e7ee      	b.n	800b67c <__libc_init_array+0xc>
 800b69e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a2:	4798      	blx	r3
 800b6a4:	3601      	adds	r6, #1
 800b6a6:	e7f2      	b.n	800b68e <__libc_init_array+0x1e>
 800b6a8:	080100a0 	.word	0x080100a0
 800b6ac:	080100a0 	.word	0x080100a0
 800b6b0:	080100a0 	.word	0x080100a0
 800b6b4:	080100a4 	.word	0x080100a4

0800b6b8 <memset>:
 800b6b8:	4402      	add	r2, r0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d100      	bne.n	800b6c2 <memset+0xa>
 800b6c0:	4770      	bx	lr
 800b6c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6c6:	e7f9      	b.n	800b6bc <memset+0x4>

0800b6c8 <__cvt>:
 800b6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	ec55 4b10 	vmov	r4, r5, d0
 800b6d0:	2d00      	cmp	r5, #0
 800b6d2:	460e      	mov	r6, r1
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	bfbb      	ittet	lt
 800b6da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b6de:	461d      	movlt	r5, r3
 800b6e0:	2300      	movge	r3, #0
 800b6e2:	232d      	movlt	r3, #45	; 0x2d
 800b6e4:	700b      	strb	r3, [r1, #0]
 800b6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b6ec:	4691      	mov	r9, r2
 800b6ee:	f023 0820 	bic.w	r8, r3, #32
 800b6f2:	bfbc      	itt	lt
 800b6f4:	4622      	movlt	r2, r4
 800b6f6:	4614      	movlt	r4, r2
 800b6f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6fc:	d005      	beq.n	800b70a <__cvt+0x42>
 800b6fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b702:	d100      	bne.n	800b706 <__cvt+0x3e>
 800b704:	3601      	adds	r6, #1
 800b706:	2102      	movs	r1, #2
 800b708:	e000      	b.n	800b70c <__cvt+0x44>
 800b70a:	2103      	movs	r1, #3
 800b70c:	ab03      	add	r3, sp, #12
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	ab02      	add	r3, sp, #8
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	ec45 4b10 	vmov	d0, r4, r5
 800b718:	4653      	mov	r3, sl
 800b71a:	4632      	mov	r2, r6
 800b71c:	f000 fcec 	bl	800c0f8 <_dtoa_r>
 800b720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b724:	4607      	mov	r7, r0
 800b726:	d102      	bne.n	800b72e <__cvt+0x66>
 800b728:	f019 0f01 	tst.w	r9, #1
 800b72c:	d022      	beq.n	800b774 <__cvt+0xac>
 800b72e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b732:	eb07 0906 	add.w	r9, r7, r6
 800b736:	d110      	bne.n	800b75a <__cvt+0x92>
 800b738:	783b      	ldrb	r3, [r7, #0]
 800b73a:	2b30      	cmp	r3, #48	; 0x30
 800b73c:	d10a      	bne.n	800b754 <__cvt+0x8c>
 800b73e:	2200      	movs	r2, #0
 800b740:	2300      	movs	r3, #0
 800b742:	4620      	mov	r0, r4
 800b744:	4629      	mov	r1, r5
 800b746:	f7f5 f9df 	bl	8000b08 <__aeabi_dcmpeq>
 800b74a:	b918      	cbnz	r0, 800b754 <__cvt+0x8c>
 800b74c:	f1c6 0601 	rsb	r6, r6, #1
 800b750:	f8ca 6000 	str.w	r6, [sl]
 800b754:	f8da 3000 	ldr.w	r3, [sl]
 800b758:	4499      	add	r9, r3
 800b75a:	2200      	movs	r2, #0
 800b75c:	2300      	movs	r3, #0
 800b75e:	4620      	mov	r0, r4
 800b760:	4629      	mov	r1, r5
 800b762:	f7f5 f9d1 	bl	8000b08 <__aeabi_dcmpeq>
 800b766:	b108      	cbz	r0, 800b76c <__cvt+0xa4>
 800b768:	f8cd 900c 	str.w	r9, [sp, #12]
 800b76c:	2230      	movs	r2, #48	; 0x30
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	454b      	cmp	r3, r9
 800b772:	d307      	bcc.n	800b784 <__cvt+0xbc>
 800b774:	9b03      	ldr	r3, [sp, #12]
 800b776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b778:	1bdb      	subs	r3, r3, r7
 800b77a:	4638      	mov	r0, r7
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	b004      	add	sp, #16
 800b780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b784:	1c59      	adds	r1, r3, #1
 800b786:	9103      	str	r1, [sp, #12]
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	e7f0      	b.n	800b76e <__cvt+0xa6>

0800b78c <__exponent>:
 800b78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b78e:	4603      	mov	r3, r0
 800b790:	2900      	cmp	r1, #0
 800b792:	bfb8      	it	lt
 800b794:	4249      	neglt	r1, r1
 800b796:	f803 2b02 	strb.w	r2, [r3], #2
 800b79a:	bfb4      	ite	lt
 800b79c:	222d      	movlt	r2, #45	; 0x2d
 800b79e:	222b      	movge	r2, #43	; 0x2b
 800b7a0:	2909      	cmp	r1, #9
 800b7a2:	7042      	strb	r2, [r0, #1]
 800b7a4:	dd2a      	ble.n	800b7fc <__exponent+0x70>
 800b7a6:	f10d 0407 	add.w	r4, sp, #7
 800b7aa:	46a4      	mov	ip, r4
 800b7ac:	270a      	movs	r7, #10
 800b7ae:	46a6      	mov	lr, r4
 800b7b0:	460a      	mov	r2, r1
 800b7b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b7b6:	fb07 1516 	mls	r5, r7, r6, r1
 800b7ba:	3530      	adds	r5, #48	; 0x30
 800b7bc:	2a63      	cmp	r2, #99	; 0x63
 800b7be:	f104 34ff 	add.w	r4, r4, #4294967295
 800b7c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	dcf1      	bgt.n	800b7ae <__exponent+0x22>
 800b7ca:	3130      	adds	r1, #48	; 0x30
 800b7cc:	f1ae 0502 	sub.w	r5, lr, #2
 800b7d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b7d4:	1c44      	adds	r4, r0, #1
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4561      	cmp	r1, ip
 800b7da:	d30a      	bcc.n	800b7f2 <__exponent+0x66>
 800b7dc:	f10d 0209 	add.w	r2, sp, #9
 800b7e0:	eba2 020e 	sub.w	r2, r2, lr
 800b7e4:	4565      	cmp	r5, ip
 800b7e6:	bf88      	it	hi
 800b7e8:	2200      	movhi	r2, #0
 800b7ea:	4413      	add	r3, r2
 800b7ec:	1a18      	subs	r0, r3, r0
 800b7ee:	b003      	add	sp, #12
 800b7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b7fa:	e7ed      	b.n	800b7d8 <__exponent+0x4c>
 800b7fc:	2330      	movs	r3, #48	; 0x30
 800b7fe:	3130      	adds	r1, #48	; 0x30
 800b800:	7083      	strb	r3, [r0, #2]
 800b802:	70c1      	strb	r1, [r0, #3]
 800b804:	1d03      	adds	r3, r0, #4
 800b806:	e7f1      	b.n	800b7ec <__exponent+0x60>

0800b808 <_printf_float>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	ed2d 8b02 	vpush	{d8}
 800b810:	b08d      	sub	sp, #52	; 0x34
 800b812:	460c      	mov	r4, r1
 800b814:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b818:	4616      	mov	r6, r2
 800b81a:	461f      	mov	r7, r3
 800b81c:	4605      	mov	r5, r0
 800b81e:	f001 fa59 	bl	800ccd4 <_localeconv_r>
 800b822:	f8d0 a000 	ldr.w	sl, [r0]
 800b826:	4650      	mov	r0, sl
 800b828:	f7f4 fcf2 	bl	8000210 <strlen>
 800b82c:	2300      	movs	r3, #0
 800b82e:	930a      	str	r3, [sp, #40]	; 0x28
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	f8d8 3000 	ldr.w	r3, [r8]
 800b838:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b83c:	3307      	adds	r3, #7
 800b83e:	f023 0307 	bic.w	r3, r3, #7
 800b842:	f103 0208 	add.w	r2, r3, #8
 800b846:	f8c8 2000 	str.w	r2, [r8]
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b852:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b856:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b85a:	9307      	str	r3, [sp, #28]
 800b85c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b860:	ee08 0a10 	vmov	s16, r0
 800b864:	4b9f      	ldr	r3, [pc, #636]	; (800bae4 <_printf_float+0x2dc>)
 800b866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	f7f5 f97d 	bl	8000b6c <__aeabi_dcmpun>
 800b872:	bb88      	cbnz	r0, 800b8d8 <_printf_float+0xd0>
 800b874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b878:	4b9a      	ldr	r3, [pc, #616]	; (800bae4 <_printf_float+0x2dc>)
 800b87a:	f04f 32ff 	mov.w	r2, #4294967295
 800b87e:	f7f5 f957 	bl	8000b30 <__aeabi_dcmple>
 800b882:	bb48      	cbnz	r0, 800b8d8 <_printf_float+0xd0>
 800b884:	2200      	movs	r2, #0
 800b886:	2300      	movs	r3, #0
 800b888:	4640      	mov	r0, r8
 800b88a:	4649      	mov	r1, r9
 800b88c:	f7f5 f946 	bl	8000b1c <__aeabi_dcmplt>
 800b890:	b110      	cbz	r0, 800b898 <_printf_float+0x90>
 800b892:	232d      	movs	r3, #45	; 0x2d
 800b894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b898:	4b93      	ldr	r3, [pc, #588]	; (800bae8 <_printf_float+0x2e0>)
 800b89a:	4894      	ldr	r0, [pc, #592]	; (800baec <_printf_float+0x2e4>)
 800b89c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b8a0:	bf94      	ite	ls
 800b8a2:	4698      	movls	r8, r3
 800b8a4:	4680      	movhi	r8, r0
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	6123      	str	r3, [r4, #16]
 800b8aa:	9b05      	ldr	r3, [sp, #20]
 800b8ac:	f023 0204 	bic.w	r2, r3, #4
 800b8b0:	6022      	str	r2, [r4, #0]
 800b8b2:	f04f 0900 	mov.w	r9, #0
 800b8b6:	9700      	str	r7, [sp, #0]
 800b8b8:	4633      	mov	r3, r6
 800b8ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 f9d8 	bl	800bc74 <_printf_common>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	f040 8090 	bne.w	800b9ea <_printf_float+0x1e2>
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	b00d      	add	sp, #52	; 0x34
 800b8d0:	ecbd 8b02 	vpop	{d8}
 800b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	4642      	mov	r2, r8
 800b8da:	464b      	mov	r3, r9
 800b8dc:	4640      	mov	r0, r8
 800b8de:	4649      	mov	r1, r9
 800b8e0:	f7f5 f944 	bl	8000b6c <__aeabi_dcmpun>
 800b8e4:	b140      	cbz	r0, 800b8f8 <_printf_float+0xf0>
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bfbc      	itt	lt
 800b8ec:	232d      	movlt	r3, #45	; 0x2d
 800b8ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b8f2:	487f      	ldr	r0, [pc, #508]	; (800baf0 <_printf_float+0x2e8>)
 800b8f4:	4b7f      	ldr	r3, [pc, #508]	; (800baf4 <_printf_float+0x2ec>)
 800b8f6:	e7d1      	b.n	800b89c <_printf_float+0x94>
 800b8f8:	6863      	ldr	r3, [r4, #4]
 800b8fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b8fe:	9206      	str	r2, [sp, #24]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	d13f      	bne.n	800b984 <_printf_float+0x17c>
 800b904:	2306      	movs	r3, #6
 800b906:	6063      	str	r3, [r4, #4]
 800b908:	9b05      	ldr	r3, [sp, #20]
 800b90a:	6861      	ldr	r1, [r4, #4]
 800b90c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b910:	2300      	movs	r3, #0
 800b912:	9303      	str	r3, [sp, #12]
 800b914:	ab0a      	add	r3, sp, #40	; 0x28
 800b916:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b91a:	ab09      	add	r3, sp, #36	; 0x24
 800b91c:	ec49 8b10 	vmov	d0, r8, r9
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b928:	4628      	mov	r0, r5
 800b92a:	f7ff fecd 	bl	800b6c8 <__cvt>
 800b92e:	9b06      	ldr	r3, [sp, #24]
 800b930:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b932:	2b47      	cmp	r3, #71	; 0x47
 800b934:	4680      	mov	r8, r0
 800b936:	d108      	bne.n	800b94a <_printf_float+0x142>
 800b938:	1cc8      	adds	r0, r1, #3
 800b93a:	db02      	blt.n	800b942 <_printf_float+0x13a>
 800b93c:	6863      	ldr	r3, [r4, #4]
 800b93e:	4299      	cmp	r1, r3
 800b940:	dd41      	ble.n	800b9c6 <_printf_float+0x1be>
 800b942:	f1ab 0b02 	sub.w	fp, fp, #2
 800b946:	fa5f fb8b 	uxtb.w	fp, fp
 800b94a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b94e:	d820      	bhi.n	800b992 <_printf_float+0x18a>
 800b950:	3901      	subs	r1, #1
 800b952:	465a      	mov	r2, fp
 800b954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b958:	9109      	str	r1, [sp, #36]	; 0x24
 800b95a:	f7ff ff17 	bl	800b78c <__exponent>
 800b95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b960:	1813      	adds	r3, r2, r0
 800b962:	2a01      	cmp	r2, #1
 800b964:	4681      	mov	r9, r0
 800b966:	6123      	str	r3, [r4, #16]
 800b968:	dc02      	bgt.n	800b970 <_printf_float+0x168>
 800b96a:	6822      	ldr	r2, [r4, #0]
 800b96c:	07d2      	lsls	r2, r2, #31
 800b96e:	d501      	bpl.n	800b974 <_printf_float+0x16c>
 800b970:	3301      	adds	r3, #1
 800b972:	6123      	str	r3, [r4, #16]
 800b974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d09c      	beq.n	800b8b6 <_printf_float+0xae>
 800b97c:	232d      	movs	r3, #45	; 0x2d
 800b97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b982:	e798      	b.n	800b8b6 <_printf_float+0xae>
 800b984:	9a06      	ldr	r2, [sp, #24]
 800b986:	2a47      	cmp	r2, #71	; 0x47
 800b988:	d1be      	bne.n	800b908 <_printf_float+0x100>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1bc      	bne.n	800b908 <_printf_float+0x100>
 800b98e:	2301      	movs	r3, #1
 800b990:	e7b9      	b.n	800b906 <_printf_float+0xfe>
 800b992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b996:	d118      	bne.n	800b9ca <_printf_float+0x1c2>
 800b998:	2900      	cmp	r1, #0
 800b99a:	6863      	ldr	r3, [r4, #4]
 800b99c:	dd0b      	ble.n	800b9b6 <_printf_float+0x1ae>
 800b99e:	6121      	str	r1, [r4, #16]
 800b9a0:	b913      	cbnz	r3, 800b9a8 <_printf_float+0x1a0>
 800b9a2:	6822      	ldr	r2, [r4, #0]
 800b9a4:	07d0      	lsls	r0, r2, #31
 800b9a6:	d502      	bpl.n	800b9ae <_printf_float+0x1a6>
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	440b      	add	r3, r1
 800b9ac:	6123      	str	r3, [r4, #16]
 800b9ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800b9b0:	f04f 0900 	mov.w	r9, #0
 800b9b4:	e7de      	b.n	800b974 <_printf_float+0x16c>
 800b9b6:	b913      	cbnz	r3, 800b9be <_printf_float+0x1b6>
 800b9b8:	6822      	ldr	r2, [r4, #0]
 800b9ba:	07d2      	lsls	r2, r2, #31
 800b9bc:	d501      	bpl.n	800b9c2 <_printf_float+0x1ba>
 800b9be:	3302      	adds	r3, #2
 800b9c0:	e7f4      	b.n	800b9ac <_printf_float+0x1a4>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e7f2      	b.n	800b9ac <_printf_float+0x1a4>
 800b9c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9cc:	4299      	cmp	r1, r3
 800b9ce:	db05      	blt.n	800b9dc <_printf_float+0x1d4>
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	6121      	str	r1, [r4, #16]
 800b9d4:	07d8      	lsls	r0, r3, #31
 800b9d6:	d5ea      	bpl.n	800b9ae <_printf_float+0x1a6>
 800b9d8:	1c4b      	adds	r3, r1, #1
 800b9da:	e7e7      	b.n	800b9ac <_printf_float+0x1a4>
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	bfd4      	ite	le
 800b9e0:	f1c1 0202 	rsble	r2, r1, #2
 800b9e4:	2201      	movgt	r2, #1
 800b9e6:	4413      	add	r3, r2
 800b9e8:	e7e0      	b.n	800b9ac <_printf_float+0x1a4>
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	055a      	lsls	r2, r3, #21
 800b9ee:	d407      	bmi.n	800ba00 <_printf_float+0x1f8>
 800b9f0:	6923      	ldr	r3, [r4, #16]
 800b9f2:	4642      	mov	r2, r8
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	47b8      	blx	r7
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	d12c      	bne.n	800ba58 <_printf_float+0x250>
 800b9fe:	e764      	b.n	800b8ca <_printf_float+0xc2>
 800ba00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba04:	f240 80e0 	bls.w	800bbc8 <_printf_float+0x3c0>
 800ba08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f7f5 f87a 	bl	8000b08 <__aeabi_dcmpeq>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d034      	beq.n	800ba82 <_printf_float+0x27a>
 800ba18:	4a37      	ldr	r2, [pc, #220]	; (800baf8 <_printf_float+0x2f0>)
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	4631      	mov	r1, r6
 800ba1e:	4628      	mov	r0, r5
 800ba20:	47b8      	blx	r7
 800ba22:	3001      	adds	r0, #1
 800ba24:	f43f af51 	beq.w	800b8ca <_printf_float+0xc2>
 800ba28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	db02      	blt.n	800ba36 <_printf_float+0x22e>
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	07d8      	lsls	r0, r3, #31
 800ba34:	d510      	bpl.n	800ba58 <_printf_float+0x250>
 800ba36:	ee18 3a10 	vmov	r3, s16
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47b8      	blx	r7
 800ba42:	3001      	adds	r0, #1
 800ba44:	f43f af41 	beq.w	800b8ca <_printf_float+0xc2>
 800ba48:	f04f 0800 	mov.w	r8, #0
 800ba4c:	f104 091a 	add.w	r9, r4, #26
 800ba50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba52:	3b01      	subs	r3, #1
 800ba54:	4543      	cmp	r3, r8
 800ba56:	dc09      	bgt.n	800ba6c <_printf_float+0x264>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	079b      	lsls	r3, r3, #30
 800ba5c:	f100 8105 	bmi.w	800bc6a <_printf_float+0x462>
 800ba60:	68e0      	ldr	r0, [r4, #12]
 800ba62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba64:	4298      	cmp	r0, r3
 800ba66:	bfb8      	it	lt
 800ba68:	4618      	movlt	r0, r3
 800ba6a:	e730      	b.n	800b8ce <_printf_float+0xc6>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	464a      	mov	r2, r9
 800ba70:	4631      	mov	r1, r6
 800ba72:	4628      	mov	r0, r5
 800ba74:	47b8      	blx	r7
 800ba76:	3001      	adds	r0, #1
 800ba78:	f43f af27 	beq.w	800b8ca <_printf_float+0xc2>
 800ba7c:	f108 0801 	add.w	r8, r8, #1
 800ba80:	e7e6      	b.n	800ba50 <_printf_float+0x248>
 800ba82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dc39      	bgt.n	800bafc <_printf_float+0x2f4>
 800ba88:	4a1b      	ldr	r2, [pc, #108]	; (800baf8 <_printf_float+0x2f0>)
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4628      	mov	r0, r5
 800ba90:	47b8      	blx	r7
 800ba92:	3001      	adds	r0, #1
 800ba94:	f43f af19 	beq.w	800b8ca <_printf_float+0xc2>
 800ba98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d102      	bne.n	800baa6 <_printf_float+0x29e>
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	07d9      	lsls	r1, r3, #31
 800baa4:	d5d8      	bpl.n	800ba58 <_printf_float+0x250>
 800baa6:	ee18 3a10 	vmov	r3, s16
 800baaa:	4652      	mov	r2, sl
 800baac:	4631      	mov	r1, r6
 800baae:	4628      	mov	r0, r5
 800bab0:	47b8      	blx	r7
 800bab2:	3001      	adds	r0, #1
 800bab4:	f43f af09 	beq.w	800b8ca <_printf_float+0xc2>
 800bab8:	f04f 0900 	mov.w	r9, #0
 800babc:	f104 0a1a 	add.w	sl, r4, #26
 800bac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac2:	425b      	negs	r3, r3
 800bac4:	454b      	cmp	r3, r9
 800bac6:	dc01      	bgt.n	800bacc <_printf_float+0x2c4>
 800bac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baca:	e792      	b.n	800b9f2 <_printf_float+0x1ea>
 800bacc:	2301      	movs	r3, #1
 800bace:	4652      	mov	r2, sl
 800bad0:	4631      	mov	r1, r6
 800bad2:	4628      	mov	r0, r5
 800bad4:	47b8      	blx	r7
 800bad6:	3001      	adds	r0, #1
 800bad8:	f43f aef7 	beq.w	800b8ca <_printf_float+0xc2>
 800badc:	f109 0901 	add.w	r9, r9, #1
 800bae0:	e7ee      	b.n	800bac0 <_printf_float+0x2b8>
 800bae2:	bf00      	nop
 800bae4:	7fefffff 	.word	0x7fefffff
 800bae8:	0800faa4 	.word	0x0800faa4
 800baec:	0800faa8 	.word	0x0800faa8
 800baf0:	0800fab0 	.word	0x0800fab0
 800baf4:	0800faac 	.word	0x0800faac
 800baf8:	0800fab4 	.word	0x0800fab4
 800bafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb00:	429a      	cmp	r2, r3
 800bb02:	bfa8      	it	ge
 800bb04:	461a      	movge	r2, r3
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	4691      	mov	r9, r2
 800bb0a:	dc37      	bgt.n	800bb7c <_printf_float+0x374>
 800bb0c:	f04f 0b00 	mov.w	fp, #0
 800bb10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb14:	f104 021a 	add.w	r2, r4, #26
 800bb18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb1a:	9305      	str	r3, [sp, #20]
 800bb1c:	eba3 0309 	sub.w	r3, r3, r9
 800bb20:	455b      	cmp	r3, fp
 800bb22:	dc33      	bgt.n	800bb8c <_printf_float+0x384>
 800bb24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	db3b      	blt.n	800bba4 <_printf_float+0x39c>
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	07da      	lsls	r2, r3, #31
 800bb30:	d438      	bmi.n	800bba4 <_printf_float+0x39c>
 800bb32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb34:	9a05      	ldr	r2, [sp, #20]
 800bb36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb38:	1a9a      	subs	r2, r3, r2
 800bb3a:	eba3 0901 	sub.w	r9, r3, r1
 800bb3e:	4591      	cmp	r9, r2
 800bb40:	bfa8      	it	ge
 800bb42:	4691      	movge	r9, r2
 800bb44:	f1b9 0f00 	cmp.w	r9, #0
 800bb48:	dc35      	bgt.n	800bbb6 <_printf_float+0x3ae>
 800bb4a:	f04f 0800 	mov.w	r8, #0
 800bb4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb52:	f104 0a1a 	add.w	sl, r4, #26
 800bb56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb5a:	1a9b      	subs	r3, r3, r2
 800bb5c:	eba3 0309 	sub.w	r3, r3, r9
 800bb60:	4543      	cmp	r3, r8
 800bb62:	f77f af79 	ble.w	800ba58 <_printf_float+0x250>
 800bb66:	2301      	movs	r3, #1
 800bb68:	4652      	mov	r2, sl
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	47b8      	blx	r7
 800bb70:	3001      	adds	r0, #1
 800bb72:	f43f aeaa 	beq.w	800b8ca <_printf_float+0xc2>
 800bb76:	f108 0801 	add.w	r8, r8, #1
 800bb7a:	e7ec      	b.n	800bb56 <_printf_float+0x34e>
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	4631      	mov	r1, r6
 800bb80:	4642      	mov	r2, r8
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	d1c0      	bne.n	800bb0c <_printf_float+0x304>
 800bb8a:	e69e      	b.n	800b8ca <_printf_float+0xc2>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	4631      	mov	r1, r6
 800bb90:	4628      	mov	r0, r5
 800bb92:	9205      	str	r2, [sp, #20]
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	f43f ae97 	beq.w	800b8ca <_printf_float+0xc2>
 800bb9c:	9a05      	ldr	r2, [sp, #20]
 800bb9e:	f10b 0b01 	add.w	fp, fp, #1
 800bba2:	e7b9      	b.n	800bb18 <_printf_float+0x310>
 800bba4:	ee18 3a10 	vmov	r3, s16
 800bba8:	4652      	mov	r2, sl
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4628      	mov	r0, r5
 800bbae:	47b8      	blx	r7
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d1be      	bne.n	800bb32 <_printf_float+0x32a>
 800bbb4:	e689      	b.n	800b8ca <_printf_float+0xc2>
 800bbb6:	9a05      	ldr	r2, [sp, #20]
 800bbb8:	464b      	mov	r3, r9
 800bbba:	4442      	add	r2, r8
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	d1c1      	bne.n	800bb4a <_printf_float+0x342>
 800bbc6:	e680      	b.n	800b8ca <_printf_float+0xc2>
 800bbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbca:	2a01      	cmp	r2, #1
 800bbcc:	dc01      	bgt.n	800bbd2 <_printf_float+0x3ca>
 800bbce:	07db      	lsls	r3, r3, #31
 800bbd0:	d538      	bpl.n	800bc44 <_printf_float+0x43c>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4642      	mov	r2, r8
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	4628      	mov	r0, r5
 800bbda:	47b8      	blx	r7
 800bbdc:	3001      	adds	r0, #1
 800bbde:	f43f ae74 	beq.w	800b8ca <_printf_float+0xc2>
 800bbe2:	ee18 3a10 	vmov	r3, s16
 800bbe6:	4652      	mov	r2, sl
 800bbe8:	4631      	mov	r1, r6
 800bbea:	4628      	mov	r0, r5
 800bbec:	47b8      	blx	r7
 800bbee:	3001      	adds	r0, #1
 800bbf0:	f43f ae6b 	beq.w	800b8ca <_printf_float+0xc2>
 800bbf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f7f4 ff84 	bl	8000b08 <__aeabi_dcmpeq>
 800bc00:	b9d8      	cbnz	r0, 800bc3a <_printf_float+0x432>
 800bc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc04:	f108 0201 	add.w	r2, r8, #1
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	47b8      	blx	r7
 800bc10:	3001      	adds	r0, #1
 800bc12:	d10e      	bne.n	800bc32 <_printf_float+0x42a>
 800bc14:	e659      	b.n	800b8ca <_printf_float+0xc2>
 800bc16:	2301      	movs	r3, #1
 800bc18:	4652      	mov	r2, sl
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b8      	blx	r7
 800bc20:	3001      	adds	r0, #1
 800bc22:	f43f ae52 	beq.w	800b8ca <_printf_float+0xc2>
 800bc26:	f108 0801 	add.w	r8, r8, #1
 800bc2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	4543      	cmp	r3, r8
 800bc30:	dcf1      	bgt.n	800bc16 <_printf_float+0x40e>
 800bc32:	464b      	mov	r3, r9
 800bc34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc38:	e6dc      	b.n	800b9f4 <_printf_float+0x1ec>
 800bc3a:	f04f 0800 	mov.w	r8, #0
 800bc3e:	f104 0a1a 	add.w	sl, r4, #26
 800bc42:	e7f2      	b.n	800bc2a <_printf_float+0x422>
 800bc44:	2301      	movs	r3, #1
 800bc46:	4642      	mov	r2, r8
 800bc48:	e7df      	b.n	800bc0a <_printf_float+0x402>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	464a      	mov	r2, r9
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4628      	mov	r0, r5
 800bc52:	47b8      	blx	r7
 800bc54:	3001      	adds	r0, #1
 800bc56:	f43f ae38 	beq.w	800b8ca <_printf_float+0xc2>
 800bc5a:	f108 0801 	add.w	r8, r8, #1
 800bc5e:	68e3      	ldr	r3, [r4, #12]
 800bc60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc62:	1a5b      	subs	r3, r3, r1
 800bc64:	4543      	cmp	r3, r8
 800bc66:	dcf0      	bgt.n	800bc4a <_printf_float+0x442>
 800bc68:	e6fa      	b.n	800ba60 <_printf_float+0x258>
 800bc6a:	f04f 0800 	mov.w	r8, #0
 800bc6e:	f104 0919 	add.w	r9, r4, #25
 800bc72:	e7f4      	b.n	800bc5e <_printf_float+0x456>

0800bc74 <_printf_common>:
 800bc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc78:	4616      	mov	r6, r2
 800bc7a:	4699      	mov	r9, r3
 800bc7c:	688a      	ldr	r2, [r1, #8]
 800bc7e:	690b      	ldr	r3, [r1, #16]
 800bc80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc84:	4293      	cmp	r3, r2
 800bc86:	bfb8      	it	lt
 800bc88:	4613      	movlt	r3, r2
 800bc8a:	6033      	str	r3, [r6, #0]
 800bc8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc90:	4607      	mov	r7, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	b10a      	cbz	r2, 800bc9a <_printf_common+0x26>
 800bc96:	3301      	adds	r3, #1
 800bc98:	6033      	str	r3, [r6, #0]
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	0699      	lsls	r1, r3, #26
 800bc9e:	bf42      	ittt	mi
 800bca0:	6833      	ldrmi	r3, [r6, #0]
 800bca2:	3302      	addmi	r3, #2
 800bca4:	6033      	strmi	r3, [r6, #0]
 800bca6:	6825      	ldr	r5, [r4, #0]
 800bca8:	f015 0506 	ands.w	r5, r5, #6
 800bcac:	d106      	bne.n	800bcbc <_printf_common+0x48>
 800bcae:	f104 0a19 	add.w	sl, r4, #25
 800bcb2:	68e3      	ldr	r3, [r4, #12]
 800bcb4:	6832      	ldr	r2, [r6, #0]
 800bcb6:	1a9b      	subs	r3, r3, r2
 800bcb8:	42ab      	cmp	r3, r5
 800bcba:	dc26      	bgt.n	800bd0a <_printf_common+0x96>
 800bcbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcc0:	1e13      	subs	r3, r2, #0
 800bcc2:	6822      	ldr	r2, [r4, #0]
 800bcc4:	bf18      	it	ne
 800bcc6:	2301      	movne	r3, #1
 800bcc8:	0692      	lsls	r2, r2, #26
 800bcca:	d42b      	bmi.n	800bd24 <_printf_common+0xb0>
 800bccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	47c0      	blx	r8
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	d01e      	beq.n	800bd18 <_printf_common+0xa4>
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	68e5      	ldr	r5, [r4, #12]
 800bcde:	6832      	ldr	r2, [r6, #0]
 800bce0:	f003 0306 	and.w	r3, r3, #6
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	bf08      	it	eq
 800bce8:	1aad      	subeq	r5, r5, r2
 800bcea:	68a3      	ldr	r3, [r4, #8]
 800bcec:	6922      	ldr	r2, [r4, #16]
 800bcee:	bf0c      	ite	eq
 800bcf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcf4:	2500      	movne	r5, #0
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	bfc4      	itt	gt
 800bcfa:	1a9b      	subgt	r3, r3, r2
 800bcfc:	18ed      	addgt	r5, r5, r3
 800bcfe:	2600      	movs	r6, #0
 800bd00:	341a      	adds	r4, #26
 800bd02:	42b5      	cmp	r5, r6
 800bd04:	d11a      	bne.n	800bd3c <_printf_common+0xc8>
 800bd06:	2000      	movs	r0, #0
 800bd08:	e008      	b.n	800bd1c <_printf_common+0xa8>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4652      	mov	r2, sl
 800bd0e:	4649      	mov	r1, r9
 800bd10:	4638      	mov	r0, r7
 800bd12:	47c0      	blx	r8
 800bd14:	3001      	adds	r0, #1
 800bd16:	d103      	bne.n	800bd20 <_printf_common+0xac>
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd20:	3501      	adds	r5, #1
 800bd22:	e7c6      	b.n	800bcb2 <_printf_common+0x3e>
 800bd24:	18e1      	adds	r1, r4, r3
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	2030      	movs	r0, #48	; 0x30
 800bd2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd2e:	4422      	add	r2, r4
 800bd30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd38:	3302      	adds	r3, #2
 800bd3a:	e7c7      	b.n	800bccc <_printf_common+0x58>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	4622      	mov	r2, r4
 800bd40:	4649      	mov	r1, r9
 800bd42:	4638      	mov	r0, r7
 800bd44:	47c0      	blx	r8
 800bd46:	3001      	adds	r0, #1
 800bd48:	d0e6      	beq.n	800bd18 <_printf_common+0xa4>
 800bd4a:	3601      	adds	r6, #1
 800bd4c:	e7d9      	b.n	800bd02 <_printf_common+0x8e>
	...

0800bd50 <_printf_i>:
 800bd50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd54:	7e0f      	ldrb	r7, [r1, #24]
 800bd56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd58:	2f78      	cmp	r7, #120	; 0x78
 800bd5a:	4691      	mov	r9, r2
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	460c      	mov	r4, r1
 800bd60:	469a      	mov	sl, r3
 800bd62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd66:	d807      	bhi.n	800bd78 <_printf_i+0x28>
 800bd68:	2f62      	cmp	r7, #98	; 0x62
 800bd6a:	d80a      	bhi.n	800bd82 <_printf_i+0x32>
 800bd6c:	2f00      	cmp	r7, #0
 800bd6e:	f000 80d8 	beq.w	800bf22 <_printf_i+0x1d2>
 800bd72:	2f58      	cmp	r7, #88	; 0x58
 800bd74:	f000 80a3 	beq.w	800bebe <_printf_i+0x16e>
 800bd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd80:	e03a      	b.n	800bdf8 <_printf_i+0xa8>
 800bd82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd86:	2b15      	cmp	r3, #21
 800bd88:	d8f6      	bhi.n	800bd78 <_printf_i+0x28>
 800bd8a:	a101      	add	r1, pc, #4	; (adr r1, 800bd90 <_printf_i+0x40>)
 800bd8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd90:	0800bde9 	.word	0x0800bde9
 800bd94:	0800bdfd 	.word	0x0800bdfd
 800bd98:	0800bd79 	.word	0x0800bd79
 800bd9c:	0800bd79 	.word	0x0800bd79
 800bda0:	0800bd79 	.word	0x0800bd79
 800bda4:	0800bd79 	.word	0x0800bd79
 800bda8:	0800bdfd 	.word	0x0800bdfd
 800bdac:	0800bd79 	.word	0x0800bd79
 800bdb0:	0800bd79 	.word	0x0800bd79
 800bdb4:	0800bd79 	.word	0x0800bd79
 800bdb8:	0800bd79 	.word	0x0800bd79
 800bdbc:	0800bf09 	.word	0x0800bf09
 800bdc0:	0800be2d 	.word	0x0800be2d
 800bdc4:	0800beeb 	.word	0x0800beeb
 800bdc8:	0800bd79 	.word	0x0800bd79
 800bdcc:	0800bd79 	.word	0x0800bd79
 800bdd0:	0800bf2b 	.word	0x0800bf2b
 800bdd4:	0800bd79 	.word	0x0800bd79
 800bdd8:	0800be2d 	.word	0x0800be2d
 800bddc:	0800bd79 	.word	0x0800bd79
 800bde0:	0800bd79 	.word	0x0800bd79
 800bde4:	0800bef3 	.word	0x0800bef3
 800bde8:	682b      	ldr	r3, [r5, #0]
 800bdea:	1d1a      	adds	r2, r3, #4
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	602a      	str	r2, [r5, #0]
 800bdf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e0a3      	b.n	800bf44 <_printf_i+0x1f4>
 800bdfc:	6820      	ldr	r0, [r4, #0]
 800bdfe:	6829      	ldr	r1, [r5, #0]
 800be00:	0606      	lsls	r6, r0, #24
 800be02:	f101 0304 	add.w	r3, r1, #4
 800be06:	d50a      	bpl.n	800be1e <_printf_i+0xce>
 800be08:	680e      	ldr	r6, [r1, #0]
 800be0a:	602b      	str	r3, [r5, #0]
 800be0c:	2e00      	cmp	r6, #0
 800be0e:	da03      	bge.n	800be18 <_printf_i+0xc8>
 800be10:	232d      	movs	r3, #45	; 0x2d
 800be12:	4276      	negs	r6, r6
 800be14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be18:	485e      	ldr	r0, [pc, #376]	; (800bf94 <_printf_i+0x244>)
 800be1a:	230a      	movs	r3, #10
 800be1c:	e019      	b.n	800be52 <_printf_i+0x102>
 800be1e:	680e      	ldr	r6, [r1, #0]
 800be20:	602b      	str	r3, [r5, #0]
 800be22:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be26:	bf18      	it	ne
 800be28:	b236      	sxthne	r6, r6
 800be2a:	e7ef      	b.n	800be0c <_printf_i+0xbc>
 800be2c:	682b      	ldr	r3, [r5, #0]
 800be2e:	6820      	ldr	r0, [r4, #0]
 800be30:	1d19      	adds	r1, r3, #4
 800be32:	6029      	str	r1, [r5, #0]
 800be34:	0601      	lsls	r1, r0, #24
 800be36:	d501      	bpl.n	800be3c <_printf_i+0xec>
 800be38:	681e      	ldr	r6, [r3, #0]
 800be3a:	e002      	b.n	800be42 <_printf_i+0xf2>
 800be3c:	0646      	lsls	r6, r0, #25
 800be3e:	d5fb      	bpl.n	800be38 <_printf_i+0xe8>
 800be40:	881e      	ldrh	r6, [r3, #0]
 800be42:	4854      	ldr	r0, [pc, #336]	; (800bf94 <_printf_i+0x244>)
 800be44:	2f6f      	cmp	r7, #111	; 0x6f
 800be46:	bf0c      	ite	eq
 800be48:	2308      	moveq	r3, #8
 800be4a:	230a      	movne	r3, #10
 800be4c:	2100      	movs	r1, #0
 800be4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be52:	6865      	ldr	r5, [r4, #4]
 800be54:	60a5      	str	r5, [r4, #8]
 800be56:	2d00      	cmp	r5, #0
 800be58:	bfa2      	ittt	ge
 800be5a:	6821      	ldrge	r1, [r4, #0]
 800be5c:	f021 0104 	bicge.w	r1, r1, #4
 800be60:	6021      	strge	r1, [r4, #0]
 800be62:	b90e      	cbnz	r6, 800be68 <_printf_i+0x118>
 800be64:	2d00      	cmp	r5, #0
 800be66:	d04d      	beq.n	800bf04 <_printf_i+0x1b4>
 800be68:	4615      	mov	r5, r2
 800be6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800be6e:	fb03 6711 	mls	r7, r3, r1, r6
 800be72:	5dc7      	ldrb	r7, [r0, r7]
 800be74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be78:	4637      	mov	r7, r6
 800be7a:	42bb      	cmp	r3, r7
 800be7c:	460e      	mov	r6, r1
 800be7e:	d9f4      	bls.n	800be6a <_printf_i+0x11a>
 800be80:	2b08      	cmp	r3, #8
 800be82:	d10b      	bne.n	800be9c <_printf_i+0x14c>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	07de      	lsls	r6, r3, #31
 800be88:	d508      	bpl.n	800be9c <_printf_i+0x14c>
 800be8a:	6923      	ldr	r3, [r4, #16]
 800be8c:	6861      	ldr	r1, [r4, #4]
 800be8e:	4299      	cmp	r1, r3
 800be90:	bfde      	ittt	le
 800be92:	2330      	movle	r3, #48	; 0x30
 800be94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be9c:	1b52      	subs	r2, r2, r5
 800be9e:	6122      	str	r2, [r4, #16]
 800bea0:	f8cd a000 	str.w	sl, [sp]
 800bea4:	464b      	mov	r3, r9
 800bea6:	aa03      	add	r2, sp, #12
 800bea8:	4621      	mov	r1, r4
 800beaa:	4640      	mov	r0, r8
 800beac:	f7ff fee2 	bl	800bc74 <_printf_common>
 800beb0:	3001      	adds	r0, #1
 800beb2:	d14c      	bne.n	800bf4e <_printf_i+0x1fe>
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	b004      	add	sp, #16
 800beba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebe:	4835      	ldr	r0, [pc, #212]	; (800bf94 <_printf_i+0x244>)
 800bec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bec4:	6829      	ldr	r1, [r5, #0]
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	f851 6b04 	ldr.w	r6, [r1], #4
 800becc:	6029      	str	r1, [r5, #0]
 800bece:	061d      	lsls	r5, r3, #24
 800bed0:	d514      	bpl.n	800befc <_printf_i+0x1ac>
 800bed2:	07df      	lsls	r7, r3, #31
 800bed4:	bf44      	itt	mi
 800bed6:	f043 0320 	orrmi.w	r3, r3, #32
 800beda:	6023      	strmi	r3, [r4, #0]
 800bedc:	b91e      	cbnz	r6, 800bee6 <_printf_i+0x196>
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	f023 0320 	bic.w	r3, r3, #32
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	2310      	movs	r3, #16
 800bee8:	e7b0      	b.n	800be4c <_printf_i+0xfc>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	f043 0320 	orr.w	r3, r3, #32
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	2378      	movs	r3, #120	; 0x78
 800bef4:	4828      	ldr	r0, [pc, #160]	; (800bf98 <_printf_i+0x248>)
 800bef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800befa:	e7e3      	b.n	800bec4 <_printf_i+0x174>
 800befc:	0659      	lsls	r1, r3, #25
 800befe:	bf48      	it	mi
 800bf00:	b2b6      	uxthmi	r6, r6
 800bf02:	e7e6      	b.n	800bed2 <_printf_i+0x182>
 800bf04:	4615      	mov	r5, r2
 800bf06:	e7bb      	b.n	800be80 <_printf_i+0x130>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	6826      	ldr	r6, [r4, #0]
 800bf0c:	6961      	ldr	r1, [r4, #20]
 800bf0e:	1d18      	adds	r0, r3, #4
 800bf10:	6028      	str	r0, [r5, #0]
 800bf12:	0635      	lsls	r5, r6, #24
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	d501      	bpl.n	800bf1c <_printf_i+0x1cc>
 800bf18:	6019      	str	r1, [r3, #0]
 800bf1a:	e002      	b.n	800bf22 <_printf_i+0x1d2>
 800bf1c:	0670      	lsls	r0, r6, #25
 800bf1e:	d5fb      	bpl.n	800bf18 <_printf_i+0x1c8>
 800bf20:	8019      	strh	r1, [r3, #0]
 800bf22:	2300      	movs	r3, #0
 800bf24:	6123      	str	r3, [r4, #16]
 800bf26:	4615      	mov	r5, r2
 800bf28:	e7ba      	b.n	800bea0 <_printf_i+0x150>
 800bf2a:	682b      	ldr	r3, [r5, #0]
 800bf2c:	1d1a      	adds	r2, r3, #4
 800bf2e:	602a      	str	r2, [r5, #0]
 800bf30:	681d      	ldr	r5, [r3, #0]
 800bf32:	6862      	ldr	r2, [r4, #4]
 800bf34:	2100      	movs	r1, #0
 800bf36:	4628      	mov	r0, r5
 800bf38:	f7f4 f972 	bl	8000220 <memchr>
 800bf3c:	b108      	cbz	r0, 800bf42 <_printf_i+0x1f2>
 800bf3e:	1b40      	subs	r0, r0, r5
 800bf40:	6060      	str	r0, [r4, #4]
 800bf42:	6863      	ldr	r3, [r4, #4]
 800bf44:	6123      	str	r3, [r4, #16]
 800bf46:	2300      	movs	r3, #0
 800bf48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf4c:	e7a8      	b.n	800bea0 <_printf_i+0x150>
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	462a      	mov	r2, r5
 800bf52:	4649      	mov	r1, r9
 800bf54:	4640      	mov	r0, r8
 800bf56:	47d0      	blx	sl
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d0ab      	beq.n	800beb4 <_printf_i+0x164>
 800bf5c:	6823      	ldr	r3, [r4, #0]
 800bf5e:	079b      	lsls	r3, r3, #30
 800bf60:	d413      	bmi.n	800bf8a <_printf_i+0x23a>
 800bf62:	68e0      	ldr	r0, [r4, #12]
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	4298      	cmp	r0, r3
 800bf68:	bfb8      	it	lt
 800bf6a:	4618      	movlt	r0, r3
 800bf6c:	e7a4      	b.n	800beb8 <_printf_i+0x168>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	4632      	mov	r2, r6
 800bf72:	4649      	mov	r1, r9
 800bf74:	4640      	mov	r0, r8
 800bf76:	47d0      	blx	sl
 800bf78:	3001      	adds	r0, #1
 800bf7a:	d09b      	beq.n	800beb4 <_printf_i+0x164>
 800bf7c:	3501      	adds	r5, #1
 800bf7e:	68e3      	ldr	r3, [r4, #12]
 800bf80:	9903      	ldr	r1, [sp, #12]
 800bf82:	1a5b      	subs	r3, r3, r1
 800bf84:	42ab      	cmp	r3, r5
 800bf86:	dcf2      	bgt.n	800bf6e <_printf_i+0x21e>
 800bf88:	e7eb      	b.n	800bf62 <_printf_i+0x212>
 800bf8a:	2500      	movs	r5, #0
 800bf8c:	f104 0619 	add.w	r6, r4, #25
 800bf90:	e7f5      	b.n	800bf7e <_printf_i+0x22e>
 800bf92:	bf00      	nop
 800bf94:	0800fab6 	.word	0x0800fab6
 800bf98:	0800fac7 	.word	0x0800fac7

0800bf9c <siprintf>:
 800bf9c:	b40e      	push	{r1, r2, r3}
 800bf9e:	b500      	push	{lr}
 800bfa0:	b09c      	sub	sp, #112	; 0x70
 800bfa2:	ab1d      	add	r3, sp, #116	; 0x74
 800bfa4:	9002      	str	r0, [sp, #8]
 800bfa6:	9006      	str	r0, [sp, #24]
 800bfa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfac:	4809      	ldr	r0, [pc, #36]	; (800bfd4 <siprintf+0x38>)
 800bfae:	9107      	str	r1, [sp, #28]
 800bfb0:	9104      	str	r1, [sp, #16]
 800bfb2:	4909      	ldr	r1, [pc, #36]	; (800bfd8 <siprintf+0x3c>)
 800bfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb8:	9105      	str	r1, [sp, #20]
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	a902      	add	r1, sp, #8
 800bfc0:	f001 fb78 	bl	800d6b4 <_svfiprintf_r>
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	701a      	strb	r2, [r3, #0]
 800bfca:	b01c      	add	sp, #112	; 0x70
 800bfcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd0:	b003      	add	sp, #12
 800bfd2:	4770      	bx	lr
 800bfd4:	20000084 	.word	0x20000084
 800bfd8:	ffff0208 	.word	0xffff0208

0800bfdc <quorem>:
 800bfdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	6903      	ldr	r3, [r0, #16]
 800bfe2:	690c      	ldr	r4, [r1, #16]
 800bfe4:	42a3      	cmp	r3, r4
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	f2c0 8081 	blt.w	800c0ee <quorem+0x112>
 800bfec:	3c01      	subs	r4, #1
 800bfee:	f101 0814 	add.w	r8, r1, #20
 800bff2:	f100 0514 	add.w	r5, r0, #20
 800bff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bffa:	9301      	str	r3, [sp, #4]
 800bffc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c004:	3301      	adds	r3, #1
 800c006:	429a      	cmp	r2, r3
 800c008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c00c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c010:	fbb2 f6f3 	udiv	r6, r2, r3
 800c014:	d331      	bcc.n	800c07a <quorem+0x9e>
 800c016:	f04f 0e00 	mov.w	lr, #0
 800c01a:	4640      	mov	r0, r8
 800c01c:	46ac      	mov	ip, r5
 800c01e:	46f2      	mov	sl, lr
 800c020:	f850 2b04 	ldr.w	r2, [r0], #4
 800c024:	b293      	uxth	r3, r2
 800c026:	fb06 e303 	mla	r3, r6, r3, lr
 800c02a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c02e:	b29b      	uxth	r3, r3
 800c030:	ebaa 0303 	sub.w	r3, sl, r3
 800c034:	f8dc a000 	ldr.w	sl, [ip]
 800c038:	0c12      	lsrs	r2, r2, #16
 800c03a:	fa13 f38a 	uxtah	r3, r3, sl
 800c03e:	fb06 e202 	mla	r2, r6, r2, lr
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	9b00      	ldr	r3, [sp, #0]
 800c046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c04a:	b292      	uxth	r2, r2
 800c04c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c054:	f8bd 3000 	ldrh.w	r3, [sp]
 800c058:	4581      	cmp	r9, r0
 800c05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c05e:	f84c 3b04 	str.w	r3, [ip], #4
 800c062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c066:	d2db      	bcs.n	800c020 <quorem+0x44>
 800c068:	f855 300b 	ldr.w	r3, [r5, fp]
 800c06c:	b92b      	cbnz	r3, 800c07a <quorem+0x9e>
 800c06e:	9b01      	ldr	r3, [sp, #4]
 800c070:	3b04      	subs	r3, #4
 800c072:	429d      	cmp	r5, r3
 800c074:	461a      	mov	r2, r3
 800c076:	d32e      	bcc.n	800c0d6 <quorem+0xfa>
 800c078:	613c      	str	r4, [r7, #16]
 800c07a:	4638      	mov	r0, r7
 800c07c:	f001 f8c6 	bl	800d20c <__mcmp>
 800c080:	2800      	cmp	r0, #0
 800c082:	db24      	blt.n	800c0ce <quorem+0xf2>
 800c084:	3601      	adds	r6, #1
 800c086:	4628      	mov	r0, r5
 800c088:	f04f 0c00 	mov.w	ip, #0
 800c08c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c090:	f8d0 e000 	ldr.w	lr, [r0]
 800c094:	b293      	uxth	r3, r2
 800c096:	ebac 0303 	sub.w	r3, ip, r3
 800c09a:	0c12      	lsrs	r2, r2, #16
 800c09c:	fa13 f38e 	uxtah	r3, r3, lr
 800c0a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c0a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0ae:	45c1      	cmp	r9, r8
 800c0b0:	f840 3b04 	str.w	r3, [r0], #4
 800c0b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c0b8:	d2e8      	bcs.n	800c08c <quorem+0xb0>
 800c0ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0c2:	b922      	cbnz	r2, 800c0ce <quorem+0xf2>
 800c0c4:	3b04      	subs	r3, #4
 800c0c6:	429d      	cmp	r5, r3
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	d30a      	bcc.n	800c0e2 <quorem+0x106>
 800c0cc:	613c      	str	r4, [r7, #16]
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	b003      	add	sp, #12
 800c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d6:	6812      	ldr	r2, [r2, #0]
 800c0d8:	3b04      	subs	r3, #4
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	d1cc      	bne.n	800c078 <quorem+0x9c>
 800c0de:	3c01      	subs	r4, #1
 800c0e0:	e7c7      	b.n	800c072 <quorem+0x96>
 800c0e2:	6812      	ldr	r2, [r2, #0]
 800c0e4:	3b04      	subs	r3, #4
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	d1f0      	bne.n	800c0cc <quorem+0xf0>
 800c0ea:	3c01      	subs	r4, #1
 800c0ec:	e7eb      	b.n	800c0c6 <quorem+0xea>
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	e7ee      	b.n	800c0d0 <quorem+0xf4>
 800c0f2:	0000      	movs	r0, r0
 800c0f4:	0000      	movs	r0, r0
	...

0800c0f8 <_dtoa_r>:
 800c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	ed2d 8b04 	vpush	{d8-d9}
 800c100:	ec57 6b10 	vmov	r6, r7, d0
 800c104:	b093      	sub	sp, #76	; 0x4c
 800c106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c10c:	9106      	str	r1, [sp, #24]
 800c10e:	ee10 aa10 	vmov	sl, s0
 800c112:	4604      	mov	r4, r0
 800c114:	9209      	str	r2, [sp, #36]	; 0x24
 800c116:	930c      	str	r3, [sp, #48]	; 0x30
 800c118:	46bb      	mov	fp, r7
 800c11a:	b975      	cbnz	r5, 800c13a <_dtoa_r+0x42>
 800c11c:	2010      	movs	r0, #16
 800c11e:	f000 fddd 	bl	800ccdc <malloc>
 800c122:	4602      	mov	r2, r0
 800c124:	6260      	str	r0, [r4, #36]	; 0x24
 800c126:	b920      	cbnz	r0, 800c132 <_dtoa_r+0x3a>
 800c128:	4ba7      	ldr	r3, [pc, #668]	; (800c3c8 <_dtoa_r+0x2d0>)
 800c12a:	21ea      	movs	r1, #234	; 0xea
 800c12c:	48a7      	ldr	r0, [pc, #668]	; (800c3cc <_dtoa_r+0x2d4>)
 800c12e:	f001 fbd1 	bl	800d8d4 <__assert_func>
 800c132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c136:	6005      	str	r5, [r0, #0]
 800c138:	60c5      	str	r5, [r0, #12]
 800c13a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c13c:	6819      	ldr	r1, [r3, #0]
 800c13e:	b151      	cbz	r1, 800c156 <_dtoa_r+0x5e>
 800c140:	685a      	ldr	r2, [r3, #4]
 800c142:	604a      	str	r2, [r1, #4]
 800c144:	2301      	movs	r3, #1
 800c146:	4093      	lsls	r3, r2
 800c148:	608b      	str	r3, [r1, #8]
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 fe1c 	bl	800cd88 <_Bfree>
 800c150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	1e3b      	subs	r3, r7, #0
 800c158:	bfaa      	itet	ge
 800c15a:	2300      	movge	r3, #0
 800c15c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c160:	f8c8 3000 	strge.w	r3, [r8]
 800c164:	4b9a      	ldr	r3, [pc, #616]	; (800c3d0 <_dtoa_r+0x2d8>)
 800c166:	bfbc      	itt	lt
 800c168:	2201      	movlt	r2, #1
 800c16a:	f8c8 2000 	strlt.w	r2, [r8]
 800c16e:	ea33 030b 	bics.w	r3, r3, fp
 800c172:	d11b      	bne.n	800c1ac <_dtoa_r+0xb4>
 800c174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c176:	f242 730f 	movw	r3, #9999	; 0x270f
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c180:	4333      	orrs	r3, r6
 800c182:	f000 8592 	beq.w	800ccaa <_dtoa_r+0xbb2>
 800c186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c188:	b963      	cbnz	r3, 800c1a4 <_dtoa_r+0xac>
 800c18a:	4b92      	ldr	r3, [pc, #584]	; (800c3d4 <_dtoa_r+0x2dc>)
 800c18c:	e022      	b.n	800c1d4 <_dtoa_r+0xdc>
 800c18e:	4b92      	ldr	r3, [pc, #584]	; (800c3d8 <_dtoa_r+0x2e0>)
 800c190:	9301      	str	r3, [sp, #4]
 800c192:	3308      	adds	r3, #8
 800c194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	9801      	ldr	r0, [sp, #4]
 800c19a:	b013      	add	sp, #76	; 0x4c
 800c19c:	ecbd 8b04 	vpop	{d8-d9}
 800c1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a4:	4b8b      	ldr	r3, [pc, #556]	; (800c3d4 <_dtoa_r+0x2dc>)
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	3303      	adds	r3, #3
 800c1aa:	e7f3      	b.n	800c194 <_dtoa_r+0x9c>
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	4650      	mov	r0, sl
 800c1b2:	4659      	mov	r1, fp
 800c1b4:	f7f4 fca8 	bl	8000b08 <__aeabi_dcmpeq>
 800c1b8:	ec4b ab19 	vmov	d9, sl, fp
 800c1bc:	4680      	mov	r8, r0
 800c1be:	b158      	cbz	r0, 800c1d8 <_dtoa_r+0xe0>
 800c1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 856b 	beq.w	800cca4 <_dtoa_r+0xbac>
 800c1ce:	4883      	ldr	r0, [pc, #524]	; (800c3dc <_dtoa_r+0x2e4>)
 800c1d0:	6018      	str	r0, [r3, #0]
 800c1d2:	1e43      	subs	r3, r0, #1
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	e7df      	b.n	800c198 <_dtoa_r+0xa0>
 800c1d8:	ec4b ab10 	vmov	d0, sl, fp
 800c1dc:	aa10      	add	r2, sp, #64	; 0x40
 800c1de:	a911      	add	r1, sp, #68	; 0x44
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f001 f8b9 	bl	800d358 <__d2b>
 800c1e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c1ea:	ee08 0a10 	vmov	s16, r0
 800c1ee:	2d00      	cmp	r5, #0
 800c1f0:	f000 8084 	beq.w	800c2fc <_dtoa_r+0x204>
 800c1f4:	ee19 3a90 	vmov	r3, s19
 800c1f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c200:	4656      	mov	r6, sl
 800c202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c20a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c20e:	4b74      	ldr	r3, [pc, #464]	; (800c3e0 <_dtoa_r+0x2e8>)
 800c210:	2200      	movs	r2, #0
 800c212:	4630      	mov	r0, r6
 800c214:	4639      	mov	r1, r7
 800c216:	f7f4 f857 	bl	80002c8 <__aeabi_dsub>
 800c21a:	a365      	add	r3, pc, #404	; (adr r3, 800c3b0 <_dtoa_r+0x2b8>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f7f4 fa0a 	bl	8000638 <__aeabi_dmul>
 800c224:	a364      	add	r3, pc, #400	; (adr r3, 800c3b8 <_dtoa_r+0x2c0>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	f7f4 f84f 	bl	80002cc <__adddf3>
 800c22e:	4606      	mov	r6, r0
 800c230:	4628      	mov	r0, r5
 800c232:	460f      	mov	r7, r1
 800c234:	f7f4 f996 	bl	8000564 <__aeabi_i2d>
 800c238:	a361      	add	r3, pc, #388	; (adr r3, 800c3c0 <_dtoa_r+0x2c8>)
 800c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23e:	f7f4 f9fb 	bl	8000638 <__aeabi_dmul>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	f7f4 f83f 	bl	80002cc <__adddf3>
 800c24e:	4606      	mov	r6, r0
 800c250:	460f      	mov	r7, r1
 800c252:	f7f4 fca1 	bl	8000b98 <__aeabi_d2iz>
 800c256:	2200      	movs	r2, #0
 800c258:	9000      	str	r0, [sp, #0]
 800c25a:	2300      	movs	r3, #0
 800c25c:	4630      	mov	r0, r6
 800c25e:	4639      	mov	r1, r7
 800c260:	f7f4 fc5c 	bl	8000b1c <__aeabi_dcmplt>
 800c264:	b150      	cbz	r0, 800c27c <_dtoa_r+0x184>
 800c266:	9800      	ldr	r0, [sp, #0]
 800c268:	f7f4 f97c 	bl	8000564 <__aeabi_i2d>
 800c26c:	4632      	mov	r2, r6
 800c26e:	463b      	mov	r3, r7
 800c270:	f7f4 fc4a 	bl	8000b08 <__aeabi_dcmpeq>
 800c274:	b910      	cbnz	r0, 800c27c <_dtoa_r+0x184>
 800c276:	9b00      	ldr	r3, [sp, #0]
 800c278:	3b01      	subs	r3, #1
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	9b00      	ldr	r3, [sp, #0]
 800c27e:	2b16      	cmp	r3, #22
 800c280:	d85a      	bhi.n	800c338 <_dtoa_r+0x240>
 800c282:	9a00      	ldr	r2, [sp, #0]
 800c284:	4b57      	ldr	r3, [pc, #348]	; (800c3e4 <_dtoa_r+0x2ec>)
 800c286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	ec51 0b19 	vmov	r0, r1, d9
 800c292:	f7f4 fc43 	bl	8000b1c <__aeabi_dcmplt>
 800c296:	2800      	cmp	r0, #0
 800c298:	d050      	beq.n	800c33c <_dtoa_r+0x244>
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2a6:	1b5d      	subs	r5, r3, r5
 800c2a8:	1e6b      	subs	r3, r5, #1
 800c2aa:	9305      	str	r3, [sp, #20]
 800c2ac:	bf45      	ittet	mi
 800c2ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800c2b2:	9304      	strmi	r3, [sp, #16]
 800c2b4:	2300      	movpl	r3, #0
 800c2b6:	2300      	movmi	r3, #0
 800c2b8:	bf4c      	ite	mi
 800c2ba:	9305      	strmi	r3, [sp, #20]
 800c2bc:	9304      	strpl	r3, [sp, #16]
 800c2be:	9b00      	ldr	r3, [sp, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	db3d      	blt.n	800c340 <_dtoa_r+0x248>
 800c2c4:	9b05      	ldr	r3, [sp, #20]
 800c2c6:	9a00      	ldr	r2, [sp, #0]
 800c2c8:	920a      	str	r2, [sp, #40]	; 0x28
 800c2ca:	4413      	add	r3, r2
 800c2cc:	9305      	str	r3, [sp, #20]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9307      	str	r3, [sp, #28]
 800c2d2:	9b06      	ldr	r3, [sp, #24]
 800c2d4:	2b09      	cmp	r3, #9
 800c2d6:	f200 8089 	bhi.w	800c3ec <_dtoa_r+0x2f4>
 800c2da:	2b05      	cmp	r3, #5
 800c2dc:	bfc4      	itt	gt
 800c2de:	3b04      	subgt	r3, #4
 800c2e0:	9306      	strgt	r3, [sp, #24]
 800c2e2:	9b06      	ldr	r3, [sp, #24]
 800c2e4:	f1a3 0302 	sub.w	r3, r3, #2
 800c2e8:	bfcc      	ite	gt
 800c2ea:	2500      	movgt	r5, #0
 800c2ec:	2501      	movle	r5, #1
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	f200 8087 	bhi.w	800c402 <_dtoa_r+0x30a>
 800c2f4:	e8df f003 	tbb	[pc, r3]
 800c2f8:	59383a2d 	.word	0x59383a2d
 800c2fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c300:	441d      	add	r5, r3
 800c302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c306:	2b20      	cmp	r3, #32
 800c308:	bfc1      	itttt	gt
 800c30a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c30e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c312:	fa0b f303 	lslgt.w	r3, fp, r3
 800c316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c31a:	bfda      	itte	le
 800c31c:	f1c3 0320 	rsble	r3, r3, #32
 800c320:	fa06 f003 	lslle.w	r0, r6, r3
 800c324:	4318      	orrgt	r0, r3
 800c326:	f7f4 f90d 	bl	8000544 <__aeabi_ui2d>
 800c32a:	2301      	movs	r3, #1
 800c32c:	4606      	mov	r6, r0
 800c32e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c332:	3d01      	subs	r5, #1
 800c334:	930e      	str	r3, [sp, #56]	; 0x38
 800c336:	e76a      	b.n	800c20e <_dtoa_r+0x116>
 800c338:	2301      	movs	r3, #1
 800c33a:	e7b2      	b.n	800c2a2 <_dtoa_r+0x1aa>
 800c33c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c33e:	e7b1      	b.n	800c2a4 <_dtoa_r+0x1ac>
 800c340:	9b04      	ldr	r3, [sp, #16]
 800c342:	9a00      	ldr	r2, [sp, #0]
 800c344:	1a9b      	subs	r3, r3, r2
 800c346:	9304      	str	r3, [sp, #16]
 800c348:	4253      	negs	r3, r2
 800c34a:	9307      	str	r3, [sp, #28]
 800c34c:	2300      	movs	r3, #0
 800c34e:	930a      	str	r3, [sp, #40]	; 0x28
 800c350:	e7bf      	b.n	800c2d2 <_dtoa_r+0x1da>
 800c352:	2300      	movs	r3, #0
 800c354:	9308      	str	r3, [sp, #32]
 800c356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dc55      	bgt.n	800c408 <_dtoa_r+0x310>
 800c35c:	2301      	movs	r3, #1
 800c35e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c362:	461a      	mov	r2, r3
 800c364:	9209      	str	r2, [sp, #36]	; 0x24
 800c366:	e00c      	b.n	800c382 <_dtoa_r+0x28a>
 800c368:	2301      	movs	r3, #1
 800c36a:	e7f3      	b.n	800c354 <_dtoa_r+0x25c>
 800c36c:	2300      	movs	r3, #0
 800c36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c370:	9308      	str	r3, [sp, #32]
 800c372:	9b00      	ldr	r3, [sp, #0]
 800c374:	4413      	add	r3, r2
 800c376:	9302      	str	r3, [sp, #8]
 800c378:	3301      	adds	r3, #1
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	9303      	str	r3, [sp, #12]
 800c37e:	bfb8      	it	lt
 800c380:	2301      	movlt	r3, #1
 800c382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c384:	2200      	movs	r2, #0
 800c386:	6042      	str	r2, [r0, #4]
 800c388:	2204      	movs	r2, #4
 800c38a:	f102 0614 	add.w	r6, r2, #20
 800c38e:	429e      	cmp	r6, r3
 800c390:	6841      	ldr	r1, [r0, #4]
 800c392:	d93d      	bls.n	800c410 <_dtoa_r+0x318>
 800c394:	4620      	mov	r0, r4
 800c396:	f000 fcb7 	bl	800cd08 <_Balloc>
 800c39a:	9001      	str	r0, [sp, #4]
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d13b      	bne.n	800c418 <_dtoa_r+0x320>
 800c3a0:	4b11      	ldr	r3, [pc, #68]	; (800c3e8 <_dtoa_r+0x2f0>)
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c3a8:	e6c0      	b.n	800c12c <_dtoa_r+0x34>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e7df      	b.n	800c36e <_dtoa_r+0x276>
 800c3ae:	bf00      	nop
 800c3b0:	636f4361 	.word	0x636f4361
 800c3b4:	3fd287a7 	.word	0x3fd287a7
 800c3b8:	8b60c8b3 	.word	0x8b60c8b3
 800c3bc:	3fc68a28 	.word	0x3fc68a28
 800c3c0:	509f79fb 	.word	0x509f79fb
 800c3c4:	3fd34413 	.word	0x3fd34413
 800c3c8:	0800fae5 	.word	0x0800fae5
 800c3cc:	0800fafc 	.word	0x0800fafc
 800c3d0:	7ff00000 	.word	0x7ff00000
 800c3d4:	0800fae1 	.word	0x0800fae1
 800c3d8:	0800fad8 	.word	0x0800fad8
 800c3dc:	0800fab5 	.word	0x0800fab5
 800c3e0:	3ff80000 	.word	0x3ff80000
 800c3e4:	0800fbf0 	.word	0x0800fbf0
 800c3e8:	0800fb57 	.word	0x0800fb57
 800c3ec:	2501      	movs	r5, #1
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	9306      	str	r3, [sp, #24]
 800c3f2:	9508      	str	r5, [sp, #32]
 800c3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2312      	movs	r3, #18
 800c400:	e7b0      	b.n	800c364 <_dtoa_r+0x26c>
 800c402:	2301      	movs	r3, #1
 800c404:	9308      	str	r3, [sp, #32]
 800c406:	e7f5      	b.n	800c3f4 <_dtoa_r+0x2fc>
 800c408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c40e:	e7b8      	b.n	800c382 <_dtoa_r+0x28a>
 800c410:	3101      	adds	r1, #1
 800c412:	6041      	str	r1, [r0, #4]
 800c414:	0052      	lsls	r2, r2, #1
 800c416:	e7b8      	b.n	800c38a <_dtoa_r+0x292>
 800c418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c41a:	9a01      	ldr	r2, [sp, #4]
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	2b0e      	cmp	r3, #14
 800c422:	f200 809d 	bhi.w	800c560 <_dtoa_r+0x468>
 800c426:	2d00      	cmp	r5, #0
 800c428:	f000 809a 	beq.w	800c560 <_dtoa_r+0x468>
 800c42c:	9b00      	ldr	r3, [sp, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dd32      	ble.n	800c498 <_dtoa_r+0x3a0>
 800c432:	4ab7      	ldr	r2, [pc, #732]	; (800c710 <_dtoa_r+0x618>)
 800c434:	f003 030f 	and.w	r3, r3, #15
 800c438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c43c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c440:	9b00      	ldr	r3, [sp, #0]
 800c442:	05d8      	lsls	r0, r3, #23
 800c444:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c448:	d516      	bpl.n	800c478 <_dtoa_r+0x380>
 800c44a:	4bb2      	ldr	r3, [pc, #712]	; (800c714 <_dtoa_r+0x61c>)
 800c44c:	ec51 0b19 	vmov	r0, r1, d9
 800c450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c454:	f7f4 fa1a 	bl	800088c <__aeabi_ddiv>
 800c458:	f007 070f 	and.w	r7, r7, #15
 800c45c:	4682      	mov	sl, r0
 800c45e:	468b      	mov	fp, r1
 800c460:	2503      	movs	r5, #3
 800c462:	4eac      	ldr	r6, [pc, #688]	; (800c714 <_dtoa_r+0x61c>)
 800c464:	b957      	cbnz	r7, 800c47c <_dtoa_r+0x384>
 800c466:	4642      	mov	r2, r8
 800c468:	464b      	mov	r3, r9
 800c46a:	4650      	mov	r0, sl
 800c46c:	4659      	mov	r1, fp
 800c46e:	f7f4 fa0d 	bl	800088c <__aeabi_ddiv>
 800c472:	4682      	mov	sl, r0
 800c474:	468b      	mov	fp, r1
 800c476:	e028      	b.n	800c4ca <_dtoa_r+0x3d2>
 800c478:	2502      	movs	r5, #2
 800c47a:	e7f2      	b.n	800c462 <_dtoa_r+0x36a>
 800c47c:	07f9      	lsls	r1, r7, #31
 800c47e:	d508      	bpl.n	800c492 <_dtoa_r+0x39a>
 800c480:	4640      	mov	r0, r8
 800c482:	4649      	mov	r1, r9
 800c484:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c488:	f7f4 f8d6 	bl	8000638 <__aeabi_dmul>
 800c48c:	3501      	adds	r5, #1
 800c48e:	4680      	mov	r8, r0
 800c490:	4689      	mov	r9, r1
 800c492:	107f      	asrs	r7, r7, #1
 800c494:	3608      	adds	r6, #8
 800c496:	e7e5      	b.n	800c464 <_dtoa_r+0x36c>
 800c498:	f000 809b 	beq.w	800c5d2 <_dtoa_r+0x4da>
 800c49c:	9b00      	ldr	r3, [sp, #0]
 800c49e:	4f9d      	ldr	r7, [pc, #628]	; (800c714 <_dtoa_r+0x61c>)
 800c4a0:	425e      	negs	r6, r3
 800c4a2:	4b9b      	ldr	r3, [pc, #620]	; (800c710 <_dtoa_r+0x618>)
 800c4a4:	f006 020f 	and.w	r2, r6, #15
 800c4a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	ec51 0b19 	vmov	r0, r1, d9
 800c4b4:	f7f4 f8c0 	bl	8000638 <__aeabi_dmul>
 800c4b8:	1136      	asrs	r6, r6, #4
 800c4ba:	4682      	mov	sl, r0
 800c4bc:	468b      	mov	fp, r1
 800c4be:	2300      	movs	r3, #0
 800c4c0:	2502      	movs	r5, #2
 800c4c2:	2e00      	cmp	r6, #0
 800c4c4:	d17a      	bne.n	800c5bc <_dtoa_r+0x4c4>
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1d3      	bne.n	800c472 <_dtoa_r+0x37a>
 800c4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 8082 	beq.w	800c5d6 <_dtoa_r+0x4de>
 800c4d2:	4b91      	ldr	r3, [pc, #580]	; (800c718 <_dtoa_r+0x620>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	4650      	mov	r0, sl
 800c4d8:	4659      	mov	r1, fp
 800c4da:	f7f4 fb1f 	bl	8000b1c <__aeabi_dcmplt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d079      	beq.n	800c5d6 <_dtoa_r+0x4de>
 800c4e2:	9b03      	ldr	r3, [sp, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d076      	beq.n	800c5d6 <_dtoa_r+0x4de>
 800c4e8:	9b02      	ldr	r3, [sp, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	dd36      	ble.n	800c55c <_dtoa_r+0x464>
 800c4ee:	9b00      	ldr	r3, [sp, #0]
 800c4f0:	4650      	mov	r0, sl
 800c4f2:	4659      	mov	r1, fp
 800c4f4:	1e5f      	subs	r7, r3, #1
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4b88      	ldr	r3, [pc, #544]	; (800c71c <_dtoa_r+0x624>)
 800c4fa:	f7f4 f89d 	bl	8000638 <__aeabi_dmul>
 800c4fe:	9e02      	ldr	r6, [sp, #8]
 800c500:	4682      	mov	sl, r0
 800c502:	468b      	mov	fp, r1
 800c504:	3501      	adds	r5, #1
 800c506:	4628      	mov	r0, r5
 800c508:	f7f4 f82c 	bl	8000564 <__aeabi_i2d>
 800c50c:	4652      	mov	r2, sl
 800c50e:	465b      	mov	r3, fp
 800c510:	f7f4 f892 	bl	8000638 <__aeabi_dmul>
 800c514:	4b82      	ldr	r3, [pc, #520]	; (800c720 <_dtoa_r+0x628>)
 800c516:	2200      	movs	r2, #0
 800c518:	f7f3 fed8 	bl	80002cc <__adddf3>
 800c51c:	46d0      	mov	r8, sl
 800c51e:	46d9      	mov	r9, fp
 800c520:	4682      	mov	sl, r0
 800c522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c526:	2e00      	cmp	r6, #0
 800c528:	d158      	bne.n	800c5dc <_dtoa_r+0x4e4>
 800c52a:	4b7e      	ldr	r3, [pc, #504]	; (800c724 <_dtoa_r+0x62c>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	4640      	mov	r0, r8
 800c530:	4649      	mov	r1, r9
 800c532:	f7f3 fec9 	bl	80002c8 <__aeabi_dsub>
 800c536:	4652      	mov	r2, sl
 800c538:	465b      	mov	r3, fp
 800c53a:	4680      	mov	r8, r0
 800c53c:	4689      	mov	r9, r1
 800c53e:	f7f4 fb0b 	bl	8000b58 <__aeabi_dcmpgt>
 800c542:	2800      	cmp	r0, #0
 800c544:	f040 8295 	bne.w	800ca72 <_dtoa_r+0x97a>
 800c548:	4652      	mov	r2, sl
 800c54a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c54e:	4640      	mov	r0, r8
 800c550:	4649      	mov	r1, r9
 800c552:	f7f4 fae3 	bl	8000b1c <__aeabi_dcmplt>
 800c556:	2800      	cmp	r0, #0
 800c558:	f040 8289 	bne.w	800ca6e <_dtoa_r+0x976>
 800c55c:	ec5b ab19 	vmov	sl, fp, d9
 800c560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c562:	2b00      	cmp	r3, #0
 800c564:	f2c0 8148 	blt.w	800c7f8 <_dtoa_r+0x700>
 800c568:	9a00      	ldr	r2, [sp, #0]
 800c56a:	2a0e      	cmp	r2, #14
 800c56c:	f300 8144 	bgt.w	800c7f8 <_dtoa_r+0x700>
 800c570:	4b67      	ldr	r3, [pc, #412]	; (800c710 <_dtoa_r+0x618>)
 800c572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f280 80d5 	bge.w	800c72c <_dtoa_r+0x634>
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	f300 80d1 	bgt.w	800c72c <_dtoa_r+0x634>
 800c58a:	f040 826f 	bne.w	800ca6c <_dtoa_r+0x974>
 800c58e:	4b65      	ldr	r3, [pc, #404]	; (800c724 <_dtoa_r+0x62c>)
 800c590:	2200      	movs	r2, #0
 800c592:	4640      	mov	r0, r8
 800c594:	4649      	mov	r1, r9
 800c596:	f7f4 f84f 	bl	8000638 <__aeabi_dmul>
 800c59a:	4652      	mov	r2, sl
 800c59c:	465b      	mov	r3, fp
 800c59e:	f7f4 fad1 	bl	8000b44 <__aeabi_dcmpge>
 800c5a2:	9e03      	ldr	r6, [sp, #12]
 800c5a4:	4637      	mov	r7, r6
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f040 8245 	bne.w	800ca36 <_dtoa_r+0x93e>
 800c5ac:	9d01      	ldr	r5, [sp, #4]
 800c5ae:	2331      	movs	r3, #49	; 0x31
 800c5b0:	f805 3b01 	strb.w	r3, [r5], #1
 800c5b4:	9b00      	ldr	r3, [sp, #0]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	e240      	b.n	800ca3e <_dtoa_r+0x946>
 800c5bc:	07f2      	lsls	r2, r6, #31
 800c5be:	d505      	bpl.n	800c5cc <_dtoa_r+0x4d4>
 800c5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c4:	f7f4 f838 	bl	8000638 <__aeabi_dmul>
 800c5c8:	3501      	adds	r5, #1
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	1076      	asrs	r6, r6, #1
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	e777      	b.n	800c4c2 <_dtoa_r+0x3ca>
 800c5d2:	2502      	movs	r5, #2
 800c5d4:	e779      	b.n	800c4ca <_dtoa_r+0x3d2>
 800c5d6:	9f00      	ldr	r7, [sp, #0]
 800c5d8:	9e03      	ldr	r6, [sp, #12]
 800c5da:	e794      	b.n	800c506 <_dtoa_r+0x40e>
 800c5dc:	9901      	ldr	r1, [sp, #4]
 800c5de:	4b4c      	ldr	r3, [pc, #304]	; (800c710 <_dtoa_r+0x618>)
 800c5e0:	4431      	add	r1, r6
 800c5e2:	910d      	str	r1, [sp, #52]	; 0x34
 800c5e4:	9908      	ldr	r1, [sp, #32]
 800c5e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5ee:	2900      	cmp	r1, #0
 800c5f0:	d043      	beq.n	800c67a <_dtoa_r+0x582>
 800c5f2:	494d      	ldr	r1, [pc, #308]	; (800c728 <_dtoa_r+0x630>)
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	f7f4 f949 	bl	800088c <__aeabi_ddiv>
 800c5fa:	4652      	mov	r2, sl
 800c5fc:	465b      	mov	r3, fp
 800c5fe:	f7f3 fe63 	bl	80002c8 <__aeabi_dsub>
 800c602:	9d01      	ldr	r5, [sp, #4]
 800c604:	4682      	mov	sl, r0
 800c606:	468b      	mov	fp, r1
 800c608:	4649      	mov	r1, r9
 800c60a:	4640      	mov	r0, r8
 800c60c:	f7f4 fac4 	bl	8000b98 <__aeabi_d2iz>
 800c610:	4606      	mov	r6, r0
 800c612:	f7f3 ffa7 	bl	8000564 <__aeabi_i2d>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	4640      	mov	r0, r8
 800c61c:	4649      	mov	r1, r9
 800c61e:	f7f3 fe53 	bl	80002c8 <__aeabi_dsub>
 800c622:	3630      	adds	r6, #48	; 0x30
 800c624:	f805 6b01 	strb.w	r6, [r5], #1
 800c628:	4652      	mov	r2, sl
 800c62a:	465b      	mov	r3, fp
 800c62c:	4680      	mov	r8, r0
 800c62e:	4689      	mov	r9, r1
 800c630:	f7f4 fa74 	bl	8000b1c <__aeabi_dcmplt>
 800c634:	2800      	cmp	r0, #0
 800c636:	d163      	bne.n	800c700 <_dtoa_r+0x608>
 800c638:	4642      	mov	r2, r8
 800c63a:	464b      	mov	r3, r9
 800c63c:	4936      	ldr	r1, [pc, #216]	; (800c718 <_dtoa_r+0x620>)
 800c63e:	2000      	movs	r0, #0
 800c640:	f7f3 fe42 	bl	80002c8 <__aeabi_dsub>
 800c644:	4652      	mov	r2, sl
 800c646:	465b      	mov	r3, fp
 800c648:	f7f4 fa68 	bl	8000b1c <__aeabi_dcmplt>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	f040 80b5 	bne.w	800c7bc <_dtoa_r+0x6c4>
 800c652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c654:	429d      	cmp	r5, r3
 800c656:	d081      	beq.n	800c55c <_dtoa_r+0x464>
 800c658:	4b30      	ldr	r3, [pc, #192]	; (800c71c <_dtoa_r+0x624>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	4650      	mov	r0, sl
 800c65e:	4659      	mov	r1, fp
 800c660:	f7f3 ffea 	bl	8000638 <__aeabi_dmul>
 800c664:	4b2d      	ldr	r3, [pc, #180]	; (800c71c <_dtoa_r+0x624>)
 800c666:	4682      	mov	sl, r0
 800c668:	468b      	mov	fp, r1
 800c66a:	4640      	mov	r0, r8
 800c66c:	4649      	mov	r1, r9
 800c66e:	2200      	movs	r2, #0
 800c670:	f7f3 ffe2 	bl	8000638 <__aeabi_dmul>
 800c674:	4680      	mov	r8, r0
 800c676:	4689      	mov	r9, r1
 800c678:	e7c6      	b.n	800c608 <_dtoa_r+0x510>
 800c67a:	4650      	mov	r0, sl
 800c67c:	4659      	mov	r1, fp
 800c67e:	f7f3 ffdb 	bl	8000638 <__aeabi_dmul>
 800c682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c684:	9d01      	ldr	r5, [sp, #4]
 800c686:	930f      	str	r3, [sp, #60]	; 0x3c
 800c688:	4682      	mov	sl, r0
 800c68a:	468b      	mov	fp, r1
 800c68c:	4649      	mov	r1, r9
 800c68e:	4640      	mov	r0, r8
 800c690:	f7f4 fa82 	bl	8000b98 <__aeabi_d2iz>
 800c694:	4606      	mov	r6, r0
 800c696:	f7f3 ff65 	bl	8000564 <__aeabi_i2d>
 800c69a:	3630      	adds	r6, #48	; 0x30
 800c69c:	4602      	mov	r2, r0
 800c69e:	460b      	mov	r3, r1
 800c6a0:	4640      	mov	r0, r8
 800c6a2:	4649      	mov	r1, r9
 800c6a4:	f7f3 fe10 	bl	80002c8 <__aeabi_dsub>
 800c6a8:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ae:	429d      	cmp	r5, r3
 800c6b0:	4680      	mov	r8, r0
 800c6b2:	4689      	mov	r9, r1
 800c6b4:	f04f 0200 	mov.w	r2, #0
 800c6b8:	d124      	bne.n	800c704 <_dtoa_r+0x60c>
 800c6ba:	4b1b      	ldr	r3, [pc, #108]	; (800c728 <_dtoa_r+0x630>)
 800c6bc:	4650      	mov	r0, sl
 800c6be:	4659      	mov	r1, fp
 800c6c0:	f7f3 fe04 	bl	80002cc <__adddf3>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	4649      	mov	r1, r9
 800c6cc:	f7f4 fa44 	bl	8000b58 <__aeabi_dcmpgt>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d173      	bne.n	800c7bc <_dtoa_r+0x6c4>
 800c6d4:	4652      	mov	r2, sl
 800c6d6:	465b      	mov	r3, fp
 800c6d8:	4913      	ldr	r1, [pc, #76]	; (800c728 <_dtoa_r+0x630>)
 800c6da:	2000      	movs	r0, #0
 800c6dc:	f7f3 fdf4 	bl	80002c8 <__aeabi_dsub>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	f7f4 fa18 	bl	8000b1c <__aeabi_dcmplt>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f43f af35 	beq.w	800c55c <_dtoa_r+0x464>
 800c6f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c6f4:	1e6b      	subs	r3, r5, #1
 800c6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6fc:	2b30      	cmp	r3, #48	; 0x30
 800c6fe:	d0f8      	beq.n	800c6f2 <_dtoa_r+0x5fa>
 800c700:	9700      	str	r7, [sp, #0]
 800c702:	e049      	b.n	800c798 <_dtoa_r+0x6a0>
 800c704:	4b05      	ldr	r3, [pc, #20]	; (800c71c <_dtoa_r+0x624>)
 800c706:	f7f3 ff97 	bl	8000638 <__aeabi_dmul>
 800c70a:	4680      	mov	r8, r0
 800c70c:	4689      	mov	r9, r1
 800c70e:	e7bd      	b.n	800c68c <_dtoa_r+0x594>
 800c710:	0800fbf0 	.word	0x0800fbf0
 800c714:	0800fbc8 	.word	0x0800fbc8
 800c718:	3ff00000 	.word	0x3ff00000
 800c71c:	40240000 	.word	0x40240000
 800c720:	401c0000 	.word	0x401c0000
 800c724:	40140000 	.word	0x40140000
 800c728:	3fe00000 	.word	0x3fe00000
 800c72c:	9d01      	ldr	r5, [sp, #4]
 800c72e:	4656      	mov	r6, sl
 800c730:	465f      	mov	r7, fp
 800c732:	4642      	mov	r2, r8
 800c734:	464b      	mov	r3, r9
 800c736:	4630      	mov	r0, r6
 800c738:	4639      	mov	r1, r7
 800c73a:	f7f4 f8a7 	bl	800088c <__aeabi_ddiv>
 800c73e:	f7f4 fa2b 	bl	8000b98 <__aeabi_d2iz>
 800c742:	4682      	mov	sl, r0
 800c744:	f7f3 ff0e 	bl	8000564 <__aeabi_i2d>
 800c748:	4642      	mov	r2, r8
 800c74a:	464b      	mov	r3, r9
 800c74c:	f7f3 ff74 	bl	8000638 <__aeabi_dmul>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4630      	mov	r0, r6
 800c756:	4639      	mov	r1, r7
 800c758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c75c:	f7f3 fdb4 	bl	80002c8 <__aeabi_dsub>
 800c760:	f805 6b01 	strb.w	r6, [r5], #1
 800c764:	9e01      	ldr	r6, [sp, #4]
 800c766:	9f03      	ldr	r7, [sp, #12]
 800c768:	1bae      	subs	r6, r5, r6
 800c76a:	42b7      	cmp	r7, r6
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	d135      	bne.n	800c7de <_dtoa_r+0x6e6>
 800c772:	f7f3 fdab 	bl	80002cc <__adddf3>
 800c776:	4642      	mov	r2, r8
 800c778:	464b      	mov	r3, r9
 800c77a:	4606      	mov	r6, r0
 800c77c:	460f      	mov	r7, r1
 800c77e:	f7f4 f9eb 	bl	8000b58 <__aeabi_dcmpgt>
 800c782:	b9d0      	cbnz	r0, 800c7ba <_dtoa_r+0x6c2>
 800c784:	4642      	mov	r2, r8
 800c786:	464b      	mov	r3, r9
 800c788:	4630      	mov	r0, r6
 800c78a:	4639      	mov	r1, r7
 800c78c:	f7f4 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 800c790:	b110      	cbz	r0, 800c798 <_dtoa_r+0x6a0>
 800c792:	f01a 0f01 	tst.w	sl, #1
 800c796:	d110      	bne.n	800c7ba <_dtoa_r+0x6c2>
 800c798:	4620      	mov	r0, r4
 800c79a:	ee18 1a10 	vmov	r1, s16
 800c79e:	f000 faf3 	bl	800cd88 <_Bfree>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9800      	ldr	r0, [sp, #0]
 800c7a6:	702b      	strb	r3, [r5, #0]
 800c7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	6018      	str	r0, [r3, #0]
 800c7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f43f acf1 	beq.w	800c198 <_dtoa_r+0xa0>
 800c7b6:	601d      	str	r5, [r3, #0]
 800c7b8:	e4ee      	b.n	800c198 <_dtoa_r+0xa0>
 800c7ba:	9f00      	ldr	r7, [sp, #0]
 800c7bc:	462b      	mov	r3, r5
 800c7be:	461d      	mov	r5, r3
 800c7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7c4:	2a39      	cmp	r2, #57	; 0x39
 800c7c6:	d106      	bne.n	800c7d6 <_dtoa_r+0x6de>
 800c7c8:	9a01      	ldr	r2, [sp, #4]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d1f7      	bne.n	800c7be <_dtoa_r+0x6c6>
 800c7ce:	9901      	ldr	r1, [sp, #4]
 800c7d0:	2230      	movs	r2, #48	; 0x30
 800c7d2:	3701      	adds	r7, #1
 800c7d4:	700a      	strb	r2, [r1, #0]
 800c7d6:	781a      	ldrb	r2, [r3, #0]
 800c7d8:	3201      	adds	r2, #1
 800c7da:	701a      	strb	r2, [r3, #0]
 800c7dc:	e790      	b.n	800c700 <_dtoa_r+0x608>
 800c7de:	4ba6      	ldr	r3, [pc, #664]	; (800ca78 <_dtoa_r+0x980>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f7f3 ff29 	bl	8000638 <__aeabi_dmul>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	460f      	mov	r7, r1
 800c7ee:	f7f4 f98b 	bl	8000b08 <__aeabi_dcmpeq>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d09d      	beq.n	800c732 <_dtoa_r+0x63a>
 800c7f6:	e7cf      	b.n	800c798 <_dtoa_r+0x6a0>
 800c7f8:	9a08      	ldr	r2, [sp, #32]
 800c7fa:	2a00      	cmp	r2, #0
 800c7fc:	f000 80d7 	beq.w	800c9ae <_dtoa_r+0x8b6>
 800c800:	9a06      	ldr	r2, [sp, #24]
 800c802:	2a01      	cmp	r2, #1
 800c804:	f300 80ba 	bgt.w	800c97c <_dtoa_r+0x884>
 800c808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c80a:	2a00      	cmp	r2, #0
 800c80c:	f000 80b2 	beq.w	800c974 <_dtoa_r+0x87c>
 800c810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c814:	9e07      	ldr	r6, [sp, #28]
 800c816:	9d04      	ldr	r5, [sp, #16]
 800c818:	9a04      	ldr	r2, [sp, #16]
 800c81a:	441a      	add	r2, r3
 800c81c:	9204      	str	r2, [sp, #16]
 800c81e:	9a05      	ldr	r2, [sp, #20]
 800c820:	2101      	movs	r1, #1
 800c822:	441a      	add	r2, r3
 800c824:	4620      	mov	r0, r4
 800c826:	9205      	str	r2, [sp, #20]
 800c828:	f000 fb66 	bl	800cef8 <__i2b>
 800c82c:	4607      	mov	r7, r0
 800c82e:	2d00      	cmp	r5, #0
 800c830:	dd0c      	ble.n	800c84c <_dtoa_r+0x754>
 800c832:	9b05      	ldr	r3, [sp, #20]
 800c834:	2b00      	cmp	r3, #0
 800c836:	dd09      	ble.n	800c84c <_dtoa_r+0x754>
 800c838:	42ab      	cmp	r3, r5
 800c83a:	9a04      	ldr	r2, [sp, #16]
 800c83c:	bfa8      	it	ge
 800c83e:	462b      	movge	r3, r5
 800c840:	1ad2      	subs	r2, r2, r3
 800c842:	9204      	str	r2, [sp, #16]
 800c844:	9a05      	ldr	r2, [sp, #20]
 800c846:	1aed      	subs	r5, r5, r3
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	9305      	str	r3, [sp, #20]
 800c84c:	9b07      	ldr	r3, [sp, #28]
 800c84e:	b31b      	cbz	r3, 800c898 <_dtoa_r+0x7a0>
 800c850:	9b08      	ldr	r3, [sp, #32]
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 80af 	beq.w	800c9b6 <_dtoa_r+0x8be>
 800c858:	2e00      	cmp	r6, #0
 800c85a:	dd13      	ble.n	800c884 <_dtoa_r+0x78c>
 800c85c:	4639      	mov	r1, r7
 800c85e:	4632      	mov	r2, r6
 800c860:	4620      	mov	r0, r4
 800c862:	f000 fc09 	bl	800d078 <__pow5mult>
 800c866:	ee18 2a10 	vmov	r2, s16
 800c86a:	4601      	mov	r1, r0
 800c86c:	4607      	mov	r7, r0
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 fb58 	bl	800cf24 <__multiply>
 800c874:	ee18 1a10 	vmov	r1, s16
 800c878:	4680      	mov	r8, r0
 800c87a:	4620      	mov	r0, r4
 800c87c:	f000 fa84 	bl	800cd88 <_Bfree>
 800c880:	ee08 8a10 	vmov	s16, r8
 800c884:	9b07      	ldr	r3, [sp, #28]
 800c886:	1b9a      	subs	r2, r3, r6
 800c888:	d006      	beq.n	800c898 <_dtoa_r+0x7a0>
 800c88a:	ee18 1a10 	vmov	r1, s16
 800c88e:	4620      	mov	r0, r4
 800c890:	f000 fbf2 	bl	800d078 <__pow5mult>
 800c894:	ee08 0a10 	vmov	s16, r0
 800c898:	2101      	movs	r1, #1
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 fb2c 	bl	800cef8 <__i2b>
 800c8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	f340 8088 	ble.w	800c9ba <_dtoa_r+0x8c2>
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	4601      	mov	r1, r0
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 fbe2 	bl	800d078 <__pow5mult>
 800c8b4:	9b06      	ldr	r3, [sp, #24]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	f340 8081 	ble.w	800c9c0 <_dtoa_r+0x8c8>
 800c8be:	f04f 0800 	mov.w	r8, #0
 800c8c2:	6933      	ldr	r3, [r6, #16]
 800c8c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8c8:	6918      	ldr	r0, [r3, #16]
 800c8ca:	f000 fac5 	bl	800ce58 <__hi0bits>
 800c8ce:	f1c0 0020 	rsb	r0, r0, #32
 800c8d2:	9b05      	ldr	r3, [sp, #20]
 800c8d4:	4418      	add	r0, r3
 800c8d6:	f010 001f 	ands.w	r0, r0, #31
 800c8da:	f000 8092 	beq.w	800ca02 <_dtoa_r+0x90a>
 800c8de:	f1c0 0320 	rsb	r3, r0, #32
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	f340 808a 	ble.w	800c9fc <_dtoa_r+0x904>
 800c8e8:	f1c0 001c 	rsb	r0, r0, #28
 800c8ec:	9b04      	ldr	r3, [sp, #16]
 800c8ee:	4403      	add	r3, r0
 800c8f0:	9304      	str	r3, [sp, #16]
 800c8f2:	9b05      	ldr	r3, [sp, #20]
 800c8f4:	4403      	add	r3, r0
 800c8f6:	4405      	add	r5, r0
 800c8f8:	9305      	str	r3, [sp, #20]
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	dd07      	ble.n	800c910 <_dtoa_r+0x818>
 800c900:	ee18 1a10 	vmov	r1, s16
 800c904:	461a      	mov	r2, r3
 800c906:	4620      	mov	r0, r4
 800c908:	f000 fc10 	bl	800d12c <__lshift>
 800c90c:	ee08 0a10 	vmov	s16, r0
 800c910:	9b05      	ldr	r3, [sp, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	dd05      	ble.n	800c922 <_dtoa_r+0x82a>
 800c916:	4631      	mov	r1, r6
 800c918:	461a      	mov	r2, r3
 800c91a:	4620      	mov	r0, r4
 800c91c:	f000 fc06 	bl	800d12c <__lshift>
 800c920:	4606      	mov	r6, r0
 800c922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c924:	2b00      	cmp	r3, #0
 800c926:	d06e      	beq.n	800ca06 <_dtoa_r+0x90e>
 800c928:	ee18 0a10 	vmov	r0, s16
 800c92c:	4631      	mov	r1, r6
 800c92e:	f000 fc6d 	bl	800d20c <__mcmp>
 800c932:	2800      	cmp	r0, #0
 800c934:	da67      	bge.n	800ca06 <_dtoa_r+0x90e>
 800c936:	9b00      	ldr	r3, [sp, #0]
 800c938:	3b01      	subs	r3, #1
 800c93a:	ee18 1a10 	vmov	r1, s16
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	220a      	movs	r2, #10
 800c942:	2300      	movs	r3, #0
 800c944:	4620      	mov	r0, r4
 800c946:	f000 fa41 	bl	800cdcc <__multadd>
 800c94a:	9b08      	ldr	r3, [sp, #32]
 800c94c:	ee08 0a10 	vmov	s16, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 81b1 	beq.w	800ccb8 <_dtoa_r+0xbc0>
 800c956:	2300      	movs	r3, #0
 800c958:	4639      	mov	r1, r7
 800c95a:	220a      	movs	r2, #10
 800c95c:	4620      	mov	r0, r4
 800c95e:	f000 fa35 	bl	800cdcc <__multadd>
 800c962:	9b02      	ldr	r3, [sp, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	4607      	mov	r7, r0
 800c968:	f300 808e 	bgt.w	800ca88 <_dtoa_r+0x990>
 800c96c:	9b06      	ldr	r3, [sp, #24]
 800c96e:	2b02      	cmp	r3, #2
 800c970:	dc51      	bgt.n	800ca16 <_dtoa_r+0x91e>
 800c972:	e089      	b.n	800ca88 <_dtoa_r+0x990>
 800c974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c97a:	e74b      	b.n	800c814 <_dtoa_r+0x71c>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	1e5e      	subs	r6, r3, #1
 800c980:	9b07      	ldr	r3, [sp, #28]
 800c982:	42b3      	cmp	r3, r6
 800c984:	bfbf      	itttt	lt
 800c986:	9b07      	ldrlt	r3, [sp, #28]
 800c988:	9607      	strlt	r6, [sp, #28]
 800c98a:	1af2      	sublt	r2, r6, r3
 800c98c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c98e:	bfb6      	itet	lt
 800c990:	189b      	addlt	r3, r3, r2
 800c992:	1b9e      	subge	r6, r3, r6
 800c994:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c996:	9b03      	ldr	r3, [sp, #12]
 800c998:	bfb8      	it	lt
 800c99a:	2600      	movlt	r6, #0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	bfb7      	itett	lt
 800c9a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c9a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c9a8:	1a9d      	sublt	r5, r3, r2
 800c9aa:	2300      	movlt	r3, #0
 800c9ac:	e734      	b.n	800c818 <_dtoa_r+0x720>
 800c9ae:	9e07      	ldr	r6, [sp, #28]
 800c9b0:	9d04      	ldr	r5, [sp, #16]
 800c9b2:	9f08      	ldr	r7, [sp, #32]
 800c9b4:	e73b      	b.n	800c82e <_dtoa_r+0x736>
 800c9b6:	9a07      	ldr	r2, [sp, #28]
 800c9b8:	e767      	b.n	800c88a <_dtoa_r+0x792>
 800c9ba:	9b06      	ldr	r3, [sp, #24]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	dc18      	bgt.n	800c9f2 <_dtoa_r+0x8fa>
 800c9c0:	f1ba 0f00 	cmp.w	sl, #0
 800c9c4:	d115      	bne.n	800c9f2 <_dtoa_r+0x8fa>
 800c9c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9ca:	b993      	cbnz	r3, 800c9f2 <_dtoa_r+0x8fa>
 800c9cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9d0:	0d1b      	lsrs	r3, r3, #20
 800c9d2:	051b      	lsls	r3, r3, #20
 800c9d4:	b183      	cbz	r3, 800c9f8 <_dtoa_r+0x900>
 800c9d6:	9b04      	ldr	r3, [sp, #16]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	9304      	str	r3, [sp, #16]
 800c9dc:	9b05      	ldr	r3, [sp, #20]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	9305      	str	r3, [sp, #20]
 800c9e2:	f04f 0801 	mov.w	r8, #1
 800c9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f47f af6a 	bne.w	800c8c2 <_dtoa_r+0x7ca>
 800c9ee:	2001      	movs	r0, #1
 800c9f0:	e76f      	b.n	800c8d2 <_dtoa_r+0x7da>
 800c9f2:	f04f 0800 	mov.w	r8, #0
 800c9f6:	e7f6      	b.n	800c9e6 <_dtoa_r+0x8ee>
 800c9f8:	4698      	mov	r8, r3
 800c9fa:	e7f4      	b.n	800c9e6 <_dtoa_r+0x8ee>
 800c9fc:	f43f af7d 	beq.w	800c8fa <_dtoa_r+0x802>
 800ca00:	4618      	mov	r0, r3
 800ca02:	301c      	adds	r0, #28
 800ca04:	e772      	b.n	800c8ec <_dtoa_r+0x7f4>
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	dc37      	bgt.n	800ca7c <_dtoa_r+0x984>
 800ca0c:	9b06      	ldr	r3, [sp, #24]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	dd34      	ble.n	800ca7c <_dtoa_r+0x984>
 800ca12:	9b03      	ldr	r3, [sp, #12]
 800ca14:	9302      	str	r3, [sp, #8]
 800ca16:	9b02      	ldr	r3, [sp, #8]
 800ca18:	b96b      	cbnz	r3, 800ca36 <_dtoa_r+0x93e>
 800ca1a:	4631      	mov	r1, r6
 800ca1c:	2205      	movs	r2, #5
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f000 f9d4 	bl	800cdcc <__multadd>
 800ca24:	4601      	mov	r1, r0
 800ca26:	4606      	mov	r6, r0
 800ca28:	ee18 0a10 	vmov	r0, s16
 800ca2c:	f000 fbee 	bl	800d20c <__mcmp>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	f73f adbb 	bgt.w	800c5ac <_dtoa_r+0x4b4>
 800ca36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca38:	9d01      	ldr	r5, [sp, #4]
 800ca3a:	43db      	mvns	r3, r3
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	f04f 0800 	mov.w	r8, #0
 800ca42:	4631      	mov	r1, r6
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 f99f 	bl	800cd88 <_Bfree>
 800ca4a:	2f00      	cmp	r7, #0
 800ca4c:	f43f aea4 	beq.w	800c798 <_dtoa_r+0x6a0>
 800ca50:	f1b8 0f00 	cmp.w	r8, #0
 800ca54:	d005      	beq.n	800ca62 <_dtoa_r+0x96a>
 800ca56:	45b8      	cmp	r8, r7
 800ca58:	d003      	beq.n	800ca62 <_dtoa_r+0x96a>
 800ca5a:	4641      	mov	r1, r8
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f000 f993 	bl	800cd88 <_Bfree>
 800ca62:	4639      	mov	r1, r7
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 f98f 	bl	800cd88 <_Bfree>
 800ca6a:	e695      	b.n	800c798 <_dtoa_r+0x6a0>
 800ca6c:	2600      	movs	r6, #0
 800ca6e:	4637      	mov	r7, r6
 800ca70:	e7e1      	b.n	800ca36 <_dtoa_r+0x93e>
 800ca72:	9700      	str	r7, [sp, #0]
 800ca74:	4637      	mov	r7, r6
 800ca76:	e599      	b.n	800c5ac <_dtoa_r+0x4b4>
 800ca78:	40240000 	.word	0x40240000
 800ca7c:	9b08      	ldr	r3, [sp, #32]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 80ca 	beq.w	800cc18 <_dtoa_r+0xb20>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	9302      	str	r3, [sp, #8]
 800ca88:	2d00      	cmp	r5, #0
 800ca8a:	dd05      	ble.n	800ca98 <_dtoa_r+0x9a0>
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	462a      	mov	r2, r5
 800ca90:	4620      	mov	r0, r4
 800ca92:	f000 fb4b 	bl	800d12c <__lshift>
 800ca96:	4607      	mov	r7, r0
 800ca98:	f1b8 0f00 	cmp.w	r8, #0
 800ca9c:	d05b      	beq.n	800cb56 <_dtoa_r+0xa5e>
 800ca9e:	6879      	ldr	r1, [r7, #4]
 800caa0:	4620      	mov	r0, r4
 800caa2:	f000 f931 	bl	800cd08 <_Balloc>
 800caa6:	4605      	mov	r5, r0
 800caa8:	b928      	cbnz	r0, 800cab6 <_dtoa_r+0x9be>
 800caaa:	4b87      	ldr	r3, [pc, #540]	; (800ccc8 <_dtoa_r+0xbd0>)
 800caac:	4602      	mov	r2, r0
 800caae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cab2:	f7ff bb3b 	b.w	800c12c <_dtoa_r+0x34>
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	3202      	adds	r2, #2
 800caba:	0092      	lsls	r2, r2, #2
 800cabc:	f107 010c 	add.w	r1, r7, #12
 800cac0:	300c      	adds	r0, #12
 800cac2:	f000 f913 	bl	800ccec <memcpy>
 800cac6:	2201      	movs	r2, #1
 800cac8:	4629      	mov	r1, r5
 800caca:	4620      	mov	r0, r4
 800cacc:	f000 fb2e 	bl	800d12c <__lshift>
 800cad0:	9b01      	ldr	r3, [sp, #4]
 800cad2:	f103 0901 	add.w	r9, r3, #1
 800cad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cada:	4413      	add	r3, r2
 800cadc:	9305      	str	r3, [sp, #20]
 800cade:	f00a 0301 	and.w	r3, sl, #1
 800cae2:	46b8      	mov	r8, r7
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	4607      	mov	r7, r0
 800cae8:	4631      	mov	r1, r6
 800caea:	ee18 0a10 	vmov	r0, s16
 800caee:	f7ff fa75 	bl	800bfdc <quorem>
 800caf2:	4641      	mov	r1, r8
 800caf4:	9002      	str	r0, [sp, #8]
 800caf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cafa:	ee18 0a10 	vmov	r0, s16
 800cafe:	f000 fb85 	bl	800d20c <__mcmp>
 800cb02:	463a      	mov	r2, r7
 800cb04:	9003      	str	r0, [sp, #12]
 800cb06:	4631      	mov	r1, r6
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f000 fb9b 	bl	800d244 <__mdiff>
 800cb0e:	68c2      	ldr	r2, [r0, #12]
 800cb10:	f109 3bff 	add.w	fp, r9, #4294967295
 800cb14:	4605      	mov	r5, r0
 800cb16:	bb02      	cbnz	r2, 800cb5a <_dtoa_r+0xa62>
 800cb18:	4601      	mov	r1, r0
 800cb1a:	ee18 0a10 	vmov	r0, s16
 800cb1e:	f000 fb75 	bl	800d20c <__mcmp>
 800cb22:	4602      	mov	r2, r0
 800cb24:	4629      	mov	r1, r5
 800cb26:	4620      	mov	r0, r4
 800cb28:	9207      	str	r2, [sp, #28]
 800cb2a:	f000 f92d 	bl	800cd88 <_Bfree>
 800cb2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cb32:	ea43 0102 	orr.w	r1, r3, r2
 800cb36:	9b04      	ldr	r3, [sp, #16]
 800cb38:	430b      	orrs	r3, r1
 800cb3a:	464d      	mov	r5, r9
 800cb3c:	d10f      	bne.n	800cb5e <_dtoa_r+0xa66>
 800cb3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb42:	d02a      	beq.n	800cb9a <_dtoa_r+0xaa2>
 800cb44:	9b03      	ldr	r3, [sp, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dd02      	ble.n	800cb50 <_dtoa_r+0xa58>
 800cb4a:	9b02      	ldr	r3, [sp, #8]
 800cb4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cb50:	f88b a000 	strb.w	sl, [fp]
 800cb54:	e775      	b.n	800ca42 <_dtoa_r+0x94a>
 800cb56:	4638      	mov	r0, r7
 800cb58:	e7ba      	b.n	800cad0 <_dtoa_r+0x9d8>
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	e7e2      	b.n	800cb24 <_dtoa_r+0xa2c>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	db04      	blt.n	800cb6e <_dtoa_r+0xa76>
 800cb64:	9906      	ldr	r1, [sp, #24]
 800cb66:	430b      	orrs	r3, r1
 800cb68:	9904      	ldr	r1, [sp, #16]
 800cb6a:	430b      	orrs	r3, r1
 800cb6c:	d122      	bne.n	800cbb4 <_dtoa_r+0xabc>
 800cb6e:	2a00      	cmp	r2, #0
 800cb70:	ddee      	ble.n	800cb50 <_dtoa_r+0xa58>
 800cb72:	ee18 1a10 	vmov	r1, s16
 800cb76:	2201      	movs	r2, #1
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 fad7 	bl	800d12c <__lshift>
 800cb7e:	4631      	mov	r1, r6
 800cb80:	ee08 0a10 	vmov	s16, r0
 800cb84:	f000 fb42 	bl	800d20c <__mcmp>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	dc03      	bgt.n	800cb94 <_dtoa_r+0xa9c>
 800cb8c:	d1e0      	bne.n	800cb50 <_dtoa_r+0xa58>
 800cb8e:	f01a 0f01 	tst.w	sl, #1
 800cb92:	d0dd      	beq.n	800cb50 <_dtoa_r+0xa58>
 800cb94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb98:	d1d7      	bne.n	800cb4a <_dtoa_r+0xa52>
 800cb9a:	2339      	movs	r3, #57	; 0x39
 800cb9c:	f88b 3000 	strb.w	r3, [fp]
 800cba0:	462b      	mov	r3, r5
 800cba2:	461d      	mov	r5, r3
 800cba4:	3b01      	subs	r3, #1
 800cba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbaa:	2a39      	cmp	r2, #57	; 0x39
 800cbac:	d071      	beq.n	800cc92 <_dtoa_r+0xb9a>
 800cbae:	3201      	adds	r2, #1
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	e746      	b.n	800ca42 <_dtoa_r+0x94a>
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	dd07      	ble.n	800cbc8 <_dtoa_r+0xad0>
 800cbb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cbbc:	d0ed      	beq.n	800cb9a <_dtoa_r+0xaa2>
 800cbbe:	f10a 0301 	add.w	r3, sl, #1
 800cbc2:	f88b 3000 	strb.w	r3, [fp]
 800cbc6:	e73c      	b.n	800ca42 <_dtoa_r+0x94a>
 800cbc8:	9b05      	ldr	r3, [sp, #20]
 800cbca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cbce:	4599      	cmp	r9, r3
 800cbd0:	d047      	beq.n	800cc62 <_dtoa_r+0xb6a>
 800cbd2:	ee18 1a10 	vmov	r1, s16
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	220a      	movs	r2, #10
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f000 f8f6 	bl	800cdcc <__multadd>
 800cbe0:	45b8      	cmp	r8, r7
 800cbe2:	ee08 0a10 	vmov	s16, r0
 800cbe6:	f04f 0300 	mov.w	r3, #0
 800cbea:	f04f 020a 	mov.w	r2, #10
 800cbee:	4641      	mov	r1, r8
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	d106      	bne.n	800cc02 <_dtoa_r+0xb0a>
 800cbf4:	f000 f8ea 	bl	800cdcc <__multadd>
 800cbf8:	4680      	mov	r8, r0
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	f109 0901 	add.w	r9, r9, #1
 800cc00:	e772      	b.n	800cae8 <_dtoa_r+0x9f0>
 800cc02:	f000 f8e3 	bl	800cdcc <__multadd>
 800cc06:	4639      	mov	r1, r7
 800cc08:	4680      	mov	r8, r0
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	220a      	movs	r2, #10
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f000 f8dc 	bl	800cdcc <__multadd>
 800cc14:	4607      	mov	r7, r0
 800cc16:	e7f1      	b.n	800cbfc <_dtoa_r+0xb04>
 800cc18:	9b03      	ldr	r3, [sp, #12]
 800cc1a:	9302      	str	r3, [sp, #8]
 800cc1c:	9d01      	ldr	r5, [sp, #4]
 800cc1e:	ee18 0a10 	vmov	r0, s16
 800cc22:	4631      	mov	r1, r6
 800cc24:	f7ff f9da 	bl	800bfdc <quorem>
 800cc28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cc2c:	9b01      	ldr	r3, [sp, #4]
 800cc2e:	f805 ab01 	strb.w	sl, [r5], #1
 800cc32:	1aea      	subs	r2, r5, r3
 800cc34:	9b02      	ldr	r3, [sp, #8]
 800cc36:	4293      	cmp	r3, r2
 800cc38:	dd09      	ble.n	800cc4e <_dtoa_r+0xb56>
 800cc3a:	ee18 1a10 	vmov	r1, s16
 800cc3e:	2300      	movs	r3, #0
 800cc40:	220a      	movs	r2, #10
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 f8c2 	bl	800cdcc <__multadd>
 800cc48:	ee08 0a10 	vmov	s16, r0
 800cc4c:	e7e7      	b.n	800cc1e <_dtoa_r+0xb26>
 800cc4e:	9b02      	ldr	r3, [sp, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bfc8      	it	gt
 800cc54:	461d      	movgt	r5, r3
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	bfd8      	it	le
 800cc5a:	2501      	movle	r5, #1
 800cc5c:	441d      	add	r5, r3
 800cc5e:	f04f 0800 	mov.w	r8, #0
 800cc62:	ee18 1a10 	vmov	r1, s16
 800cc66:	2201      	movs	r2, #1
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 fa5f 	bl	800d12c <__lshift>
 800cc6e:	4631      	mov	r1, r6
 800cc70:	ee08 0a10 	vmov	s16, r0
 800cc74:	f000 faca 	bl	800d20c <__mcmp>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	dc91      	bgt.n	800cba0 <_dtoa_r+0xaa8>
 800cc7c:	d102      	bne.n	800cc84 <_dtoa_r+0xb8c>
 800cc7e:	f01a 0f01 	tst.w	sl, #1
 800cc82:	d18d      	bne.n	800cba0 <_dtoa_r+0xaa8>
 800cc84:	462b      	mov	r3, r5
 800cc86:	461d      	mov	r5, r3
 800cc88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc8c:	2a30      	cmp	r2, #48	; 0x30
 800cc8e:	d0fa      	beq.n	800cc86 <_dtoa_r+0xb8e>
 800cc90:	e6d7      	b.n	800ca42 <_dtoa_r+0x94a>
 800cc92:	9a01      	ldr	r2, [sp, #4]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d184      	bne.n	800cba2 <_dtoa_r+0xaaa>
 800cc98:	9b00      	ldr	r3, [sp, #0]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	2331      	movs	r3, #49	; 0x31
 800cca0:	7013      	strb	r3, [r2, #0]
 800cca2:	e6ce      	b.n	800ca42 <_dtoa_r+0x94a>
 800cca4:	4b09      	ldr	r3, [pc, #36]	; (800cccc <_dtoa_r+0xbd4>)
 800cca6:	f7ff ba95 	b.w	800c1d4 <_dtoa_r+0xdc>
 800ccaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f47f aa6e 	bne.w	800c18e <_dtoa_r+0x96>
 800ccb2:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <_dtoa_r+0xbd8>)
 800ccb4:	f7ff ba8e 	b.w	800c1d4 <_dtoa_r+0xdc>
 800ccb8:	9b02      	ldr	r3, [sp, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	dcae      	bgt.n	800cc1c <_dtoa_r+0xb24>
 800ccbe:	9b06      	ldr	r3, [sp, #24]
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	f73f aea8 	bgt.w	800ca16 <_dtoa_r+0x91e>
 800ccc6:	e7a9      	b.n	800cc1c <_dtoa_r+0xb24>
 800ccc8:	0800fb57 	.word	0x0800fb57
 800cccc:	0800fab4 	.word	0x0800fab4
 800ccd0:	0800fad8 	.word	0x0800fad8

0800ccd4 <_localeconv_r>:
 800ccd4:	4800      	ldr	r0, [pc, #0]	; (800ccd8 <_localeconv_r+0x4>)
 800ccd6:	4770      	bx	lr
 800ccd8:	200001d8 	.word	0x200001d8

0800ccdc <malloc>:
 800ccdc:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <malloc+0xc>)
 800ccde:	4601      	mov	r1, r0
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	f000 bc17 	b.w	800d514 <_malloc_r>
 800cce6:	bf00      	nop
 800cce8:	20000084 	.word	0x20000084

0800ccec <memcpy>:
 800ccec:	440a      	add	r2, r1
 800ccee:	4291      	cmp	r1, r2
 800ccf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccf4:	d100      	bne.n	800ccf8 <memcpy+0xc>
 800ccf6:	4770      	bx	lr
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd02:	4291      	cmp	r1, r2
 800cd04:	d1f9      	bne.n	800ccfa <memcpy+0xe>
 800cd06:	bd10      	pop	{r4, pc}

0800cd08 <_Balloc>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	460d      	mov	r5, r1
 800cd10:	b976      	cbnz	r6, 800cd30 <_Balloc+0x28>
 800cd12:	2010      	movs	r0, #16
 800cd14:	f7ff ffe2 	bl	800ccdc <malloc>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	6260      	str	r0, [r4, #36]	; 0x24
 800cd1c:	b920      	cbnz	r0, 800cd28 <_Balloc+0x20>
 800cd1e:	4b18      	ldr	r3, [pc, #96]	; (800cd80 <_Balloc+0x78>)
 800cd20:	4818      	ldr	r0, [pc, #96]	; (800cd84 <_Balloc+0x7c>)
 800cd22:	2166      	movs	r1, #102	; 0x66
 800cd24:	f000 fdd6 	bl	800d8d4 <__assert_func>
 800cd28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd2c:	6006      	str	r6, [r0, #0]
 800cd2e:	60c6      	str	r6, [r0, #12]
 800cd30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd32:	68f3      	ldr	r3, [r6, #12]
 800cd34:	b183      	cbz	r3, 800cd58 <_Balloc+0x50>
 800cd36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd3e:	b9b8      	cbnz	r0, 800cd70 <_Balloc+0x68>
 800cd40:	2101      	movs	r1, #1
 800cd42:	fa01 f605 	lsl.w	r6, r1, r5
 800cd46:	1d72      	adds	r2, r6, #5
 800cd48:	0092      	lsls	r2, r2, #2
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f000 fb60 	bl	800d410 <_calloc_r>
 800cd50:	b160      	cbz	r0, 800cd6c <_Balloc+0x64>
 800cd52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd56:	e00e      	b.n	800cd76 <_Balloc+0x6e>
 800cd58:	2221      	movs	r2, #33	; 0x21
 800cd5a:	2104      	movs	r1, #4
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f000 fb57 	bl	800d410 <_calloc_r>
 800cd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd64:	60f0      	str	r0, [r6, #12]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1e4      	bne.n	800cd36 <_Balloc+0x2e>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	6802      	ldr	r2, [r0, #0]
 800cd72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd76:	2300      	movs	r3, #0
 800cd78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd7c:	e7f7      	b.n	800cd6e <_Balloc+0x66>
 800cd7e:	bf00      	nop
 800cd80:	0800fae5 	.word	0x0800fae5
 800cd84:	0800fb68 	.word	0x0800fb68

0800cd88 <_Bfree>:
 800cd88:	b570      	push	{r4, r5, r6, lr}
 800cd8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd8c:	4605      	mov	r5, r0
 800cd8e:	460c      	mov	r4, r1
 800cd90:	b976      	cbnz	r6, 800cdb0 <_Bfree+0x28>
 800cd92:	2010      	movs	r0, #16
 800cd94:	f7ff ffa2 	bl	800ccdc <malloc>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	6268      	str	r0, [r5, #36]	; 0x24
 800cd9c:	b920      	cbnz	r0, 800cda8 <_Bfree+0x20>
 800cd9e:	4b09      	ldr	r3, [pc, #36]	; (800cdc4 <_Bfree+0x3c>)
 800cda0:	4809      	ldr	r0, [pc, #36]	; (800cdc8 <_Bfree+0x40>)
 800cda2:	218a      	movs	r1, #138	; 0x8a
 800cda4:	f000 fd96 	bl	800d8d4 <__assert_func>
 800cda8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdac:	6006      	str	r6, [r0, #0]
 800cdae:	60c6      	str	r6, [r0, #12]
 800cdb0:	b13c      	cbz	r4, 800cdc2 <_Bfree+0x3a>
 800cdb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdb4:	6862      	ldr	r2, [r4, #4]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdbc:	6021      	str	r1, [r4, #0]
 800cdbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdc2:	bd70      	pop	{r4, r5, r6, pc}
 800cdc4:	0800fae5 	.word	0x0800fae5
 800cdc8:	0800fb68 	.word	0x0800fb68

0800cdcc <__multadd>:
 800cdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd0:	690d      	ldr	r5, [r1, #16]
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	461e      	mov	r6, r3
 800cdd8:	f101 0c14 	add.w	ip, r1, #20
 800cddc:	2000      	movs	r0, #0
 800cdde:	f8dc 3000 	ldr.w	r3, [ip]
 800cde2:	b299      	uxth	r1, r3
 800cde4:	fb02 6101 	mla	r1, r2, r1, r6
 800cde8:	0c1e      	lsrs	r6, r3, #16
 800cdea:	0c0b      	lsrs	r3, r1, #16
 800cdec:	fb02 3306 	mla	r3, r2, r6, r3
 800cdf0:	b289      	uxth	r1, r1
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdf8:	4285      	cmp	r5, r0
 800cdfa:	f84c 1b04 	str.w	r1, [ip], #4
 800cdfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce02:	dcec      	bgt.n	800cdde <__multadd+0x12>
 800ce04:	b30e      	cbz	r6, 800ce4a <__multadd+0x7e>
 800ce06:	68a3      	ldr	r3, [r4, #8]
 800ce08:	42ab      	cmp	r3, r5
 800ce0a:	dc19      	bgt.n	800ce40 <__multadd+0x74>
 800ce0c:	6861      	ldr	r1, [r4, #4]
 800ce0e:	4638      	mov	r0, r7
 800ce10:	3101      	adds	r1, #1
 800ce12:	f7ff ff79 	bl	800cd08 <_Balloc>
 800ce16:	4680      	mov	r8, r0
 800ce18:	b928      	cbnz	r0, 800ce26 <__multadd+0x5a>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <__multadd+0x84>)
 800ce1e:	480d      	ldr	r0, [pc, #52]	; (800ce54 <__multadd+0x88>)
 800ce20:	21b5      	movs	r1, #181	; 0xb5
 800ce22:	f000 fd57 	bl	800d8d4 <__assert_func>
 800ce26:	6922      	ldr	r2, [r4, #16]
 800ce28:	3202      	adds	r2, #2
 800ce2a:	f104 010c 	add.w	r1, r4, #12
 800ce2e:	0092      	lsls	r2, r2, #2
 800ce30:	300c      	adds	r0, #12
 800ce32:	f7ff ff5b 	bl	800ccec <memcpy>
 800ce36:	4621      	mov	r1, r4
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7ff ffa5 	bl	800cd88 <_Bfree>
 800ce3e:	4644      	mov	r4, r8
 800ce40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce44:	3501      	adds	r5, #1
 800ce46:	615e      	str	r6, [r3, #20]
 800ce48:	6125      	str	r5, [r4, #16]
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce50:	0800fb57 	.word	0x0800fb57
 800ce54:	0800fb68 	.word	0x0800fb68

0800ce58 <__hi0bits>:
 800ce58:	0c03      	lsrs	r3, r0, #16
 800ce5a:	041b      	lsls	r3, r3, #16
 800ce5c:	b9d3      	cbnz	r3, 800ce94 <__hi0bits+0x3c>
 800ce5e:	0400      	lsls	r0, r0, #16
 800ce60:	2310      	movs	r3, #16
 800ce62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce66:	bf04      	itt	eq
 800ce68:	0200      	lsleq	r0, r0, #8
 800ce6a:	3308      	addeq	r3, #8
 800ce6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce70:	bf04      	itt	eq
 800ce72:	0100      	lsleq	r0, r0, #4
 800ce74:	3304      	addeq	r3, #4
 800ce76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce7a:	bf04      	itt	eq
 800ce7c:	0080      	lsleq	r0, r0, #2
 800ce7e:	3302      	addeq	r3, #2
 800ce80:	2800      	cmp	r0, #0
 800ce82:	db05      	blt.n	800ce90 <__hi0bits+0x38>
 800ce84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce88:	f103 0301 	add.w	r3, r3, #1
 800ce8c:	bf08      	it	eq
 800ce8e:	2320      	moveq	r3, #32
 800ce90:	4618      	mov	r0, r3
 800ce92:	4770      	bx	lr
 800ce94:	2300      	movs	r3, #0
 800ce96:	e7e4      	b.n	800ce62 <__hi0bits+0xa>

0800ce98 <__lo0bits>:
 800ce98:	6803      	ldr	r3, [r0, #0]
 800ce9a:	f013 0207 	ands.w	r2, r3, #7
 800ce9e:	4601      	mov	r1, r0
 800cea0:	d00b      	beq.n	800ceba <__lo0bits+0x22>
 800cea2:	07da      	lsls	r2, r3, #31
 800cea4:	d423      	bmi.n	800ceee <__lo0bits+0x56>
 800cea6:	0798      	lsls	r0, r3, #30
 800cea8:	bf49      	itett	mi
 800ceaa:	085b      	lsrmi	r3, r3, #1
 800ceac:	089b      	lsrpl	r3, r3, #2
 800ceae:	2001      	movmi	r0, #1
 800ceb0:	600b      	strmi	r3, [r1, #0]
 800ceb2:	bf5c      	itt	pl
 800ceb4:	600b      	strpl	r3, [r1, #0]
 800ceb6:	2002      	movpl	r0, #2
 800ceb8:	4770      	bx	lr
 800ceba:	b298      	uxth	r0, r3
 800cebc:	b9a8      	cbnz	r0, 800ceea <__lo0bits+0x52>
 800cebe:	0c1b      	lsrs	r3, r3, #16
 800cec0:	2010      	movs	r0, #16
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	b90a      	cbnz	r2, 800ceca <__lo0bits+0x32>
 800cec6:	3008      	adds	r0, #8
 800cec8:	0a1b      	lsrs	r3, r3, #8
 800ceca:	071a      	lsls	r2, r3, #28
 800cecc:	bf04      	itt	eq
 800cece:	091b      	lsreq	r3, r3, #4
 800ced0:	3004      	addeq	r0, #4
 800ced2:	079a      	lsls	r2, r3, #30
 800ced4:	bf04      	itt	eq
 800ced6:	089b      	lsreq	r3, r3, #2
 800ced8:	3002      	addeq	r0, #2
 800ceda:	07da      	lsls	r2, r3, #31
 800cedc:	d403      	bmi.n	800cee6 <__lo0bits+0x4e>
 800cede:	085b      	lsrs	r3, r3, #1
 800cee0:	f100 0001 	add.w	r0, r0, #1
 800cee4:	d005      	beq.n	800cef2 <__lo0bits+0x5a>
 800cee6:	600b      	str	r3, [r1, #0]
 800cee8:	4770      	bx	lr
 800ceea:	4610      	mov	r0, r2
 800ceec:	e7e9      	b.n	800cec2 <__lo0bits+0x2a>
 800ceee:	2000      	movs	r0, #0
 800cef0:	4770      	bx	lr
 800cef2:	2020      	movs	r0, #32
 800cef4:	4770      	bx	lr
	...

0800cef8 <__i2b>:
 800cef8:	b510      	push	{r4, lr}
 800cefa:	460c      	mov	r4, r1
 800cefc:	2101      	movs	r1, #1
 800cefe:	f7ff ff03 	bl	800cd08 <_Balloc>
 800cf02:	4602      	mov	r2, r0
 800cf04:	b928      	cbnz	r0, 800cf12 <__i2b+0x1a>
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <__i2b+0x24>)
 800cf08:	4805      	ldr	r0, [pc, #20]	; (800cf20 <__i2b+0x28>)
 800cf0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf0e:	f000 fce1 	bl	800d8d4 <__assert_func>
 800cf12:	2301      	movs	r3, #1
 800cf14:	6144      	str	r4, [r0, #20]
 800cf16:	6103      	str	r3, [r0, #16]
 800cf18:	bd10      	pop	{r4, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0800fb57 	.word	0x0800fb57
 800cf20:	0800fb68 	.word	0x0800fb68

0800cf24 <__multiply>:
 800cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf28:	4691      	mov	r9, r2
 800cf2a:	690a      	ldr	r2, [r1, #16]
 800cf2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	bfb8      	it	lt
 800cf34:	460b      	movlt	r3, r1
 800cf36:	460c      	mov	r4, r1
 800cf38:	bfbc      	itt	lt
 800cf3a:	464c      	movlt	r4, r9
 800cf3c:	4699      	movlt	r9, r3
 800cf3e:	6927      	ldr	r7, [r4, #16]
 800cf40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	6861      	ldr	r1, [r4, #4]
 800cf48:	eb07 060a 	add.w	r6, r7, sl
 800cf4c:	42b3      	cmp	r3, r6
 800cf4e:	b085      	sub	sp, #20
 800cf50:	bfb8      	it	lt
 800cf52:	3101      	addlt	r1, #1
 800cf54:	f7ff fed8 	bl	800cd08 <_Balloc>
 800cf58:	b930      	cbnz	r0, 800cf68 <__multiply+0x44>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	4b44      	ldr	r3, [pc, #272]	; (800d070 <__multiply+0x14c>)
 800cf5e:	4845      	ldr	r0, [pc, #276]	; (800d074 <__multiply+0x150>)
 800cf60:	f240 115d 	movw	r1, #349	; 0x15d
 800cf64:	f000 fcb6 	bl	800d8d4 <__assert_func>
 800cf68:	f100 0514 	add.w	r5, r0, #20
 800cf6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf70:	462b      	mov	r3, r5
 800cf72:	2200      	movs	r2, #0
 800cf74:	4543      	cmp	r3, r8
 800cf76:	d321      	bcc.n	800cfbc <__multiply+0x98>
 800cf78:	f104 0314 	add.w	r3, r4, #20
 800cf7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf80:	f109 0314 	add.w	r3, r9, #20
 800cf84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf88:	9202      	str	r2, [sp, #8]
 800cf8a:	1b3a      	subs	r2, r7, r4
 800cf8c:	3a15      	subs	r2, #21
 800cf8e:	f022 0203 	bic.w	r2, r2, #3
 800cf92:	3204      	adds	r2, #4
 800cf94:	f104 0115 	add.w	r1, r4, #21
 800cf98:	428f      	cmp	r7, r1
 800cf9a:	bf38      	it	cc
 800cf9c:	2204      	movcc	r2, #4
 800cf9e:	9201      	str	r2, [sp, #4]
 800cfa0:	9a02      	ldr	r2, [sp, #8]
 800cfa2:	9303      	str	r3, [sp, #12]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d80c      	bhi.n	800cfc2 <__multiply+0x9e>
 800cfa8:	2e00      	cmp	r6, #0
 800cfaa:	dd03      	ble.n	800cfb4 <__multiply+0x90>
 800cfac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d05a      	beq.n	800d06a <__multiply+0x146>
 800cfb4:	6106      	str	r6, [r0, #16]
 800cfb6:	b005      	add	sp, #20
 800cfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbc:	f843 2b04 	str.w	r2, [r3], #4
 800cfc0:	e7d8      	b.n	800cf74 <__multiply+0x50>
 800cfc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfc6:	f1ba 0f00 	cmp.w	sl, #0
 800cfca:	d024      	beq.n	800d016 <__multiply+0xf2>
 800cfcc:	f104 0e14 	add.w	lr, r4, #20
 800cfd0:	46a9      	mov	r9, r5
 800cfd2:	f04f 0c00 	mov.w	ip, #0
 800cfd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cfda:	f8d9 1000 	ldr.w	r1, [r9]
 800cfde:	fa1f fb82 	uxth.w	fp, r2
 800cfe2:	b289      	uxth	r1, r1
 800cfe4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cfe8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cfec:	f8d9 2000 	ldr.w	r2, [r9]
 800cff0:	4461      	add	r1, ip
 800cff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cff6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cffa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cffe:	b289      	uxth	r1, r1
 800d000:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d004:	4577      	cmp	r7, lr
 800d006:	f849 1b04 	str.w	r1, [r9], #4
 800d00a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d00e:	d8e2      	bhi.n	800cfd6 <__multiply+0xb2>
 800d010:	9a01      	ldr	r2, [sp, #4]
 800d012:	f845 c002 	str.w	ip, [r5, r2]
 800d016:	9a03      	ldr	r2, [sp, #12]
 800d018:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d01c:	3304      	adds	r3, #4
 800d01e:	f1b9 0f00 	cmp.w	r9, #0
 800d022:	d020      	beq.n	800d066 <__multiply+0x142>
 800d024:	6829      	ldr	r1, [r5, #0]
 800d026:	f104 0c14 	add.w	ip, r4, #20
 800d02a:	46ae      	mov	lr, r5
 800d02c:	f04f 0a00 	mov.w	sl, #0
 800d030:	f8bc b000 	ldrh.w	fp, [ip]
 800d034:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d038:	fb09 220b 	mla	r2, r9, fp, r2
 800d03c:	4492      	add	sl, r2
 800d03e:	b289      	uxth	r1, r1
 800d040:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d044:	f84e 1b04 	str.w	r1, [lr], #4
 800d048:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d04c:	f8be 1000 	ldrh.w	r1, [lr]
 800d050:	0c12      	lsrs	r2, r2, #16
 800d052:	fb09 1102 	mla	r1, r9, r2, r1
 800d056:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d05a:	4567      	cmp	r7, ip
 800d05c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d060:	d8e6      	bhi.n	800d030 <__multiply+0x10c>
 800d062:	9a01      	ldr	r2, [sp, #4]
 800d064:	50a9      	str	r1, [r5, r2]
 800d066:	3504      	adds	r5, #4
 800d068:	e79a      	b.n	800cfa0 <__multiply+0x7c>
 800d06a:	3e01      	subs	r6, #1
 800d06c:	e79c      	b.n	800cfa8 <__multiply+0x84>
 800d06e:	bf00      	nop
 800d070:	0800fb57 	.word	0x0800fb57
 800d074:	0800fb68 	.word	0x0800fb68

0800d078 <__pow5mult>:
 800d078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d07c:	4615      	mov	r5, r2
 800d07e:	f012 0203 	ands.w	r2, r2, #3
 800d082:	4606      	mov	r6, r0
 800d084:	460f      	mov	r7, r1
 800d086:	d007      	beq.n	800d098 <__pow5mult+0x20>
 800d088:	4c25      	ldr	r4, [pc, #148]	; (800d120 <__pow5mult+0xa8>)
 800d08a:	3a01      	subs	r2, #1
 800d08c:	2300      	movs	r3, #0
 800d08e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d092:	f7ff fe9b 	bl	800cdcc <__multadd>
 800d096:	4607      	mov	r7, r0
 800d098:	10ad      	asrs	r5, r5, #2
 800d09a:	d03d      	beq.n	800d118 <__pow5mult+0xa0>
 800d09c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d09e:	b97c      	cbnz	r4, 800d0c0 <__pow5mult+0x48>
 800d0a0:	2010      	movs	r0, #16
 800d0a2:	f7ff fe1b 	bl	800ccdc <malloc>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	6270      	str	r0, [r6, #36]	; 0x24
 800d0aa:	b928      	cbnz	r0, 800d0b8 <__pow5mult+0x40>
 800d0ac:	4b1d      	ldr	r3, [pc, #116]	; (800d124 <__pow5mult+0xac>)
 800d0ae:	481e      	ldr	r0, [pc, #120]	; (800d128 <__pow5mult+0xb0>)
 800d0b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0b4:	f000 fc0e 	bl	800d8d4 <__assert_func>
 800d0b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0bc:	6004      	str	r4, [r0, #0]
 800d0be:	60c4      	str	r4, [r0, #12]
 800d0c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0c8:	b94c      	cbnz	r4, 800d0de <__pow5mult+0x66>
 800d0ca:	f240 2171 	movw	r1, #625	; 0x271
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	f7ff ff12 	bl	800cef8 <__i2b>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0da:	4604      	mov	r4, r0
 800d0dc:	6003      	str	r3, [r0, #0]
 800d0de:	f04f 0900 	mov.w	r9, #0
 800d0e2:	07eb      	lsls	r3, r5, #31
 800d0e4:	d50a      	bpl.n	800d0fc <__pow5mult+0x84>
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7ff ff1a 	bl	800cf24 <__multiply>
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff fe47 	bl	800cd88 <_Bfree>
 800d0fa:	4647      	mov	r7, r8
 800d0fc:	106d      	asrs	r5, r5, #1
 800d0fe:	d00b      	beq.n	800d118 <__pow5mult+0xa0>
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	b938      	cbnz	r0, 800d114 <__pow5mult+0x9c>
 800d104:	4622      	mov	r2, r4
 800d106:	4621      	mov	r1, r4
 800d108:	4630      	mov	r0, r6
 800d10a:	f7ff ff0b 	bl	800cf24 <__multiply>
 800d10e:	6020      	str	r0, [r4, #0]
 800d110:	f8c0 9000 	str.w	r9, [r0]
 800d114:	4604      	mov	r4, r0
 800d116:	e7e4      	b.n	800d0e2 <__pow5mult+0x6a>
 800d118:	4638      	mov	r0, r7
 800d11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d11e:	bf00      	nop
 800d120:	0800fcb8 	.word	0x0800fcb8
 800d124:	0800fae5 	.word	0x0800fae5
 800d128:	0800fb68 	.word	0x0800fb68

0800d12c <__lshift>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	460c      	mov	r4, r1
 800d132:	6849      	ldr	r1, [r1, #4]
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	4607      	mov	r7, r0
 800d13e:	4691      	mov	r9, r2
 800d140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d144:	f108 0601 	add.w	r6, r8, #1
 800d148:	42b3      	cmp	r3, r6
 800d14a:	db0b      	blt.n	800d164 <__lshift+0x38>
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7ff fddb 	bl	800cd08 <_Balloc>
 800d152:	4605      	mov	r5, r0
 800d154:	b948      	cbnz	r0, 800d16a <__lshift+0x3e>
 800d156:	4602      	mov	r2, r0
 800d158:	4b2a      	ldr	r3, [pc, #168]	; (800d204 <__lshift+0xd8>)
 800d15a:	482b      	ldr	r0, [pc, #172]	; (800d208 <__lshift+0xdc>)
 800d15c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d160:	f000 fbb8 	bl	800d8d4 <__assert_func>
 800d164:	3101      	adds	r1, #1
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	e7ee      	b.n	800d148 <__lshift+0x1c>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f100 0114 	add.w	r1, r0, #20
 800d170:	f100 0210 	add.w	r2, r0, #16
 800d174:	4618      	mov	r0, r3
 800d176:	4553      	cmp	r3, sl
 800d178:	db37      	blt.n	800d1ea <__lshift+0xbe>
 800d17a:	6920      	ldr	r0, [r4, #16]
 800d17c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d180:	f104 0314 	add.w	r3, r4, #20
 800d184:	f019 091f 	ands.w	r9, r9, #31
 800d188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d18c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d190:	d02f      	beq.n	800d1f2 <__lshift+0xc6>
 800d192:	f1c9 0e20 	rsb	lr, r9, #32
 800d196:	468a      	mov	sl, r1
 800d198:	f04f 0c00 	mov.w	ip, #0
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	fa02 f209 	lsl.w	r2, r2, r9
 800d1a2:	ea42 020c 	orr.w	r2, r2, ip
 800d1a6:	f84a 2b04 	str.w	r2, [sl], #4
 800d1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ae:	4298      	cmp	r0, r3
 800d1b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1b4:	d8f2      	bhi.n	800d19c <__lshift+0x70>
 800d1b6:	1b03      	subs	r3, r0, r4
 800d1b8:	3b15      	subs	r3, #21
 800d1ba:	f023 0303 	bic.w	r3, r3, #3
 800d1be:	3304      	adds	r3, #4
 800d1c0:	f104 0215 	add.w	r2, r4, #21
 800d1c4:	4290      	cmp	r0, r2
 800d1c6:	bf38      	it	cc
 800d1c8:	2304      	movcc	r3, #4
 800d1ca:	f841 c003 	str.w	ip, [r1, r3]
 800d1ce:	f1bc 0f00 	cmp.w	ip, #0
 800d1d2:	d001      	beq.n	800d1d8 <__lshift+0xac>
 800d1d4:	f108 0602 	add.w	r6, r8, #2
 800d1d8:	3e01      	subs	r6, #1
 800d1da:	4638      	mov	r0, r7
 800d1dc:	612e      	str	r6, [r5, #16]
 800d1de:	4621      	mov	r1, r4
 800d1e0:	f7ff fdd2 	bl	800cd88 <_Bfree>
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	e7c1      	b.n	800d176 <__lshift+0x4a>
 800d1f2:	3904      	subs	r1, #4
 800d1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1fc:	4298      	cmp	r0, r3
 800d1fe:	d8f9      	bhi.n	800d1f4 <__lshift+0xc8>
 800d200:	e7ea      	b.n	800d1d8 <__lshift+0xac>
 800d202:	bf00      	nop
 800d204:	0800fb57 	.word	0x0800fb57
 800d208:	0800fb68 	.word	0x0800fb68

0800d20c <__mcmp>:
 800d20c:	b530      	push	{r4, r5, lr}
 800d20e:	6902      	ldr	r2, [r0, #16]
 800d210:	690c      	ldr	r4, [r1, #16]
 800d212:	1b12      	subs	r2, r2, r4
 800d214:	d10e      	bne.n	800d234 <__mcmp+0x28>
 800d216:	f100 0314 	add.w	r3, r0, #20
 800d21a:	3114      	adds	r1, #20
 800d21c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d220:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d224:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d228:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d22c:	42a5      	cmp	r5, r4
 800d22e:	d003      	beq.n	800d238 <__mcmp+0x2c>
 800d230:	d305      	bcc.n	800d23e <__mcmp+0x32>
 800d232:	2201      	movs	r2, #1
 800d234:	4610      	mov	r0, r2
 800d236:	bd30      	pop	{r4, r5, pc}
 800d238:	4283      	cmp	r3, r0
 800d23a:	d3f3      	bcc.n	800d224 <__mcmp+0x18>
 800d23c:	e7fa      	b.n	800d234 <__mcmp+0x28>
 800d23e:	f04f 32ff 	mov.w	r2, #4294967295
 800d242:	e7f7      	b.n	800d234 <__mcmp+0x28>

0800d244 <__mdiff>:
 800d244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d248:	460c      	mov	r4, r1
 800d24a:	4606      	mov	r6, r0
 800d24c:	4611      	mov	r1, r2
 800d24e:	4620      	mov	r0, r4
 800d250:	4690      	mov	r8, r2
 800d252:	f7ff ffdb 	bl	800d20c <__mcmp>
 800d256:	1e05      	subs	r5, r0, #0
 800d258:	d110      	bne.n	800d27c <__mdiff+0x38>
 800d25a:	4629      	mov	r1, r5
 800d25c:	4630      	mov	r0, r6
 800d25e:	f7ff fd53 	bl	800cd08 <_Balloc>
 800d262:	b930      	cbnz	r0, 800d272 <__mdiff+0x2e>
 800d264:	4b3a      	ldr	r3, [pc, #232]	; (800d350 <__mdiff+0x10c>)
 800d266:	4602      	mov	r2, r0
 800d268:	f240 2132 	movw	r1, #562	; 0x232
 800d26c:	4839      	ldr	r0, [pc, #228]	; (800d354 <__mdiff+0x110>)
 800d26e:	f000 fb31 	bl	800d8d4 <__assert_func>
 800d272:	2301      	movs	r3, #1
 800d274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27c:	bfa4      	itt	ge
 800d27e:	4643      	movge	r3, r8
 800d280:	46a0      	movge	r8, r4
 800d282:	4630      	mov	r0, r6
 800d284:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d288:	bfa6      	itte	ge
 800d28a:	461c      	movge	r4, r3
 800d28c:	2500      	movge	r5, #0
 800d28e:	2501      	movlt	r5, #1
 800d290:	f7ff fd3a 	bl	800cd08 <_Balloc>
 800d294:	b920      	cbnz	r0, 800d2a0 <__mdiff+0x5c>
 800d296:	4b2e      	ldr	r3, [pc, #184]	; (800d350 <__mdiff+0x10c>)
 800d298:	4602      	mov	r2, r0
 800d29a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d29e:	e7e5      	b.n	800d26c <__mdiff+0x28>
 800d2a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2a4:	6926      	ldr	r6, [r4, #16]
 800d2a6:	60c5      	str	r5, [r0, #12]
 800d2a8:	f104 0914 	add.w	r9, r4, #20
 800d2ac:	f108 0514 	add.w	r5, r8, #20
 800d2b0:	f100 0e14 	add.w	lr, r0, #20
 800d2b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2bc:	f108 0210 	add.w	r2, r8, #16
 800d2c0:	46f2      	mov	sl, lr
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2cc:	fa1f f883 	uxth.w	r8, r3
 800d2d0:	fa11 f18b 	uxtah	r1, r1, fp
 800d2d4:	0c1b      	lsrs	r3, r3, #16
 800d2d6:	eba1 0808 	sub.w	r8, r1, r8
 800d2da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2e2:	fa1f f888 	uxth.w	r8, r8
 800d2e6:	1419      	asrs	r1, r3, #16
 800d2e8:	454e      	cmp	r6, r9
 800d2ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2ee:	f84a 3b04 	str.w	r3, [sl], #4
 800d2f2:	d8e7      	bhi.n	800d2c4 <__mdiff+0x80>
 800d2f4:	1b33      	subs	r3, r6, r4
 800d2f6:	3b15      	subs	r3, #21
 800d2f8:	f023 0303 	bic.w	r3, r3, #3
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	3415      	adds	r4, #21
 800d300:	42a6      	cmp	r6, r4
 800d302:	bf38      	it	cc
 800d304:	2304      	movcc	r3, #4
 800d306:	441d      	add	r5, r3
 800d308:	4473      	add	r3, lr
 800d30a:	469e      	mov	lr, r3
 800d30c:	462e      	mov	r6, r5
 800d30e:	4566      	cmp	r6, ip
 800d310:	d30e      	bcc.n	800d330 <__mdiff+0xec>
 800d312:	f10c 0203 	add.w	r2, ip, #3
 800d316:	1b52      	subs	r2, r2, r5
 800d318:	f022 0203 	bic.w	r2, r2, #3
 800d31c:	3d03      	subs	r5, #3
 800d31e:	45ac      	cmp	ip, r5
 800d320:	bf38      	it	cc
 800d322:	2200      	movcc	r2, #0
 800d324:	441a      	add	r2, r3
 800d326:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d32a:	b17b      	cbz	r3, 800d34c <__mdiff+0x108>
 800d32c:	6107      	str	r7, [r0, #16]
 800d32e:	e7a3      	b.n	800d278 <__mdiff+0x34>
 800d330:	f856 8b04 	ldr.w	r8, [r6], #4
 800d334:	fa11 f288 	uxtah	r2, r1, r8
 800d338:	1414      	asrs	r4, r2, #16
 800d33a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d33e:	b292      	uxth	r2, r2
 800d340:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d344:	f84e 2b04 	str.w	r2, [lr], #4
 800d348:	1421      	asrs	r1, r4, #16
 800d34a:	e7e0      	b.n	800d30e <__mdiff+0xca>
 800d34c:	3f01      	subs	r7, #1
 800d34e:	e7ea      	b.n	800d326 <__mdiff+0xe2>
 800d350:	0800fb57 	.word	0x0800fb57
 800d354:	0800fb68 	.word	0x0800fb68

0800d358 <__d2b>:
 800d358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d35c:	4689      	mov	r9, r1
 800d35e:	2101      	movs	r1, #1
 800d360:	ec57 6b10 	vmov	r6, r7, d0
 800d364:	4690      	mov	r8, r2
 800d366:	f7ff fccf 	bl	800cd08 <_Balloc>
 800d36a:	4604      	mov	r4, r0
 800d36c:	b930      	cbnz	r0, 800d37c <__d2b+0x24>
 800d36e:	4602      	mov	r2, r0
 800d370:	4b25      	ldr	r3, [pc, #148]	; (800d408 <__d2b+0xb0>)
 800d372:	4826      	ldr	r0, [pc, #152]	; (800d40c <__d2b+0xb4>)
 800d374:	f240 310a 	movw	r1, #778	; 0x30a
 800d378:	f000 faac 	bl	800d8d4 <__assert_func>
 800d37c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d384:	bb35      	cbnz	r5, 800d3d4 <__d2b+0x7c>
 800d386:	2e00      	cmp	r6, #0
 800d388:	9301      	str	r3, [sp, #4]
 800d38a:	d028      	beq.n	800d3de <__d2b+0x86>
 800d38c:	4668      	mov	r0, sp
 800d38e:	9600      	str	r6, [sp, #0]
 800d390:	f7ff fd82 	bl	800ce98 <__lo0bits>
 800d394:	9900      	ldr	r1, [sp, #0]
 800d396:	b300      	cbz	r0, 800d3da <__d2b+0x82>
 800d398:	9a01      	ldr	r2, [sp, #4]
 800d39a:	f1c0 0320 	rsb	r3, r0, #32
 800d39e:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a2:	430b      	orrs	r3, r1
 800d3a4:	40c2      	lsrs	r2, r0
 800d3a6:	6163      	str	r3, [r4, #20]
 800d3a8:	9201      	str	r2, [sp, #4]
 800d3aa:	9b01      	ldr	r3, [sp, #4]
 800d3ac:	61a3      	str	r3, [r4, #24]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	bf14      	ite	ne
 800d3b2:	2202      	movne	r2, #2
 800d3b4:	2201      	moveq	r2, #1
 800d3b6:	6122      	str	r2, [r4, #16]
 800d3b8:	b1d5      	cbz	r5, 800d3f0 <__d2b+0x98>
 800d3ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3be:	4405      	add	r5, r0
 800d3c0:	f8c9 5000 	str.w	r5, [r9]
 800d3c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3c8:	f8c8 0000 	str.w	r0, [r8]
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	b003      	add	sp, #12
 800d3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3d8:	e7d5      	b.n	800d386 <__d2b+0x2e>
 800d3da:	6161      	str	r1, [r4, #20]
 800d3dc:	e7e5      	b.n	800d3aa <__d2b+0x52>
 800d3de:	a801      	add	r0, sp, #4
 800d3e0:	f7ff fd5a 	bl	800ce98 <__lo0bits>
 800d3e4:	9b01      	ldr	r3, [sp, #4]
 800d3e6:	6163      	str	r3, [r4, #20]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	6122      	str	r2, [r4, #16]
 800d3ec:	3020      	adds	r0, #32
 800d3ee:	e7e3      	b.n	800d3b8 <__d2b+0x60>
 800d3f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3f8:	f8c9 0000 	str.w	r0, [r9]
 800d3fc:	6918      	ldr	r0, [r3, #16]
 800d3fe:	f7ff fd2b 	bl	800ce58 <__hi0bits>
 800d402:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d406:	e7df      	b.n	800d3c8 <__d2b+0x70>
 800d408:	0800fb57 	.word	0x0800fb57
 800d40c:	0800fb68 	.word	0x0800fb68

0800d410 <_calloc_r>:
 800d410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d412:	fba1 2402 	umull	r2, r4, r1, r2
 800d416:	b94c      	cbnz	r4, 800d42c <_calloc_r+0x1c>
 800d418:	4611      	mov	r1, r2
 800d41a:	9201      	str	r2, [sp, #4]
 800d41c:	f000 f87a 	bl	800d514 <_malloc_r>
 800d420:	9a01      	ldr	r2, [sp, #4]
 800d422:	4605      	mov	r5, r0
 800d424:	b930      	cbnz	r0, 800d434 <_calloc_r+0x24>
 800d426:	4628      	mov	r0, r5
 800d428:	b003      	add	sp, #12
 800d42a:	bd30      	pop	{r4, r5, pc}
 800d42c:	220c      	movs	r2, #12
 800d42e:	6002      	str	r2, [r0, #0]
 800d430:	2500      	movs	r5, #0
 800d432:	e7f8      	b.n	800d426 <_calloc_r+0x16>
 800d434:	4621      	mov	r1, r4
 800d436:	f7fe f93f 	bl	800b6b8 <memset>
 800d43a:	e7f4      	b.n	800d426 <_calloc_r+0x16>

0800d43c <_free_r>:
 800d43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d43e:	2900      	cmp	r1, #0
 800d440:	d044      	beq.n	800d4cc <_free_r+0x90>
 800d442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d446:	9001      	str	r0, [sp, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f1a1 0404 	sub.w	r4, r1, #4
 800d44e:	bfb8      	it	lt
 800d450:	18e4      	addlt	r4, r4, r3
 800d452:	f000 fa9b 	bl	800d98c <__malloc_lock>
 800d456:	4a1e      	ldr	r2, [pc, #120]	; (800d4d0 <_free_r+0x94>)
 800d458:	9801      	ldr	r0, [sp, #4]
 800d45a:	6813      	ldr	r3, [r2, #0]
 800d45c:	b933      	cbnz	r3, 800d46c <_free_r+0x30>
 800d45e:	6063      	str	r3, [r4, #4]
 800d460:	6014      	str	r4, [r2, #0]
 800d462:	b003      	add	sp, #12
 800d464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d468:	f000 ba96 	b.w	800d998 <__malloc_unlock>
 800d46c:	42a3      	cmp	r3, r4
 800d46e:	d908      	bls.n	800d482 <_free_r+0x46>
 800d470:	6825      	ldr	r5, [r4, #0]
 800d472:	1961      	adds	r1, r4, r5
 800d474:	428b      	cmp	r3, r1
 800d476:	bf01      	itttt	eq
 800d478:	6819      	ldreq	r1, [r3, #0]
 800d47a:	685b      	ldreq	r3, [r3, #4]
 800d47c:	1949      	addeq	r1, r1, r5
 800d47e:	6021      	streq	r1, [r4, #0]
 800d480:	e7ed      	b.n	800d45e <_free_r+0x22>
 800d482:	461a      	mov	r2, r3
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	b10b      	cbz	r3, 800d48c <_free_r+0x50>
 800d488:	42a3      	cmp	r3, r4
 800d48a:	d9fa      	bls.n	800d482 <_free_r+0x46>
 800d48c:	6811      	ldr	r1, [r2, #0]
 800d48e:	1855      	adds	r5, r2, r1
 800d490:	42a5      	cmp	r5, r4
 800d492:	d10b      	bne.n	800d4ac <_free_r+0x70>
 800d494:	6824      	ldr	r4, [r4, #0]
 800d496:	4421      	add	r1, r4
 800d498:	1854      	adds	r4, r2, r1
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	6011      	str	r1, [r2, #0]
 800d49e:	d1e0      	bne.n	800d462 <_free_r+0x26>
 800d4a0:	681c      	ldr	r4, [r3, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	6053      	str	r3, [r2, #4]
 800d4a6:	4421      	add	r1, r4
 800d4a8:	6011      	str	r1, [r2, #0]
 800d4aa:	e7da      	b.n	800d462 <_free_r+0x26>
 800d4ac:	d902      	bls.n	800d4b4 <_free_r+0x78>
 800d4ae:	230c      	movs	r3, #12
 800d4b0:	6003      	str	r3, [r0, #0]
 800d4b2:	e7d6      	b.n	800d462 <_free_r+0x26>
 800d4b4:	6825      	ldr	r5, [r4, #0]
 800d4b6:	1961      	adds	r1, r4, r5
 800d4b8:	428b      	cmp	r3, r1
 800d4ba:	bf04      	itt	eq
 800d4bc:	6819      	ldreq	r1, [r3, #0]
 800d4be:	685b      	ldreq	r3, [r3, #4]
 800d4c0:	6063      	str	r3, [r4, #4]
 800d4c2:	bf04      	itt	eq
 800d4c4:	1949      	addeq	r1, r1, r5
 800d4c6:	6021      	streq	r1, [r4, #0]
 800d4c8:	6054      	str	r4, [r2, #4]
 800d4ca:	e7ca      	b.n	800d462 <_free_r+0x26>
 800d4cc:	b003      	add	sp, #12
 800d4ce:	bd30      	pop	{r4, r5, pc}
 800d4d0:	200009f0 	.word	0x200009f0

0800d4d4 <sbrk_aligned>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	4e0e      	ldr	r6, [pc, #56]	; (800d510 <sbrk_aligned+0x3c>)
 800d4d8:	460c      	mov	r4, r1
 800d4da:	6831      	ldr	r1, [r6, #0]
 800d4dc:	4605      	mov	r5, r0
 800d4de:	b911      	cbnz	r1, 800d4e6 <sbrk_aligned+0x12>
 800d4e0:	f000 f9e8 	bl	800d8b4 <_sbrk_r>
 800d4e4:	6030      	str	r0, [r6, #0]
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f000 f9e3 	bl	800d8b4 <_sbrk_r>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	d00a      	beq.n	800d508 <sbrk_aligned+0x34>
 800d4f2:	1cc4      	adds	r4, r0, #3
 800d4f4:	f024 0403 	bic.w	r4, r4, #3
 800d4f8:	42a0      	cmp	r0, r4
 800d4fa:	d007      	beq.n	800d50c <sbrk_aligned+0x38>
 800d4fc:	1a21      	subs	r1, r4, r0
 800d4fe:	4628      	mov	r0, r5
 800d500:	f000 f9d8 	bl	800d8b4 <_sbrk_r>
 800d504:	3001      	adds	r0, #1
 800d506:	d101      	bne.n	800d50c <sbrk_aligned+0x38>
 800d508:	f04f 34ff 	mov.w	r4, #4294967295
 800d50c:	4620      	mov	r0, r4
 800d50e:	bd70      	pop	{r4, r5, r6, pc}
 800d510:	200009f4 	.word	0x200009f4

0800d514 <_malloc_r>:
 800d514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d518:	1ccd      	adds	r5, r1, #3
 800d51a:	f025 0503 	bic.w	r5, r5, #3
 800d51e:	3508      	adds	r5, #8
 800d520:	2d0c      	cmp	r5, #12
 800d522:	bf38      	it	cc
 800d524:	250c      	movcc	r5, #12
 800d526:	2d00      	cmp	r5, #0
 800d528:	4607      	mov	r7, r0
 800d52a:	db01      	blt.n	800d530 <_malloc_r+0x1c>
 800d52c:	42a9      	cmp	r1, r5
 800d52e:	d905      	bls.n	800d53c <_malloc_r+0x28>
 800d530:	230c      	movs	r3, #12
 800d532:	603b      	str	r3, [r7, #0]
 800d534:	2600      	movs	r6, #0
 800d536:	4630      	mov	r0, r6
 800d538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d53c:	4e2e      	ldr	r6, [pc, #184]	; (800d5f8 <_malloc_r+0xe4>)
 800d53e:	f000 fa25 	bl	800d98c <__malloc_lock>
 800d542:	6833      	ldr	r3, [r6, #0]
 800d544:	461c      	mov	r4, r3
 800d546:	bb34      	cbnz	r4, 800d596 <_malloc_r+0x82>
 800d548:	4629      	mov	r1, r5
 800d54a:	4638      	mov	r0, r7
 800d54c:	f7ff ffc2 	bl	800d4d4 <sbrk_aligned>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	4604      	mov	r4, r0
 800d554:	d14d      	bne.n	800d5f2 <_malloc_r+0xde>
 800d556:	6834      	ldr	r4, [r6, #0]
 800d558:	4626      	mov	r6, r4
 800d55a:	2e00      	cmp	r6, #0
 800d55c:	d140      	bne.n	800d5e0 <_malloc_r+0xcc>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	4631      	mov	r1, r6
 800d562:	4638      	mov	r0, r7
 800d564:	eb04 0803 	add.w	r8, r4, r3
 800d568:	f000 f9a4 	bl	800d8b4 <_sbrk_r>
 800d56c:	4580      	cmp	r8, r0
 800d56e:	d13a      	bne.n	800d5e6 <_malloc_r+0xd2>
 800d570:	6821      	ldr	r1, [r4, #0]
 800d572:	3503      	adds	r5, #3
 800d574:	1a6d      	subs	r5, r5, r1
 800d576:	f025 0503 	bic.w	r5, r5, #3
 800d57a:	3508      	adds	r5, #8
 800d57c:	2d0c      	cmp	r5, #12
 800d57e:	bf38      	it	cc
 800d580:	250c      	movcc	r5, #12
 800d582:	4629      	mov	r1, r5
 800d584:	4638      	mov	r0, r7
 800d586:	f7ff ffa5 	bl	800d4d4 <sbrk_aligned>
 800d58a:	3001      	adds	r0, #1
 800d58c:	d02b      	beq.n	800d5e6 <_malloc_r+0xd2>
 800d58e:	6823      	ldr	r3, [r4, #0]
 800d590:	442b      	add	r3, r5
 800d592:	6023      	str	r3, [r4, #0]
 800d594:	e00e      	b.n	800d5b4 <_malloc_r+0xa0>
 800d596:	6822      	ldr	r2, [r4, #0]
 800d598:	1b52      	subs	r2, r2, r5
 800d59a:	d41e      	bmi.n	800d5da <_malloc_r+0xc6>
 800d59c:	2a0b      	cmp	r2, #11
 800d59e:	d916      	bls.n	800d5ce <_malloc_r+0xba>
 800d5a0:	1961      	adds	r1, r4, r5
 800d5a2:	42a3      	cmp	r3, r4
 800d5a4:	6025      	str	r5, [r4, #0]
 800d5a6:	bf18      	it	ne
 800d5a8:	6059      	strne	r1, [r3, #4]
 800d5aa:	6863      	ldr	r3, [r4, #4]
 800d5ac:	bf08      	it	eq
 800d5ae:	6031      	streq	r1, [r6, #0]
 800d5b0:	5162      	str	r2, [r4, r5]
 800d5b2:	604b      	str	r3, [r1, #4]
 800d5b4:	4638      	mov	r0, r7
 800d5b6:	f104 060b 	add.w	r6, r4, #11
 800d5ba:	f000 f9ed 	bl	800d998 <__malloc_unlock>
 800d5be:	f026 0607 	bic.w	r6, r6, #7
 800d5c2:	1d23      	adds	r3, r4, #4
 800d5c4:	1af2      	subs	r2, r6, r3
 800d5c6:	d0b6      	beq.n	800d536 <_malloc_r+0x22>
 800d5c8:	1b9b      	subs	r3, r3, r6
 800d5ca:	50a3      	str	r3, [r4, r2]
 800d5cc:	e7b3      	b.n	800d536 <_malloc_r+0x22>
 800d5ce:	6862      	ldr	r2, [r4, #4]
 800d5d0:	42a3      	cmp	r3, r4
 800d5d2:	bf0c      	ite	eq
 800d5d4:	6032      	streq	r2, [r6, #0]
 800d5d6:	605a      	strne	r2, [r3, #4]
 800d5d8:	e7ec      	b.n	800d5b4 <_malloc_r+0xa0>
 800d5da:	4623      	mov	r3, r4
 800d5dc:	6864      	ldr	r4, [r4, #4]
 800d5de:	e7b2      	b.n	800d546 <_malloc_r+0x32>
 800d5e0:	4634      	mov	r4, r6
 800d5e2:	6876      	ldr	r6, [r6, #4]
 800d5e4:	e7b9      	b.n	800d55a <_malloc_r+0x46>
 800d5e6:	230c      	movs	r3, #12
 800d5e8:	603b      	str	r3, [r7, #0]
 800d5ea:	4638      	mov	r0, r7
 800d5ec:	f000 f9d4 	bl	800d998 <__malloc_unlock>
 800d5f0:	e7a1      	b.n	800d536 <_malloc_r+0x22>
 800d5f2:	6025      	str	r5, [r4, #0]
 800d5f4:	e7de      	b.n	800d5b4 <_malloc_r+0xa0>
 800d5f6:	bf00      	nop
 800d5f8:	200009f0 	.word	0x200009f0

0800d5fc <__ssputs_r>:
 800d5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d600:	688e      	ldr	r6, [r1, #8]
 800d602:	429e      	cmp	r6, r3
 800d604:	4682      	mov	sl, r0
 800d606:	460c      	mov	r4, r1
 800d608:	4690      	mov	r8, r2
 800d60a:	461f      	mov	r7, r3
 800d60c:	d838      	bhi.n	800d680 <__ssputs_r+0x84>
 800d60e:	898a      	ldrh	r2, [r1, #12]
 800d610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d614:	d032      	beq.n	800d67c <__ssputs_r+0x80>
 800d616:	6825      	ldr	r5, [r4, #0]
 800d618:	6909      	ldr	r1, [r1, #16]
 800d61a:	eba5 0901 	sub.w	r9, r5, r1
 800d61e:	6965      	ldr	r5, [r4, #20]
 800d620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d628:	3301      	adds	r3, #1
 800d62a:	444b      	add	r3, r9
 800d62c:	106d      	asrs	r5, r5, #1
 800d62e:	429d      	cmp	r5, r3
 800d630:	bf38      	it	cc
 800d632:	461d      	movcc	r5, r3
 800d634:	0553      	lsls	r3, r2, #21
 800d636:	d531      	bpl.n	800d69c <__ssputs_r+0xa0>
 800d638:	4629      	mov	r1, r5
 800d63a:	f7ff ff6b 	bl	800d514 <_malloc_r>
 800d63e:	4606      	mov	r6, r0
 800d640:	b950      	cbnz	r0, 800d658 <__ssputs_r+0x5c>
 800d642:	230c      	movs	r3, #12
 800d644:	f8ca 3000 	str.w	r3, [sl]
 800d648:	89a3      	ldrh	r3, [r4, #12]
 800d64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d64e:	81a3      	strh	r3, [r4, #12]
 800d650:	f04f 30ff 	mov.w	r0, #4294967295
 800d654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d658:	6921      	ldr	r1, [r4, #16]
 800d65a:	464a      	mov	r2, r9
 800d65c:	f7ff fb46 	bl	800ccec <memcpy>
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d66a:	81a3      	strh	r3, [r4, #12]
 800d66c:	6126      	str	r6, [r4, #16]
 800d66e:	6165      	str	r5, [r4, #20]
 800d670:	444e      	add	r6, r9
 800d672:	eba5 0509 	sub.w	r5, r5, r9
 800d676:	6026      	str	r6, [r4, #0]
 800d678:	60a5      	str	r5, [r4, #8]
 800d67a:	463e      	mov	r6, r7
 800d67c:	42be      	cmp	r6, r7
 800d67e:	d900      	bls.n	800d682 <__ssputs_r+0x86>
 800d680:	463e      	mov	r6, r7
 800d682:	6820      	ldr	r0, [r4, #0]
 800d684:	4632      	mov	r2, r6
 800d686:	4641      	mov	r1, r8
 800d688:	f000 f966 	bl	800d958 <memmove>
 800d68c:	68a3      	ldr	r3, [r4, #8]
 800d68e:	1b9b      	subs	r3, r3, r6
 800d690:	60a3      	str	r3, [r4, #8]
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	4433      	add	r3, r6
 800d696:	6023      	str	r3, [r4, #0]
 800d698:	2000      	movs	r0, #0
 800d69a:	e7db      	b.n	800d654 <__ssputs_r+0x58>
 800d69c:	462a      	mov	r2, r5
 800d69e:	f000 f981 	bl	800d9a4 <_realloc_r>
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d1e1      	bne.n	800d66c <__ssputs_r+0x70>
 800d6a8:	6921      	ldr	r1, [r4, #16]
 800d6aa:	4650      	mov	r0, sl
 800d6ac:	f7ff fec6 	bl	800d43c <_free_r>
 800d6b0:	e7c7      	b.n	800d642 <__ssputs_r+0x46>
	...

0800d6b4 <_svfiprintf_r>:
 800d6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b8:	4698      	mov	r8, r3
 800d6ba:	898b      	ldrh	r3, [r1, #12]
 800d6bc:	061b      	lsls	r3, r3, #24
 800d6be:	b09d      	sub	sp, #116	; 0x74
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	460d      	mov	r5, r1
 800d6c4:	4614      	mov	r4, r2
 800d6c6:	d50e      	bpl.n	800d6e6 <_svfiprintf_r+0x32>
 800d6c8:	690b      	ldr	r3, [r1, #16]
 800d6ca:	b963      	cbnz	r3, 800d6e6 <_svfiprintf_r+0x32>
 800d6cc:	2140      	movs	r1, #64	; 0x40
 800d6ce:	f7ff ff21 	bl	800d514 <_malloc_r>
 800d6d2:	6028      	str	r0, [r5, #0]
 800d6d4:	6128      	str	r0, [r5, #16]
 800d6d6:	b920      	cbnz	r0, 800d6e2 <_svfiprintf_r+0x2e>
 800d6d8:	230c      	movs	r3, #12
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e0:	e0d1      	b.n	800d886 <_svfiprintf_r+0x1d2>
 800d6e2:	2340      	movs	r3, #64	; 0x40
 800d6e4:	616b      	str	r3, [r5, #20]
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d6ea:	2320      	movs	r3, #32
 800d6ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6f4:	2330      	movs	r3, #48	; 0x30
 800d6f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8a0 <_svfiprintf_r+0x1ec>
 800d6fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6fe:	f04f 0901 	mov.w	r9, #1
 800d702:	4623      	mov	r3, r4
 800d704:	469a      	mov	sl, r3
 800d706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d70a:	b10a      	cbz	r2, 800d710 <_svfiprintf_r+0x5c>
 800d70c:	2a25      	cmp	r2, #37	; 0x25
 800d70e:	d1f9      	bne.n	800d704 <_svfiprintf_r+0x50>
 800d710:	ebba 0b04 	subs.w	fp, sl, r4
 800d714:	d00b      	beq.n	800d72e <_svfiprintf_r+0x7a>
 800d716:	465b      	mov	r3, fp
 800d718:	4622      	mov	r2, r4
 800d71a:	4629      	mov	r1, r5
 800d71c:	4638      	mov	r0, r7
 800d71e:	f7ff ff6d 	bl	800d5fc <__ssputs_r>
 800d722:	3001      	adds	r0, #1
 800d724:	f000 80aa 	beq.w	800d87c <_svfiprintf_r+0x1c8>
 800d728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d72a:	445a      	add	r2, fp
 800d72c:	9209      	str	r2, [sp, #36]	; 0x24
 800d72e:	f89a 3000 	ldrb.w	r3, [sl]
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 80a2 	beq.w	800d87c <_svfiprintf_r+0x1c8>
 800d738:	2300      	movs	r3, #0
 800d73a:	f04f 32ff 	mov.w	r2, #4294967295
 800d73e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d742:	f10a 0a01 	add.w	sl, sl, #1
 800d746:	9304      	str	r3, [sp, #16]
 800d748:	9307      	str	r3, [sp, #28]
 800d74a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d74e:	931a      	str	r3, [sp, #104]	; 0x68
 800d750:	4654      	mov	r4, sl
 800d752:	2205      	movs	r2, #5
 800d754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d758:	4851      	ldr	r0, [pc, #324]	; (800d8a0 <_svfiprintf_r+0x1ec>)
 800d75a:	f7f2 fd61 	bl	8000220 <memchr>
 800d75e:	9a04      	ldr	r2, [sp, #16]
 800d760:	b9d8      	cbnz	r0, 800d79a <_svfiprintf_r+0xe6>
 800d762:	06d0      	lsls	r0, r2, #27
 800d764:	bf44      	itt	mi
 800d766:	2320      	movmi	r3, #32
 800d768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d76c:	0711      	lsls	r1, r2, #28
 800d76e:	bf44      	itt	mi
 800d770:	232b      	movmi	r3, #43	; 0x2b
 800d772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d776:	f89a 3000 	ldrb.w	r3, [sl]
 800d77a:	2b2a      	cmp	r3, #42	; 0x2a
 800d77c:	d015      	beq.n	800d7aa <_svfiprintf_r+0xf6>
 800d77e:	9a07      	ldr	r2, [sp, #28]
 800d780:	4654      	mov	r4, sl
 800d782:	2000      	movs	r0, #0
 800d784:	f04f 0c0a 	mov.w	ip, #10
 800d788:	4621      	mov	r1, r4
 800d78a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d78e:	3b30      	subs	r3, #48	; 0x30
 800d790:	2b09      	cmp	r3, #9
 800d792:	d94e      	bls.n	800d832 <_svfiprintf_r+0x17e>
 800d794:	b1b0      	cbz	r0, 800d7c4 <_svfiprintf_r+0x110>
 800d796:	9207      	str	r2, [sp, #28]
 800d798:	e014      	b.n	800d7c4 <_svfiprintf_r+0x110>
 800d79a:	eba0 0308 	sub.w	r3, r0, r8
 800d79e:	fa09 f303 	lsl.w	r3, r9, r3
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	9304      	str	r3, [sp, #16]
 800d7a6:	46a2      	mov	sl, r4
 800d7a8:	e7d2      	b.n	800d750 <_svfiprintf_r+0x9c>
 800d7aa:	9b03      	ldr	r3, [sp, #12]
 800d7ac:	1d19      	adds	r1, r3, #4
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	9103      	str	r1, [sp, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	bfbb      	ittet	lt
 800d7b6:	425b      	neglt	r3, r3
 800d7b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d7bc:	9307      	strge	r3, [sp, #28]
 800d7be:	9307      	strlt	r3, [sp, #28]
 800d7c0:	bfb8      	it	lt
 800d7c2:	9204      	strlt	r2, [sp, #16]
 800d7c4:	7823      	ldrb	r3, [r4, #0]
 800d7c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d7c8:	d10c      	bne.n	800d7e4 <_svfiprintf_r+0x130>
 800d7ca:	7863      	ldrb	r3, [r4, #1]
 800d7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ce:	d135      	bne.n	800d83c <_svfiprintf_r+0x188>
 800d7d0:	9b03      	ldr	r3, [sp, #12]
 800d7d2:	1d1a      	adds	r2, r3, #4
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	9203      	str	r2, [sp, #12]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	bfb8      	it	lt
 800d7dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7e0:	3402      	adds	r4, #2
 800d7e2:	9305      	str	r3, [sp, #20]
 800d7e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d8b0 <_svfiprintf_r+0x1fc>
 800d7e8:	7821      	ldrb	r1, [r4, #0]
 800d7ea:	2203      	movs	r2, #3
 800d7ec:	4650      	mov	r0, sl
 800d7ee:	f7f2 fd17 	bl	8000220 <memchr>
 800d7f2:	b140      	cbz	r0, 800d806 <_svfiprintf_r+0x152>
 800d7f4:	2340      	movs	r3, #64	; 0x40
 800d7f6:	eba0 000a 	sub.w	r0, r0, sl
 800d7fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	4303      	orrs	r3, r0
 800d802:	3401      	adds	r4, #1
 800d804:	9304      	str	r3, [sp, #16]
 800d806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d80a:	4826      	ldr	r0, [pc, #152]	; (800d8a4 <_svfiprintf_r+0x1f0>)
 800d80c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d810:	2206      	movs	r2, #6
 800d812:	f7f2 fd05 	bl	8000220 <memchr>
 800d816:	2800      	cmp	r0, #0
 800d818:	d038      	beq.n	800d88c <_svfiprintf_r+0x1d8>
 800d81a:	4b23      	ldr	r3, [pc, #140]	; (800d8a8 <_svfiprintf_r+0x1f4>)
 800d81c:	bb1b      	cbnz	r3, 800d866 <_svfiprintf_r+0x1b2>
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	3307      	adds	r3, #7
 800d822:	f023 0307 	bic.w	r3, r3, #7
 800d826:	3308      	adds	r3, #8
 800d828:	9303      	str	r3, [sp, #12]
 800d82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d82c:	4433      	add	r3, r6
 800d82e:	9309      	str	r3, [sp, #36]	; 0x24
 800d830:	e767      	b.n	800d702 <_svfiprintf_r+0x4e>
 800d832:	fb0c 3202 	mla	r2, ip, r2, r3
 800d836:	460c      	mov	r4, r1
 800d838:	2001      	movs	r0, #1
 800d83a:	e7a5      	b.n	800d788 <_svfiprintf_r+0xd4>
 800d83c:	2300      	movs	r3, #0
 800d83e:	3401      	adds	r4, #1
 800d840:	9305      	str	r3, [sp, #20]
 800d842:	4619      	mov	r1, r3
 800d844:	f04f 0c0a 	mov.w	ip, #10
 800d848:	4620      	mov	r0, r4
 800d84a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d84e:	3a30      	subs	r2, #48	; 0x30
 800d850:	2a09      	cmp	r2, #9
 800d852:	d903      	bls.n	800d85c <_svfiprintf_r+0x1a8>
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0c5      	beq.n	800d7e4 <_svfiprintf_r+0x130>
 800d858:	9105      	str	r1, [sp, #20]
 800d85a:	e7c3      	b.n	800d7e4 <_svfiprintf_r+0x130>
 800d85c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d860:	4604      	mov	r4, r0
 800d862:	2301      	movs	r3, #1
 800d864:	e7f0      	b.n	800d848 <_svfiprintf_r+0x194>
 800d866:	ab03      	add	r3, sp, #12
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	462a      	mov	r2, r5
 800d86c:	4b0f      	ldr	r3, [pc, #60]	; (800d8ac <_svfiprintf_r+0x1f8>)
 800d86e:	a904      	add	r1, sp, #16
 800d870:	4638      	mov	r0, r7
 800d872:	f7fd ffc9 	bl	800b808 <_printf_float>
 800d876:	1c42      	adds	r2, r0, #1
 800d878:	4606      	mov	r6, r0
 800d87a:	d1d6      	bne.n	800d82a <_svfiprintf_r+0x176>
 800d87c:	89ab      	ldrh	r3, [r5, #12]
 800d87e:	065b      	lsls	r3, r3, #25
 800d880:	f53f af2c 	bmi.w	800d6dc <_svfiprintf_r+0x28>
 800d884:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d886:	b01d      	add	sp, #116	; 0x74
 800d888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88c:	ab03      	add	r3, sp, #12
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	462a      	mov	r2, r5
 800d892:	4b06      	ldr	r3, [pc, #24]	; (800d8ac <_svfiprintf_r+0x1f8>)
 800d894:	a904      	add	r1, sp, #16
 800d896:	4638      	mov	r0, r7
 800d898:	f7fe fa5a 	bl	800bd50 <_printf_i>
 800d89c:	e7eb      	b.n	800d876 <_svfiprintf_r+0x1c2>
 800d89e:	bf00      	nop
 800d8a0:	0800fcc4 	.word	0x0800fcc4
 800d8a4:	0800fcce 	.word	0x0800fcce
 800d8a8:	0800b809 	.word	0x0800b809
 800d8ac:	0800d5fd 	.word	0x0800d5fd
 800d8b0:	0800fcca 	.word	0x0800fcca

0800d8b4 <_sbrk_r>:
 800d8b4:	b538      	push	{r3, r4, r5, lr}
 800d8b6:	4d06      	ldr	r5, [pc, #24]	; (800d8d0 <_sbrk_r+0x1c>)
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	4608      	mov	r0, r1
 800d8be:	602b      	str	r3, [r5, #0]
 800d8c0:	f7f8 f932 	bl	8005b28 <_sbrk>
 800d8c4:	1c43      	adds	r3, r0, #1
 800d8c6:	d102      	bne.n	800d8ce <_sbrk_r+0x1a>
 800d8c8:	682b      	ldr	r3, [r5, #0]
 800d8ca:	b103      	cbz	r3, 800d8ce <_sbrk_r+0x1a>
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	bd38      	pop	{r3, r4, r5, pc}
 800d8d0:	200009f8 	.word	0x200009f8

0800d8d4 <__assert_func>:
 800d8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8d6:	4614      	mov	r4, r2
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4b09      	ldr	r3, [pc, #36]	; (800d900 <__assert_func+0x2c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4605      	mov	r5, r0
 800d8e0:	68d8      	ldr	r0, [r3, #12]
 800d8e2:	b14c      	cbz	r4, 800d8f8 <__assert_func+0x24>
 800d8e4:	4b07      	ldr	r3, [pc, #28]	; (800d904 <__assert_func+0x30>)
 800d8e6:	9100      	str	r1, [sp, #0]
 800d8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8ec:	4906      	ldr	r1, [pc, #24]	; (800d908 <__assert_func+0x34>)
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	f000 f80e 	bl	800d910 <fiprintf>
 800d8f4:	f000 faac 	bl	800de50 <abort>
 800d8f8:	4b04      	ldr	r3, [pc, #16]	; (800d90c <__assert_func+0x38>)
 800d8fa:	461c      	mov	r4, r3
 800d8fc:	e7f3      	b.n	800d8e6 <__assert_func+0x12>
 800d8fe:	bf00      	nop
 800d900:	20000084 	.word	0x20000084
 800d904:	0800fcd5 	.word	0x0800fcd5
 800d908:	0800fce2 	.word	0x0800fce2
 800d90c:	0800fd10 	.word	0x0800fd10

0800d910 <fiprintf>:
 800d910:	b40e      	push	{r1, r2, r3}
 800d912:	b503      	push	{r0, r1, lr}
 800d914:	4601      	mov	r1, r0
 800d916:	ab03      	add	r3, sp, #12
 800d918:	4805      	ldr	r0, [pc, #20]	; (800d930 <fiprintf+0x20>)
 800d91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d91e:	6800      	ldr	r0, [r0, #0]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	f000 f897 	bl	800da54 <_vfiprintf_r>
 800d926:	b002      	add	sp, #8
 800d928:	f85d eb04 	ldr.w	lr, [sp], #4
 800d92c:	b003      	add	sp, #12
 800d92e:	4770      	bx	lr
 800d930:	20000084 	.word	0x20000084

0800d934 <__ascii_mbtowc>:
 800d934:	b082      	sub	sp, #8
 800d936:	b901      	cbnz	r1, 800d93a <__ascii_mbtowc+0x6>
 800d938:	a901      	add	r1, sp, #4
 800d93a:	b142      	cbz	r2, 800d94e <__ascii_mbtowc+0x1a>
 800d93c:	b14b      	cbz	r3, 800d952 <__ascii_mbtowc+0x1e>
 800d93e:	7813      	ldrb	r3, [r2, #0]
 800d940:	600b      	str	r3, [r1, #0]
 800d942:	7812      	ldrb	r2, [r2, #0]
 800d944:	1e10      	subs	r0, r2, #0
 800d946:	bf18      	it	ne
 800d948:	2001      	movne	r0, #1
 800d94a:	b002      	add	sp, #8
 800d94c:	4770      	bx	lr
 800d94e:	4610      	mov	r0, r2
 800d950:	e7fb      	b.n	800d94a <__ascii_mbtowc+0x16>
 800d952:	f06f 0001 	mvn.w	r0, #1
 800d956:	e7f8      	b.n	800d94a <__ascii_mbtowc+0x16>

0800d958 <memmove>:
 800d958:	4288      	cmp	r0, r1
 800d95a:	b510      	push	{r4, lr}
 800d95c:	eb01 0402 	add.w	r4, r1, r2
 800d960:	d902      	bls.n	800d968 <memmove+0x10>
 800d962:	4284      	cmp	r4, r0
 800d964:	4623      	mov	r3, r4
 800d966:	d807      	bhi.n	800d978 <memmove+0x20>
 800d968:	1e43      	subs	r3, r0, #1
 800d96a:	42a1      	cmp	r1, r4
 800d96c:	d008      	beq.n	800d980 <memmove+0x28>
 800d96e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d972:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d976:	e7f8      	b.n	800d96a <memmove+0x12>
 800d978:	4402      	add	r2, r0
 800d97a:	4601      	mov	r1, r0
 800d97c:	428a      	cmp	r2, r1
 800d97e:	d100      	bne.n	800d982 <memmove+0x2a>
 800d980:	bd10      	pop	{r4, pc}
 800d982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d98a:	e7f7      	b.n	800d97c <memmove+0x24>

0800d98c <__malloc_lock>:
 800d98c:	4801      	ldr	r0, [pc, #4]	; (800d994 <__malloc_lock+0x8>)
 800d98e:	f000 bc1f 	b.w	800e1d0 <__retarget_lock_acquire_recursive>
 800d992:	bf00      	nop
 800d994:	200009fc 	.word	0x200009fc

0800d998 <__malloc_unlock>:
 800d998:	4801      	ldr	r0, [pc, #4]	; (800d9a0 <__malloc_unlock+0x8>)
 800d99a:	f000 bc1a 	b.w	800e1d2 <__retarget_lock_release_recursive>
 800d99e:	bf00      	nop
 800d9a0:	200009fc 	.word	0x200009fc

0800d9a4 <_realloc_r>:
 800d9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a8:	4680      	mov	r8, r0
 800d9aa:	4614      	mov	r4, r2
 800d9ac:	460e      	mov	r6, r1
 800d9ae:	b921      	cbnz	r1, 800d9ba <_realloc_r+0x16>
 800d9b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	f7ff bdad 	b.w	800d514 <_malloc_r>
 800d9ba:	b92a      	cbnz	r2, 800d9c8 <_realloc_r+0x24>
 800d9bc:	f7ff fd3e 	bl	800d43c <_free_r>
 800d9c0:	4625      	mov	r5, r4
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c8:	f000 fc6a 	bl	800e2a0 <_malloc_usable_size_r>
 800d9cc:	4284      	cmp	r4, r0
 800d9ce:	4607      	mov	r7, r0
 800d9d0:	d802      	bhi.n	800d9d8 <_realloc_r+0x34>
 800d9d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9d6:	d812      	bhi.n	800d9fe <_realloc_r+0x5a>
 800d9d8:	4621      	mov	r1, r4
 800d9da:	4640      	mov	r0, r8
 800d9dc:	f7ff fd9a 	bl	800d514 <_malloc_r>
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d0ed      	beq.n	800d9c2 <_realloc_r+0x1e>
 800d9e6:	42bc      	cmp	r4, r7
 800d9e8:	4622      	mov	r2, r4
 800d9ea:	4631      	mov	r1, r6
 800d9ec:	bf28      	it	cs
 800d9ee:	463a      	movcs	r2, r7
 800d9f0:	f7ff f97c 	bl	800ccec <memcpy>
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	f7ff fd20 	bl	800d43c <_free_r>
 800d9fc:	e7e1      	b.n	800d9c2 <_realloc_r+0x1e>
 800d9fe:	4635      	mov	r5, r6
 800da00:	e7df      	b.n	800d9c2 <_realloc_r+0x1e>

0800da02 <__sfputc_r>:
 800da02:	6893      	ldr	r3, [r2, #8]
 800da04:	3b01      	subs	r3, #1
 800da06:	2b00      	cmp	r3, #0
 800da08:	b410      	push	{r4}
 800da0a:	6093      	str	r3, [r2, #8]
 800da0c:	da08      	bge.n	800da20 <__sfputc_r+0x1e>
 800da0e:	6994      	ldr	r4, [r2, #24]
 800da10:	42a3      	cmp	r3, r4
 800da12:	db01      	blt.n	800da18 <__sfputc_r+0x16>
 800da14:	290a      	cmp	r1, #10
 800da16:	d103      	bne.n	800da20 <__sfputc_r+0x1e>
 800da18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da1c:	f000 b94a 	b.w	800dcb4 <__swbuf_r>
 800da20:	6813      	ldr	r3, [r2, #0]
 800da22:	1c58      	adds	r0, r3, #1
 800da24:	6010      	str	r0, [r2, #0]
 800da26:	7019      	strb	r1, [r3, #0]
 800da28:	4608      	mov	r0, r1
 800da2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <__sfputs_r>:
 800da30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da32:	4606      	mov	r6, r0
 800da34:	460f      	mov	r7, r1
 800da36:	4614      	mov	r4, r2
 800da38:	18d5      	adds	r5, r2, r3
 800da3a:	42ac      	cmp	r4, r5
 800da3c:	d101      	bne.n	800da42 <__sfputs_r+0x12>
 800da3e:	2000      	movs	r0, #0
 800da40:	e007      	b.n	800da52 <__sfputs_r+0x22>
 800da42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da46:	463a      	mov	r2, r7
 800da48:	4630      	mov	r0, r6
 800da4a:	f7ff ffda 	bl	800da02 <__sfputc_r>
 800da4e:	1c43      	adds	r3, r0, #1
 800da50:	d1f3      	bne.n	800da3a <__sfputs_r+0xa>
 800da52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da54 <_vfiprintf_r>:
 800da54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da58:	460d      	mov	r5, r1
 800da5a:	b09d      	sub	sp, #116	; 0x74
 800da5c:	4614      	mov	r4, r2
 800da5e:	4698      	mov	r8, r3
 800da60:	4606      	mov	r6, r0
 800da62:	b118      	cbz	r0, 800da6c <_vfiprintf_r+0x18>
 800da64:	6983      	ldr	r3, [r0, #24]
 800da66:	b90b      	cbnz	r3, 800da6c <_vfiprintf_r+0x18>
 800da68:	f000 fb14 	bl	800e094 <__sinit>
 800da6c:	4b89      	ldr	r3, [pc, #548]	; (800dc94 <_vfiprintf_r+0x240>)
 800da6e:	429d      	cmp	r5, r3
 800da70:	d11b      	bne.n	800daaa <_vfiprintf_r+0x56>
 800da72:	6875      	ldr	r5, [r6, #4]
 800da74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da76:	07d9      	lsls	r1, r3, #31
 800da78:	d405      	bmi.n	800da86 <_vfiprintf_r+0x32>
 800da7a:	89ab      	ldrh	r3, [r5, #12]
 800da7c:	059a      	lsls	r2, r3, #22
 800da7e:	d402      	bmi.n	800da86 <_vfiprintf_r+0x32>
 800da80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da82:	f000 fba5 	bl	800e1d0 <__retarget_lock_acquire_recursive>
 800da86:	89ab      	ldrh	r3, [r5, #12]
 800da88:	071b      	lsls	r3, r3, #28
 800da8a:	d501      	bpl.n	800da90 <_vfiprintf_r+0x3c>
 800da8c:	692b      	ldr	r3, [r5, #16]
 800da8e:	b9eb      	cbnz	r3, 800dacc <_vfiprintf_r+0x78>
 800da90:	4629      	mov	r1, r5
 800da92:	4630      	mov	r0, r6
 800da94:	f000 f96e 	bl	800dd74 <__swsetup_r>
 800da98:	b1c0      	cbz	r0, 800dacc <_vfiprintf_r+0x78>
 800da9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da9c:	07dc      	lsls	r4, r3, #31
 800da9e:	d50e      	bpl.n	800dabe <_vfiprintf_r+0x6a>
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295
 800daa4:	b01d      	add	sp, #116	; 0x74
 800daa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daaa:	4b7b      	ldr	r3, [pc, #492]	; (800dc98 <_vfiprintf_r+0x244>)
 800daac:	429d      	cmp	r5, r3
 800daae:	d101      	bne.n	800dab4 <_vfiprintf_r+0x60>
 800dab0:	68b5      	ldr	r5, [r6, #8]
 800dab2:	e7df      	b.n	800da74 <_vfiprintf_r+0x20>
 800dab4:	4b79      	ldr	r3, [pc, #484]	; (800dc9c <_vfiprintf_r+0x248>)
 800dab6:	429d      	cmp	r5, r3
 800dab8:	bf08      	it	eq
 800daba:	68f5      	ldreq	r5, [r6, #12]
 800dabc:	e7da      	b.n	800da74 <_vfiprintf_r+0x20>
 800dabe:	89ab      	ldrh	r3, [r5, #12]
 800dac0:	0598      	lsls	r0, r3, #22
 800dac2:	d4ed      	bmi.n	800daa0 <_vfiprintf_r+0x4c>
 800dac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dac6:	f000 fb84 	bl	800e1d2 <__retarget_lock_release_recursive>
 800daca:	e7e9      	b.n	800daa0 <_vfiprintf_r+0x4c>
 800dacc:	2300      	movs	r3, #0
 800dace:	9309      	str	r3, [sp, #36]	; 0x24
 800dad0:	2320      	movs	r3, #32
 800dad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dad6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dada:	2330      	movs	r3, #48	; 0x30
 800dadc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dca0 <_vfiprintf_r+0x24c>
 800dae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dae4:	f04f 0901 	mov.w	r9, #1
 800dae8:	4623      	mov	r3, r4
 800daea:	469a      	mov	sl, r3
 800daec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daf0:	b10a      	cbz	r2, 800daf6 <_vfiprintf_r+0xa2>
 800daf2:	2a25      	cmp	r2, #37	; 0x25
 800daf4:	d1f9      	bne.n	800daea <_vfiprintf_r+0x96>
 800daf6:	ebba 0b04 	subs.w	fp, sl, r4
 800dafa:	d00b      	beq.n	800db14 <_vfiprintf_r+0xc0>
 800dafc:	465b      	mov	r3, fp
 800dafe:	4622      	mov	r2, r4
 800db00:	4629      	mov	r1, r5
 800db02:	4630      	mov	r0, r6
 800db04:	f7ff ff94 	bl	800da30 <__sfputs_r>
 800db08:	3001      	adds	r0, #1
 800db0a:	f000 80aa 	beq.w	800dc62 <_vfiprintf_r+0x20e>
 800db0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db10:	445a      	add	r2, fp
 800db12:	9209      	str	r2, [sp, #36]	; 0x24
 800db14:	f89a 3000 	ldrb.w	r3, [sl]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f000 80a2 	beq.w	800dc62 <_vfiprintf_r+0x20e>
 800db1e:	2300      	movs	r3, #0
 800db20:	f04f 32ff 	mov.w	r2, #4294967295
 800db24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db28:	f10a 0a01 	add.w	sl, sl, #1
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	9307      	str	r3, [sp, #28]
 800db30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db34:	931a      	str	r3, [sp, #104]	; 0x68
 800db36:	4654      	mov	r4, sl
 800db38:	2205      	movs	r2, #5
 800db3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3e:	4858      	ldr	r0, [pc, #352]	; (800dca0 <_vfiprintf_r+0x24c>)
 800db40:	f7f2 fb6e 	bl	8000220 <memchr>
 800db44:	9a04      	ldr	r2, [sp, #16]
 800db46:	b9d8      	cbnz	r0, 800db80 <_vfiprintf_r+0x12c>
 800db48:	06d1      	lsls	r1, r2, #27
 800db4a:	bf44      	itt	mi
 800db4c:	2320      	movmi	r3, #32
 800db4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db52:	0713      	lsls	r3, r2, #28
 800db54:	bf44      	itt	mi
 800db56:	232b      	movmi	r3, #43	; 0x2b
 800db58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db5c:	f89a 3000 	ldrb.w	r3, [sl]
 800db60:	2b2a      	cmp	r3, #42	; 0x2a
 800db62:	d015      	beq.n	800db90 <_vfiprintf_r+0x13c>
 800db64:	9a07      	ldr	r2, [sp, #28]
 800db66:	4654      	mov	r4, sl
 800db68:	2000      	movs	r0, #0
 800db6a:	f04f 0c0a 	mov.w	ip, #10
 800db6e:	4621      	mov	r1, r4
 800db70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db74:	3b30      	subs	r3, #48	; 0x30
 800db76:	2b09      	cmp	r3, #9
 800db78:	d94e      	bls.n	800dc18 <_vfiprintf_r+0x1c4>
 800db7a:	b1b0      	cbz	r0, 800dbaa <_vfiprintf_r+0x156>
 800db7c:	9207      	str	r2, [sp, #28]
 800db7e:	e014      	b.n	800dbaa <_vfiprintf_r+0x156>
 800db80:	eba0 0308 	sub.w	r3, r0, r8
 800db84:	fa09 f303 	lsl.w	r3, r9, r3
 800db88:	4313      	orrs	r3, r2
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	46a2      	mov	sl, r4
 800db8e:	e7d2      	b.n	800db36 <_vfiprintf_r+0xe2>
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	1d19      	adds	r1, r3, #4
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	9103      	str	r1, [sp, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	bfbb      	ittet	lt
 800db9c:	425b      	neglt	r3, r3
 800db9e:	f042 0202 	orrlt.w	r2, r2, #2
 800dba2:	9307      	strge	r3, [sp, #28]
 800dba4:	9307      	strlt	r3, [sp, #28]
 800dba6:	bfb8      	it	lt
 800dba8:	9204      	strlt	r2, [sp, #16]
 800dbaa:	7823      	ldrb	r3, [r4, #0]
 800dbac:	2b2e      	cmp	r3, #46	; 0x2e
 800dbae:	d10c      	bne.n	800dbca <_vfiprintf_r+0x176>
 800dbb0:	7863      	ldrb	r3, [r4, #1]
 800dbb2:	2b2a      	cmp	r3, #42	; 0x2a
 800dbb4:	d135      	bne.n	800dc22 <_vfiprintf_r+0x1ce>
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	1d1a      	adds	r2, r3, #4
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	9203      	str	r2, [sp, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	bfb8      	it	lt
 800dbc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbc6:	3402      	adds	r4, #2
 800dbc8:	9305      	str	r3, [sp, #20]
 800dbca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dcb0 <_vfiprintf_r+0x25c>
 800dbce:	7821      	ldrb	r1, [r4, #0]
 800dbd0:	2203      	movs	r2, #3
 800dbd2:	4650      	mov	r0, sl
 800dbd4:	f7f2 fb24 	bl	8000220 <memchr>
 800dbd8:	b140      	cbz	r0, 800dbec <_vfiprintf_r+0x198>
 800dbda:	2340      	movs	r3, #64	; 0x40
 800dbdc:	eba0 000a 	sub.w	r0, r0, sl
 800dbe0:	fa03 f000 	lsl.w	r0, r3, r0
 800dbe4:	9b04      	ldr	r3, [sp, #16]
 800dbe6:	4303      	orrs	r3, r0
 800dbe8:	3401      	adds	r4, #1
 800dbea:	9304      	str	r3, [sp, #16]
 800dbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbf0:	482c      	ldr	r0, [pc, #176]	; (800dca4 <_vfiprintf_r+0x250>)
 800dbf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbf6:	2206      	movs	r2, #6
 800dbf8:	f7f2 fb12 	bl	8000220 <memchr>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d03f      	beq.n	800dc80 <_vfiprintf_r+0x22c>
 800dc00:	4b29      	ldr	r3, [pc, #164]	; (800dca8 <_vfiprintf_r+0x254>)
 800dc02:	bb1b      	cbnz	r3, 800dc4c <_vfiprintf_r+0x1f8>
 800dc04:	9b03      	ldr	r3, [sp, #12]
 800dc06:	3307      	adds	r3, #7
 800dc08:	f023 0307 	bic.w	r3, r3, #7
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	9303      	str	r3, [sp, #12]
 800dc10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc12:	443b      	add	r3, r7
 800dc14:	9309      	str	r3, [sp, #36]	; 0x24
 800dc16:	e767      	b.n	800dae8 <_vfiprintf_r+0x94>
 800dc18:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc1c:	460c      	mov	r4, r1
 800dc1e:	2001      	movs	r0, #1
 800dc20:	e7a5      	b.n	800db6e <_vfiprintf_r+0x11a>
 800dc22:	2300      	movs	r3, #0
 800dc24:	3401      	adds	r4, #1
 800dc26:	9305      	str	r3, [sp, #20]
 800dc28:	4619      	mov	r1, r3
 800dc2a:	f04f 0c0a 	mov.w	ip, #10
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc34:	3a30      	subs	r2, #48	; 0x30
 800dc36:	2a09      	cmp	r2, #9
 800dc38:	d903      	bls.n	800dc42 <_vfiprintf_r+0x1ee>
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0c5      	beq.n	800dbca <_vfiprintf_r+0x176>
 800dc3e:	9105      	str	r1, [sp, #20]
 800dc40:	e7c3      	b.n	800dbca <_vfiprintf_r+0x176>
 800dc42:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc46:	4604      	mov	r4, r0
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e7f0      	b.n	800dc2e <_vfiprintf_r+0x1da>
 800dc4c:	ab03      	add	r3, sp, #12
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	462a      	mov	r2, r5
 800dc52:	4b16      	ldr	r3, [pc, #88]	; (800dcac <_vfiprintf_r+0x258>)
 800dc54:	a904      	add	r1, sp, #16
 800dc56:	4630      	mov	r0, r6
 800dc58:	f7fd fdd6 	bl	800b808 <_printf_float>
 800dc5c:	4607      	mov	r7, r0
 800dc5e:	1c78      	adds	r0, r7, #1
 800dc60:	d1d6      	bne.n	800dc10 <_vfiprintf_r+0x1bc>
 800dc62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc64:	07d9      	lsls	r1, r3, #31
 800dc66:	d405      	bmi.n	800dc74 <_vfiprintf_r+0x220>
 800dc68:	89ab      	ldrh	r3, [r5, #12]
 800dc6a:	059a      	lsls	r2, r3, #22
 800dc6c:	d402      	bmi.n	800dc74 <_vfiprintf_r+0x220>
 800dc6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc70:	f000 faaf 	bl	800e1d2 <__retarget_lock_release_recursive>
 800dc74:	89ab      	ldrh	r3, [r5, #12]
 800dc76:	065b      	lsls	r3, r3, #25
 800dc78:	f53f af12 	bmi.w	800daa0 <_vfiprintf_r+0x4c>
 800dc7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc7e:	e711      	b.n	800daa4 <_vfiprintf_r+0x50>
 800dc80:	ab03      	add	r3, sp, #12
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	462a      	mov	r2, r5
 800dc86:	4b09      	ldr	r3, [pc, #36]	; (800dcac <_vfiprintf_r+0x258>)
 800dc88:	a904      	add	r1, sp, #16
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f7fe f860 	bl	800bd50 <_printf_i>
 800dc90:	e7e4      	b.n	800dc5c <_vfiprintf_r+0x208>
 800dc92:	bf00      	nop
 800dc94:	0800fe3c 	.word	0x0800fe3c
 800dc98:	0800fe5c 	.word	0x0800fe5c
 800dc9c:	0800fe1c 	.word	0x0800fe1c
 800dca0:	0800fcc4 	.word	0x0800fcc4
 800dca4:	0800fcce 	.word	0x0800fcce
 800dca8:	0800b809 	.word	0x0800b809
 800dcac:	0800da31 	.word	0x0800da31
 800dcb0:	0800fcca 	.word	0x0800fcca

0800dcb4 <__swbuf_r>:
 800dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcb6:	460e      	mov	r6, r1
 800dcb8:	4614      	mov	r4, r2
 800dcba:	4605      	mov	r5, r0
 800dcbc:	b118      	cbz	r0, 800dcc6 <__swbuf_r+0x12>
 800dcbe:	6983      	ldr	r3, [r0, #24]
 800dcc0:	b90b      	cbnz	r3, 800dcc6 <__swbuf_r+0x12>
 800dcc2:	f000 f9e7 	bl	800e094 <__sinit>
 800dcc6:	4b21      	ldr	r3, [pc, #132]	; (800dd4c <__swbuf_r+0x98>)
 800dcc8:	429c      	cmp	r4, r3
 800dcca:	d12b      	bne.n	800dd24 <__swbuf_r+0x70>
 800dccc:	686c      	ldr	r4, [r5, #4]
 800dcce:	69a3      	ldr	r3, [r4, #24]
 800dcd0:	60a3      	str	r3, [r4, #8]
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	071a      	lsls	r2, r3, #28
 800dcd6:	d52f      	bpl.n	800dd38 <__swbuf_r+0x84>
 800dcd8:	6923      	ldr	r3, [r4, #16]
 800dcda:	b36b      	cbz	r3, 800dd38 <__swbuf_r+0x84>
 800dcdc:	6923      	ldr	r3, [r4, #16]
 800dcde:	6820      	ldr	r0, [r4, #0]
 800dce0:	1ac0      	subs	r0, r0, r3
 800dce2:	6963      	ldr	r3, [r4, #20]
 800dce4:	b2f6      	uxtb	r6, r6
 800dce6:	4283      	cmp	r3, r0
 800dce8:	4637      	mov	r7, r6
 800dcea:	dc04      	bgt.n	800dcf6 <__swbuf_r+0x42>
 800dcec:	4621      	mov	r1, r4
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f000 f93c 	bl	800df6c <_fflush_r>
 800dcf4:	bb30      	cbnz	r0, 800dd44 <__swbuf_r+0x90>
 800dcf6:	68a3      	ldr	r3, [r4, #8]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	60a3      	str	r3, [r4, #8]
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	1c5a      	adds	r2, r3, #1
 800dd00:	6022      	str	r2, [r4, #0]
 800dd02:	701e      	strb	r6, [r3, #0]
 800dd04:	6963      	ldr	r3, [r4, #20]
 800dd06:	3001      	adds	r0, #1
 800dd08:	4283      	cmp	r3, r0
 800dd0a:	d004      	beq.n	800dd16 <__swbuf_r+0x62>
 800dd0c:	89a3      	ldrh	r3, [r4, #12]
 800dd0e:	07db      	lsls	r3, r3, #31
 800dd10:	d506      	bpl.n	800dd20 <__swbuf_r+0x6c>
 800dd12:	2e0a      	cmp	r6, #10
 800dd14:	d104      	bne.n	800dd20 <__swbuf_r+0x6c>
 800dd16:	4621      	mov	r1, r4
 800dd18:	4628      	mov	r0, r5
 800dd1a:	f000 f927 	bl	800df6c <_fflush_r>
 800dd1e:	b988      	cbnz	r0, 800dd44 <__swbuf_r+0x90>
 800dd20:	4638      	mov	r0, r7
 800dd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd24:	4b0a      	ldr	r3, [pc, #40]	; (800dd50 <__swbuf_r+0x9c>)
 800dd26:	429c      	cmp	r4, r3
 800dd28:	d101      	bne.n	800dd2e <__swbuf_r+0x7a>
 800dd2a:	68ac      	ldr	r4, [r5, #8]
 800dd2c:	e7cf      	b.n	800dcce <__swbuf_r+0x1a>
 800dd2e:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <__swbuf_r+0xa0>)
 800dd30:	429c      	cmp	r4, r3
 800dd32:	bf08      	it	eq
 800dd34:	68ec      	ldreq	r4, [r5, #12]
 800dd36:	e7ca      	b.n	800dcce <__swbuf_r+0x1a>
 800dd38:	4621      	mov	r1, r4
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	f000 f81a 	bl	800dd74 <__swsetup_r>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d0cb      	beq.n	800dcdc <__swbuf_r+0x28>
 800dd44:	f04f 37ff 	mov.w	r7, #4294967295
 800dd48:	e7ea      	b.n	800dd20 <__swbuf_r+0x6c>
 800dd4a:	bf00      	nop
 800dd4c:	0800fe3c 	.word	0x0800fe3c
 800dd50:	0800fe5c 	.word	0x0800fe5c
 800dd54:	0800fe1c 	.word	0x0800fe1c

0800dd58 <__ascii_wctomb>:
 800dd58:	b149      	cbz	r1, 800dd6e <__ascii_wctomb+0x16>
 800dd5a:	2aff      	cmp	r2, #255	; 0xff
 800dd5c:	bf85      	ittet	hi
 800dd5e:	238a      	movhi	r3, #138	; 0x8a
 800dd60:	6003      	strhi	r3, [r0, #0]
 800dd62:	700a      	strbls	r2, [r1, #0]
 800dd64:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd68:	bf98      	it	ls
 800dd6a:	2001      	movls	r0, #1
 800dd6c:	4770      	bx	lr
 800dd6e:	4608      	mov	r0, r1
 800dd70:	4770      	bx	lr
	...

0800dd74 <__swsetup_r>:
 800dd74:	4b32      	ldr	r3, [pc, #200]	; (800de40 <__swsetup_r+0xcc>)
 800dd76:	b570      	push	{r4, r5, r6, lr}
 800dd78:	681d      	ldr	r5, [r3, #0]
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	b125      	cbz	r5, 800dd8a <__swsetup_r+0x16>
 800dd80:	69ab      	ldr	r3, [r5, #24]
 800dd82:	b913      	cbnz	r3, 800dd8a <__swsetup_r+0x16>
 800dd84:	4628      	mov	r0, r5
 800dd86:	f000 f985 	bl	800e094 <__sinit>
 800dd8a:	4b2e      	ldr	r3, [pc, #184]	; (800de44 <__swsetup_r+0xd0>)
 800dd8c:	429c      	cmp	r4, r3
 800dd8e:	d10f      	bne.n	800ddb0 <__swsetup_r+0x3c>
 800dd90:	686c      	ldr	r4, [r5, #4]
 800dd92:	89a3      	ldrh	r3, [r4, #12]
 800dd94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd98:	0719      	lsls	r1, r3, #28
 800dd9a:	d42c      	bmi.n	800ddf6 <__swsetup_r+0x82>
 800dd9c:	06dd      	lsls	r5, r3, #27
 800dd9e:	d411      	bmi.n	800ddc4 <__swsetup_r+0x50>
 800dda0:	2309      	movs	r3, #9
 800dda2:	6033      	str	r3, [r6, #0]
 800dda4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dda8:	81a3      	strh	r3, [r4, #12]
 800ddaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ddae:	e03e      	b.n	800de2e <__swsetup_r+0xba>
 800ddb0:	4b25      	ldr	r3, [pc, #148]	; (800de48 <__swsetup_r+0xd4>)
 800ddb2:	429c      	cmp	r4, r3
 800ddb4:	d101      	bne.n	800ddba <__swsetup_r+0x46>
 800ddb6:	68ac      	ldr	r4, [r5, #8]
 800ddb8:	e7eb      	b.n	800dd92 <__swsetup_r+0x1e>
 800ddba:	4b24      	ldr	r3, [pc, #144]	; (800de4c <__swsetup_r+0xd8>)
 800ddbc:	429c      	cmp	r4, r3
 800ddbe:	bf08      	it	eq
 800ddc0:	68ec      	ldreq	r4, [r5, #12]
 800ddc2:	e7e6      	b.n	800dd92 <__swsetup_r+0x1e>
 800ddc4:	0758      	lsls	r0, r3, #29
 800ddc6:	d512      	bpl.n	800ddee <__swsetup_r+0x7a>
 800ddc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddca:	b141      	cbz	r1, 800ddde <__swsetup_r+0x6a>
 800ddcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddd0:	4299      	cmp	r1, r3
 800ddd2:	d002      	beq.n	800ddda <__swsetup_r+0x66>
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f7ff fb31 	bl	800d43c <_free_r>
 800ddda:	2300      	movs	r3, #0
 800dddc:	6363      	str	r3, [r4, #52]	; 0x34
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dde4:	81a3      	strh	r3, [r4, #12]
 800dde6:	2300      	movs	r3, #0
 800dde8:	6063      	str	r3, [r4, #4]
 800ddea:	6923      	ldr	r3, [r4, #16]
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	f043 0308 	orr.w	r3, r3, #8
 800ddf4:	81a3      	strh	r3, [r4, #12]
 800ddf6:	6923      	ldr	r3, [r4, #16]
 800ddf8:	b94b      	cbnz	r3, 800de0e <__swsetup_r+0x9a>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de04:	d003      	beq.n	800de0e <__swsetup_r+0x9a>
 800de06:	4621      	mov	r1, r4
 800de08:	4630      	mov	r0, r6
 800de0a:	f000 fa09 	bl	800e220 <__smakebuf_r>
 800de0e:	89a0      	ldrh	r0, [r4, #12]
 800de10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de14:	f010 0301 	ands.w	r3, r0, #1
 800de18:	d00a      	beq.n	800de30 <__swsetup_r+0xbc>
 800de1a:	2300      	movs	r3, #0
 800de1c:	60a3      	str	r3, [r4, #8]
 800de1e:	6963      	ldr	r3, [r4, #20]
 800de20:	425b      	negs	r3, r3
 800de22:	61a3      	str	r3, [r4, #24]
 800de24:	6923      	ldr	r3, [r4, #16]
 800de26:	b943      	cbnz	r3, 800de3a <__swsetup_r+0xc6>
 800de28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de2c:	d1ba      	bne.n	800dda4 <__swsetup_r+0x30>
 800de2e:	bd70      	pop	{r4, r5, r6, pc}
 800de30:	0781      	lsls	r1, r0, #30
 800de32:	bf58      	it	pl
 800de34:	6963      	ldrpl	r3, [r4, #20]
 800de36:	60a3      	str	r3, [r4, #8]
 800de38:	e7f4      	b.n	800de24 <__swsetup_r+0xb0>
 800de3a:	2000      	movs	r0, #0
 800de3c:	e7f7      	b.n	800de2e <__swsetup_r+0xba>
 800de3e:	bf00      	nop
 800de40:	20000084 	.word	0x20000084
 800de44:	0800fe3c 	.word	0x0800fe3c
 800de48:	0800fe5c 	.word	0x0800fe5c
 800de4c:	0800fe1c 	.word	0x0800fe1c

0800de50 <abort>:
 800de50:	b508      	push	{r3, lr}
 800de52:	2006      	movs	r0, #6
 800de54:	f000 fa54 	bl	800e300 <raise>
 800de58:	2001      	movs	r0, #1
 800de5a:	f7f7 fded 	bl	8005a38 <_exit>
	...

0800de60 <__sflush_r>:
 800de60:	898a      	ldrh	r2, [r1, #12]
 800de62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de66:	4605      	mov	r5, r0
 800de68:	0710      	lsls	r0, r2, #28
 800de6a:	460c      	mov	r4, r1
 800de6c:	d458      	bmi.n	800df20 <__sflush_r+0xc0>
 800de6e:	684b      	ldr	r3, [r1, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	dc05      	bgt.n	800de80 <__sflush_r+0x20>
 800de74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	dc02      	bgt.n	800de80 <__sflush_r+0x20>
 800de7a:	2000      	movs	r0, #0
 800de7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de82:	2e00      	cmp	r6, #0
 800de84:	d0f9      	beq.n	800de7a <__sflush_r+0x1a>
 800de86:	2300      	movs	r3, #0
 800de88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de8c:	682f      	ldr	r7, [r5, #0]
 800de8e:	602b      	str	r3, [r5, #0]
 800de90:	d032      	beq.n	800def8 <__sflush_r+0x98>
 800de92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de94:	89a3      	ldrh	r3, [r4, #12]
 800de96:	075a      	lsls	r2, r3, #29
 800de98:	d505      	bpl.n	800dea6 <__sflush_r+0x46>
 800de9a:	6863      	ldr	r3, [r4, #4]
 800de9c:	1ac0      	subs	r0, r0, r3
 800de9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dea0:	b10b      	cbz	r3, 800dea6 <__sflush_r+0x46>
 800dea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dea4:	1ac0      	subs	r0, r0, r3
 800dea6:	2300      	movs	r3, #0
 800dea8:	4602      	mov	r2, r0
 800deaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deac:	6a21      	ldr	r1, [r4, #32]
 800deae:	4628      	mov	r0, r5
 800deb0:	47b0      	blx	r6
 800deb2:	1c43      	adds	r3, r0, #1
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	d106      	bne.n	800dec6 <__sflush_r+0x66>
 800deb8:	6829      	ldr	r1, [r5, #0]
 800deba:	291d      	cmp	r1, #29
 800debc:	d82c      	bhi.n	800df18 <__sflush_r+0xb8>
 800debe:	4a2a      	ldr	r2, [pc, #168]	; (800df68 <__sflush_r+0x108>)
 800dec0:	40ca      	lsrs	r2, r1
 800dec2:	07d6      	lsls	r6, r2, #31
 800dec4:	d528      	bpl.n	800df18 <__sflush_r+0xb8>
 800dec6:	2200      	movs	r2, #0
 800dec8:	6062      	str	r2, [r4, #4]
 800deca:	04d9      	lsls	r1, r3, #19
 800decc:	6922      	ldr	r2, [r4, #16]
 800dece:	6022      	str	r2, [r4, #0]
 800ded0:	d504      	bpl.n	800dedc <__sflush_r+0x7c>
 800ded2:	1c42      	adds	r2, r0, #1
 800ded4:	d101      	bne.n	800deda <__sflush_r+0x7a>
 800ded6:	682b      	ldr	r3, [r5, #0]
 800ded8:	b903      	cbnz	r3, 800dedc <__sflush_r+0x7c>
 800deda:	6560      	str	r0, [r4, #84]	; 0x54
 800dedc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dede:	602f      	str	r7, [r5, #0]
 800dee0:	2900      	cmp	r1, #0
 800dee2:	d0ca      	beq.n	800de7a <__sflush_r+0x1a>
 800dee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dee8:	4299      	cmp	r1, r3
 800deea:	d002      	beq.n	800def2 <__sflush_r+0x92>
 800deec:	4628      	mov	r0, r5
 800deee:	f7ff faa5 	bl	800d43c <_free_r>
 800def2:	2000      	movs	r0, #0
 800def4:	6360      	str	r0, [r4, #52]	; 0x34
 800def6:	e7c1      	b.n	800de7c <__sflush_r+0x1c>
 800def8:	6a21      	ldr	r1, [r4, #32]
 800defa:	2301      	movs	r3, #1
 800defc:	4628      	mov	r0, r5
 800defe:	47b0      	blx	r6
 800df00:	1c41      	adds	r1, r0, #1
 800df02:	d1c7      	bne.n	800de94 <__sflush_r+0x34>
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0c4      	beq.n	800de94 <__sflush_r+0x34>
 800df0a:	2b1d      	cmp	r3, #29
 800df0c:	d001      	beq.n	800df12 <__sflush_r+0xb2>
 800df0e:	2b16      	cmp	r3, #22
 800df10:	d101      	bne.n	800df16 <__sflush_r+0xb6>
 800df12:	602f      	str	r7, [r5, #0]
 800df14:	e7b1      	b.n	800de7a <__sflush_r+0x1a>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df1c:	81a3      	strh	r3, [r4, #12]
 800df1e:	e7ad      	b.n	800de7c <__sflush_r+0x1c>
 800df20:	690f      	ldr	r7, [r1, #16]
 800df22:	2f00      	cmp	r7, #0
 800df24:	d0a9      	beq.n	800de7a <__sflush_r+0x1a>
 800df26:	0793      	lsls	r3, r2, #30
 800df28:	680e      	ldr	r6, [r1, #0]
 800df2a:	bf08      	it	eq
 800df2c:	694b      	ldreq	r3, [r1, #20]
 800df2e:	600f      	str	r7, [r1, #0]
 800df30:	bf18      	it	ne
 800df32:	2300      	movne	r3, #0
 800df34:	eba6 0807 	sub.w	r8, r6, r7
 800df38:	608b      	str	r3, [r1, #8]
 800df3a:	f1b8 0f00 	cmp.w	r8, #0
 800df3e:	dd9c      	ble.n	800de7a <__sflush_r+0x1a>
 800df40:	6a21      	ldr	r1, [r4, #32]
 800df42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df44:	4643      	mov	r3, r8
 800df46:	463a      	mov	r2, r7
 800df48:	4628      	mov	r0, r5
 800df4a:	47b0      	blx	r6
 800df4c:	2800      	cmp	r0, #0
 800df4e:	dc06      	bgt.n	800df5e <__sflush_r+0xfe>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df56:	81a3      	strh	r3, [r4, #12]
 800df58:	f04f 30ff 	mov.w	r0, #4294967295
 800df5c:	e78e      	b.n	800de7c <__sflush_r+0x1c>
 800df5e:	4407      	add	r7, r0
 800df60:	eba8 0800 	sub.w	r8, r8, r0
 800df64:	e7e9      	b.n	800df3a <__sflush_r+0xda>
 800df66:	bf00      	nop
 800df68:	20400001 	.word	0x20400001

0800df6c <_fflush_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	690b      	ldr	r3, [r1, #16]
 800df70:	4605      	mov	r5, r0
 800df72:	460c      	mov	r4, r1
 800df74:	b913      	cbnz	r3, 800df7c <_fflush_r+0x10>
 800df76:	2500      	movs	r5, #0
 800df78:	4628      	mov	r0, r5
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	b118      	cbz	r0, 800df86 <_fflush_r+0x1a>
 800df7e:	6983      	ldr	r3, [r0, #24]
 800df80:	b90b      	cbnz	r3, 800df86 <_fflush_r+0x1a>
 800df82:	f000 f887 	bl	800e094 <__sinit>
 800df86:	4b14      	ldr	r3, [pc, #80]	; (800dfd8 <_fflush_r+0x6c>)
 800df88:	429c      	cmp	r4, r3
 800df8a:	d11b      	bne.n	800dfc4 <_fflush_r+0x58>
 800df8c:	686c      	ldr	r4, [r5, #4]
 800df8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d0ef      	beq.n	800df76 <_fflush_r+0xa>
 800df96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df98:	07d0      	lsls	r0, r2, #31
 800df9a:	d404      	bmi.n	800dfa6 <_fflush_r+0x3a>
 800df9c:	0599      	lsls	r1, r3, #22
 800df9e:	d402      	bmi.n	800dfa6 <_fflush_r+0x3a>
 800dfa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfa2:	f000 f915 	bl	800e1d0 <__retarget_lock_acquire_recursive>
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	f7ff ff59 	bl	800de60 <__sflush_r>
 800dfae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfb0:	07da      	lsls	r2, r3, #31
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	d4e0      	bmi.n	800df78 <_fflush_r+0xc>
 800dfb6:	89a3      	ldrh	r3, [r4, #12]
 800dfb8:	059b      	lsls	r3, r3, #22
 800dfba:	d4dd      	bmi.n	800df78 <_fflush_r+0xc>
 800dfbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfbe:	f000 f908 	bl	800e1d2 <__retarget_lock_release_recursive>
 800dfc2:	e7d9      	b.n	800df78 <_fflush_r+0xc>
 800dfc4:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <_fflush_r+0x70>)
 800dfc6:	429c      	cmp	r4, r3
 800dfc8:	d101      	bne.n	800dfce <_fflush_r+0x62>
 800dfca:	68ac      	ldr	r4, [r5, #8]
 800dfcc:	e7df      	b.n	800df8e <_fflush_r+0x22>
 800dfce:	4b04      	ldr	r3, [pc, #16]	; (800dfe0 <_fflush_r+0x74>)
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	bf08      	it	eq
 800dfd4:	68ec      	ldreq	r4, [r5, #12]
 800dfd6:	e7da      	b.n	800df8e <_fflush_r+0x22>
 800dfd8:	0800fe3c 	.word	0x0800fe3c
 800dfdc:	0800fe5c 	.word	0x0800fe5c
 800dfe0:	0800fe1c 	.word	0x0800fe1c

0800dfe4 <std>:
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	b510      	push	{r4, lr}
 800dfe8:	4604      	mov	r4, r0
 800dfea:	e9c0 3300 	strd	r3, r3, [r0]
 800dfee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dff2:	6083      	str	r3, [r0, #8]
 800dff4:	8181      	strh	r1, [r0, #12]
 800dff6:	6643      	str	r3, [r0, #100]	; 0x64
 800dff8:	81c2      	strh	r2, [r0, #14]
 800dffa:	6183      	str	r3, [r0, #24]
 800dffc:	4619      	mov	r1, r3
 800dffe:	2208      	movs	r2, #8
 800e000:	305c      	adds	r0, #92	; 0x5c
 800e002:	f7fd fb59 	bl	800b6b8 <memset>
 800e006:	4b05      	ldr	r3, [pc, #20]	; (800e01c <std+0x38>)
 800e008:	6263      	str	r3, [r4, #36]	; 0x24
 800e00a:	4b05      	ldr	r3, [pc, #20]	; (800e020 <std+0x3c>)
 800e00c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e00e:	4b05      	ldr	r3, [pc, #20]	; (800e024 <std+0x40>)
 800e010:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e012:	4b05      	ldr	r3, [pc, #20]	; (800e028 <std+0x44>)
 800e014:	6224      	str	r4, [r4, #32]
 800e016:	6323      	str	r3, [r4, #48]	; 0x30
 800e018:	bd10      	pop	{r4, pc}
 800e01a:	bf00      	nop
 800e01c:	0800e339 	.word	0x0800e339
 800e020:	0800e35b 	.word	0x0800e35b
 800e024:	0800e393 	.word	0x0800e393
 800e028:	0800e3b7 	.word	0x0800e3b7

0800e02c <_cleanup_r>:
 800e02c:	4901      	ldr	r1, [pc, #4]	; (800e034 <_cleanup_r+0x8>)
 800e02e:	f000 b8af 	b.w	800e190 <_fwalk_reent>
 800e032:	bf00      	nop
 800e034:	0800df6d 	.word	0x0800df6d

0800e038 <__sfmoreglue>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	2268      	movs	r2, #104	; 0x68
 800e03c:	1e4d      	subs	r5, r1, #1
 800e03e:	4355      	muls	r5, r2
 800e040:	460e      	mov	r6, r1
 800e042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e046:	f7ff fa65 	bl	800d514 <_malloc_r>
 800e04a:	4604      	mov	r4, r0
 800e04c:	b140      	cbz	r0, 800e060 <__sfmoreglue+0x28>
 800e04e:	2100      	movs	r1, #0
 800e050:	e9c0 1600 	strd	r1, r6, [r0]
 800e054:	300c      	adds	r0, #12
 800e056:	60a0      	str	r0, [r4, #8]
 800e058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e05c:	f7fd fb2c 	bl	800b6b8 <memset>
 800e060:	4620      	mov	r0, r4
 800e062:	bd70      	pop	{r4, r5, r6, pc}

0800e064 <__sfp_lock_acquire>:
 800e064:	4801      	ldr	r0, [pc, #4]	; (800e06c <__sfp_lock_acquire+0x8>)
 800e066:	f000 b8b3 	b.w	800e1d0 <__retarget_lock_acquire_recursive>
 800e06a:	bf00      	nop
 800e06c:	200009fd 	.word	0x200009fd

0800e070 <__sfp_lock_release>:
 800e070:	4801      	ldr	r0, [pc, #4]	; (800e078 <__sfp_lock_release+0x8>)
 800e072:	f000 b8ae 	b.w	800e1d2 <__retarget_lock_release_recursive>
 800e076:	bf00      	nop
 800e078:	200009fd 	.word	0x200009fd

0800e07c <__sinit_lock_acquire>:
 800e07c:	4801      	ldr	r0, [pc, #4]	; (800e084 <__sinit_lock_acquire+0x8>)
 800e07e:	f000 b8a7 	b.w	800e1d0 <__retarget_lock_acquire_recursive>
 800e082:	bf00      	nop
 800e084:	200009fe 	.word	0x200009fe

0800e088 <__sinit_lock_release>:
 800e088:	4801      	ldr	r0, [pc, #4]	; (800e090 <__sinit_lock_release+0x8>)
 800e08a:	f000 b8a2 	b.w	800e1d2 <__retarget_lock_release_recursive>
 800e08e:	bf00      	nop
 800e090:	200009fe 	.word	0x200009fe

0800e094 <__sinit>:
 800e094:	b510      	push	{r4, lr}
 800e096:	4604      	mov	r4, r0
 800e098:	f7ff fff0 	bl	800e07c <__sinit_lock_acquire>
 800e09c:	69a3      	ldr	r3, [r4, #24]
 800e09e:	b11b      	cbz	r3, 800e0a8 <__sinit+0x14>
 800e0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0a4:	f7ff bff0 	b.w	800e088 <__sinit_lock_release>
 800e0a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0ac:	6523      	str	r3, [r4, #80]	; 0x50
 800e0ae:	4b13      	ldr	r3, [pc, #76]	; (800e0fc <__sinit+0x68>)
 800e0b0:	4a13      	ldr	r2, [pc, #76]	; (800e100 <__sinit+0x6c>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0b6:	42a3      	cmp	r3, r4
 800e0b8:	bf04      	itt	eq
 800e0ba:	2301      	moveq	r3, #1
 800e0bc:	61a3      	streq	r3, [r4, #24]
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f000 f820 	bl	800e104 <__sfp>
 800e0c4:	6060      	str	r0, [r4, #4]
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f000 f81c 	bl	800e104 <__sfp>
 800e0cc:	60a0      	str	r0, [r4, #8]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 f818 	bl	800e104 <__sfp>
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	60e0      	str	r0, [r4, #12]
 800e0d8:	2104      	movs	r1, #4
 800e0da:	6860      	ldr	r0, [r4, #4]
 800e0dc:	f7ff ff82 	bl	800dfe4 <std>
 800e0e0:	68a0      	ldr	r0, [r4, #8]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	2109      	movs	r1, #9
 800e0e6:	f7ff ff7d 	bl	800dfe4 <std>
 800e0ea:	68e0      	ldr	r0, [r4, #12]
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	2112      	movs	r1, #18
 800e0f0:	f7ff ff78 	bl	800dfe4 <std>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	61a3      	str	r3, [r4, #24]
 800e0f8:	e7d2      	b.n	800e0a0 <__sinit+0xc>
 800e0fa:	bf00      	nop
 800e0fc:	0800faa0 	.word	0x0800faa0
 800e100:	0800e02d 	.word	0x0800e02d

0800e104 <__sfp>:
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e106:	4607      	mov	r7, r0
 800e108:	f7ff ffac 	bl	800e064 <__sfp_lock_acquire>
 800e10c:	4b1e      	ldr	r3, [pc, #120]	; (800e188 <__sfp+0x84>)
 800e10e:	681e      	ldr	r6, [r3, #0]
 800e110:	69b3      	ldr	r3, [r6, #24]
 800e112:	b913      	cbnz	r3, 800e11a <__sfp+0x16>
 800e114:	4630      	mov	r0, r6
 800e116:	f7ff ffbd 	bl	800e094 <__sinit>
 800e11a:	3648      	adds	r6, #72	; 0x48
 800e11c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e120:	3b01      	subs	r3, #1
 800e122:	d503      	bpl.n	800e12c <__sfp+0x28>
 800e124:	6833      	ldr	r3, [r6, #0]
 800e126:	b30b      	cbz	r3, 800e16c <__sfp+0x68>
 800e128:	6836      	ldr	r6, [r6, #0]
 800e12a:	e7f7      	b.n	800e11c <__sfp+0x18>
 800e12c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e130:	b9d5      	cbnz	r5, 800e168 <__sfp+0x64>
 800e132:	4b16      	ldr	r3, [pc, #88]	; (800e18c <__sfp+0x88>)
 800e134:	60e3      	str	r3, [r4, #12]
 800e136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e13a:	6665      	str	r5, [r4, #100]	; 0x64
 800e13c:	f000 f847 	bl	800e1ce <__retarget_lock_init_recursive>
 800e140:	f7ff ff96 	bl	800e070 <__sfp_lock_release>
 800e144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e14c:	6025      	str	r5, [r4, #0]
 800e14e:	61a5      	str	r5, [r4, #24]
 800e150:	2208      	movs	r2, #8
 800e152:	4629      	mov	r1, r5
 800e154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e158:	f7fd faae 	bl	800b6b8 <memset>
 800e15c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e164:	4620      	mov	r0, r4
 800e166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e168:	3468      	adds	r4, #104	; 0x68
 800e16a:	e7d9      	b.n	800e120 <__sfp+0x1c>
 800e16c:	2104      	movs	r1, #4
 800e16e:	4638      	mov	r0, r7
 800e170:	f7ff ff62 	bl	800e038 <__sfmoreglue>
 800e174:	4604      	mov	r4, r0
 800e176:	6030      	str	r0, [r6, #0]
 800e178:	2800      	cmp	r0, #0
 800e17a:	d1d5      	bne.n	800e128 <__sfp+0x24>
 800e17c:	f7ff ff78 	bl	800e070 <__sfp_lock_release>
 800e180:	230c      	movs	r3, #12
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	e7ee      	b.n	800e164 <__sfp+0x60>
 800e186:	bf00      	nop
 800e188:	0800faa0 	.word	0x0800faa0
 800e18c:	ffff0001 	.word	0xffff0001

0800e190 <_fwalk_reent>:
 800e190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e194:	4606      	mov	r6, r0
 800e196:	4688      	mov	r8, r1
 800e198:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e19c:	2700      	movs	r7, #0
 800e19e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1a2:	f1b9 0901 	subs.w	r9, r9, #1
 800e1a6:	d505      	bpl.n	800e1b4 <_fwalk_reent+0x24>
 800e1a8:	6824      	ldr	r4, [r4, #0]
 800e1aa:	2c00      	cmp	r4, #0
 800e1ac:	d1f7      	bne.n	800e19e <_fwalk_reent+0xe>
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b4:	89ab      	ldrh	r3, [r5, #12]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d907      	bls.n	800e1ca <_fwalk_reent+0x3a>
 800e1ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	d003      	beq.n	800e1ca <_fwalk_reent+0x3a>
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	47c0      	blx	r8
 800e1c8:	4307      	orrs	r7, r0
 800e1ca:	3568      	adds	r5, #104	; 0x68
 800e1cc:	e7e9      	b.n	800e1a2 <_fwalk_reent+0x12>

0800e1ce <__retarget_lock_init_recursive>:
 800e1ce:	4770      	bx	lr

0800e1d0 <__retarget_lock_acquire_recursive>:
 800e1d0:	4770      	bx	lr

0800e1d2 <__retarget_lock_release_recursive>:
 800e1d2:	4770      	bx	lr

0800e1d4 <__swhatbuf_r>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	460e      	mov	r6, r1
 800e1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1dc:	2900      	cmp	r1, #0
 800e1de:	b096      	sub	sp, #88	; 0x58
 800e1e0:	4614      	mov	r4, r2
 800e1e2:	461d      	mov	r5, r3
 800e1e4:	da08      	bge.n	800e1f8 <__swhatbuf_r+0x24>
 800e1e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	602a      	str	r2, [r5, #0]
 800e1ee:	061a      	lsls	r2, r3, #24
 800e1f0:	d410      	bmi.n	800e214 <__swhatbuf_r+0x40>
 800e1f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1f6:	e00e      	b.n	800e216 <__swhatbuf_r+0x42>
 800e1f8:	466a      	mov	r2, sp
 800e1fa:	f000 f903 	bl	800e404 <_fstat_r>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	dbf1      	blt.n	800e1e6 <__swhatbuf_r+0x12>
 800e202:	9a01      	ldr	r2, [sp, #4]
 800e204:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e208:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e20c:	425a      	negs	r2, r3
 800e20e:	415a      	adcs	r2, r3
 800e210:	602a      	str	r2, [r5, #0]
 800e212:	e7ee      	b.n	800e1f2 <__swhatbuf_r+0x1e>
 800e214:	2340      	movs	r3, #64	; 0x40
 800e216:	2000      	movs	r0, #0
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	b016      	add	sp, #88	; 0x58
 800e21c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e220 <__smakebuf_r>:
 800e220:	898b      	ldrh	r3, [r1, #12]
 800e222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e224:	079d      	lsls	r5, r3, #30
 800e226:	4606      	mov	r6, r0
 800e228:	460c      	mov	r4, r1
 800e22a:	d507      	bpl.n	800e23c <__smakebuf_r+0x1c>
 800e22c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	6123      	str	r3, [r4, #16]
 800e234:	2301      	movs	r3, #1
 800e236:	6163      	str	r3, [r4, #20]
 800e238:	b002      	add	sp, #8
 800e23a:	bd70      	pop	{r4, r5, r6, pc}
 800e23c:	ab01      	add	r3, sp, #4
 800e23e:	466a      	mov	r2, sp
 800e240:	f7ff ffc8 	bl	800e1d4 <__swhatbuf_r>
 800e244:	9900      	ldr	r1, [sp, #0]
 800e246:	4605      	mov	r5, r0
 800e248:	4630      	mov	r0, r6
 800e24a:	f7ff f963 	bl	800d514 <_malloc_r>
 800e24e:	b948      	cbnz	r0, 800e264 <__smakebuf_r+0x44>
 800e250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e254:	059a      	lsls	r2, r3, #22
 800e256:	d4ef      	bmi.n	800e238 <__smakebuf_r+0x18>
 800e258:	f023 0303 	bic.w	r3, r3, #3
 800e25c:	f043 0302 	orr.w	r3, r3, #2
 800e260:	81a3      	strh	r3, [r4, #12]
 800e262:	e7e3      	b.n	800e22c <__smakebuf_r+0xc>
 800e264:	4b0d      	ldr	r3, [pc, #52]	; (800e29c <__smakebuf_r+0x7c>)
 800e266:	62b3      	str	r3, [r6, #40]	; 0x28
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	6020      	str	r0, [r4, #0]
 800e26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	9b00      	ldr	r3, [sp, #0]
 800e274:	6163      	str	r3, [r4, #20]
 800e276:	9b01      	ldr	r3, [sp, #4]
 800e278:	6120      	str	r0, [r4, #16]
 800e27a:	b15b      	cbz	r3, 800e294 <__smakebuf_r+0x74>
 800e27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e280:	4630      	mov	r0, r6
 800e282:	f000 f8d1 	bl	800e428 <_isatty_r>
 800e286:	b128      	cbz	r0, 800e294 <__smakebuf_r+0x74>
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	f023 0303 	bic.w	r3, r3, #3
 800e28e:	f043 0301 	orr.w	r3, r3, #1
 800e292:	81a3      	strh	r3, [r4, #12]
 800e294:	89a0      	ldrh	r0, [r4, #12]
 800e296:	4305      	orrs	r5, r0
 800e298:	81a5      	strh	r5, [r4, #12]
 800e29a:	e7cd      	b.n	800e238 <__smakebuf_r+0x18>
 800e29c:	0800e02d 	.word	0x0800e02d

0800e2a0 <_malloc_usable_size_r>:
 800e2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2a4:	1f18      	subs	r0, r3, #4
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bfbc      	itt	lt
 800e2aa:	580b      	ldrlt	r3, [r1, r0]
 800e2ac:	18c0      	addlt	r0, r0, r3
 800e2ae:	4770      	bx	lr

0800e2b0 <_raise_r>:
 800e2b0:	291f      	cmp	r1, #31
 800e2b2:	b538      	push	{r3, r4, r5, lr}
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	d904      	bls.n	800e2c4 <_raise_r+0x14>
 800e2ba:	2316      	movs	r3, #22
 800e2bc:	6003      	str	r3, [r0, #0]
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
 800e2c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2c6:	b112      	cbz	r2, 800e2ce <_raise_r+0x1e>
 800e2c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2cc:	b94b      	cbnz	r3, 800e2e2 <_raise_r+0x32>
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f000 f830 	bl	800e334 <_getpid_r>
 800e2d4:	462a      	mov	r2, r5
 800e2d6:	4601      	mov	r1, r0
 800e2d8:	4620      	mov	r0, r4
 800e2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2de:	f000 b817 	b.w	800e310 <_kill_r>
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d00a      	beq.n	800e2fc <_raise_r+0x4c>
 800e2e6:	1c59      	adds	r1, r3, #1
 800e2e8:	d103      	bne.n	800e2f2 <_raise_r+0x42>
 800e2ea:	2316      	movs	r3, #22
 800e2ec:	6003      	str	r3, [r0, #0]
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	e7e7      	b.n	800e2c2 <_raise_r+0x12>
 800e2f2:	2400      	movs	r4, #0
 800e2f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	4798      	blx	r3
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	e7e0      	b.n	800e2c2 <_raise_r+0x12>

0800e300 <raise>:
 800e300:	4b02      	ldr	r3, [pc, #8]	; (800e30c <raise+0xc>)
 800e302:	4601      	mov	r1, r0
 800e304:	6818      	ldr	r0, [r3, #0]
 800e306:	f7ff bfd3 	b.w	800e2b0 <_raise_r>
 800e30a:	bf00      	nop
 800e30c:	20000084 	.word	0x20000084

0800e310 <_kill_r>:
 800e310:	b538      	push	{r3, r4, r5, lr}
 800e312:	4d07      	ldr	r5, [pc, #28]	; (800e330 <_kill_r+0x20>)
 800e314:	2300      	movs	r3, #0
 800e316:	4604      	mov	r4, r0
 800e318:	4608      	mov	r0, r1
 800e31a:	4611      	mov	r1, r2
 800e31c:	602b      	str	r3, [r5, #0]
 800e31e:	f7f7 fb7b 	bl	8005a18 <_kill>
 800e322:	1c43      	adds	r3, r0, #1
 800e324:	d102      	bne.n	800e32c <_kill_r+0x1c>
 800e326:	682b      	ldr	r3, [r5, #0]
 800e328:	b103      	cbz	r3, 800e32c <_kill_r+0x1c>
 800e32a:	6023      	str	r3, [r4, #0]
 800e32c:	bd38      	pop	{r3, r4, r5, pc}
 800e32e:	bf00      	nop
 800e330:	200009f8 	.word	0x200009f8

0800e334 <_getpid_r>:
 800e334:	f7f7 bb68 	b.w	8005a08 <_getpid>

0800e338 <__sread>:
 800e338:	b510      	push	{r4, lr}
 800e33a:	460c      	mov	r4, r1
 800e33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e340:	f000 f894 	bl	800e46c <_read_r>
 800e344:	2800      	cmp	r0, #0
 800e346:	bfab      	itete	ge
 800e348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e34a:	89a3      	ldrhlt	r3, [r4, #12]
 800e34c:	181b      	addge	r3, r3, r0
 800e34e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e352:	bfac      	ite	ge
 800e354:	6563      	strge	r3, [r4, #84]	; 0x54
 800e356:	81a3      	strhlt	r3, [r4, #12]
 800e358:	bd10      	pop	{r4, pc}

0800e35a <__swrite>:
 800e35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35e:	461f      	mov	r7, r3
 800e360:	898b      	ldrh	r3, [r1, #12]
 800e362:	05db      	lsls	r3, r3, #23
 800e364:	4605      	mov	r5, r0
 800e366:	460c      	mov	r4, r1
 800e368:	4616      	mov	r6, r2
 800e36a:	d505      	bpl.n	800e378 <__swrite+0x1e>
 800e36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e370:	2302      	movs	r3, #2
 800e372:	2200      	movs	r2, #0
 800e374:	f000 f868 	bl	800e448 <_lseek_r>
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e37e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e382:	81a3      	strh	r3, [r4, #12]
 800e384:	4632      	mov	r2, r6
 800e386:	463b      	mov	r3, r7
 800e388:	4628      	mov	r0, r5
 800e38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	f000 b817 	b.w	800e3c0 <_write_r>

0800e392 <__sseek>:
 800e392:	b510      	push	{r4, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39a:	f000 f855 	bl	800e448 <_lseek_r>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	bf15      	itete	ne
 800e3a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3ae:	81a3      	strheq	r3, [r4, #12]
 800e3b0:	bf18      	it	ne
 800e3b2:	81a3      	strhne	r3, [r4, #12]
 800e3b4:	bd10      	pop	{r4, pc}

0800e3b6 <__sclose>:
 800e3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ba:	f000 b813 	b.w	800e3e4 <_close_r>
	...

0800e3c0 <_write_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	4d07      	ldr	r5, [pc, #28]	; (800e3e0 <_write_r+0x20>)
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	4608      	mov	r0, r1
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	602a      	str	r2, [r5, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	f7f7 fb59 	bl	8005a86 <_write>
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d102      	bne.n	800e3de <_write_r+0x1e>
 800e3d8:	682b      	ldr	r3, [r5, #0]
 800e3da:	b103      	cbz	r3, 800e3de <_write_r+0x1e>
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	bd38      	pop	{r3, r4, r5, pc}
 800e3e0:	200009f8 	.word	0x200009f8

0800e3e4 <_close_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4d06      	ldr	r5, [pc, #24]	; (800e400 <_close_r+0x1c>)
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	602b      	str	r3, [r5, #0]
 800e3f0:	f7f7 fb65 	bl	8005abe <_close>
 800e3f4:	1c43      	adds	r3, r0, #1
 800e3f6:	d102      	bne.n	800e3fe <_close_r+0x1a>
 800e3f8:	682b      	ldr	r3, [r5, #0]
 800e3fa:	b103      	cbz	r3, 800e3fe <_close_r+0x1a>
 800e3fc:	6023      	str	r3, [r4, #0]
 800e3fe:	bd38      	pop	{r3, r4, r5, pc}
 800e400:	200009f8 	.word	0x200009f8

0800e404 <_fstat_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4d07      	ldr	r5, [pc, #28]	; (800e424 <_fstat_r+0x20>)
 800e408:	2300      	movs	r3, #0
 800e40a:	4604      	mov	r4, r0
 800e40c:	4608      	mov	r0, r1
 800e40e:	4611      	mov	r1, r2
 800e410:	602b      	str	r3, [r5, #0]
 800e412:	f7f7 fb60 	bl	8005ad6 <_fstat>
 800e416:	1c43      	adds	r3, r0, #1
 800e418:	d102      	bne.n	800e420 <_fstat_r+0x1c>
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	b103      	cbz	r3, 800e420 <_fstat_r+0x1c>
 800e41e:	6023      	str	r3, [r4, #0]
 800e420:	bd38      	pop	{r3, r4, r5, pc}
 800e422:	bf00      	nop
 800e424:	200009f8 	.word	0x200009f8

0800e428 <_isatty_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d06      	ldr	r5, [pc, #24]	; (800e444 <_isatty_r+0x1c>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	602b      	str	r3, [r5, #0]
 800e434:	f7f7 fb5f 	bl	8005af6 <_isatty>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	d102      	bne.n	800e442 <_isatty_r+0x1a>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	b103      	cbz	r3, 800e442 <_isatty_r+0x1a>
 800e440:	6023      	str	r3, [r4, #0]
 800e442:	bd38      	pop	{r3, r4, r5, pc}
 800e444:	200009f8 	.word	0x200009f8

0800e448 <_lseek_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4d07      	ldr	r5, [pc, #28]	; (800e468 <_lseek_r+0x20>)
 800e44c:	4604      	mov	r4, r0
 800e44e:	4608      	mov	r0, r1
 800e450:	4611      	mov	r1, r2
 800e452:	2200      	movs	r2, #0
 800e454:	602a      	str	r2, [r5, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	f7f7 fb58 	bl	8005b0c <_lseek>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_lseek_r+0x1e>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_lseek_r+0x1e>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	200009f8 	.word	0x200009f8

0800e46c <_read_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4d07      	ldr	r5, [pc, #28]	; (800e48c <_read_r+0x20>)
 800e470:	4604      	mov	r4, r0
 800e472:	4608      	mov	r0, r1
 800e474:	4611      	mov	r1, r2
 800e476:	2200      	movs	r2, #0
 800e478:	602a      	str	r2, [r5, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	f7f7 fae6 	bl	8005a4c <_read>
 800e480:	1c43      	adds	r3, r0, #1
 800e482:	d102      	bne.n	800e48a <_read_r+0x1e>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	b103      	cbz	r3, 800e48a <_read_r+0x1e>
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	bd38      	pop	{r3, r4, r5, pc}
 800e48c:	200009f8 	.word	0x200009f8

0800e490 <atan>:
 800e490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	ec55 4b10 	vmov	r4, r5, d0
 800e498:	4bc3      	ldr	r3, [pc, #780]	; (800e7a8 <atan+0x318>)
 800e49a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e49e:	429e      	cmp	r6, r3
 800e4a0:	46ab      	mov	fp, r5
 800e4a2:	dd18      	ble.n	800e4d6 <atan+0x46>
 800e4a4:	4bc1      	ldr	r3, [pc, #772]	; (800e7ac <atan+0x31c>)
 800e4a6:	429e      	cmp	r6, r3
 800e4a8:	dc01      	bgt.n	800e4ae <atan+0x1e>
 800e4aa:	d109      	bne.n	800e4c0 <atan+0x30>
 800e4ac:	b144      	cbz	r4, 800e4c0 <atan+0x30>
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	462b      	mov	r3, r5
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7f1 ff09 	bl	80002cc <__adddf3>
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	460d      	mov	r5, r1
 800e4be:	e006      	b.n	800e4ce <atan+0x3e>
 800e4c0:	f1bb 0f00 	cmp.w	fp, #0
 800e4c4:	f300 8131 	bgt.w	800e72a <atan+0x29a>
 800e4c8:	a59b      	add	r5, pc, #620	; (adr r5, 800e738 <atan+0x2a8>)
 800e4ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e4ce:	ec45 4b10 	vmov	d0, r4, r5
 800e4d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d6:	4bb6      	ldr	r3, [pc, #728]	; (800e7b0 <atan+0x320>)
 800e4d8:	429e      	cmp	r6, r3
 800e4da:	dc14      	bgt.n	800e506 <atan+0x76>
 800e4dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e4e0:	429e      	cmp	r6, r3
 800e4e2:	dc0d      	bgt.n	800e500 <atan+0x70>
 800e4e4:	a396      	add	r3, pc, #600	; (adr r3, 800e740 <atan+0x2b0>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	ee10 0a10 	vmov	r0, s0
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7f1 feec 	bl	80002cc <__adddf3>
 800e4f4:	4baf      	ldr	r3, [pc, #700]	; (800e7b4 <atan+0x324>)
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f7f2 fb2e 	bl	8000b58 <__aeabi_dcmpgt>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d1e6      	bne.n	800e4ce <atan+0x3e>
 800e500:	f04f 3aff 	mov.w	sl, #4294967295
 800e504:	e02b      	b.n	800e55e <atan+0xce>
 800e506:	f000 f963 	bl	800e7d0 <fabs>
 800e50a:	4bab      	ldr	r3, [pc, #684]	; (800e7b8 <atan+0x328>)
 800e50c:	429e      	cmp	r6, r3
 800e50e:	ec55 4b10 	vmov	r4, r5, d0
 800e512:	f300 80bf 	bgt.w	800e694 <atan+0x204>
 800e516:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e51a:	429e      	cmp	r6, r3
 800e51c:	f300 80a0 	bgt.w	800e660 <atan+0x1d0>
 800e520:	ee10 2a10 	vmov	r2, s0
 800e524:	ee10 0a10 	vmov	r0, s0
 800e528:	462b      	mov	r3, r5
 800e52a:	4629      	mov	r1, r5
 800e52c:	f7f1 fece 	bl	80002cc <__adddf3>
 800e530:	4ba0      	ldr	r3, [pc, #640]	; (800e7b4 <atan+0x324>)
 800e532:	2200      	movs	r2, #0
 800e534:	f7f1 fec8 	bl	80002c8 <__aeabi_dsub>
 800e538:	2200      	movs	r2, #0
 800e53a:	4606      	mov	r6, r0
 800e53c:	460f      	mov	r7, r1
 800e53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e542:	4620      	mov	r0, r4
 800e544:	4629      	mov	r1, r5
 800e546:	f7f1 fec1 	bl	80002cc <__adddf3>
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	4630      	mov	r0, r6
 800e550:	4639      	mov	r1, r7
 800e552:	f7f2 f99b 	bl	800088c <__aeabi_ddiv>
 800e556:	f04f 0a00 	mov.w	sl, #0
 800e55a:	4604      	mov	r4, r0
 800e55c:	460d      	mov	r5, r1
 800e55e:	4622      	mov	r2, r4
 800e560:	462b      	mov	r3, r5
 800e562:	4620      	mov	r0, r4
 800e564:	4629      	mov	r1, r5
 800e566:	f7f2 f867 	bl	8000638 <__aeabi_dmul>
 800e56a:	4602      	mov	r2, r0
 800e56c:	460b      	mov	r3, r1
 800e56e:	4680      	mov	r8, r0
 800e570:	4689      	mov	r9, r1
 800e572:	f7f2 f861 	bl	8000638 <__aeabi_dmul>
 800e576:	a374      	add	r3, pc, #464	; (adr r3, 800e748 <atan+0x2b8>)
 800e578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57c:	4606      	mov	r6, r0
 800e57e:	460f      	mov	r7, r1
 800e580:	f7f2 f85a 	bl	8000638 <__aeabi_dmul>
 800e584:	a372      	add	r3, pc, #456	; (adr r3, 800e750 <atan+0x2c0>)
 800e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58a:	f7f1 fe9f 	bl	80002cc <__adddf3>
 800e58e:	4632      	mov	r2, r6
 800e590:	463b      	mov	r3, r7
 800e592:	f7f2 f851 	bl	8000638 <__aeabi_dmul>
 800e596:	a370      	add	r3, pc, #448	; (adr r3, 800e758 <atan+0x2c8>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	f7f1 fe96 	bl	80002cc <__adddf3>
 800e5a0:	4632      	mov	r2, r6
 800e5a2:	463b      	mov	r3, r7
 800e5a4:	f7f2 f848 	bl	8000638 <__aeabi_dmul>
 800e5a8:	a36d      	add	r3, pc, #436	; (adr r3, 800e760 <atan+0x2d0>)
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f7f1 fe8d 	bl	80002cc <__adddf3>
 800e5b2:	4632      	mov	r2, r6
 800e5b4:	463b      	mov	r3, r7
 800e5b6:	f7f2 f83f 	bl	8000638 <__aeabi_dmul>
 800e5ba:	a36b      	add	r3, pc, #428	; (adr r3, 800e768 <atan+0x2d8>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	f7f1 fe84 	bl	80002cc <__adddf3>
 800e5c4:	4632      	mov	r2, r6
 800e5c6:	463b      	mov	r3, r7
 800e5c8:	f7f2 f836 	bl	8000638 <__aeabi_dmul>
 800e5cc:	a368      	add	r3, pc, #416	; (adr r3, 800e770 <atan+0x2e0>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	f7f1 fe7b 	bl	80002cc <__adddf3>
 800e5d6:	4642      	mov	r2, r8
 800e5d8:	464b      	mov	r3, r9
 800e5da:	f7f2 f82d 	bl	8000638 <__aeabi_dmul>
 800e5de:	a366      	add	r3, pc, #408	; (adr r3, 800e778 <atan+0x2e8>)
 800e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e4:	4680      	mov	r8, r0
 800e5e6:	4689      	mov	r9, r1
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	4639      	mov	r1, r7
 800e5ec:	f7f2 f824 	bl	8000638 <__aeabi_dmul>
 800e5f0:	a363      	add	r3, pc, #396	; (adr r3, 800e780 <atan+0x2f0>)
 800e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f6:	f7f1 fe67 	bl	80002c8 <__aeabi_dsub>
 800e5fa:	4632      	mov	r2, r6
 800e5fc:	463b      	mov	r3, r7
 800e5fe:	f7f2 f81b 	bl	8000638 <__aeabi_dmul>
 800e602:	a361      	add	r3, pc, #388	; (adr r3, 800e788 <atan+0x2f8>)
 800e604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e608:	f7f1 fe5e 	bl	80002c8 <__aeabi_dsub>
 800e60c:	4632      	mov	r2, r6
 800e60e:	463b      	mov	r3, r7
 800e610:	f7f2 f812 	bl	8000638 <__aeabi_dmul>
 800e614:	a35e      	add	r3, pc, #376	; (adr r3, 800e790 <atan+0x300>)
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	f7f1 fe55 	bl	80002c8 <__aeabi_dsub>
 800e61e:	4632      	mov	r2, r6
 800e620:	463b      	mov	r3, r7
 800e622:	f7f2 f809 	bl	8000638 <__aeabi_dmul>
 800e626:	a35c      	add	r3, pc, #368	; (adr r3, 800e798 <atan+0x308>)
 800e628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62c:	f7f1 fe4c 	bl	80002c8 <__aeabi_dsub>
 800e630:	4632      	mov	r2, r6
 800e632:	463b      	mov	r3, r7
 800e634:	f7f2 f800 	bl	8000638 <__aeabi_dmul>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	4640      	mov	r0, r8
 800e63e:	4649      	mov	r1, r9
 800e640:	f7f1 fe44 	bl	80002cc <__adddf3>
 800e644:	4622      	mov	r2, r4
 800e646:	462b      	mov	r3, r5
 800e648:	f7f1 fff6 	bl	8000638 <__aeabi_dmul>
 800e64c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	d14b      	bne.n	800e6ee <atan+0x25e>
 800e656:	4620      	mov	r0, r4
 800e658:	4629      	mov	r1, r5
 800e65a:	f7f1 fe35 	bl	80002c8 <__aeabi_dsub>
 800e65e:	e72c      	b.n	800e4ba <atan+0x2a>
 800e660:	ee10 0a10 	vmov	r0, s0
 800e664:	4b53      	ldr	r3, [pc, #332]	; (800e7b4 <atan+0x324>)
 800e666:	2200      	movs	r2, #0
 800e668:	4629      	mov	r1, r5
 800e66a:	f7f1 fe2d 	bl	80002c8 <__aeabi_dsub>
 800e66e:	4b51      	ldr	r3, [pc, #324]	; (800e7b4 <atan+0x324>)
 800e670:	4606      	mov	r6, r0
 800e672:	460f      	mov	r7, r1
 800e674:	2200      	movs	r2, #0
 800e676:	4620      	mov	r0, r4
 800e678:	4629      	mov	r1, r5
 800e67a:	f7f1 fe27 	bl	80002cc <__adddf3>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	4630      	mov	r0, r6
 800e684:	4639      	mov	r1, r7
 800e686:	f7f2 f901 	bl	800088c <__aeabi_ddiv>
 800e68a:	f04f 0a01 	mov.w	sl, #1
 800e68e:	4604      	mov	r4, r0
 800e690:	460d      	mov	r5, r1
 800e692:	e764      	b.n	800e55e <atan+0xce>
 800e694:	4b49      	ldr	r3, [pc, #292]	; (800e7bc <atan+0x32c>)
 800e696:	429e      	cmp	r6, r3
 800e698:	da1d      	bge.n	800e6d6 <atan+0x246>
 800e69a:	ee10 0a10 	vmov	r0, s0
 800e69e:	4b48      	ldr	r3, [pc, #288]	; (800e7c0 <atan+0x330>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	f7f1 fe10 	bl	80002c8 <__aeabi_dsub>
 800e6a8:	4b45      	ldr	r3, [pc, #276]	; (800e7c0 <atan+0x330>)
 800e6aa:	4606      	mov	r6, r0
 800e6ac:	460f      	mov	r7, r1
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	f7f1 ffc0 	bl	8000638 <__aeabi_dmul>
 800e6b8:	4b3e      	ldr	r3, [pc, #248]	; (800e7b4 <atan+0x324>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f7f1 fe06 	bl	80002cc <__adddf3>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	f7f2 f8e0 	bl	800088c <__aeabi_ddiv>
 800e6cc:	f04f 0a02 	mov.w	sl, #2
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	e743      	b.n	800e55e <atan+0xce>
 800e6d6:	462b      	mov	r3, r5
 800e6d8:	ee10 2a10 	vmov	r2, s0
 800e6dc:	4939      	ldr	r1, [pc, #228]	; (800e7c4 <atan+0x334>)
 800e6de:	2000      	movs	r0, #0
 800e6e0:	f7f2 f8d4 	bl	800088c <__aeabi_ddiv>
 800e6e4:	f04f 0a03 	mov.w	sl, #3
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	e737      	b.n	800e55e <atan+0xce>
 800e6ee:	4b36      	ldr	r3, [pc, #216]	; (800e7c8 <atan+0x338>)
 800e6f0:	4e36      	ldr	r6, [pc, #216]	; (800e7cc <atan+0x33c>)
 800e6f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e6f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e6fa:	e9da 2300 	ldrd	r2, r3, [sl]
 800e6fe:	f7f1 fde3 	bl	80002c8 <__aeabi_dsub>
 800e702:	4622      	mov	r2, r4
 800e704:	462b      	mov	r3, r5
 800e706:	f7f1 fddf 	bl	80002c8 <__aeabi_dsub>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e712:	f7f1 fdd9 	bl	80002c8 <__aeabi_dsub>
 800e716:	f1bb 0f00 	cmp.w	fp, #0
 800e71a:	4604      	mov	r4, r0
 800e71c:	460d      	mov	r5, r1
 800e71e:	f6bf aed6 	bge.w	800e4ce <atan+0x3e>
 800e722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e726:	461d      	mov	r5, r3
 800e728:	e6d1      	b.n	800e4ce <atan+0x3e>
 800e72a:	a51d      	add	r5, pc, #116	; (adr r5, 800e7a0 <atan+0x310>)
 800e72c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e730:	e6cd      	b.n	800e4ce <atan+0x3e>
 800e732:	bf00      	nop
 800e734:	f3af 8000 	nop.w
 800e738:	54442d18 	.word	0x54442d18
 800e73c:	bff921fb 	.word	0xbff921fb
 800e740:	8800759c 	.word	0x8800759c
 800e744:	7e37e43c 	.word	0x7e37e43c
 800e748:	e322da11 	.word	0xe322da11
 800e74c:	3f90ad3a 	.word	0x3f90ad3a
 800e750:	24760deb 	.word	0x24760deb
 800e754:	3fa97b4b 	.word	0x3fa97b4b
 800e758:	a0d03d51 	.word	0xa0d03d51
 800e75c:	3fb10d66 	.word	0x3fb10d66
 800e760:	c54c206e 	.word	0xc54c206e
 800e764:	3fb745cd 	.word	0x3fb745cd
 800e768:	920083ff 	.word	0x920083ff
 800e76c:	3fc24924 	.word	0x3fc24924
 800e770:	5555550d 	.word	0x5555550d
 800e774:	3fd55555 	.word	0x3fd55555
 800e778:	2c6a6c2f 	.word	0x2c6a6c2f
 800e77c:	bfa2b444 	.word	0xbfa2b444
 800e780:	52defd9a 	.word	0x52defd9a
 800e784:	3fadde2d 	.word	0x3fadde2d
 800e788:	af749a6d 	.word	0xaf749a6d
 800e78c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e790:	fe231671 	.word	0xfe231671
 800e794:	3fbc71c6 	.word	0x3fbc71c6
 800e798:	9998ebc4 	.word	0x9998ebc4
 800e79c:	3fc99999 	.word	0x3fc99999
 800e7a0:	54442d18 	.word	0x54442d18
 800e7a4:	3ff921fb 	.word	0x3ff921fb
 800e7a8:	440fffff 	.word	0x440fffff
 800e7ac:	7ff00000 	.word	0x7ff00000
 800e7b0:	3fdbffff 	.word	0x3fdbffff
 800e7b4:	3ff00000 	.word	0x3ff00000
 800e7b8:	3ff2ffff 	.word	0x3ff2ffff
 800e7bc:	40038000 	.word	0x40038000
 800e7c0:	3ff80000 	.word	0x3ff80000
 800e7c4:	bff00000 	.word	0xbff00000
 800e7c8:	0800fea0 	.word	0x0800fea0
 800e7cc:	0800fe80 	.word	0x0800fe80

0800e7d0 <fabs>:
 800e7d0:	ec51 0b10 	vmov	r0, r1, d0
 800e7d4:	ee10 2a10 	vmov	r2, s0
 800e7d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e7dc:	ec43 2b10 	vmov	d0, r2, r3
 800e7e0:	4770      	bx	lr
 800e7e2:	0000      	movs	r0, r0
 800e7e4:	0000      	movs	r0, r0
	...

0800e7e8 <tan>:
 800e7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7ea:	ec53 2b10 	vmov	r2, r3, d0
 800e7ee:	4816      	ldr	r0, [pc, #88]	; (800e848 <tan+0x60>)
 800e7f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e7f4:	4281      	cmp	r1, r0
 800e7f6:	dc07      	bgt.n	800e808 <tan+0x20>
 800e7f8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800e840 <tan+0x58>
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	b005      	add	sp, #20
 800e800:	f85d eb04 	ldr.w	lr, [sp], #4
 800e804:	f000 bd80 	b.w	800f308 <__kernel_tan>
 800e808:	4810      	ldr	r0, [pc, #64]	; (800e84c <tan+0x64>)
 800e80a:	4281      	cmp	r1, r0
 800e80c:	dd09      	ble.n	800e822 <tan+0x3a>
 800e80e:	ee10 0a10 	vmov	r0, s0
 800e812:	4619      	mov	r1, r3
 800e814:	f7f1 fd58 	bl	80002c8 <__aeabi_dsub>
 800e818:	ec41 0b10 	vmov	d0, r0, r1
 800e81c:	b005      	add	sp, #20
 800e81e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e822:	4668      	mov	r0, sp
 800e824:	f000 f814 	bl	800e850 <__ieee754_rem_pio2>
 800e828:	0040      	lsls	r0, r0, #1
 800e82a:	f000 0002 	and.w	r0, r0, #2
 800e82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e832:	ed9d 0b00 	vldr	d0, [sp]
 800e836:	f1c0 0001 	rsb	r0, r0, #1
 800e83a:	f000 fd65 	bl	800f308 <__kernel_tan>
 800e83e:	e7ed      	b.n	800e81c <tan+0x34>
	...
 800e848:	3fe921fb 	.word	0x3fe921fb
 800e84c:	7fefffff 	.word	0x7fefffff

0800e850 <__ieee754_rem_pio2>:
 800e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e854:	ed2d 8b02 	vpush	{d8}
 800e858:	ec55 4b10 	vmov	r4, r5, d0
 800e85c:	4bca      	ldr	r3, [pc, #808]	; (800eb88 <__ieee754_rem_pio2+0x338>)
 800e85e:	b08b      	sub	sp, #44	; 0x2c
 800e860:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e864:	4598      	cmp	r8, r3
 800e866:	4682      	mov	sl, r0
 800e868:	9502      	str	r5, [sp, #8]
 800e86a:	dc08      	bgt.n	800e87e <__ieee754_rem_pio2+0x2e>
 800e86c:	2200      	movs	r2, #0
 800e86e:	2300      	movs	r3, #0
 800e870:	ed80 0b00 	vstr	d0, [r0]
 800e874:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e878:	f04f 0b00 	mov.w	fp, #0
 800e87c:	e028      	b.n	800e8d0 <__ieee754_rem_pio2+0x80>
 800e87e:	4bc3      	ldr	r3, [pc, #780]	; (800eb8c <__ieee754_rem_pio2+0x33c>)
 800e880:	4598      	cmp	r8, r3
 800e882:	dc78      	bgt.n	800e976 <__ieee754_rem_pio2+0x126>
 800e884:	9b02      	ldr	r3, [sp, #8]
 800e886:	4ec2      	ldr	r6, [pc, #776]	; (800eb90 <__ieee754_rem_pio2+0x340>)
 800e888:	2b00      	cmp	r3, #0
 800e88a:	ee10 0a10 	vmov	r0, s0
 800e88e:	a3b0      	add	r3, pc, #704	; (adr r3, 800eb50 <__ieee754_rem_pio2+0x300>)
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	4629      	mov	r1, r5
 800e896:	dd39      	ble.n	800e90c <__ieee754_rem_pio2+0xbc>
 800e898:	f7f1 fd16 	bl	80002c8 <__aeabi_dsub>
 800e89c:	45b0      	cmp	r8, r6
 800e89e:	4604      	mov	r4, r0
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	d01b      	beq.n	800e8dc <__ieee754_rem_pio2+0x8c>
 800e8a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800eb58 <__ieee754_rem_pio2+0x308>)
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	f7f1 fd0d 	bl	80002c8 <__aeabi_dsub>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	e9ca 2300 	strd	r2, r3, [sl]
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7f1 fd05 	bl	80002c8 <__aeabi_dsub>
 800e8be:	a3a6      	add	r3, pc, #664	; (adr r3, 800eb58 <__ieee754_rem_pio2+0x308>)
 800e8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c4:	f7f1 fd00 	bl	80002c8 <__aeabi_dsub>
 800e8c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e8cc:	f04f 0b01 	mov.w	fp, #1
 800e8d0:	4658      	mov	r0, fp
 800e8d2:	b00b      	add	sp, #44	; 0x2c
 800e8d4:	ecbd 8b02 	vpop	{d8}
 800e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800eb60 <__ieee754_rem_pio2+0x310>)
 800e8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e2:	f7f1 fcf1 	bl	80002c8 <__aeabi_dsub>
 800e8e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800eb68 <__ieee754_rem_pio2+0x318>)
 800e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	f7f1 fcea 	bl	80002c8 <__aeabi_dsub>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	e9ca 2300 	strd	r2, r3, [sl]
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	4629      	mov	r1, r5
 800e900:	f7f1 fce2 	bl	80002c8 <__aeabi_dsub>
 800e904:	a398      	add	r3, pc, #608	; (adr r3, 800eb68 <__ieee754_rem_pio2+0x318>)
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	e7db      	b.n	800e8c4 <__ieee754_rem_pio2+0x74>
 800e90c:	f7f1 fcde 	bl	80002cc <__adddf3>
 800e910:	45b0      	cmp	r8, r6
 800e912:	4604      	mov	r4, r0
 800e914:	460d      	mov	r5, r1
 800e916:	d016      	beq.n	800e946 <__ieee754_rem_pio2+0xf6>
 800e918:	a38f      	add	r3, pc, #572	; (adr r3, 800eb58 <__ieee754_rem_pio2+0x308>)
 800e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91e:	f7f1 fcd5 	bl	80002cc <__adddf3>
 800e922:	4602      	mov	r2, r0
 800e924:	460b      	mov	r3, r1
 800e926:	e9ca 2300 	strd	r2, r3, [sl]
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	f7f1 fccb 	bl	80002c8 <__aeabi_dsub>
 800e932:	a389      	add	r3, pc, #548	; (adr r3, 800eb58 <__ieee754_rem_pio2+0x308>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fcc8 	bl	80002cc <__adddf3>
 800e93c:	f04f 3bff 	mov.w	fp, #4294967295
 800e940:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e944:	e7c4      	b.n	800e8d0 <__ieee754_rem_pio2+0x80>
 800e946:	a386      	add	r3, pc, #536	; (adr r3, 800eb60 <__ieee754_rem_pio2+0x310>)
 800e948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94c:	f7f1 fcbe 	bl	80002cc <__adddf3>
 800e950:	a385      	add	r3, pc, #532	; (adr r3, 800eb68 <__ieee754_rem_pio2+0x318>)
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	f7f1 fcb7 	bl	80002cc <__adddf3>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	e9ca 2300 	strd	r2, r3, [sl]
 800e966:	4620      	mov	r0, r4
 800e968:	4629      	mov	r1, r5
 800e96a:	f7f1 fcad 	bl	80002c8 <__aeabi_dsub>
 800e96e:	a37e      	add	r3, pc, #504	; (adr r3, 800eb68 <__ieee754_rem_pio2+0x318>)
 800e970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e974:	e7e0      	b.n	800e938 <__ieee754_rem_pio2+0xe8>
 800e976:	4b87      	ldr	r3, [pc, #540]	; (800eb94 <__ieee754_rem_pio2+0x344>)
 800e978:	4598      	cmp	r8, r3
 800e97a:	f300 80d9 	bgt.w	800eb30 <__ieee754_rem_pio2+0x2e0>
 800e97e:	f7ff ff27 	bl	800e7d0 <fabs>
 800e982:	ec55 4b10 	vmov	r4, r5, d0
 800e986:	ee10 0a10 	vmov	r0, s0
 800e98a:	a379      	add	r3, pc, #484	; (adr r3, 800eb70 <__ieee754_rem_pio2+0x320>)
 800e98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e990:	4629      	mov	r1, r5
 800e992:	f7f1 fe51 	bl	8000638 <__aeabi_dmul>
 800e996:	4b80      	ldr	r3, [pc, #512]	; (800eb98 <__ieee754_rem_pio2+0x348>)
 800e998:	2200      	movs	r2, #0
 800e99a:	f7f1 fc97 	bl	80002cc <__adddf3>
 800e99e:	f7f2 f8fb 	bl	8000b98 <__aeabi_d2iz>
 800e9a2:	4683      	mov	fp, r0
 800e9a4:	f7f1 fdde 	bl	8000564 <__aeabi_i2d>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	ec43 2b18 	vmov	d8, r2, r3
 800e9b0:	a367      	add	r3, pc, #412	; (adr r3, 800eb50 <__ieee754_rem_pio2+0x300>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	f7f1 fe3f 	bl	8000638 <__aeabi_dmul>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4620      	mov	r0, r4
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	f7f1 fc81 	bl	80002c8 <__aeabi_dsub>
 800e9c6:	a364      	add	r3, pc, #400	; (adr r3, 800eb58 <__ieee754_rem_pio2+0x308>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	ec51 0b18 	vmov	r0, r1, d8
 800e9d4:	f7f1 fe30 	bl	8000638 <__aeabi_dmul>
 800e9d8:	f1bb 0f1f 	cmp.w	fp, #31
 800e9dc:	4604      	mov	r4, r0
 800e9de:	460d      	mov	r5, r1
 800e9e0:	dc0d      	bgt.n	800e9fe <__ieee754_rem_pio2+0x1ae>
 800e9e2:	4b6e      	ldr	r3, [pc, #440]	; (800eb9c <__ieee754_rem_pio2+0x34c>)
 800e9e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ec:	4543      	cmp	r3, r8
 800e9ee:	d006      	beq.n	800e9fe <__ieee754_rem_pio2+0x1ae>
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	462b      	mov	r3, r5
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f7f1 fc66 	bl	80002c8 <__aeabi_dsub>
 800e9fc:	e00f      	b.n	800ea1e <__ieee754_rem_pio2+0x1ce>
 800e9fe:	462b      	mov	r3, r5
 800ea00:	4622      	mov	r2, r4
 800ea02:	4630      	mov	r0, r6
 800ea04:	4639      	mov	r1, r7
 800ea06:	f7f1 fc5f 	bl	80002c8 <__aeabi_dsub>
 800ea0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea0e:	9303      	str	r3, [sp, #12]
 800ea10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ea18:	f1b8 0f10 	cmp.w	r8, #16
 800ea1c:	dc02      	bgt.n	800ea24 <__ieee754_rem_pio2+0x1d4>
 800ea1e:	e9ca 0100 	strd	r0, r1, [sl]
 800ea22:	e039      	b.n	800ea98 <__ieee754_rem_pio2+0x248>
 800ea24:	a34e      	add	r3, pc, #312	; (adr r3, 800eb60 <__ieee754_rem_pio2+0x310>)
 800ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2a:	ec51 0b18 	vmov	r0, r1, d8
 800ea2e:	f7f1 fe03 	bl	8000638 <__aeabi_dmul>
 800ea32:	4604      	mov	r4, r0
 800ea34:	460d      	mov	r5, r1
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	4639      	mov	r1, r7
 800ea3e:	f7f1 fc43 	bl	80002c8 <__aeabi_dsub>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4680      	mov	r8, r0
 800ea48:	4689      	mov	r9, r1
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	f7f1 fc3b 	bl	80002c8 <__aeabi_dsub>
 800ea52:	4622      	mov	r2, r4
 800ea54:	462b      	mov	r3, r5
 800ea56:	f7f1 fc37 	bl	80002c8 <__aeabi_dsub>
 800ea5a:	a343      	add	r3, pc, #268	; (adr r3, 800eb68 <__ieee754_rem_pio2+0x318>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	4604      	mov	r4, r0
 800ea62:	460d      	mov	r5, r1
 800ea64:	ec51 0b18 	vmov	r0, r1, d8
 800ea68:	f7f1 fde6 	bl	8000638 <__aeabi_dmul>
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	462b      	mov	r3, r5
 800ea70:	f7f1 fc2a 	bl	80002c8 <__aeabi_dsub>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4604      	mov	r4, r0
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	4649      	mov	r1, r9
 800ea80:	f7f1 fc22 	bl	80002c8 <__aeabi_dsub>
 800ea84:	9a03      	ldr	r2, [sp, #12]
 800ea86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	2b31      	cmp	r3, #49	; 0x31
 800ea8e:	dc24      	bgt.n	800eada <__ieee754_rem_pio2+0x28a>
 800ea90:	e9ca 0100 	strd	r0, r1, [sl]
 800ea94:	4646      	mov	r6, r8
 800ea96:	464f      	mov	r7, r9
 800ea98:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	4642      	mov	r2, r8
 800eaa0:	464b      	mov	r3, r9
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	f7f1 fc10 	bl	80002c8 <__aeabi_dsub>
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	4622      	mov	r2, r4
 800eaac:	f7f1 fc0c 	bl	80002c8 <__aeabi_dsub>
 800eab0:	9b02      	ldr	r3, [sp, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eab8:	f6bf af0a 	bge.w	800e8d0 <__ieee754_rem_pio2+0x80>
 800eabc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eac0:	f8ca 3004 	str.w	r3, [sl, #4]
 800eac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eac8:	f8ca 8000 	str.w	r8, [sl]
 800eacc:	f8ca 0008 	str.w	r0, [sl, #8]
 800ead0:	f8ca 300c 	str.w	r3, [sl, #12]
 800ead4:	f1cb 0b00 	rsb	fp, fp, #0
 800ead8:	e6fa      	b.n	800e8d0 <__ieee754_rem_pio2+0x80>
 800eada:	a327      	add	r3, pc, #156	; (adr r3, 800eb78 <__ieee754_rem_pio2+0x328>)
 800eadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae0:	ec51 0b18 	vmov	r0, r1, d8
 800eae4:	f7f1 fda8 	bl	8000638 <__aeabi_dmul>
 800eae8:	4604      	mov	r4, r0
 800eaea:	460d      	mov	r5, r1
 800eaec:	4602      	mov	r2, r0
 800eaee:	460b      	mov	r3, r1
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	4649      	mov	r1, r9
 800eaf4:	f7f1 fbe8 	bl	80002c8 <__aeabi_dsub>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4606      	mov	r6, r0
 800eafe:	460f      	mov	r7, r1
 800eb00:	4640      	mov	r0, r8
 800eb02:	4649      	mov	r1, r9
 800eb04:	f7f1 fbe0 	bl	80002c8 <__aeabi_dsub>
 800eb08:	4622      	mov	r2, r4
 800eb0a:	462b      	mov	r3, r5
 800eb0c:	f7f1 fbdc 	bl	80002c8 <__aeabi_dsub>
 800eb10:	a31b      	add	r3, pc, #108	; (adr r3, 800eb80 <__ieee754_rem_pio2+0x330>)
 800eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb16:	4604      	mov	r4, r0
 800eb18:	460d      	mov	r5, r1
 800eb1a:	ec51 0b18 	vmov	r0, r1, d8
 800eb1e:	f7f1 fd8b 	bl	8000638 <__aeabi_dmul>
 800eb22:	4622      	mov	r2, r4
 800eb24:	462b      	mov	r3, r5
 800eb26:	f7f1 fbcf 	bl	80002c8 <__aeabi_dsub>
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	460d      	mov	r5, r1
 800eb2e:	e75f      	b.n	800e9f0 <__ieee754_rem_pio2+0x1a0>
 800eb30:	4b1b      	ldr	r3, [pc, #108]	; (800eba0 <__ieee754_rem_pio2+0x350>)
 800eb32:	4598      	cmp	r8, r3
 800eb34:	dd36      	ble.n	800eba4 <__ieee754_rem_pio2+0x354>
 800eb36:	ee10 2a10 	vmov	r2, s0
 800eb3a:	462b      	mov	r3, r5
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	4629      	mov	r1, r5
 800eb40:	f7f1 fbc2 	bl	80002c8 <__aeabi_dsub>
 800eb44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb48:	e9ca 0100 	strd	r0, r1, [sl]
 800eb4c:	e694      	b.n	800e878 <__ieee754_rem_pio2+0x28>
 800eb4e:	bf00      	nop
 800eb50:	54400000 	.word	0x54400000
 800eb54:	3ff921fb 	.word	0x3ff921fb
 800eb58:	1a626331 	.word	0x1a626331
 800eb5c:	3dd0b461 	.word	0x3dd0b461
 800eb60:	1a600000 	.word	0x1a600000
 800eb64:	3dd0b461 	.word	0x3dd0b461
 800eb68:	2e037073 	.word	0x2e037073
 800eb6c:	3ba3198a 	.word	0x3ba3198a
 800eb70:	6dc9c883 	.word	0x6dc9c883
 800eb74:	3fe45f30 	.word	0x3fe45f30
 800eb78:	2e000000 	.word	0x2e000000
 800eb7c:	3ba3198a 	.word	0x3ba3198a
 800eb80:	252049c1 	.word	0x252049c1
 800eb84:	397b839a 	.word	0x397b839a
 800eb88:	3fe921fb 	.word	0x3fe921fb
 800eb8c:	4002d97b 	.word	0x4002d97b
 800eb90:	3ff921fb 	.word	0x3ff921fb
 800eb94:	413921fb 	.word	0x413921fb
 800eb98:	3fe00000 	.word	0x3fe00000
 800eb9c:	0800fec0 	.word	0x0800fec0
 800eba0:	7fefffff 	.word	0x7fefffff
 800eba4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800eba8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ebac:	ee10 0a10 	vmov	r0, s0
 800ebb0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ebb4:	ee10 6a10 	vmov	r6, s0
 800ebb8:	460f      	mov	r7, r1
 800ebba:	f7f1 ffed 	bl	8000b98 <__aeabi_d2iz>
 800ebbe:	f7f1 fcd1 	bl	8000564 <__aeabi_i2d>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	4639      	mov	r1, r7
 800ebca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ebce:	f7f1 fb7b 	bl	80002c8 <__aeabi_dsub>
 800ebd2:	4b23      	ldr	r3, [pc, #140]	; (800ec60 <__ieee754_rem_pio2+0x410>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f7f1 fd2f 	bl	8000638 <__aeabi_dmul>
 800ebda:	460f      	mov	r7, r1
 800ebdc:	4606      	mov	r6, r0
 800ebde:	f7f1 ffdb 	bl	8000b98 <__aeabi_d2iz>
 800ebe2:	f7f1 fcbf 	bl	8000564 <__aeabi_i2d>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	460b      	mov	r3, r1
 800ebea:	4630      	mov	r0, r6
 800ebec:	4639      	mov	r1, r7
 800ebee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebf2:	f7f1 fb69 	bl	80002c8 <__aeabi_dsub>
 800ebf6:	4b1a      	ldr	r3, [pc, #104]	; (800ec60 <__ieee754_rem_pio2+0x410>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f7f1 fd1d 	bl	8000638 <__aeabi_dmul>
 800ebfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ec02:	ad04      	add	r5, sp, #16
 800ec04:	f04f 0803 	mov.w	r8, #3
 800ec08:	46a9      	mov	r9, r5
 800ec0a:	2600      	movs	r6, #0
 800ec0c:	2700      	movs	r7, #0
 800ec0e:	4632      	mov	r2, r6
 800ec10:	463b      	mov	r3, r7
 800ec12:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ec16:	46c3      	mov	fp, r8
 800ec18:	3d08      	subs	r5, #8
 800ec1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec1e:	f7f1 ff73 	bl	8000b08 <__aeabi_dcmpeq>
 800ec22:	2800      	cmp	r0, #0
 800ec24:	d1f3      	bne.n	800ec0e <__ieee754_rem_pio2+0x3be>
 800ec26:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <__ieee754_rem_pio2+0x414>)
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	2302      	movs	r3, #2
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	4622      	mov	r2, r4
 800ec30:	465b      	mov	r3, fp
 800ec32:	4651      	mov	r1, sl
 800ec34:	4648      	mov	r0, r9
 800ec36:	f000 f817 	bl	800ec68 <__kernel_rem_pio2>
 800ec3a:	9b02      	ldr	r3, [sp, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	4683      	mov	fp, r0
 800ec40:	f6bf ae46 	bge.w	800e8d0 <__ieee754_rem_pio2+0x80>
 800ec44:	e9da 2100 	ldrd	r2, r1, [sl]
 800ec48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec4c:	e9ca 2300 	strd	r2, r3, [sl]
 800ec50:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ec54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec58:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ec5c:	e73a      	b.n	800ead4 <__ieee754_rem_pio2+0x284>
 800ec5e:	bf00      	nop
 800ec60:	41700000 	.word	0x41700000
 800ec64:	0800ff40 	.word	0x0800ff40

0800ec68 <__kernel_rem_pio2>:
 800ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	ed2d 8b02 	vpush	{d8}
 800ec70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ec74:	f112 0f14 	cmn.w	r2, #20
 800ec78:	9308      	str	r3, [sp, #32]
 800ec7a:	9101      	str	r1, [sp, #4]
 800ec7c:	4bc4      	ldr	r3, [pc, #784]	; (800ef90 <__kernel_rem_pio2+0x328>)
 800ec7e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ec80:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec86:	9302      	str	r3, [sp, #8]
 800ec88:	9b08      	ldr	r3, [sp, #32]
 800ec8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec8e:	bfa8      	it	ge
 800ec90:	1ed4      	subge	r4, r2, #3
 800ec92:	9306      	str	r3, [sp, #24]
 800ec94:	bfb2      	itee	lt
 800ec96:	2400      	movlt	r4, #0
 800ec98:	2318      	movge	r3, #24
 800ec9a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ec9e:	f06f 0317 	mvn.w	r3, #23
 800eca2:	fb04 3303 	mla	r3, r4, r3, r3
 800eca6:	eb03 0a02 	add.w	sl, r3, r2
 800ecaa:	9b02      	ldr	r3, [sp, #8]
 800ecac:	9a06      	ldr	r2, [sp, #24]
 800ecae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ef80 <__kernel_rem_pio2+0x318>
 800ecb2:	eb03 0802 	add.w	r8, r3, r2
 800ecb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ecb8:	1aa7      	subs	r7, r4, r2
 800ecba:	ae22      	add	r6, sp, #136	; 0x88
 800ecbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ecc0:	2500      	movs	r5, #0
 800ecc2:	4545      	cmp	r5, r8
 800ecc4:	dd13      	ble.n	800ecee <__kernel_rem_pio2+0x86>
 800ecc6:	9b08      	ldr	r3, [sp, #32]
 800ecc8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ef80 <__kernel_rem_pio2+0x318>
 800eccc:	aa22      	add	r2, sp, #136	; 0x88
 800ecce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ecd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ecd6:	f04f 0800 	mov.w	r8, #0
 800ecda:	9b02      	ldr	r3, [sp, #8]
 800ecdc:	4598      	cmp	r8, r3
 800ecde:	dc2f      	bgt.n	800ed40 <__kernel_rem_pio2+0xd8>
 800ece0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ece4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ece8:	462f      	mov	r7, r5
 800ecea:	2600      	movs	r6, #0
 800ecec:	e01b      	b.n	800ed26 <__kernel_rem_pio2+0xbe>
 800ecee:	42ef      	cmn	r7, r5
 800ecf0:	d407      	bmi.n	800ed02 <__kernel_rem_pio2+0x9a>
 800ecf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ecf6:	f7f1 fc35 	bl	8000564 <__aeabi_i2d>
 800ecfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ecfe:	3501      	adds	r5, #1
 800ed00:	e7df      	b.n	800ecc2 <__kernel_rem_pio2+0x5a>
 800ed02:	ec51 0b18 	vmov	r0, r1, d8
 800ed06:	e7f8      	b.n	800ecfa <__kernel_rem_pio2+0x92>
 800ed08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ed10:	f7f1 fc92 	bl	8000638 <__aeabi_dmul>
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed1c:	f7f1 fad6 	bl	80002cc <__adddf3>
 800ed20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed24:	3601      	adds	r6, #1
 800ed26:	9b06      	ldr	r3, [sp, #24]
 800ed28:	429e      	cmp	r6, r3
 800ed2a:	f1a7 0708 	sub.w	r7, r7, #8
 800ed2e:	ddeb      	ble.n	800ed08 <__kernel_rem_pio2+0xa0>
 800ed30:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ed34:	f108 0801 	add.w	r8, r8, #1
 800ed38:	ecab 7b02 	vstmia	fp!, {d7}
 800ed3c:	3508      	adds	r5, #8
 800ed3e:	e7cc      	b.n	800ecda <__kernel_rem_pio2+0x72>
 800ed40:	9b02      	ldr	r3, [sp, #8]
 800ed42:	aa0e      	add	r2, sp, #56	; 0x38
 800ed44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed48:	930d      	str	r3, [sp, #52]	; 0x34
 800ed4a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ed4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ed50:	9c02      	ldr	r4, [sp, #8]
 800ed52:	930c      	str	r3, [sp, #48]	; 0x30
 800ed54:	00e3      	lsls	r3, r4, #3
 800ed56:	930a      	str	r3, [sp, #40]	; 0x28
 800ed58:	ab9a      	add	r3, sp, #616	; 0x268
 800ed5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ed62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ed66:	ab72      	add	r3, sp, #456	; 0x1c8
 800ed68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ed6c:	46c3      	mov	fp, r8
 800ed6e:	46a1      	mov	r9, r4
 800ed70:	f1b9 0f00 	cmp.w	r9, #0
 800ed74:	f1a5 0508 	sub.w	r5, r5, #8
 800ed78:	dc77      	bgt.n	800ee6a <__kernel_rem_pio2+0x202>
 800ed7a:	ec47 6b10 	vmov	d0, r6, r7
 800ed7e:	4650      	mov	r0, sl
 800ed80:	f000 fd4e 	bl	800f820 <scalbn>
 800ed84:	ec57 6b10 	vmov	r6, r7, d0
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ed8e:	ee10 0a10 	vmov	r0, s0
 800ed92:	4639      	mov	r1, r7
 800ed94:	f7f1 fc50 	bl	8000638 <__aeabi_dmul>
 800ed98:	ec41 0b10 	vmov	d0, r0, r1
 800ed9c:	f000 fcc0 	bl	800f720 <floor>
 800eda0:	4b7c      	ldr	r3, [pc, #496]	; (800ef94 <__kernel_rem_pio2+0x32c>)
 800eda2:	ec51 0b10 	vmov	r0, r1, d0
 800eda6:	2200      	movs	r2, #0
 800eda8:	f7f1 fc46 	bl	8000638 <__aeabi_dmul>
 800edac:	4602      	mov	r2, r0
 800edae:	460b      	mov	r3, r1
 800edb0:	4630      	mov	r0, r6
 800edb2:	4639      	mov	r1, r7
 800edb4:	f7f1 fa88 	bl	80002c8 <__aeabi_dsub>
 800edb8:	460f      	mov	r7, r1
 800edba:	4606      	mov	r6, r0
 800edbc:	f7f1 feec 	bl	8000b98 <__aeabi_d2iz>
 800edc0:	9004      	str	r0, [sp, #16]
 800edc2:	f7f1 fbcf 	bl	8000564 <__aeabi_i2d>
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	4630      	mov	r0, r6
 800edcc:	4639      	mov	r1, r7
 800edce:	f7f1 fa7b 	bl	80002c8 <__aeabi_dsub>
 800edd2:	f1ba 0f00 	cmp.w	sl, #0
 800edd6:	4606      	mov	r6, r0
 800edd8:	460f      	mov	r7, r1
 800edda:	dd6d      	ble.n	800eeb8 <__kernel_rem_pio2+0x250>
 800eddc:	1e62      	subs	r2, r4, #1
 800edde:	ab0e      	add	r3, sp, #56	; 0x38
 800ede0:	9d04      	ldr	r5, [sp, #16]
 800ede2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ede6:	f1ca 0118 	rsb	r1, sl, #24
 800edea:	fa40 f301 	asr.w	r3, r0, r1
 800edee:	441d      	add	r5, r3
 800edf0:	408b      	lsls	r3, r1
 800edf2:	1ac0      	subs	r0, r0, r3
 800edf4:	ab0e      	add	r3, sp, #56	; 0x38
 800edf6:	9504      	str	r5, [sp, #16]
 800edf8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800edfc:	f1ca 0317 	rsb	r3, sl, #23
 800ee00:	fa40 fb03 	asr.w	fp, r0, r3
 800ee04:	f1bb 0f00 	cmp.w	fp, #0
 800ee08:	dd65      	ble.n	800eed6 <__kernel_rem_pio2+0x26e>
 800ee0a:	9b04      	ldr	r3, [sp, #16]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	3301      	adds	r3, #1
 800ee10:	9304      	str	r3, [sp, #16]
 800ee12:	4615      	mov	r5, r2
 800ee14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ee18:	4294      	cmp	r4, r2
 800ee1a:	f300 809c 	bgt.w	800ef56 <__kernel_rem_pio2+0x2ee>
 800ee1e:	f1ba 0f00 	cmp.w	sl, #0
 800ee22:	dd07      	ble.n	800ee34 <__kernel_rem_pio2+0x1cc>
 800ee24:	f1ba 0f01 	cmp.w	sl, #1
 800ee28:	f000 80c0 	beq.w	800efac <__kernel_rem_pio2+0x344>
 800ee2c:	f1ba 0f02 	cmp.w	sl, #2
 800ee30:	f000 80c6 	beq.w	800efc0 <__kernel_rem_pio2+0x358>
 800ee34:	f1bb 0f02 	cmp.w	fp, #2
 800ee38:	d14d      	bne.n	800eed6 <__kernel_rem_pio2+0x26e>
 800ee3a:	4632      	mov	r2, r6
 800ee3c:	463b      	mov	r3, r7
 800ee3e:	4956      	ldr	r1, [pc, #344]	; (800ef98 <__kernel_rem_pio2+0x330>)
 800ee40:	2000      	movs	r0, #0
 800ee42:	f7f1 fa41 	bl	80002c8 <__aeabi_dsub>
 800ee46:	4606      	mov	r6, r0
 800ee48:	460f      	mov	r7, r1
 800ee4a:	2d00      	cmp	r5, #0
 800ee4c:	d043      	beq.n	800eed6 <__kernel_rem_pio2+0x26e>
 800ee4e:	4650      	mov	r0, sl
 800ee50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ef88 <__kernel_rem_pio2+0x320>
 800ee54:	f000 fce4 	bl	800f820 <scalbn>
 800ee58:	4630      	mov	r0, r6
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	ec53 2b10 	vmov	r2, r3, d0
 800ee60:	f7f1 fa32 	bl	80002c8 <__aeabi_dsub>
 800ee64:	4606      	mov	r6, r0
 800ee66:	460f      	mov	r7, r1
 800ee68:	e035      	b.n	800eed6 <__kernel_rem_pio2+0x26e>
 800ee6a:	4b4c      	ldr	r3, [pc, #304]	; (800ef9c <__kernel_rem_pio2+0x334>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	4630      	mov	r0, r6
 800ee70:	4639      	mov	r1, r7
 800ee72:	f7f1 fbe1 	bl	8000638 <__aeabi_dmul>
 800ee76:	f7f1 fe8f 	bl	8000b98 <__aeabi_d2iz>
 800ee7a:	f7f1 fb73 	bl	8000564 <__aeabi_i2d>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	ec43 2b18 	vmov	d8, r2, r3
 800ee86:	4b46      	ldr	r3, [pc, #280]	; (800efa0 <__kernel_rem_pio2+0x338>)
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f7f1 fbd5 	bl	8000638 <__aeabi_dmul>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	4630      	mov	r0, r6
 800ee94:	4639      	mov	r1, r7
 800ee96:	f7f1 fa17 	bl	80002c8 <__aeabi_dsub>
 800ee9a:	f7f1 fe7d 	bl	8000b98 <__aeabi_d2iz>
 800ee9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eea2:	f84b 0b04 	str.w	r0, [fp], #4
 800eea6:	ec51 0b18 	vmov	r0, r1, d8
 800eeaa:	f7f1 fa0f 	bl	80002cc <__adddf3>
 800eeae:	f109 39ff 	add.w	r9, r9, #4294967295
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	460f      	mov	r7, r1
 800eeb6:	e75b      	b.n	800ed70 <__kernel_rem_pio2+0x108>
 800eeb8:	d106      	bne.n	800eec8 <__kernel_rem_pio2+0x260>
 800eeba:	1e63      	subs	r3, r4, #1
 800eebc:	aa0e      	add	r2, sp, #56	; 0x38
 800eebe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eec2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800eec6:	e79d      	b.n	800ee04 <__kernel_rem_pio2+0x19c>
 800eec8:	4b36      	ldr	r3, [pc, #216]	; (800efa4 <__kernel_rem_pio2+0x33c>)
 800eeca:	2200      	movs	r2, #0
 800eecc:	f7f1 fe3a 	bl	8000b44 <__aeabi_dcmpge>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d13d      	bne.n	800ef50 <__kernel_rem_pio2+0x2e8>
 800eed4:	4683      	mov	fp, r0
 800eed6:	2200      	movs	r2, #0
 800eed8:	2300      	movs	r3, #0
 800eeda:	4630      	mov	r0, r6
 800eedc:	4639      	mov	r1, r7
 800eede:	f7f1 fe13 	bl	8000b08 <__aeabi_dcmpeq>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	f000 80c0 	beq.w	800f068 <__kernel_rem_pio2+0x400>
 800eee8:	1e65      	subs	r5, r4, #1
 800eeea:	462b      	mov	r3, r5
 800eeec:	2200      	movs	r2, #0
 800eeee:	9902      	ldr	r1, [sp, #8]
 800eef0:	428b      	cmp	r3, r1
 800eef2:	da6c      	bge.n	800efce <__kernel_rem_pio2+0x366>
 800eef4:	2a00      	cmp	r2, #0
 800eef6:	f000 8089 	beq.w	800f00c <__kernel_rem_pio2+0x3a4>
 800eefa:	ab0e      	add	r3, sp, #56	; 0x38
 800eefc:	f1aa 0a18 	sub.w	sl, sl, #24
 800ef00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 80ad 	beq.w	800f064 <__kernel_rem_pio2+0x3fc>
 800ef0a:	4650      	mov	r0, sl
 800ef0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ef88 <__kernel_rem_pio2+0x320>
 800ef10:	f000 fc86 	bl	800f820 <scalbn>
 800ef14:	ab9a      	add	r3, sp, #616	; 0x268
 800ef16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ef1a:	ec57 6b10 	vmov	r6, r7, d0
 800ef1e:	00ec      	lsls	r4, r5, #3
 800ef20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ef24:	46aa      	mov	sl, r5
 800ef26:	f1ba 0f00 	cmp.w	sl, #0
 800ef2a:	f280 80d6 	bge.w	800f0da <__kernel_rem_pio2+0x472>
 800ef2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ef80 <__kernel_rem_pio2+0x318>
 800ef32:	462e      	mov	r6, r5
 800ef34:	2e00      	cmp	r6, #0
 800ef36:	f2c0 8104 	blt.w	800f142 <__kernel_rem_pio2+0x4da>
 800ef3a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ef3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ef40:	f8df a064 	ldr.w	sl, [pc, #100]	; 800efa8 <__kernel_rem_pio2+0x340>
 800ef44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ef48:	f04f 0800 	mov.w	r8, #0
 800ef4c:	1baf      	subs	r7, r5, r6
 800ef4e:	e0ea      	b.n	800f126 <__kernel_rem_pio2+0x4be>
 800ef50:	f04f 0b02 	mov.w	fp, #2
 800ef54:	e759      	b.n	800ee0a <__kernel_rem_pio2+0x1a2>
 800ef56:	f8d8 3000 	ldr.w	r3, [r8]
 800ef5a:	b955      	cbnz	r5, 800ef72 <__kernel_rem_pio2+0x30a>
 800ef5c:	b123      	cbz	r3, 800ef68 <__kernel_rem_pio2+0x300>
 800ef5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ef62:	f8c8 3000 	str.w	r3, [r8]
 800ef66:	2301      	movs	r3, #1
 800ef68:	3201      	adds	r2, #1
 800ef6a:	f108 0804 	add.w	r8, r8, #4
 800ef6e:	461d      	mov	r5, r3
 800ef70:	e752      	b.n	800ee18 <__kernel_rem_pio2+0x1b0>
 800ef72:	1acb      	subs	r3, r1, r3
 800ef74:	f8c8 3000 	str.w	r3, [r8]
 800ef78:	462b      	mov	r3, r5
 800ef7a:	e7f5      	b.n	800ef68 <__kernel_rem_pio2+0x300>
 800ef7c:	f3af 8000 	nop.w
	...
 800ef8c:	3ff00000 	.word	0x3ff00000
 800ef90:	08010088 	.word	0x08010088
 800ef94:	40200000 	.word	0x40200000
 800ef98:	3ff00000 	.word	0x3ff00000
 800ef9c:	3e700000 	.word	0x3e700000
 800efa0:	41700000 	.word	0x41700000
 800efa4:	3fe00000 	.word	0x3fe00000
 800efa8:	08010048 	.word	0x08010048
 800efac:	1e62      	subs	r2, r4, #1
 800efae:	ab0e      	add	r3, sp, #56	; 0x38
 800efb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800efb8:	a90e      	add	r1, sp, #56	; 0x38
 800efba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800efbe:	e739      	b.n	800ee34 <__kernel_rem_pio2+0x1cc>
 800efc0:	1e62      	subs	r2, r4, #1
 800efc2:	ab0e      	add	r3, sp, #56	; 0x38
 800efc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800efcc:	e7f4      	b.n	800efb8 <__kernel_rem_pio2+0x350>
 800efce:	a90e      	add	r1, sp, #56	; 0x38
 800efd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800efd4:	3b01      	subs	r3, #1
 800efd6:	430a      	orrs	r2, r1
 800efd8:	e789      	b.n	800eeee <__kernel_rem_pio2+0x286>
 800efda:	3301      	adds	r3, #1
 800efdc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800efe0:	2900      	cmp	r1, #0
 800efe2:	d0fa      	beq.n	800efda <__kernel_rem_pio2+0x372>
 800efe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efe6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800efea:	446a      	add	r2, sp
 800efec:	3a98      	subs	r2, #152	; 0x98
 800efee:	920a      	str	r2, [sp, #40]	; 0x28
 800eff0:	9a08      	ldr	r2, [sp, #32]
 800eff2:	18e3      	adds	r3, r4, r3
 800eff4:	18a5      	adds	r5, r4, r2
 800eff6:	aa22      	add	r2, sp, #136	; 0x88
 800eff8:	f104 0801 	add.w	r8, r4, #1
 800effc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f000:	9304      	str	r3, [sp, #16]
 800f002:	9b04      	ldr	r3, [sp, #16]
 800f004:	4543      	cmp	r3, r8
 800f006:	da04      	bge.n	800f012 <__kernel_rem_pio2+0x3aa>
 800f008:	461c      	mov	r4, r3
 800f00a:	e6a3      	b.n	800ed54 <__kernel_rem_pio2+0xec>
 800f00c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f00e:	2301      	movs	r3, #1
 800f010:	e7e4      	b.n	800efdc <__kernel_rem_pio2+0x374>
 800f012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f014:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f018:	f7f1 faa4 	bl	8000564 <__aeabi_i2d>
 800f01c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f022:	46ab      	mov	fp, r5
 800f024:	461c      	mov	r4, r3
 800f026:	f04f 0900 	mov.w	r9, #0
 800f02a:	2600      	movs	r6, #0
 800f02c:	2700      	movs	r7, #0
 800f02e:	9b06      	ldr	r3, [sp, #24]
 800f030:	4599      	cmp	r9, r3
 800f032:	dd06      	ble.n	800f042 <__kernel_rem_pio2+0x3da>
 800f034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f036:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f03a:	f108 0801 	add.w	r8, r8, #1
 800f03e:	930a      	str	r3, [sp, #40]	; 0x28
 800f040:	e7df      	b.n	800f002 <__kernel_rem_pio2+0x39a>
 800f042:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f046:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f04a:	f7f1 faf5 	bl	8000638 <__aeabi_dmul>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	4630      	mov	r0, r6
 800f054:	4639      	mov	r1, r7
 800f056:	f7f1 f939 	bl	80002cc <__adddf3>
 800f05a:	f109 0901 	add.w	r9, r9, #1
 800f05e:	4606      	mov	r6, r0
 800f060:	460f      	mov	r7, r1
 800f062:	e7e4      	b.n	800f02e <__kernel_rem_pio2+0x3c6>
 800f064:	3d01      	subs	r5, #1
 800f066:	e748      	b.n	800eefa <__kernel_rem_pio2+0x292>
 800f068:	ec47 6b10 	vmov	d0, r6, r7
 800f06c:	f1ca 0000 	rsb	r0, sl, #0
 800f070:	f000 fbd6 	bl	800f820 <scalbn>
 800f074:	ec57 6b10 	vmov	r6, r7, d0
 800f078:	4ba0      	ldr	r3, [pc, #640]	; (800f2fc <__kernel_rem_pio2+0x694>)
 800f07a:	ee10 0a10 	vmov	r0, s0
 800f07e:	2200      	movs	r2, #0
 800f080:	4639      	mov	r1, r7
 800f082:	f7f1 fd5f 	bl	8000b44 <__aeabi_dcmpge>
 800f086:	b1f8      	cbz	r0, 800f0c8 <__kernel_rem_pio2+0x460>
 800f088:	4b9d      	ldr	r3, [pc, #628]	; (800f300 <__kernel_rem_pio2+0x698>)
 800f08a:	2200      	movs	r2, #0
 800f08c:	4630      	mov	r0, r6
 800f08e:	4639      	mov	r1, r7
 800f090:	f7f1 fad2 	bl	8000638 <__aeabi_dmul>
 800f094:	f7f1 fd80 	bl	8000b98 <__aeabi_d2iz>
 800f098:	4680      	mov	r8, r0
 800f09a:	f7f1 fa63 	bl	8000564 <__aeabi_i2d>
 800f09e:	4b97      	ldr	r3, [pc, #604]	; (800f2fc <__kernel_rem_pio2+0x694>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f7f1 fac9 	bl	8000638 <__aeabi_dmul>
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f7f1 f90b 	bl	80002c8 <__aeabi_dsub>
 800f0b2:	f7f1 fd71 	bl	8000b98 <__aeabi_d2iz>
 800f0b6:	1c65      	adds	r5, r4, #1
 800f0b8:	ab0e      	add	r3, sp, #56	; 0x38
 800f0ba:	f10a 0a18 	add.w	sl, sl, #24
 800f0be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f0c2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f0c6:	e720      	b.n	800ef0a <__kernel_rem_pio2+0x2a2>
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	f7f1 fd64 	bl	8000b98 <__aeabi_d2iz>
 800f0d0:	ab0e      	add	r3, sp, #56	; 0x38
 800f0d2:	4625      	mov	r5, r4
 800f0d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f0d8:	e717      	b.n	800ef0a <__kernel_rem_pio2+0x2a2>
 800f0da:	ab0e      	add	r3, sp, #56	; 0x38
 800f0dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f0e0:	f7f1 fa40 	bl	8000564 <__aeabi_i2d>
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	463b      	mov	r3, r7
 800f0e8:	f7f1 faa6 	bl	8000638 <__aeabi_dmul>
 800f0ec:	4b84      	ldr	r3, [pc, #528]	; (800f300 <__kernel_rem_pio2+0x698>)
 800f0ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	f7f1 fa9e 	bl	8000638 <__aeabi_dmul>
 800f0fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f100:	4606      	mov	r6, r0
 800f102:	460f      	mov	r7, r1
 800f104:	e70f      	b.n	800ef26 <__kernel_rem_pio2+0x2be>
 800f106:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f10a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f10e:	f7f1 fa93 	bl	8000638 <__aeabi_dmul>
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f11a:	f7f1 f8d7 	bl	80002cc <__adddf3>
 800f11e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f122:	f108 0801 	add.w	r8, r8, #1
 800f126:	9b02      	ldr	r3, [sp, #8]
 800f128:	4598      	cmp	r8, r3
 800f12a:	dc01      	bgt.n	800f130 <__kernel_rem_pio2+0x4c8>
 800f12c:	45b8      	cmp	r8, r7
 800f12e:	ddea      	ble.n	800f106 <__kernel_rem_pio2+0x49e>
 800f130:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f134:	ab4a      	add	r3, sp, #296	; 0x128
 800f136:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f13a:	ed87 7b00 	vstr	d7, [r7]
 800f13e:	3e01      	subs	r6, #1
 800f140:	e6f8      	b.n	800ef34 <__kernel_rem_pio2+0x2cc>
 800f142:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f144:	2b02      	cmp	r3, #2
 800f146:	dc0b      	bgt.n	800f160 <__kernel_rem_pio2+0x4f8>
 800f148:	2b00      	cmp	r3, #0
 800f14a:	dc35      	bgt.n	800f1b8 <__kernel_rem_pio2+0x550>
 800f14c:	d059      	beq.n	800f202 <__kernel_rem_pio2+0x59a>
 800f14e:	9b04      	ldr	r3, [sp, #16]
 800f150:	f003 0007 	and.w	r0, r3, #7
 800f154:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f158:	ecbd 8b02 	vpop	{d8}
 800f15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f160:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f162:	2b03      	cmp	r3, #3
 800f164:	d1f3      	bne.n	800f14e <__kernel_rem_pio2+0x4e6>
 800f166:	ab4a      	add	r3, sp, #296	; 0x128
 800f168:	4423      	add	r3, r4
 800f16a:	9306      	str	r3, [sp, #24]
 800f16c:	461c      	mov	r4, r3
 800f16e:	469a      	mov	sl, r3
 800f170:	9502      	str	r5, [sp, #8]
 800f172:	9b02      	ldr	r3, [sp, #8]
 800f174:	2b00      	cmp	r3, #0
 800f176:	f1aa 0a08 	sub.w	sl, sl, #8
 800f17a:	dc6b      	bgt.n	800f254 <__kernel_rem_pio2+0x5ec>
 800f17c:	46aa      	mov	sl, r5
 800f17e:	f1ba 0f01 	cmp.w	sl, #1
 800f182:	f1a4 0408 	sub.w	r4, r4, #8
 800f186:	f300 8085 	bgt.w	800f294 <__kernel_rem_pio2+0x62c>
 800f18a:	9c06      	ldr	r4, [sp, #24]
 800f18c:	2000      	movs	r0, #0
 800f18e:	3408      	adds	r4, #8
 800f190:	2100      	movs	r1, #0
 800f192:	2d01      	cmp	r5, #1
 800f194:	f300 809d 	bgt.w	800f2d2 <__kernel_rem_pio2+0x66a>
 800f198:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f19c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f1a0:	f1bb 0f00 	cmp.w	fp, #0
 800f1a4:	f040 809b 	bne.w	800f2de <__kernel_rem_pio2+0x676>
 800f1a8:	9b01      	ldr	r3, [sp, #4]
 800f1aa:	e9c3 5600 	strd	r5, r6, [r3]
 800f1ae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f1b2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f1b6:	e7ca      	b.n	800f14e <__kernel_rem_pio2+0x4e6>
 800f1b8:	3408      	adds	r4, #8
 800f1ba:	ab4a      	add	r3, sp, #296	; 0x128
 800f1bc:	441c      	add	r4, r3
 800f1be:	462e      	mov	r6, r5
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	2e00      	cmp	r6, #0
 800f1c6:	da36      	bge.n	800f236 <__kernel_rem_pio2+0x5ce>
 800f1c8:	f1bb 0f00 	cmp.w	fp, #0
 800f1cc:	d039      	beq.n	800f242 <__kernel_rem_pio2+0x5da>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1d4:	9c01      	ldr	r4, [sp, #4]
 800f1d6:	e9c4 2300 	strd	r2, r3, [r4]
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f1e2:	f7f1 f871 	bl	80002c8 <__aeabi_dsub>
 800f1e6:	ae4c      	add	r6, sp, #304	; 0x130
 800f1e8:	2401      	movs	r4, #1
 800f1ea:	42a5      	cmp	r5, r4
 800f1ec:	da2c      	bge.n	800f248 <__kernel_rem_pio2+0x5e0>
 800f1ee:	f1bb 0f00 	cmp.w	fp, #0
 800f1f2:	d002      	beq.n	800f1fa <__kernel_rem_pio2+0x592>
 800f1f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	9b01      	ldr	r3, [sp, #4]
 800f1fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f200:	e7a5      	b.n	800f14e <__kernel_rem_pio2+0x4e6>
 800f202:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f206:	eb0d 0403 	add.w	r4, sp, r3
 800f20a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f20e:	2000      	movs	r0, #0
 800f210:	2100      	movs	r1, #0
 800f212:	2d00      	cmp	r5, #0
 800f214:	da09      	bge.n	800f22a <__kernel_rem_pio2+0x5c2>
 800f216:	f1bb 0f00 	cmp.w	fp, #0
 800f21a:	d002      	beq.n	800f222 <__kernel_rem_pio2+0x5ba>
 800f21c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f220:	4619      	mov	r1, r3
 800f222:	9b01      	ldr	r3, [sp, #4]
 800f224:	e9c3 0100 	strd	r0, r1, [r3]
 800f228:	e791      	b.n	800f14e <__kernel_rem_pio2+0x4e6>
 800f22a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f22e:	f7f1 f84d 	bl	80002cc <__adddf3>
 800f232:	3d01      	subs	r5, #1
 800f234:	e7ed      	b.n	800f212 <__kernel_rem_pio2+0x5aa>
 800f236:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f23a:	f7f1 f847 	bl	80002cc <__adddf3>
 800f23e:	3e01      	subs	r6, #1
 800f240:	e7c0      	b.n	800f1c4 <__kernel_rem_pio2+0x55c>
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	e7c5      	b.n	800f1d4 <__kernel_rem_pio2+0x56c>
 800f248:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f24c:	f7f1 f83e 	bl	80002cc <__adddf3>
 800f250:	3401      	adds	r4, #1
 800f252:	e7ca      	b.n	800f1ea <__kernel_rem_pio2+0x582>
 800f254:	e9da 8900 	ldrd	r8, r9, [sl]
 800f258:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f25c:	9b02      	ldr	r3, [sp, #8]
 800f25e:	3b01      	subs	r3, #1
 800f260:	9302      	str	r3, [sp, #8]
 800f262:	4632      	mov	r2, r6
 800f264:	463b      	mov	r3, r7
 800f266:	4640      	mov	r0, r8
 800f268:	4649      	mov	r1, r9
 800f26a:	f7f1 f82f 	bl	80002cc <__adddf3>
 800f26e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	4640      	mov	r0, r8
 800f278:	4649      	mov	r1, r9
 800f27a:	f7f1 f825 	bl	80002c8 <__aeabi_dsub>
 800f27e:	4632      	mov	r2, r6
 800f280:	463b      	mov	r3, r7
 800f282:	f7f1 f823 	bl	80002cc <__adddf3>
 800f286:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f28a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f28e:	ed8a 7b00 	vstr	d7, [sl]
 800f292:	e76e      	b.n	800f172 <__kernel_rem_pio2+0x50a>
 800f294:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f298:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f29c:	4640      	mov	r0, r8
 800f29e:	4632      	mov	r2, r6
 800f2a0:	463b      	mov	r3, r7
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	f7f1 f812 	bl	80002cc <__adddf3>
 800f2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	4649      	mov	r1, r9
 800f2b4:	f7f1 f808 	bl	80002c8 <__aeabi_dsub>
 800f2b8:	4632      	mov	r2, r6
 800f2ba:	463b      	mov	r3, r7
 800f2bc:	f7f1 f806 	bl	80002cc <__adddf3>
 800f2c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f2c8:	ed84 7b00 	vstr	d7, [r4]
 800f2cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2d0:	e755      	b.n	800f17e <__kernel_rem_pio2+0x516>
 800f2d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f2d6:	f7f0 fff9 	bl	80002cc <__adddf3>
 800f2da:	3d01      	subs	r5, #1
 800f2dc:	e759      	b.n	800f192 <__kernel_rem_pio2+0x52a>
 800f2de:	9b01      	ldr	r3, [sp, #4]
 800f2e0:	9a01      	ldr	r2, [sp, #4]
 800f2e2:	601d      	str	r5, [r3, #0]
 800f2e4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f2e8:	605c      	str	r4, [r3, #4]
 800f2ea:	609f      	str	r7, [r3, #8]
 800f2ec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f2f0:	60d3      	str	r3, [r2, #12]
 800f2f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2f6:	6110      	str	r0, [r2, #16]
 800f2f8:	6153      	str	r3, [r2, #20]
 800f2fa:	e728      	b.n	800f14e <__kernel_rem_pio2+0x4e6>
 800f2fc:	41700000 	.word	0x41700000
 800f300:	3e700000 	.word	0x3e700000
 800f304:	00000000 	.word	0x00000000

0800f308 <__kernel_tan>:
 800f308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30c:	ed2d 8b06 	vpush	{d8-d10}
 800f310:	ec5b ab10 	vmov	sl, fp, d0
 800f314:	4be0      	ldr	r3, [pc, #896]	; (800f698 <__kernel_tan+0x390>)
 800f316:	b083      	sub	sp, #12
 800f318:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800f31c:	429f      	cmp	r7, r3
 800f31e:	ec59 8b11 	vmov	r8, r9, d1
 800f322:	4606      	mov	r6, r0
 800f324:	f8cd b000 	str.w	fp, [sp]
 800f328:	dc61      	bgt.n	800f3ee <__kernel_tan+0xe6>
 800f32a:	ee10 0a10 	vmov	r0, s0
 800f32e:	4659      	mov	r1, fp
 800f330:	f7f1 fc32 	bl	8000b98 <__aeabi_d2iz>
 800f334:	4605      	mov	r5, r0
 800f336:	2800      	cmp	r0, #0
 800f338:	f040 8083 	bne.w	800f442 <__kernel_tan+0x13a>
 800f33c:	1c73      	adds	r3, r6, #1
 800f33e:	4652      	mov	r2, sl
 800f340:	4313      	orrs	r3, r2
 800f342:	433b      	orrs	r3, r7
 800f344:	d112      	bne.n	800f36c <__kernel_tan+0x64>
 800f346:	ec4b ab10 	vmov	d0, sl, fp
 800f34a:	f7ff fa41 	bl	800e7d0 <fabs>
 800f34e:	49d3      	ldr	r1, [pc, #844]	; (800f69c <__kernel_tan+0x394>)
 800f350:	ec53 2b10 	vmov	r2, r3, d0
 800f354:	2000      	movs	r0, #0
 800f356:	f7f1 fa99 	bl	800088c <__aeabi_ddiv>
 800f35a:	4682      	mov	sl, r0
 800f35c:	468b      	mov	fp, r1
 800f35e:	ec4b ab10 	vmov	d0, sl, fp
 800f362:	b003      	add	sp, #12
 800f364:	ecbd 8b06 	vpop	{d8-d10}
 800f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36c:	2e01      	cmp	r6, #1
 800f36e:	d0f6      	beq.n	800f35e <__kernel_tan+0x56>
 800f370:	4642      	mov	r2, r8
 800f372:	464b      	mov	r3, r9
 800f374:	4650      	mov	r0, sl
 800f376:	4659      	mov	r1, fp
 800f378:	f7f0 ffa8 	bl	80002cc <__adddf3>
 800f37c:	4602      	mov	r2, r0
 800f37e:	460b      	mov	r3, r1
 800f380:	460f      	mov	r7, r1
 800f382:	2000      	movs	r0, #0
 800f384:	49c6      	ldr	r1, [pc, #792]	; (800f6a0 <__kernel_tan+0x398>)
 800f386:	f7f1 fa81 	bl	800088c <__aeabi_ddiv>
 800f38a:	e9cd 0100 	strd	r0, r1, [sp]
 800f38e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f392:	462e      	mov	r6, r5
 800f394:	4652      	mov	r2, sl
 800f396:	462c      	mov	r4, r5
 800f398:	4630      	mov	r0, r6
 800f39a:	461d      	mov	r5, r3
 800f39c:	4639      	mov	r1, r7
 800f39e:	465b      	mov	r3, fp
 800f3a0:	f7f0 ff92 	bl	80002c8 <__aeabi_dsub>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	4649      	mov	r1, r9
 800f3ac:	f7f0 ff8c 	bl	80002c8 <__aeabi_dsub>
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	462b      	mov	r3, r5
 800f3b4:	f7f1 f940 	bl	8000638 <__aeabi_dmul>
 800f3b8:	4632      	mov	r2, r6
 800f3ba:	4680      	mov	r8, r0
 800f3bc:	4689      	mov	r9, r1
 800f3be:	462b      	mov	r3, r5
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	4639      	mov	r1, r7
 800f3c4:	f7f1 f938 	bl	8000638 <__aeabi_dmul>
 800f3c8:	4bb4      	ldr	r3, [pc, #720]	; (800f69c <__kernel_tan+0x394>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f7f0 ff7e 	bl	80002cc <__adddf3>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4640      	mov	r0, r8
 800f3d6:	4649      	mov	r1, r9
 800f3d8:	f7f0 ff78 	bl	80002cc <__adddf3>
 800f3dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3e0:	f7f1 f92a 	bl	8000638 <__aeabi_dmul>
 800f3e4:	4622      	mov	r2, r4
 800f3e6:	462b      	mov	r3, r5
 800f3e8:	f7f0 ff70 	bl	80002cc <__adddf3>
 800f3ec:	e7b5      	b.n	800f35a <__kernel_tan+0x52>
 800f3ee:	4bad      	ldr	r3, [pc, #692]	; (800f6a4 <__kernel_tan+0x39c>)
 800f3f0:	429f      	cmp	r7, r3
 800f3f2:	dd26      	ble.n	800f442 <__kernel_tan+0x13a>
 800f3f4:	9b00      	ldr	r3, [sp, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	da09      	bge.n	800f40e <__kernel_tan+0x106>
 800f3fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f3fe:	469b      	mov	fp, r3
 800f400:	ee10 aa10 	vmov	sl, s0
 800f404:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f408:	ee11 8a10 	vmov	r8, s2
 800f40c:	4699      	mov	r9, r3
 800f40e:	4652      	mov	r2, sl
 800f410:	465b      	mov	r3, fp
 800f412:	a183      	add	r1, pc, #524	; (adr r1, 800f620 <__kernel_tan+0x318>)
 800f414:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f418:	f7f0 ff56 	bl	80002c8 <__aeabi_dsub>
 800f41c:	4642      	mov	r2, r8
 800f41e:	464b      	mov	r3, r9
 800f420:	4604      	mov	r4, r0
 800f422:	460d      	mov	r5, r1
 800f424:	a180      	add	r1, pc, #512	; (adr r1, 800f628 <__kernel_tan+0x320>)
 800f426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f42a:	f7f0 ff4d 	bl	80002c8 <__aeabi_dsub>
 800f42e:	4622      	mov	r2, r4
 800f430:	462b      	mov	r3, r5
 800f432:	f7f0 ff4b 	bl	80002cc <__adddf3>
 800f436:	f04f 0800 	mov.w	r8, #0
 800f43a:	4682      	mov	sl, r0
 800f43c:	468b      	mov	fp, r1
 800f43e:	f04f 0900 	mov.w	r9, #0
 800f442:	4652      	mov	r2, sl
 800f444:	465b      	mov	r3, fp
 800f446:	4650      	mov	r0, sl
 800f448:	4659      	mov	r1, fp
 800f44a:	f7f1 f8f5 	bl	8000638 <__aeabi_dmul>
 800f44e:	4602      	mov	r2, r0
 800f450:	460b      	mov	r3, r1
 800f452:	ec43 2b18 	vmov	d8, r2, r3
 800f456:	f7f1 f8ef 	bl	8000638 <__aeabi_dmul>
 800f45a:	ec53 2b18 	vmov	r2, r3, d8
 800f45e:	4604      	mov	r4, r0
 800f460:	460d      	mov	r5, r1
 800f462:	4650      	mov	r0, sl
 800f464:	4659      	mov	r1, fp
 800f466:	f7f1 f8e7 	bl	8000638 <__aeabi_dmul>
 800f46a:	a371      	add	r3, pc, #452	; (adr r3, 800f630 <__kernel_tan+0x328>)
 800f46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f470:	ec41 0b19 	vmov	d9, r0, r1
 800f474:	4620      	mov	r0, r4
 800f476:	4629      	mov	r1, r5
 800f478:	f7f1 f8de 	bl	8000638 <__aeabi_dmul>
 800f47c:	a36e      	add	r3, pc, #440	; (adr r3, 800f638 <__kernel_tan+0x330>)
 800f47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f482:	f7f0 ff23 	bl	80002cc <__adddf3>
 800f486:	4622      	mov	r2, r4
 800f488:	462b      	mov	r3, r5
 800f48a:	f7f1 f8d5 	bl	8000638 <__aeabi_dmul>
 800f48e:	a36c      	add	r3, pc, #432	; (adr r3, 800f640 <__kernel_tan+0x338>)
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	f7f0 ff1a 	bl	80002cc <__adddf3>
 800f498:	4622      	mov	r2, r4
 800f49a:	462b      	mov	r3, r5
 800f49c:	f7f1 f8cc 	bl	8000638 <__aeabi_dmul>
 800f4a0:	a369      	add	r3, pc, #420	; (adr r3, 800f648 <__kernel_tan+0x340>)
 800f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a6:	f7f0 ff11 	bl	80002cc <__adddf3>
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	462b      	mov	r3, r5
 800f4ae:	f7f1 f8c3 	bl	8000638 <__aeabi_dmul>
 800f4b2:	a367      	add	r3, pc, #412	; (adr r3, 800f650 <__kernel_tan+0x348>)
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	f7f0 ff08 	bl	80002cc <__adddf3>
 800f4bc:	4622      	mov	r2, r4
 800f4be:	462b      	mov	r3, r5
 800f4c0:	f7f1 f8ba 	bl	8000638 <__aeabi_dmul>
 800f4c4:	a364      	add	r3, pc, #400	; (adr r3, 800f658 <__kernel_tan+0x350>)
 800f4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ca:	f7f0 feff 	bl	80002cc <__adddf3>
 800f4ce:	ec53 2b18 	vmov	r2, r3, d8
 800f4d2:	f7f1 f8b1 	bl	8000638 <__aeabi_dmul>
 800f4d6:	a362      	add	r3, pc, #392	; (adr r3, 800f660 <__kernel_tan+0x358>)
 800f4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4dc:	ec41 0b1a 	vmov	d10, r0, r1
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	f7f1 f8a8 	bl	8000638 <__aeabi_dmul>
 800f4e8:	a35f      	add	r3, pc, #380	; (adr r3, 800f668 <__kernel_tan+0x360>)
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	f7f0 feed 	bl	80002cc <__adddf3>
 800f4f2:	4622      	mov	r2, r4
 800f4f4:	462b      	mov	r3, r5
 800f4f6:	f7f1 f89f 	bl	8000638 <__aeabi_dmul>
 800f4fa:	a35d      	add	r3, pc, #372	; (adr r3, 800f670 <__kernel_tan+0x368>)
 800f4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f500:	f7f0 fee4 	bl	80002cc <__adddf3>
 800f504:	4622      	mov	r2, r4
 800f506:	462b      	mov	r3, r5
 800f508:	f7f1 f896 	bl	8000638 <__aeabi_dmul>
 800f50c:	a35a      	add	r3, pc, #360	; (adr r3, 800f678 <__kernel_tan+0x370>)
 800f50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f512:	f7f0 fedb 	bl	80002cc <__adddf3>
 800f516:	4622      	mov	r2, r4
 800f518:	462b      	mov	r3, r5
 800f51a:	f7f1 f88d 	bl	8000638 <__aeabi_dmul>
 800f51e:	a358      	add	r3, pc, #352	; (adr r3, 800f680 <__kernel_tan+0x378>)
 800f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f524:	f7f0 fed2 	bl	80002cc <__adddf3>
 800f528:	4622      	mov	r2, r4
 800f52a:	462b      	mov	r3, r5
 800f52c:	f7f1 f884 	bl	8000638 <__aeabi_dmul>
 800f530:	a355      	add	r3, pc, #340	; (adr r3, 800f688 <__kernel_tan+0x380>)
 800f532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f536:	f7f0 fec9 	bl	80002cc <__adddf3>
 800f53a:	4602      	mov	r2, r0
 800f53c:	460b      	mov	r3, r1
 800f53e:	ec51 0b1a 	vmov	r0, r1, d10
 800f542:	f7f0 fec3 	bl	80002cc <__adddf3>
 800f546:	ec53 2b19 	vmov	r2, r3, d9
 800f54a:	f7f1 f875 	bl	8000638 <__aeabi_dmul>
 800f54e:	4642      	mov	r2, r8
 800f550:	464b      	mov	r3, r9
 800f552:	f7f0 febb 	bl	80002cc <__adddf3>
 800f556:	ec53 2b18 	vmov	r2, r3, d8
 800f55a:	f7f1 f86d 	bl	8000638 <__aeabi_dmul>
 800f55e:	4642      	mov	r2, r8
 800f560:	464b      	mov	r3, r9
 800f562:	f7f0 feb3 	bl	80002cc <__adddf3>
 800f566:	a34a      	add	r3, pc, #296	; (adr r3, 800f690 <__kernel_tan+0x388>)
 800f568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56c:	4604      	mov	r4, r0
 800f56e:	460d      	mov	r5, r1
 800f570:	ec51 0b19 	vmov	r0, r1, d9
 800f574:	f7f1 f860 	bl	8000638 <__aeabi_dmul>
 800f578:	4622      	mov	r2, r4
 800f57a:	462b      	mov	r3, r5
 800f57c:	f7f0 fea6 	bl	80002cc <__adddf3>
 800f580:	460b      	mov	r3, r1
 800f582:	ec41 0b18 	vmov	d8, r0, r1
 800f586:	4602      	mov	r2, r0
 800f588:	4659      	mov	r1, fp
 800f58a:	4650      	mov	r0, sl
 800f58c:	f7f0 fe9e 	bl	80002cc <__adddf3>
 800f590:	4b44      	ldr	r3, [pc, #272]	; (800f6a4 <__kernel_tan+0x39c>)
 800f592:	429f      	cmp	r7, r3
 800f594:	4604      	mov	r4, r0
 800f596:	460d      	mov	r5, r1
 800f598:	f340 8086 	ble.w	800f6a8 <__kernel_tan+0x3a0>
 800f59c:	4630      	mov	r0, r6
 800f59e:	f7f0 ffe1 	bl	8000564 <__aeabi_i2d>
 800f5a2:	4622      	mov	r2, r4
 800f5a4:	4680      	mov	r8, r0
 800f5a6:	4689      	mov	r9, r1
 800f5a8:	462b      	mov	r3, r5
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	f7f1 f843 	bl	8000638 <__aeabi_dmul>
 800f5b2:	4642      	mov	r2, r8
 800f5b4:	4606      	mov	r6, r0
 800f5b6:	460f      	mov	r7, r1
 800f5b8:	464b      	mov	r3, r9
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	4629      	mov	r1, r5
 800f5be:	f7f0 fe85 	bl	80002cc <__adddf3>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	f7f1 f95f 	bl	800088c <__aeabi_ddiv>
 800f5ce:	ec53 2b18 	vmov	r2, r3, d8
 800f5d2:	f7f0 fe79 	bl	80002c8 <__aeabi_dsub>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4650      	mov	r0, sl
 800f5dc:	4659      	mov	r1, fp
 800f5de:	f7f0 fe73 	bl	80002c8 <__aeabi_dsub>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	f7f0 fe71 	bl	80002cc <__adddf3>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	f7f0 fe69 	bl	80002c8 <__aeabi_dsub>
 800f5f6:	9b00      	ldr	r3, [sp, #0]
 800f5f8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f5fc:	f00a 0a02 	and.w	sl, sl, #2
 800f600:	4604      	mov	r4, r0
 800f602:	f1ca 0001 	rsb	r0, sl, #1
 800f606:	460d      	mov	r5, r1
 800f608:	f7f0 ffac 	bl	8000564 <__aeabi_i2d>
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	4620      	mov	r0, r4
 800f612:	4629      	mov	r1, r5
 800f614:	f7f1 f810 	bl	8000638 <__aeabi_dmul>
 800f618:	e69f      	b.n	800f35a <__kernel_tan+0x52>
 800f61a:	bf00      	nop
 800f61c:	f3af 8000 	nop.w
 800f620:	54442d18 	.word	0x54442d18
 800f624:	3fe921fb 	.word	0x3fe921fb
 800f628:	33145c07 	.word	0x33145c07
 800f62c:	3c81a626 	.word	0x3c81a626
 800f630:	74bf7ad4 	.word	0x74bf7ad4
 800f634:	3efb2a70 	.word	0x3efb2a70
 800f638:	32f0a7e9 	.word	0x32f0a7e9
 800f63c:	3f12b80f 	.word	0x3f12b80f
 800f640:	1a8d1068 	.word	0x1a8d1068
 800f644:	3f3026f7 	.word	0x3f3026f7
 800f648:	fee08315 	.word	0xfee08315
 800f64c:	3f57dbc8 	.word	0x3f57dbc8
 800f650:	e96e8493 	.word	0xe96e8493
 800f654:	3f8226e3 	.word	0x3f8226e3
 800f658:	1bb341fe 	.word	0x1bb341fe
 800f65c:	3faba1ba 	.word	0x3faba1ba
 800f660:	db605373 	.word	0xdb605373
 800f664:	bef375cb 	.word	0xbef375cb
 800f668:	a03792a6 	.word	0xa03792a6
 800f66c:	3f147e88 	.word	0x3f147e88
 800f670:	f2f26501 	.word	0xf2f26501
 800f674:	3f4344d8 	.word	0x3f4344d8
 800f678:	c9560328 	.word	0xc9560328
 800f67c:	3f6d6d22 	.word	0x3f6d6d22
 800f680:	8406d637 	.word	0x8406d637
 800f684:	3f9664f4 	.word	0x3f9664f4
 800f688:	1110fe7a 	.word	0x1110fe7a
 800f68c:	3fc11111 	.word	0x3fc11111
 800f690:	55555563 	.word	0x55555563
 800f694:	3fd55555 	.word	0x3fd55555
 800f698:	3e2fffff 	.word	0x3e2fffff
 800f69c:	3ff00000 	.word	0x3ff00000
 800f6a0:	bff00000 	.word	0xbff00000
 800f6a4:	3fe59427 	.word	0x3fe59427
 800f6a8:	2e01      	cmp	r6, #1
 800f6aa:	d02f      	beq.n	800f70c <__kernel_tan+0x404>
 800f6ac:	460f      	mov	r7, r1
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	4689      	mov	r9, r1
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	4917      	ldr	r1, [pc, #92]	; (800f714 <__kernel_tan+0x40c>)
 800f6b8:	f7f1 f8e8 	bl	800088c <__aeabi_ddiv>
 800f6bc:	2600      	movs	r6, #0
 800f6be:	e9cd 0100 	strd	r0, r1, [sp]
 800f6c2:	4652      	mov	r2, sl
 800f6c4:	465b      	mov	r3, fp
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	f7f0 fdfd 	bl	80002c8 <__aeabi_dsub>
 800f6ce:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	ec51 0b18 	vmov	r0, r1, d8
 800f6da:	f7f0 fdf5 	bl	80002c8 <__aeabi_dsub>
 800f6de:	4632      	mov	r2, r6
 800f6e0:	462b      	mov	r3, r5
 800f6e2:	f7f0 ffa9 	bl	8000638 <__aeabi_dmul>
 800f6e6:	46b0      	mov	r8, r6
 800f6e8:	460f      	mov	r7, r1
 800f6ea:	4642      	mov	r2, r8
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	4634      	mov	r4, r6
 800f6f0:	4649      	mov	r1, r9
 800f6f2:	4606      	mov	r6, r0
 800f6f4:	4640      	mov	r0, r8
 800f6f6:	f7f0 ff9f 	bl	8000638 <__aeabi_dmul>
 800f6fa:	4b07      	ldr	r3, [pc, #28]	; (800f718 <__kernel_tan+0x410>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f7f0 fde5 	bl	80002cc <__adddf3>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4630      	mov	r0, r6
 800f708:	4639      	mov	r1, r7
 800f70a:	e665      	b.n	800f3d8 <__kernel_tan+0xd0>
 800f70c:	4682      	mov	sl, r0
 800f70e:	468b      	mov	fp, r1
 800f710:	e625      	b.n	800f35e <__kernel_tan+0x56>
 800f712:	bf00      	nop
 800f714:	bff00000 	.word	0xbff00000
 800f718:	3ff00000 	.word	0x3ff00000
 800f71c:	00000000 	.word	0x00000000

0800f720 <floor>:
 800f720:	ec51 0b10 	vmov	r0, r1, d0
 800f724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f72c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f730:	2e13      	cmp	r6, #19
 800f732:	ee10 5a10 	vmov	r5, s0
 800f736:	ee10 8a10 	vmov	r8, s0
 800f73a:	460c      	mov	r4, r1
 800f73c:	dc32      	bgt.n	800f7a4 <floor+0x84>
 800f73e:	2e00      	cmp	r6, #0
 800f740:	da14      	bge.n	800f76c <floor+0x4c>
 800f742:	a333      	add	r3, pc, #204	; (adr r3, 800f810 <floor+0xf0>)
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	f7f0 fdc0 	bl	80002cc <__adddf3>
 800f74c:	2200      	movs	r2, #0
 800f74e:	2300      	movs	r3, #0
 800f750:	f7f1 fa02 	bl	8000b58 <__aeabi_dcmpgt>
 800f754:	b138      	cbz	r0, 800f766 <floor+0x46>
 800f756:	2c00      	cmp	r4, #0
 800f758:	da57      	bge.n	800f80a <floor+0xea>
 800f75a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f75e:	431d      	orrs	r5, r3
 800f760:	d001      	beq.n	800f766 <floor+0x46>
 800f762:	4c2d      	ldr	r4, [pc, #180]	; (800f818 <floor+0xf8>)
 800f764:	2500      	movs	r5, #0
 800f766:	4621      	mov	r1, r4
 800f768:	4628      	mov	r0, r5
 800f76a:	e025      	b.n	800f7b8 <floor+0x98>
 800f76c:	4f2b      	ldr	r7, [pc, #172]	; (800f81c <floor+0xfc>)
 800f76e:	4137      	asrs	r7, r6
 800f770:	ea01 0307 	and.w	r3, r1, r7
 800f774:	4303      	orrs	r3, r0
 800f776:	d01f      	beq.n	800f7b8 <floor+0x98>
 800f778:	a325      	add	r3, pc, #148	; (adr r3, 800f810 <floor+0xf0>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	f7f0 fda5 	bl	80002cc <__adddf3>
 800f782:	2200      	movs	r2, #0
 800f784:	2300      	movs	r3, #0
 800f786:	f7f1 f9e7 	bl	8000b58 <__aeabi_dcmpgt>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d0eb      	beq.n	800f766 <floor+0x46>
 800f78e:	2c00      	cmp	r4, #0
 800f790:	bfbe      	ittt	lt
 800f792:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f796:	fa43 f606 	asrlt.w	r6, r3, r6
 800f79a:	19a4      	addlt	r4, r4, r6
 800f79c:	ea24 0407 	bic.w	r4, r4, r7
 800f7a0:	2500      	movs	r5, #0
 800f7a2:	e7e0      	b.n	800f766 <floor+0x46>
 800f7a4:	2e33      	cmp	r6, #51	; 0x33
 800f7a6:	dd0b      	ble.n	800f7c0 <floor+0xa0>
 800f7a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f7ac:	d104      	bne.n	800f7b8 <floor+0x98>
 800f7ae:	ee10 2a10 	vmov	r2, s0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	f7f0 fd8a 	bl	80002cc <__adddf3>
 800f7b8:	ec41 0b10 	vmov	d0, r0, r1
 800f7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c8:	fa23 f707 	lsr.w	r7, r3, r7
 800f7cc:	4207      	tst	r7, r0
 800f7ce:	d0f3      	beq.n	800f7b8 <floor+0x98>
 800f7d0:	a30f      	add	r3, pc, #60	; (adr r3, 800f810 <floor+0xf0>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f7f0 fd79 	bl	80002cc <__adddf3>
 800f7da:	2200      	movs	r2, #0
 800f7dc:	2300      	movs	r3, #0
 800f7de:	f7f1 f9bb 	bl	8000b58 <__aeabi_dcmpgt>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d0bf      	beq.n	800f766 <floor+0x46>
 800f7e6:	2c00      	cmp	r4, #0
 800f7e8:	da02      	bge.n	800f7f0 <floor+0xd0>
 800f7ea:	2e14      	cmp	r6, #20
 800f7ec:	d103      	bne.n	800f7f6 <floor+0xd6>
 800f7ee:	3401      	adds	r4, #1
 800f7f0:	ea25 0507 	bic.w	r5, r5, r7
 800f7f4:	e7b7      	b.n	800f766 <floor+0x46>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f7fc:	fa03 f606 	lsl.w	r6, r3, r6
 800f800:	4435      	add	r5, r6
 800f802:	4545      	cmp	r5, r8
 800f804:	bf38      	it	cc
 800f806:	18e4      	addcc	r4, r4, r3
 800f808:	e7f2      	b.n	800f7f0 <floor+0xd0>
 800f80a:	2500      	movs	r5, #0
 800f80c:	462c      	mov	r4, r5
 800f80e:	e7aa      	b.n	800f766 <floor+0x46>
 800f810:	8800759c 	.word	0x8800759c
 800f814:	7e37e43c 	.word	0x7e37e43c
 800f818:	bff00000 	.word	0xbff00000
 800f81c:	000fffff 	.word	0x000fffff

0800f820 <scalbn>:
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	ec55 4b10 	vmov	r4, r5, d0
 800f826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f82a:	4606      	mov	r6, r0
 800f82c:	462b      	mov	r3, r5
 800f82e:	b99a      	cbnz	r2, 800f858 <scalbn+0x38>
 800f830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f834:	4323      	orrs	r3, r4
 800f836:	d036      	beq.n	800f8a6 <scalbn+0x86>
 800f838:	4b39      	ldr	r3, [pc, #228]	; (800f920 <scalbn+0x100>)
 800f83a:	4629      	mov	r1, r5
 800f83c:	ee10 0a10 	vmov	r0, s0
 800f840:	2200      	movs	r2, #0
 800f842:	f7f0 fef9 	bl	8000638 <__aeabi_dmul>
 800f846:	4b37      	ldr	r3, [pc, #220]	; (800f924 <scalbn+0x104>)
 800f848:	429e      	cmp	r6, r3
 800f84a:	4604      	mov	r4, r0
 800f84c:	460d      	mov	r5, r1
 800f84e:	da10      	bge.n	800f872 <scalbn+0x52>
 800f850:	a32b      	add	r3, pc, #172	; (adr r3, 800f900 <scalbn+0xe0>)
 800f852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f856:	e03a      	b.n	800f8ce <scalbn+0xae>
 800f858:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f85c:	428a      	cmp	r2, r1
 800f85e:	d10c      	bne.n	800f87a <scalbn+0x5a>
 800f860:	ee10 2a10 	vmov	r2, s0
 800f864:	4620      	mov	r0, r4
 800f866:	4629      	mov	r1, r5
 800f868:	f7f0 fd30 	bl	80002cc <__adddf3>
 800f86c:	4604      	mov	r4, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	e019      	b.n	800f8a6 <scalbn+0x86>
 800f872:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f876:	460b      	mov	r3, r1
 800f878:	3a36      	subs	r2, #54	; 0x36
 800f87a:	4432      	add	r2, r6
 800f87c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f880:	428a      	cmp	r2, r1
 800f882:	dd08      	ble.n	800f896 <scalbn+0x76>
 800f884:	2d00      	cmp	r5, #0
 800f886:	a120      	add	r1, pc, #128	; (adr r1, 800f908 <scalbn+0xe8>)
 800f888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f88c:	da1c      	bge.n	800f8c8 <scalbn+0xa8>
 800f88e:	a120      	add	r1, pc, #128	; (adr r1, 800f910 <scalbn+0xf0>)
 800f890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f894:	e018      	b.n	800f8c8 <scalbn+0xa8>
 800f896:	2a00      	cmp	r2, #0
 800f898:	dd08      	ble.n	800f8ac <scalbn+0x8c>
 800f89a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f89e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f8a6:	ec45 4b10 	vmov	d0, r4, r5
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}
 800f8ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f8b0:	da19      	bge.n	800f8e6 <scalbn+0xc6>
 800f8b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f8b6:	429e      	cmp	r6, r3
 800f8b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f8bc:	dd0a      	ble.n	800f8d4 <scalbn+0xb4>
 800f8be:	a112      	add	r1, pc, #72	; (adr r1, 800f908 <scalbn+0xe8>)
 800f8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1e2      	bne.n	800f88e <scalbn+0x6e>
 800f8c8:	a30f      	add	r3, pc, #60	; (adr r3, 800f908 <scalbn+0xe8>)
 800f8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ce:	f7f0 feb3 	bl	8000638 <__aeabi_dmul>
 800f8d2:	e7cb      	b.n	800f86c <scalbn+0x4c>
 800f8d4:	a10a      	add	r1, pc, #40	; (adr r1, 800f900 <scalbn+0xe0>)
 800f8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d0b8      	beq.n	800f850 <scalbn+0x30>
 800f8de:	a10e      	add	r1, pc, #56	; (adr r1, 800f918 <scalbn+0xf8>)
 800f8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8e4:	e7b4      	b.n	800f850 <scalbn+0x30>
 800f8e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f8ea:	3236      	adds	r2, #54	; 0x36
 800f8ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	4b0c      	ldr	r3, [pc, #48]	; (800f928 <scalbn+0x108>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	e7e8      	b.n	800f8ce <scalbn+0xae>
 800f8fc:	f3af 8000 	nop.w
 800f900:	c2f8f359 	.word	0xc2f8f359
 800f904:	01a56e1f 	.word	0x01a56e1f
 800f908:	8800759c 	.word	0x8800759c
 800f90c:	7e37e43c 	.word	0x7e37e43c
 800f910:	8800759c 	.word	0x8800759c
 800f914:	fe37e43c 	.word	0xfe37e43c
 800f918:	c2f8f359 	.word	0xc2f8f359
 800f91c:	81a56e1f 	.word	0x81a56e1f
 800f920:	43500000 	.word	0x43500000
 800f924:	ffff3cb0 	.word	0xffff3cb0
 800f928:	3c900000 	.word	0x3c900000

0800f92c <_init>:
 800f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92e:	bf00      	nop
 800f930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f932:	bc08      	pop	{r3}
 800f934:	469e      	mov	lr, r3
 800f936:	4770      	bx	lr

0800f938 <_fini>:
 800f938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f93a:	bf00      	nop
 800f93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f93e:	bc08      	pop	{r3}
 800f940:	469e      	mov	lr, r3
 800f942:	4770      	bx	lr
