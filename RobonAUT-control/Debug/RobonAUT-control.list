
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e67c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800e850  0800e850  0001e850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efa8  0800efa8  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800efa8  0800efa8  0001efa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efb0  0800efb0  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efb0  0800efb0  0001efb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efb4  0800efb4  0001efb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800efb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  20000258  0800f210  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  0800f210  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180e5  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380f  00000000  00000000  0003836d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026427  00000000  00000000  0003dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019850  00000000  00000000  000643d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1682  00000000  00000000  0007dc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f2a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  0015f2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000258 	.word	0x20000258
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e834 	.word	0x0800e834

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000025c 	.word	0x2000025c
 800020c:	0800e834 	.word	0x0800e834

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f9e:	4904      	ldr	r1, [pc, #16]	; (8000fb0 <__NVIC_SystemReset+0x24>)
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_SystemReset+0x28>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <__NVIC_SystemReset+0x20>
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0004 	.word	0x05fa0004

08000fb8 <F4_Basic_Init>:
uint8_t mode;
float v_ref; //mm/s
uint8_t leaveLineEnabled;

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder,TIM_HandleTypeDef *htim_delay,TIM_HandleTypeDef *htim_rand)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	484f      	ldr	r0, [pc, #316]	; (800110c <F4_Basic_Init+0x154>)
 8000fce:	f005 fcad 	bl	800692c <HAL_GPIO_WritePin>
	LED_B(0);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	484c      	ldr	r0, [pc, #304]	; (800110c <F4_Basic_Init+0x154>)
 8000fda:	f005 fca7 	bl	800692c <HAL_GPIO_WritePin>
	LED_G(0);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	484a      	ldr	r0, [pc, #296]	; (800110c <F4_Basic_Init+0x154>)
 8000fe4:	f005 fca2 	bl	800692c <HAL_GPIO_WritePin>
	LED_Y(0);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fee:	4847      	ldr	r0, [pc, #284]	; (800110c <F4_Basic_Init+0x154>)
 8000ff0:	f005 fc9c 	bl	800692c <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4845      	ldr	r0, [pc, #276]	; (8001110 <F4_Basic_Init+0x158>)
 8000ffa:	f005 fc97 	bl	800692c <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4944      	ldr	r1, [pc, #272]	; (8001114 <F4_Basic_Init+0x15c>)
 8001004:	4618      	mov	r0, r3
 8001006:	f009 ff4d 	bl	800aea4 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8fe 	bl	8000210 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	f107 0110 	add.w	r1, r7, #16
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f008 f9d7 	bl	80093d2 <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 8001024:	4b3c      	ldr	r3, [pc, #240]	; (8001118 <F4_Basic_Init+0x160>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 800102a:	4b3c      	ldr	r3, [pc, #240]	; (800111c <F4_Basic_Init+0x164>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
	leaveLineEnabled=0;
 8001030:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <F4_Basic_Init+0x168>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

	swState[0] = SW1;
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4835      	ldr	r0, [pc, #212]	; (8001110 <F4_Basic_Init+0x158>)
 800103c:	f005 fc5e 	bl	80068fc <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <F4_Basic_Init+0x16c>)
 8001046:	701a      	strb	r2, [r3, #0]
	swState[1] = SW2;
 8001048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104c:	482f      	ldr	r0, [pc, #188]	; (800110c <F4_Basic_Init+0x154>)
 800104e:	f005 fc55 	bl	80068fc <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <F4_Basic_Init+0x16c>)
 8001058:	705a      	strb	r2, [r3, #1]
	if(SW2)LED_R(1);
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	482b      	ldr	r0, [pc, #172]	; (800110c <F4_Basic_Init+0x154>)
 8001060:	f005 fc4c 	bl	80068fc <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <F4_Basic_Init+0xc0>
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4826      	ldr	r0, [pc, #152]	; (800110c <F4_Basic_Init+0x154>)
 8001072:	f005 fc5b 	bl	800692c <HAL_GPIO_WritePin>
 8001076:	e005      	b.n	8001084 <F4_Basic_Init+0xcc>
	else LED_R(0);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4823      	ldr	r0, [pc, #140]	; (800110c <F4_Basic_Init+0x154>)
 8001080:	f005 fc54 	bl	800692c <HAL_GPIO_WritePin>

	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 8001084:	2200      	movs	r2, #0
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <F4_Basic_Init+0x170>)
 8001088:	4611      	mov	r1, r2
 800108a:	7099      	strb	r1, [r3, #2]
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <F4_Basic_Init+0x170>)
 800108e:	4611      	mov	r1, r2
 8001090:	7059      	strb	r1, [r3, #1]
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <F4_Basic_Init+0x170>)
 8001094:	701a      	strb	r2, [r3, #0]
	fromPC[0]=150;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <F4_Basic_Init+0x174>)
 8001098:	2296      	movs	r2, #150	; 0x96
 800109a:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <F4_Basic_Init+0x174>)
 800109e:	2296      	movs	r2, #150	; 0x96
 80010a0:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <F4_Basic_Init+0x178>)
 80010a4:	2252      	movs	r2, #82	; 0x52
 80010a6:	701a      	strb	r2, [r3, #0]
	v_ref = 1000;
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <F4_Basic_Init+0x17c>)
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <F4_Basic_Init+0x180>)
 80010ac:	601a      	str	r2, [r3, #0]
	v=0;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <F4_Basic_Init+0x184>)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=SERVO_REAR_CCR_MIDDLE;
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <F4_Basic_Init+0x188>)
 80010b8:	f44f 7212 	mov.w	r2, #584	; 0x248
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE;
 80010be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c2:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	//TIM3->CCR1=499; //0 kitöltési tényező a motorra
	//TIM3->CCR2=499;
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	f006 fb03 	bl	80076d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_delay);//heart beat timer tick start
 80010ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010d0:	f006 fb00 	bl	80076d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(htim_rand);//heart beat timer tick start
 80010d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010d6:	f006 fafd 	bl	80076d4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 80010da:	2100      	movs	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f006 fbbb 	bl	8007858 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 80010e2:	2104      	movs	r1, #4
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f006 fbb7 	bl	8007858 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 80010ea:	2100      	movs	r1, #0
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f006 fbb3 	bl	8007858 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 80010f2:	210c      	movs	r1, #12
 80010f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010f6:	f006 fbaf 	bl	8007858 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 80010fa:	213c      	movs	r1, #60	; 0x3c
 80010fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010fe:	f006 ff1d 	bl	8007f3c <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	//HAL_UART_Receive_IT(huart_debugg, fromPC, 2);
}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400
 8001110:	40020000 	.word	0x40020000
 8001114:	0800e850 	.word	0x0800e850
 8001118:	20000af4 	.word	0x20000af4
 800111c:	20000af5 	.word	0x20000af5
 8001120:	20000284 	.word	0x20000284
 8001124:	20000274 	.word	0x20000274
 8001128:	20000278 	.word	0x20000278
 800112c:	2000027c 	.word	0x2000027c
 8001130:	2000027e 	.word	0x2000027e
 8001134:	20000280 	.word	0x20000280
 8001138:	447a0000 	.word	0x447a0000
 800113c:	20000614 	.word	0x20000614
 8001140:	40010000 	.word	0x40010000

08001144 <HDI_Read_Task>:


void HDI_Read_Task(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
	static uint32_t hdi_read_task_tick=0;

	if(hdi_read_task_tick>tick) return;
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HDI_Read_Task+0xb4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	d349      	bcc.n	80011f0 <HDI_Read_Task+0xac>
	hdi_read_task_tick = tick + period;
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <HDI_Read_Task+0xb4>)
 8001164:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 8001166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116a:	4824      	ldr	r0, [pc, #144]	; (80011fc <HDI_Read_Task+0xb8>)
 800116c:	f005 fbc6 	bl	80068fc <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HDI_Read_Task+0xbc>)
 8001176:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4821      	ldr	r0, [pc, #132]	; (8001204 <HDI_Read_Task+0xc0>)
 800117e:	f005 fbbd 	bl	80068fc <HAL_GPIO_ReadPin>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <HDI_Read_Task+0xbc>)
 8001188:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HDI_Read_Task+0xbc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <HDI_Read_Task+0x60>
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HDI_Read_Task+0xc4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b3f      	cmp	r3, #63	; 0x3f
 8001198:	d104      	bne.n	80011a4 <HDI_Read_Task+0x60>
 800119a:	2200      	movs	r2, #0
 800119c:	2102      	movs	r1, #2
 800119e:	4819      	ldr	r0, [pc, #100]	; (8001204 <HDI_Read_Task+0xc0>)
 80011a0:	f005 fbc4 	bl	800692c <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HDI_Read_Task+0xbc>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d108      	bne.n	80011be <HDI_Read_Task+0x7a>
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HDI_Read_Task+0xc4>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b3f      	cmp	r3, #63	; 0x3f
 80011b2:	d104      	bne.n	80011be <HDI_Read_Task+0x7a>
 80011b4:	2201      	movs	r2, #1
 80011b6:	2102      	movs	r1, #2
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <HDI_Read_Task+0xc0>)
 80011ba:	f005 fbb7 	bl	800692c <HAL_GPIO_WritePin>
	if(swState[1]) LED_R(1);
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HDI_Read_Task+0xbc>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HDI_Read_Task+0x8e>
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <HDI_Read_Task+0xc0>)
 80011ce:	f005 fbad 	bl	800692c <HAL_GPIO_WritePin>
	if(!swState[1]) LED_R(0);
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HDI_Read_Task+0xbc>)
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <HDI_Read_Task+0xa2>
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <HDI_Read_Task+0xc0>)
 80011e2:	f005 fba3 	bl	800692c <HAL_GPIO_WritePin>

	if(bFlag[0]);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HDI_Read_Task+0xc8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
	if(bFlag[1]);
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <HDI_Read_Task+0xc8>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	e000      	b.n	80011f2 <HDI_Read_Task+0xae>
	if(hdi_read_task_tick>tick) return;
 80011f0:	bf00      	nop

}
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000288 	.word	0x20000288
 80011fc:	40020000 	.word	0x40020000
 8001200:	20000274 	.word	0x20000274
 8001204:	40020400 	.word	0x40020400
 8001208:	2000027e 	.word	0x2000027e
 800120c:	20000278 	.word	0x20000278

08001210 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 8001218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <Uart_Receive_From_PC_ISR+0x3c>)
 800121e:	f005 fb9e 	bl	800695e <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 2);
 8001222:	2202      	movs	r2, #2
 8001224:	490a      	ldr	r1, [pc, #40]	; (8001250 <Uart_Receive_From_PC_ISR+0x40>)
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f008 fa07 	bl	800963a <HAL_UART_Receive_IT>
	TIM2->CCR1 = 4*fromPC[0];
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <Uart_Receive_From_PC_ISR+0x40>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	009a      	lsls	r2, r3, #2
 8001232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR4 = 4*fromPC[1];
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <Uart_Receive_From_PC_ISR+0x40>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	009a      	lsls	r2, r3, #2
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <Uart_Receive_From_PC_ISR+0x44>)
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020400 	.word	0x40020400
 8001250:	2000027c 	.word	0x2000027c
 8001254:	40010000 	.word	0x40010000

08001258 <B1_ISR>:

void B1_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
		HAL_FLASH_Unlock();
 8001262:	f004 fffd 	bl	8006260 <HAL_FLASH_Unlock>
		Delay(50);
 8001266:	2032      	movs	r0, #50	; 0x32
 8001268:	f002 fe72 	bl	8003f50 <Delay>
		FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);
 800126c:	2102      	movs	r1, #2
 800126e:	2006      	movs	r0, #6
 8001270:	f005 f968 	bl	8006544 <FLASH_Erase_Sector>
		Delay(50);
 8001274:	2032      	movs	r0, #50	; 0x32
 8001276:	f002 fe6b 	bl	8003f50 <Delay>
		HAL_FLASH_Lock();
 800127a:	f005 f813 	bl	80062a4 <HAL_FLASH_Lock>

		int i;
		for(i=0;i<8;i++)
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e00a      	b.n	800129a <B1_ISR+0x42>
		{
			LED_R_TOGGLE;
 8001284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <B1_ISR+0xd4>)
 800128a:	f005 fb68 	bl	800695e <HAL_GPIO_TogglePin>
			Delay(150);
 800128e:	2096      	movs	r0, #150	; 0x96
 8001290:	f002 fe5e 	bl	8003f50 <Delay>
		for(i=0;i<8;i++)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3301      	adds	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b07      	cmp	r3, #7
 800129e:	ddf1      	ble.n	8001284 <B1_ISR+0x2c>
		}
		LED_R(0);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	4821      	ldr	r0, [pc, #132]	; (800132c <B1_ISR+0xd4>)
 80012a8:	f005 fb40 	bl	800692c <HAL_GPIO_WritePin>

		HAL_FLASH_Unlock();
 80012ac:	f004 ffd8 	bl	8006260 <HAL_FLASH_Unlock>
		Delay(50);
 80012b0:	2032      	movs	r0, #50	; 0x32
 80012b2:	f002 fe4d 	bl	8003f50 <Delay>
		for(i=0;i<22;i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e01a      	b.n	80012f2 <B1_ISR+0x9a>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+i, Nodes[i].worth);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80012c2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80012c6:	4618      	mov	r0, r3
 80012c8:	4919      	ldr	r1, [pc, #100]	; (8001330 <B1_ISR+0xd8>)
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	3304      	adds	r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	17da      	asrs	r2, r3, #31
 80012dc:	4698      	mov	r8, r3
 80012de:	4691      	mov	r9, r2
 80012e0:	4642      	mov	r2, r8
 80012e2:	464b      	mov	r3, r9
 80012e4:	4601      	mov	r1, r0
 80012e6:	2000      	movs	r0, #0
 80012e8:	f004 ff66 	bl	80061b8 <HAL_FLASH_Program>
		for(i=0;i<22;i++)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b15      	cmp	r3, #21
 80012f6:	dde1      	ble.n	80012bc <B1_ISR+0x64>
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_NODEWORTH+22, collectedPoints);
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <B1_ISR+0xdc>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2200      	movs	r2, #0
 8001300:	461c      	mov	r4, r3
 8001302:	4615      	mov	r5, r2
 8001304:	4622      	mov	r2, r4
 8001306:	462b      	mov	r3, r5
 8001308:	490b      	ldr	r1, [pc, #44]	; (8001338 <B1_ISR+0xe0>)
 800130a:	2000      	movs	r0, #0
 800130c:	f004 ff54 	bl	80061b8 <HAL_FLASH_Program>
		Delay(50);
 8001310:	2032      	movs	r0, #50	; 0x32
 8001312:	f002 fe1d 	bl	8003f50 <Delay>
		HAL_FLASH_Lock();
 8001316:	f004 ffc5 	bl	80062a4 <HAL_FLASH_Lock>
		HAL_UART_Transmit(huart_debugg,(uint8_t*) "\n\rBackup save!\n\r", 16, 10);
 800131a:	230a      	movs	r3, #10
 800131c:	2210      	movs	r2, #16
 800131e:	4907      	ldr	r1, [pc, #28]	; (800133c <B1_ISR+0xe4>)
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f008 f856 	bl	80093d2 <HAL_UART_Transmit>
		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 8001326:	f7ff fe31 	bl	8000f8c <__NVIC_SystemReset>
 800132a:	bf00      	nop
 800132c:	40020400 	.word	0x40020400
 8001330:	200002a0 	.word	0x200002a0
 8001334:	2000028f 	.word	0x2000028f
 8001338:	08040016 	.word	0x08040016
 800133c:	0800e874 	.word	0x0800e874

08001340 <B_NUCLEO_ISR>:
}

void B_NUCLEO_ISR(UART_HandleTypeDef *huart_debugg)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	//Milyen módban voltunk eddig?
	uint8_t tmp= *(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR;
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <B_NUCLEO_ISR+0x110>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	72fb      	strb	r3, [r7, #11]
	if(tmp==SKILL || tmp==FAST)mode=tmp;
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	2b52      	cmp	r3, #82	; 0x52
 8001352:	d002      	beq.n	800135a <B_NUCLEO_ISR+0x1a>
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	2b3f      	cmp	r3, #63	; 0x3f
 8001358:	d103      	bne.n	8001362 <B_NUCLEO_ISR+0x22>
 800135a:	4a3e      	ldr	r2, [pc, #248]	; (8001454 <B_NUCLEO_ISR+0x114>)
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	7013      	strb	r3, [r2, #0]
 8001360:	e002      	b.n	8001368 <B_NUCLEO_ISR+0x28>
	else mode=SKILL;
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <B_NUCLEO_ISR+0x114>)
 8001364:	2252      	movs	r2, #82	; 0x52
 8001366:	701a      	strb	r2, [r3, #0]

	//section 7 törlése, hogy újraírhassuk a módot jelző bytot
	HAL_FLASH_Unlock();
 8001368:	f004 ff7a 	bl	8006260 <HAL_FLASH_Unlock>
	Delay(50);
 800136c:	2032      	movs	r0, #50	; 0x32
 800136e:	f002 fdef 	bl	8003f50 <Delay>
	FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001372:	2102      	movs	r1, #2
 8001374:	2007      	movs	r0, #7
 8001376:	f005 f8e5 	bl	8006544 <FLASH_Erase_Sector>
	Delay(50);
 800137a:	2032      	movs	r0, #50	; 0x32
 800137c:	f002 fde8 	bl	8003f50 <Delay>
	HAL_FLASH_Lock();
 8001380:	f004 ff90 	bl	80062a4 <HAL_FLASH_Lock>

	LED_NUCLEO(0);
 8001384:	2200      	movs	r2, #0
 8001386:	2120      	movs	r1, #32
 8001388:	4833      	ldr	r0, [pc, #204]	; (8001458 <B_NUCLEO_ISR+0x118>)
 800138a:	f005 facf 	bl	800692c <HAL_GPIO_WritePin>
	LED_Y(0);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001394:	4831      	ldr	r0, [pc, #196]	; (800145c <B_NUCLEO_ISR+0x11c>)
 8001396:	f005 fac9 	bl	800692c <HAL_GPIO_WritePin>
	LED_G(0);
 800139a:	2201      	movs	r2, #1
 800139c:	2102      	movs	r1, #2
 800139e:	482f      	ldr	r0, [pc, #188]	; (800145c <B_NUCLEO_ISR+0x11c>)
 80013a0:	f005 fac4 	bl	800692c <HAL_GPIO_WritePin>
	LED_B(0);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013aa:	482c      	ldr	r0, [pc, #176]	; (800145c <B_NUCLEO_ISR+0x11c>)
 80013ac:	f005 fabe 	bl	800692c <HAL_GPIO_WritePin>
	LED_R(0);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	4829      	ldr	r0, [pc, #164]	; (800145c <B_NUCLEO_ISR+0x11c>)
 80013b8:	f005 fab8 	bl	800692c <HAL_GPIO_WritePin>
	int i;
	for(i=0;i<8;i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e01c      	b.n	80013fc <B_NUCLEO_ISR+0xbc>
	{
		LED_NUCLEO_TOGGLE;
 80013c2:	2120      	movs	r1, #32
 80013c4:	4824      	ldr	r0, [pc, #144]	; (8001458 <B_NUCLEO_ISR+0x118>)
 80013c6:	f005 faca 	bl	800695e <HAL_GPIO_TogglePin>
		LED_Y_TOGGLE;
 80013ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ce:	4823      	ldr	r0, [pc, #140]	; (800145c <B_NUCLEO_ISR+0x11c>)
 80013d0:	f005 fac5 	bl	800695e <HAL_GPIO_TogglePin>
		LED_G_TOGGLE;
 80013d4:	2102      	movs	r1, #2
 80013d6:	4821      	ldr	r0, [pc, #132]	; (800145c <B_NUCLEO_ISR+0x11c>)
 80013d8:	f005 fac1 	bl	800695e <HAL_GPIO_TogglePin>
		LED_B_TOGGLE;
 80013dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e0:	481e      	ldr	r0, [pc, #120]	; (800145c <B_NUCLEO_ISR+0x11c>)
 80013e2:	f005 fabc 	bl	800695e <HAL_GPIO_TogglePin>
		LED_R_TOGGLE;
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	481c      	ldr	r0, [pc, #112]	; (800145c <B_NUCLEO_ISR+0x11c>)
 80013ec:	f005 fab7 	bl	800695e <HAL_GPIO_TogglePin>
		Delay(150);
 80013f0:	2096      	movs	r0, #150	; 0x96
 80013f2:	f002 fdad 	bl	8003f50 <Delay>
	for(i=0;i<8;i++)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	dddf      	ble.n	80013c2 <B_NUCLEO_ISR+0x82>
	}

	//Állítsuk át a módot
	HAL_FLASH_Unlock();
 8001402:	f004 ff2d 	bl	8006260 <HAL_FLASH_Unlock>
	Delay(50);
 8001406:	2032      	movs	r0, #50	; 0x32
 8001408:	f002 fda2 	bl	8003f50 <Delay>
	if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, FAST); //ha eddig skill mód volt akor msot gyors lesz
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <B_NUCLEO_ISR+0x114>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b52      	cmp	r3, #82	; 0x52
 8001412:	d108      	bne.n	8001426 <B_NUCLEO_ISR+0xe6>
 8001414:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <B_NUCLEO_ISR+0x110>)
 800141e:	2000      	movs	r0, #0
 8001420:	f004 feca 	bl	80061b8 <HAL_FLASH_Program>
 8001424:	e007      	b.n	8001436 <B_NUCLEO_ISR+0xf6>
	else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig gyors mód vagy memóriaszemét volt akkor msot skil lesz
 8001426:	f04f 0252 	mov.w	r2, #82	; 0x52
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <B_NUCLEO_ISR+0x110>)
 8001430:	2000      	movs	r0, #0
 8001432:	f004 fec1 	bl	80061b8 <HAL_FLASH_Program>
	Delay(50);
 8001436:	2032      	movs	r0, #50	; 0x32
 8001438:	f002 fd8a 	bl	8003f50 <Delay>
	HAL_FLASH_Lock();
 800143c:	f004 ff32 	bl	80062a4 <HAL_FLASH_Lock>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\rMode change!\n\r", 16, 10);
 8001440:	230a      	movs	r3, #10
 8001442:	2210      	movs	r2, #16
 8001444:	4906      	ldr	r1, [pc, #24]	; (8001460 <B_NUCLEO_ISR+0x120>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f007 ffc3 	bl	80093d2 <HAL_UART_Transmit>
	NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 800144c:	f7ff fd9e 	bl	8000f8c <__NVIC_SystemReset>
 8001450:	08060000 	.word	0x08060000
 8001454:	2000027e 	.word	0x2000027e
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	0800e888 	.word	0x0800e888

08001464 <Mode_Selector>:
		}
	}
}

void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint8_t tmp=*(__IO uint8_t *) FLASH_ADDRESS_MODESELECTOR; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <Mode_Selector+0x188>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if(tmp==SKILL || tmp==FAST) mode = tmp;
 8001476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800147a:	2b52      	cmp	r3, #82	; 0x52
 800147c:	d003      	beq.n	8001486 <Mode_Selector+0x22>
 800147e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001482:	2b3f      	cmp	r3, #63	; 0x3f
 8001484:	d104      	bne.n	8001490 <Mode_Selector+0x2c>
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <Mode_Selector+0x18c>)
 8001488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800148c:	7013      	strb	r3, [r2, #0]
 800148e:	e022      	b.n	80014d6 <Mode_Selector+0x72>
	else
	{
		HAL_FLASH_Unlock();
 8001490:	f004 fee6 	bl	8006260 <HAL_FLASH_Unlock>
		HAL_Delay(50);
 8001494:	2032      	movs	r0, #50	; 0x32
 8001496:	f003 fbaf 	bl	8004bf8 <HAL_Delay>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 800149a:	2102      	movs	r1, #2
 800149c:	2007      	movs	r0, #7
 800149e:	f005 f851 	bl	8006544 <FLASH_Erase_Sector>
		HAL_Delay(50);
 80014a2:	2032      	movs	r0, #50	; 0x32
 80014a4:	f003 fba8 	bl	8004bf8 <HAL_Delay>
		HAL_FLASH_Lock();
 80014a8:	f004 fefc 	bl	80062a4 <HAL_FLASH_Lock>
		HAL_FLASH_Unlock();
 80014ac:	f004 fed8 	bl	8006260 <HAL_FLASH_Unlock>
		HAL_Delay(50);
 80014b0:	2032      	movs	r0, #50	; 0x32
 80014b2:	f003 fba1 	bl	8004bf8 <HAL_Delay>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_MODESELECTOR, SKILL); //ha eddig skill mód volt akor msot gyors lesz
 80014b6:	f04f 0252 	mov.w	r2, #82	; 0x52
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	494b      	ldr	r1, [pc, #300]	; (80015ec <Mode_Selector+0x188>)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f004 fe79 	bl	80061b8 <HAL_FLASH_Program>
		HAL_Delay(50);
 80014c6:	2032      	movs	r0, #50	; 0x32
 80014c8:	f003 fb96 	bl	8004bf8 <HAL_Delay>
		HAL_FLASH_Lock();
 80014cc:	f004 feea 	bl	80062a4 <HAL_FLASH_Lock>

		mode=SKILL;
 80014d0:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <Mode_Selector+0x18c>)
 80014d2:	2252      	movs	r2, #82	; 0x52
 80014d4:	701a      	strb	r2, [r3, #0]
	}

	if(mode==SKILL)
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <Mode_Selector+0x18c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b52      	cmp	r3, #82	; 0x52
 80014dc:	d135      	bne.n	800154a <Mode_Selector+0xe6>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 80014de:	2352      	movs	r3, #82	; 0x52
 80014e0:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80014e2:	f107 010c 	add.w	r1, r7, #12
 80014e6:	230a      	movs	r3, #10
 80014e8:	2201      	movs	r2, #1
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f007 ff71 	bl	80093d2 <HAL_UART_Transmit>
		HAL_Delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f003 fb81 	bl	8004bf8 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 80014f6:	f107 010c 	add.w	r1, r7, #12
 80014fa:	230a      	movs	r3, #10
 80014fc:	2201      	movs	r2, #1
 80014fe:	6838      	ldr	r0, [r7, #0]
 8001500:	f007 ff67 	bl	80093d2 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f003 fb77 	bl	8004bf8 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800150a:	f107 010c 	add.w	r1, r7, #12
 800150e:	230a      	movs	r3, #10
 8001510:	2201      	movs	r2, #1
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f007 ff5d 	bl	80093d2 <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <Mode_Selector+0x190>)
 800151e:	4618      	mov	r0, r3
 8001520:	f009 fcc0 	bl	800aea4 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fe71 	bl	8000210 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	f107 010c 	add.w	r1, r7, #12
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f007 ff4a 	bl	80093d2 <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 800153e:	2201      	movs	r2, #1
 8001540:	2120      	movs	r1, #32
 8001542:	482d      	ldr	r0, [pc, #180]	; (80015f8 <Mode_Selector+0x194>)
 8001544:	f005 f9f2 	bl	800692c <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 8001548:	e04c      	b.n	80015e4 <Mode_Selector+0x180>
	else if(mode==FAST)
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <Mode_Selector+0x18c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b3f      	cmp	r3, #63	; 0x3f
 8001550:	d135      	bne.n	80015be <Mode_Selector+0x15a>
		buffer[0] = CMD_MODE_FAST;
 8001552:	233f      	movs	r3, #63	; 0x3f
 8001554:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001556:	f107 010c 	add.w	r1, r7, #12
 800155a:	230a      	movs	r3, #10
 800155c:	2201      	movs	r2, #1
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f007 ff37 	bl	80093d2 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f003 fb47 	bl	8004bf8 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800156a:	f107 010c 	add.w	r1, r7, #12
 800156e:	230a      	movs	r3, #10
 8001570:	2201      	movs	r2, #1
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f007 ff2d 	bl	80093d2 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001578:	200a      	movs	r0, #10
 800157a:	f003 fb3d 	bl	8004bf8 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800157e:	f107 010c 	add.w	r1, r7, #12
 8001582:	230a      	movs	r3, #10
 8001584:	2201      	movs	r2, #1
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f007 ff23 	bl	80093d2 <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	491a      	ldr	r1, [pc, #104]	; (80015fc <Mode_Selector+0x198>)
 8001592:	4618      	mov	r0, r3
 8001594:	f009 fc86 	bl	800aea4 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe37 	bl	8000210 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f107 010c 	add.w	r1, r7, #12
 80015aa:	2364      	movs	r3, #100	; 0x64
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f007 ff10 	bl	80093d2 <HAL_UART_Transmit>
		LED_NUCLEO(0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2120      	movs	r1, #32
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <Mode_Selector+0x194>)
 80015b8:	f005 f9b8 	bl	800692c <HAL_GPIO_WritePin>
}
 80015bc:	e012      	b.n	80015e4 <Mode_Selector+0x180>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	490f      	ldr	r1, [pc, #60]	; (8001600 <Mode_Selector+0x19c>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f009 fc6d 	bl	800aea4 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fe1e 	bl	8000210 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f107 010c 	add.w	r1, r7, #12
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f007 fef7 	bl	80093d2 <HAL_UART_Transmit>
}
 80015e4:	bf00      	nop
 80015e6:	3738      	adds	r7, #56	; 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	08060000 	.word	0x08060000
 80015f0:	2000027e 	.word	0x2000027e
 80015f4:	0800e90c 	.word	0x0800e90c
 80015f8:	40020000 	.word	0x40020000
 80015fc:	0800e91c 	.word	0x0800e91c
 8001600:	0800e92c 	.word	0x0800e92c

08001604 <Uart_Receive_Thunderboard_ISR>:
	}
	HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
	HAL_UART_Transmit(huart_debugg, (uint8_t*)"START!\n\r",8, 3);
}
void Uart_Receive_Thunderboard_ISR(UART_HandleTypeDef *huart_TB, UART_HandleTypeDef *huart_debugg)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	static uint8_t sp[]={0};//slip protection
	static uint8_t cnt=0;
	if(tb_msg[0]>='A' && tb_msg[0]<='Z' && tb_msg[5]>='0' && tb_msg[5]<='9')
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b40      	cmp	r3, #64	; 0x40
 8001614:	d93d      	bls.n	8001692 <Uart_Receive_Thunderboard_ISR+0x8e>
 8001616:	4b35      	ldr	r3, [pc, #212]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b5a      	cmp	r3, #90	; 0x5a
 800161c:	d839      	bhi.n	8001692 <Uart_Receive_Thunderboard_ISR+0x8e>
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001620:	795b      	ldrb	r3, [r3, #5]
 8001622:	2b2f      	cmp	r3, #47	; 0x2f
 8001624:	d935      	bls.n	8001692 <Uart_Receive_Thunderboard_ISR+0x8e>
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001628:	795b      	ldrb	r3, [r3, #5]
 800162a:	2b39      	cmp	r3, #57	; 0x39
 800162c:	d831      	bhi.n	8001692 <Uart_Receive_Thunderboard_ISR+0x8e>
	{
		piratePos[0]=tb_msg[0];	piratePos[1]=tb_msg[1];	piratePos[2]=tb_msg[2];
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <Uart_Receive_Thunderboard_ISR+0xec>)
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001638:	785a      	ldrb	r2, [r3, #1]
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <Uart_Receive_Thunderboard_ISR+0xec>)
 800163c:	705a      	strb	r2, [r3, #1]
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001640:	789a      	ldrb	r2, [r3, #2]
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <Uart_Receive_Thunderboard_ISR+0xec>)
 8001644:	709a      	strb	r2, [r3, #2]
		piratePos[3]=100*(tb_msg[3]-0x30) + 10*(tb_msg[4]-0x30) + (tb_msg[5]-0x30);
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001648:	78db      	ldrb	r3, [r3, #3]
 800164a:	461a      	mov	r2, r3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	0091      	lsls	r1, r2, #2
 8001654:	461a      	mov	r2, r3
 8001656:	460b      	mov	r3, r1
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	4619      	mov	r1, r3
 8001664:	0089      	lsls	r1, r1, #2
 8001666:	440b      	add	r3, r1
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4413      	add	r3, r2
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 8001672:	795b      	ldrb	r3, [r3, #5]
 8001674:	4413      	add	r3, r2
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3330      	adds	r3, #48	; 0x30
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <Uart_Receive_Thunderboard_ISR+0xec>)
 800167e:	70da      	strb	r2, [r3, #3]
		thunderboardFlag=1;
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <Uart_Receive_Thunderboard_ISR+0xf0>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 8001686:	2206      	movs	r2, #6
 8001688:	4918      	ldr	r1, [pc, #96]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f007 ffd5 	bl	800963a <HAL_UART_Receive_IT>
#ifdef TB_DEBUGG
		HAL_UART_Transmit(huart_debugg, tb_msg, 6, 2);
		HAL_UART_Transmit(huart_debugg, (uint8_t*)"\n\r", 2, 2);
#endif
		return;
 8001690:	e029      	b.n	80016e6 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	//SLIP PROTECTION
	if(sp[0]>='0' && sp[0]<='9')cnt++;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b2f      	cmp	r3, #47	; 0x2f
 8001698:	d90a      	bls.n	80016b0 <Uart_Receive_Thunderboard_ISR+0xac>
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b39      	cmp	r3, #57	; 0x39
 80016a0:	d806      	bhi.n	80016b0 <Uart_Receive_Thunderboard_ISR+0xac>
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <Uart_Receive_Thunderboard_ISR+0xf8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <Uart_Receive_Thunderboard_ISR+0xf8>)
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e002      	b.n	80016b6 <Uart_Receive_Thunderboard_ISR+0xb2>
	else cnt=0;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <Uart_Receive_Thunderboard_ISR+0xf8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]

	if(cnt<3) //3 darab ASCI számnak össze kell gyűlnie egymás után
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <Uart_Receive_Thunderboard_ISR+0xf8>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d805      	bhi.n	80016ca <Uart_Receive_Thunderboard_ISR+0xc6>
	{
		HAL_UART_Receive_IT(huart_TB, sp, 1);//amig ez nincs meg addig cask egyesével olvasunk
 80016be:	2201      	movs	r2, #1
 80016c0:	490d      	ldr	r1, [pc, #52]	; (80016f8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f007 ffb9 	bl	800963a <HAL_UART_Receive_IT>
 80016c8:	e00d      	b.n	80016e6 <Uart_Receive_Thunderboard_ISR+0xe2>
	}
	else//ha megvan megint 6-ossával olvasunk
	{
		sp[0]=0;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <Uart_Receive_Thunderboard_ISR+0xf4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
		cnt=0;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <Uart_Receive_Thunderboard_ISR+0xf8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart_TB, tb_msg, 6);
 80016d6:	2206      	movs	r2, #6
 80016d8:	4904      	ldr	r1, [pc, #16]	; (80016ec <Uart_Receive_Thunderboard_ISR+0xe8>)
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f007 ffad 	bl	800963a <HAL_UART_Receive_IT>
		thunderboardFlag=1;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <Uart_Receive_Thunderboard_ISR+0xf0>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
	}
}
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000294 	.word	0x20000294
 80016f0:	2000029c 	.word	0x2000029c
 80016f4:	20000292 	.word	0x20000292
 80016f8:	20000610 	.word	0x20000610
 80016fc:	20000611 	.word	0x20000611

08001700 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b090      	sub	sp, #64	; 0x40
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	; 0x38
 8001714:	e016      	b.n	8001744 <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f003 fad6 	bl	8004cc8 <HAL_ADC_Start>
		HAL_Delay(10);
 800171c:	200a      	movs	r0, #10
 800171e:	f003 fa6b 	bl	8004bf8 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 8001722:	2114      	movs	r1, #20
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f003 fba1 	bl	8004e6c <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 800172a:	200a      	movs	r0, #10
 800172c:	f003 fa64 	bl	8004bf8 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f003 fc26 	bl	8004f82 <HAL_ADC_GetValue>
 8001736:	4602      	mov	r2, r0
 8001738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173a:	4413      	add	r3, r2
 800173c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001740:	3301      	adds	r3, #1
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
 8001744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001746:	2b13      	cmp	r3, #19
 8001748:	dde5      	ble.n	8001716 <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 800174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001754:	ee17 0a90 	vmov	r0, s15
 8001758:	f7fe ff16 	bl	8000588 <__aeabi_f2d>
 800175c:	a37b      	add	r3, pc, #492	; (adr r3, 800194c <Battery_Voltage_Compensate+0x24c>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ff69 	bl	8000638 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b71      	ldr	r3, [pc, #452]	; (8001938 <Battery_Voltage_Compensate+0x238>)
 8001774:	f7ff f88a 	bl	800088c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff fa32 	bl	8000be8 <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 8001788:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800178a:	f7fe fefd 	bl	8000588 <__aeabi_f2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	f107 0014 	add.w	r0, r7, #20
 8001796:	4969      	ldr	r1, [pc, #420]	; (800193c <Battery_Voltage_Compensate+0x23c>)
 8001798:	f009 fb84 	bl	800aea4 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fd35 	bl	8000210 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f107 0114 	add.w	r1, r7, #20
 80017ae:	230a      	movs	r3, #10
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f007 fe0e 	bl	80093d2 <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 80017b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d009      	beq.n	80017d8 <Battery_Voltage_Compensate+0xd8>
 80017c4:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 80017c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80017cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d0:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <Battery_Voltage_Compensate+0x240>)
 80017d2:	edc3 7a00 	vstr	s15, [r3]
 80017d6:	e003      	b.n	80017e0 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 80017d8:	4b59      	ldr	r3, [pc, #356]	; (8001940 <Battery_Voltage_Compensate+0x240>)
 80017da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017de:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 80017e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017e2:	f7fe fed1 	bl	8000588 <__aeabi_f2d>
 80017e6:	a34e      	add	r3, pc, #312	; (adr r3, 8001920 <Battery_Voltage_Compensate+0x220>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7ff f996 	bl	8000b1c <__aeabi_dcmplt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80017fa:	e00a      	b.n	8001812 <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 80017fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001800:	4850      	ldr	r0, [pc, #320]	; (8001944 <Battery_Voltage_Compensate+0x244>)
 8001802:	f005 f8ac 	bl	800695e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001806:	20c8      	movs	r0, #200	; 0xc8
 8001808:	f003 f9f6 	bl	8004bf8 <HAL_Delay>
		for(i=0;i<10;i++)
 800180c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180e:	3301      	adds	r3, #1
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
 8001812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001814:	2b09      	cmp	r3, #9
 8001816:	ddf1      	ble.n	80017fc <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001820:	e016      	b.n	8001850 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f003 fa50 	bl	8004cc8 <HAL_ADC_Start>
		HAL_Delay(10);
 8001828:	200a      	movs	r0, #10
 800182a:	f003 f9e5 	bl	8004bf8 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 800182e:	2114      	movs	r1, #20
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	f003 fb1b 	bl	8004e6c <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f003 f9de 	bl	8004bf8 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	f003 fba0 	bl	8004f82 <HAL_ADC_GetValue>
 8001842:	4602      	mov	r2, r0
 8001844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001846:	4413      	add	r3, r2
 8001848:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 800184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184c:	3301      	adds	r3, #1
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001852:	2b13      	cmp	r3, #19
 8001854:	dde5      	ble.n	8001822 <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 8001856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001860:	ee17 0a90 	vmov	r0, s15
 8001864:	f7fe fe90 	bl	8000588 <__aeabi_f2d>
 8001868:	a32f      	add	r3, pc, #188	; (adr r3, 8001928 <Battery_Voltage_Compensate+0x228>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fee3 	bl	8000638 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <Battery_Voltage_Compensate+0x238>)
 8001880:	f7ff f804 	bl	800088c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	a328      	add	r3, pc, #160	; (adr r3, 8001930 <Battery_Voltage_Compensate+0x230>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fd1b 	bl	80002cc <__adddf3>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f9a3 	bl	8000be8 <__aeabi_d2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 80018a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018a8:	f7fe fe6e 	bl	8000588 <__aeabi_f2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	f107 0014 	add.w	r0, r7, #20
 80018b4:	4924      	ldr	r1, [pc, #144]	; (8001948 <Battery_Voltage_Compensate+0x248>)
 80018b6:	f009 faf5 	bl	800aea4 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fca6 	bl	8000210 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f107 0114 	add.w	r1, r7, #20
 80018cc:	230a      	movs	r3, #10
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f007 fd7f 	bl	80093d2 <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 80018d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d510      	bpl.n	8001908 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ea:	e00a      	b.n	8001902 <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 80018ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <Battery_Voltage_Compensate+0x244>)
 80018f2:	f005 f834 	bl	800695e <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 80018f6:	20c8      	movs	r0, #200	; 0xc8
 80018f8:	f003 f97e 	bl	8004bf8 <HAL_Delay>
		for(i=0;i<20;i++)
 80018fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fe:	3301      	adds	r3, #1
 8001900:	63bb      	str	r3, [r7, #56]	; 0x38
 8001902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001904:	2b13      	cmp	r3, #19
 8001906:	ddf1      	ble.n	80018ec <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <Battery_Voltage_Compensate+0x244>)
 8001910:	f005 f80c 	bl	800692c <HAL_GPIO_WritePin>

}
 8001914:	bf00      	nop
 8001916:	3740      	adds	r7, #64	; 0x40
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	f3af 8000 	nop.w
 8001920:	cccccccd 	.word	0xcccccccd
 8001924:	401ccccc 	.word	0x401ccccc
 8001928:	8c6df334 	.word	0x8c6df334
 800192c:	3f6a8d60 	.word	0x3f6a8d60
 8001930:	47ae147b 	.word	0x47ae147b
 8001934:	3f947ae1 	.word	0x3f947ae1
 8001938:	40340000 	.word	0x40340000
 800193c:	0800e960 	.word	0x0800e960
 8001940:	20000000 	.word	0x20000000
 8001944:	40020400 	.word	0x40020400
 8001948:	0800e978 	.word	0x0800e978
 800194c:	99fa11a9 	.word	0x99fa11a9
 8001950:	3f72dd7a 	.word	0x3f72dd7a
 8001954:	00000000 	.word	0x00000000

08001958 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <Measure_Velocity_Task+0xd8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	429a      	cmp	r2, r3
 8001972:	d354      	bcc.n	8001a1e <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a2d      	ldr	r2, [pc, #180]	; (8001a30 <Measure_Velocity_Task+0xd8>)
 800197c:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <Measure_Velocity_Task+0xdc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 8001986:	4a2b      	ldr	r2, [pc, #172]	; (8001a34 <Measure_Velocity_Task+0xdc>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	6013      	str	r3, [r2, #0]
		return;
 800198c:	e048      	b.n	8001a20 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001a38 <Measure_Velocity_Task+0xe0>
 80019a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a4:	ee17 0a90 	vmov	r0, s15
 80019a8:	f7fe fdee 	bl	8000588 <__aeabi_f2d>
 80019ac:	a31e      	add	r3, pc, #120	; (adr r3, 8001a28 <Measure_Velocity_Task+0xd0>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fe41 	bl	8000638 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	ee17 0a90 	vmov	r0, s15
 80019cc:	f7fe fddc 	bl	8000588 <__aeabi_f2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe ff58 	bl	800088c <__aeabi_ddiv>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f900 	bl	8000be8 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <Measure_Velocity_Task+0xe4>)
 80019ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <Measure_Velocity_Task+0xe8>)
 80019f6:	ed93 7a00 	vldr	s14, [r3]
 80019fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <Measure_Velocity_Task+0xec>)
 8001a04:	edd3 6a00 	vldr	s13, [r3]
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <Measure_Velocity_Task+0xf0>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <Measure_Velocity_Task+0xf0>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]
 8001a1c:	e000      	b.n	8001a20 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 8001a1e:	bf00      	nop
}
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bdb0      	pop	{r4, r5, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	8f5c28f6 	.word	0x8f5c28f6
 8001a2c:	401df5c2 	.word	0x401df5c2
 8001a30:	20000004 	.word	0x20000004
 8001a34:	20000618 	.word	0x20000618
 8001a38:	47000000 	.word	0x47000000
 8001a3c:	40010400 	.word	0x40010400
 8001a40:	20000008 	.word	0x20000008
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	20000614 	.word	0x20000614
 8001a4c:	00000000 	.word	0x00000000

08001a50 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8001a5e:	4ba4      	ldr	r3, [pc, #656]	; (8001cf0 <Motor_Drive_Task+0x2a0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f0c0 8133 	bcc.w	8001cd0 <Motor_Drive_Task+0x280>
	motor_drive_task_tick= tick + period;
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a9f      	ldr	r2, [pc, #636]	; (8001cf0 <Motor_Drive_Task+0x2a0>)
 8001a72:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8001a74:	4b9f      	ldr	r3, [pc, #636]	; (8001cf4 <Motor_Drive_Task+0x2a4>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80da 	beq.w	8001c32 <Motor_Drive_Task+0x1e2>
 8001a7e:	4b9e      	ldr	r3, [pc, #632]	; (8001cf8 <Motor_Drive_Task+0x2a8>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80d5 	beq.w	8001c32 <Motor_Drive_Task+0x1e2>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8001a88:	4b9c      	ldr	r3, [pc, #624]	; (8001cfc <Motor_Drive_Task+0x2ac>)
 8001a8a:	ed93 7a00 	vldr	s14, [r3]
 8001a8e:	4b9c      	ldr	r3, [pc, #624]	; (8001d00 <Motor_Drive_Task+0x2b0>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7fe fd74 	bl	8000588 <__aeabi_f2d>
 8001aa0:	a38d      	add	r3, pc, #564	; (adr r3, 8001cd8 <Motor_Drive_Task+0x288>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fdc7 	bl	8000638 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <Motor_Drive_Task+0x2b4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd66 	bl	8000588 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fdb8 	bl	8000638 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <Motor_Drive_Task+0x2b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd57 	bl	8000588 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4620      	mov	r0, r4
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	f7fe fbf3 	bl	80002cc <__adddf3>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff f87b 	bl	8000be8 <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a85      	ldr	r2, [pc, #532]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001af6:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8001af8:	4b84      	ldr	r3, [pc, #528]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001d10 <Motor_Drive_Task+0x2c0>
 8001b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	dd03      	ble.n	8001b14 <Motor_Drive_Task+0xc4>
 8001b0c:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001b0e:	4a81      	ldr	r2, [pc, #516]	; (8001d14 <Motor_Drive_Task+0x2c4>)
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	e00c      	b.n	8001b2e <Motor_Drive_Task+0xde>
		else if(u<-500)u=-500;
 8001b14:	4b7d      	ldr	r3, [pc, #500]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001d18 <Motor_Drive_Task+0x2c8>
 8001b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	d502      	bpl.n	8001b2e <Motor_Drive_Task+0xde>
 8001b28:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001b2a:	4a7c      	ldr	r2, [pc, #496]	; (8001d1c <Motor_Drive_Task+0x2cc>)
 8001b2c:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <Motor_Drive_Task+0x2b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd28 	bl	8000588 <__aeabi_f2d>
 8001b38:	a369      	add	r3, pc, #420	; (adr r3, 8001ce0 <Motor_Drive_Task+0x290>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
 8001b4a:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd1a 	bl	8000588 <__aeabi_f2d>
 8001b54:	a364      	add	r3, pc, #400	; (adr r3, 8001ce8 <Motor_Drive_Task+0x298>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd6d 	bl	8000638 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fbb1 	bl	80002cc <__adddf3>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f839 	bl	8000be8 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a63      	ldr	r2, [pc, #396]	; (8001d08 <Motor_Drive_Task+0x2b8>)
 8001b7a:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 8001b7c:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	dd0a      	ble.n	8001ba2 <Motor_Drive_Task+0x152>
 8001b8c:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b96:	ee17 3a90 	vmov	r3, s15
 8001b9a:	3346      	adds	r3, #70	; 0x46
 8001b9c:	4a60      	ldr	r2, [pc, #384]	; (8001d20 <Motor_Drive_Task+0x2d0>)
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e01b      	b.n	8001bda <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d50a      	bpl.n	8001bc8 <Motor_Drive_Task+0x178>
 8001bb2:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bbc:	ee17 3a90 	vmov	r3, s15
 8001bc0:	3b46      	subs	r3, #70	; 0x46
 8001bc2:	4a57      	ldr	r2, [pc, #348]	; (8001d20 <Motor_Drive_Task+0x2d0>)
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e008      	b.n	8001bda <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd2:	ee17 2a90 	vmov	r2, s15
 8001bd6:	4b52      	ldr	r3, [pc, #328]	; (8001d20 <Motor_Drive_Task+0x2d0>)
 8001bd8:	601a      	str	r2, [r3, #0]
		MOTOR_EN(1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2140      	movs	r1, #64	; 0x40
 8001bde:	4851      	ldr	r0, [pc, #324]	; (8001d24 <Motor_Drive_Task+0x2d4>)
 8001be0:	f004 fea4 	bl	800692c <HAL_GPIO_WritePin>
		if(fabs(v_ref)<70 && fabs(v)<70)
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <Motor_Drive_Task+0x2ac>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	eef0 7ae7 	vabs.f32	s15, s15
 8001bee:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001d28 <Motor_Drive_Task+0x2d8>
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d527      	bpl.n	8001c4c <Motor_Drive_Task+0x1fc>
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <Motor_Drive_Task+0x2b0>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	eef0 7ae7 	vabs.f32	s15, s15
 8001c06:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001d28 <Motor_Drive_Task+0x2d8>
 8001c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	d400      	bmi.n	8001c16 <Motor_Drive_Task+0x1c6>
 8001c14:	e01a      	b.n	8001c4c <Motor_Drive_Task+0x1fc>
		{
			f=u=0;
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a39      	ldr	r2, [pc, #228]	; (8001d08 <Motor_Drive_Task+0x2b8>)
 8001c24:	6013      	str	r3, [r2, #0]
			MOTOR_EN(0); //amugy stop
 8001c26:	2200      	movs	r2, #0
 8001c28:	2140      	movs	r1, #64	; 0x40
 8001c2a:	483e      	ldr	r0, [pc, #248]	; (8001d24 <Motor_Drive_Task+0x2d4>)
 8001c2c:	f004 fe7e 	bl	800692c <HAL_GPIO_WritePin>
		if(fabs(v_ref)<70 && fabs(v)<70)
 8001c30:	e00c      	b.n	8001c4c <Motor_Drive_Task+0x1fc>
		}
	}
	else
	{	f=u=0;
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <Motor_Drive_Task+0x2bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <Motor_Drive_Task+0x2b8>)
 8001c40:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 8001c42:	2200      	movs	r2, #0
 8001c44:	2140      	movs	r1, #64	; 0x40
 8001c46:	4837      	ldr	r0, [pc, #220]	; (8001d24 <Motor_Drive_Task+0x2d4>)
 8001c48:	f004 fe70 	bl	800692c <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	/**/
	if(mode==FAST && rxBuf[1]<1 && !leaveLineEnabled)
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <Motor_Drive_Task+0x2dc>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b3f      	cmp	r3, #63	; 0x3f
 8001c52:	d110      	bne.n	8001c76 <Motor_Drive_Task+0x226>
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <Motor_Drive_Task+0x2e0>)
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10c      	bne.n	8001c76 <Motor_Drive_Task+0x226>
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <Motor_Drive_Task+0x2e4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d108      	bne.n	8001c76 <Motor_Drive_Task+0x226>
	{
		TIM3->CCR1=499;
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <Motor_Drive_Task+0x2e8>)
 8001c66:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2=499;
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <Motor_Drive_Task+0x2e8>)
 8001c6e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
 8001c74:	e027      	b.n	8001cc6 <Motor_Drive_Task+0x276>
		//LED_Y_TOGGLE;
	}
	else if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <Motor_Drive_Task+0x2d0>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <Motor_Drive_Task+0x2ec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d021      	beq.n	8001cc6 <Motor_Drive_Task+0x276>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <Motor_Drive_Task+0x2d0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001c8a:	0fda      	lsrs	r2, r3, #31
 8001c8c:	4413      	add	r3, r2
 8001c8e:	105b      	asrs	r3, r3, #1
 8001c90:	3b01      	subs	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	dd02      	ble.n	8001ca4 <Motor_Drive_Task+0x254>
 8001c9e:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001ca2:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <Motor_Drive_Task+0x2f0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	da01      	bge.n	8001cb0 <Motor_Drive_Task+0x260>
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <Motor_Drive_Task+0x2f0>)
 8001cae:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd

		TIM3->CCR1=ccr1;
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <Motor_Drive_Task+0x2e8>)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <Motor_Drive_Task+0x2e8>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <Motor_Drive_Task+0x2d0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <Motor_Drive_Task+0x2ec>)
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e000      	b.n	8001cd2 <Motor_Drive_Task+0x282>
	if(motor_drive_task_tick>tick) return;
 8001cd0:	bf00      	nop
}
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd8:	30be0ded 	.word	0x30be0ded
 8001cdc:	3fd02a99 	.word	0x3fd02a99
 8001ce0:	9b3d07c8 	.word	0x9b3d07c8
 8001ce4:	3fef9f55 	.word	0x3fef9f55
 8001ce8:	30be0e00 	.word	0x30be0e00
 8001cec:	3f882a99 	.word	0x3f882a99
 8001cf0:	20000010 	.word	0x20000010
 8001cf4:	20000af4 	.word	0x20000af4
 8001cf8:	20000af5 	.word	0x20000af5
 8001cfc:	20000280 	.word	0x20000280
 8001d00:	20000614 	.word	0x20000614
 8001d04:	20000000 	.word	0x20000000
 8001d08:	2000061c 	.word	0x2000061c
 8001d0c:	20000620 	.word	0x20000620
 8001d10:	445c0000 	.word	0x445c0000
 8001d14:	445c0000 	.word	0x445c0000
 8001d18:	c3fa0000 	.word	0xc3fa0000
 8001d1c:	c3fa0000 	.word	0xc3fa0000
 8001d20:	20000624 	.word	0x20000624
 8001d24:	40020400 	.word	0x40020400
 8001d28:	428c0000 	.word	0x428c0000
 8001d2c:	2000027e 	.word	0x2000027e
 8001d30:	2000062c 	.word	0x2000062c
 8001d34:	20000284 	.word	0x20000284
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	20000628 	.word	0x20000628
 8001d40:	fffffc4a 	.word	0xfffffc4a

08001d44 <G0_Read_Fast>:

uint16_t boostCnt=0;


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <G0_Read_Fast+0x5c>)
 8001d54:	222a      	movs	r2, #42	; 0x2a
 8001d56:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 8001d58:	2302      	movs	r3, #2
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4910      	ldr	r1, [pc, #64]	; (8001da0 <G0_Read_Fast+0x5c>)
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f007 fb37 	bl	80093d2 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 4);
 8001d64:	2304      	movs	r3, #4
 8001d66:	2208      	movs	r2, #8
 8001d68:	490e      	ldr	r1, [pc, #56]	; (8001da4 <G0_Read_Fast+0x60>)
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f007 fbc3 	bl	80094f6 <HAL_UART_Receive>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <G0_Read_Fast+0x64>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
	if((state==HAL_OK)&&(rxBuf[0]==START_BYTE_FAST) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <G0_Read_Fast+0x50>
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <G0_Read_Fast+0x60>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b41      	cmp	r3, #65	; 0x41
 8001d86:	d105      	bne.n	8001d94 <G0_Read_Fast+0x50>
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <G0_Read_Fast+0x60>)
 8001d8a:	79db      	ldrb	r3, [r3, #7]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d101      	bne.n	8001d94 <G0_Read_Fast+0x50>
	{
		return 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e000      	b.n	8001d96 <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001d94:	2301      	movs	r3, #1
	}
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000014 	.word	0x20000014
 8001da4:	2000062c 	.word	0x2000062c
 8001da8:	20000af5 	.word	0x20000af5

08001dac <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	71fb      	strb	r3, [r7, #7]
	uint8_t state=0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <G0_Read_Skill+0x68>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 2);
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4912      	ldr	r1, [pc, #72]	; (8001e14 <G0_Read_Skill+0x68>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f007 fb01 	bl	80093d2 <HAL_UART_Transmit>
	state = HAL_UART_Receive(huart_stm, rxBuf, 10, 4);
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	220a      	movs	r2, #10
 8001dd4:	4910      	ldr	r1, [pc, #64]	; (8001e18 <G0_Read_Skill+0x6c>)
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f007 fb8d 	bl	80094f6 <HAL_UART_Receive>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <G0_Read_Skill+0x70>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
	if((state==HAL_OK)&&(rxBuf[0]==START_BYTE_SKILL_FORWARD || rxBuf[0]==START_BYTE_SKILL_REVERSE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <G0_Read_Skill+0x5c>
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <G0_Read_Skill+0x6c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b50      	cmp	r3, #80	; 0x50
 8001df2:	d003      	beq.n	8001dfc <G0_Read_Skill+0x50>
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <G0_Read_Skill+0x6c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2ba8      	cmp	r3, #168	; 0xa8
 8001dfa:	d105      	bne.n	8001e08 <G0_Read_Skill+0x5c>
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <G0_Read_Skill+0x6c>)
 8001dfe:	7a5b      	ldrb	r3, [r3, #9]
 8001e00:	2b12      	cmp	r3, #18
 8001e02:	d101      	bne.n	8001e08 <G0_Read_Skill+0x5c>
	{
		return 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <G0_Read_Skill+0x5e>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001e08:	2301      	movs	r3, #1
	}
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000014 	.word	0x20000014
 8001e18:	2000062c 	.word	0x2000062c
 8001e1c:	20000af5 	.word	0x20000af5

08001e20 <Line_Track_Task>:


void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
	static float PHI;
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t tick_prev=0;

	if(line_track_task_tick>tick) return;
 8001e2e:	4b90      	ldr	r3, [pc, #576]	; (8002070 <Line_Track_Task+0x250>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f0c0 83b5 	bcc.w	80025a4 <Line_Track_Task+0x784>
	line_track_task_tick = tick + period;
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a8b      	ldr	r2, [pc, #556]	; (8002070 <Line_Track_Task+0x250>)
 8001e42:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 8001e44:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <Line_Track_Task+0x254>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b52      	cmp	r3, #82	; 0x52
 8001e4a:	f040 81f9 	bne.w	8002240 <Line_Track_Task+0x420>
	{
		if(orientation==FORWARD)
 8001e4e:	4b8a      	ldr	r3, [pc, #552]	; (8002078 <Line_Track_Task+0x258>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80e0 	bne.w	8002018 <Line_Track_Task+0x1f8>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 8001e58:	2239      	movs	r2, #57	; 0x39
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff ffa5 	bl	8001dac <G0_Read_Skill>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 839f 	bne.w	80025a8 <Line_Track_Task+0x788>

			uint8_t tmp=Lane_Changer(tick);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f001 f890 	bl	8002f90 <Lane_Changer>
 8001e70:	4603      	mov	r3, r0
 8001e72:	75bb      	strb	r3, [r7, #22]
			if(v_control==NORMAL_VEL)v_ref=1100;
 8001e74:	4b81      	ldr	r3, [pc, #516]	; (800207c <Line_Track_Task+0x25c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d103      	bne.n	8001e84 <Line_Track_Task+0x64>
 8001e7c:	4b80      	ldr	r3, [pc, #512]	; (8002080 <Line_Track_Task+0x260>)
 8001e7e:	4a81      	ldr	r2, [pc, #516]	; (8002084 <Line_Track_Task+0x264>)
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e00f      	b.n	8001ea4 <Line_Track_Task+0x84>
			else if(v_control==SLOW_DOWN)v_ref=600;
 8001e84:	4b7d      	ldr	r3, [pc, #500]	; (800207c <Line_Track_Task+0x25c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d103      	bne.n	8001e94 <Line_Track_Task+0x74>
 8001e8c:	4b7c      	ldr	r3, [pc, #496]	; (8002080 <Line_Track_Task+0x260>)
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <Line_Track_Task+0x268>)
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e007      	b.n	8001ea4 <Line_Track_Task+0x84>
			else if(v_control==STOP)v_ref=0;
 8001e94:	4b79      	ldr	r3, [pc, #484]	; (800207c <Line_Track_Task+0x25c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d103      	bne.n	8001ea4 <Line_Track_Task+0x84>
 8001e9c:	4b78      	ldr	r3, [pc, #480]	; (8002080 <Line_Track_Task+0x260>)
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
			if(tmp)return;
 8001ea4:	7dbb      	ldrb	r3, [r7, #22]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 8380 	bne.w	80025ac <Line_Track_Task+0x78c>

			Detect_Node4(huart_debugg, tick);
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	f000 ffda 	bl	8002e68 <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <Line_Track_Task+0x26c>)
 8001eb6:	785b      	ldrb	r3, [r3, #1]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8379 	beq.w	80025b0 <Line_Track_Task+0x790>
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <Line_Track_Task+0x26c>)
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	f200 8374 	bhi.w	80025b0 <Line_Track_Task+0x790>
			gamma = Skill_Mode(huart_debugg, 0.004, 0.004, tick); //kD 4ms -es futáshoz hangolva
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	eddf 0a71 	vldr	s1, [pc, #452]	; 8002090 <Line_Track_Task+0x270>
 8001ece:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002090 <Line_Track_Task+0x270>
 8001ed2:	68b8      	ldr	r0, [r7, #8]
 8001ed4:	f000 fe90 	bl	8002bf8 <Skill_Mode>
 8001ed8:	eef0 7a40 	vmov.f32	s15, s0
 8001edc:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <Line_Track_Task+0x274>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]

			//ELSŐSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8001ee2:	4b6c      	ldr	r3, [pc, #432]	; (8002094 <Line_Track_Task+0x274>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb4e 	bl	8000588 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	ec43 2b10 	vmov	d0, r2, r3
 8001ef4:	f00b fbfc 	bl	800d6f0 <tan>
 8001ef8:	ec51 0b10 	vmov	r0, r1, d0
 8001efc:	a358      	add	r3, pc, #352	; (adr r3, 8002060 <Line_Track_Task+0x240>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fb99 	bl	8000638 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	ec43 2b17 	vmov	d7, r2, r3
 8001f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f12:	eef0 0a67 	vmov.f32	s1, s15
 8001f16:	f00b fa3f 	bl	800d398 <atan>
 8001f1a:	ec53 2b10 	vmov	r2, r3, d0
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe61 	bl	8000be8 <__aeabi_d2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a5b      	ldr	r2, [pc, #364]	; (8002098 <Line_Track_Task+0x278>)
 8001f2a:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <Line_Track_Task+0x278>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800209c <Line_Track_Task+0x27c>
 8001f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80020a0 <Line_Track_Task+0x280>
 8001f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f46:	ee17 3a90 	vmov	r3, s15
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <Line_Track_Task+0x284>)
 8001f50:	601a      	str	r2, [r3, #0]
			//ne feszítsük neki a mechanikai határnak a szervót
			FRONT_CCR(ccr);
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <Line_Track_Task+0x284>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f5a:	dc07      	bgt.n	8001f6c <Line_Track_Task+0x14c>
 8001f5c:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <Line_Track_Task+0x284>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f64:	bfb8      	it	lt
 8001f66:	f44f 73f0 	movlt.w	r3, #480	; 0x1e0
 8001f6a:	e001      	b.n	8001f70 <Line_Track_Task+0x150>
 8001f6c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001f70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f74:	6353      	str	r3, [r2, #52]	; 0x34

			//HÁTSÓSZERVÓ ELŐREMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma))/3;
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <Line_Track_Task+0x274>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fb04 	bl	8000588 <__aeabi_f2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	ec43 2b10 	vmov	d0, r2, r3
 8001f88:	f00b fbb2 	bl	800d6f0 <tan>
 8001f8c:	ec51 0b10 	vmov	r0, r1, d0
 8001f90:	a335      	add	r3, pc, #212	; (adr r3, 8002068 <Line_Track_Task+0x248>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fb4f 	bl	8000638 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	ec43 2b17 	vmov	d7, r2, r3
 8001fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa6:	eef0 0a67 	vmov.f32	s1, s15
 8001faa:	f00b f9f5 	bl	800d398 <atan>
 8001fae:	ec51 0b10 	vmov	r0, r1, d0
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <Line_Track_Task+0x288>)
 8001fb8:	f7fe fc68 	bl	800088c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fe10 	bl	8000be8 <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a33      	ldr	r2, [pc, #204]	; (8002098 <Line_Track_Task+0x278>)
 8001fcc:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);//balra kanyarodás
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <Line_Track_Task+0x278>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800209c <Line_Track_Task+0x27c>
 8001fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fdc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80020ac <Line_Track_Task+0x28c>
 8001fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <Line_Track_Task+0x284>)
 8001ff2:	601a      	str	r2, [r3, #0]
			REAR_CCR(ccr);
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <Line_Track_Task+0x284>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8001ffc:	dc07      	bgt.n	800200e <Line_Track_Task+0x1ee>
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <Line_Track_Task+0x284>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002006:	bfb8      	it	lt
 8002008:	f44f 73c8 	movlt.w	r3, #400	; 0x190
 800200c:	e001      	b.n	8002012 <Line_Track_Task+0x1f2>
 800200e:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <Line_Track_Task+0x290>)
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	e2c1      	b.n	800259c <Line_Track_Task+0x77c>
		}
		else if(orientation==REVERSE)//TOLATÁS
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <Line_Track_Task+0x258>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	f040 82bd 	bne.w	800259c <Line_Track_Task+0x77c>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 8002022:	2291      	movs	r2, #145	; 0x91
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff fec0 	bl	8001dac <G0_Read_Skill>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 82c0 	bne.w	80025b4 <Line_Track_Task+0x794>

			uint8_t tmp=Lane_Changer(tick);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 ffab 	bl	8002f90 <Lane_Changer>
 800203a:	4603      	mov	r3, r0
 800203c:	75fb      	strb	r3, [r7, #23]
			if(v_control==NORMAL_VEL)v_ref=-1100;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <Line_Track_Task+0x25c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d103      	bne.n	800204e <Line_Track_Task+0x22e>
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <Line_Track_Task+0x260>)
 8002048:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <Line_Track_Task+0x294>)
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e03e      	b.n	80020cc <Line_Track_Task+0x2ac>
			else if(v_control==SLOW_DOWN)v_ref=-600;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <Line_Track_Task+0x25c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d132      	bne.n	80020bc <Line_Track_Task+0x29c>
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <Line_Track_Task+0x260>)
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <Line_Track_Task+0x298>)
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e036      	b.n	80020cc <Line_Track_Task+0x2ac>
 800205e:	bf00      	nop
 8002060:	c4830201 	.word	0xc4830201
 8002064:	3fe73a26 	.word	0x3fe73a26
 8002068:	a3f47e90 	.word	0xa3f47e90
 800206c:	3fe8fd1f 	.word	0x3fe8fd1f
 8002070:	20000018 	.word	0x20000018
 8002074:	2000027e 	.word	0x2000027e
 8002078:	2000028c 	.word	0x2000028c
 800207c:	20000291 	.word	0x20000291
 8002080:	20000280 	.word	0x20000280
 8002084:	44898000 	.word	0x44898000
 8002088:	44160000 	.word	0x44160000
 800208c:	2000062c 	.word	0x2000062c
 8002090:	3b83126f 	.word	0x3b83126f
 8002094:	2000063c 	.word	0x2000063c
 8002098:	20000640 	.word	0x20000640
 800209c:	44af0000 	.word	0x44af0000
 80020a0:	442c0000 	.word	0x442c0000
 80020a4:	2000001c 	.word	0x2000001c
 80020a8:	40080000 	.word	0x40080000
 80020ac:	44120000 	.word	0x44120000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	c4898000 	.word	0xc4898000
 80020b8:	c4160000 	.word	0xc4160000
			else if(v_control==STOP)v_ref=0;
 80020bc:	4bb6      	ldr	r3, [pc, #728]	; (8002398 <Line_Track_Task+0x578>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <Line_Track_Task+0x2ac>
 80020c4:	4bb5      	ldr	r3, [pc, #724]	; (800239c <Line_Track_Task+0x57c>)
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
			if(tmp)return;
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 8272 	bne.w	80025b8 <Line_Track_Task+0x798>

			Detect_Node4(huart_debugg, tick);
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68b8      	ldr	r0, [r7, #8]
 80020d8:	f000 fec6 	bl	8002e68 <Detect_Node4>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80020dc:	4bb0      	ldr	r3, [pc, #704]	; (80023a0 <Line_Track_Task+0x580>)
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 826b 	beq.w	80025bc <Line_Track_Task+0x79c>
 80020e6:	4bae      	ldr	r3, [pc, #696]	; (80023a0 <Line_Track_Task+0x580>)
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	f200 8266 	bhi.w	80025bc <Line_Track_Task+0x79c>
			gamma = Skill_Mode(huart_debugg, 0.003, 0.032, tick);
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	eddf 0aac 	vldr	s1, [pc, #688]	; 80023a4 <Line_Track_Task+0x584>
 80020f6:	ed9f 0aac 	vldr	s0, [pc, #688]	; 80023a8 <Line_Track_Task+0x588>
 80020fa:	68b8      	ldr	r0, [r7, #8]
 80020fc:	f000 fd7c 	bl	8002bf8 <Skill_Mode>
 8002100:	eef0 7a40 	vmov.f32	s15, s0
 8002104:	4ba9      	ldr	r3, [pc, #676]	; (80023ac <Line_Track_Task+0x58c>)
 8002106:	edc3 7a00 	vstr	s15, [r3]

			//HÁTSÓ SZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 800210a:	4ba8      	ldr	r3, [pc, #672]	; (80023ac <Line_Track_Task+0x58c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fa3a 	bl	8000588 <__aeabi_f2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	ec43 2b10 	vmov	d0, r2, r3
 800211c:	f00b fae8 	bl	800d6f0 <tan>
 8002120:	ec51 0b10 	vmov	r0, r1, d0
 8002124:	a398      	add	r3, pc, #608	; (adr r3, 8002388 <Line_Track_Task+0x568>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f7fe fa85 	bl	8000638 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	ec43 2b17 	vmov	d7, r2, r3
 8002136:	eeb0 0a47 	vmov.f32	s0, s14
 800213a:	eef0 0a67 	vmov.f32	s1, s15
 800213e:	f00b f92b 	bl	800d398 <atan>
 8002142:	ec53 2b10 	vmov	r2, r3, d0
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fd4d 	bl	8000be8 <__aeabi_d2f>
 800214e:	4603      	mov	r3, r0
 8002150:	4a97      	ldr	r2, [pc, #604]	; (80023b0 <Line_Track_Task+0x590>)
 8002152:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_REAR_CCR_MIDDLE);
 8002154:	4b96      	ldr	r3, [pc, #600]	; (80023b0 <Line_Track_Task+0x590>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80023b4 <Line_Track_Task+0x594>
 800215e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002162:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80023b8 <Line_Track_Task+0x598>
 8002166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800216a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216e:	ee17 3a90 	vmov	r3, s15
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4b91      	ldr	r3, [pc, #580]	; (80023bc <Line_Track_Task+0x59c>)
 8002178:	601a      	str	r2, [r3, #0]
			REAR_CCR(ccr);
 800217a:	4b90      	ldr	r3, [pc, #576]	; (80023bc <Line_Track_Task+0x59c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8002182:	dc07      	bgt.n	8002194 <Line_Track_Task+0x374>
 8002184:	4b8d      	ldr	r3, [pc, #564]	; (80023bc <Line_Track_Task+0x59c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800218c:	bfb8      	it	lt
 800218e:	f44f 73c8 	movlt.w	r3, #400	; 0x190
 8002192:	e001      	b.n	8002198 <Line_Track_Task+0x378>
 8002194:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 8002198:	4a89      	ldr	r2, [pc, #548]	; (80023c0 <Line_Track_Task+0x5a0>)
 800219a:	6413      	str	r3, [r2, #64]	; 0x40

			//ELSŐSZERVÓ HÁTRAMENETBEN
			PHI = atan((L/(L+D_FRONT))*tan(gamma))/3;
 800219c:	4b83      	ldr	r3, [pc, #524]	; (80023ac <Line_Track_Task+0x58c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f9f1 	bl	8000588 <__aeabi_f2d>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	ec43 2b10 	vmov	d0, r2, r3
 80021ae:	f00b fa9f 	bl	800d6f0 <tan>
 80021b2:	ec51 0b10 	vmov	r0, r1, d0
 80021b6:	a376      	add	r3, pc, #472	; (adr r3, 8002390 <Line_Track_Task+0x570>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe fa3c 	bl	8000638 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	ec43 2b17 	vmov	d7, r2, r3
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	eef0 0a67 	vmov.f32	s1, s15
 80021d0:	f00b f8e2 	bl	800d398 <atan>
 80021d4:	ec51 0b10 	vmov	r0, r1, d0
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <Line_Track_Task+0x5a4>)
 80021de:	f7fe fb55 	bl	800088c <__aeabi_ddiv>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fcfd 	bl	8000be8 <__aeabi_d2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4a6f      	ldr	r2, [pc, #444]	; (80023b0 <Line_Track_Task+0x590>)
 80021f2:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 80021f4:	4b6e      	ldr	r3, [pc, #440]	; (80023b0 <Line_Track_Task+0x590>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80023b4 <Line_Track_Task+0x594>
 80021fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002202:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80023c8 <Line_Track_Task+0x5a8>
 8002206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800220a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220e:	ee17 3a90 	vmov	r3, s15
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4b69      	ldr	r3, [pc, #420]	; (80023bc <Line_Track_Task+0x59c>)
 8002218:	601a      	str	r2, [r3, #0]
			FRONT_CCR(ccr);
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <Line_Track_Task+0x59c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002222:	dc07      	bgt.n	8002234 <Line_Track_Task+0x414>
 8002224:	4b65      	ldr	r3, [pc, #404]	; (80023bc <Line_Track_Task+0x59c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800222c:	bfb8      	it	lt
 800222e:	f44f 73f0 	movlt.w	r3, #480	; 0x1e0
 8002232:	e001      	b.n	8002238 <Line_Track_Task+0x418>
 8002234:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002238:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800223c:	6353      	str	r3, [r2, #52]	; 0x34
 800223e:	e1ad      	b.n	800259c <Line_Track_Task+0x77c>
		}
	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <Line_Track_Task+0x5ac>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b3f      	cmp	r3, #63	; 0x3f
 8002246:	f040 81a9 	bne.w	800259c <Line_Track_Task+0x77c>
	{
		static uint8_t fast_mode_state=SC_MODE;

		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff fd79 	bl	8001d44 <G0_Read_Fast>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 81b3 	bne.w	80025c0 <Line_Track_Task+0x7a0>
		if((LINE_CNT<1 || LINE_CNT > 3) && !leaveLineEnabled) return;//ha nincs vonal a kocsi alatt
 800225a:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <Line_Track_Task+0x580>)
 800225c:	785b      	ldrb	r3, [r3, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <Line_Track_Task+0x44a>
 8002262:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <Line_Track_Task+0x580>)
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d904      	bls.n	8002274 <Line_Track_Task+0x454>
 800226a:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <Line_Track_Task+0x5b0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 81a8 	beq.w	80025c4 <Line_Track_Task+0x7a4>
		gamma = Fast_Mode(huart_debugg, &fast_mode_state, tick);
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4957      	ldr	r1, [pc, #348]	; (80023d4 <Line_Track_Task+0x5b4>)
 8002278:	68b8      	ldr	r0, [r7, #8]
 800227a:	f000 f9c9 	bl	8002610 <Fast_Mode>
 800227e:	eef0 7a40 	vmov.f32	s15, s0
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <Line_Track_Task+0x58c>)
 8002284:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8002288:	4b48      	ldr	r3, [pc, #288]	; (80023ac <Line_Track_Task+0x58c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f97b 	bl	8000588 <__aeabi_f2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	ec43 2b10 	vmov	d0, r2, r3
 800229a:	f00b fa29 	bl	800d6f0 <tan>
 800229e:	ec51 0b10 	vmov	r0, r1, d0
 80022a2:	a33b      	add	r3, pc, #236	; (adr r3, 8002390 <Line_Track_Task+0x570>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f9c6 	bl	8000638 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	ec43 2b17 	vmov	d7, r2, r3
 80022b4:	eeb0 0a47 	vmov.f32	s0, s14
 80022b8:	eef0 0a67 	vmov.f32	s1, s15
 80022bc:	f00b f86c 	bl	800d398 <atan>
 80022c0:	ec53 2b10 	vmov	r2, r3, d0
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fc8e 	bl	8000be8 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a38      	ldr	r2, [pc, #224]	; (80023b0 <Line_Track_Task+0x590>)
 80022d0:	6013      	str	r3, [r2, #0]

		if(fast_mode_state==FREERUN_MODE)
 80022d2:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <Line_Track_Task+0x5b4>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f040 80ba 	bne.w	8002450 <Line_Track_Task+0x630>
		{
			if(v>2200)//egyenes
 80022dc:	4b3e      	ldr	r3, [pc, #248]	; (80023d8 <Line_Track_Task+0x5b8>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80023dc <Line_Track_Task+0x5bc>
 80022e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ee:	dd29      	ble.n	8002344 <Line_Track_Task+0x524>
			{
				ccr = (uint16_t)(-SERVO_M_STRAIGHT * PHI + SERVO_FRONT_CCR_MIDDLE);
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <Line_Track_Task+0x590>)
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80023e0 <Line_Track_Task+0x5c0>
 80022fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80023c8 <Line_Track_Task+0x5a8>
 8002302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800230a:	ee17 3a90 	vmov	r3, s15
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <Line_Track_Task+0x59c>)
 8002314:	601a      	str	r2, [r3, #0]
				FRONT_CCR(ccr);
 8002316:	4b29      	ldr	r3, [pc, #164]	; (80023bc <Line_Track_Task+0x59c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800231e:	dc07      	bgt.n	8002330 <Line_Track_Task+0x510>
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <Line_Track_Task+0x59c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002328:	bfb8      	it	lt
 800232a:	f44f 73f0 	movlt.w	r3, #480	; 0x1e0
 800232e:	e001      	b.n	8002334 <Line_Track_Task+0x514>
 8002330:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002338:	6353      	str	r3, [r2, #52]	; 0x34
				REAR_CCR(SERVO_REAR_CCR_MIDDLE);
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <Line_Track_Task+0x5a0>)
 800233c:	f44f 7212 	mov.w	r2, #584	; 0x248
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
 8002342:	e12b      	b.n	800259c <Line_Track_Task+0x77c>
			}
			else//kanyar
			{
				//Első szervó
				ccr =(uint16_t)(-SERVO_M_CORNER * PHI + SERVO_FRONT_CCR_MIDDLE);
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <Line_Track_Task+0x590>)
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80023e4 <Line_Track_Task+0x5c4>
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80023c8 <Line_Track_Task+0x5a8>
 8002356:	ee77 7a87 	vadd.f32	s15, s15, s14
 800235a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235e:	ee17 3a90 	vmov	r3, s15
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <Line_Track_Task+0x59c>)
 8002368:	601a      	str	r2, [r3, #0]
				FRONT_CCR(ccr);
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <Line_Track_Task+0x59c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002372:	dc39      	bgt.n	80023e8 <Line_Track_Task+0x5c8>
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <Line_Track_Task+0x59c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800237c:	bfb8      	it	lt
 800237e:	f44f 73f0 	movlt.w	r3, #480	; 0x1e0
 8002382:	e033      	b.n	80023ec <Line_Track_Task+0x5cc>
 8002384:	f3af 8000 	nop.w
 8002388:	a3f47e90 	.word	0xa3f47e90
 800238c:	3fe8fd1f 	.word	0x3fe8fd1f
 8002390:	c4830201 	.word	0xc4830201
 8002394:	3fe73a26 	.word	0x3fe73a26
 8002398:	20000291 	.word	0x20000291
 800239c:	20000280 	.word	0x20000280
 80023a0:	2000062c 	.word	0x2000062c
 80023a4:	3d03126f 	.word	0x3d03126f
 80023a8:	3b449ba6 	.word	0x3b449ba6
 80023ac:	2000063c 	.word	0x2000063c
 80023b0:	20000640 	.word	0x20000640
 80023b4:	44af0000 	.word	0x44af0000
 80023b8:	44120000 	.word	0x44120000
 80023bc:	2000001c 	.word	0x2000001c
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40080000 	.word	0x40080000
 80023c8:	442c0000 	.word	0x442c0000
 80023cc:	2000027e 	.word	0x2000027e
 80023d0:	20000284 	.word	0x20000284
 80023d4:	20000644 	.word	0x20000644
 80023d8:	20000614 	.word	0x20000614
 80023dc:	45098000 	.word	0x45098000
 80023e0:	c4610000 	.word	0xc4610000
 80023e4:	c47a0000 	.word	0xc47a0000
 80023e8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80023ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f0:	6353      	str	r3, [r2, #52]	; 0x34
				//Hátsó szervó
				PHI/= 2;
 80023f2:	4b76      	ldr	r3, [pc, #472]	; (80025cc <Line_Track_Task+0x7ac>)
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002400:	4b72      	ldr	r3, [pc, #456]	; (80025cc <Line_Track_Task+0x7ac>)
 8002402:	edc3 7a00 	vstr	s15, [r3]
				ccr = (uint16_t)(-SERVO_M_CORNER * PHI + SERVO_REAR_CCR_MIDDLE);
 8002406:	4b71      	ldr	r3, [pc, #452]	; (80025cc <Line_Track_Task+0x7ac>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80025d0 <Line_Track_Task+0x7b0>
 8002410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002414:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80025d4 <Line_Track_Task+0x7b4>
 8002418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800241c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	4b6b      	ldr	r3, [pc, #428]	; (80025d8 <Line_Track_Task+0x7b8>)
 800242a:	601a      	str	r2, [r3, #0]
				REAR_CCR(ccr);
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <Line_Track_Task+0x7b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8002434:	dc07      	bgt.n	8002446 <Line_Track_Task+0x626>
 8002436:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <Line_Track_Task+0x7b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800243e:	bfb8      	it	lt
 8002440:	f44f 73c8 	movlt.w	r3, #400	; 0x190
 8002444:	e001      	b.n	800244a <Line_Track_Task+0x62a>
 8002446:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 800244a:	4a64      	ldr	r2, [pc, #400]	; (80025dc <Line_Track_Task+0x7bc>)
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	e0a5      	b.n	800259c <Line_Track_Task+0x77c>
			}
		}
		else if(fast_mode_state==SC_MODE)
 8002450:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <Line_Track_Task+0x7c0>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d153      	bne.n	8002500 <Line_Track_Task+0x6e0>
		{
			//Első szervó
			ccr = (uint16_t)(-SERVO_M_SC * PHI + SERVO_FRONT_CCR_MIDDLE);
 8002458:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <Line_Track_Task+0x7ac>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80025e4 <Line_Track_Task+0x7c4>
 8002462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002466:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80025e8 <Line_Track_Task+0x7c8>
 800246a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800246e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002472:	ee17 3a90 	vmov	r3, s15
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <Line_Track_Task+0x7b8>)
 800247c:	601a      	str	r2, [r3, #0]
			FRONT_CCR(ccr);
 800247e:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <Line_Track_Task+0x7b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002486:	dc07      	bgt.n	8002498 <Line_Track_Task+0x678>
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <Line_Track_Task+0x7b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002490:	bfb8      	it	lt
 8002492:	f44f 73f0 	movlt.w	r3, #480	; 0x1e0
 8002496:	e001      	b.n	800249c <Line_Track_Task+0x67c>
 8002498:	f44f 7361 	mov.w	r3, #900	; 0x384
 800249c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a0:	6353      	str	r3, [r2, #52]	; 0x34

			//Hátsó szervó
			PHI/= 3;
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <Line_Track_Task+0x7ac>)
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80024ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <Line_Track_Task+0x7ac>)
 80024b2:	edc3 7a00 	vstr	s15, [r3]
			ccr = (uint16_t)(-SERVO_M_SC * PHI + SERVO_REAR_CCR_MIDDLE);
 80024b6:	4b45      	ldr	r3, [pc, #276]	; (80025cc <Line_Track_Task+0x7ac>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80025e4 <Line_Track_Task+0x7c4>
 80024c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80025d4 <Line_Track_Task+0x7b4>
 80024c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d0:	ee17 3a90 	vmov	r3, s15
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <Line_Track_Task+0x7b8>)
 80024da:	601a      	str	r2, [r3, #0]
			REAR_CCR(ccr);
 80024dc:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <Line_Track_Task+0x7b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 80024e4:	dc07      	bgt.n	80024f6 <Line_Track_Task+0x6d6>
 80024e6:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <Line_Track_Task+0x7b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024ee:	bfb8      	it	lt
 80024f0:	f44f 73c8 	movlt.w	r3, #400	; 0x190
 80024f4:	e001      	b.n	80024fa <Line_Track_Task+0x6da>
 80024f6:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 80024fa:	4a38      	ldr	r2, [pc, #224]	; (80025dc <Line_Track_Task+0x7bc>)
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	e04d      	b.n	800259c <Line_Track_Task+0x77c>
		}
		else if(fast_mode_state==OVERTAKE_MODE)
 8002500:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <Line_Track_Task+0x7c0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d149      	bne.n	800259c <Line_Track_Task+0x77c>
		{
			static uint8_t overtake_state=0;
			static uint32_t t_stamp_overtake=0;
			if(overtake_state==0)
 8002508:	4b38      	ldr	r3, [pc, #224]	; (80025ec <Line_Track_Task+0x7cc>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d115      	bne.n	800253c <Line_Track_Task+0x71c>
			{
				v_ref=1000;
 8002510:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <Line_Track_Task+0x7d0>)
 8002512:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <Line_Track_Task+0x7d4>)
 8002514:	601a      	str	r2, [r3, #0]
				t_stamp_overtake=tick;
 8002516:	4a38      	ldr	r2, [pc, #224]	; (80025f8 <Line_Track_Task+0x7d8>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6013      	str	r3, [r2, #0]
				leaveLineEnabled=1;
 800251c:	4b37      	ldr	r3, [pc, #220]	; (80025fc <Line_Track_Task+0x7dc>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
				FRONT_CCR(SERVO_FRONT_CCR_MIDDLE+130);
 8002522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002526:	f240 3232 	movw	r2, #818	; 0x332
 800252a:	635a      	str	r2, [r3, #52]	; 0x34
				REAR_CCR(SERVO_REAR_CCR_MIDDLE-130);
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <Line_Track_Task+0x7bc>)
 800252e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
				overtake_state=1;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <Line_Track_Task+0x7cc>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e02f      	b.n	800259c <Line_Track_Task+0x77c>
			}
			else if(overtake_state==1 && (tick-t_stamp_overtake)>2500)
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <Line_Track_Task+0x7cc>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d117      	bne.n	8002574 <Line_Track_Task+0x754>
 8002544:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <Line_Track_Task+0x7d8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002550:	4293      	cmp	r3, r2
 8002552:	d90f      	bls.n	8002574 <Line_Track_Task+0x754>
			{
				v_ref=3000;
 8002554:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <Line_Track_Task+0x7d0>)
 8002556:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <Line_Track_Task+0x7e0>)
 8002558:	601a      	str	r2, [r3, #0]
				FRONT_CCR(SERVO_FRONT_CCR_MIDDLE-20);
 800255a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800255e:	f44f 7227 	mov.w	r2, #668	; 0x29c
 8002562:	635a      	str	r2, [r3, #52]	; 0x34
				REAR_CCR(SERVO_REAR_CCR_MIDDLE+20);
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <Line_Track_Task+0x7bc>)
 8002566:	f44f 7217 	mov.w	r2, #604	; 0x25c
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
				overtake_state=2;
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <Line_Track_Task+0x7cc>)
 800256e:	2202      	movs	r2, #2
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e013      	b.n	800259c <Line_Track_Task+0x77c>
			}
			else if(overtake_state==2 && LINE_CNT>0)
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <Line_Track_Task+0x7cc>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d10f      	bne.n	800259c <Line_Track_Task+0x77c>
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <Line_Track_Task+0x7e4>)
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <Line_Track_Task+0x77c>
			{
				v_ref=1200;
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <Line_Track_Task+0x7d0>)
 8002586:	4a20      	ldr	r2, [pc, #128]	; (8002608 <Line_Track_Task+0x7e8>)
 8002588:	601a      	str	r2, [r3, #0]
				overtake_state=0;
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <Line_Track_Task+0x7cc>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
				fast_mode_state=FREERUN_MODE;
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <Line_Track_Task+0x7c0>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
				leaveLineEnabled=0;
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <Line_Track_Task+0x7dc>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	tick_prev=tick;
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <Line_Track_Task+0x7ec>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e010      	b.n	80025c6 <Line_Track_Task+0x7a6>
	if(line_track_task_tick>tick) return;
 80025a4:	bf00      	nop
 80025a6:	e00e      	b.n	80025c6 <Line_Track_Task+0x7a6>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_FORWARD))return;
 80025a8:	bf00      	nop
 80025aa:	e00c      	b.n	80025c6 <Line_Track_Task+0x7a6>
			if(tmp)return;
 80025ac:	bf00      	nop
 80025ae:	e00a      	b.n	80025c6 <Line_Track_Task+0x7a6>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80025b0:	bf00      	nop
 80025b2:	e008      	b.n	80025c6 <Line_Track_Task+0x7a6>
			if(G0_Read_Skill(huart_stm, huart_debugg, CMD_READ_SKILL_REVERSE))return;
 80025b4:	bf00      	nop
 80025b6:	e006      	b.n	80025c6 <Line_Track_Task+0x7a6>
			if(tmp)return;
 80025b8:	bf00      	nop
 80025ba:	e004      	b.n	80025c6 <Line_Track_Task+0x7a6>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80025bc:	bf00      	nop
 80025be:	e002      	b.n	80025c6 <Line_Track_Task+0x7a6>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80025c0:	bf00      	nop
 80025c2:	e000      	b.n	80025c6 <Line_Track_Task+0x7a6>
		if((LINE_CNT<1 || LINE_CNT > 3) && !leaveLineEnabled) return;//ha nincs vonal a kocsi alatt
 80025c4:	bf00      	nop
}
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000640 	.word	0x20000640
 80025d0:	c47a0000 	.word	0xc47a0000
 80025d4:	44120000 	.word	0x44120000
 80025d8:	2000001c 	.word	0x2000001c
 80025dc:	40010000 	.word	0x40010000
 80025e0:	20000644 	.word	0x20000644
 80025e4:	c4a28000 	.word	0xc4a28000
 80025e8:	442c0000 	.word	0x442c0000
 80025ec:	20000645 	.word	0x20000645
 80025f0:	20000280 	.word	0x20000280
 80025f4:	447a0000 	.word	0x447a0000
 80025f8:	20000648 	.word	0x20000648
 80025fc:	20000284 	.word	0x20000284
 8002600:	453b8000 	.word	0x453b8000
 8002604:	2000062c 	.word	0x2000062c
 8002608:	44960000 	.word	0x44960000
 800260c:	2000064c 	.word	0x2000064c

08002610 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg,uint8_t* state_pointer, uint32_t t)
{
 8002610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002614:	b088      	sub	sp, #32
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
	static float x_elso_prev=0;
	static float x_hatso;
	static float delta;
	static float gamma;

	uint8_t state = *state_pointer;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	77fb      	strb	r3, [r7, #31]

	if(state==OVERTAKE_MODE)return 0;
 8002624:	7ffb      	ldrb	r3, [r7, #31]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d102      	bne.n	8002630 <Fast_Mode+0x20>
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e29e      	b.n	8002b6e <Fast_Mode+0x55e>
/**/
	//BOOST detect
	if(LINE_CNT != lineCnt_prev && (LINE_CNT==1 || LINE_CNT==3)) //ha változik az alattunk lévő vonalak száma
 8002630:	4b9b      	ldr	r3, [pc, #620]	; (80028a0 <Fast_Mode+0x290>)
 8002632:	785a      	ldrb	r2, [r3, #1]
 8002634:	4b9b      	ldr	r3, [pc, #620]	; (80028a4 <Fast_Mode+0x294>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	f000 80bb 	beq.w	80027b4 <Fast_Mode+0x1a4>
 800263e:	4b98      	ldr	r3, [pc, #608]	; (80028a0 <Fast_Mode+0x290>)
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d004      	beq.n	8002650 <Fast_Mode+0x40>
 8002646:	4b96      	ldr	r3, [pc, #600]	; (80028a0 <Fast_Mode+0x290>)
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	2b03      	cmp	r3, #3
 800264c:	f040 80b2 	bne.w	80027b4 <Fast_Mode+0x1a4>
	{
		ds[index]=fabs(v)*(t-t_stamp_boost)/1000;
 8002650:	4b95      	ldr	r3, [pc, #596]	; (80028a8 <Fast_Mode+0x298>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	eef0 7ae7 	vabs.f32	s15, s15
 800265a:	ee17 0a90 	vmov	r0, s15
 800265e:	f7fd ff93 	bl	8000588 <__aeabi_f2d>
 8002662:	4604      	mov	r4, r0
 8002664:	460d      	mov	r5, r1
 8002666:	4b91      	ldr	r3, [pc, #580]	; (80028ac <Fast_Mode+0x29c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff68 	bl	8000544 <__aeabi_ui2d>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd ffdc 	bl	8000638 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <Fast_Mode+0x2a0>)
 800268e:	f7fe f8fd 	bl	800088c <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4987      	ldr	r1, [pc, #540]	; (80028b4 <Fast_Mode+0x2a4>)
 8002698:	7809      	ldrb	r1, [r1, #0]
 800269a:	460c      	mov	r4, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe faa2 	bl	8000be8 <__aeabi_d2f>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4984      	ldr	r1, [pc, #528]	; (80028b8 <Fast_Mode+0x2a8>)
 80026a8:	00a3      	lsls	r3, r4, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	601a      	str	r2, [r3, #0]
		float s_boost = ds[0]+ds[1]+ds[2]+ds[3]+ds[4]+ds[5]+ds[6]+ds[7];
 80026ae:	4b82      	ldr	r3, [pc, #520]	; (80028b8 <Fast_Mode+0x2a8>)
 80026b0:	ed93 7a00 	vldr	s14, [r3]
 80026b4:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <Fast_Mode+0x2a8>)
 80026b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80026ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026be:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <Fast_Mode+0x2a8>)
 80026c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80026c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c8:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <Fast_Mode+0x2a8>)
 80026ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80026ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d2:	4b79      	ldr	r3, [pc, #484]	; (80028b8 <Fast_Mode+0x2a8>)
 80026d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80026d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026dc:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <Fast_Mode+0x2a8>)
 80026de:	edd3 7a05 	vldr	s15, [r3, #20]
 80026e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e6:	4b74      	ldr	r3, [pc, #464]	; (80028b8 <Fast_Mode+0x2a8>)
 80026e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <Fast_Mode+0x2a8>)
 80026f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	edc7 7a06 	vstr	s15, [r7, #24]
		if(s_boost>250.0 && s_boost<800.0 && boostOrBrake==1) // ha 70 és 80 cm közt bekövetkezik 8 vonalszámváltás
 80026fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002702:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80028bc <Fast_Mode+0x2ac>
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	dd41      	ble.n	8002794 <Fast_Mode+0x184>
 8002710:	edd7 7a06 	vldr	s15, [r7, #24]
 8002714:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80028c0 <Fast_Mode+0x2b0>
 8002718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	d538      	bpl.n	8002794 <Fast_Mode+0x184>
 8002722:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <Fast_Mode+0x2b4>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d134      	bne.n	8002794 <Fast_Mode+0x184>
		{
			boostOrBrake=2;
 800272a:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <Fast_Mode+0x2b4>)
 800272c:	2202      	movs	r2, #2
 800272e:	701a      	strb	r2, [r3, #0]
			boostCnt++;
 8002730:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <Fast_Mode+0x2b8>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <Fast_Mode+0x2b8>)
 800273a:	801a      	strh	r2, [r3, #0]
			if((boostCnt==3 || boostCnt==11) && state==SC_MODE)
 800273c:	4b62      	ldr	r3, [pc, #392]	; (80028c8 <Fast_Mode+0x2b8>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d003      	beq.n	800274c <Fast_Mode+0x13c>
 8002744:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <Fast_Mode+0x2b8>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	2b0b      	cmp	r3, #11
 800274a:	d108      	bne.n	800275e <Fast_Mode+0x14e>
 800274c:	7ffb      	ldrb	r3, [r7, #31]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <Fast_Mode+0x14e>
			{
				*state_pointer=OVERTAKE_MODE;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
				return 0;
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e207      	b.n	8002b6e <Fast_Mode+0x55e>
			}
			else if(state==FREERUN_MODE && boostCnt==8)
 800275e:	7ffb      	ldrb	r3, [r7, #31]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <Fast_Mode+0x160>
 8002764:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <Fast_Mode+0x2b8>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d101      	bne.n	8002770 <Fast_Mode+0x160>
			{
				state=SC_MODE;
 800276c:	2300      	movs	r3, #0
 800276e:	77fb      	strb	r3, [r7, #31]
			}
			if(state==FREERUN_MODE)
 8002770:	7ffb      	ldrb	r3, [r7, #31]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d109      	bne.n	800278a <Fast_Mode+0x17a>
			{
				v_ref=3000;
 8002776:	4b55      	ldr	r3, [pc, #340]	; (80028cc <Fast_Mode+0x2bc>)
 8002778:	4a55      	ldr	r2, [pc, #340]	; (80028d0 <Fast_Mode+0x2c0>)
 800277a:	601a      	str	r2, [r3, #0]
				LED_B(1);
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002782:	4854      	ldr	r0, [pc, #336]	; (80028d4 <Fast_Mode+0x2c4>)
 8002784:	f004 f8d2 	bl	800692c <HAL_GPIO_WritePin>
 8002788:	e004      	b.n	8002794 <Fast_Mode+0x184>
			}
			else LED_B_TOGGLE;
 800278a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800278e:	4851      	ldr	r0, [pc, #324]	; (80028d4 <Fast_Mode+0x2c4>)
 8002790:	f004 f8e5 	bl	800695e <HAL_GPIO_TogglePin>
		}
		index++;
 8002794:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <Fast_Mode+0x2a4>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b45      	ldr	r3, [pc, #276]	; (80028b4 <Fast_Mode+0x2a4>)
 800279e:	701a      	strb	r2, [r3, #0]
		if(index>7) index=0;
 80027a0:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <Fast_Mode+0x2a4>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	d902      	bls.n	80027ae <Fast_Mode+0x19e>
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <Fast_Mode+0x2a4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
		t_stamp_boost = t;
 80027ae:	4a3f      	ldr	r2, [pc, #252]	; (80028ac <Fast_Mode+0x29c>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6013      	str	r3, [r2, #0]
	}
	lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 80027b4:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <Fast_Mode+0x290>)
 80027b6:	785a      	ldrb	r2, [r3, #1]
 80027b8:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <Fast_Mode+0x294>)
 80027ba:	701a      	strb	r2, [r3, #0]

	//BRAKING detect -> erre csak gyors üzemmódban van szükség
	if(LINE_CNT > 1) //ha 3 vonalat érzékelünk
 80027bc:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <Fast_Mode+0x290>)
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d950      	bls.n	8002866 <Fast_Mode+0x256>
	{
		s_brake += fabs(v)*(t-t_prev)/1000;
 80027c4:	4b44      	ldr	r3, [pc, #272]	; (80028d8 <Fast_Mode+0x2c8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fedd 	bl	8000588 <__aeabi_f2d>
 80027ce:	4604      	mov	r4, r0
 80027d0:	460d      	mov	r5, r1
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <Fast_Mode+0x298>)
 80027d4:	edd3 7a00 	vldr	s15, [r3]
 80027d8:	eef0 7ae7 	vabs.f32	s15, s15
 80027dc:	ee17 0a90 	vmov	r0, s15
 80027e0:	f7fd fed2 	bl	8000588 <__aeabi_f2d>
 80027e4:	4680      	mov	r8, r0
 80027e6:	4689      	mov	r9, r1
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <Fast_Mode+0x2cc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fea7 	bl	8000544 <__aeabi_ui2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd ff1b 	bl	8000638 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <Fast_Mode+0x2a0>)
 8002810:	f7fe f83c 	bl	800088c <__aeabi_ddiv>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	f7fd fd56 	bl	80002cc <__adddf3>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f9de 	bl	8000be8 <__aeabi_d2f>
 800282c:	4603      	mov	r3, r0
 800282e:	4a2a      	ldr	r2, [pc, #168]	; (80028d8 <Fast_Mode+0x2c8>)
 8002830:	6013      	str	r3, [r2, #0]
		if(s_brake>400) //ha már legalább 30cm óta folyamatosan 3 vonal van alattunk
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <Fast_Mode+0x2c8>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80028e4 <Fast_Mode+0x2d4>
 800283c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	dd13      	ble.n	800286e <Fast_Mode+0x25e>
		{
			boostOrBrake=1;
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <Fast_Mode+0x2b4>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
			if(state == FREERUN_MODE)
 800284c:	7ffb      	ldrb	r3, [r7, #31]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10d      	bne.n	800286e <Fast_Mode+0x25e>
			{
				v_ref = 1500;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <Fast_Mode+0x2bc>)
 8002854:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <Fast_Mode+0x2d0>)
 8002856:	601a      	str	r2, [r3, #0]
				LED_B(0);
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800285e:	481d      	ldr	r0, [pc, #116]	; (80028d4 <Fast_Mode+0x2c4>)
 8002860:	f004 f864 	bl	800692c <HAL_GPIO_WritePin>
 8002864:	e003      	b.n	800286e <Fast_Mode+0x25e>
			}
		}
	}
	else //ha 1 vonalat érzékelünk
	{
		s_brake=0;
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <Fast_Mode+0x2c8>)
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
	}
	t_prev=t;
 800286e:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <Fast_Mode+0x2cc>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6013      	str	r3, [r2, #0]

	/*****SC üzemmód******/
	if(state==SC_MODE)
 8002874:	7ffb      	ldrb	r3, [r7, #31]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d144      	bne.n	8002904 <Fast_Mode+0x2f4>
	{
		uint32_t dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <Fast_Mode+0x290>)
 800287c:	795b      	ldrb	r3, [r3, #5]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <Fast_Mode+0x290>)
 8002882:	7992      	ldrb	r2, [r2, #6]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800288e:	d803      	bhi.n	8002898 <Fast_Mode+0x288>
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <Fast_Mode+0x290>)
 8002892:	791b      	ldrb	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d027      	beq.n	80028e8 <Fast_Mode+0x2d8>
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <Fast_Mode+0x2bc>)
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <Fast_Mode+0x2d0>)
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e031      	b.n	8002904 <Fast_Mode+0x2f4>
 80028a0:	2000062c 	.word	0x2000062c
 80028a4:	20000020 	.word	0x20000020
 80028a8:	20000614 	.word	0x20000614
 80028ac:	20000650 	.word	0x20000650
 80028b0:	408f4000 	.word	0x408f4000
 80028b4:	20000654 	.word	0x20000654
 80028b8:	20000024 	.word	0x20000024
 80028bc:	437a0000 	.word	0x437a0000
 80028c0:	44480000 	.word	0x44480000
 80028c4:	20000044 	.word	0x20000044
 80028c8:	20000638 	.word	0x20000638
 80028cc:	20000280 	.word	0x20000280
 80028d0:	453b8000 	.word	0x453b8000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	20000658 	.word	0x20000658
 80028dc:	2000065c 	.word	0x2000065c
 80028e0:	44bb8000 	.word	0x44bb8000
 80028e4:	43c80000 	.word	0x43c80000
		else v_ref = 2*(float)dist-400;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028f6:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80028e4 <Fast_Mode+0x2d4>
 80028fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028fe:	4ba6      	ldr	r3, [pc, #664]	; (8002b98 <Fast_Mode+0x588>)
 8002900:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/248.0-102;//248
 8002904:	4ba5      	ldr	r3, [pc, #660]	; (8002b9c <Fast_Mode+0x58c>)
 8002906:	789b      	ldrb	r3, [r3, #2]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002910:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002ba0 <Fast_Mode+0x590>
 8002914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002918:	ee17 0a90 	vmov	r0, s15
 800291c:	f7fd fe34 	bl	8000588 <__aeabi_f2d>
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	4b9f      	ldr	r3, [pc, #636]	; (8002ba4 <Fast_Mode+0x594>)
 8002926:	f7fd ffb1 	bl	800088c <__aeabi_ddiv>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b9c      	ldr	r3, [pc, #624]	; (8002ba8 <Fast_Mode+0x598>)
 8002938:	f7fd fcc6 	bl	80002c8 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7fe f950 	bl	8000be8 <__aeabi_d2f>
 8002948:	4603      	mov	r3, r0
 800294a:	4a98      	ldr	r2, [pc, #608]	; (8002bac <Fast_Mode+0x59c>)
 800294c:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/248.0-102; //244
 800294e:	4b93      	ldr	r3, [pc, #588]	; (8002b9c <Fast_Mode+0x58c>)
 8002950:	78db      	ldrb	r3, [r3, #3]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002ba0 <Fast_Mode+0x590>
 800295e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002962:	ee17 0a90 	vmov	r0, s15
 8002966:	f7fd fe0f 	bl	8000588 <__aeabi_f2d>
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <Fast_Mode+0x594>)
 8002970:	f7fd ff8c 	bl	800088c <__aeabi_ddiv>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <Fast_Mode+0x598>)
 8002982:	f7fd fca1 	bl	80002c8 <__aeabi_dsub>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f7fe f92b 	bl	8000be8 <__aeabi_d2f>
 8002992:	4603      	mov	r3, r0
 8002994:	4a86      	ldr	r2, [pc, #536]	; (8002bb0 <Fast_Mode+0x5a0>)
 8002996:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 8002998:	4b84      	ldr	r3, [pc, #528]	; (8002bac <Fast_Mode+0x59c>)
 800299a:	ed93 7a00 	vldr	s14, [r3]
 800299e:	4b84      	ldr	r3, [pc, #528]	; (8002bb0 <Fast_Mode+0x5a0>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	ee17 0a90 	vmov	r0, s15
 80029ac:	f7fd fdec 	bl	8000588 <__aeabi_f2d>
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <Fast_Mode+0x5a4>)
 80029b6:	f7fd ff69 	bl	800088c <__aeabi_ddiv>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	ec43 2b17 	vmov	d7, r2, r3
 80029c2:	eeb0 0a47 	vmov.f32	s0, s14
 80029c6:	eef0 0a67 	vmov.f32	s1, s15
 80029ca:	f00a fce5 	bl	800d398 <atan>
 80029ce:	ec53 2b10 	vmov	r2, r3, d0
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fe f907 	bl	8000be8 <__aeabi_d2f>
 80029da:	4603      	mov	r3, r0
 80029dc:	4a76      	ldr	r2, [pc, #472]	; (8002bb8 <Fast_Mode+0x5a8>)
 80029de:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(state==SC_MODE)
 80029e0:	7ffb      	ldrb	r3, [r7, #31]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <Fast_Mode+0x3ec>
	{
		k_p = -0.004;
 80029e6:	4b75      	ldr	r3, [pc, #468]	; (8002bbc <Fast_Mode+0x5ac>)
 80029e8:	4a75      	ldr	r2, [pc, #468]	; (8002bc0 <Fast_Mode+0x5b0>)
 80029ea:	601a      	str	r2, [r3, #0]
		kD = -0.004;
 80029ec:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <Fast_Mode+0x5b4>)
 80029ee:	4a74      	ldr	r2, [pc, #464]	; (8002bc0 <Fast_Mode+0x5b0>)
 80029f0:	601a      	str	r2, [r3, #0]
		k_delta = 0;
 80029f2:	4b75      	ldr	r3, [pc, #468]	; (8002bc8 <Fast_Mode+0x5b8>)
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e089      	b.n	8002b10 <Fast_Mode+0x500>
	}

	else //FREERUN modes
	{
		if(v>150 || v<-150)
 80029fc:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <Fast_Mode+0x5bc>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002bd0 <Fast_Mode+0x5c0>
 8002a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	dc09      	bgt.n	8002a24 <Fast_Mode+0x414>
 8002a10:	4b6e      	ldr	r3, [pc, #440]	; (8002bcc <Fast_Mode+0x5bc>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002bd4 <Fast_Mode+0x5c4>
 8002a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a22:	d56c      	bpl.n	8002afe <Fast_Mode+0x4ee>
		{
			if(v<2200) //kanyar
 8002a24:	4b69      	ldr	r3, [pc, #420]	; (8002bcc <Fast_Mode+0x5bc>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002bd8 <Fast_Mode+0x5c8>
 8002a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	d50a      	bpl.n	8002a4e <Fast_Mode+0x43e>
			{
				k_p = -0.0026;//-L/(v*v)*S1MULTS2_SLOW;
 8002a38:	4b60      	ldr	r3, [pc, #384]	; (8002bbc <Fast_Mode+0x5ac>)
 8002a3a:	4a68      	ldr	r2, [pc, #416]	; (8002bdc <Fast_Mode+0x5cc>)
 8002a3c:	601a      	str	r2, [r3, #0]
				k_delta = 0;//L/v*(S1ADDS2_SLOW-v*k_p);
 8002a3e:	4b62      	ldr	r3, [pc, #392]	; (8002bc8 <Fast_Mode+0x5b8>)
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
				kD=-0.06;//-0.06
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <Fast_Mode+0x5b4>)
 8002a48:	4a65      	ldr	r2, [pc, #404]	; (8002be0 <Fast_Mode+0x5d0>)
 8002a4a:	601a      	str	r2, [r3, #0]
			if(v<2200) //kanyar
 8002a4c:	e060      	b.n	8002b10 <Fast_Mode+0x500>
			}
			else //egyenes
			{
				k_p = -L/(v*v)*S1MULTS2_SLOW;
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <Fast_Mode+0x5bc>)
 8002a50:	ed93 7a00 	vldr	s14, [r3]
 8002a54:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <Fast_Mode+0x5bc>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	ee17 0a90 	vmov	r0, s15
 8002a62:	f7fd fd91 	bl	8000588 <__aeabi_f2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	a145      	add	r1, pc, #276	; (adr r1, 8002b80 <Fast_Mode+0x570>)
 8002a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a70:	f7fd ff0c 	bl	800088c <__aeabi_ddiv>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	a342      	add	r3, pc, #264	; (adr r3, 8002b88 <Fast_Mode+0x578>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fdd9 	bl	8000638 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7fe f8ab 	bl	8000be8 <__aeabi_d2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <Fast_Mode+0x5ac>)
 8002a96:	6013      	str	r3, [r2, #0]
				k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <Fast_Mode+0x5bc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd73 	bl	8000588 <__aeabi_f2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	a13a      	add	r1, pc, #232	; (adr r1, 8002b90 <Fast_Mode+0x580>)
 8002aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aac:	f7fd feee 	bl	800088c <__aeabi_ddiv>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <Fast_Mode+0x5bc>)
 8002aba:	ed93 7a00 	vldr	s14, [r3]
 8002abe:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <Fast_Mode+0x5ac>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac8:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	ee17 0a90 	vmov	r0, s15
 8002ad4:	f7fd fd58 	bl	8000588 <__aeabi_f2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fdaa 	bl	8000638 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fe f87c 	bl	8000be8 <__aeabi_d2f>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <Fast_Mode+0x5b8>)
 8002af4:	6013      	str	r3, [r2, #0]
				kD=-0.05;
 8002af6:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <Fast_Mode+0x5b4>)
 8002af8:	4a3a      	ldr	r2, [pc, #232]	; (8002be4 <Fast_Mode+0x5d4>)
 8002afa:	601a      	str	r2, [r3, #0]
			if(v<2200) //kanyar
 8002afc:	e008      	b.n	8002b10 <Fast_Mode+0x500>
			}
		}
		else
		{
			k_p=K_P_200;
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <Fast_Mode+0x5ac>)
 8002b00:	4a39      	ldr	r2, [pc, #228]	; (8002be8 <Fast_Mode+0x5d8>)
 8002b02:	601a      	str	r2, [r3, #0]
			k_delta=K_DELTA_200;
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <Fast_Mode+0x5b8>)
 8002b06:	4a39      	ldr	r2, [pc, #228]	; (8002bec <Fast_Mode+0x5dc>)
 8002b08:	601a      	str	r2, [r3, #0]
			kD=-0.06;
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <Fast_Mode+0x5b4>)
 8002b0c:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <Fast_Mode+0x5d0>)
 8002b0e:	601a      	str	r2, [r3, #0]
		}
	}
	gamma = -k_p * x_elso -k_delta * delta - kD * (x_elso-x_elso_prev);
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <Fast_Mode+0x5ac>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eeb1 7a67 	vneg.f32	s14, s15
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <Fast_Mode+0x59c>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <Fast_Mode+0x5b8>)
 8002b26:	edd3 6a00 	vldr	s13, [r3]
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <Fast_Mode+0x5a8>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <Fast_Mode+0x59c>)
 8002b3a:	edd3 6a00 	vldr	s13, [r3]
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <Fast_Mode+0x5e0>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <Fast_Mode+0x5b4>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b56:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <Fast_Mode+0x5e4>)
 8002b58:	edc3 7a00 	vstr	s15, [r3]
	x_elso_prev = x_elso;
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <Fast_Mode+0x59c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a23      	ldr	r2, [pc, #140]	; (8002bf0 <Fast_Mode+0x5e0>)
 8002b62:	6013      	str	r3, [r2, #0]

	*state_pointer=state;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	7ffa      	ldrb	r2, [r7, #31]
 8002b68:	701a      	strb	r2, [r3, #0]
	return gamma;
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <Fast_Mode+0x5e4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
}
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eeb0 0a67 	vmov.f32	s0, s15
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b7e:	bf00      	nop
 8002b80:	00000000 	.word	0x00000000
 8002b84:	c0716000 	.word	0xc0716000
 8002b88:	fd21ff2e 	.word	0xfd21ff2e
 8002b8c:	402275f6 	.word	0x402275f6
 8002b90:	00000000 	.word	0x00000000
 8002b94:	40716000 	.word	0x40716000
 8002b98:	20000280 	.word	0x20000280
 8002b9c:	2000062c 	.word	0x2000062c
 8002ba0:	434c0000 	.word	0x434c0000
 8002ba4:	406f0000 	.word	0x406f0000
 8002ba8:	40598000 	.word	0x40598000
 8002bac:	20000660 	.word	0x20000660
 8002bb0:	20000664 	.word	0x20000664
 8002bb4:	407c4000 	.word	0x407c4000
 8002bb8:	20000668 	.word	0x20000668
 8002bbc:	20000048 	.word	0x20000048
 8002bc0:	bb83126f 	.word	0xbb83126f
 8002bc4:	2000004c 	.word	0x2000004c
 8002bc8:	20000050 	.word	0x20000050
 8002bcc:	20000614 	.word	0x20000614
 8002bd0:	43160000 	.word	0x43160000
 8002bd4:	c3160000 	.word	0xc3160000
 8002bd8:	45098000 	.word	0x45098000
 8002bdc:	bb2a64c3 	.word	0xbb2a64c3
 8002be0:	bd75c28f 	.word	0xbd75c28f
 8002be4:	bd4ccccd 	.word	0xbd4ccccd
 8002be8:	ba30dc42 	.word	0xba30dc42
 8002bec:	bf21eadf 	.word	0xbf21eadf
 8002bf0:	2000066c 	.word	0x2000066c
 8002bf4:	20000670 	.word	0x20000670

08002bf8 <Skill_Mode>:

float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c04:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	int byte=0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
	static int byte_prev=0;
	int delta_byte;
	float p=0;
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 8002c14:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <Skill_Mode+0x234>)
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d803      	bhi.n	8002c24 <Skill_Mode+0x2c>
 8002c1c:	4b84      	ldr	r3, [pc, #528]	; (8002e30 <Skill_Mode+0x238>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d022      	beq.n	8002c6a <Skill_Mode+0x72>
	{
		byte=0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e00a      	b.n	8002c44 <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3302      	adds	r3, #2
 8002c32:	4a7e      	ldr	r2, [pc, #504]	; (8002e2c <Skill_Mode+0x234>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
 8002c36:	461a      	mov	r2, r3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	3301      	adds	r3, #1
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <Skill_Mode+0x234>)
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	dbee      	blt.n	8002c2e <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 8002c50:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <Skill_Mode+0x234>)
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8097 	beq.w	8002d88 <Skill_Mode+0x190>
 8002c5a:	4b74      	ldr	r3, [pc, #464]	; (8002e2c <Skill_Mode+0x234>)
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e08e      	b.n	8002d88 <Skill_Mode+0x190>
	}
	else if((path==LEFT && orientation==FORWARD) || (path==RIGHT && orientation==REVERSE))
 8002c6a:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <Skill_Mode+0x23c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <Skill_Mode+0x82>
 8002c72:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <Skill_Mode+0x240>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <Skill_Mode+0x92>
 8002c7a:	4b6e      	ldr	r3, [pc, #440]	; (8002e34 <Skill_Mode+0x23c>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d10f      	bne.n	8002ca2 <Skill_Mode+0xaa>
 8002c82:	4b6d      	ldr	r3, [pc, #436]	; (8002e38 <Skill_Mode+0x240>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10b      	bne.n	8002ca2 <Skill_Mode+0xaa>
	{
		byte = LINE1; //az első vonalt kell követni
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <Skill_Mode+0x234>)
 8002c8c:	789b      	ldrb	r3, [r3, #2]
 8002c8e:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8002c90:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <Skill_Mode+0x244>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bfb8      	it	lt
 8002c9c:	425b      	neglt	r3, r3
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e072      	b.n	8002d88 <Skill_Mode+0x190>
			estuary=ESTUARY_MODE_OFF;
			LED_G(0);
		}
*/
	}
	else if((path==RIGHT && orientation==FORWARD) || (path==LEFT && orientation==REVERSE))
 8002ca2:	4b64      	ldr	r3, [pc, #400]	; (8002e34 <Skill_Mode+0x23c>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d103      	bne.n	8002cb2 <Skill_Mode+0xba>
 8002caa:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <Skill_Mode+0x240>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <Skill_Mode+0xca>
 8002cb2:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <Skill_Mode+0x23c>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d112      	bne.n	8002ce0 <Skill_Mode+0xe8>
 8002cba:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <Skill_Mode+0x240>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10e      	bne.n	8002ce0 <Skill_Mode+0xe8>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 8002cc2:	4b5a      	ldr	r3, [pc, #360]	; (8002e2c <Skill_Mode+0x234>)
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <Skill_Mode+0x234>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	61fb      	str	r3, [r7, #28]
		delta_byte=abs((int)byte-byte_prev);
 8002cce:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <Skill_Mode+0x244>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bfb8      	it	lt
 8002cda:	425b      	neglt	r3, r3
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e053      	b.n	8002d88 <Skill_Mode+0x190>
			estuary=ESTUARY_MODE_OFF;
			LED_G(0);
		}*/
	}

	else if(path==MIDDLE)
 8002ce0:	4b54      	ldr	r3, [pc, #336]	; (8002e34 <Skill_Mode+0x23c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d14f      	bne.n	8002d88 <Skill_Mode+0x190>
	{
		if(LINE_CNT==1)
 8002ce8:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <Skill_Mode+0x234>)
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10b      	bne.n	8002d08 <Skill_Mode+0x110>
		{
			byte = byte_middle = LINE1;//ha csak 1 vonal van, akkor azt követjük
 8002cf0:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <Skill_Mode+0x234>)
 8002cf2:	789b      	ldrb	r3, [r3, #2]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b52      	ldr	r3, [pc, #328]	; (8002e40 <Skill_Mode+0x248>)
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <Skill_Mode+0x248>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61fb      	str	r3, [r7, #28]
			middleLineState=1;
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <Skill_Mode+0x24c>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e03f      	b.n	8002d88 <Skill_Mode+0x190>
		}
		else if(LINE_CNT==3)//ha 3 vonal van
 8002d08:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <Skill_Mode+0x234>)
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d10b      	bne.n	8002d28 <Skill_Mode+0x130>
		{
			byte = byte_middle = LINE2;//a középsőt követjük
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <Skill_Mode+0x234>)
 8002d12:	78db      	ldrb	r3, [r3, #3]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <Skill_Mode+0x248>)
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <Skill_Mode+0x248>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			middleLineState=1;
 8002d20:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <Skill_Mode+0x24c>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e02f      	b.n	8002d88 <Skill_Mode+0x190>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 8002d28:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <Skill_Mode+0x234>)
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d12b      	bne.n	8002d88 <Skill_Mode+0x190>
		{
			if(middleLineState==1)
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <Skill_Mode+0x24c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d116      	bne.n	8002d66 <Skill_Mode+0x16e>
			{
				tmp1=abs(byte_middle-LINE1);
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <Skill_Mode+0x248>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <Skill_Mode+0x234>)
 8002d3e:	7892      	ldrb	r2, [r2, #2]
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bfb8      	it	lt
 8002d46:	425b      	neglt	r3, r3
 8002d48:	4a3f      	ldr	r2, [pc, #252]	; (8002e48 <Skill_Mode+0x250>)
 8002d4a:	6013      	str	r3, [r2, #0]
				tmp2=abs(byte_middle-LINE2);
 8002d4c:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <Skill_Mode+0x248>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <Skill_Mode+0x234>)
 8002d52:	78d2      	ldrb	r2, [r2, #3]
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bfb8      	it	lt
 8002d5a:	425b      	neglt	r3, r3
 8002d5c:	4a3b      	ldr	r2, [pc, #236]	; (8002e4c <Skill_Mode+0x254>)
 8002d5e:	6013      	str	r3, [r2, #0]
				middleLineState=2;
 8002d60:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <Skill_Mode+0x24c>)
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]
			}
			if(middleLineState==2)
 8002d66:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <Skill_Mode+0x24c>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d10c      	bne.n	8002d88 <Skill_Mode+0x190>
			{
				if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <Skill_Mode+0x250>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <Skill_Mode+0x254>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	da03      	bge.n	8002d82 <Skill_Mode+0x18a>
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <Skill_Mode+0x234>)
 8002d7c:	789b      	ldrb	r3, [r3, #2]
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	e002      	b.n	8002d88 <Skill_Mode+0x190>
				else byte = LINE2; //ha a baloldali vonalat veszítettük el
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <Skill_Mode+0x234>)
 8002d84:	78db      	ldrb	r3, [r3, #3]
 8002d86:	61fb      	str	r3, [r7, #28]
			}
		}
	}
	if(estuary==ESTUARY_MODE_INIT)estuary=ESTUARY_MODE_OFF;
 8002d88:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <Skill_Mode+0x258>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <Skill_Mode+0x19e>
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <Skill_Mode+0x258>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
	//p = (float)byte * 204/248.0-102;
	p = (float)byte * 204/248.0-102;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002e54 <Skill_Mode+0x25c>
 8002da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da8:	ee17 0a90 	vmov	r0, s15
 8002dac:	f7fd fbec 	bl	8000588 <__aeabi_f2d>
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <Skill_Mode+0x260>)
 8002db6:	f7fd fd69 	bl	800088c <__aeabi_ddiv>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <Skill_Mode+0x264>)
 8002dc8:	f7fd fa7e 	bl	80002c8 <__aeabi_dsub>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7fd ff08 	bl	8000be8 <__aeabi_d2f>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 8002ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de0:	eeb1 7a67 	vneg.f32	s14, s15
 8002de4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <Skill_Mode+0x268>)
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	edd7 6a05 	vldr	s13, [r7, #20]
 8002df6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <Skill_Mode+0x26c>)
 8002e08:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <Skill_Mode+0x268>)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <Skill_Mode+0x244>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	6013      	str	r3, [r2, #0]

	return gamma;
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <Skill_Mode+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	ee07 3a90 	vmov	s15, r3
}
 8002e20:	eeb0 0a67 	vmov.f32	s0, s15
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000062c 	.word	0x2000062c
 8002e30:	20000636 	.word	0x20000636
 8002e34:	2000028e 	.word	0x2000028e
 8002e38:	2000028c 	.word	0x2000028c
 8002e3c:	20000674 	.word	0x20000674
 8002e40:	20000678 	.word	0x20000678
 8002e44:	20000054 	.word	0x20000054
 8002e48:	2000067c 	.word	0x2000067c
 8002e4c:	20000680 	.word	0x20000680
 8002e50:	20000684 	.word	0x20000684
 8002e54:	434c0000 	.word	0x434c0000
 8002e58:	406f0000 	.word	0x406f0000
 8002e5c:	40598000 	.word	0x40598000
 8002e60:	20000688 	.word	0x20000688
 8002e64:	2000068c 	.word	0x2000068c

08002e68 <Detect_Node4>:
		ignore=0;
	}
}

void Detect_Node4(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8002e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	static uint32_t t_stamp=0;
	static uint8_t detect_node_state=0;
	static float s=0;

	if(LINE_CNT==4 && !detect_node_state)
 8002e74:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <Detect_Node4+0x100>)
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d111      	bne.n	8002ea0 <Detect_Node4+0x38>
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <Detect_Node4+0x104>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10d      	bne.n	8002ea0 <Detect_Node4+0x38>
	{
		s=0;
 8002e84:	4b3a      	ldr	r3, [pc, #232]	; (8002f70 <Detect_Node4+0x108>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
		detect_node_state=1;//innentől mérünk
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <Detect_Node4+0x104>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
		ignore=1;
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <Detect_Node4+0x10c>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
		t_stamp=t;
 8002e98:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <Detect_Node4+0x110>)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e03e      	b.n	8002f1e <Detect_Node4+0xb6>

	}
	else if(LINE_CNT==4 && detect_node_state)
 8002ea0:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <Detect_Node4+0x100>)
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d13a      	bne.n	8002f1e <Detect_Node4+0xb6>
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <Detect_Node4+0x104>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d036      	beq.n	8002f1e <Detect_Node4+0xb6>
	{
		s+=fabs(v)*(t-t_prev)/1000;
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <Detect_Node4+0x108>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb67 	bl	8000588 <__aeabi_f2d>
 8002eba:	4604      	mov	r4, r0
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <Detect_Node4+0x114>)
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	eef0 7ae7 	vabs.f32	s15, s15
 8002ec8:	ee17 0a90 	vmov	r0, s15
 8002ecc:	f7fd fb5c 	bl	8000588 <__aeabi_f2d>
 8002ed0:	4680      	mov	r8, r0
 8002ed2:	4689      	mov	r9, r1
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <Detect_Node4+0x118>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fb31 	bl	8000544 <__aeabi_ui2d>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	4649      	mov	r1, r9
 8002eea:	f7fd fba5 	bl	8000638 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <Detect_Node4+0x11c>)
 8002efc:	f7fd fcc6 	bl	800088c <__aeabi_ddiv>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd f9e0 	bl	80002cc <__adddf3>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7fd fe68 	bl	8000be8 <__aeabi_d2f>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <Detect_Node4+0x108>)
 8002f1c:	6013      	str	r3, [r2, #0]
	}
	if((t-t_stamp)>230 && detect_node_state)
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <Detect_Node4+0x110>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2be6      	cmp	r3, #230	; 0xe6
 8002f28:	d916      	bls.n	8002f58 <Detect_Node4+0xf0>
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <Detect_Node4+0x104>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <Detect_Node4+0xf0>
	{
		detect_node_state=0;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <Detect_Node4+0x104>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
		ignore=0;
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <Detect_Node4+0x10c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
		if(s>140)//vertical node
		{
			nodeDetected=1; //horizont node

		}
		else*/ if(s>50)//horizontal node
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <Detect_Node4+0x108>)
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f88 <Detect_Node4+0x120>
 8002f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	dd02      	ble.n	8002f58 <Detect_Node4+0xf0>
		{
			nodeDetected=1; //horizont node
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <Detect_Node4+0x124>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]

		}
	}
	t_prev=t;
 8002f58:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <Detect_Node4+0x118>)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6013      	str	r3, [r2, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f68:	2000062c 	.word	0x2000062c
 8002f6c:	20000690 	.word	0x20000690
 8002f70:	20000694 	.word	0x20000694
 8002f74:	20000636 	.word	0x20000636
 8002f78:	20000698 	.word	0x20000698
 8002f7c:	20000614 	.word	0x20000614
 8002f80:	2000069c 	.word	0x2000069c
 8002f84:	408f4000 	.word	0x408f4000
 8002f88:	42480000 	.word	0x42480000
 8002f8c:	2000028d 	.word	0x2000028d

08002f90 <Lane_Changer>:

uint8_t Lane_Changer(uint32_t t)
{
 8002f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
	static uint8_t lineCnt_prev=1;
	static float s=0;
	static int i=0;
	static uint32_t dt[5]={1000,1000,1000,1000,1000};

	if(laneChange<2)return 0;
 8002f9a:	4b79      	ldr	r3, [pc, #484]	; (8003180 <Lane_Changer+0x1f0>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d801      	bhi.n	8002fa6 <Lane_Changer+0x16>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e0e6      	b.n	8003174 <Lane_Changer+0x1e4>
	if(LINE_CNT != lineCnt_prev && (LINE_CNT==1 || LINE_CNT==2) && laneChange==2) //ha változik az alattunk lévő vonalak száma
 8002fa6:	4b77      	ldr	r3, [pc, #476]	; (8003184 <Lane_Changer+0x1f4>)
 8002fa8:	785a      	ldrb	r2, [r3, #1]
 8002faa:	4b77      	ldr	r3, [pc, #476]	; (8003188 <Lane_Changer+0x1f8>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d041      	beq.n	8003036 <Lane_Changer+0xa6>
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <Lane_Changer+0x1f4>)
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d003      	beq.n	8002fc2 <Lane_Changer+0x32>
 8002fba:	4b72      	ldr	r3, [pc, #456]	; (8003184 <Lane_Changer+0x1f4>)
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d139      	bne.n	8003036 <Lane_Changer+0xa6>
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <Lane_Changer+0x1f0>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d135      	bne.n	8003036 <Lane_Changer+0xa6>
	{
		dt[i] = t - t_stamp;
 8002fca:	4b70      	ldr	r3, [pc, #448]	; (800318c <Lane_Changer+0x1fc>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b70      	ldr	r3, [pc, #448]	; (8003190 <Lane_Changer+0x200>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	1a8a      	subs	r2, r1, r2
 8002fd6:	496f      	ldr	r1, [pc, #444]	; (8003194 <Lane_Changer+0x204>)
 8002fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint32_t sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 8002fdc:	4b6d      	ldr	r3, [pc, #436]	; (8003194 <Lane_Changer+0x204>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <Lane_Changer+0x204>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	4b6b      	ldr	r3, [pc, #428]	; (8003194 <Lane_Changer+0x204>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	441a      	add	r2, r3
 8002fec:	4b69      	ldr	r3, [pc, #420]	; (8003194 <Lane_Changer+0x204>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	441a      	add	r2, r3
 8002ff2:	4b68      	ldr	r3, [pc, #416]	; (8003194 <Lane_Changer+0x204>)
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
		if((sum > 250) && (sum < 1000))//ha másfél másodpercen belül van8 váltás
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2bfa      	cmp	r3, #250	; 0xfa
 8002ffe:	d90a      	bls.n	8003016 <Lane_Changer+0x86>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003006:	d206      	bcs.n	8003016 <Lane_Changer+0x86>
		{
			s=0;
 8003008:	4b63      	ldr	r3, [pc, #396]	; (8003198 <Lane_Changer+0x208>)
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
			laneChange=3;
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <Lane_Changer+0x1f0>)
 8003012:	2203      	movs	r2, #3
 8003014:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8003016:	4b5e      	ldr	r3, [pc, #376]	; (8003190 <Lane_Changer+0x200>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <Lane_Changer+0x200>)
 800301e:	6013      	str	r3, [r2, #0]
		if(i>4) i=0;
 8003020:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <Lane_Changer+0x200>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b04      	cmp	r3, #4
 8003026:	dd02      	ble.n	800302e <Lane_Changer+0x9e>
 8003028:	4b59      	ldr	r3, [pc, #356]	; (8003190 <Lane_Changer+0x200>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
		t_stamp = t;
 800302e:	4a57      	ldr	r2, [pc, #348]	; (800318c <Lane_Changer+0x1fc>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6013      	str	r3, [r2, #0]
	{
 8003034:	e096      	b.n	8003164 <Lane_Changer+0x1d4>
	}
	else if(laneChange==3)
 8003036:	4b52      	ldr	r3, [pc, #328]	; (8003180 <Lane_Changer+0x1f0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d172      	bne.n	8003124 <Lane_Changer+0x194>
	{
		s+=fabs(v)*(t-t_prev)/1000;
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <Lane_Changer+0x208>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd faa0 	bl	8000588 <__aeabi_f2d>
 8003048:	4604      	mov	r4, r0
 800304a:	460d      	mov	r5, r1
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <Lane_Changer+0x20c>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	eef0 7ae7 	vabs.f32	s15, s15
 8003056:	ee17 0a90 	vmov	r0, s15
 800305a:	f7fd fa95 	bl	8000588 <__aeabi_f2d>
 800305e:	4680      	mov	r8, r0
 8003060:	4689      	mov	r9, r1
 8003062:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <Lane_Changer+0x210>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fa6a 	bl	8000544 <__aeabi_ui2d>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4640      	mov	r0, r8
 8003076:	4649      	mov	r1, r9
 8003078:	f7fd fade 	bl	8000638 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <Lane_Changer+0x214>)
 800308a:	f7fd fbff 	bl	800088c <__aeabi_ddiv>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4620      	mov	r0, r4
 8003094:	4629      	mov	r1, r5
 8003096:	f7fd f919 	bl	80002cc <__adddf3>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	f7fd fda1 	bl	8000be8 <__aeabi_d2f>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <Lane_Changer+0x208>)
 80030aa:	6013      	str	r3, [r2, #0]
		if(orientation==FORWARD)
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <Lane_Changer+0x218>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d114      	bne.n	80030de <Lane_Changer+0x14e>
		{
			TIM2->CCR1=CCR_FRONT_MAX-40;
 80030b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 80030be:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <Lane_Changer+0x21c>)
 80030c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=1000;
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <Lane_Changer+0x220>)
 80030c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030cc:	601a      	str	r2, [r3, #0]
			laneChange=4;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <Lane_Changer+0x1f0>)
 80030d0:	2204      	movs	r2, #4
 80030d2:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 80030d4:	4a2d      	ldr	r2, [pc, #180]	; (800318c <Lane_Changer+0x1fc>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
			return 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	e04a      	b.n	8003174 <Lane_Changer+0x1e4>
		}
		else if(orientation==REVERSE && s>2000)
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <Lane_Changer+0x218>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d13e      	bne.n	8003164 <Lane_Changer+0x1d4>
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <Lane_Changer+0x208>)
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80031b4 <Lane_Changer+0x224>
 80030f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f8:	dd34      	ble.n	8003164 <Lane_Changer+0x1d4>
		{
			TIM2->CCR1=CCR_FRONT_MIN;
 80030fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR4=CCR_REAR_MIN;
 8003104:	4b29      	ldr	r3, [pc, #164]	; (80031ac <Lane_Changer+0x21c>)
 8003106:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
			timeout=3000;
 800310c:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <Lane_Changer+0x220>)
 800310e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003112:	601a      	str	r2, [r3, #0]
			laneChange=4;
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <Lane_Changer+0x1f0>)
 8003116:	2204      	movs	r2, #4
 8003118:	701a      	strb	r2, [r3, #0]
			t_stamp=t;
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <Lane_Changer+0x1fc>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6013      	str	r3, [r2, #0]
			return 1;
 8003120:	2301      	movs	r3, #1
 8003122:	e027      	b.n	8003174 <Lane_Changer+0x1e4>
		}
	}
	else if(laneChange==4)
 8003124:	4b16      	ldr	r3, [pc, #88]	; (8003180 <Lane_Changer+0x1f0>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11b      	bne.n	8003164 <Lane_Changer+0x1d4>
	{
		LED_Y(0);
 800312c:	2201      	movs	r2, #1
 800312e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003132:	4821      	ldr	r0, [pc, #132]	; (80031b8 <Lane_Changer+0x228>)
 8003134:	f003 fbfa 	bl	800692c <HAL_GPIO_WritePin>
		v_control=SLOW_DOWN;
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <Lane_Changer+0x22c>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
		if((t-t_stamp)>timeout && LINE_CNT>0)
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <Lane_Changer+0x1fc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	1ad2      	subs	r2, r2, r3
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <Lane_Changer+0x220>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d908      	bls.n	8003160 <Lane_Changer+0x1d0>
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <Lane_Changer+0x1f4>)
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <Lane_Changer+0x1d0>
		{
			ignore=1;
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <Lane_Changer+0x230>)
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
			return 0;
 800315c:	2300      	movs	r3, #0
 800315e:	e009      	b.n	8003174 <Lane_Changer+0x1e4>
		}
		else return 1;
 8003160:	2301      	movs	r3, #1
 8003162:	e007      	b.n	8003174 <Lane_Changer+0x1e4>
	}
	lineCnt_prev=LINE_CNT;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <Lane_Changer+0x1f4>)
 8003166:	785a      	ldrb	r2, [r3, #1]
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <Lane_Changer+0x1f8>)
 800316a:	701a      	strb	r2, [r3, #0]
	t_prev=t;
 800316c:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <Lane_Changer+0x210>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
	return 0;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800317e:	bf00      	nop
 8003180:	20000290 	.word	0x20000290
 8003184:	2000062c 	.word	0x2000062c
 8003188:	20000055 	.word	0x20000055
 800318c:	200006a0 	.word	0x200006a0
 8003190:	200006a4 	.word	0x200006a4
 8003194:	20000058 	.word	0x20000058
 8003198:	200006a8 	.word	0x200006a8
 800319c:	20000614 	.word	0x20000614
 80031a0:	200006ac 	.word	0x200006ac
 80031a4:	408f4000 	.word	0x408f4000
 80031a8:	2000028c 	.word	0x2000028c
 80031ac:	40010000 	.word	0x40010000
 80031b0:	200006b0 	.word	0x200006b0
 80031b4:	44fa0000 	.word	0x44fa0000
 80031b8:	40020400 	.word	0x40020400
 80031bc:	20000291 	.word	0x20000291
 80031c0:	20000636 	.word	0x20000636

080031c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ca:	f001 fca3 	bl	8004b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031ce:	f000 f88d 	bl	80032ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031d2:	f000 fdab 	bl	8003d2c <MX_GPIO_Init>
  MX_DMA_Init();
 80031d6:	f000 fd89 	bl	8003cec <MX_DMA_Init>
  MX_TIM2_Init();
 80031da:	f000 fa7d 	bl	80036d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80031de:	f000 fd07 	bl	8003bf0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80031e2:	f000 fb71 	bl	80038c8 <MX_TIM4_Init>
  MX_ADC2_Init();
 80031e6:	f000 f985 	bl	80034f4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80031ea:	f000 faeb 	bl	80037c4 <MX_TIM3_Init>
  MX_UART5_Init();
 80031ee:	f000 fcd5 	bl	8003b9c <MX_UART5_Init>
  MX_USART2_UART_Init();
 80031f2:	f000 fd27 	bl	8003c44 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80031f6:	f000 fc31 	bl	8003a5c <MX_TIM8_Init>
  MX_ADC1_Init();
 80031fa:	f000 f8e9 	bl	80033d0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80031fe:	f000 fd4b 	bl	8003c98 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8003202:	f000 fbdd 	bl	80039c0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8003206:	f000 f9c7 	bl	8003598 <MX_TIM1_Init>
  MX_TIM14_Init();
 800320a:	f000 fca3 	bl	8003b54 <MX_TIM14_Init>
  MX_TIM13_Init();
 800320e:	f000 fc7d 	bl	8003b0c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8,&htim13,&htim14);
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <main+0xec>)
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <main+0xf0>)
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <main+0xf4>)
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <main+0xf8>)
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <main+0xfc>)
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <main+0x100>)
 8003226:	4928      	ldr	r1, [pc, #160]	; (80032c8 <main+0x104>)
 8003228:	4828      	ldr	r0, [pc, #160]	; (80032cc <main+0x108>)
 800322a:	f7fd fec5 	bl	8000fb8 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 800322e:	2108      	movs	r1, #8
 8003230:	4827      	ldr	r0, [pc, #156]	; (80032d0 <main+0x10c>)
 8003232:	f000 fead 	bl	8003f90 <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 8003236:	4a25      	ldr	r2, [pc, #148]	; (80032cc <main+0x108>)
 8003238:	4926      	ldr	r1, [pc, #152]	; (80032d4 <main+0x110>)
 800323a:	4827      	ldr	r0, [pc, #156]	; (80032d8 <main+0x114>)
 800323c:	f7fe fa60 	bl	8001700 <Battery_Voltage_Compensate>

  Mode_Selector(&huart1, &huart5);
 8003240:	4926      	ldr	r1, [pc, #152]	; (80032dc <main+0x118>)
 8003242:	4822      	ldr	r0, [pc, #136]	; (80032cc <main+0x108>)
 8003244:	f7fe f90e 	bl	8001464 <Mode_Selector>
  //Create_Nodes(&huart1);
  //Wait_For_Start_Sigal(&huart3,&huart1);

  orientation=FORWARD;
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <main+0x11c>)
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
  path=RIGHT;
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <main+0x120>)
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
  v_control=NORMAL_VEL;
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <main+0x124>)
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {/**/
	  Measure_Velocity_Task(&htim8,TICK, 4);
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <main+0x104>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2204      	movs	r2, #4
 8003262:	4619      	mov	r1, r3
 8003264:	4814      	ldr	r0, [pc, #80]	; (80032b8 <main+0xf4>)
 8003266:	f7fe fb77 	bl	8001958 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <main+0x104>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003270:	230a      	movs	r3, #10
 8003272:	4916      	ldr	r1, [pc, #88]	; (80032cc <main+0x108>)
 8003274:	4813      	ldr	r0, [pc, #76]	; (80032c4 <main+0x100>)
 8003276:	f7fe fbeb 	bl	8001a50 <Motor_Drive_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 43);
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <main+0x104>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	222b      	movs	r2, #43	; 0x2b
 8003282:	9200      	str	r2, [sp, #0]
 8003284:	4a11      	ldr	r2, [pc, #68]	; (80032cc <main+0x108>)
 8003286:	2108      	movs	r1, #8
 8003288:	4811      	ldr	r0, [pc, #68]	; (80032d0 <main+0x10c>)
 800328a:	f000 fe9d 	bl	8003fc8 <Remote_Control_Task>
	  //Control_Task(&huart1,&htim14,TICK, 23);
	  //Control_Task_2(&huart1,TICK, 23);
	  Line_Track_Task(&huart5, &huart1, TICK, 4);
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <main+0x104>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003294:	2304      	movs	r3, #4
 8003296:	490d      	ldr	r1, [pc, #52]	; (80032cc <main+0x108>)
 8003298:	4810      	ldr	r0, [pc, #64]	; (80032dc <main+0x118>)
 800329a:	f7fe fdc1 	bl	8001e20 <Line_Track_Task>

	  HDI_Read_Task(&huart1,&htim2,TICK, 200);
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <main+0x104>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a4:	23c8      	movs	r3, #200	; 0xc8
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <main+0xfc>)
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <main+0x108>)
 80032aa:	f7fd ff4b 	bl	8001144 <HDI_Read_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 80032ae:	e7d4      	b.n	800325a <main+0x96>
 80032b0:	2000093c 	.word	0x2000093c
 80032b4:	200008f4 	.word	0x200008f4
 80032b8:	200008ac 	.word	0x200008ac
 80032bc:	20000744 	.word	0x20000744
 80032c0:	2000078c 	.word	0x2000078c
 80032c4:	200007d4 	.word	0x200007d4
 80032c8:	20000864 	.word	0x20000864
 80032cc:	20000a28 	.word	0x20000a28
 80032d0:	2000081c 	.word	0x2000081c
 80032d4:	200006b4 	.word	0x200006b4
 80032d8:	200006fc 	.word	0x200006fc
 80032dc:	200009e4 	.word	0x200009e4
 80032e0:	2000028c 	.word	0x2000028c
 80032e4:	2000028e 	.word	0x2000028e
 80032e8:	20000291 	.word	0x20000291

080032ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b094      	sub	sp, #80	; 0x50
 80032f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032f2:	f107 031c 	add.w	r3, r7, #28
 80032f6:	2234      	movs	r2, #52	; 0x34
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f007 f960 	bl	800a5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003300:	f107 0308 	add.w	r3, r7, #8
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <SystemClock_Config+0xdc>)
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	4a2b      	ldr	r2, [pc, #172]	; (80033c8 <SystemClock_Config+0xdc>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6413      	str	r3, [r2, #64]	; 0x40
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <SystemClock_Config+0xdc>)
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800332c:	2300      	movs	r3, #0
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <SystemClock_Config+0xe0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <SystemClock_Config+0xe0>)
 8003336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <SystemClock_Config+0xe0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003348:	2301      	movs	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800334c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003350:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003352:	2302      	movs	r3, #2
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800335c:	2304      	movs	r3, #4
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003360:	23b4      	movs	r3, #180	; 0xb4
 8003362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003364:	2302      	movs	r3, #2
 8003366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003368:	2302      	movs	r3, #2
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800336c:	2302      	movs	r3, #2
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	4618      	mov	r0, r3
 8003376:	f003 febf 	bl	80070f8 <HAL_RCC_OscConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003380:	f000 fe00 	bl	8003f84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003384:	f003 fb1e 	bl	80069c4 <HAL_PWREx_EnableOverDrive>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800338e:	f000 fdf9 	bl	8003f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003392:	230f      	movs	r3, #15
 8003394:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003396:	2302      	movs	r3, #2
 8003398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800339e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	2105      	movs	r1, #5
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fb57 	bl	8006a64 <HAL_RCC_ClockConfig>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80033bc:	f000 fde2 	bl	8003f84 <Error_Handler>
  }
}
 80033c0:	bf00      	nop
 80033c2:	3750      	adds	r7, #80	; 0x50
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40007000 	.word	0x40007000

080033d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033d6:	f107 0320 	add.w	r3, r7, #32
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80033e4:	463b      	mov	r3, r7
 80033e6:	2220      	movs	r2, #32
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f007 f8e8 	bl	800a5c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80033f0:	4b3c      	ldr	r3, [pc, #240]	; (80034e4 <MX_ADC1_Init+0x114>)
 80033f2:	4a3d      	ldr	r2, [pc, #244]	; (80034e8 <MX_ADC1_Init+0x118>)
 80033f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <MX_ADC1_Init+0x114>)
 80033f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033fe:	4b39      	ldr	r3, [pc, #228]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003404:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003406:	2201      	movs	r2, #1
 8003408:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800340a:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <MX_ADC1_Init+0x114>)
 800340c:	2200      	movs	r2, #0
 800340e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <MX_ADC1_Init+0x114>)
 800341a:	2200      	movs	r2, #0
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003420:	4a32      	ldr	r2, [pc, #200]	; (80034ec <MX_ADC1_Init+0x11c>)
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003424:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800342a:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <MX_ADC1_Init+0x114>)
 800342c:	2203      	movs	r2, #3
 800342e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003430:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003438:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <MX_ADC1_Init+0x114>)
 800343a:	2201      	movs	r2, #1
 800343c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800343e:	4829      	ldr	r0, [pc, #164]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003440:	f001 fbfe 	bl	8004c40 <HAL_ADC_Init>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800344a:	f000 fd9b 	bl	8003f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800344e:	2308      	movs	r3, #8
 8003450:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003456:	2307      	movs	r3, #7
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800345a:	f107 0320 	add.w	r3, r7, #32
 800345e:	4619      	mov	r1, r3
 8003460:	4820      	ldr	r0, [pc, #128]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003462:	f001 fd9b 	bl	8004f9c <HAL_ADC_ConfigChannel>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800346c:	f000 fd8a 	bl	8003f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8003470:	2302      	movs	r3, #2
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003474:	f107 0320 	add.w	r3, r7, #32
 8003478:	4619      	mov	r1, r3
 800347a:	481a      	ldr	r0, [pc, #104]	; (80034e4 <MX_ADC1_Init+0x114>)
 800347c:	f001 fd8e 	bl	8004f9c <HAL_ADC_ConfigChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8003486:	f000 fd7d 	bl	8003f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800348a:	2303      	movs	r3, #3
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800348e:	f107 0320 	add.w	r3, r7, #32
 8003492:	4619      	mov	r1, r3
 8003494:	4813      	ldr	r0, [pc, #76]	; (80034e4 <MX_ADC1_Init+0x114>)
 8003496:	f001 fd81 	bl	8004f9c <HAL_ADC_ConfigChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80034a0:	f000 fd70 	bl	8003f84 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80034a4:	2308      	movs	r3, #8
 80034a6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80034a8:	2301      	movs	r3, #1
 80034aa:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80034ac:	2301      	movs	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <MX_ADC1_Init+0x120>)
 80034ba:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80034c8:	463b      	mov	r3, r7
 80034ca:	4619      	mov	r1, r3
 80034cc:	4805      	ldr	r0, [pc, #20]	; (80034e4 <MX_ADC1_Init+0x114>)
 80034ce:	f001 ff93 	bl	80053f8 <HAL_ADCEx_InjectedConfigChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80034d8:	f000 fd54 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034dc:	bf00      	nop
 80034de:	3730      	adds	r7, #48	; 0x30
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200006b4 	.word	0x200006b4
 80034e8:	40012000 	.word	0x40012000
 80034ec:	0f000001 	.word	0x0f000001
 80034f0:	000f0001 	.word	0x000f0001

080034f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034fa:	463b      	mov	r3, r7
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <MX_ADC2_Init+0x98>)
 8003508:	4a21      	ldr	r2, [pc, #132]	; (8003590 <MX_ADC2_Init+0x9c>)
 800350a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <MX_ADC2_Init+0x98>)
 800350e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003512:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <MX_ADC2_Init+0x98>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <MX_ADC2_Init+0x98>)
 800351c:	2200      	movs	r2, #0
 800351e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <MX_ADC2_Init+0x98>)
 8003522:	2200      	movs	r2, #0
 8003524:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <MX_ADC2_Init+0x98>)
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <MX_ADC2_Init+0x98>)
 8003530:	2200      	movs	r2, #0
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003534:	4b15      	ldr	r3, [pc, #84]	; (800358c <MX_ADC2_Init+0x98>)
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <MX_ADC2_Init+0xa0>)
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <MX_ADC2_Init+0x98>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <MX_ADC2_Init+0x98>)
 8003542:	2201      	movs	r2, #1
 8003544:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <MX_ADC2_Init+0x98>)
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800354e:	4b0f      	ldr	r3, [pc, #60]	; (800358c <MX_ADC2_Init+0x98>)
 8003550:	2201      	movs	r2, #1
 8003552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <MX_ADC2_Init+0x98>)
 8003556:	f001 fb73 	bl	8004c40 <HAL_ADC_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003560:	f000 fd10 	bl	8003f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003564:	230d      	movs	r3, #13
 8003566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800356c:	2307      	movs	r3, #7
 800356e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003570:	463b      	mov	r3, r7
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	; (800358c <MX_ADC2_Init+0x98>)
 8003576:	f001 fd11 	bl	8004f9c <HAL_ADC_ConfigChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003580:	f000 fd00 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200006fc 	.word	0x200006fc
 8003590:	40012100 	.word	0x40012100
 8003594:	0f000001 	.word	0x0f000001

08003598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b096      	sub	sp, #88	; 0x58
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800359e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	611a      	str	r2, [r3, #16]
 80035c6:	615a      	str	r2, [r3, #20]
 80035c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	2220      	movs	r2, #32
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f006 fff5 	bl	800a5c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035d6:	4b3e      	ldr	r3, [pc, #248]	; (80036d0 <MX_TIM1_Init+0x138>)
 80035d8:	4a3e      	ldr	r2, [pc, #248]	; (80036d4 <MX_TIM1_Init+0x13c>)
 80035da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 80035dc:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <MX_TIM1_Init+0x138>)
 80035de:	f240 1267 	movw	r2, #359	; 0x167
 80035e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <MX_TIM1_Init+0x138>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <MX_TIM1_Init+0x138>)
 80035ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80035f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <MX_TIM1_Init+0x138>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <MX_TIM1_Init+0x138>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035fe:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <MX_TIM1_Init+0x138>)
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003604:	4832      	ldr	r0, [pc, #200]	; (80036d0 <MX_TIM1_Init+0x138>)
 8003606:	f004 f815 	bl	8007634 <HAL_TIM_Base_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003610:	f000 fcb8 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800361a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800361e:	4619      	mov	r1, r3
 8003620:	482b      	ldr	r0, [pc, #172]	; (80036d0 <MX_TIM1_Init+0x138>)
 8003622:	f004 ff7f 	bl	8008524 <HAL_TIM_ConfigClockSource>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800362c:	f000 fcaa 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003630:	4827      	ldr	r0, [pc, #156]	; (80036d0 <MX_TIM1_Init+0x138>)
 8003632:	f004 f8b7 	bl	80077a4 <HAL_TIM_PWM_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800363c:	f000 fca2 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003640:	2300      	movs	r3, #0
 8003642:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800364c:	4619      	mov	r1, r3
 800364e:	4820      	ldr	r0, [pc, #128]	; (80036d0 <MX_TIM1_Init+0x138>)
 8003650:	f005 fd90 	bl	8009174 <HAL_TIMEx_MasterConfigSynchronization>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800365a:	f000 fc93 	bl	8003f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800365e:	2360      	movs	r3, #96	; 0x60
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 8003662:	f240 23ed 	movw	r3, #749	; 0x2ed
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003668:	2300      	movs	r3, #0
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003670:	2300      	movs	r3, #0
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003674:	2300      	movs	r3, #0
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367c:	220c      	movs	r2, #12
 800367e:	4619      	mov	r1, r3
 8003680:	4813      	ldr	r0, [pc, #76]	; (80036d0 <MX_TIM1_Init+0x138>)
 8003682:	f004 fe8d 	bl	80083a0 <HAL_TIM_PWM_ConfigChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800368c:	f000 fc7a 	bl	8003f84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4807      	ldr	r0, [pc, #28]	; (80036d0 <MX_TIM1_Init+0x138>)
 80036b4:	f005 fdda 	bl	800926c <HAL_TIMEx_ConfigBreakDeadTime>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80036be:	f000 fc61 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036c2:	4803      	ldr	r0, [pc, #12]	; (80036d0 <MX_TIM1_Init+0x138>)
 80036c4:	f000 ff24 	bl	8004510 <HAL_TIM_MspPostInit>

}
 80036c8:	bf00      	nop
 80036ca:	3758      	adds	r7, #88	; 0x58
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000744 	.word	0x20000744
 80036d4:	40010000 	.word	0x40010000

080036d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ec:	f107 0320 	add.w	r3, r7, #32
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
 8003704:	615a      	str	r2, [r3, #20]
 8003706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <MX_TIM2_Init+0xe8>)
 800370a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800370e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <MX_TIM2_Init+0xe8>)
 8003712:	2259      	movs	r2, #89	; 0x59
 8003714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <MX_TIM2_Init+0xe8>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <MX_TIM2_Init+0xe8>)
 800371e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003724:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <MX_TIM2_Init+0xe8>)
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800372a:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <MX_TIM2_Init+0xe8>)
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003730:	4823      	ldr	r0, [pc, #140]	; (80037c0 <MX_TIM2_Init+0xe8>)
 8003732:	f003 ff7f 	bl	8007634 <HAL_TIM_Base_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800373c:	f000 fc22 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800374a:	4619      	mov	r1, r3
 800374c:	481c      	ldr	r0, [pc, #112]	; (80037c0 <MX_TIM2_Init+0xe8>)
 800374e:	f004 fee9 	bl	8008524 <HAL_TIM_ConfigClockSource>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003758:	f000 fc14 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800375c:	4818      	ldr	r0, [pc, #96]	; (80037c0 <MX_TIM2_Init+0xe8>)
 800375e:	f004 f821 	bl	80077a4 <HAL_TIM_PWM_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003768:	f000 fc0c 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003774:	f107 0320 	add.w	r3, r7, #32
 8003778:	4619      	mov	r1, r3
 800377a:	4811      	ldr	r0, [pc, #68]	; (80037c0 <MX_TIM2_Init+0xe8>)
 800377c:	f005 fcfa 	bl	8009174 <HAL_TIMEx_MasterConfigSynchronization>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003786:	f000 fbfd 	bl	8003f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800378a:	2360      	movs	r3, #96	; 0x60
 800378c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 800378e:	f240 23ed 	movw	r3, #749	; 0x2ed
 8003792:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	2200      	movs	r2, #0
 80037a0:	4619      	mov	r1, r3
 80037a2:	4807      	ldr	r0, [pc, #28]	; (80037c0 <MX_TIM2_Init+0xe8>)
 80037a4:	f004 fdfc 	bl	80083a0 <HAL_TIM_PWM_ConfigChannel>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80037ae:	f000 fbe9 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037b2:	4803      	ldr	r0, [pc, #12]	; (80037c0 <MX_TIM2_Init+0xe8>)
 80037b4:	f000 feac 	bl	8004510 <HAL_TIM_MspPostInit>

}
 80037b8:	bf00      	nop
 80037ba:	3738      	adds	r7, #56	; 0x38
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	2000078c 	.word	0x2000078c

080037c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	; 0x38
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037d8:	f107 0320 	add.w	r3, r7, #32
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
 80037f0:	615a      	str	r2, [r3, #20]
 80037f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <MX_TIM3_Init+0xfc>)
 80037f6:	4a33      	ldr	r2, [pc, #204]	; (80038c4 <MX_TIM3_Init+0x100>)
 80037f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <MX_TIM3_Init+0xfc>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8003800:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <MX_TIM3_Init+0xfc>)
 8003802:	2260      	movs	r2, #96	; 0x60
 8003804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003806:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <MX_TIM3_Init+0xfc>)
 8003808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800380c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800380e:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <MX_TIM3_Init+0xfc>)
 8003810:	2200      	movs	r2, #0
 8003812:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <MX_TIM3_Init+0xfc>)
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800381a:	4829      	ldr	r0, [pc, #164]	; (80038c0 <MX_TIM3_Init+0xfc>)
 800381c:	f003 ff0a 	bl	8007634 <HAL_TIM_Base_Init>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003826:	f000 fbad 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800382a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003834:	4619      	mov	r1, r3
 8003836:	4822      	ldr	r0, [pc, #136]	; (80038c0 <MX_TIM3_Init+0xfc>)
 8003838:	f004 fe74 	bl	8008524 <HAL_TIM_ConfigClockSource>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003842:	f000 fb9f 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003846:	481e      	ldr	r0, [pc, #120]	; (80038c0 <MX_TIM3_Init+0xfc>)
 8003848:	f003 ffac 	bl	80077a4 <HAL_TIM_PWM_Init>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003852:	f000 fb97 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800385e:	f107 0320 	add.w	r3, r7, #32
 8003862:	4619      	mov	r1, r3
 8003864:	4816      	ldr	r0, [pc, #88]	; (80038c0 <MX_TIM3_Init+0xfc>)
 8003866:	f005 fc85 	bl	8009174 <HAL_TIMEx_MasterConfigSynchronization>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003870:	f000 fb88 	bl	8003f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003874:	2360      	movs	r3, #96	; 0x60
 8003876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	2200      	movs	r2, #0
 8003888:	4619      	mov	r1, r3
 800388a:	480d      	ldr	r0, [pc, #52]	; (80038c0 <MX_TIM3_Init+0xfc>)
 800388c:	f004 fd88 	bl	80083a0 <HAL_TIM_PWM_ConfigChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003896:	f000 fb75 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	2204      	movs	r2, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4807      	ldr	r0, [pc, #28]	; (80038c0 <MX_TIM3_Init+0xfc>)
 80038a2:	f004 fd7d 	bl	80083a0 <HAL_TIM_PWM_ConfigChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80038ac:	f000 fb6a 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <MX_TIM3_Init+0xfc>)
 80038b2:	f000 fe2d 	bl	8004510 <HAL_TIM_MspPostInit>

}
 80038b6:	bf00      	nop
 80038b8:	3738      	adds	r7, #56	; 0x38
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200007d4 	.word	0x200007d4
 80038c4:	40000400 	.word	0x40000400

080038c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ce:	f107 0318 	add.w	r3, r7, #24
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038dc:	f107 0310 	add.w	r3, r7, #16
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80038e6:	463b      	mov	r3, r7
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <MX_TIM4_Init+0xf0>)
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <MX_TIM4_Init+0xf4>)
 80038f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 80038f8:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <MX_TIM4_Init+0xf0>)
 80038fa:	f240 321f 	movw	r2, #799	; 0x31f
 80038fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003900:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <MX_TIM4_Init+0xf0>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8003906:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <MX_TIM4_Init+0xf0>)
 8003908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800390c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <MX_TIM4_Init+0xf0>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003914:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <MX_TIM4_Init+0xf0>)
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800391a:	4827      	ldr	r0, [pc, #156]	; (80039b8 <MX_TIM4_Init+0xf0>)
 800391c:	f003 fe8a 	bl	8007634 <HAL_TIM_Base_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003926:	f000 fb2d 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800392a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003930:	f107 0318 	add.w	r3, r7, #24
 8003934:	4619      	mov	r1, r3
 8003936:	4820      	ldr	r0, [pc, #128]	; (80039b8 <MX_TIM4_Init+0xf0>)
 8003938:	f004 fdf4 	bl	8008524 <HAL_TIM_ConfigClockSource>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003942:	f000 fb1f 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003946:	481c      	ldr	r0, [pc, #112]	; (80039b8 <MX_TIM4_Init+0xf0>)
 8003948:	f004 f84e 	bl	80079e8 <HAL_TIM_IC_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003952:	f000 fb17 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800395e:	f107 0310 	add.w	r3, r7, #16
 8003962:	4619      	mov	r1, r3
 8003964:	4814      	ldr	r0, [pc, #80]	; (80039b8 <MX_TIM4_Init+0xf0>)
 8003966:	f005 fc05 	bl	8009174 <HAL_TIMEx_MasterConfigSynchronization>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003970:	f000 fb08 	bl	8003f84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003974:	230a      	movs	r3, #10
 8003976:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003978:	2301      	movs	r3, #1
 800397a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003984:	463b      	mov	r3, r7
 8003986:	2208      	movs	r2, #8
 8003988:	4619      	mov	r1, r3
 800398a:	480b      	ldr	r0, [pc, #44]	; (80039b8 <MX_TIM4_Init+0xf0>)
 800398c:	f004 fc6c 	bl	8008268 <HAL_TIM_IC_ConfigChannel>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003996:	f000 faf5 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800399a:	463b      	mov	r3, r7
 800399c:	220c      	movs	r2, #12
 800399e:	4619      	mov	r1, r3
 80039a0:	4805      	ldr	r0, [pc, #20]	; (80039b8 <MX_TIM4_Init+0xf0>)
 80039a2:	f004 fc61 	bl	8008268 <HAL_TIM_IC_ConfigChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 80039ac:	f000 faea 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80039b0:	bf00      	nop
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	2000081c 	.word	0x2000081c
 80039bc:	40000800 	.word	0x40000800

080039c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039c6:	f107 0308 	add.w	r3, r7, #8
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d4:	463b      	mov	r3, r7
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <MX_TIM5_Init+0x94>)
 80039de:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <MX_TIM5_Init+0x98>)
 80039e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <MX_TIM5_Init+0x94>)
 80039e4:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80039e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ea:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <MX_TIM5_Init+0x94>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <MX_TIM5_Init+0x94>)
 80039f2:	f04f 32ff 	mov.w	r2, #4294967295
 80039f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <MX_TIM5_Init+0x94>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <MX_TIM5_Init+0x94>)
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a04:	4813      	ldr	r0, [pc, #76]	; (8003a54 <MX_TIM5_Init+0x94>)
 8003a06:	f003 fe15 	bl	8007634 <HAL_TIM_Base_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003a10:	f000 fab8 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480c      	ldr	r0, [pc, #48]	; (8003a54 <MX_TIM5_Init+0x94>)
 8003a22:	f004 fd7f 	bl	8008524 <HAL_TIM_ConfigClockSource>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003a2c:	f000 faaa 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a30:	2300      	movs	r3, #0
 8003a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a38:	463b      	mov	r3, r7
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4805      	ldr	r0, [pc, #20]	; (8003a54 <MX_TIM5_Init+0x94>)
 8003a3e:	f005 fb99 	bl	8009174 <HAL_TIMEx_MasterConfigSynchronization>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003a48:	f000 fa9c 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000864 	.word	0x20000864
 8003a58:	40000c00 	.word	0x40000c00

08003a5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	; 0x30
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	2224      	movs	r2, #36	; 0x24
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f006 fda8 	bl	800a5c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003a7a:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <MX_TIM8_Init+0xac>)
 8003a7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003a7e:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8003ab4:	230c      	movs	r3, #12
 8003ab6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4619      	mov	r1, r3
 8003ace:	480d      	ldr	r0, [pc, #52]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003ad0:	f004 f98e 	bl	8007df0 <HAL_TIM_Encoder_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003ada:	f000 fa53 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4806      	ldr	r0, [pc, #24]	; (8003b04 <MX_TIM8_Init+0xa8>)
 8003aec:	f005 fb42 	bl	8009174 <HAL_TIMEx_MasterConfigSynchronization>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003af6:	f000 fa45 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	3730      	adds	r7, #48	; 0x30
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200008ac 	.word	0x200008ac
 8003b08:	40010400 	.word	0x40010400

08003b0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <MX_TIM13_Init+0x40>)
 8003b12:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <MX_TIM13_Init+0x44>)
 8003b14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000-1;
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <MX_TIM13_Init+0x40>)
 8003b18:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003b1c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <MX_TIM13_Init+0x40>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <MX_TIM13_Init+0x40>)
 8003b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b2a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <MX_TIM13_Init+0x40>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <MX_TIM13_Init+0x40>)
 8003b34:	2280      	movs	r2, #128	; 0x80
 8003b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003b38:	4804      	ldr	r0, [pc, #16]	; (8003b4c <MX_TIM13_Init+0x40>)
 8003b3a:	f003 fd7b 	bl	8007634 <HAL_TIM_Base_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003b44:	f000 fa1e 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200008f4 	.word	0x200008f4
 8003b50:	40001c00 	.word	0x40001c00

08003b54 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <MX_TIM14_Init+0x40>)
 8003b5a:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <MX_TIM14_Init+0x44>)
 8003b5c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <MX_TIM14_Init+0x40>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <MX_TIM14_Init+0x40>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <MX_TIM14_Init+0x40>)
 8003b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b70:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <MX_TIM14_Init+0x40>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <MX_TIM14_Init+0x40>)
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003b7e:	4805      	ldr	r0, [pc, #20]	; (8003b94 <MX_TIM14_Init+0x40>)
 8003b80:	f003 fd58 	bl	8007634 <HAL_TIM_Base_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003b8a:	f000 f9fb 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000093c 	.word	0x2000093c
 8003b98:	40002000 	.word	0x40002000

08003b9c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <MX_UART5_Init+0x50>)
 8003ba4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003ba8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003bac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003bd2:	4805      	ldr	r0, [pc, #20]	; (8003be8 <MX_UART5_Init+0x4c>)
 8003bd4:	f005 fbb0 	bl	8009338 <HAL_UART_Init>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003bde:	f000 f9d1 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200009e4 	.word	0x200009e4
 8003bec:	40005000 	.word	0x40005000

08003bf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <MX_USART1_UART_Init+0x50>)
 8003bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003c16:	220c      	movs	r2, #12
 8003c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <MX_USART1_UART_Init+0x4c>)
 8003c28:	f005 fb86 	bl	8009338 <HAL_UART_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c32:	f000 f9a7 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000a28 	.word	0x20000a28
 8003c40:	40011000 	.word	0x40011000

08003c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <MX_USART2_UART_Init+0x50>)
 8003c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <MX_USART2_UART_Init+0x4c>)
 8003c7c:	f005 fb5c 	bl	8009338 <HAL_UART_Init>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c86:	f000 f97d 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000a6c 	.word	0x20000a6c
 8003c94:	40004400 	.word	0x40004400

08003c98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <MX_USART3_UART_Init+0x50>)
 8003ca0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ca8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003cbe:	220c      	movs	r2, #12
 8003cc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003cce:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <MX_USART3_UART_Init+0x4c>)
 8003cd0:	f005 fb32 	bl	8009338 <HAL_UART_Init>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003cda:	f000 f953 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000ab0 	.word	0x20000ab0
 8003ce8:	40004800 	.word	0x40004800

08003cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <MX_DMA_Init+0x3c>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <MX_DMA_Init+0x3c>)
 8003cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d00:	6313      	str	r3, [r2, #48]	; 0x30
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <MX_DMA_Init+0x3c>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2100      	movs	r1, #0
 8003d12:	202f      	movs	r0, #47	; 0x2f
 8003d14:	f001 fe09 	bl	800592a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003d18:	202f      	movs	r0, #47	; 0x2f
 8003d1a:	f001 fe22 	bl	8005962 <HAL_NVIC_EnableIRQ>

}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800

08003d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	4b64      	ldr	r3, [pc, #400]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a63      	ldr	r2, [pc, #396]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a5c      	ldr	r2, [pc, #368]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b5a      	ldr	r3, [pc, #360]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	4b56      	ldr	r3, [pc, #344]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a55      	ldr	r2, [pc, #340]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	4b4f      	ldr	r3, [pc, #316]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003dbc:	f043 0308 	orr.w	r3, r3, #8
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <MX_GPIO_Init+0x1ac>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4842      	ldr	r0, [pc, #264]	; (8003edc <MX_GPIO_Init+0x1b0>)
 8003dd4:	f002 fdaa 	bl	800692c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2122      	movs	r1, #34	; 0x22
 8003ddc:	4840      	ldr	r0, [pc, #256]	; (8003ee0 <MX_GPIO_Init+0x1b4>)
 8003dde:	f002 fda5 	bl	800692c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8003de2:	2200      	movs	r2, #0
 8003de4:	f24e 0142 	movw	r1, #57410	; 0xe042
 8003de8:	483e      	ldr	r0, [pc, #248]	; (8003ee4 <MX_GPIO_Init+0x1b8>)
 8003dea:	f002 fd9f 	bl	800692c <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 8003dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003df4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 0314 	add.w	r3, r7, #20
 8003e02:	4619      	mov	r1, r3
 8003e04:	4835      	ldr	r0, [pc, #212]	; (8003edc <MX_GPIO_Init+0x1b0>)
 8003e06:	f002 fbe5 	bl	80065d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e16:	2300      	movs	r3, #0
 8003e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	482e      	ldr	r0, [pc, #184]	; (8003edc <MX_GPIO_Init+0x1b0>)
 8003e22:	f002 fbd7 	bl	80065d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8003e26:	2322      	movs	r3, #34	; 0x22
 8003e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4828      	ldr	r0, [pc, #160]	; (8003ee0 <MX_GPIO_Init+0x1b4>)
 8003e3e:	f002 fbc9 	bl	80065d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8003e42:	f24e 0342 	movw	r3, #57410	; 0xe042
 8003e46:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4822      	ldr	r0, [pc, #136]	; (8003ee4 <MX_GPIO_Init+0x1b8>)
 8003e5c:	f002 fbba 	bl	80065d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 8003e60:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8003e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4619      	mov	r1, r3
 8003e74:	481b      	ldr	r0, [pc, #108]	; (8003ee4 <MX_GPIO_Init+0x1b8>)
 8003e76:	f002 fbad 	bl	80065d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8003e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4814      	ldr	r0, [pc, #80]	; (8003ee0 <MX_GPIO_Init+0x1b4>)
 8003e90:	f002 fba0 	bl	80065d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e94:	2310      	movs	r3, #16
 8003e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ea2:	f107 0314 	add.w	r3, r7, #20
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	480e      	ldr	r0, [pc, #56]	; (8003ee4 <MX_GPIO_Init+0x1b8>)
 8003eaa:	f002 fb93 	bl	80065d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	200a      	movs	r0, #10
 8003eb4:	f001 fd39 	bl	800592a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003eb8:	200a      	movs	r0, #10
 8003eba:	f001 fd52 	bl	8005962 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	2028      	movs	r0, #40	; 0x28
 8003ec4:	f001 fd31 	bl	800592a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ec8:	2028      	movs	r0, #40	; 0x28
 8003eca:	f001 fd4a 	bl	8005962 <HAL_NVIC_EnableIRQ>

}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020800 	.word	0x40020800
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	40020400 	.word	0x40020400

08003ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)B_NUCLEO_ISR(&huart1);
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d102      	bne.n	8003f00 <HAL_GPIO_EXTI_Callback+0x18>
 8003efa:	4806      	ldr	r0, [pc, #24]	; (8003f14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003efc:	f7fd fa20 	bl	8001340 <B_NUCLEO_ISR>
	if(GPIO_Pin == B1_Pin) B1_ISR(&huart1);
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d102      	bne.n	8003f0c <HAL_GPIO_EXTI_Callback+0x24>
 8003f06:	4803      	ldr	r0, [pc, #12]	; (8003f14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003f08:	f7fd f9a6 	bl	8001258 <B1_ISR>
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000a28 	.word	0x20000a28

08003f18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(&huart1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_UART_RxCpltCallback+0x30>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d103      	bne.n	8003f30 <HAL_UART_RxCpltCallback+0x18>
 8003f28:	4807      	ldr	r0, [pc, #28]	; (8003f48 <HAL_UART_RxCpltCallback+0x30>)
 8003f2a:	f7fd f971 	bl	8001210 <Uart_Receive_From_PC_ISR>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
}
 8003f2e:	e007      	b.n	8003f40 <HAL_UART_RxCpltCallback+0x28>
	else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(&huart3, &huart1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a06      	ldr	r2, [pc, #24]	; (8003f4c <HAL_UART_RxCpltCallback+0x34>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <HAL_UART_RxCpltCallback+0x28>
 8003f38:	4903      	ldr	r1, [pc, #12]	; (8003f48 <HAL_UART_RxCpltCallback+0x30>)
 8003f3a:	4804      	ldr	r0, [pc, #16]	; (8003f4c <HAL_UART_RxCpltCallback+0x34>)
 8003f3c:	f7fd fb62 	bl	8001604 <Uart_Receive_Thunderboard_ISR>
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000a28 	.word	0x20000a28
 8003f4c:	20000ab0 	.word	0x20000ab0

08003f50 <Delay>:

void Delay(uint16_t ms)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
	TIM13->CNT=0;
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <Delay+0x2c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		if(__HAL_TIM_GET_COUNTER(&htim13)>ms)break;
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <Delay+0x30>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d800      	bhi.n	8003f6e <Delay+0x1e>
 8003f6c:	e7f8      	b.n	8003f60 <Delay+0x10>
 8003f6e:	bf00      	nop
	}

}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40001c00 	.word	0x40001c00
 8003f80:	200008f4 	.word	0x200008f4

08003f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003f88:	b672      	cpsid	i
}
 8003f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f8c:	e7fe      	b.n	8003f8c <Error_Handler+0x8>
	...

08003f90 <Remote_Control_Init>:
#include <stdlib.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <Remote_Control_Init+0x34>)
 8003f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fa0:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <Remote_Control_Init+0x34>)
 8003fa4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003fa8:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <Remote_Control_Init+0x34>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <Remote_Control_Init+0x34>)
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f003 fd70 	bl	8007a9c <HAL_TIM_IC_Start_DMA>
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000af8 	.word	0x20000af8

08003fc8 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 8003fd6:	4b50      	ldr	r3, [pc, #320]	; (8004118 <Remote_Control_Task+0x150>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	f0c0 8096 	bcc.w	800410e <Remote_Control_Task+0x146>
	remote_control_tick = tick + period;
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <Remote_Control_Task+0x150>)
 8003fea:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8003fec:	201e      	movs	r0, #30
 8003fee:	f001 fcc6 	bl	800597e <HAL_NVIC_DisableIRQ>
	dt0=abs((int)tEdge[1]-tEdge[0]);
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	; (800411c <Remote_Control_Task+0x154>)
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4b49      	ldr	r3, [pc, #292]	; (800411c <Remote_Control_Task+0x154>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bfb8      	it	lt
 8004000:	425b      	neglt	r3, r3
 8004002:	4a47      	ldr	r2, [pc, #284]	; (8004120 <Remote_Control_Task+0x158>)
 8004004:	6013      	str	r3, [r2, #0]
	dt1=abs((int)tEdge[2]-tEdge[1]);
 8004006:	4b45      	ldr	r3, [pc, #276]	; (800411c <Remote_Control_Task+0x154>)
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b44      	ldr	r3, [pc, #272]	; (800411c <Remote_Control_Task+0x154>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	bfb8      	it	lt
 8004014:	425b      	neglt	r3, r3
 8004016:	4a43      	ldr	r2, [pc, #268]	; (8004124 <Remote_Control_Task+0x15c>)
 8004018:	6013      	str	r3, [r2, #0]
	dt2=abs((int)tEdge[0]-tEdge[2]);
 800401a:	4b40      	ldr	r3, [pc, #256]	; (800411c <Remote_Control_Task+0x154>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <Remote_Control_Task+0x154>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bfb8      	it	lt
 8004028:	425b      	neglt	r3, r3
 800402a:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <Remote_Control_Task+0x160>)
 800402c:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 800402e:	201e      	movs	r0, #30
 8004030:	f001 fc97 	bl	8005962 <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8004034:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <Remote_Control_Task+0x158>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	dd06      	ble.n	800404e <Remote_Control_Task+0x86>
 8004040:	4b37      	ldr	r3, [pc, #220]	; (8004120 <Remote_Control_Task+0x158>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004048:	33ff      	adds	r3, #255	; 0xff
 800404a:	4a35      	ldr	r2, [pc, #212]	; (8004120 <Remote_Control_Task+0x158>)
 800404c:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 800404e:	4b35      	ldr	r3, [pc, #212]	; (8004124 <Remote_Control_Task+0x15c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	dd06      	ble.n	8004068 <Remote_Control_Task+0xa0>
 800405a:	4b32      	ldr	r3, [pc, #200]	; (8004124 <Remote_Control_Task+0x15c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004062:	33ff      	adds	r3, #255	; 0xff
 8004064:	4a2f      	ldr	r2, [pc, #188]	; (8004124 <Remote_Control_Task+0x15c>)
 8004066:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8004068:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <Remote_Control_Task+0x160>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	dd06      	ble.n	8004082 <Remote_Control_Task+0xba>
 8004074:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <Remote_Control_Task+0x160>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800407c:	33ff      	adds	r3, #255	; 0xff
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <Remote_Control_Task+0x160>)
 8004080:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 8004082:	4b27      	ldr	r3, [pc, #156]	; (8004120 <Remote_Control_Task+0x158>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b27      	ldr	r3, [pc, #156]	; (8004124 <Remote_Control_Task+0x15c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	da0b      	bge.n	80040a6 <Remote_Control_Task+0xde>
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <Remote_Control_Task+0x158>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b25      	ldr	r3, [pc, #148]	; (8004128 <Remote_Control_Task+0x160>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	da05      	bge.n	80040a6 <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 800409a:	4b21      	ldr	r3, [pc, #132]	; (8004120 <Remote_Control_Task+0x158>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <Remote_Control_Task+0x164>)
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e016      	b.n	80040d4 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 80040a6:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <Remote_Control_Task+0x15c>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <Remote_Control_Task+0x158>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	da0b      	bge.n	80040ca <Remote_Control_Task+0x102>
 80040b2:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <Remote_Control_Task+0x15c>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <Remote_Control_Task+0x160>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	da05      	bge.n	80040ca <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <Remote_Control_Task+0x15c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <Remote_Control_Task+0x164>)
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e004      	b.n	80040d4 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <Remote_Control_Task+0x160>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <Remote_Control_Task+0x164>)
 80040d2:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <Remote_Control_Task+0x164>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b46      	cmp	r3, #70	; 0x46
 80040da:	d903      	bls.n	80040e4 <Remote_Control_Task+0x11c>
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <Remote_Control_Task+0x164>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b63      	cmp	r3, #99	; 0x63
 80040e2:	d904      	bls.n	80040ee <Remote_Control_Task+0x126>
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <Remote_Control_Task+0x164>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ec:	d103      	bne.n	80040f6 <Remote_Control_Task+0x12e>
	{
		//LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <Remote_Control_Task+0x168>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e00c      	b.n	8004110 <Remote_Control_Task+0x148>
	}
	else
	{
		//LED_R(0);
		if(tLow <= 70) motorEnRemote=1;
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <Remote_Control_Task+0x164>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b46      	cmp	r3, #70	; 0x46
 80040fc:	d803      	bhi.n	8004106 <Remote_Control_Task+0x13e>
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <Remote_Control_Task+0x168>)
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	e004      	b.n	8004110 <Remote_Control_Task+0x148>
		else motorEnRemote=2;
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <Remote_Control_Task+0x168>)
 8004108:	2202      	movs	r2, #2
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e000      	b.n	8004110 <Remote_Control_Task+0x148>
	if(remote_control_tick>tick) return;
 800410e:	bf00      	nop
	}
}
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000b04 	.word	0x20000b04
 800411c:	20000af8 	.word	0x20000af8
 8004120:	2000006c 	.word	0x2000006c
 8004124:	20000070 	.word	0x20000070
 8004128:	20000074 	.word	0x20000074
 800412c:	20000078 	.word	0x20000078
 8004130:	20000af4 	.word	0x20000af4

08004134 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_MspInit+0x4c>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	4a0f      	ldr	r2, [pc, #60]	; (8004180 <HAL_MspInit+0x4c>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004148:	6453      	str	r3, [r2, #68]	; 0x44
 800414a:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_MspInit+0x4c>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_MspInit+0x4c>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a08      	ldr	r2, [pc, #32]	; (8004180 <HAL_MspInit+0x4c>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_MspInit+0x4c>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004172:	2007      	movs	r0, #7
 8004174:	f001 fbce 	bl	8005914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	; 0x30
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2e      	ldr	r2, [pc, #184]	; (800425c <HAL_ADC_MspInit+0xd8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d128      	bne.n	80041f8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6453      	str	r3, [r2, #68]	; 0x44
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4a25      	ldr	r2, [pc, #148]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	6313      	str	r3, [r2, #48]	; 0x30
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 80041de:	2301      	movs	r3, #1
 80041e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041e2:	2303      	movs	r3, #3
 80041e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 80041ea:	f107 031c 	add.w	r3, r7, #28
 80041ee:	4619      	mov	r1, r3
 80041f0:	481c      	ldr	r0, [pc, #112]	; (8004264 <HAL_ADC_MspInit+0xe0>)
 80041f2:	f002 f9ef 	bl	80065d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80041f6:	e02c      	b.n	8004252 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <HAL_ADC_MspInit+0xe4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d127      	bne.n	8004252 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	4b16      	ldr	r3, [pc, #88]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 800420c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_ADC_MspInit+0xdc>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 800423a:	2308      	movs	r3, #8
 800423c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800423e:	2303      	movs	r3, #3
 8004240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 8004246:	f107 031c 	add.w	r3, r7, #28
 800424a:	4619      	mov	r1, r3
 800424c:	4807      	ldr	r0, [pc, #28]	; (800426c <HAL_ADC_MspInit+0xe8>)
 800424e:	f002 f9c1 	bl	80065d4 <HAL_GPIO_Init>
}
 8004252:	bf00      	nop
 8004254:	3730      	adds	r7, #48	; 0x30
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40012000 	.word	0x40012000
 8004260:	40023800 	.word	0x40023800
 8004264:	40020400 	.word	0x40020400
 8004268:	40012100 	.word	0x40012100
 800426c:	40020800 	.word	0x40020800

08004270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b090      	sub	sp, #64	; 0x40
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a72      	ldr	r2, [pc, #456]	; (8004458 <HAL_TIM_Base_MspInit+0x1e8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
 8004296:	4b71      	ldr	r3, [pc, #452]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	4a70      	ldr	r2, [pc, #448]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6453      	str	r3, [r2, #68]	; 0x44
 80042a2:	4b6e      	ldr	r3, [pc, #440]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80042ae:	e0cf      	b.n	8004450 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d116      	bne.n	80042e8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	4b67      	ldr	r3, [pc, #412]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a66      	ldr	r2, [pc, #408]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b64      	ldr	r3, [pc, #400]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042d6:	2200      	movs	r2, #0
 80042d8:	2100      	movs	r1, #0
 80042da:	201c      	movs	r0, #28
 80042dc:	f001 fb25 	bl	800592a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042e0:	201c      	movs	r0, #28
 80042e2:	f001 fb3e 	bl	8005962 <HAL_NVIC_EnableIRQ>
}
 80042e6:	e0b3      	b.n	8004450 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM3)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <HAL_TIM_Base_MspInit+0x1f0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	4b59      	ldr	r3, [pc, #356]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b56      	ldr	r3, [pc, #344]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	6a3b      	ldr	r3, [r7, #32]
}
 800430e:	e09f      	b.n	8004450 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM4)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a53      	ldr	r2, [pc, #332]	; (8004464 <HAL_TIM_Base_MspInit+0x1f4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d15f      	bne.n	80043da <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a4e      	ldr	r2, [pc, #312]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b4c      	ldr	r3, [pc, #304]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	4b48      	ldr	r3, [pc, #288]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	4a47      	ldr	r2, [pc, #284]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	6313      	str	r3, [r2, #48]	; 0x30
 8004346:	4b45      	ldr	r3, [pc, #276]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8004352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004358:	2302      	movs	r3, #2
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	2300      	movs	r3, #0
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004364:	2302      	movs	r3, #2
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800436c:	4619      	mov	r1, r3
 800436e:	483e      	ldr	r0, [pc, #248]	; (8004468 <HAL_TIM_Base_MspInit+0x1f8>)
 8004370:	f002 f930 	bl	80065d4 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8004374:	4b3d      	ldr	r3, [pc, #244]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 8004376:	4a3e      	ldr	r2, [pc, #248]	; (8004470 <HAL_TIM_Base_MspInit+0x200>)
 8004378:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800437a:	4b3c      	ldr	r3, [pc, #240]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 800437c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004380:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004382:	4b3a      	ldr	r3, [pc, #232]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 8004384:	2200      	movs	r2, #0
 8004386:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004388:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 800438a:	2200      	movs	r2, #0
 800438c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 8004390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004394:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004396:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 8004398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800439c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800439e:	4b33      	ldr	r3, [pc, #204]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 80043a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043a4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80043a6:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 80043a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ac:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80043ae:	4b2f      	ldr	r3, [pc, #188]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 80043b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043b4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043b6:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80043bc:	482b      	ldr	r0, [pc, #172]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 80043be:	f001 faf9 	bl	80059b4 <HAL_DMA_Init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 80043c8:	f7ff fddc 	bl	8003f84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a27      	ldr	r2, [pc, #156]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 80043d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80043d2:	4a26      	ldr	r2, [pc, #152]	; (800446c <HAL_TIM_Base_MspInit+0x1fc>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80043d8:	e03a      	b.n	8004450 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM5)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a25      	ldr	r2, [pc, #148]	; (8004474 <HAL_TIM_Base_MspInit+0x204>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10e      	bne.n	8004402 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80043ee:	f043 0308 	orr.w	r3, r3, #8
 80043f2:	6413      	str	r3, [r2, #64]	; 0x40
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
}
 8004400:	e026      	b.n	8004450 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM13)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_TIM_Base_MspInit+0x208>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10e      	bne.n	800442a <HAL_TIM_Base_MspInit+0x1ba>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	6413      	str	r3, [r2, #64]	; 0x40
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	693b      	ldr	r3, [r7, #16]
}
 8004428:	e012      	b.n	8004450 <HAL_TIM_Base_MspInit+0x1e0>
  else if(htim_base->Instance==TIM14)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a13      	ldr	r2, [pc, #76]	; (800447c <HAL_TIM_Base_MspInit+0x20c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d10d      	bne.n	8004450 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_TIM_Base_MspInit+0x1ec>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	bf00      	nop
 8004452:	3740      	adds	r7, #64	; 0x40
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40010000 	.word	0x40010000
 800445c:	40023800 	.word	0x40023800
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40020400 	.word	0x40020400
 800446c:	20000984 	.word	0x20000984
 8004470:	400260b8 	.word	0x400260b8
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40001c00 	.word	0x40001c00
 800447c:	40002000 	.word	0x40002000

08004480 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <HAL_TIM_Encoder_MspInit+0x84>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d12b      	bne.n	80044fa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_TIM_Encoder_MspInit+0x88>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <HAL_TIM_Encoder_MspInit+0x88>)
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	6453      	str	r3, [r2, #68]	; 0x44
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_TIM_Encoder_MspInit+0x88>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_TIM_Encoder_MspInit+0x88>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <HAL_TIM_Encoder_MspInit+0x88>)
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	6313      	str	r3, [r2, #48]	; 0x30
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_TIM_Encoder_MspInit+0x88>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044da:	23c0      	movs	r3, #192	; 0xc0
 80044dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044de:	2302      	movs	r3, #2
 80044e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80044ea:	2303      	movs	r3, #3
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	4619      	mov	r1, r3
 80044f4:	4805      	ldr	r0, [pc, #20]	; (800450c <HAL_TIM_Encoder_MspInit+0x8c>)
 80044f6:	f002 f86d 	bl	80065d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80044fa:	bf00      	nop
 80044fc:	3728      	adds	r7, #40	; 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40010400 	.word	0x40010400
 8004508:	40023800 	.word	0x40023800
 800450c:	40020800 	.word	0x40020800

08004510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a37      	ldr	r2, [pc, #220]	; (800460c <HAL_TIM_MspPostInit+0xfc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d11f      	bne.n	8004572 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	4b36      	ldr	r3, [pc, #216]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a35      	ldr	r2, [pc, #212]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b33      	ldr	r3, [pc, #204]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 800454e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004554:	2302      	movs	r3, #2
 8004556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004560:	2301      	movs	r3, #1
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	4619      	mov	r1, r3
 800456a:	482a      	ldr	r0, [pc, #168]	; (8004614 <HAL_TIM_MspPostInit+0x104>)
 800456c:	f002 f832 	bl	80065d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004570:	e047      	b.n	8004602 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d11f      	bne.n	80045bc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	4a22      	ldr	r2, [pc, #136]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6313      	str	r3, [r2, #48]	; 0x30
 800458c:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 8004598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	2302      	movs	r3, #2
 80045a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a6:	2300      	movs	r3, #0
 80045a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045aa:	2301      	movs	r3, #1
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 80045ae:	f107 0314 	add.w	r3, r7, #20
 80045b2:	4619      	mov	r1, r3
 80045b4:	4817      	ldr	r0, [pc, #92]	; (8004614 <HAL_TIM_MspPostInit+0x104>)
 80045b6:	f002 f80d 	bl	80065d4 <HAL_GPIO_Init>
}
 80045ba:	e022      	b.n	8004602 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <HAL_TIM_MspPostInit+0x108>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d11d      	bne.n	8004602 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	4a10      	ldr	r2, [pc, #64]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6313      	str	r3, [r2, #48]	; 0x30
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <HAL_TIM_MspPostInit+0x100>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 80045e2:	23c0      	movs	r3, #192	; 0xc0
 80045e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045f2:	2302      	movs	r3, #2
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	4619      	mov	r1, r3
 80045fc:	4805      	ldr	r0, [pc, #20]	; (8004614 <HAL_TIM_MspPostInit+0x104>)
 80045fe:	f001 ffe9 	bl	80065d4 <HAL_GPIO_Init>
}
 8004602:	bf00      	nop
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40010000 	.word	0x40010000
 8004610:	40023800 	.word	0x40023800
 8004614:	40020000 	.word	0x40020000
 8004618:	40000400 	.word	0x40000400

0800461c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b090      	sub	sp, #64	; 0x40
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a7c      	ldr	r2, [pc, #496]	; (800482c <HAL_UART_MspInit+0x210>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d14b      	bne.n	80046d6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
 8004642:	4b7b      	ldr	r3, [pc, #492]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a7a      	ldr	r2, [pc, #488]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b78      	ldr	r3, [pc, #480]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	4b74      	ldr	r3, [pc, #464]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a73      	ldr	r2, [pc, #460]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b71      	ldr	r3, [pc, #452]	; (8004830 <HAL_UART_MspInit+0x214>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_UART_MspInit+0x214>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a6c      	ldr	r2, [pc, #432]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004680:	f043 0308 	orr.w	r3, r3, #8
 8004684:	6313      	str	r3, [r2, #48]	; 0x30
 8004686:	4b6a      	ldr	r3, [pc, #424]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8004692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004698:	2302      	movs	r3, #2
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	2300      	movs	r3, #0
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a0:	2303      	movs	r3, #3
 80046a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80046a4:	2308      	movs	r3, #8
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 80046a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ac:	4619      	mov	r1, r3
 80046ae:	4861      	ldr	r0, [pc, #388]	; (8004834 <HAL_UART_MspInit+0x218>)
 80046b0:	f001 ff90 	bl	80065d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 80046b4:	2304      	movs	r3, #4
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b8:	2302      	movs	r3, #2
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c0:	2303      	movs	r3, #3
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80046c4:	2308      	movs	r3, #8
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 80046c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046cc:	4619      	mov	r1, r3
 80046ce:	485a      	ldr	r0, [pc, #360]	; (8004838 <HAL_UART_MspInit+0x21c>)
 80046d0:	f001 ff80 	bl	80065d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80046d4:	e0a6      	b.n	8004824 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a58      	ldr	r2, [pc, #352]	; (800483c <HAL_UART_MspInit+0x220>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d135      	bne.n	800474c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80046e0:	2300      	movs	r3, #0
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	4b52      	ldr	r3, [pc, #328]	; (8004830 <HAL_UART_MspInit+0x214>)
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	4a51      	ldr	r2, [pc, #324]	; (8004830 <HAL_UART_MspInit+0x214>)
 80046ea:	f043 0310 	orr.w	r3, r3, #16
 80046ee:	6453      	str	r3, [r2, #68]	; 0x44
 80046f0:	4b4f      	ldr	r3, [pc, #316]	; (8004830 <HAL_UART_MspInit+0x214>)
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	4a4a      	ldr	r2, [pc, #296]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6313      	str	r3, [r2, #48]	; 0x30
 800470c:	4b48      	ldr	r3, [pc, #288]	; (8004830 <HAL_UART_MspInit+0x214>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8004718:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004726:	2303      	movs	r3, #3
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800472a:	2307      	movs	r3, #7
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004732:	4619      	mov	r1, r3
 8004734:	4842      	ldr	r0, [pc, #264]	; (8004840 <HAL_UART_MspInit+0x224>)
 8004736:	f001 ff4d 	bl	80065d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2100      	movs	r1, #0
 800473e:	2025      	movs	r0, #37	; 0x25
 8004740:	f001 f8f3 	bl	800592a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004744:	2025      	movs	r0, #37	; 0x25
 8004746:	f001 f90c 	bl	8005962 <HAL_NVIC_EnableIRQ>
}
 800474a:	e06b      	b.n	8004824 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <HAL_UART_MspInit+0x228>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d12c      	bne.n	80047b0 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	4b35      	ldr	r3, [pc, #212]	; (8004830 <HAL_UART_MspInit+0x214>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	4a34      	ldr	r2, [pc, #208]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
 8004766:	4b32      	ldr	r3, [pc, #200]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	4a2d      	ldr	r2, [pc, #180]	; (8004830 <HAL_UART_MspInit+0x214>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	6313      	str	r3, [r2, #48]	; 0x30
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_UART_MspInit+0x214>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800478e:	230c      	movs	r3, #12
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004792:	2302      	movs	r3, #2
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800479a:	2303      	movs	r3, #3
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800479e:	2307      	movs	r3, #7
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047a6:	4619      	mov	r1, r3
 80047a8:	4825      	ldr	r0, [pc, #148]	; (8004840 <HAL_UART_MspInit+0x224>)
 80047aa:	f001 ff13 	bl	80065d4 <HAL_GPIO_Init>
}
 80047ae:	e039      	b.n	8004824 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a24      	ldr	r2, [pc, #144]	; (8004848 <HAL_UART_MspInit+0x22c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d134      	bne.n	8004824 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <HAL_UART_MspInit+0x214>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_UART_MspInit+0x214>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_UART_MspInit+0x214>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b15      	ldr	r3, [pc, #84]	; (8004830 <HAL_UART_MspInit+0x214>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a14      	ldr	r2, [pc, #80]	; (8004830 <HAL_UART_MspInit+0x214>)
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_UART_MspInit+0x214>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 80047f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004800:	2303      	movs	r3, #3
 8004802:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004804:	2307      	movs	r3, #7
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800480c:	4619      	mov	r1, r3
 800480e:	4809      	ldr	r0, [pc, #36]	; (8004834 <HAL_UART_MspInit+0x218>)
 8004810:	f001 fee0 	bl	80065d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004814:	2200      	movs	r2, #0
 8004816:	2100      	movs	r1, #0
 8004818:	2027      	movs	r0, #39	; 0x27
 800481a:	f001 f886 	bl	800592a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800481e:	2027      	movs	r0, #39	; 0x27
 8004820:	f001 f89f 	bl	8005962 <HAL_NVIC_EnableIRQ>
}
 8004824:	bf00      	nop
 8004826:	3740      	adds	r7, #64	; 0x40
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40005000 	.word	0x40005000
 8004830:	40023800 	.word	0x40023800
 8004834:	40020800 	.word	0x40020800
 8004838:	40020c00 	.word	0x40020c00
 800483c:	40011000 	.word	0x40011000
 8004840:	40020000 	.word	0x40020000
 8004844:	40004400 	.word	0x40004400
 8004848:	40004800 	.word	0x40004800

0800484c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004850:	e7fe      	b.n	8004850 <NMI_Handler+0x4>

08004852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004856:	e7fe      	b.n	8004856 <HardFault_Handler+0x4>

08004858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800485c:	e7fe      	b.n	800485c <MemManage_Handler+0x4>

0800485e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <BusFault_Handler+0x4>

08004864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <UsageFault_Handler+0x4>

0800486a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004898:	f000 f98e 	bl	8004bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}

080048a0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80048a4:	2010      	movs	r0, #16
 80048a6:	f002 f875 	bl	8006994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048b4:	4802      	ldr	r0, [pc, #8]	; (80048c0 <TIM2_IRQHandler+0x10>)
 80048b6:	f003 fbcf 	bl	8008058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	2000078c 	.word	0x2000078c

080048c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048c8:	4802      	ldr	r0, [pc, #8]	; (80048d4 <USART1_IRQHandler+0x10>)
 80048ca:	f004 fee7 	bl	800969c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000a28 	.word	0x20000a28

080048d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80048dc:	4802      	ldr	r0, [pc, #8]	; (80048e8 <USART3_IRQHandler+0x10>)
 80048de:	f004 fedd 	bl	800969c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000ab0 	.word	0x20000ab0

080048ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 80048f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048f4:	f002 f84e 	bl	8006994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8004900:	4802      	ldr	r0, [pc, #8]	; (800490c <DMA1_Stream7_IRQHandler+0x10>)
 8004902:	f001 f9ef 	bl	8005ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000984 	.word	0x20000984

08004910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
	return 1;
 8004914:	2301      	movs	r3, #1
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_kill>:

int _kill(int pid, int sig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800492a:	f005 fe1f 	bl	800a56c <__errno>
 800492e:	4603      	mov	r3, r0
 8004930:	2216      	movs	r2, #22
 8004932:	601a      	str	r2, [r3, #0]
	return -1;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <_exit>:

void _exit (int status)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004948:	f04f 31ff 	mov.w	r1, #4294967295
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ffe7 	bl	8004920 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004952:	e7fe      	b.n	8004952 <_exit+0x12>

08004954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e00a      	b.n	800497c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004966:	f3af 8000 	nop.w
 800496a:	4601      	mov	r1, r0
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	60ba      	str	r2, [r7, #8]
 8004972:	b2ca      	uxtb	r2, r1
 8004974:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	dbf0      	blt.n	8004966 <_read+0x12>
	}

return len;
 8004984:	687b      	ldr	r3, [r7, #4]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e009      	b.n	80049b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	60ba      	str	r2, [r7, #8]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	dbf1      	blt.n	80049a0 <_write+0x12>
	}
	return len;
 80049bc:	687b      	ldr	r3, [r7, #4]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <_close>:

int _close(int file)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
	return -1;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049ee:	605a      	str	r2, [r3, #4]
	return 0;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <_isatty>:

int _isatty(int file)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	return 1;
 8004a06:	2301      	movs	r3, #1
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
	return 0;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a38:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <_sbrk+0x5c>)
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <_sbrk+0x60>)
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a44:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <_sbrk+0x64>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a4c:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <_sbrk+0x64>)
 8004a4e:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <_sbrk+0x68>)
 8004a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <_sbrk+0x64>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d207      	bcs.n	8004a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a60:	f005 fd84 	bl	800a56c <__errno>
 8004a64:	4603      	mov	r3, r0
 8004a66:	220c      	movs	r2, #12
 8004a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	e009      	b.n	8004a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <_sbrk+0x64>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <_sbrk+0x64>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <_sbrk+0x64>)
 8004a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20020000 	.word	0x20020000
 8004a90:	00000400 	.word	0x00000400
 8004a94:	20000b08 	.word	0x20000b08
 8004a98:	20000b40 	.word	0x20000b40

08004a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <SystemInit+0x20>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	4a05      	ldr	r2, [pc, #20]	; (8004abc <SystemInit+0x20>)
 8004aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8004ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ac4:	480d      	ldr	r0, [pc, #52]	; (8004afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ac6:	490e      	ldr	r1, [pc, #56]	; (8004b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ac8:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004acc:	e002      	b.n	8004ad4 <LoopCopyDataInit>

08004ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ad2:	3304      	adds	r3, #4

08004ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad8:	d3f9      	bcc.n	8004ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004adc:	4c0b      	ldr	r4, [pc, #44]	; (8004b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae0:	e001      	b.n	8004ae6 <LoopFillZerobss>

08004ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ae4:	3204      	adds	r2, #4

08004ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae8:	d3fb      	bcc.n	8004ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004aea:	f7ff ffd7 	bl	8004a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aee:	f005 fd43 	bl	800a578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004af2:	f7fe fb67 	bl	80031c4 <main>
  bx  lr    
 8004af6:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8004af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b00:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8004b04:	0800efb8 	.word	0x0800efb8
  ldr r2, =_sbss
 8004b08:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8004b0c:	20000b40 	.word	0x20000b40

08004b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b10:	e7fe      	b.n	8004b10 <ADC_IRQHandler>
	...

08004b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b18:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <HAL_Init+0x40>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <HAL_Init+0x40>)
 8004b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_Init+0x40>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <HAL_Init+0x40>)
 8004b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <HAL_Init+0x40>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <HAL_Init+0x40>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b3c:	2003      	movs	r0, #3
 8004b3e:	f000 fee9 	bl	8005914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b42:	2000      	movs	r0, #0
 8004b44:	f000 f808 	bl	8004b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b48:	f7ff faf4 	bl	8004134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023c00 	.word	0x40023c00

08004b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b60:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_InitTick+0x54>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_InitTick+0x58>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 ff0f 	bl	800599a <HAL_SYSTICK_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e00e      	b.n	8004ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d80a      	bhi.n	8004ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	f000 fec9 	bl	800592a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b98:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <HAL_InitTick+0x5c>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	2000007c 	.word	0x2000007c
 8004bb0:	20000084 	.word	0x20000084
 8004bb4:	20000080 	.word	0x20000080

08004bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_IncTick+0x20>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_IncTick+0x24>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <HAL_IncTick+0x24>)
 8004bca:	6013      	str	r3, [r2, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	20000084 	.word	0x20000084
 8004bdc:	20000b0c 	.word	0x20000b0c

08004be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return uwTick;
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <HAL_GetTick+0x14>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000b0c 	.word	0x20000b0c

08004bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c00:	f7ff ffee 	bl	8004be0 <HAL_GetTick>
 8004c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d005      	beq.n	8004c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_Delay+0x44>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c1e:	bf00      	nop
 8004c20:	f7ff ffde 	bl	8004be0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d8f7      	bhi.n	8004c20 <HAL_Delay+0x28>
  {
  }
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000084 	.word	0x20000084

08004c40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e033      	b.n	8004cbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fa90 	bl	8004184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d118      	bne.n	8004cb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c86:	f023 0302 	bic.w	r3, r3, #2
 8004c8a:	f043 0202 	orr.w	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fab4 	bl	8005200 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
 8004cae:	e001      	b.n	8004cb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_ADC_Start+0x1a>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0b2      	b.n	8004e48 <HAL_ADC_Start+0x180>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d018      	beq.n	8004d2a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d08:	4b52      	ldr	r3, [pc, #328]	; (8004e54 <HAL_ADC_Start+0x18c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a52      	ldr	r2, [pc, #328]	; (8004e58 <HAL_ADC_Start+0x190>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	0c9a      	lsrs	r2, r3, #18
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d1c:	e002      	b.n	8004d24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f9      	bne.n	8004d1e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d17a      	bne.n	8004e2e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	d106      	bne.n	8004d86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	f023 0206 	bic.w	r2, r3, #6
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	645a      	str	r2, [r3, #68]	; 0x44
 8004d84:	e002      	b.n	8004d8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <HAL_ADC_Start+0x194>)
 8004d96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004da0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d12a      	bne.n	8004e04 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <HAL_ADC_Start+0x198>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d015      	beq.n	8004de4 <HAL_ADC_Start+0x11c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <HAL_ADC_Start+0x19c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d105      	bne.n	8004dce <HAL_ADC_Start+0x106>
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_ADC_Start+0x194>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <HAL_ADC_Start+0x1a0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d136      	bne.n	8004e46 <HAL_ADC_Start+0x17e>
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_ADC_Start+0x194>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d130      	bne.n	8004e46 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d129      	bne.n	8004e46 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e00:	609a      	str	r2, [r3, #8]
 8004e02:	e020      	b.n	8004e46 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <HAL_ADC_Start+0x198>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d11b      	bne.n	8004e46 <HAL_ADC_Start+0x17e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d114      	bne.n	8004e46 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	e00b      	b.n	8004e46 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f043 0210 	orr.w	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	2000007c 	.word	0x2000007c
 8004e58:	431bde83 	.word	0x431bde83
 8004e5c:	40012300 	.word	0x40012300
 8004e60:	40012000 	.word	0x40012000
 8004e64:	40012100 	.word	0x40012100
 8004e68:	40012200 	.word	0x40012200

08004e6c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e88:	d113      	bne.n	8004eb2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e98:	d10b      	bne.n	8004eb2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e063      	b.n	8004f7a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004eb2:	f7ff fe95 	bl	8004be0 <HAL_GetTick>
 8004eb6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004eb8:	e021      	b.n	8004efe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d01d      	beq.n	8004efe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_ADC_PollForConversion+0x6c>
 8004ec8:	f7ff fe8a 	bl	8004be0 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d212      	bcs.n	8004efe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d00b      	beq.n	8004efe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f043 0204 	orr.w	r2, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e03d      	b.n	8004f7a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d1d6      	bne.n	8004eba <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0212 	mvn.w	r2, #18
 8004f14:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d123      	bne.n	8004f78 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d11f      	bne.n	8004f78 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d006      	beq.n	8004f54 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d111      	bne.n	8004f78 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d105      	bne.n	8004f78 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x1c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e113      	b.n	80051e0 <HAL_ADC_ConfigChannel+0x244>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d925      	bls.n	8005014 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68d9      	ldr	r1, [r3, #12]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	3b1e      	subs	r3, #30
 8004fde:	2207      	movs	r2, #7
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43da      	mvns	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	400a      	ands	r2, r1
 8004fec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68d9      	ldr	r1, [r3, #12]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4618      	mov	r0, r3
 8005000:	4603      	mov	r3, r0
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4403      	add	r3, r0
 8005006:	3b1e      	subs	r3, #30
 8005008:	409a      	lsls	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	e022      	b.n	800505a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6919      	ldr	r1, [r3, #16]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	4613      	mov	r3, r2
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	4413      	add	r3, r2
 8005028:	2207      	movs	r2, #7
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43da      	mvns	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	400a      	ands	r2, r1
 8005036:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6919      	ldr	r1, [r3, #16]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	4618      	mov	r0, r3
 800504a:	4603      	mov	r3, r0
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4403      	add	r3, r0
 8005050:	409a      	lsls	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b06      	cmp	r3, #6
 8005060:	d824      	bhi.n	80050ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	3b05      	subs	r3, #5
 8005074:	221f      	movs	r2, #31
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43da      	mvns	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	400a      	ands	r2, r1
 8005082:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	4618      	mov	r0, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	3b05      	subs	r3, #5
 800509e:	fa00 f203 	lsl.w	r2, r0, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	635a      	str	r2, [r3, #52]	; 0x34
 80050aa:	e04c      	b.n	8005146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	d824      	bhi.n	80050fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	3b23      	subs	r3, #35	; 0x23
 80050c6:	221f      	movs	r2, #31
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43da      	mvns	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	400a      	ands	r2, r1
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4618      	mov	r0, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	3b23      	subs	r3, #35	; 0x23
 80050f0:	fa00 f203 	lsl.w	r2, r0, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
 80050fc:	e023      	b.n	8005146 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	3b41      	subs	r3, #65	; 0x41
 8005110:	221f      	movs	r2, #31
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43da      	mvns	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	400a      	ands	r2, r1
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	4618      	mov	r0, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	3b41      	subs	r3, #65	; 0x41
 800513a:	fa00 f203 	lsl.w	r2, r0, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005146:	4b29      	ldr	r3, [pc, #164]	; (80051ec <HAL_ADC_ConfigChannel+0x250>)
 8005148:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <HAL_ADC_ConfigChannel+0x254>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10f      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x1d8>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b12      	cmp	r3, #18
 800515a:	d10b      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <HAL_ADC_ConfigChannel+0x254>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d12b      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x23a>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1c      	ldr	r2, [pc, #112]	; (80051f4 <HAL_ADC_ConfigChannel+0x258>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <HAL_ADC_ConfigChannel+0x1f4>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b11      	cmp	r3, #17
 800518e:	d122      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <HAL_ADC_ConfigChannel+0x258>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <HAL_ADC_ConfigChannel+0x25c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a11      	ldr	r2, [pc, #68]	; (80051fc <HAL_ADC_ConfigChannel+0x260>)
 80051b8:	fba2 2303 	umull	r2, r3, r2, r3
 80051bc:	0c9a      	lsrs	r2, r3, #18
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051c8:	e002      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f9      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012300 	.word	0x40012300
 80051f0:	40012000 	.word	0x40012000
 80051f4:	10000012 	.word	0x10000012
 80051f8:	2000007c 	.word	0x2000007c
 80051fc:	431bde83 	.word	0x431bde83

08005200 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005208:	4b79      	ldr	r3, [pc, #484]	; (80053f0 <ADC_Init+0x1f0>)
 800520a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	431a      	orrs	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	021a      	lsls	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800527a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6899      	ldr	r1, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	4a58      	ldr	r2, [pc, #352]	; (80053f4 <ADC_Init+0x1f4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6899      	ldr	r1, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	e00f      	b.n	80052fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0202 	bic.w	r2, r2, #2
 800530c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6899      	ldr	r1, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7e1b      	ldrb	r3, [r3, #24]
 8005318:	005a      	lsls	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01b      	beq.n	8005364 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800534a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6859      	ldr	r1, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	3b01      	subs	r3, #1
 8005358:	035a      	lsls	r2, r3, #13
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	e007      	b.n	8005374 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005372:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	3b01      	subs	r3, #1
 8005390:	051a      	lsls	r2, r3, #20
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6899      	ldr	r1, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053b6:	025a      	lsls	r2, r3, #9
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	029a      	lsls	r2, r3, #10
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40012300 	.word	0x40012300
 80053f4:	0f000001 	.word	0x0f000001

080053f8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e17e      	b.n	800570e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b09      	cmp	r3, #9
 800541e:	d925      	bls.n	800546c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68d9      	ldr	r1, [r3, #12]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	3b1e      	subs	r3, #30
 8005436:	2207      	movs	r2, #7
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43da      	mvns	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	400a      	ands	r2, r1
 8005444:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68d9      	ldr	r1, [r3, #12]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	4618      	mov	r0, r3
 8005458:	4603      	mov	r3, r0
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	4403      	add	r3, r0
 800545e:	3b1e      	subs	r3, #30
 8005460:	409a      	lsls	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e022      	b.n	80054b2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6919      	ldr	r1, [r3, #16]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	2207      	movs	r2, #7
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43da      	mvns	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	400a      	ands	r2, r1
 800548e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6919      	ldr	r1, [r3, #16]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	4618      	mov	r0, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4403      	add	r3, r0
 80054a8:	409a      	lsls	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	051a      	lsls	r2, r3, #20
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	3303      	adds	r3, #3
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	221f      	movs	r2, #31
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43da      	mvns	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	400a      	ands	r2, r1
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	4618      	mov	r0, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	3303      	adds	r3, #3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	fa00 f203 	lsl.w	r2, r0, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	4a75      	ldr	r2, [pc, #468]	; (800571c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800557a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6899      	ldr	r1, [r3, #8]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]
 800558e:	e00f      	b.n	80055b0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800559e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80055ae:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	7d5b      	ldrb	r3, [r3, #21]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	e007      	b.n	80055da <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	7d1b      	ldrb	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	e007      	b.n	8005604 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005602:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b03      	cmp	r3, #3
 800560a:	d02e      	beq.n	800566a <HAL_ADCEx_InjectedConfigChannel+0x272>
 800560c:	2b03      	cmp	r3, #3
 800560e:	d840      	bhi.n	8005692 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8005610:	2b01      	cmp	r3, #1
 8005612:	d002      	beq.n	800561a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8005614:	2b02      	cmp	r3, #2
 8005616:	d014      	beq.n	8005642 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8005618:	e03b      	b.n	8005692 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005628:	f023 030f 	bic.w	r3, r3, #15
 800562c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6959      	ldr	r1, [r3, #20]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	615a      	str	r2, [r3, #20]
      break;
 8005640:	e03b      	b.n	80056ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005650:	f023 030f 	bic.w	r3, r3, #15
 8005654:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6999      	ldr	r1, [r3, #24]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	619a      	str	r2, [r3, #24]
      break;
 8005668:	e027      	b.n	80056ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005678:	f023 030f 	bic.w	r3, r3, #15
 800567c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69d9      	ldr	r1, [r3, #28]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	61da      	str	r2, [r3, #28]
      break;
 8005690:	e013      	b.n	80056ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80056a0:	f023 030f 	bic.w	r3, r3, #15
 80056a4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a19      	ldr	r1, [r3, #32]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	621a      	str	r2, [r3, #32]
      break;
 80056b8:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056ba:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80056bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d109      	bne.n	80056dc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b12      	cmp	r3, #18
 80056ce:	d105      	bne.n	80056dc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a10      	ldr	r2, [pc, #64]	; (8005724 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d10e      	bne.n	8005704 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a0f      	ldr	r2, [pc, #60]	; (8005728 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b11      	cmp	r3, #17
 80056f6:	d105      	bne.n	8005704 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	000f0001 	.word	0x000f0001
 8005720:	40012300 	.word	0x40012300
 8005724:	40012000 	.word	0x40012000
 8005728:	10000012 	.word	0x10000012

0800572c <__NVIC_SetPriorityGrouping>:
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <__NVIC_SetPriorityGrouping+0x44>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005748:	4013      	ands	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800575e:	4a04      	ldr	r2, [pc, #16]	; (8005770 <__NVIC_SetPriorityGrouping+0x44>)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	60d3      	str	r3, [r2, #12]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <__NVIC_GetPriorityGrouping>:
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <__NVIC_GetPriorityGrouping+0x18>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	f003 0307 	and.w	r3, r3, #7
}
 8005782:	4618      	mov	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <__NVIC_EnableIRQ>:
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800579a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	db0b      	blt.n	80057ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	f003 021f 	and.w	r2, r3, #31
 80057a8:	4907      	ldr	r1, [pc, #28]	; (80057c8 <__NVIC_EnableIRQ+0x38>)
 80057aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2001      	movs	r0, #1
 80057b2:	fa00 f202 	lsl.w	r2, r0, r2
 80057b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	e000e100 	.word	0xe000e100

080057cc <__NVIC_DisableIRQ>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	db12      	blt.n	8005804 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	f003 021f 	and.w	r2, r3, #31
 80057e4:	490a      	ldr	r1, [pc, #40]	; (8005810 <__NVIC_DisableIRQ+0x44>)
 80057e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2001      	movs	r0, #1
 80057ee:	fa00 f202 	lsl.w	r2, r0, r2
 80057f2:	3320      	adds	r3, #32
 80057f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80057f8:	f3bf 8f4f 	dsb	sy
}
 80057fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057fe:	f3bf 8f6f 	isb	sy
}
 8005802:	bf00      	nop
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	e000e100 	.word	0xe000e100

08005814 <__NVIC_SetPriority>:
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	6039      	str	r1, [r7, #0]
 800581e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005824:	2b00      	cmp	r3, #0
 8005826:	db0a      	blt.n	800583e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	490c      	ldr	r1, [pc, #48]	; (8005860 <__NVIC_SetPriority+0x4c>)
 800582e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005832:	0112      	lsls	r2, r2, #4
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	440b      	add	r3, r1
 8005838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800583c:	e00a      	b.n	8005854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4908      	ldr	r1, [pc, #32]	; (8005864 <__NVIC_SetPriority+0x50>)
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	3b04      	subs	r3, #4
 800584c:	0112      	lsls	r2, r2, #4
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	440b      	add	r3, r1
 8005852:	761a      	strb	r2, [r3, #24]
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	e000e100 	.word	0xe000e100
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <NVIC_EncodePriority>:
{
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	; 0x24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f1c3 0307 	rsb	r3, r3, #7
 8005882:	2b04      	cmp	r3, #4
 8005884:	bf28      	it	cs
 8005886:	2304      	movcs	r3, #4
 8005888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3304      	adds	r3, #4
 800588e:	2b06      	cmp	r3, #6
 8005890:	d902      	bls.n	8005898 <NVIC_EncodePriority+0x30>
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3b03      	subs	r3, #3
 8005896:	e000      	b.n	800589a <NVIC_EncodePriority+0x32>
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43da      	mvns	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	401a      	ands	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058b0:	f04f 31ff 	mov.w	r1, #4294967295
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ba:	43d9      	mvns	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c0:	4313      	orrs	r3, r2
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3724      	adds	r7, #36	; 0x24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058e0:	d301      	bcc.n	80058e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058e2:	2301      	movs	r3, #1
 80058e4:	e00f      	b.n	8005906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <SysTick_Config+0x40>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ee:	210f      	movs	r1, #15
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	f7ff ff8e 	bl	8005814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <SysTick_Config+0x40>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058fe:	4b04      	ldr	r3, [pc, #16]	; (8005910 <SysTick_Config+0x40>)
 8005900:	2207      	movs	r2, #7
 8005902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	e000e010 	.word	0xe000e010

08005914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ff05 	bl	800572c <__NVIC_SetPriorityGrouping>
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	4603      	mov	r3, r0
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800593c:	f7ff ff1a 	bl	8005774 <__NVIC_GetPriorityGrouping>
 8005940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	6978      	ldr	r0, [r7, #20]
 8005948:	f7ff ff8e 	bl	8005868 <NVIC_EncodePriority>
 800594c:	4602      	mov	r2, r0
 800594e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff ff5d 	bl	8005814 <__NVIC_SetPriority>
}
 800595a:	bf00      	nop
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	4603      	mov	r3, r0
 800596a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800596c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff0d 	bl	8005790 <__NVIC_EnableIRQ>
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	4603      	mov	r3, r0
 8005986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ff1d 	bl	80057cc <__NVIC_DisableIRQ>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ff94 	bl	80058d0 <SysTick_Config>
 80059a8:	4603      	mov	r3, r0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059c0:	f7ff f90e 	bl	8004be0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e099      	b.n	8005b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059f0:	e00f      	b.n	8005a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059f2:	f7ff f8f5 	bl	8004be0 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d908      	bls.n	8005a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2203      	movs	r2, #3
 8005a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e078      	b.n	8005b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e8      	bne.n	80059f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4b38      	ldr	r3, [pc, #224]	; (8005b0c <HAL_DMA_Init+0x158>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d107      	bne.n	8005a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	4313      	orrs	r3, r2
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0307 	bic.w	r3, r3, #7
 8005a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d117      	bne.n	8005ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fb01 	bl	80060c0 <DMA_CheckFifoParam>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e016      	b.n	8005b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fab8 	bl	8006054 <DMA_CalcBaseAndBitshift>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	223f      	movs	r2, #63	; 0x3f
 8005aee:	409a      	lsls	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	f010803f 	.word	0xf010803f

08005b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_DMA_Start_IT+0x26>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e040      	b.n	8005bb8 <HAL_DMA_Start_IT+0xa8>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d12f      	bne.n	8005baa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 fa4a 	bl	8005ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b68:	223f      	movs	r2, #63	; 0x3f
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0216 	orr.w	r2, r2, #22
 8005b7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0208 	orr.w	r2, r2, #8
 8005b96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e005      	b.n	8005bb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005bce:	f7ff f807 	bl	8004be0 <HAL_GetTick>
 8005bd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d008      	beq.n	8005bf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e052      	b.n	8005c98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0216 	bic.w	r2, r2, #22
 8005c00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_DMA_Abort+0x62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0208 	bic.w	r2, r2, #8
 8005c30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c42:	e013      	b.n	8005c6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c44:	f7fe ffcc 	bl	8004be0 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d90c      	bls.n	8005c6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e015      	b.n	8005c98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e4      	bne.n	8005c44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	223f      	movs	r2, #63	; 0x3f
 8005c80:	409a      	lsls	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d004      	beq.n	8005cbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e00c      	b.n	8005cd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2205      	movs	r2, #5
 8005cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cf0:	4b8e      	ldr	r3, [pc, #568]	; (8005f2c <HAL_DMA_IRQHandler+0x248>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a8e      	ldr	r2, [pc, #568]	; (8005f30 <HAL_DMA_IRQHandler+0x24c>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	0a9b      	lsrs	r3, r3, #10
 8005cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0e:	2208      	movs	r2, #8
 8005d10:	409a      	lsls	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01a      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d013      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	f043 0201 	orr.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	2201      	movs	r2, #1
 8005d56:	409a      	lsls	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d012      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	2201      	movs	r2, #1
 8005d74:	409a      	lsls	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f043 0202 	orr.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da8:	2204      	movs	r2, #4
 8005daa:	409a      	lsls	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db4:	f043 0204 	orr.w	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d043      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d03c      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dde:	2210      	movs	r2, #16
 8005de0:	409a      	lsls	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d018      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d108      	bne.n	8005e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d024      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
 8005e12:	e01f      	b.n	8005e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
 8005e24:	e016      	b.n	8005e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d107      	bne.n	8005e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0208 	bic.w	r2, r2, #8
 8005e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e58:	2220      	movs	r2, #32
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 808f 	beq.w	8005f84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8087 	beq.w	8005f84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b05      	cmp	r3, #5
 8005e8c:	d136      	bne.n	8005efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0216 	bic.w	r2, r2, #22
 8005e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <HAL_DMA_IRQHandler+0x1da>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0208 	bic.w	r2, r2, #8
 8005ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	223f      	movs	r2, #63	; 0x3f
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d07e      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	4798      	blx	r3
        }
        return;
 8005efa:	e079      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01d      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d031      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	4798      	blx	r3
 8005f28:	e02c      	b.n	8005f84 <HAL_DMA_IRQHandler+0x2a0>
 8005f2a:	bf00      	nop
 8005f2c:	2000007c 	.word	0x2000007c
 8005f30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d023      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
 8005f44:	e01e      	b.n	8005f84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10f      	bne.n	8005f74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0210 	bic.w	r2, r2, #16
 8005f62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d032      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2205      	movs	r2, #5
 8005f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d307      	bcc.n	8005fcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f2      	bne.n	8005fb0 <HAL_DMA_IRQHandler+0x2cc>
 8005fca:	e000      	b.n	8005fce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005fcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
 8005fee:	e000      	b.n	8005ff2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ff0:	bf00      	nop
    }
  }
}
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d108      	bne.n	8006038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006036:	e007      	b.n	8006048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]
}
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	3b10      	subs	r3, #16
 8006064:	4a14      	ldr	r2, [pc, #80]	; (80060b8 <DMA_CalcBaseAndBitshift+0x64>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800606e:	4a13      	ldr	r2, [pc, #76]	; (80060bc <DMA_CalcBaseAndBitshift+0x68>)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d909      	bls.n	8006096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800608a:	f023 0303 	bic.w	r3, r3, #3
 800608e:	1d1a      	adds	r2, r3, #4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	659a      	str	r2, [r3, #88]	; 0x58
 8006094:	e007      	b.n	80060a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	aaaaaaab 	.word	0xaaaaaaab
 80060bc:	0800e9a8 	.word	0x0800e9a8

080060c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d11f      	bne.n	800611a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d856      	bhi.n	800618e <DMA_CheckFifoParam+0xce>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <DMA_CheckFifoParam+0x28>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	0800610b 	.word	0x0800610b
 80060f0:	080060f9 	.word	0x080060f9
 80060f4:	0800618f 	.word	0x0800618f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d046      	beq.n	8006192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006108:	e043      	b.n	8006192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006112:	d140      	bne.n	8006196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006118:	e03d      	b.n	8006196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006122:	d121      	bne.n	8006168 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d837      	bhi.n	800619a <DMA_CheckFifoParam+0xda>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <DMA_CheckFifoParam+0x70>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006141 	.word	0x08006141
 8006134:	08006147 	.word	0x08006147
 8006138:	08006141 	.word	0x08006141
 800613c:	08006159 	.word	0x08006159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
      break;
 8006144:	e030      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d025      	beq.n	800619e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006156:	e022      	b.n	800619e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006160:	d11f      	bne.n	80061a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006166:	e01c      	b.n	80061a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d903      	bls.n	8006176 <DMA_CheckFifoParam+0xb6>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d003      	beq.n	800617c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006174:	e018      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	73fb      	strb	r3, [r7, #15]
      break;
 800617a:	e015      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00e      	beq.n	80061a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
      break;
 800618c:	e00b      	b.n	80061a6 <DMA_CheckFifoParam+0xe6>
      break;
 800618e:	bf00      	nop
 8006190:	e00a      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      break;
 8006192:	bf00      	nop
 8006194:	e008      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      break;
 8006196:	bf00      	nop
 8006198:	e006      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      break;
 800619a:	bf00      	nop
 800619c:	e004      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      break;
 800619e:	bf00      	nop
 80061a0:	e002      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80061a2:	bf00      	nop
 80061a4:	e000      	b.n	80061a8 <DMA_CheckFifoParam+0xe8>
      break;
 80061a6:	bf00      	nop
    }
  } 
  
  return status; 
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop

080061b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80061ca:	4b23      	ldr	r3, [pc, #140]	; (8006258 <HAL_FLASH_Program+0xa0>)
 80061cc:	7e1b      	ldrb	r3, [r3, #24]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_FLASH_Program+0x1e>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e03b      	b.n	800624e <HAL_FLASH_Program+0x96>
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <HAL_FLASH_Program+0xa0>)
 80061d8:	2201      	movs	r2, #1
 80061da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061e0:	f000 f870 	bl	80062c4 <FLASH_WaitForLastOperation>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d12b      	bne.n	8006246 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d105      	bne.n	8006200 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80061f4:	783b      	ldrb	r3, [r7, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	f000 f91b 	bl	8006434 <FLASH_Program_Byte>
 80061fe:	e016      	b.n	800622e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006206:	883b      	ldrh	r3, [r7, #0]
 8006208:	4619      	mov	r1, r3
 800620a:	68b8      	ldr	r0, [r7, #8]
 800620c:	f000 f8ee 	bl	80063ec <FLASH_Program_HalfWord>
 8006210:	e00d      	b.n	800622e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d105      	bne.n	8006224 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4619      	mov	r1, r3
 800621c:	68b8      	ldr	r0, [r7, #8]
 800621e:	f000 f8c3 	bl	80063a8 <FLASH_Program_Word>
 8006222:	e004      	b.n	800622e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006228:	68b8      	ldr	r0, [r7, #8]
 800622a:	f000 f88b 	bl	8006344 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800622e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006232:	f000 f847 	bl	80062c4 <FLASH_WaitForLastOperation>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800623a:	4b08      	ldr	r3, [pc, #32]	; (800625c <HAL_FLASH_Program+0xa4>)
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	4a07      	ldr	r2, [pc, #28]	; (800625c <HAL_FLASH_Program+0xa4>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006246:	4b04      	ldr	r3, [pc, #16]	; (8006258 <HAL_FLASH_Program+0xa0>)
 8006248:	2200      	movs	r2, #0
 800624a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000b10 	.word	0x20000b10
 800625c:	40023c00 	.word	0x40023c00

08006260 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_FLASH_Unlock+0x38>)
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	da0b      	bge.n	800628a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <HAL_FLASH_Unlock+0x38>)
 8006274:	4a09      	ldr	r2, [pc, #36]	; (800629c <HAL_FLASH_Unlock+0x3c>)
 8006276:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_FLASH_Unlock+0x38>)
 800627a:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <HAL_FLASH_Unlock+0x40>)
 800627c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_FLASH_Unlock+0x38>)
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	da01      	bge.n	800628a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800628a:	79fb      	ldrb	r3, [r7, #7]
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40023c00 	.word	0x40023c00
 800629c:	45670123 	.word	0x45670123
 80062a0:	cdef89ab 	.word	0xcdef89ab

080062a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_FLASH_Lock+0x1c>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <HAL_FLASH_Lock+0x1c>)
 80062ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40023c00 	.word	0x40023c00

080062c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80062d0:	4b1a      	ldr	r3, [pc, #104]	; (800633c <FLASH_WaitForLastOperation+0x78>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80062d6:	f7fe fc83 	bl	8004be0 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80062dc:	e010      	b.n	8006300 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d00c      	beq.n	8006300 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <FLASH_WaitForLastOperation+0x38>
 80062ec:	f7fe fc78 	bl	8004be0 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d201      	bcs.n	8006300 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e019      	b.n	8006334 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <FLASH_WaitForLastOperation+0x7c>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e8      	bne.n	80062de <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800630c:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <FLASH_WaitForLastOperation+0x7c>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <FLASH_WaitForLastOperation+0x7c>)
 800631a:	2201      	movs	r2, #1
 800631c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800631e:	4b08      	ldr	r3, [pc, #32]	; (8006340 <FLASH_WaitForLastOperation+0x7c>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800632a:	f000 f8a5 	bl	8006478 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
  
}  
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000b10 	.word	0x20000b10
 8006340:	40023c00 	.word	0x40023c00

08006344 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006350:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <FLASH_Program_DoubleWord+0x60>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	4a13      	ldr	r2, [pc, #76]	; (80063a4 <FLASH_Program_DoubleWord+0x60>)
 8006356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <FLASH_Program_DoubleWord+0x60>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4a10      	ldr	r2, [pc, #64]	; (80063a4 <FLASH_Program_DoubleWord+0x60>)
 8006362:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006368:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <FLASH_Program_DoubleWord+0x60>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	4a0d      	ldr	r2, [pc, #52]	; (80063a4 <FLASH_Program_DoubleWord+0x60>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800637a:	f3bf 8f6f 	isb	sy
}
 800637e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	000a      	movs	r2, r1
 800638e:	2300      	movs	r3, #0
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	3104      	adds	r1, #4
 8006394:	4613      	mov	r3, r2
 8006396:	600b      	str	r3, [r1, #0]
}
 8006398:	bf00      	nop
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40023c00 	.word	0x40023c00

080063a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <FLASH_Program_Word+0x40>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	4a0c      	ldr	r2, [pc, #48]	; (80063e8 <FLASH_Program_Word+0x40>)
 80063b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80063be:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <FLASH_Program_Word+0x40>)
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <FLASH_Program_Word+0x40>)
 80063c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <FLASH_Program_Word+0x40>)
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	4a06      	ldr	r2, [pc, #24]	; (80063e8 <FLASH_Program_Word+0x40>)
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	601a      	str	r2, [r3, #0]
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40023c00 	.word	0x40023c00

080063ec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063f8:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <FLASH_Program_HalfWord+0x44>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <FLASH_Program_HalfWord+0x44>)
 80063fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <FLASH_Program_HalfWord+0x44>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	4a09      	ldr	r2, [pc, #36]	; (8006430 <FLASH_Program_HalfWord+0x44>)
 800640a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <FLASH_Program_HalfWord+0x44>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4a06      	ldr	r2, [pc, #24]	; (8006430 <FLASH_Program_HalfWord+0x44>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	887a      	ldrh	r2, [r7, #2]
 8006420:	801a      	strh	r2, [r3, #0]
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40023c00 	.word	0x40023c00

08006434 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <FLASH_Program_Byte+0x40>)
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	4a0b      	ldr	r2, [pc, #44]	; (8006474 <FLASH_Program_Byte+0x40>)
 8006446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <FLASH_Program_Byte+0x40>)
 800644e:	4a09      	ldr	r2, [pc, #36]	; (8006474 <FLASH_Program_Byte+0x40>)
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <FLASH_Program_Byte+0x40>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	4a06      	ldr	r2, [pc, #24]	; (8006474 <FLASH_Program_Byte+0x40>)
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	78fa      	ldrb	r2, [r7, #3]
 8006464:	701a      	strb	r2, [r3, #0]
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40023c00 	.word	0x40023c00

08006478 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800647c:	4b2f      	ldr	r3, [pc, #188]	; (800653c <FLASH_SetErrorCode+0xc4>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006488:	4b2d      	ldr	r3, [pc, #180]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f043 0310 	orr.w	r3, r3, #16
 8006490:	4a2b      	ldr	r2, [pc, #172]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 8006492:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006494:	4b29      	ldr	r3, [pc, #164]	; (800653c <FLASH_SetErrorCode+0xc4>)
 8006496:	2210      	movs	r2, #16
 8006498:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800649a:	4b28      	ldr	r3, [pc, #160]	; (800653c <FLASH_SetErrorCode+0xc4>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80064a6:	4b26      	ldr	r3, [pc, #152]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f043 0308 	orr.w	r3, r3, #8
 80064ae:	4a24      	ldr	r2, [pc, #144]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 80064b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <FLASH_SetErrorCode+0xc4>)
 80064b4:	2220      	movs	r2, #32
 80064b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80064b8:	4b20      	ldr	r3, [pc, #128]	; (800653c <FLASH_SetErrorCode+0xc4>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80064c4:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f043 0304 	orr.w	r3, r3, #4
 80064cc:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 80064ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80064d0:	4b1a      	ldr	r3, [pc, #104]	; (800653c <FLASH_SetErrorCode+0xc4>)
 80064d2:	2240      	movs	r2, #64	; 0x40
 80064d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80064d6:	4b19      	ldr	r3, [pc, #100]	; (800653c <FLASH_SetErrorCode+0xc4>)
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f043 0302 	orr.w	r3, r3, #2
 80064ea:	4a15      	ldr	r2, [pc, #84]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 80064ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <FLASH_SetErrorCode+0xc4>)
 80064f0:	2280      	movs	r2, #128	; 0x80
 80064f2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <FLASH_SetErrorCode+0xc4>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 800650a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <FLASH_SetErrorCode+0xc4>)
 800650e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006512:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <FLASH_SetErrorCode+0xc4>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f043 0320 	orr.w	r3, r3, #32
 8006528:	4a05      	ldr	r2, [pc, #20]	; (8006540 <FLASH_SetErrorCode+0xc8>)
 800652a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800652c:	4b03      	ldr	r3, [pc, #12]	; (800653c <FLASH_SetErrorCode+0xc4>)
 800652e:	2202      	movs	r2, #2
 8006530:	60da      	str	r2, [r3, #12]
  }
}
 8006532:	bf00      	nop
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40023c00 	.word	0x40023c00
 8006540:	20000b10 	.word	0x20000b10

08006544 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e010      	b.n	8006582 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d103      	bne.n	800656e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e009      	b.n	8006582 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d103      	bne.n	800657c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e002      	b.n	8006582 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800657c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006580:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006582:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 8006588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800658e:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	490f      	ldr	r1, [pc, #60]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 80065a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80065a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4313      	orrs	r3, r2
 80065b0:	4a07      	ldr	r2, [pc, #28]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 80065b2:	f043 0302 	orr.w	r3, r3, #2
 80065b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <FLASH_Erase_Sector+0x8c>)
 80065be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c2:	6113      	str	r3, [r2, #16]
}
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	40023c00 	.word	0x40023c00

080065d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b089      	sub	sp, #36	; 0x24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	e165      	b.n	80068bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065f0:	2201      	movs	r2, #1
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	fa02 f303 	lsl.w	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4013      	ands	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	429a      	cmp	r2, r3
 800660a:	f040 8154 	bne.w	80068b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d005      	beq.n	8006626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006622:	2b02      	cmp	r3, #2
 8006624:	d130      	bne.n	8006688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	2203      	movs	r2, #3
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	43db      	mvns	r3, r3
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	4013      	ands	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4313      	orrs	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800665c:	2201      	movs	r2, #1
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	f003 0201 	and.w	r2, r3, #1
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4313      	orrs	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b03      	cmp	r3, #3
 8006692:	d017      	beq.n	80066c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	2203      	movs	r2, #3
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	43db      	mvns	r3, r3
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4013      	ands	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d123      	bne.n	8006718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	08da      	lsrs	r2, r3, #3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3208      	adds	r2, #8
 80066d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	220f      	movs	r2, #15
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4013      	ands	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	4313      	orrs	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	08da      	lsrs	r2, r3, #3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3208      	adds	r2, #8
 8006712:	69b9      	ldr	r1, [r7, #24]
 8006714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	2203      	movs	r2, #3
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	43db      	mvns	r3, r3
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	4013      	ands	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 0203 	and.w	r2, r3, #3
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4313      	orrs	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80ae 	beq.w	80068b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	4b5d      	ldr	r3, [pc, #372]	; (80068d4 <HAL_GPIO_Init+0x300>)
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	4a5c      	ldr	r2, [pc, #368]	; (80068d4 <HAL_GPIO_Init+0x300>)
 8006764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006768:	6453      	str	r3, [r2, #68]	; 0x44
 800676a:	4b5a      	ldr	r3, [pc, #360]	; (80068d4 <HAL_GPIO_Init+0x300>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006776:	4a58      	ldr	r2, [pc, #352]	; (80068d8 <HAL_GPIO_Init+0x304>)
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	3302      	adds	r3, #2
 800677e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	220f      	movs	r2, #15
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43db      	mvns	r3, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4013      	ands	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a4f      	ldr	r2, [pc, #316]	; (80068dc <HAL_GPIO_Init+0x308>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d025      	beq.n	80067ee <HAL_GPIO_Init+0x21a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a4e      	ldr	r2, [pc, #312]	; (80068e0 <HAL_GPIO_Init+0x30c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01f      	beq.n	80067ea <HAL_GPIO_Init+0x216>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a4d      	ldr	r2, [pc, #308]	; (80068e4 <HAL_GPIO_Init+0x310>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d019      	beq.n	80067e6 <HAL_GPIO_Init+0x212>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a4c      	ldr	r2, [pc, #304]	; (80068e8 <HAL_GPIO_Init+0x314>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_GPIO_Init+0x20e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a4b      	ldr	r2, [pc, #300]	; (80068ec <HAL_GPIO_Init+0x318>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00d      	beq.n	80067de <HAL_GPIO_Init+0x20a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a4a      	ldr	r2, [pc, #296]	; (80068f0 <HAL_GPIO_Init+0x31c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <HAL_GPIO_Init+0x206>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a49      	ldr	r2, [pc, #292]	; (80068f4 <HAL_GPIO_Init+0x320>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_GPIO_Init+0x202>
 80067d2:	2306      	movs	r3, #6
 80067d4:	e00c      	b.n	80067f0 <HAL_GPIO_Init+0x21c>
 80067d6:	2307      	movs	r3, #7
 80067d8:	e00a      	b.n	80067f0 <HAL_GPIO_Init+0x21c>
 80067da:	2305      	movs	r3, #5
 80067dc:	e008      	b.n	80067f0 <HAL_GPIO_Init+0x21c>
 80067de:	2304      	movs	r3, #4
 80067e0:	e006      	b.n	80067f0 <HAL_GPIO_Init+0x21c>
 80067e2:	2303      	movs	r3, #3
 80067e4:	e004      	b.n	80067f0 <HAL_GPIO_Init+0x21c>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e002      	b.n	80067f0 <HAL_GPIO_Init+0x21c>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_GPIO_Init+0x21c>
 80067ee:	2300      	movs	r3, #0
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	f002 0203 	and.w	r2, r2, #3
 80067f6:	0092      	lsls	r2, r2, #2
 80067f8:	4093      	lsls	r3, r2
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006800:	4935      	ldr	r1, [pc, #212]	; (80068d8 <HAL_GPIO_Init+0x304>)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	3302      	adds	r3, #2
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800680e:	4b3a      	ldr	r3, [pc, #232]	; (80068f8 <HAL_GPIO_Init+0x324>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	43db      	mvns	r3, r3
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	4013      	ands	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006832:	4a31      	ldr	r2, [pc, #196]	; (80068f8 <HAL_GPIO_Init+0x324>)
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006838:	4b2f      	ldr	r3, [pc, #188]	; (80068f8 <HAL_GPIO_Init+0x324>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	43db      	mvns	r3, r3
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4013      	ands	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800685c:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <HAL_GPIO_Init+0x324>)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006862:	4b25      	ldr	r3, [pc, #148]	; (80068f8 <HAL_GPIO_Init+0x324>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	43db      	mvns	r3, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4013      	ands	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006886:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <HAL_GPIO_Init+0x324>)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <HAL_GPIO_Init+0x324>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	43db      	mvns	r3, r3
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	4013      	ands	r3, r2
 800689a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068b0:	4a11      	ldr	r2, [pc, #68]	; (80068f8 <HAL_GPIO_Init+0x324>)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3301      	adds	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	f67f ae96 	bls.w	80065f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	3724      	adds	r7, #36	; 0x24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800
 80068d8:	40013800 	.word	0x40013800
 80068dc:	40020000 	.word	0x40020000
 80068e0:	40020400 	.word	0x40020400
 80068e4:	40020800 	.word	0x40020800
 80068e8:	40020c00 	.word	0x40020c00
 80068ec:	40021000 	.word	0x40021000
 80068f0:	40021400 	.word	0x40021400
 80068f4:	40021800 	.word	0x40021800
 80068f8:	40013c00 	.word	0x40013c00

080068fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	887b      	ldrh	r3, [r7, #2]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
 8006918:	e001      	b.n	800691e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]
 8006938:	4613      	mov	r3, r2
 800693a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800693c:	787b      	ldrb	r3, [r7, #1]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006942:	887a      	ldrh	r2, [r7, #2]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006948:	e003      	b.n	8006952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	041a      	lsls	r2, r3, #16
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	619a      	str	r2, [r3, #24]
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006970:	887a      	ldrh	r2, [r7, #2]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4013      	ands	r3, r2
 8006976:	041a      	lsls	r2, r3, #16
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	43d9      	mvns	r1, r3
 800697c:	887b      	ldrh	r3, [r7, #2]
 800697e:	400b      	ands	r3, r1
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	619a      	str	r2, [r3, #24]
}
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d006      	beq.n	80069b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069aa:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd fa98 	bl	8003ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40013c00 	.word	0x40013c00

080069c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80069ce:	2300      	movs	r3, #0
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <HAL_PWREx_EnableOverDrive+0x90>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	4a1f      	ldr	r2, [pc, #124]	; (8006a54 <HAL_PWREx_EnableOverDrive+0x90>)
 80069d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069dc:	6413      	str	r3, [r2, #64]	; 0x40
 80069de:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <HAL_PWREx_EnableOverDrive+0x90>)
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80069ea:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_PWREx_EnableOverDrive+0x94>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069f0:	f7fe f8f6 	bl	8004be0 <HAL_GetTick>
 80069f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80069f6:	e009      	b.n	8006a0c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069f8:	f7fe f8f2 	bl	8004be0 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a06:	d901      	bls.n	8006a0c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e01f      	b.n	8006a4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a0c:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d1ee      	bne.n	80069f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a20:	f7fe f8de 	bl	8004be0 <HAL_GetTick>
 8006a24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a26:	e009      	b.n	8006a3c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a28:	f7fe f8da 	bl	8004be0 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a36:	d901      	bls.n	8006a3c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e007      	b.n	8006a4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a3c:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a48:	d1ee      	bne.n	8006a28 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40023800 	.word	0x40023800
 8006a58:	420e0040 	.word	0x420e0040
 8006a5c:	40007000 	.word	0x40007000
 8006a60:	420e0044 	.word	0x420e0044

08006a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0cc      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a78:	4b68      	ldr	r3, [pc, #416]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d90c      	bls.n	8006aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b65      	ldr	r3, [pc, #404]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8e:	4b63      	ldr	r3, [pc, #396]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d001      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e0b8      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d020      	beq.n	8006aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ab8:	4b59      	ldr	r3, [pc, #356]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	4a58      	ldr	r2, [pc, #352]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ad0:	4b53      	ldr	r3, [pc, #332]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a52      	ldr	r2, [pc, #328]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006adc:	4b50      	ldr	r3, [pc, #320]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	494d      	ldr	r1, [pc, #308]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d044      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d107      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b02:	4b47      	ldr	r3, [pc, #284]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d119      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e07f      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d003      	beq.n	8006b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b22:	4b3f      	ldr	r3, [pc, #252]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e06f      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b32:	4b3b      	ldr	r3, [pc, #236]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e067      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b42:	4b37      	ldr	r3, [pc, #220]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f023 0203 	bic.w	r2, r3, #3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4934      	ldr	r1, [pc, #208]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b54:	f7fe f844 	bl	8004be0 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5c:	f7fe f840 	bl	8004be0 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e04f      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	4b2b      	ldr	r3, [pc, #172]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 020c 	and.w	r2, r3, #12
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d1eb      	bne.n	8006b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b84:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d20c      	bcs.n	8006bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b20      	ldr	r3, [pc, #128]	; (8006c1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d001      	beq.n	8006bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e032      	b.n	8006c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	4916      	ldr	r1, [pc, #88]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bd6:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	490e      	ldr	r1, [pc, #56]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bea:	f000 f855 	bl	8006c98 <HAL_RCC_GetSysClockFreq>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	091b      	lsrs	r3, r3, #4
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	490a      	ldr	r1, [pc, #40]	; (8006c24 <HAL_RCC_ClockConfig+0x1c0>)
 8006bfc:	5ccb      	ldrb	r3, [r1, r3]
 8006bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006c02:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <HAL_RCC_ClockConfig+0x1c4>)
 8006c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <HAL_RCC_ClockConfig+0x1c8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fd ffa4 	bl	8004b58 <HAL_InitTick>

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40023c00 	.word	0x40023c00
 8006c20:	40023800 	.word	0x40023800
 8006c24:	0800e990 	.word	0x0800e990
 8006c28:	2000007c 	.word	0x2000007c
 8006c2c:	20000080 	.word	0x20000080

08006c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c34:	4b03      	ldr	r3, [pc, #12]	; (8006c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c36:	681b      	ldr	r3, [r3, #0]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000007c 	.word	0x2000007c

08006c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c4c:	f7ff fff0 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	0a9b      	lsrs	r3, r3, #10
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	4903      	ldr	r1, [pc, #12]	; (8006c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	0800e9a0 	.word	0x0800e9a0

08006c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c74:	f7ff ffdc 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	0b5b      	lsrs	r3, r3, #13
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	4903      	ldr	r1, [pc, #12]	; (8006c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c86:	5ccb      	ldrb	r3, [r1, r3]
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40023800 	.word	0x40023800
 8006c94:	0800e9a0 	.word	0x0800e9a0

08006c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c9c:	b0ae      	sub	sp, #184	; 0xb8
 8006c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cbe:	4bcb      	ldr	r3, [pc, #812]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	2b0c      	cmp	r3, #12
 8006cc8:	f200 8206 	bhi.w	80070d8 <HAL_RCC_GetSysClockFreq+0x440>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006d09 	.word	0x08006d09
 8006cd8:	080070d9 	.word	0x080070d9
 8006cdc:	080070d9 	.word	0x080070d9
 8006ce0:	080070d9 	.word	0x080070d9
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	080070d9 	.word	0x080070d9
 8006cec:	080070d9 	.word	0x080070d9
 8006cf0:	080070d9 	.word	0x080070d9
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	080070d9 	.word	0x080070d9
 8006cfc:	080070d9 	.word	0x080070d9
 8006d00:	080070d9 	.word	0x080070d9
 8006d04:	08006f09 	.word	0x08006f09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d08:	4bb9      	ldr	r3, [pc, #740]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006d0e:	e1e7      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d10:	4bb8      	ldr	r3, [pc, #736]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d16:	e1e3      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d18:	4bb4      	ldr	r3, [pc, #720]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d24:	4bb1      	ldr	r3, [pc, #708]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d071      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d30:	4bae      	ldr	r3, [pc, #696]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	099b      	lsrs	r3, r3, #6
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d3c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d56:	4622      	mov	r2, r4
 8006d58:	462b      	mov	r3, r5
 8006d5a:	f04f 0000 	mov.w	r0, #0
 8006d5e:	f04f 0100 	mov.w	r1, #0
 8006d62:	0159      	lsls	r1, r3, #5
 8006d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d68:	0150      	lsls	r0, r2, #5
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4621      	mov	r1, r4
 8006d70:	1a51      	subs	r1, r2, r1
 8006d72:	6439      	str	r1, [r7, #64]	; 0x40
 8006d74:	4629      	mov	r1, r5
 8006d76:	eb63 0301 	sbc.w	r3, r3, r1
 8006d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006d88:	4649      	mov	r1, r9
 8006d8a:	018b      	lsls	r3, r1, #6
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d92:	4641      	mov	r1, r8
 8006d94:	018a      	lsls	r2, r1, #6
 8006d96:	4641      	mov	r1, r8
 8006d98:	1a51      	subs	r1, r2, r1
 8006d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006db0:	4649      	mov	r1, r9
 8006db2:	00cb      	lsls	r3, r1, #3
 8006db4:	4641      	mov	r1, r8
 8006db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dba:	4641      	mov	r1, r8
 8006dbc:	00ca      	lsls	r2, r1, #3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	189b      	adds	r3, r3, r2
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dca:	462b      	mov	r3, r5
 8006dcc:	460a      	mov	r2, r1
 8006dce:	eb42 0303 	adc.w	r3, r2, r3
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006de0:	4629      	mov	r1, r5
 8006de2:	024b      	lsls	r3, r1, #9
 8006de4:	4621      	mov	r1, r4
 8006de6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006dea:	4621      	mov	r1, r4
 8006dec:	024a      	lsls	r2, r1, #9
 8006dee:	4610      	mov	r0, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e00:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006e04:	f7f9 ff40 	bl	8000c88 <__aeabi_uldivmod>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e12:	e067      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e14:	4b75      	ldr	r3, [pc, #468]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e20:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e2e:	2300      	movs	r3, #0
 8006e30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e32:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	f04f 0000 	mov.w	r0, #0
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	0159      	lsls	r1, r3, #5
 8006e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e48:	0150      	lsls	r0, r2, #5
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4621      	mov	r1, r4
 8006e50:	1a51      	subs	r1, r2, r1
 8006e52:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e54:	4629      	mov	r1, r5
 8006e56:	eb63 0301 	sbc.w	r3, r3, r1
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006e68:	4649      	mov	r1, r9
 8006e6a:	018b      	lsls	r3, r1, #6
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e72:	4641      	mov	r1, r8
 8006e74:	018a      	lsls	r2, r1, #6
 8006e76:	4641      	mov	r1, r8
 8006e78:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e8e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e96:	4692      	mov	sl, r2
 8006e98:	469b      	mov	fp, r3
 8006e9a:	4623      	mov	r3, r4
 8006e9c:	eb1a 0303 	adds.w	r3, sl, r3
 8006ea0:	623b      	str	r3, [r7, #32]
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	028b      	lsls	r3, r1, #10
 8006eba:	4621      	mov	r1, r4
 8006ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	028a      	lsls	r2, r1, #10
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ecc:	2200      	movs	r2, #0
 8006ece:	673b      	str	r3, [r7, #112]	; 0x70
 8006ed0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ed2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006ed6:	f7f9 fed7 	bl	8000c88 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4613      	mov	r3, r2
 8006ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ee4:	4b41      	ldr	r3, [pc, #260]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006f06:	e0eb      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f08:	4b38      	ldr	r3, [pc, #224]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f14:	4b35      	ldr	r3, [pc, #212]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d06b      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f20:	4b32      	ldr	r3, [pc, #200]	; (8006fec <HAL_RCC_GetSysClockFreq+0x354>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	099b      	lsrs	r3, r3, #6
 8006f26:	2200      	movs	r2, #0
 8006f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	663b      	str	r3, [r7, #96]	; 0x60
 8006f34:	2300      	movs	r3, #0
 8006f36:	667b      	str	r3, [r7, #100]	; 0x64
 8006f38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	f04f 0000 	mov.w	r0, #0
 8006f44:	f04f 0100 	mov.w	r1, #0
 8006f48:	0159      	lsls	r1, r3, #5
 8006f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f4e:	0150      	lsls	r0, r2, #5
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4621      	mov	r1, r4
 8006f56:	1a51      	subs	r1, r2, r1
 8006f58:	61b9      	str	r1, [r7, #24]
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	eb63 0301 	sbc.w	r3, r3, r1
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006f6e:	4659      	mov	r1, fp
 8006f70:	018b      	lsls	r3, r1, #6
 8006f72:	4651      	mov	r1, sl
 8006f74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f78:	4651      	mov	r1, sl
 8006f7a:	018a      	lsls	r2, r1, #6
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	ebb2 0801 	subs.w	r8, r2, r1
 8006f82:	4659      	mov	r1, fp
 8006f84:	eb63 0901 	sbc.w	r9, r3, r1
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f9c:	4690      	mov	r8, r2
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	eb18 0303 	adds.w	r3, r8, r3
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	462b      	mov	r3, r5
 8006faa:	eb49 0303 	adc.w	r3, r9, r3
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	024b      	lsls	r3, r1, #9
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	024a      	lsls	r2, r1, #9
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fd6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006fd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006fdc:	f7f9 fe54 	bl	8000c88 <__aeabi_uldivmod>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fea:	e065      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x420>
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	00f42400 	.word	0x00f42400
 8006ff4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff8:	4b3d      	ldr	r3, [pc, #244]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x458>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	099b      	lsrs	r3, r3, #6
 8006ffe:	2200      	movs	r2, #0
 8007000:	4618      	mov	r0, r3
 8007002:	4611      	mov	r1, r2
 8007004:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007008:	653b      	str	r3, [r7, #80]	; 0x50
 800700a:	2300      	movs	r3, #0
 800700c:	657b      	str	r3, [r7, #84]	; 0x54
 800700e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007012:	4642      	mov	r2, r8
 8007014:	464b      	mov	r3, r9
 8007016:	f04f 0000 	mov.w	r0, #0
 800701a:	f04f 0100 	mov.w	r1, #0
 800701e:	0159      	lsls	r1, r3, #5
 8007020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007024:	0150      	lsls	r0, r2, #5
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4641      	mov	r1, r8
 800702c:	1a51      	subs	r1, r2, r1
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	4649      	mov	r1, r9
 8007032:	eb63 0301 	sbc.w	r3, r3, r1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007044:	4659      	mov	r1, fp
 8007046:	018b      	lsls	r3, r1, #6
 8007048:	4651      	mov	r1, sl
 800704a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800704e:	4651      	mov	r1, sl
 8007050:	018a      	lsls	r2, r1, #6
 8007052:	4651      	mov	r1, sl
 8007054:	1a54      	subs	r4, r2, r1
 8007056:	4659      	mov	r1, fp
 8007058:	eb63 0501 	sbc.w	r5, r3, r1
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	00eb      	lsls	r3, r5, #3
 8007066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800706a:	00e2      	lsls	r2, r4, #3
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	4643      	mov	r3, r8
 8007072:	18e3      	adds	r3, r4, r3
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	464b      	mov	r3, r9
 8007078:	eb45 0303 	adc.w	r3, r5, r3
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800708a:	4629      	mov	r1, r5
 800708c:	028b      	lsls	r3, r1, #10
 800708e:	4621      	mov	r1, r4
 8007090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007094:	4621      	mov	r1, r4
 8007096:	028a      	lsls	r2, r1, #10
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070a0:	2200      	movs	r2, #0
 80070a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80070a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070aa:	f7f9 fded 	bl	8000c88 <__aeabi_uldivmod>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4613      	mov	r3, r2
 80070b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	0f1b      	lsrs	r3, r3, #28
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80070c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80070d6:	e003      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80070da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80070de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	37b8      	adds	r7, #184	; 0xb8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ee:	bf00      	nop
 80070f0:	40023800 	.word	0x40023800
 80070f4:	00f42400 	.word	0x00f42400

080070f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e28d      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8083 	beq.w	800721e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007118:	4b94      	ldr	r3, [pc, #592]	; (800736c <HAL_RCC_OscConfig+0x274>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b04      	cmp	r3, #4
 8007122:	d019      	beq.n	8007158 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007124:	4b91      	ldr	r3, [pc, #580]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800712c:	2b08      	cmp	r3, #8
 800712e:	d106      	bne.n	800713e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007130:	4b8e      	ldr	r3, [pc, #568]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800713c:	d00c      	beq.n	8007158 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800713e:	4b8b      	ldr	r3, [pc, #556]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007146:	2b0c      	cmp	r3, #12
 8007148:	d112      	bne.n	8007170 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800714a:	4b88      	ldr	r3, [pc, #544]	; (800736c <HAL_RCC_OscConfig+0x274>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007156:	d10b      	bne.n	8007170 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007158:	4b84      	ldr	r3, [pc, #528]	; (800736c <HAL_RCC_OscConfig+0x274>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d05b      	beq.n	800721c <HAL_RCC_OscConfig+0x124>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d157      	bne.n	800721c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e25a      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007178:	d106      	bne.n	8007188 <HAL_RCC_OscConfig+0x90>
 800717a:	4b7c      	ldr	r3, [pc, #496]	; (800736c <HAL_RCC_OscConfig+0x274>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a7b      	ldr	r2, [pc, #492]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e01d      	b.n	80071c4 <HAL_RCC_OscConfig+0xcc>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007190:	d10c      	bne.n	80071ac <HAL_RCC_OscConfig+0xb4>
 8007192:	4b76      	ldr	r3, [pc, #472]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a75      	ldr	r2, [pc, #468]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	4b73      	ldr	r3, [pc, #460]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a72      	ldr	r2, [pc, #456]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80071a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e00b      	b.n	80071c4 <HAL_RCC_OscConfig+0xcc>
 80071ac:	4b6f      	ldr	r3, [pc, #444]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a6e      	ldr	r2, [pc, #440]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80071b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	4b6c      	ldr	r3, [pc, #432]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a6b      	ldr	r2, [pc, #428]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80071be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d013      	beq.n	80071f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fd fd08 	bl	8004be0 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071d4:	f7fd fd04 	bl	8004be0 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b64      	cmp	r3, #100	; 0x64
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e21f      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e6:	4b61      	ldr	r3, [pc, #388]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0xdc>
 80071f2:	e014      	b.n	800721e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f4:	f7fd fcf4 	bl	8004be0 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071fc:	f7fd fcf0 	bl	8004be0 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b64      	cmp	r3, #100	; 0x64
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e20b      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800720e:	4b57      	ldr	r3, [pc, #348]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x104>
 800721a:	e000      	b.n	800721e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800721c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d06f      	beq.n	800730a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800722a:	4b50      	ldr	r3, [pc, #320]	; (800736c <HAL_RCC_OscConfig+0x274>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 030c 	and.w	r3, r3, #12
 8007232:	2b00      	cmp	r3, #0
 8007234:	d017      	beq.n	8007266 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007236:	4b4d      	ldr	r3, [pc, #308]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800723e:	2b08      	cmp	r3, #8
 8007240:	d105      	bne.n	800724e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007242:	4b4a      	ldr	r3, [pc, #296]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724e:	4b47      	ldr	r3, [pc, #284]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007256:	2b0c      	cmp	r3, #12
 8007258:	d11c      	bne.n	8007294 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800725a:	4b44      	ldr	r3, [pc, #272]	; (800736c <HAL_RCC_OscConfig+0x274>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d116      	bne.n	8007294 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007266:	4b41      	ldr	r3, [pc, #260]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_RCC_OscConfig+0x186>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d001      	beq.n	800727e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e1d3      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727e:	4b3b      	ldr	r3, [pc, #236]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4937      	ldr	r1, [pc, #220]	; (800736c <HAL_RCC_OscConfig+0x274>)
 800728e:	4313      	orrs	r3, r2
 8007290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007292:	e03a      	b.n	800730a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d020      	beq.n	80072de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800729c:	4b34      	ldr	r3, [pc, #208]	; (8007370 <HAL_RCC_OscConfig+0x278>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a2:	f7fd fc9d 	bl	8004be0 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072aa:	f7fd fc99 	bl	8004be0 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e1b4      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072bc:	4b2b      	ldr	r3, [pc, #172]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c8:	4b28      	ldr	r3, [pc, #160]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	4925      	ldr	r1, [pc, #148]	; (800736c <HAL_RCC_OscConfig+0x274>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	600b      	str	r3, [r1, #0]
 80072dc:	e015      	b.n	800730a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072de:	4b24      	ldr	r3, [pc, #144]	; (8007370 <HAL_RCC_OscConfig+0x278>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e4:	f7fd fc7c 	bl	8004be0 <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072ec:	f7fd fc78 	bl	8004be0 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e193      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072fe:	4b1b      	ldr	r3, [pc, #108]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f0      	bne.n	80072ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d036      	beq.n	8007384 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d016      	beq.n	800734c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800731e:	4b15      	ldr	r3, [pc, #84]	; (8007374 <HAL_RCC_OscConfig+0x27c>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007324:	f7fd fc5c 	bl	8004be0 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800732c:	f7fd fc58 	bl	8004be0 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e173      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800733e:	4b0b      	ldr	r3, [pc, #44]	; (800736c <HAL_RCC_OscConfig+0x274>)
 8007340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0x234>
 800734a:	e01b      	b.n	8007384 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <HAL_RCC_OscConfig+0x27c>)
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007352:	f7fd fc45 	bl	8004be0 <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007358:	e00e      	b.n	8007378 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800735a:	f7fd fc41 	bl	8004be0 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d907      	bls.n	8007378 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e15c      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
 800736c:	40023800 	.word	0x40023800
 8007370:	42470000 	.word	0x42470000
 8007374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007378:	4b8a      	ldr	r3, [pc, #552]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800737a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1ea      	bne.n	800735a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8097 	beq.w	80074c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007392:	2300      	movs	r3, #0
 8007394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007396:	4b83      	ldr	r3, [pc, #524]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10f      	bne.n	80073c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	4b7f      	ldr	r3, [pc, #508]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	4a7e      	ldr	r2, [pc, #504]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 80073ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b0:	6413      	str	r3, [r2, #64]	; 0x40
 80073b2:	4b7c      	ldr	r3, [pc, #496]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ba:	60bb      	str	r3, [r7, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073be:	2301      	movs	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c2:	4b79      	ldr	r3, [pc, #484]	; (80075a8 <HAL_RCC_OscConfig+0x4b0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d118      	bne.n	8007400 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ce:	4b76      	ldr	r3, [pc, #472]	; (80075a8 <HAL_RCC_OscConfig+0x4b0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a75      	ldr	r2, [pc, #468]	; (80075a8 <HAL_RCC_OscConfig+0x4b0>)
 80073d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073da:	f7fd fc01 	bl	8004be0 <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e2:	f7fd fbfd 	bl	8004be0 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e118      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f4:	4b6c      	ldr	r3, [pc, #432]	; (80075a8 <HAL_RCC_OscConfig+0x4b0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d106      	bne.n	8007416 <HAL_RCC_OscConfig+0x31e>
 8007408:	4b66      	ldr	r3, [pc, #408]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740c:	4a65      	ldr	r2, [pc, #404]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	6713      	str	r3, [r2, #112]	; 0x70
 8007414:	e01c      	b.n	8007450 <HAL_RCC_OscConfig+0x358>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b05      	cmp	r3, #5
 800741c:	d10c      	bne.n	8007438 <HAL_RCC_OscConfig+0x340>
 800741e:	4b61      	ldr	r3, [pc, #388]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007422:	4a60      	ldr	r2, [pc, #384]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007424:	f043 0304 	orr.w	r3, r3, #4
 8007428:	6713      	str	r3, [r2, #112]	; 0x70
 800742a:	4b5e      	ldr	r3, [pc, #376]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	4a5d      	ldr	r2, [pc, #372]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	6713      	str	r3, [r2, #112]	; 0x70
 8007436:	e00b      	b.n	8007450 <HAL_RCC_OscConfig+0x358>
 8007438:	4b5a      	ldr	r3, [pc, #360]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	4a59      	ldr	r2, [pc, #356]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800743e:	f023 0301 	bic.w	r3, r3, #1
 8007442:	6713      	str	r3, [r2, #112]	; 0x70
 8007444:	4b57      	ldr	r3, [pc, #348]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007448:	4a56      	ldr	r2, [pc, #344]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800744a:	f023 0304 	bic.w	r3, r3, #4
 800744e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d015      	beq.n	8007484 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007458:	f7fd fbc2 	bl	8004be0 <HAL_GetTick>
 800745c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800745e:	e00a      	b.n	8007476 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007460:	f7fd fbbe 	bl	8004be0 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3288 	movw	r2, #5000	; 0x1388
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e0d7      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007476:	4b4b      	ldr	r3, [pc, #300]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0ee      	beq.n	8007460 <HAL_RCC_OscConfig+0x368>
 8007482:	e014      	b.n	80074ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007484:	f7fd fbac 	bl	8004be0 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800748a:	e00a      	b.n	80074a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800748c:	f7fd fba8 	bl	8004be0 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f241 3288 	movw	r2, #5000	; 0x1388
 800749a:	4293      	cmp	r3, r2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e0c1      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074a2:	4b40      	ldr	r3, [pc, #256]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1ee      	bne.n	800748c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d105      	bne.n	80074c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b4:	4b3b      	ldr	r3, [pc, #236]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	4a3a      	ldr	r2, [pc, #232]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 80074ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80ad 	beq.w	8007624 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074ca:	4b36      	ldr	r3, [pc, #216]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 030c 	and.w	r3, r3, #12
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d060      	beq.n	8007598 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d145      	bne.n	800756a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074de:	4b33      	ldr	r3, [pc, #204]	; (80075ac <HAL_RCC_OscConfig+0x4b4>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e4:	f7fd fb7c 	bl	8004be0 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ec:	f7fd fb78 	bl	8004be0 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e093      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fe:	4b29      	ldr	r3, [pc, #164]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f0      	bne.n	80074ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	69da      	ldr	r2, [r3, #28]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	019b      	lsls	r3, r3, #6
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007520:	085b      	lsrs	r3, r3, #1
 8007522:	3b01      	subs	r3, #1
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	061b      	lsls	r3, r3, #24
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	071b      	lsls	r3, r3, #28
 8007536:	491b      	ldr	r1, [pc, #108]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 8007538:	4313      	orrs	r3, r2
 800753a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800753c:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <HAL_RCC_OscConfig+0x4b4>)
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007542:	f7fd fb4d 	bl	8004be0 <HAL_GetTick>
 8007546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800754a:	f7fd fb49 	bl	8004be0 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e064      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800755c:	4b11      	ldr	r3, [pc, #68]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCC_OscConfig+0x452>
 8007568:	e05c      	b.n	8007624 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756a:	4b10      	ldr	r3, [pc, #64]	; (80075ac <HAL_RCC_OscConfig+0x4b4>)
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7fd fb36 	bl	8004be0 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007578:	f7fd fb32 	bl	8004be0 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e04d      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <HAL_RCC_OscConfig+0x4ac>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0x480>
 8007596:	e045      	b.n	8007624 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d107      	bne.n	80075b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e040      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
 80075a4:	40023800 	.word	0x40023800
 80075a8:	40007000 	.word	0x40007000
 80075ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075b0:	4b1f      	ldr	r3, [pc, #124]	; (8007630 <HAL_RCC_OscConfig+0x538>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d030      	beq.n	8007620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d129      	bne.n	8007620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d122      	bne.n	8007620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075e0:	4013      	ands	r3, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d119      	bne.n	8007620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	3b01      	subs	r3, #1
 80075fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d10f      	bne.n	8007620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800760c:	429a      	cmp	r2, r3
 800760e:	d107      	bne.n	8007620 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40023800 	.word	0x40023800

08007634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e041      	b.n	80076ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fc fe08 	bl	8004270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f001 f944 	bl	8008900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d001      	beq.n	80076ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e046      	b.n	800777a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a23      	ldr	r2, [pc, #140]	; (8007788 <HAL_TIM_Base_Start+0xb4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d022      	beq.n	8007744 <HAL_TIM_Base_Start+0x70>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007706:	d01d      	beq.n	8007744 <HAL_TIM_Base_Start+0x70>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <HAL_TIM_Base_Start+0xb8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d018      	beq.n	8007744 <HAL_TIM_Base_Start+0x70>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <HAL_TIM_Base_Start+0xbc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d013      	beq.n	8007744 <HAL_TIM_Base_Start+0x70>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1c      	ldr	r2, [pc, #112]	; (8007794 <HAL_TIM_Base_Start+0xc0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00e      	beq.n	8007744 <HAL_TIM_Base_Start+0x70>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <HAL_TIM_Base_Start+0xc4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_TIM_Base_Start+0x70>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <HAL_TIM_Base_Start+0xc8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_TIM_Base_Start+0x70>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a18      	ldr	r2, [pc, #96]	; (80077a0 <HAL_TIM_Base_Start+0xcc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d111      	bne.n	8007768 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b06      	cmp	r3, #6
 8007754:	d010      	beq.n	8007778 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0201 	orr.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007766:	e007      	b.n	8007778 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0201 	orr.w	r2, r2, #1
 8007776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40010400 	.word	0x40010400
 800779c:	40014000 	.word	0x40014000
 80077a0:	40001800 	.word	0x40001800

080077a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e041      	b.n	800783a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f839 	bl	8007842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f001 f88c 	bl	8008900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
	...

08007858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <HAL_TIM_PWM_Start+0x24>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	bf14      	ite	ne
 8007874:	2301      	movne	r3, #1
 8007876:	2300      	moveq	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	e022      	b.n	80078c2 <HAL_TIM_PWM_Start+0x6a>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b04      	cmp	r3, #4
 8007880:	d109      	bne.n	8007896 <HAL_TIM_PWM_Start+0x3e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	e015      	b.n	80078c2 <HAL_TIM_PWM_Start+0x6a>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_PWM_Start+0x58>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e008      	b.n	80078c2 <HAL_TIM_PWM_Start+0x6a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	bf14      	ite	ne
 80078bc:	2301      	movne	r3, #1
 80078be:	2300      	moveq	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e07c      	b.n	80079c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <HAL_TIM_PWM_Start+0x82>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d8:	e013      	b.n	8007902 <HAL_TIM_PWM_Start+0xaa>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d104      	bne.n	80078ea <HAL_TIM_PWM_Start+0x92>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e8:	e00b      	b.n	8007902 <HAL_TIM_PWM_Start+0xaa>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_PWM_Start+0xa2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f8:	e003      	b.n	8007902 <HAL_TIM_PWM_Start+0xaa>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2201      	movs	r2, #1
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f001 fc0c 	bl	8009128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a2d      	ldr	r2, [pc, #180]	; (80079cc <HAL_TIM_PWM_Start+0x174>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_TIM_PWM_Start+0xcc>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a2c      	ldr	r2, [pc, #176]	; (80079d0 <HAL_TIM_PWM_Start+0x178>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d101      	bne.n	8007928 <HAL_TIM_PWM_Start+0xd0>
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <HAL_TIM_PWM_Start+0xd2>
 8007928:	2300      	movs	r3, #0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800793c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a22      	ldr	r2, [pc, #136]	; (80079cc <HAL_TIM_PWM_Start+0x174>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d022      	beq.n	800798e <HAL_TIM_PWM_Start+0x136>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007950:	d01d      	beq.n	800798e <HAL_TIM_PWM_Start+0x136>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <HAL_TIM_PWM_Start+0x17c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d018      	beq.n	800798e <HAL_TIM_PWM_Start+0x136>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <HAL_TIM_PWM_Start+0x180>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d013      	beq.n	800798e <HAL_TIM_PWM_Start+0x136>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <HAL_TIM_PWM_Start+0x184>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00e      	beq.n	800798e <HAL_TIM_PWM_Start+0x136>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a16      	ldr	r2, [pc, #88]	; (80079d0 <HAL_TIM_PWM_Start+0x178>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d009      	beq.n	800798e <HAL_TIM_PWM_Start+0x136>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a18      	ldr	r2, [pc, #96]	; (80079e0 <HAL_TIM_PWM_Start+0x188>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d004      	beq.n	800798e <HAL_TIM_PWM_Start+0x136>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a16      	ldr	r2, [pc, #88]	; (80079e4 <HAL_TIM_PWM_Start+0x18c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d111      	bne.n	80079b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b06      	cmp	r3, #6
 800799e:	d010      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b0:	e007      	b.n	80079c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0201 	orr.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40010000 	.word	0x40010000
 80079d0:	40010400 	.word	0x40010400
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40001800 	.word	0x40001800

080079e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e041      	b.n	8007a7e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f839 	bl	8007a86 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f000 ff6a 	bl	8008900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_IC_Start_DMA+0x22>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	e013      	b.n	8007ae6 <HAL_TIM_IC_Start_DMA+0x4a>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_IC_Start_DMA+0x32>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	e00b      	b.n	8007ae6 <HAL_TIM_IC_Start_DMA+0x4a>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_IC_Start_DMA+0x42>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	e003      	b.n	8007ae6 <HAL_TIM_IC_Start_DMA+0x4a>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <HAL_TIM_IC_Start_DMA+0x5c>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	e013      	b.n	8007b20 <HAL_TIM_IC_Start_DMA+0x84>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d104      	bne.n	8007b08 <HAL_TIM_IC_Start_DMA+0x6c>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	e00b      	b.n	8007b20 <HAL_TIM_IC_Start_DMA+0x84>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d104      	bne.n	8007b18 <HAL_TIM_IC_Start_DMA+0x7c>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	e003      	b.n	8007b20 <HAL_TIM_IC_Start_DMA+0x84>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007b22:	7dbb      	ldrb	r3, [r7, #22]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d002      	beq.n	8007b2e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007b28:	7d7b      	ldrb	r3, [r7, #21]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e146      	b.n	8007dc0 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d143      	bne.n	8007bc0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007b38:	7d7b      	ldrb	r3, [r7, #21]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d140      	bne.n	8007bc0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <HAL_TIM_IC_Start_DMA+0xb2>
 8007b44:	887b      	ldrh	r3, [r7, #2]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e138      	b.n	8007dc0 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d104      	bne.n	8007b5e <HAL_TIM_IC_Start_DMA+0xc2>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b5c:	e013      	b.n	8007b86 <HAL_TIM_IC_Start_DMA+0xea>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	d104      	bne.n	8007b6e <HAL_TIM_IC_Start_DMA+0xd2>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b6c:	e00b      	b.n	8007b86 <HAL_TIM_IC_Start_DMA+0xea>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d104      	bne.n	8007b7e <HAL_TIM_IC_Start_DMA+0xe2>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b7c:	e003      	b.n	8007b86 <HAL_TIM_IC_Start_DMA+0xea>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIM_IC_Start_DMA+0xfa>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8007b94:	e016      	b.n	8007bc4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d104      	bne.n	8007ba6 <HAL_TIM_IC_Start_DMA+0x10a>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8007ba4:	e00e      	b.n	8007bc4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d104      	bne.n	8007bb6 <HAL_TIM_IC_Start_DMA+0x11a>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8007bb4:	e006      	b.n	8007bc4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8007bbe:	e001      	b.n	8007bc4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0fd      	b.n	8007dc0 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 faab 	bl	8009128 <TIM_CCxChannelCmd>

  switch (Channel)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b0c      	cmp	r3, #12
 8007bd6:	f200 80ad 	bhi.w	8007d34 <HAL_TIM_IC_Start_DMA+0x298>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <HAL_TIM_IC_Start_DMA+0x144>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c15 	.word	0x08007c15
 8007be4:	08007d35 	.word	0x08007d35
 8007be8:	08007d35 	.word	0x08007d35
 8007bec:	08007d35 	.word	0x08007d35
 8007bf0:	08007c5d 	.word	0x08007c5d
 8007bf4:	08007d35 	.word	0x08007d35
 8007bf8:	08007d35 	.word	0x08007d35
 8007bfc:	08007d35 	.word	0x08007d35
 8007c00:	08007ca5 	.word	0x08007ca5
 8007c04:	08007d35 	.word	0x08007d35
 8007c08:	08007d35 	.word	0x08007d35
 8007c0c:	08007d35 	.word	0x08007d35
 8007c10:	08007ced 	.word	0x08007ced
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	4a6b      	ldr	r2, [pc, #428]	; (8007dc8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	4a6a      	ldr	r2, [pc, #424]	; (8007dcc <HAL_TIM_IC_Start_DMA+0x330>)
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	4a69      	ldr	r2, [pc, #420]	; (8007dd0 <HAL_TIM_IC_Start_DMA+0x334>)
 8007c2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3334      	adds	r3, #52	; 0x34
 8007c36:	4619      	mov	r1, r3
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	887b      	ldrh	r3, [r7, #2]
 8007c3c:	f7fd ff68 	bl	8005b10 <HAL_DMA_Start_IT>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e0ba      	b.n	8007dc0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c58:	60da      	str	r2, [r3, #12]
      break;
 8007c5a:	e06e      	b.n	8007d3a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	4a59      	ldr	r2, [pc, #356]	; (8007dc8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007c62:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	4a58      	ldr	r2, [pc, #352]	; (8007dcc <HAL_TIM_IC_Start_DMA+0x330>)
 8007c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	4a57      	ldr	r2, [pc, #348]	; (8007dd0 <HAL_TIM_IC_Start_DMA+0x334>)
 8007c72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3338      	adds	r3, #56	; 0x38
 8007c7e:	4619      	mov	r1, r3
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	887b      	ldrh	r3, [r7, #2]
 8007c84:	f7fd ff44 	bl	8005b10 <HAL_DMA_Start_IT>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e096      	b.n	8007dc0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ca0:	60da      	str	r2, [r3, #12]
      break;
 8007ca2:	e04a      	b.n	8007d3a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4a47      	ldr	r2, [pc, #284]	; (8007dc8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007caa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	4a46      	ldr	r2, [pc, #280]	; (8007dcc <HAL_TIM_IC_Start_DMA+0x330>)
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	4a45      	ldr	r2, [pc, #276]	; (8007dd0 <HAL_TIM_IC_Start_DMA+0x334>)
 8007cba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	333c      	adds	r3, #60	; 0x3c
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	887b      	ldrh	r3, [r7, #2]
 8007ccc:	f7fd ff20 	bl	8005b10 <HAL_DMA_Start_IT>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e072      	b.n	8007dc0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ce8:	60da      	str	r2, [r3, #12]
      break;
 8007cea:	e026      	b.n	8007d3a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf0:	4a35      	ldr	r2, [pc, #212]	; (8007dc8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007cf2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf8:	4a34      	ldr	r2, [pc, #208]	; (8007dcc <HAL_TIM_IC_Start_DMA+0x330>)
 8007cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d00:	4a33      	ldr	r2, [pc, #204]	; (8007dd0 <HAL_TIM_IC_Start_DMA+0x334>)
 8007d02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3340      	adds	r3, #64	; 0x40
 8007d0e:	4619      	mov	r1, r3
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	887b      	ldrh	r3, [r7, #2]
 8007d14:	f7fd fefc 	bl	8005b10 <HAL_DMA_Start_IT>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e04e      	b.n	8007dc0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d30:	60da      	str	r2, [r3, #12]
      break;
 8007d32:	e002      	b.n	8007d3a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	75fb      	strb	r3, [r7, #23]
      break;
 8007d38:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a25      	ldr	r2, [pc, #148]	; (8007dd4 <HAL_TIM_IC_Start_DMA+0x338>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d022      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x2ee>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4c:	d01d      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x2ee>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a21      	ldr	r2, [pc, #132]	; (8007dd8 <HAL_TIM_IC_Start_DMA+0x33c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d018      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x2ee>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <HAL_TIM_IC_Start_DMA+0x340>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x2ee>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1e      	ldr	r2, [pc, #120]	; (8007de0 <HAL_TIM_IC_Start_DMA+0x344>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x2ee>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1c      	ldr	r2, [pc, #112]	; (8007de4 <HAL_TIM_IC_Start_DMA+0x348>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x2ee>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1b      	ldr	r2, [pc, #108]	; (8007de8 <HAL_TIM_IC_Start_DMA+0x34c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x2ee>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a19      	ldr	r2, [pc, #100]	; (8007dec <HAL_TIM_IC_Start_DMA+0x350>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d111      	bne.n	8007dae <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b06      	cmp	r3, #6
 8007d9a:	d010      	beq.n	8007dbe <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dac:	e007      	b.n	8007dbe <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0201 	orr.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	080087d1 	.word	0x080087d1
 8007dcc:	08008899 	.word	0x08008899
 8007dd0:	0800873f 	.word	0x0800873f
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40000400 	.word	0x40000400
 8007ddc:	40000800 	.word	0x40000800
 8007de0:	40000c00 	.word	0x40000c00
 8007de4:	40010400 	.word	0x40010400
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40001800 	.word	0x40001800

08007df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e097      	b.n	8007f34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7fc fb31 	bl	8004480 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6812      	ldr	r2, [r2, #0]
 8007e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f000 fd5b 	bl	8008900 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	4313      	orrs	r3, r2
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e90:	f023 030c 	bic.w	r3, r3, #12
 8007e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	4313      	orrs	r3, r2
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	011a      	lsls	r2, r3, #4
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	031b      	lsls	r3, r3, #12
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007ed6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d110      	bne.n	8007f8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d102      	bne.n	8007f78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f72:	7b7b      	ldrb	r3, [r7, #13]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d001      	beq.n	8007f7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e069      	b.n	8008050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f8c:	e031      	b.n	8007ff2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d110      	bne.n	8007fb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d102      	bne.n	8007fa0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f9a:	7b3b      	ldrb	r3, [r7, #12]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d001      	beq.n	8007fa4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e055      	b.n	8008050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fb4:	e01d      	b.n	8007ff2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d108      	bne.n	8007fce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d105      	bne.n	8007fce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fc2:	7b7b      	ldrb	r3, [r7, #13]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d102      	bne.n	8007fce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fc8:	7b3b      	ldrb	r3, [r7, #12]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d001      	beq.n	8007fd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e03e      	b.n	8008050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_TIM_Encoder_Start+0xc4>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d008      	beq.n	8008010 <HAL_TIM_Encoder_Start+0xd4>
 8007ffe:	e00f      	b.n	8008020 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2201      	movs	r2, #1
 8008006:	2100      	movs	r1, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f001 f88d 	bl	8009128 <TIM_CCxChannelCmd>
      break;
 800800e:	e016      	b.n	800803e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	2104      	movs	r1, #4
 8008018:	4618      	mov	r0, r3
 800801a:	f001 f885 	bl	8009128 <TIM_CCxChannelCmd>
      break;
 800801e:	e00e      	b.n	800803e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2201      	movs	r2, #1
 8008026:	2100      	movs	r1, #0
 8008028:	4618      	mov	r0, r3
 800802a:	f001 f87d 	bl	8009128 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2201      	movs	r2, #1
 8008034:	2104      	movs	r1, #4
 8008036:	4618      	mov	r0, r3
 8008038:	f001 f876 	bl	8009128 <TIM_CCxChannelCmd>
      break;
 800803c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0201 	orr.w	r2, r2, #1
 800804c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b02      	cmp	r3, #2
 800806c:	d122      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b02      	cmp	r3, #2
 800807a:	d11b      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0202 	mvn.w	r2, #2
 8008084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb1d 	bl	80086da <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fb0f 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fb2a 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d122      	bne.n	8008108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d11b      	bne.n	8008108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0204 	mvn.w	r2, #4
 80080d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 faf3 	bl	80086da <HAL_TIM_IC_CaptureCallback>
 80080f4:	e005      	b.n	8008102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fae5 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fb00 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	2b08      	cmp	r3, #8
 8008114:	d122      	bne.n	800815c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b08      	cmp	r3, #8
 8008122:	d11b      	bne.n	800815c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0208 	mvn.w	r2, #8
 800812c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2204      	movs	r2, #4
 8008132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fac9 	bl	80086da <HAL_TIM_IC_CaptureCallback>
 8008148:	e005      	b.n	8008156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fabb 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fad6 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f003 0310 	and.w	r3, r3, #16
 8008166:	2b10      	cmp	r3, #16
 8008168:	d122      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	2b10      	cmp	r3, #16
 8008176:	d11b      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0210 	mvn.w	r2, #16
 8008180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2208      	movs	r2, #8
 8008186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa9f 	bl	80086da <HAL_TIM_IC_CaptureCallback>
 800819c:	e005      	b.n	80081aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa91 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 faac 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d10e      	bne.n	80081dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d107      	bne.n	80081dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0201 	mvn.w	r2, #1
 80081d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa6b 	bl	80086b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d10e      	bne.n	8008208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f4:	2b80      	cmp	r3, #128	; 0x80
 80081f6:	d107      	bne.n	8008208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f88e 	bl	8009324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b40      	cmp	r3, #64	; 0x40
 8008214:	d10e      	bne.n	8008234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008220:	2b40      	cmp	r3, #64	; 0x40
 8008222:	d107      	bne.n	8008234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa71 	bl	8008716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b20      	cmp	r3, #32
 8008240:	d10e      	bne.n	8008260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f003 0320 	and.w	r3, r3, #32
 800824c:	2b20      	cmp	r3, #32
 800824e:	d107      	bne.n	8008260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f06f 0220 	mvn.w	r2, #32
 8008258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 f858 	bl	8009310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008282:	2302      	movs	r3, #2
 8008284:	e088      	b.n	8008398 <HAL_TIM_IC_ConfigChannel+0x130>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d11b      	bne.n	80082cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	6819      	ldr	r1, [r3, #0]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f000 fd7c 	bl	8008da0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 020c 	bic.w	r2, r2, #12
 80082b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6999      	ldr	r1, [r3, #24]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	619a      	str	r2, [r3, #24]
 80082ca:	e060      	b.n	800838e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d11c      	bne.n	800830c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6819      	ldr	r1, [r3, #0]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f000 fe00 	bl	8008ee6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699a      	ldr	r2, [r3, #24]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6999      	ldr	r1, [r3, #24]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	021a      	lsls	r2, r3, #8
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	619a      	str	r2, [r3, #24]
 800830a:	e040      	b.n	800838e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d11b      	bne.n	800834a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	6819      	ldr	r1, [r3, #0]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f000 fe4d 	bl	8008fc0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 020c 	bic.w	r2, r2, #12
 8008334:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69d9      	ldr	r1, [r3, #28]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	61da      	str	r2, [r3, #28]
 8008348:	e021      	b.n	800838e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b0c      	cmp	r3, #12
 800834e:	d11c      	bne.n	800838a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6819      	ldr	r1, [r3, #0]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f000 fe6a 	bl	8009038 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69da      	ldr	r2, [r3, #28]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008372:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	69d9      	ldr	r1, [r3, #28]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	021a      	lsls	r2, r3, #8
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	61da      	str	r2, [r3, #28]
 8008388:	e001      	b.n	800838e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e0ae      	b.n	800851c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b0c      	cmp	r3, #12
 80083ca:	f200 809f 	bhi.w	800850c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80083ce:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	08008409 	.word	0x08008409
 80083d8:	0800850d 	.word	0x0800850d
 80083dc:	0800850d 	.word	0x0800850d
 80083e0:	0800850d 	.word	0x0800850d
 80083e4:	08008449 	.word	0x08008449
 80083e8:	0800850d 	.word	0x0800850d
 80083ec:	0800850d 	.word	0x0800850d
 80083f0:	0800850d 	.word	0x0800850d
 80083f4:	0800848b 	.word	0x0800848b
 80083f8:	0800850d 	.word	0x0800850d
 80083fc:	0800850d 	.word	0x0800850d
 8008400:	0800850d 	.word	0x0800850d
 8008404:	080084cb 	.word	0x080084cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fb16 	bl	8008a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f042 0208 	orr.w	r2, r2, #8
 8008422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0204 	bic.w	r2, r2, #4
 8008432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6999      	ldr	r1, [r3, #24]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	619a      	str	r2, [r3, #24]
      break;
 8008446:	e064      	b.n	8008512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fb66 	bl	8008b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6999      	ldr	r1, [r3, #24]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	021a      	lsls	r2, r3, #8
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	619a      	str	r2, [r3, #24]
      break;
 8008488:	e043      	b.n	8008512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fbbb 	bl	8008c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0208 	orr.w	r2, r2, #8
 80084a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0204 	bic.w	r2, r2, #4
 80084b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69d9      	ldr	r1, [r3, #28]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	691a      	ldr	r2, [r3, #16]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	61da      	str	r2, [r3, #28]
      break;
 80084c8:	e023      	b.n	8008512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fc0f 	bl	8008cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69d9      	ldr	r1, [r3, #28]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	021a      	lsls	r2, r3, #8
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	61da      	str	r2, [r3, #28]
      break;
 800850a:	e002      	b.n	8008512 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	75fb      	strb	r3, [r7, #23]
      break;
 8008510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_TIM_ConfigClockSource+0x1c>
 800853c:	2302      	movs	r3, #2
 800853e:	e0b4      	b.n	80086aa <HAL_TIM_ConfigClockSource+0x186>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800855e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008578:	d03e      	beq.n	80085f8 <HAL_TIM_ConfigClockSource+0xd4>
 800857a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800857e:	f200 8087 	bhi.w	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 8008582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008586:	f000 8086 	beq.w	8008696 <HAL_TIM_ConfigClockSource+0x172>
 800858a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800858e:	d87f      	bhi.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 8008590:	2b70      	cmp	r3, #112	; 0x70
 8008592:	d01a      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0xa6>
 8008594:	2b70      	cmp	r3, #112	; 0x70
 8008596:	d87b      	bhi.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 8008598:	2b60      	cmp	r3, #96	; 0x60
 800859a:	d050      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x11a>
 800859c:	2b60      	cmp	r3, #96	; 0x60
 800859e:	d877      	bhi.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 80085a0:	2b50      	cmp	r3, #80	; 0x50
 80085a2:	d03c      	beq.n	800861e <HAL_TIM_ConfigClockSource+0xfa>
 80085a4:	2b50      	cmp	r3, #80	; 0x50
 80085a6:	d873      	bhi.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 80085a8:	2b40      	cmp	r3, #64	; 0x40
 80085aa:	d058      	beq.n	800865e <HAL_TIM_ConfigClockSource+0x13a>
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	d86f      	bhi.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	d064      	beq.n	800867e <HAL_TIM_ConfigClockSource+0x15a>
 80085b4:	2b30      	cmp	r3, #48	; 0x30
 80085b6:	d86b      	bhi.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d060      	beq.n	800867e <HAL_TIM_ConfigClockSource+0x15a>
 80085bc:	2b20      	cmp	r3, #32
 80085be:	d867      	bhi.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d05c      	beq.n	800867e <HAL_TIM_ConfigClockSource+0x15a>
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d05a      	beq.n	800867e <HAL_TIM_ConfigClockSource+0x15a>
 80085c8:	e062      	b.n	8008690 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6899      	ldr	r1, [r3, #8]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f000 fd85 	bl	80090e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	609a      	str	r2, [r3, #8]
      break;
 80085f6:	e04f      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	6899      	ldr	r1, [r3, #8]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f000 fd6e 	bl	80090e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800861a:	609a      	str	r2, [r3, #8]
      break;
 800861c:	e03c      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6859      	ldr	r1, [r3, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	461a      	mov	r2, r3
 800862c:	f000 fc2c 	bl	8008e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2150      	movs	r1, #80	; 0x50
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fd3b 	bl	80090b2 <TIM_ITRx_SetConfig>
      break;
 800863c:	e02c      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	6859      	ldr	r1, [r3, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	461a      	mov	r2, r3
 800864c:	f000 fc88 	bl	8008f60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2160      	movs	r1, #96	; 0x60
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fd2b 	bl	80090b2 <TIM_ITRx_SetConfig>
      break;
 800865c:	e01c      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	6859      	ldr	r1, [r3, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	461a      	mov	r2, r3
 800866c:	f000 fc0c 	bl	8008e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2140      	movs	r1, #64	; 0x40
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fd1b 	bl	80090b2 <TIM_ITRx_SetConfig>
      break;
 800867c:	e00c      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f000 fd12 	bl	80090b2 <TIM_ITRx_SetConfig>
      break;
 800868e:	e003      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	73fb      	strb	r3, [r7, #15]
      break;
 8008694:	e000      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	429a      	cmp	r2, r3
 8008754:	d107      	bne.n	8008766 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008764:	e02a      	b.n	80087bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	429a      	cmp	r2, r3
 800876e:	d107      	bne.n	8008780 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2202      	movs	r2, #2
 8008774:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800877e:	e01d      	b.n	80087bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d107      	bne.n	800879a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2204      	movs	r2, #4
 800878e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008798:	e010      	b.n	80087bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d107      	bne.n	80087b4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2208      	movs	r2, #8
 80087a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087b2:	e003      	b.n	80087bc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff ffb4 	bl	800872a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	771a      	strb	r2, [r3, #28]
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d10f      	bne.n	8008808 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d146      	bne.n	8008884 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008806:	e03d      	b.n	8008884 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	429a      	cmp	r2, r3
 8008810:	d10f      	bne.n	8008832 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2202      	movs	r2, #2
 8008816:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d131      	bne.n	8008884 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008830:	e028      	b.n	8008884 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	d10f      	bne.n	800885c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2204      	movs	r2, #4
 8008840:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d11c      	bne.n	8008884 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800885a:	e013      	b.n	8008884 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d10e      	bne.n	8008884 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2208      	movs	r2, #8
 800886a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d107      	bne.n	8008884 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff ff28 	bl	80086da <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	771a      	strb	r2, [r3, #28]
}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d103      	bne.n	80088b8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	771a      	strb	r2, [r3, #28]
 80088b6:	e019      	b.n	80088ec <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d103      	bne.n	80088ca <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2202      	movs	r2, #2
 80088c6:	771a      	strb	r2, [r3, #28]
 80088c8:	e010      	b.n	80088ec <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d103      	bne.n	80088dc <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2204      	movs	r2, #4
 80088d8:	771a      	strb	r2, [r3, #28]
 80088da:	e007      	b.n	80088ec <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d102      	bne.n	80088ec <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2208      	movs	r2, #8
 80088ea:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f7ff fefe 	bl	80086ee <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	771a      	strb	r2, [r3, #28]
}
 80088f8:	bf00      	nop
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a40      	ldr	r2, [pc, #256]	; (8008a14 <TIM_Base_SetConfig+0x114>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d013      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891e:	d00f      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a3d      	ldr	r2, [pc, #244]	; (8008a18 <TIM_Base_SetConfig+0x118>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00b      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a3c      	ldr	r2, [pc, #240]	; (8008a1c <TIM_Base_SetConfig+0x11c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d007      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a3b      	ldr	r2, [pc, #236]	; (8008a20 <TIM_Base_SetConfig+0x120>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a3a      	ldr	r2, [pc, #232]	; (8008a24 <TIM_Base_SetConfig+0x124>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d108      	bne.n	8008952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2f      	ldr	r2, [pc, #188]	; (8008a14 <TIM_Base_SetConfig+0x114>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d02b      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008960:	d027      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a2c      	ldr	r2, [pc, #176]	; (8008a18 <TIM_Base_SetConfig+0x118>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d023      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a2b      	ldr	r2, [pc, #172]	; (8008a1c <TIM_Base_SetConfig+0x11c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d01f      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2a      	ldr	r2, [pc, #168]	; (8008a20 <TIM_Base_SetConfig+0x120>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d01b      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a29      	ldr	r2, [pc, #164]	; (8008a24 <TIM_Base_SetConfig+0x124>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d017      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a28      	ldr	r2, [pc, #160]	; (8008a28 <TIM_Base_SetConfig+0x128>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d013      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a27      	ldr	r2, [pc, #156]	; (8008a2c <TIM_Base_SetConfig+0x12c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00f      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a26      	ldr	r2, [pc, #152]	; (8008a30 <TIM_Base_SetConfig+0x130>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d00b      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a25      	ldr	r2, [pc, #148]	; (8008a34 <TIM_Base_SetConfig+0x134>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d007      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a24      	ldr	r2, [pc, #144]	; (8008a38 <TIM_Base_SetConfig+0x138>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d003      	beq.n	80089b2 <TIM_Base_SetConfig+0xb2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a23      	ldr	r2, [pc, #140]	; (8008a3c <TIM_Base_SetConfig+0x13c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d108      	bne.n	80089c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a0a      	ldr	r2, [pc, #40]	; (8008a14 <TIM_Base_SetConfig+0x114>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_Base_SetConfig+0xf8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a0c      	ldr	r2, [pc, #48]	; (8008a24 <TIM_Base_SetConfig+0x124>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d103      	bne.n	8008a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	615a      	str	r2, [r3, #20]
}
 8008a06:	bf00      	nop
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40010000 	.word	0x40010000
 8008a18:	40000400 	.word	0x40000400
 8008a1c:	40000800 	.word	0x40000800
 8008a20:	40000c00 	.word	0x40000c00
 8008a24:	40010400 	.word	0x40010400
 8008a28:	40014000 	.word	0x40014000
 8008a2c:	40014400 	.word	0x40014400
 8008a30:	40014800 	.word	0x40014800
 8008a34:	40001800 	.word	0x40001800
 8008a38:	40001c00 	.word	0x40001c00
 8008a3c:	40002000 	.word	0x40002000

08008a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	f023 0201 	bic.w	r2, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f023 0302 	bic.w	r3, r3, #2
 8008a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a20      	ldr	r2, [pc, #128]	; (8008b18 <TIM_OC1_SetConfig+0xd8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d003      	beq.n	8008aa4 <TIM_OC1_SetConfig+0x64>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1f      	ldr	r2, [pc, #124]	; (8008b1c <TIM_OC1_SetConfig+0xdc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d10c      	bne.n	8008abe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 0308 	bic.w	r3, r3, #8
 8008aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f023 0304 	bic.w	r3, r3, #4
 8008abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <TIM_OC1_SetConfig+0xd8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_OC1_SetConfig+0x8e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a14      	ldr	r2, [pc, #80]	; (8008b1c <TIM_OC1_SetConfig+0xdc>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d111      	bne.n	8008af2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	621a      	str	r2, [r3, #32]
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	40010000 	.word	0x40010000
 8008b1c:	40010400 	.word	0x40010400

08008b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f023 0210 	bic.w	r2, r3, #16
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0320 	bic.w	r3, r3, #32
 8008b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a22      	ldr	r2, [pc, #136]	; (8008c04 <TIM_OC2_SetConfig+0xe4>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d003      	beq.n	8008b88 <TIM_OC2_SetConfig+0x68>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a21      	ldr	r2, [pc, #132]	; (8008c08 <TIM_OC2_SetConfig+0xe8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d10d      	bne.n	8008ba4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	011b      	lsls	r3, r3, #4
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a17      	ldr	r2, [pc, #92]	; (8008c04 <TIM_OC2_SetConfig+0xe4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d003      	beq.n	8008bb4 <TIM_OC2_SetConfig+0x94>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a16      	ldr	r2, [pc, #88]	; (8008c08 <TIM_OC2_SetConfig+0xe8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d113      	bne.n	8008bdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40010400 	.word	0x40010400

08008c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a21      	ldr	r2, [pc, #132]	; (8008cec <TIM_OC3_SetConfig+0xe0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d003      	beq.n	8008c72 <TIM_OC3_SetConfig+0x66>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a20      	ldr	r2, [pc, #128]	; (8008cf0 <TIM_OC3_SetConfig+0xe4>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d10d      	bne.n	8008c8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	021b      	lsls	r3, r3, #8
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a16      	ldr	r2, [pc, #88]	; (8008cec <TIM_OC3_SetConfig+0xe0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d003      	beq.n	8008c9e <TIM_OC3_SetConfig+0x92>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a15      	ldr	r2, [pc, #84]	; (8008cf0 <TIM_OC3_SetConfig+0xe4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d113      	bne.n	8008cc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	621a      	str	r2, [r3, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40010400 	.word	0x40010400

08008cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	031b      	lsls	r3, r3, #12
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a12      	ldr	r2, [pc, #72]	; (8008d98 <TIM_OC4_SetConfig+0xa4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_OC4_SetConfig+0x68>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a11      	ldr	r2, [pc, #68]	; (8008d9c <TIM_OC4_SetConfig+0xa8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d109      	bne.n	8008d70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	019b      	lsls	r3, r3, #6
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000
 8008d9c:	40010400 	.word	0x40010400

08008da0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f023 0201 	bic.w	r2, r3, #1
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a28      	ldr	r2, [pc, #160]	; (8008e6c <TIM_TI1_SetConfig+0xcc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d01b      	beq.n	8008e06 <TIM_TI1_SetConfig+0x66>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd4:	d017      	beq.n	8008e06 <TIM_TI1_SetConfig+0x66>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4a25      	ldr	r2, [pc, #148]	; (8008e70 <TIM_TI1_SetConfig+0xd0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d013      	beq.n	8008e06 <TIM_TI1_SetConfig+0x66>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4a24      	ldr	r2, [pc, #144]	; (8008e74 <TIM_TI1_SetConfig+0xd4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00f      	beq.n	8008e06 <TIM_TI1_SetConfig+0x66>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4a23      	ldr	r2, [pc, #140]	; (8008e78 <TIM_TI1_SetConfig+0xd8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00b      	beq.n	8008e06 <TIM_TI1_SetConfig+0x66>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <TIM_TI1_SetConfig+0xdc>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <TIM_TI1_SetConfig+0x66>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <TIM_TI1_SetConfig+0xe0>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d003      	beq.n	8008e06 <TIM_TI1_SetConfig+0x66>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <TIM_TI1_SetConfig+0xe4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d101      	bne.n	8008e0a <TIM_TI1_SetConfig+0x6a>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <TIM_TI1_SetConfig+0x6c>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d008      	beq.n	8008e22 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	e003      	b.n	8008e2a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f043 0301 	orr.w	r3, r3, #1
 8008e28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f023 030a 	bic.w	r3, r3, #10
 8008e44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f003 030a 	and.w	r3, r3, #10
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	621a      	str	r2, [r3, #32]
}
 8008e5e:	bf00      	nop
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40010000 	.word	0x40010000
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40000c00 	.word	0x40000c00
 8008e7c:	40010400 	.word	0x40010400
 8008e80:	40014000 	.word	0x40014000
 8008e84:	40001800 	.word	0x40001800

08008e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f023 030a 	bic.w	r3, r3, #10
 8008ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	621a      	str	r2, [r3, #32]
}
 8008eda:	bf00      	nop
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	f023 0210 	bic.w	r2, r3, #16
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	031b      	lsls	r3, r3, #12
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	621a      	str	r2, [r3, #32]
}
 8008f54:	bf00      	nop
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	f023 0210 	bic.w	r2, r3, #16
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	031b      	lsls	r3, r3, #12
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	621a      	str	r2, [r3, #32]
}
 8008fb4:	bf00      	nop
 8008fb6:	371c      	adds	r7, #28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ffc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	011b      	lsls	r3, r3, #4
 8009002:	b2db      	uxtb	r3, r3
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009010:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	621a      	str	r2, [r3, #32]
}
 800902c:	bf00      	nop
 800902e:	371c      	adds	r7, #28
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009064:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009076:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	031b      	lsls	r3, r3, #12
 800907c:	b29b      	uxth	r3, r3
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800908a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	031b      	lsls	r3, r3, #12
 8009090:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	4313      	orrs	r3, r2
 8009098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	621a      	str	r2, [r3, #32]
}
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f043 0307 	orr.w	r3, r3, #7
 80090d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	609a      	str	r2, [r3, #8]
}
 80090dc:	bf00      	nop
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	021a      	lsls	r2, r3, #8
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	431a      	orrs	r2, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4313      	orrs	r3, r2
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	609a      	str	r2, [r3, #8]
}
 800911c:	bf00      	nop
 800911e:	371c      	adds	r7, #28
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f003 031f 	and.w	r3, r3, #31
 800913a:	2201      	movs	r2, #1
 800913c:	fa02 f303 	lsl.w	r3, r2, r3
 8009140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1a      	ldr	r2, [r3, #32]
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	43db      	mvns	r3, r3
 800914a:	401a      	ands	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a1a      	ldr	r2, [r3, #32]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f003 031f 	and.w	r3, r3, #31
 800915a:	6879      	ldr	r1, [r7, #4]
 800915c:	fa01 f303 	lsl.w	r3, r1, r3
 8009160:	431a      	orrs	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	621a      	str	r2, [r3, #32]
}
 8009166:	bf00      	nop
 8009168:	371c      	adds	r7, #28
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009188:	2302      	movs	r3, #2
 800918a:	e05a      	b.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a21      	ldr	r2, [pc, #132]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d022      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d8:	d01d      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d018      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1a      	ldr	r2, [pc, #104]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00e      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a17      	ldr	r2, [pc, #92]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a15      	ldr	r2, [pc, #84]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d10c      	bne.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800921c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4313      	orrs	r3, r2
 8009226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000
 8009254:	40000400 	.word	0x40000400
 8009258:	40000800 	.word	0x40000800
 800925c:	40000c00 	.word	0x40000c00
 8009260:	40010400 	.word	0x40010400
 8009264:	40014000 	.word	0x40014000
 8009268:	40001800 	.word	0x40001800

0800926c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009284:	2302      	movs	r3, #2
 8009286:	e03d      	b.n	8009304 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e03f      	b.n	80093ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fb f95c 	bl	800461c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2224      	movs	r2, #36	; 0x24
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800937a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fe81 	bl	800a084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	695a      	ldr	r2, [r3, #20]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b08a      	sub	sp, #40	; 0x28
 80093d6:	af02      	add	r7, sp, #8
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	603b      	str	r3, [r7, #0]
 80093de:	4613      	mov	r3, r2
 80093e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d17c      	bne.n	80094ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <HAL_UART_Transmit+0x2c>
 80093f8:	88fb      	ldrh	r3, [r7, #6]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e075      	b.n	80094ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009408:	2b01      	cmp	r3, #1
 800940a:	d101      	bne.n	8009410 <HAL_UART_Transmit+0x3e>
 800940c:	2302      	movs	r3, #2
 800940e:	e06e      	b.n	80094ee <HAL_UART_Transmit+0x11c>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2221      	movs	r2, #33	; 0x21
 8009422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009426:	f7fb fbdb 	bl	8004be0 <HAL_GetTick>
 800942a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	88fa      	ldrh	r2, [r7, #6]
 8009430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	88fa      	ldrh	r2, [r7, #6]
 8009436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009440:	d108      	bne.n	8009454 <HAL_UART_Transmit+0x82>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d104      	bne.n	8009454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800944a:	2300      	movs	r3, #0
 800944c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	61bb      	str	r3, [r7, #24]
 8009452:	e003      	b.n	800945c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009458:	2300      	movs	r3, #0
 800945a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009464:	e02a      	b.n	80094bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2200      	movs	r2, #0
 800946e:	2180      	movs	r1, #128	; 0x80
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fbc1 	bl	8009bf8 <UART_WaitOnFlagUntilTimeout>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e036      	b.n	80094ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10b      	bne.n	800949e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	3302      	adds	r3, #2
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	e007      	b.n	80094ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	3301      	adds	r3, #1
 80094ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1cf      	bne.n	8009466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2200      	movs	r2, #0
 80094ce:	2140      	movs	r1, #64	; 0x40
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fb91 	bl	8009bf8 <UART_WaitOnFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e006      	b.n	80094ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	e000      	b.n	80094ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3720      	adds	r7, #32
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b08a      	sub	sp, #40	; 0x28
 80094fa:	af02      	add	r7, sp, #8
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	603b      	str	r3, [r7, #0]
 8009502:	4613      	mov	r3, r2
 8009504:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b20      	cmp	r3, #32
 8009514:	f040 808c 	bne.w	8009630 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <HAL_UART_Receive+0x2e>
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e084      	b.n	8009632 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_UART_Receive+0x40>
 8009532:	2302      	movs	r3, #2
 8009534:	e07d      	b.n	8009632 <HAL_UART_Receive+0x13c>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2222      	movs	r2, #34	; 0x22
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009552:	f7fb fb45 	bl	8004be0 <HAL_GetTick>
 8009556:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	88fa      	ldrh	r2, [r7, #6]
 800955c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	88fa      	ldrh	r2, [r7, #6]
 8009562:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956c:	d108      	bne.n	8009580 <HAL_UART_Receive+0x8a>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d104      	bne.n	8009580 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	e003      	b.n	8009588 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009584:	2300      	movs	r3, #0
 8009586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009590:	e043      	b.n	800961a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2200      	movs	r2, #0
 800959a:	2120      	movs	r1, #32
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fb2b 	bl	8009bf8 <UART_WaitOnFlagUntilTimeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e042      	b.n	8009632 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10c      	bne.n	80095cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095be:	b29a      	uxth	r2, r3
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	3302      	adds	r3, #2
 80095c8:	61bb      	str	r3, [r7, #24]
 80095ca:	e01f      	b.n	800960c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d4:	d007      	beq.n	80095e6 <HAL_UART_Receive+0xf0>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <HAL_UART_Receive+0xfe>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d106      	bne.n	80095f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e008      	b.n	8009606 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009600:	b2da      	uxtb	r2, r3
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	3301      	adds	r3, #1
 800960a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009610:	b29b      	uxth	r3, r3
 8009612:	3b01      	subs	r3, #1
 8009614:	b29a      	uxth	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800961e:	b29b      	uxth	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1b6      	bne.n	8009592 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2220      	movs	r2, #32
 8009628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	e000      	b.n	8009632 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009630:	2302      	movs	r3, #2
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	4613      	mov	r3, r2
 8009646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b20      	cmp	r3, #32
 8009652:	d11d      	bne.n	8009690 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <HAL_UART_Receive_IT+0x26>
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e016      	b.n	8009692 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <HAL_UART_Receive_IT+0x38>
 800966e:	2302      	movs	r3, #2
 8009670:	e00f      	b.n	8009692 <HAL_UART_Receive_IT+0x58>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	461a      	mov	r2, r3
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 fb24 	bl	8009cd4 <UART_Start_Receive_IT>
 800968c:	4603      	mov	r3, r0
 800968e:	e000      	b.n	8009692 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009690:	2302      	movs	r3, #2
  }
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b0ba      	sub	sp, #232	; 0xe8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80096c8:	2300      	movs	r3, #0
 80096ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80096da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10f      	bne.n	8009702 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <HAL_UART_IRQHandler+0x66>
 80096ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fc07 	bl	8009f0e <UART_Receive_IT>
      return;
 8009700:	e256      	b.n	8009bb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 80de 	beq.w	80098c8 <HAL_UART_IRQHandler+0x22c>
 800970c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	d106      	bne.n	8009726 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800971c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 80d1 	beq.w	80098c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00b      	beq.n	800974a <HAL_UART_IRQHandler+0xae>
 8009732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973a:	2b00      	cmp	r3, #0
 800973c:	d005      	beq.n	800974a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009742:	f043 0201 	orr.w	r2, r3, #1
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800974a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974e:	f003 0304 	and.w	r3, r3, #4
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00b      	beq.n	800976e <HAL_UART_IRQHandler+0xd2>
 8009756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	f043 0202 	orr.w	r2, r3, #2
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800976e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009772:	f003 0302 	and.w	r3, r3, #2
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00b      	beq.n	8009792 <HAL_UART_IRQHandler+0xf6>
 800977a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d005      	beq.n	8009792 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	f043 0204 	orr.w	r2, r3, #4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009796:	f003 0308 	and.w	r3, r3, #8
 800979a:	2b00      	cmp	r3, #0
 800979c:	d011      	beq.n	80097c2 <HAL_UART_IRQHandler+0x126>
 800979e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a2:	f003 0320 	and.w	r3, r3, #32
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d105      	bne.n	80097b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80097aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	f043 0208 	orr.w	r2, r3, #8
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 81ed 	beq.w	8009ba6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <HAL_UART_IRQHandler+0x14e>
 80097d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097dc:	f003 0320 	and.w	r3, r3, #32
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fb92 	bl	8009f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	bf0c      	ite	eq
 80097f8:	2301      	moveq	r3, #1
 80097fa:	2300      	movne	r3, #0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d103      	bne.n	8009816 <HAL_UART_IRQHandler+0x17a>
 800980e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009812:	2b00      	cmp	r3, #0
 8009814:	d04f      	beq.n	80098b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa9a 	bl	8009d50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009826:	2b40      	cmp	r3, #64	; 0x40
 8009828:	d141      	bne.n	80098ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3314      	adds	r3, #20
 8009830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3314      	adds	r3, #20
 8009852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009856:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800985a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800986e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1d9      	bne.n	800982a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	2b00      	cmp	r3, #0
 800987c:	d013      	beq.n	80098a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	4a7d      	ldr	r2, [pc, #500]	; (8009a78 <HAL_UART_IRQHandler+0x3dc>)
 8009884:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988a:	4618      	mov	r0, r3
 800988c:	f7fc fa08 	bl	8005ca0 <HAL_DMA_Abort_IT>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d016      	beq.n	80098c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098a0:	4610      	mov	r0, r2
 80098a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098a4:	e00e      	b.n	80098c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f990 	bl	8009bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ac:	e00a      	b.n	80098c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f98c 	bl	8009bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b4:	e006      	b.n	80098c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f988 	bl	8009bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80098c2:	e170      	b.n	8009ba6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c4:	bf00      	nop
    return;
 80098c6:	e16e      	b.n	8009ba6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	f040 814a 	bne.w	8009b66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80098d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d6:	f003 0310 	and.w	r3, r3, #16
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 8143 	beq.w	8009b66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80098e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e4:	f003 0310 	and.w	r3, r3, #16
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 813c 	beq.w	8009b66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098ee:	2300      	movs	r3, #0
 80098f0:	60bb      	str	r3, [r7, #8]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60bb      	str	r3, [r7, #8]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	f040 80b4 	bne.w	8009a7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009920:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 8140 	beq.w	8009baa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800992e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009932:	429a      	cmp	r2, r3
 8009934:	f080 8139 	bcs.w	8009baa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800993e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994a:	f000 8088 	beq.w	8009a5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	330c      	adds	r3, #12
 8009954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800996c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800997a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800997e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009986:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1d9      	bne.n	800994e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3314      	adds	r3, #20
 80099a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3314      	adds	r3, #20
 80099ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e1      	bne.n	800999a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3314      	adds	r3, #20
 80099dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3314      	adds	r3, #20
 80099f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e3      	bne.n	80099d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	330c      	adds	r3, #12
 8009a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a2e:	f023 0310 	bic.w	r3, r3, #16
 8009a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009a40:	65ba      	str	r2, [r7, #88]	; 0x58
 8009a42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e3      	bne.n	8009a1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fc f8b1 	bl	8005bc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f8b6 	bl	8009be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a74:	e099      	b.n	8009baa <HAL_UART_IRQHandler+0x50e>
 8009a76:	bf00      	nop
 8009a78:	08009e17 	.word	0x08009e17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 808b 	beq.w	8009bae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8086 	beq.w	8009bae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	330c      	adds	r3, #12
 8009aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009ac6:	647a      	str	r2, [r7, #68]	; 0x44
 8009ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e3      	bne.n	8009aa2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3314      	adds	r3, #20
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3314      	adds	r3, #20
 8009afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009afe:	633a      	str	r2, [r7, #48]	; 0x30
 8009b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e3      	bne.n	8009ada <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2220      	movs	r2, #32
 8009b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	330c      	adds	r3, #12
 8009b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f023 0310 	bic.w	r3, r3, #16
 8009b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	330c      	adds	r3, #12
 8009b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009b44:	61fa      	str	r2, [r7, #28]
 8009b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	69b9      	ldr	r1, [r7, #24]
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	617b      	str	r3, [r7, #20]
   return(result);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e3      	bne.n	8009b20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f83e 	bl	8009be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b64:	e023      	b.n	8009bae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d009      	beq.n	8009b86 <HAL_UART_IRQHandler+0x4ea>
 8009b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f95d 	bl	8009e3e <UART_Transmit_IT>
    return;
 8009b84:	e014      	b.n	8009bb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00e      	beq.n	8009bb0 <HAL_UART_IRQHandler+0x514>
 8009b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d008      	beq.n	8009bb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f99d 	bl	8009ede <UART_EndTransmit_IT>
    return;
 8009ba4:	e004      	b.n	8009bb0 <HAL_UART_IRQHandler+0x514>
    return;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <HAL_UART_IRQHandler+0x514>
      return;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <HAL_UART_IRQHandler+0x514>
      return;
 8009bae:	bf00      	nop
  }
}
 8009bb0:	37e8      	adds	r7, #232	; 0xe8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop

08009bb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b090      	sub	sp, #64	; 0x40
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	4613      	mov	r3, r2
 8009c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c08:	e050      	b.n	8009cac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c10:	d04c      	beq.n	8009cac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c18:	f7fa ffe2 	bl	8004be0 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d241      	bcs.n	8009cac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	330c      	adds	r3, #12
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	330c      	adds	r3, #12
 8009c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c48:	637a      	str	r2, [r7, #52]	; 0x34
 8009c4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e5      	bne.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3314      	adds	r3, #20
 8009c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3314      	adds	r3, #20
 8009c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c7c:	623a      	str	r2, [r7, #32]
 8009c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	69f9      	ldr	r1, [r7, #28]
 8009c82:	6a3a      	ldr	r2, [r7, #32]
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e5      	bne.n	8009c5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e00f      	b.n	8009ccc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	bf0c      	ite	eq
 8009cbc:	2301      	moveq	r3, #1
 8009cbe:	2300      	movne	r3, #0
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d09f      	beq.n	8009c0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3740      	adds	r7, #64	; 0x40
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	88fa      	ldrh	r2, [r7, #6]
 8009cec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	88fa      	ldrh	r2, [r7, #6]
 8009cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2222      	movs	r2, #34	; 0x22
 8009cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d007      	beq.n	8009d22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68da      	ldr	r2, [r3, #12]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	695a      	ldr	r2, [r3, #20]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f042 0201 	orr.w	r2, r2, #1
 8009d30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68da      	ldr	r2, [r3, #12]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f042 0220 	orr.w	r2, r2, #32
 8009d40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b095      	sub	sp, #84	; 0x54
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	330c      	adds	r3, #12
 8009d5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	330c      	adds	r3, #12
 8009d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d78:	643a      	str	r2, [r7, #64]	; 0x40
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e5      	bne.n	8009d58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3314      	adds	r3, #20
 8009d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	e853 3f00 	ldrex	r3, [r3]
 8009d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	f023 0301 	bic.w	r3, r3, #1
 8009da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3314      	adds	r3, #20
 8009daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e5      	bne.n	8009d8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d119      	bne.n	8009dfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	330c      	adds	r3, #12
 8009dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	e853 3f00 	ldrex	r3, [r3]
 8009dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f023 0310 	bic.w	r3, r3, #16
 8009dde:	647b      	str	r3, [r7, #68]	; 0x44
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009de8:	61ba      	str	r2, [r7, #24]
 8009dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dec:	6979      	ldr	r1, [r7, #20]
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	e841 2300 	strex	r3, r2, [r1]
 8009df4:	613b      	str	r3, [r7, #16]
   return(result);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e5      	bne.n	8009dc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009e0a:	bf00      	nop
 8009e0c:	3754      	adds	r7, #84	; 0x54
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff fecb 	bl	8009bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b21      	cmp	r3, #33	; 0x21
 8009e50:	d13e      	bne.n	8009ed0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e5a:	d114      	bne.n	8009e86 <UART_Transmit_IT+0x48>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d110      	bne.n	8009e86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	1c9a      	adds	r2, r3, #2
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	621a      	str	r2, [r3, #32]
 8009e84:	e008      	b.n	8009e98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	1c59      	adds	r1, r3, #1
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6211      	str	r1, [r2, #32]
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10f      	bne.n	8009ecc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e000      	b.n	8009ed2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ed0:	2302      	movs	r3, #2
  }
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff fe5a 	bl	8009bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b08c      	sub	sp, #48	; 0x30
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b22      	cmp	r3, #34	; 0x22
 8009f20:	f040 80ab 	bne.w	800a07a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2c:	d117      	bne.n	8009f5e <UART_Receive_IT+0x50>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d113      	bne.n	8009f5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	1c9a      	adds	r2, r3, #2
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8009f5c:	e026      	b.n	8009fac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f70:	d007      	beq.n	8009f82 <UART_Receive_IT+0x74>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <UART_Receive_IT+0x82>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d106      	bne.n	8009f90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e008      	b.n	8009fa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	4619      	mov	r1, r3
 8009fba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d15a      	bne.n	800a076 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f022 0220 	bic.w	r2, r2, #32
 8009fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695a      	ldr	r2, [r3, #20]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0201 	bic.w	r2, r2, #1
 8009fee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d135      	bne.n	800a06c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	330c      	adds	r3, #12
 800a00c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	613b      	str	r3, [r7, #16]
   return(result);
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f023 0310 	bic.w	r3, r3, #16
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	330c      	adds	r3, #12
 800a024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a026:	623a      	str	r2, [r7, #32]
 800a028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	69f9      	ldr	r1, [r7, #28]
 800a02c:	6a3a      	ldr	r2, [r7, #32]
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	61bb      	str	r3, [r7, #24]
   return(result);
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e5      	bne.n	800a006 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b10      	cmp	r3, #16
 800a046:	d10a      	bne.n	800a05e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7ff fdbb 	bl	8009be0 <HAL_UARTEx_RxEventCallback>
 800a06a:	e002      	b.n	800a072 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7f9 ff53 	bl	8003f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	e002      	b.n	800a07c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	e000      	b.n	800a07c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a07a:	2302      	movs	r3, #2
  }
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3730      	adds	r7, #48	; 0x30
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a088:	b0c0      	sub	sp, #256	; 0x100
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0a0:	68d9      	ldr	r1, [r3, #12]
 800a0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	ea40 0301 	orr.w	r3, r0, r1
 800a0ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b2:	689a      	ldr	r2, [r3, #8]
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a0dc:	f021 010c 	bic.w	r1, r1, #12
 800a0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0fe:	6999      	ldr	r1, [r3, #24]
 800a100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	ea40 0301 	orr.w	r3, r0, r1
 800a10a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b8f      	ldr	r3, [pc, #572]	; (800a350 <UART_SetConfig+0x2cc>)
 800a114:	429a      	cmp	r2, r3
 800a116:	d005      	beq.n	800a124 <UART_SetConfig+0xa0>
 800a118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	4b8d      	ldr	r3, [pc, #564]	; (800a354 <UART_SetConfig+0x2d0>)
 800a120:	429a      	cmp	r2, r3
 800a122:	d104      	bne.n	800a12e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a124:	f7fc fda4 	bl	8006c70 <HAL_RCC_GetPCLK2Freq>
 800a128:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a12c:	e003      	b.n	800a136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a12e:	f7fc fd8b 	bl	8006c48 <HAL_RCC_GetPCLK1Freq>
 800a132:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a140:	f040 810c 	bne.w	800a35c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a148:	2200      	movs	r2, #0
 800a14a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a14e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a156:	4622      	mov	r2, r4
 800a158:	462b      	mov	r3, r5
 800a15a:	1891      	adds	r1, r2, r2
 800a15c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a15e:	415b      	adcs	r3, r3
 800a160:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a166:	4621      	mov	r1, r4
 800a168:	eb12 0801 	adds.w	r8, r2, r1
 800a16c:	4629      	mov	r1, r5
 800a16e:	eb43 0901 	adc.w	r9, r3, r1
 800a172:	f04f 0200 	mov.w	r2, #0
 800a176:	f04f 0300 	mov.w	r3, #0
 800a17a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a17e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a186:	4690      	mov	r8, r2
 800a188:	4699      	mov	r9, r3
 800a18a:	4623      	mov	r3, r4
 800a18c:	eb18 0303 	adds.w	r3, r8, r3
 800a190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a194:	462b      	mov	r3, r5
 800a196:	eb49 0303 	adc.w	r3, r9, r3
 800a19a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a1ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	18db      	adds	r3, r3, r3
 800a1b6:	653b      	str	r3, [r7, #80]	; 0x50
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	eb42 0303 	adc.w	r3, r2, r3
 800a1be:	657b      	str	r3, [r7, #84]	; 0x54
 800a1c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a1c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a1c8:	f7f6 fd5e 	bl	8000c88 <__aeabi_uldivmod>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4b61      	ldr	r3, [pc, #388]	; (800a358 <UART_SetConfig+0x2d4>)
 800a1d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a1d6:	095b      	lsrs	r3, r3, #5
 800a1d8:	011c      	lsls	r4, r3, #4
 800a1da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a1e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	464b      	mov	r3, r9
 800a1f0:	1891      	adds	r1, r2, r2
 800a1f2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a1f4:	415b      	adcs	r3, r3
 800a1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	eb12 0a01 	adds.w	sl, r2, r1
 800a202:	4649      	mov	r1, r9
 800a204:	eb43 0b01 	adc.w	fp, r3, r1
 800a208:	f04f 0200 	mov.w	r2, #0
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a21c:	4692      	mov	sl, r2
 800a21e:	469b      	mov	fp, r3
 800a220:	4643      	mov	r3, r8
 800a222:	eb1a 0303 	adds.w	r3, sl, r3
 800a226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a22a:	464b      	mov	r3, r9
 800a22c:	eb4b 0303 	adc.w	r3, fp, r3
 800a230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a240:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a248:	460b      	mov	r3, r1
 800a24a:	18db      	adds	r3, r3, r3
 800a24c:	643b      	str	r3, [r7, #64]	; 0x40
 800a24e:	4613      	mov	r3, r2
 800a250:	eb42 0303 	adc.w	r3, r2, r3
 800a254:	647b      	str	r3, [r7, #68]	; 0x44
 800a256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a25a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a25e:	f7f6 fd13 	bl	8000c88 <__aeabi_uldivmod>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4611      	mov	r1, r2
 800a268:	4b3b      	ldr	r3, [pc, #236]	; (800a358 <UART_SetConfig+0x2d4>)
 800a26a:	fba3 2301 	umull	r2, r3, r3, r1
 800a26e:	095b      	lsrs	r3, r3, #5
 800a270:	2264      	movs	r2, #100	; 0x64
 800a272:	fb02 f303 	mul.w	r3, r2, r3
 800a276:	1acb      	subs	r3, r1, r3
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a27e:	4b36      	ldr	r3, [pc, #216]	; (800a358 <UART_SetConfig+0x2d4>)
 800a280:	fba3 2302 	umull	r2, r3, r3, r2
 800a284:	095b      	lsrs	r3, r3, #5
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a28c:	441c      	add	r4, r3
 800a28e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a292:	2200      	movs	r2, #0
 800a294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a298:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a29c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	1891      	adds	r1, r2, r2
 800a2a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a2a8:	415b      	adcs	r3, r3
 800a2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	1851      	adds	r1, r2, r1
 800a2b4:	6339      	str	r1, [r7, #48]	; 0x30
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	414b      	adcs	r3, r1
 800a2ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	f04f 0300 	mov.w	r3, #0
 800a2c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	00cb      	lsls	r3, r1, #3
 800a2cc:	4651      	mov	r1, sl
 800a2ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2d2:	4651      	mov	r1, sl
 800a2d4:	00ca      	lsls	r2, r1, #3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4642      	mov	r2, r8
 800a2de:	189b      	adds	r3, r3, r2
 800a2e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2e4:	464b      	mov	r3, r9
 800a2e6:	460a      	mov	r2, r1
 800a2e8:	eb42 0303 	adc.w	r3, r2, r3
 800a2ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a2fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a304:	460b      	mov	r3, r1
 800a306:	18db      	adds	r3, r3, r3
 800a308:	62bb      	str	r3, [r7, #40]	; 0x28
 800a30a:	4613      	mov	r3, r2
 800a30c:	eb42 0303 	adc.w	r3, r2, r3
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a31a:	f7f6 fcb5 	bl	8000c88 <__aeabi_uldivmod>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	4b0d      	ldr	r3, [pc, #52]	; (800a358 <UART_SetConfig+0x2d4>)
 800a324:	fba3 1302 	umull	r1, r3, r3, r2
 800a328:	095b      	lsrs	r3, r3, #5
 800a32a:	2164      	movs	r1, #100	; 0x64
 800a32c:	fb01 f303 	mul.w	r3, r1, r3
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	00db      	lsls	r3, r3, #3
 800a334:	3332      	adds	r3, #50	; 0x32
 800a336:	4a08      	ldr	r2, [pc, #32]	; (800a358 <UART_SetConfig+0x2d4>)
 800a338:	fba2 2303 	umull	r2, r3, r2, r3
 800a33c:	095b      	lsrs	r3, r3, #5
 800a33e:	f003 0207 	and.w	r2, r3, #7
 800a342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4422      	add	r2, r4
 800a34a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a34c:	e105      	b.n	800a55a <UART_SetConfig+0x4d6>
 800a34e:	bf00      	nop
 800a350:	40011000 	.word	0x40011000
 800a354:	40011400 	.word	0x40011400
 800a358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a35c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a360:	2200      	movs	r2, #0
 800a362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a366:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a36a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a36e:	4642      	mov	r2, r8
 800a370:	464b      	mov	r3, r9
 800a372:	1891      	adds	r1, r2, r2
 800a374:	6239      	str	r1, [r7, #32]
 800a376:	415b      	adcs	r3, r3
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
 800a37a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a37e:	4641      	mov	r1, r8
 800a380:	1854      	adds	r4, r2, r1
 800a382:	4649      	mov	r1, r9
 800a384:	eb43 0501 	adc.w	r5, r3, r1
 800a388:	f04f 0200 	mov.w	r2, #0
 800a38c:	f04f 0300 	mov.w	r3, #0
 800a390:	00eb      	lsls	r3, r5, #3
 800a392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a396:	00e2      	lsls	r2, r4, #3
 800a398:	4614      	mov	r4, r2
 800a39a:	461d      	mov	r5, r3
 800a39c:	4643      	mov	r3, r8
 800a39e:	18e3      	adds	r3, r4, r3
 800a3a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3a4:	464b      	mov	r3, r9
 800a3a6:	eb45 0303 	adc.w	r3, r5, r3
 800a3aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3be:	f04f 0200 	mov.w	r2, #0
 800a3c2:	f04f 0300 	mov.w	r3, #0
 800a3c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	008b      	lsls	r3, r1, #2
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	008a      	lsls	r2, r1, #2
 800a3d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a3dc:	f7f6 fc54 	bl	8000c88 <__aeabi_uldivmod>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4b60      	ldr	r3, [pc, #384]	; (800a568 <UART_SetConfig+0x4e4>)
 800a3e6:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	011c      	lsls	r4, r3, #4
 800a3ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	1891      	adds	r1, r2, r2
 800a406:	61b9      	str	r1, [r7, #24]
 800a408:	415b      	adcs	r3, r3
 800a40a:	61fb      	str	r3, [r7, #28]
 800a40c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a410:	4641      	mov	r1, r8
 800a412:	1851      	adds	r1, r2, r1
 800a414:	6139      	str	r1, [r7, #16]
 800a416:	4649      	mov	r1, r9
 800a418:	414b      	adcs	r3, r1
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	f04f 0200 	mov.w	r2, #0
 800a420:	f04f 0300 	mov.w	r3, #0
 800a424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a428:	4659      	mov	r1, fp
 800a42a:	00cb      	lsls	r3, r1, #3
 800a42c:	4651      	mov	r1, sl
 800a42e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a432:	4651      	mov	r1, sl
 800a434:	00ca      	lsls	r2, r1, #3
 800a436:	4610      	mov	r0, r2
 800a438:	4619      	mov	r1, r3
 800a43a:	4603      	mov	r3, r0
 800a43c:	4642      	mov	r2, r8
 800a43e:	189b      	adds	r3, r3, r2
 800a440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a444:	464b      	mov	r3, r9
 800a446:	460a      	mov	r2, r1
 800a448:	eb42 0303 	adc.w	r3, r2, r3
 800a44c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	67bb      	str	r3, [r7, #120]	; 0x78
 800a45a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a45c:	f04f 0200 	mov.w	r2, #0
 800a460:	f04f 0300 	mov.w	r3, #0
 800a464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a468:	4649      	mov	r1, r9
 800a46a:	008b      	lsls	r3, r1, #2
 800a46c:	4641      	mov	r1, r8
 800a46e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a472:	4641      	mov	r1, r8
 800a474:	008a      	lsls	r2, r1, #2
 800a476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a47a:	f7f6 fc05 	bl	8000c88 <__aeabi_uldivmod>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4b39      	ldr	r3, [pc, #228]	; (800a568 <UART_SetConfig+0x4e4>)
 800a484:	fba3 1302 	umull	r1, r3, r3, r2
 800a488:	095b      	lsrs	r3, r3, #5
 800a48a:	2164      	movs	r1, #100	; 0x64
 800a48c:	fb01 f303 	mul.w	r3, r1, r3
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	011b      	lsls	r3, r3, #4
 800a494:	3332      	adds	r3, #50	; 0x32
 800a496:	4a34      	ldr	r2, [pc, #208]	; (800a568 <UART_SetConfig+0x4e4>)
 800a498:	fba2 2303 	umull	r2, r3, r2, r3
 800a49c:	095b      	lsrs	r3, r3, #5
 800a49e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4a2:	441c      	add	r4, r3
 800a4a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	673b      	str	r3, [r7, #112]	; 0x70
 800a4ac:	677a      	str	r2, [r7, #116]	; 0x74
 800a4ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a4b2:	4642      	mov	r2, r8
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	1891      	adds	r1, r2, r2
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	415b      	adcs	r3, r3
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4c2:	4641      	mov	r1, r8
 800a4c4:	1851      	adds	r1, r2, r1
 800a4c6:	6039      	str	r1, [r7, #0]
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	414b      	adcs	r3, r1
 800a4cc:	607b      	str	r3, [r7, #4]
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	f04f 0300 	mov.w	r3, #0
 800a4d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a4da:	4659      	mov	r1, fp
 800a4dc:	00cb      	lsls	r3, r1, #3
 800a4de:	4651      	mov	r1, sl
 800a4e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4e4:	4651      	mov	r1, sl
 800a4e6:	00ca      	lsls	r2, r1, #3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	189b      	adds	r3, r3, r2
 800a4f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	eb42 0303 	adc.w	r3, r2, r3
 800a4fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	663b      	str	r3, [r7, #96]	; 0x60
 800a508:	667a      	str	r2, [r7, #100]	; 0x64
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a516:	4649      	mov	r1, r9
 800a518:	008b      	lsls	r3, r1, #2
 800a51a:	4641      	mov	r1, r8
 800a51c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a520:	4641      	mov	r1, r8
 800a522:	008a      	lsls	r2, r1, #2
 800a524:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a528:	f7f6 fbae 	bl	8000c88 <__aeabi_uldivmod>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4b0d      	ldr	r3, [pc, #52]	; (800a568 <UART_SetConfig+0x4e4>)
 800a532:	fba3 1302 	umull	r1, r3, r3, r2
 800a536:	095b      	lsrs	r3, r3, #5
 800a538:	2164      	movs	r1, #100	; 0x64
 800a53a:	fb01 f303 	mul.w	r3, r1, r3
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	3332      	adds	r3, #50	; 0x32
 800a544:	4a08      	ldr	r2, [pc, #32]	; (800a568 <UART_SetConfig+0x4e4>)
 800a546:	fba2 2303 	umull	r2, r3, r2, r3
 800a54a:	095b      	lsrs	r3, r3, #5
 800a54c:	f003 020f 	and.w	r2, r3, #15
 800a550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4422      	add	r2, r4
 800a558:	609a      	str	r2, [r3, #8]
}
 800a55a:	bf00      	nop
 800a55c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a560:	46bd      	mov	sp, r7
 800a562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a566:	bf00      	nop
 800a568:	51eb851f 	.word	0x51eb851f

0800a56c <__errno>:
 800a56c:	4b01      	ldr	r3, [pc, #4]	; (800a574 <__errno+0x8>)
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20000088 	.word	0x20000088

0800a578 <__libc_init_array>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4d0d      	ldr	r5, [pc, #52]	; (800a5b0 <__libc_init_array+0x38>)
 800a57c:	4c0d      	ldr	r4, [pc, #52]	; (800a5b4 <__libc_init_array+0x3c>)
 800a57e:	1b64      	subs	r4, r4, r5
 800a580:	10a4      	asrs	r4, r4, #2
 800a582:	2600      	movs	r6, #0
 800a584:	42a6      	cmp	r6, r4
 800a586:	d109      	bne.n	800a59c <__libc_init_array+0x24>
 800a588:	4d0b      	ldr	r5, [pc, #44]	; (800a5b8 <__libc_init_array+0x40>)
 800a58a:	4c0c      	ldr	r4, [pc, #48]	; (800a5bc <__libc_init_array+0x44>)
 800a58c:	f004 f952 	bl	800e834 <_init>
 800a590:	1b64      	subs	r4, r4, r5
 800a592:	10a4      	asrs	r4, r4, #2
 800a594:	2600      	movs	r6, #0
 800a596:	42a6      	cmp	r6, r4
 800a598:	d105      	bne.n	800a5a6 <__libc_init_array+0x2e>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a0:	4798      	blx	r3
 800a5a2:	3601      	adds	r6, #1
 800a5a4:	e7ee      	b.n	800a584 <__libc_init_array+0xc>
 800a5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5aa:	4798      	blx	r3
 800a5ac:	3601      	adds	r6, #1
 800a5ae:	e7f2      	b.n	800a596 <__libc_init_array+0x1e>
 800a5b0:	0800efb0 	.word	0x0800efb0
 800a5b4:	0800efb0 	.word	0x0800efb0
 800a5b8:	0800efb0 	.word	0x0800efb0
 800a5bc:	0800efb4 	.word	0x0800efb4

0800a5c0 <memset>:
 800a5c0:	4402      	add	r2, r0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d100      	bne.n	800a5ca <memset+0xa>
 800a5c8:	4770      	bx	lr
 800a5ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ce:	e7f9      	b.n	800a5c4 <memset+0x4>

0800a5d0 <__cvt>:
 800a5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d4:	ec55 4b10 	vmov	r4, r5, d0
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	460e      	mov	r6, r1
 800a5dc:	4619      	mov	r1, r3
 800a5de:	462b      	mov	r3, r5
 800a5e0:	bfbb      	ittet	lt
 800a5e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a5e6:	461d      	movlt	r5, r3
 800a5e8:	2300      	movge	r3, #0
 800a5ea:	232d      	movlt	r3, #45	; 0x2d
 800a5ec:	700b      	strb	r3, [r1, #0]
 800a5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5f4:	4691      	mov	r9, r2
 800a5f6:	f023 0820 	bic.w	r8, r3, #32
 800a5fa:	bfbc      	itt	lt
 800a5fc:	4622      	movlt	r2, r4
 800a5fe:	4614      	movlt	r4, r2
 800a600:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a604:	d005      	beq.n	800a612 <__cvt+0x42>
 800a606:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a60a:	d100      	bne.n	800a60e <__cvt+0x3e>
 800a60c:	3601      	adds	r6, #1
 800a60e:	2102      	movs	r1, #2
 800a610:	e000      	b.n	800a614 <__cvt+0x44>
 800a612:	2103      	movs	r1, #3
 800a614:	ab03      	add	r3, sp, #12
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	ab02      	add	r3, sp, #8
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	ec45 4b10 	vmov	d0, r4, r5
 800a620:	4653      	mov	r3, sl
 800a622:	4632      	mov	r2, r6
 800a624:	f000 fcec 	bl	800b000 <_dtoa_r>
 800a628:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a62c:	4607      	mov	r7, r0
 800a62e:	d102      	bne.n	800a636 <__cvt+0x66>
 800a630:	f019 0f01 	tst.w	r9, #1
 800a634:	d022      	beq.n	800a67c <__cvt+0xac>
 800a636:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a63a:	eb07 0906 	add.w	r9, r7, r6
 800a63e:	d110      	bne.n	800a662 <__cvt+0x92>
 800a640:	783b      	ldrb	r3, [r7, #0]
 800a642:	2b30      	cmp	r3, #48	; 0x30
 800a644:	d10a      	bne.n	800a65c <__cvt+0x8c>
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	4620      	mov	r0, r4
 800a64c:	4629      	mov	r1, r5
 800a64e:	f7f6 fa5b 	bl	8000b08 <__aeabi_dcmpeq>
 800a652:	b918      	cbnz	r0, 800a65c <__cvt+0x8c>
 800a654:	f1c6 0601 	rsb	r6, r6, #1
 800a658:	f8ca 6000 	str.w	r6, [sl]
 800a65c:	f8da 3000 	ldr.w	r3, [sl]
 800a660:	4499      	add	r9, r3
 800a662:	2200      	movs	r2, #0
 800a664:	2300      	movs	r3, #0
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f6 fa4d 	bl	8000b08 <__aeabi_dcmpeq>
 800a66e:	b108      	cbz	r0, 800a674 <__cvt+0xa4>
 800a670:	f8cd 900c 	str.w	r9, [sp, #12]
 800a674:	2230      	movs	r2, #48	; 0x30
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	454b      	cmp	r3, r9
 800a67a:	d307      	bcc.n	800a68c <__cvt+0xbc>
 800a67c:	9b03      	ldr	r3, [sp, #12]
 800a67e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a680:	1bdb      	subs	r3, r3, r7
 800a682:	4638      	mov	r0, r7
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	b004      	add	sp, #16
 800a688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68c:	1c59      	adds	r1, r3, #1
 800a68e:	9103      	str	r1, [sp, #12]
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	e7f0      	b.n	800a676 <__cvt+0xa6>

0800a694 <__exponent>:
 800a694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a696:	4603      	mov	r3, r0
 800a698:	2900      	cmp	r1, #0
 800a69a:	bfb8      	it	lt
 800a69c:	4249      	neglt	r1, r1
 800a69e:	f803 2b02 	strb.w	r2, [r3], #2
 800a6a2:	bfb4      	ite	lt
 800a6a4:	222d      	movlt	r2, #45	; 0x2d
 800a6a6:	222b      	movge	r2, #43	; 0x2b
 800a6a8:	2909      	cmp	r1, #9
 800a6aa:	7042      	strb	r2, [r0, #1]
 800a6ac:	dd2a      	ble.n	800a704 <__exponent+0x70>
 800a6ae:	f10d 0407 	add.w	r4, sp, #7
 800a6b2:	46a4      	mov	ip, r4
 800a6b4:	270a      	movs	r7, #10
 800a6b6:	46a6      	mov	lr, r4
 800a6b8:	460a      	mov	r2, r1
 800a6ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800a6be:	fb07 1516 	mls	r5, r7, r6, r1
 800a6c2:	3530      	adds	r5, #48	; 0x30
 800a6c4:	2a63      	cmp	r2, #99	; 0x63
 800a6c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a6ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	dcf1      	bgt.n	800a6b6 <__exponent+0x22>
 800a6d2:	3130      	adds	r1, #48	; 0x30
 800a6d4:	f1ae 0502 	sub.w	r5, lr, #2
 800a6d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a6dc:	1c44      	adds	r4, r0, #1
 800a6de:	4629      	mov	r1, r5
 800a6e0:	4561      	cmp	r1, ip
 800a6e2:	d30a      	bcc.n	800a6fa <__exponent+0x66>
 800a6e4:	f10d 0209 	add.w	r2, sp, #9
 800a6e8:	eba2 020e 	sub.w	r2, r2, lr
 800a6ec:	4565      	cmp	r5, ip
 800a6ee:	bf88      	it	hi
 800a6f0:	2200      	movhi	r2, #0
 800a6f2:	4413      	add	r3, r2
 800a6f4:	1a18      	subs	r0, r3, r0
 800a6f6:	b003      	add	sp, #12
 800a6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a702:	e7ed      	b.n	800a6e0 <__exponent+0x4c>
 800a704:	2330      	movs	r3, #48	; 0x30
 800a706:	3130      	adds	r1, #48	; 0x30
 800a708:	7083      	strb	r3, [r0, #2]
 800a70a:	70c1      	strb	r1, [r0, #3]
 800a70c:	1d03      	adds	r3, r0, #4
 800a70e:	e7f1      	b.n	800a6f4 <__exponent+0x60>

0800a710 <_printf_float>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	ed2d 8b02 	vpush	{d8}
 800a718:	b08d      	sub	sp, #52	; 0x34
 800a71a:	460c      	mov	r4, r1
 800a71c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a720:	4616      	mov	r6, r2
 800a722:	461f      	mov	r7, r3
 800a724:	4605      	mov	r5, r0
 800a726:	f001 fa59 	bl	800bbdc <_localeconv_r>
 800a72a:	f8d0 a000 	ldr.w	sl, [r0]
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fd6e 	bl	8000210 <strlen>
 800a734:	2300      	movs	r3, #0
 800a736:	930a      	str	r3, [sp, #40]	; 0x28
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	f8d8 3000 	ldr.w	r3, [r8]
 800a740:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a744:	3307      	adds	r3, #7
 800a746:	f023 0307 	bic.w	r3, r3, #7
 800a74a:	f103 0208 	add.w	r2, r3, #8
 800a74e:	f8c8 2000 	str.w	r2, [r8]
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a75a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a75e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a762:	9307      	str	r3, [sp, #28]
 800a764:	f8cd 8018 	str.w	r8, [sp, #24]
 800a768:	ee08 0a10 	vmov	s16, r0
 800a76c:	4b9f      	ldr	r3, [pc, #636]	; (800a9ec <_printf_float+0x2dc>)
 800a76e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	f7f6 f9f9 	bl	8000b6c <__aeabi_dcmpun>
 800a77a:	bb88      	cbnz	r0, 800a7e0 <_printf_float+0xd0>
 800a77c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a780:	4b9a      	ldr	r3, [pc, #616]	; (800a9ec <_printf_float+0x2dc>)
 800a782:	f04f 32ff 	mov.w	r2, #4294967295
 800a786:	f7f6 f9d3 	bl	8000b30 <__aeabi_dcmple>
 800a78a:	bb48      	cbnz	r0, 800a7e0 <_printf_float+0xd0>
 800a78c:	2200      	movs	r2, #0
 800a78e:	2300      	movs	r3, #0
 800a790:	4640      	mov	r0, r8
 800a792:	4649      	mov	r1, r9
 800a794:	f7f6 f9c2 	bl	8000b1c <__aeabi_dcmplt>
 800a798:	b110      	cbz	r0, 800a7a0 <_printf_float+0x90>
 800a79a:	232d      	movs	r3, #45	; 0x2d
 800a79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a0:	4b93      	ldr	r3, [pc, #588]	; (800a9f0 <_printf_float+0x2e0>)
 800a7a2:	4894      	ldr	r0, [pc, #592]	; (800a9f4 <_printf_float+0x2e4>)
 800a7a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a7a8:	bf94      	ite	ls
 800a7aa:	4698      	movls	r8, r3
 800a7ac:	4680      	movhi	r8, r0
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	9b05      	ldr	r3, [sp, #20]
 800a7b4:	f023 0204 	bic.w	r2, r3, #4
 800a7b8:	6022      	str	r2, [r4, #0]
 800a7ba:	f04f 0900 	mov.w	r9, #0
 800a7be:	9700      	str	r7, [sp, #0]
 800a7c0:	4633      	mov	r3, r6
 800a7c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f9d8 	bl	800ab7c <_printf_common>
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	f040 8090 	bne.w	800a8f2 <_printf_float+0x1e2>
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d6:	b00d      	add	sp, #52	; 0x34
 800a7d8:	ecbd 8b02 	vpop	{d8}
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e0:	4642      	mov	r2, r8
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	f7f6 f9c0 	bl	8000b6c <__aeabi_dcmpun>
 800a7ec:	b140      	cbz	r0, 800a800 <_printf_float+0xf0>
 800a7ee:	464b      	mov	r3, r9
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bfbc      	itt	lt
 800a7f4:	232d      	movlt	r3, #45	; 0x2d
 800a7f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7fa:	487f      	ldr	r0, [pc, #508]	; (800a9f8 <_printf_float+0x2e8>)
 800a7fc:	4b7f      	ldr	r3, [pc, #508]	; (800a9fc <_printf_float+0x2ec>)
 800a7fe:	e7d1      	b.n	800a7a4 <_printf_float+0x94>
 800a800:	6863      	ldr	r3, [r4, #4]
 800a802:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a806:	9206      	str	r2, [sp, #24]
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	d13f      	bne.n	800a88c <_printf_float+0x17c>
 800a80c:	2306      	movs	r3, #6
 800a80e:	6063      	str	r3, [r4, #4]
 800a810:	9b05      	ldr	r3, [sp, #20]
 800a812:	6861      	ldr	r1, [r4, #4]
 800a814:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a818:	2300      	movs	r3, #0
 800a81a:	9303      	str	r3, [sp, #12]
 800a81c:	ab0a      	add	r3, sp, #40	; 0x28
 800a81e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a822:	ab09      	add	r3, sp, #36	; 0x24
 800a824:	ec49 8b10 	vmov	d0, r8, r9
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	6022      	str	r2, [r4, #0]
 800a82c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a830:	4628      	mov	r0, r5
 800a832:	f7ff fecd 	bl	800a5d0 <__cvt>
 800a836:	9b06      	ldr	r3, [sp, #24]
 800a838:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a83a:	2b47      	cmp	r3, #71	; 0x47
 800a83c:	4680      	mov	r8, r0
 800a83e:	d108      	bne.n	800a852 <_printf_float+0x142>
 800a840:	1cc8      	adds	r0, r1, #3
 800a842:	db02      	blt.n	800a84a <_printf_float+0x13a>
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	4299      	cmp	r1, r3
 800a848:	dd41      	ble.n	800a8ce <_printf_float+0x1be>
 800a84a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a84e:	fa5f fb8b 	uxtb.w	fp, fp
 800a852:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a856:	d820      	bhi.n	800a89a <_printf_float+0x18a>
 800a858:	3901      	subs	r1, #1
 800a85a:	465a      	mov	r2, fp
 800a85c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a860:	9109      	str	r1, [sp, #36]	; 0x24
 800a862:	f7ff ff17 	bl	800a694 <__exponent>
 800a866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a868:	1813      	adds	r3, r2, r0
 800a86a:	2a01      	cmp	r2, #1
 800a86c:	4681      	mov	r9, r0
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	dc02      	bgt.n	800a878 <_printf_float+0x168>
 800a872:	6822      	ldr	r2, [r4, #0]
 800a874:	07d2      	lsls	r2, r2, #31
 800a876:	d501      	bpl.n	800a87c <_printf_float+0x16c>
 800a878:	3301      	adds	r3, #1
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a880:	2b00      	cmp	r3, #0
 800a882:	d09c      	beq.n	800a7be <_printf_float+0xae>
 800a884:	232d      	movs	r3, #45	; 0x2d
 800a886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a88a:	e798      	b.n	800a7be <_printf_float+0xae>
 800a88c:	9a06      	ldr	r2, [sp, #24]
 800a88e:	2a47      	cmp	r2, #71	; 0x47
 800a890:	d1be      	bne.n	800a810 <_printf_float+0x100>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1bc      	bne.n	800a810 <_printf_float+0x100>
 800a896:	2301      	movs	r3, #1
 800a898:	e7b9      	b.n	800a80e <_printf_float+0xfe>
 800a89a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a89e:	d118      	bne.n	800a8d2 <_printf_float+0x1c2>
 800a8a0:	2900      	cmp	r1, #0
 800a8a2:	6863      	ldr	r3, [r4, #4]
 800a8a4:	dd0b      	ble.n	800a8be <_printf_float+0x1ae>
 800a8a6:	6121      	str	r1, [r4, #16]
 800a8a8:	b913      	cbnz	r3, 800a8b0 <_printf_float+0x1a0>
 800a8aa:	6822      	ldr	r2, [r4, #0]
 800a8ac:	07d0      	lsls	r0, r2, #31
 800a8ae:	d502      	bpl.n	800a8b6 <_printf_float+0x1a6>
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	440b      	add	r3, r1
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a8b8:	f04f 0900 	mov.w	r9, #0
 800a8bc:	e7de      	b.n	800a87c <_printf_float+0x16c>
 800a8be:	b913      	cbnz	r3, 800a8c6 <_printf_float+0x1b6>
 800a8c0:	6822      	ldr	r2, [r4, #0]
 800a8c2:	07d2      	lsls	r2, r2, #31
 800a8c4:	d501      	bpl.n	800a8ca <_printf_float+0x1ba>
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	e7f4      	b.n	800a8b4 <_printf_float+0x1a4>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e7f2      	b.n	800a8b4 <_printf_float+0x1a4>
 800a8ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	db05      	blt.n	800a8e4 <_printf_float+0x1d4>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	6121      	str	r1, [r4, #16]
 800a8dc:	07d8      	lsls	r0, r3, #31
 800a8de:	d5ea      	bpl.n	800a8b6 <_printf_float+0x1a6>
 800a8e0:	1c4b      	adds	r3, r1, #1
 800a8e2:	e7e7      	b.n	800a8b4 <_printf_float+0x1a4>
 800a8e4:	2900      	cmp	r1, #0
 800a8e6:	bfd4      	ite	le
 800a8e8:	f1c1 0202 	rsble	r2, r1, #2
 800a8ec:	2201      	movgt	r2, #1
 800a8ee:	4413      	add	r3, r2
 800a8f0:	e7e0      	b.n	800a8b4 <_printf_float+0x1a4>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	055a      	lsls	r2, r3, #21
 800a8f6:	d407      	bmi.n	800a908 <_printf_float+0x1f8>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	d12c      	bne.n	800a960 <_printf_float+0x250>
 800a906:	e764      	b.n	800a7d2 <_printf_float+0xc2>
 800a908:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a90c:	f240 80e0 	bls.w	800aad0 <_printf_float+0x3c0>
 800a910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	f7f6 f8f6 	bl	8000b08 <__aeabi_dcmpeq>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d034      	beq.n	800a98a <_printf_float+0x27a>
 800a920:	4a37      	ldr	r2, [pc, #220]	; (800aa00 <_printf_float+0x2f0>)
 800a922:	2301      	movs	r3, #1
 800a924:	4631      	mov	r1, r6
 800a926:	4628      	mov	r0, r5
 800a928:	47b8      	blx	r7
 800a92a:	3001      	adds	r0, #1
 800a92c:	f43f af51 	beq.w	800a7d2 <_printf_float+0xc2>
 800a930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a934:	429a      	cmp	r2, r3
 800a936:	db02      	blt.n	800a93e <_printf_float+0x22e>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	07d8      	lsls	r0, r3, #31
 800a93c:	d510      	bpl.n	800a960 <_printf_float+0x250>
 800a93e:	ee18 3a10 	vmov	r3, s16
 800a942:	4652      	mov	r2, sl
 800a944:	4631      	mov	r1, r6
 800a946:	4628      	mov	r0, r5
 800a948:	47b8      	blx	r7
 800a94a:	3001      	adds	r0, #1
 800a94c:	f43f af41 	beq.w	800a7d2 <_printf_float+0xc2>
 800a950:	f04f 0800 	mov.w	r8, #0
 800a954:	f104 091a 	add.w	r9, r4, #26
 800a958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a95a:	3b01      	subs	r3, #1
 800a95c:	4543      	cmp	r3, r8
 800a95e:	dc09      	bgt.n	800a974 <_printf_float+0x264>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	079b      	lsls	r3, r3, #30
 800a964:	f100 8105 	bmi.w	800ab72 <_printf_float+0x462>
 800a968:	68e0      	ldr	r0, [r4, #12]
 800a96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96c:	4298      	cmp	r0, r3
 800a96e:	bfb8      	it	lt
 800a970:	4618      	movlt	r0, r3
 800a972:	e730      	b.n	800a7d6 <_printf_float+0xc6>
 800a974:	2301      	movs	r3, #1
 800a976:	464a      	mov	r2, r9
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b8      	blx	r7
 800a97e:	3001      	adds	r0, #1
 800a980:	f43f af27 	beq.w	800a7d2 <_printf_float+0xc2>
 800a984:	f108 0801 	add.w	r8, r8, #1
 800a988:	e7e6      	b.n	800a958 <_printf_float+0x248>
 800a98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dc39      	bgt.n	800aa04 <_printf_float+0x2f4>
 800a990:	4a1b      	ldr	r2, [pc, #108]	; (800aa00 <_printf_float+0x2f0>)
 800a992:	2301      	movs	r3, #1
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	f43f af19 	beq.w	800a7d2 <_printf_float+0xc2>
 800a9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	d102      	bne.n	800a9ae <_printf_float+0x29e>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	07d9      	lsls	r1, r3, #31
 800a9ac:	d5d8      	bpl.n	800a960 <_printf_float+0x250>
 800a9ae:	ee18 3a10 	vmov	r3, s16
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	f43f af09 	beq.w	800a7d2 <_printf_float+0xc2>
 800a9c0:	f04f 0900 	mov.w	r9, #0
 800a9c4:	f104 0a1a 	add.w	sl, r4, #26
 800a9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ca:	425b      	negs	r3, r3
 800a9cc:	454b      	cmp	r3, r9
 800a9ce:	dc01      	bgt.n	800a9d4 <_printf_float+0x2c4>
 800a9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d2:	e792      	b.n	800a8fa <_printf_float+0x1ea>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f aef7 	beq.w	800a7d2 <_printf_float+0xc2>
 800a9e4:	f109 0901 	add.w	r9, r9, #1
 800a9e8:	e7ee      	b.n	800a9c8 <_printf_float+0x2b8>
 800a9ea:	bf00      	nop
 800a9ec:	7fefffff 	.word	0x7fefffff
 800a9f0:	0800e9b4 	.word	0x0800e9b4
 800a9f4:	0800e9b8 	.word	0x0800e9b8
 800a9f8:	0800e9c0 	.word	0x0800e9c0
 800a9fc:	0800e9bc 	.word	0x0800e9bc
 800aa00:	0800e9c4 	.word	0x0800e9c4
 800aa04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	bfa8      	it	ge
 800aa0c:	461a      	movge	r2, r3
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	4691      	mov	r9, r2
 800aa12:	dc37      	bgt.n	800aa84 <_printf_float+0x374>
 800aa14:	f04f 0b00 	mov.w	fp, #0
 800aa18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa1c:	f104 021a 	add.w	r2, r4, #26
 800aa20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa22:	9305      	str	r3, [sp, #20]
 800aa24:	eba3 0309 	sub.w	r3, r3, r9
 800aa28:	455b      	cmp	r3, fp
 800aa2a:	dc33      	bgt.n	800aa94 <_printf_float+0x384>
 800aa2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa30:	429a      	cmp	r2, r3
 800aa32:	db3b      	blt.n	800aaac <_printf_float+0x39c>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	07da      	lsls	r2, r3, #31
 800aa38:	d438      	bmi.n	800aaac <_printf_float+0x39c>
 800aa3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3c:	9a05      	ldr	r2, [sp, #20]
 800aa3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa40:	1a9a      	subs	r2, r3, r2
 800aa42:	eba3 0901 	sub.w	r9, r3, r1
 800aa46:	4591      	cmp	r9, r2
 800aa48:	bfa8      	it	ge
 800aa4a:	4691      	movge	r9, r2
 800aa4c:	f1b9 0f00 	cmp.w	r9, #0
 800aa50:	dc35      	bgt.n	800aabe <_printf_float+0x3ae>
 800aa52:	f04f 0800 	mov.w	r8, #0
 800aa56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa5a:	f104 0a1a 	add.w	sl, r4, #26
 800aa5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	eba3 0309 	sub.w	r3, r3, r9
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	f77f af79 	ble.w	800a960 <_printf_float+0x250>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4652      	mov	r2, sl
 800aa72:	4631      	mov	r1, r6
 800aa74:	4628      	mov	r0, r5
 800aa76:	47b8      	blx	r7
 800aa78:	3001      	adds	r0, #1
 800aa7a:	f43f aeaa 	beq.w	800a7d2 <_printf_float+0xc2>
 800aa7e:	f108 0801 	add.w	r8, r8, #1
 800aa82:	e7ec      	b.n	800aa5e <_printf_float+0x34e>
 800aa84:	4613      	mov	r3, r2
 800aa86:	4631      	mov	r1, r6
 800aa88:	4642      	mov	r2, r8
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	47b8      	blx	r7
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d1c0      	bne.n	800aa14 <_printf_float+0x304>
 800aa92:	e69e      	b.n	800a7d2 <_printf_float+0xc2>
 800aa94:	2301      	movs	r3, #1
 800aa96:	4631      	mov	r1, r6
 800aa98:	4628      	mov	r0, r5
 800aa9a:	9205      	str	r2, [sp, #20]
 800aa9c:	47b8      	blx	r7
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	f43f ae97 	beq.w	800a7d2 <_printf_float+0xc2>
 800aaa4:	9a05      	ldr	r2, [sp, #20]
 800aaa6:	f10b 0b01 	add.w	fp, fp, #1
 800aaaa:	e7b9      	b.n	800aa20 <_printf_float+0x310>
 800aaac:	ee18 3a10 	vmov	r3, s16
 800aab0:	4652      	mov	r2, sl
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b8      	blx	r7
 800aab8:	3001      	adds	r0, #1
 800aaba:	d1be      	bne.n	800aa3a <_printf_float+0x32a>
 800aabc:	e689      	b.n	800a7d2 <_printf_float+0xc2>
 800aabe:	9a05      	ldr	r2, [sp, #20]
 800aac0:	464b      	mov	r3, r9
 800aac2:	4442      	add	r2, r8
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	d1c1      	bne.n	800aa52 <_printf_float+0x342>
 800aace:	e680      	b.n	800a7d2 <_printf_float+0xc2>
 800aad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aad2:	2a01      	cmp	r2, #1
 800aad4:	dc01      	bgt.n	800aada <_printf_float+0x3ca>
 800aad6:	07db      	lsls	r3, r3, #31
 800aad8:	d538      	bpl.n	800ab4c <_printf_float+0x43c>
 800aada:	2301      	movs	r3, #1
 800aadc:	4642      	mov	r2, r8
 800aade:	4631      	mov	r1, r6
 800aae0:	4628      	mov	r0, r5
 800aae2:	47b8      	blx	r7
 800aae4:	3001      	adds	r0, #1
 800aae6:	f43f ae74 	beq.w	800a7d2 <_printf_float+0xc2>
 800aaea:	ee18 3a10 	vmov	r3, s16
 800aaee:	4652      	mov	r2, sl
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	47b8      	blx	r7
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	f43f ae6b 	beq.w	800a7d2 <_printf_float+0xc2>
 800aafc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab00:	2200      	movs	r2, #0
 800ab02:	2300      	movs	r3, #0
 800ab04:	f7f6 f800 	bl	8000b08 <__aeabi_dcmpeq>
 800ab08:	b9d8      	cbnz	r0, 800ab42 <_printf_float+0x432>
 800ab0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab0c:	f108 0201 	add.w	r2, r8, #1
 800ab10:	3b01      	subs	r3, #1
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d10e      	bne.n	800ab3a <_printf_float+0x42a>
 800ab1c:	e659      	b.n	800a7d2 <_printf_float+0xc2>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4652      	mov	r2, sl
 800ab22:	4631      	mov	r1, r6
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b8      	blx	r7
 800ab28:	3001      	adds	r0, #1
 800ab2a:	f43f ae52 	beq.w	800a7d2 <_printf_float+0xc2>
 800ab2e:	f108 0801 	add.w	r8, r8, #1
 800ab32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab34:	3b01      	subs	r3, #1
 800ab36:	4543      	cmp	r3, r8
 800ab38:	dcf1      	bgt.n	800ab1e <_printf_float+0x40e>
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab40:	e6dc      	b.n	800a8fc <_printf_float+0x1ec>
 800ab42:	f04f 0800 	mov.w	r8, #0
 800ab46:	f104 0a1a 	add.w	sl, r4, #26
 800ab4a:	e7f2      	b.n	800ab32 <_printf_float+0x422>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	4642      	mov	r2, r8
 800ab50:	e7df      	b.n	800ab12 <_printf_float+0x402>
 800ab52:	2301      	movs	r3, #1
 800ab54:	464a      	mov	r2, r9
 800ab56:	4631      	mov	r1, r6
 800ab58:	4628      	mov	r0, r5
 800ab5a:	47b8      	blx	r7
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f43f ae38 	beq.w	800a7d2 <_printf_float+0xc2>
 800ab62:	f108 0801 	add.w	r8, r8, #1
 800ab66:	68e3      	ldr	r3, [r4, #12]
 800ab68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab6a:	1a5b      	subs	r3, r3, r1
 800ab6c:	4543      	cmp	r3, r8
 800ab6e:	dcf0      	bgt.n	800ab52 <_printf_float+0x442>
 800ab70:	e6fa      	b.n	800a968 <_printf_float+0x258>
 800ab72:	f04f 0800 	mov.w	r8, #0
 800ab76:	f104 0919 	add.w	r9, r4, #25
 800ab7a:	e7f4      	b.n	800ab66 <_printf_float+0x456>

0800ab7c <_printf_common>:
 800ab7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab80:	4616      	mov	r6, r2
 800ab82:	4699      	mov	r9, r3
 800ab84:	688a      	ldr	r2, [r1, #8]
 800ab86:	690b      	ldr	r3, [r1, #16]
 800ab88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	bfb8      	it	lt
 800ab90:	4613      	movlt	r3, r2
 800ab92:	6033      	str	r3, [r6, #0]
 800ab94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab98:	4607      	mov	r7, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b10a      	cbz	r2, 800aba2 <_printf_common+0x26>
 800ab9e:	3301      	adds	r3, #1
 800aba0:	6033      	str	r3, [r6, #0]
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	0699      	lsls	r1, r3, #26
 800aba6:	bf42      	ittt	mi
 800aba8:	6833      	ldrmi	r3, [r6, #0]
 800abaa:	3302      	addmi	r3, #2
 800abac:	6033      	strmi	r3, [r6, #0]
 800abae:	6825      	ldr	r5, [r4, #0]
 800abb0:	f015 0506 	ands.w	r5, r5, #6
 800abb4:	d106      	bne.n	800abc4 <_printf_common+0x48>
 800abb6:	f104 0a19 	add.w	sl, r4, #25
 800abba:	68e3      	ldr	r3, [r4, #12]
 800abbc:	6832      	ldr	r2, [r6, #0]
 800abbe:	1a9b      	subs	r3, r3, r2
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dc26      	bgt.n	800ac12 <_printf_common+0x96>
 800abc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abc8:	1e13      	subs	r3, r2, #0
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	bf18      	it	ne
 800abce:	2301      	movne	r3, #1
 800abd0:	0692      	lsls	r2, r2, #26
 800abd2:	d42b      	bmi.n	800ac2c <_printf_common+0xb0>
 800abd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abd8:	4649      	mov	r1, r9
 800abda:	4638      	mov	r0, r7
 800abdc:	47c0      	blx	r8
 800abde:	3001      	adds	r0, #1
 800abe0:	d01e      	beq.n	800ac20 <_printf_common+0xa4>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	68e5      	ldr	r5, [r4, #12]
 800abe6:	6832      	ldr	r2, [r6, #0]
 800abe8:	f003 0306 	and.w	r3, r3, #6
 800abec:	2b04      	cmp	r3, #4
 800abee:	bf08      	it	eq
 800abf0:	1aad      	subeq	r5, r5, r2
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	6922      	ldr	r2, [r4, #16]
 800abf6:	bf0c      	ite	eq
 800abf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abfc:	2500      	movne	r5, #0
 800abfe:	4293      	cmp	r3, r2
 800ac00:	bfc4      	itt	gt
 800ac02:	1a9b      	subgt	r3, r3, r2
 800ac04:	18ed      	addgt	r5, r5, r3
 800ac06:	2600      	movs	r6, #0
 800ac08:	341a      	adds	r4, #26
 800ac0a:	42b5      	cmp	r5, r6
 800ac0c:	d11a      	bne.n	800ac44 <_printf_common+0xc8>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e008      	b.n	800ac24 <_printf_common+0xa8>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4652      	mov	r2, sl
 800ac16:	4649      	mov	r1, r9
 800ac18:	4638      	mov	r0, r7
 800ac1a:	47c0      	blx	r8
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d103      	bne.n	800ac28 <_printf_common+0xac>
 800ac20:	f04f 30ff 	mov.w	r0, #4294967295
 800ac24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac28:	3501      	adds	r5, #1
 800ac2a:	e7c6      	b.n	800abba <_printf_common+0x3e>
 800ac2c:	18e1      	adds	r1, r4, r3
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	2030      	movs	r0, #48	; 0x30
 800ac32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac36:	4422      	add	r2, r4
 800ac38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac40:	3302      	adds	r3, #2
 800ac42:	e7c7      	b.n	800abd4 <_printf_common+0x58>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4622      	mov	r2, r4
 800ac48:	4649      	mov	r1, r9
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	47c0      	blx	r8
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d0e6      	beq.n	800ac20 <_printf_common+0xa4>
 800ac52:	3601      	adds	r6, #1
 800ac54:	e7d9      	b.n	800ac0a <_printf_common+0x8e>
	...

0800ac58 <_printf_i>:
 800ac58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	7e0f      	ldrb	r7, [r1, #24]
 800ac5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac60:	2f78      	cmp	r7, #120	; 0x78
 800ac62:	4691      	mov	r9, r2
 800ac64:	4680      	mov	r8, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	469a      	mov	sl, r3
 800ac6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac6e:	d807      	bhi.n	800ac80 <_printf_i+0x28>
 800ac70:	2f62      	cmp	r7, #98	; 0x62
 800ac72:	d80a      	bhi.n	800ac8a <_printf_i+0x32>
 800ac74:	2f00      	cmp	r7, #0
 800ac76:	f000 80d8 	beq.w	800ae2a <_printf_i+0x1d2>
 800ac7a:	2f58      	cmp	r7, #88	; 0x58
 800ac7c:	f000 80a3 	beq.w	800adc6 <_printf_i+0x16e>
 800ac80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac88:	e03a      	b.n	800ad00 <_printf_i+0xa8>
 800ac8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac8e:	2b15      	cmp	r3, #21
 800ac90:	d8f6      	bhi.n	800ac80 <_printf_i+0x28>
 800ac92:	a101      	add	r1, pc, #4	; (adr r1, 800ac98 <_printf_i+0x40>)
 800ac94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac98:	0800acf1 	.word	0x0800acf1
 800ac9c:	0800ad05 	.word	0x0800ad05
 800aca0:	0800ac81 	.word	0x0800ac81
 800aca4:	0800ac81 	.word	0x0800ac81
 800aca8:	0800ac81 	.word	0x0800ac81
 800acac:	0800ac81 	.word	0x0800ac81
 800acb0:	0800ad05 	.word	0x0800ad05
 800acb4:	0800ac81 	.word	0x0800ac81
 800acb8:	0800ac81 	.word	0x0800ac81
 800acbc:	0800ac81 	.word	0x0800ac81
 800acc0:	0800ac81 	.word	0x0800ac81
 800acc4:	0800ae11 	.word	0x0800ae11
 800acc8:	0800ad35 	.word	0x0800ad35
 800accc:	0800adf3 	.word	0x0800adf3
 800acd0:	0800ac81 	.word	0x0800ac81
 800acd4:	0800ac81 	.word	0x0800ac81
 800acd8:	0800ae33 	.word	0x0800ae33
 800acdc:	0800ac81 	.word	0x0800ac81
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800ac81 	.word	0x0800ac81
 800ace8:	0800ac81 	.word	0x0800ac81
 800acec:	0800adfb 	.word	0x0800adfb
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	1d1a      	adds	r2, r3, #4
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	602a      	str	r2, [r5, #0]
 800acf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad00:	2301      	movs	r3, #1
 800ad02:	e0a3      	b.n	800ae4c <_printf_i+0x1f4>
 800ad04:	6820      	ldr	r0, [r4, #0]
 800ad06:	6829      	ldr	r1, [r5, #0]
 800ad08:	0606      	lsls	r6, r0, #24
 800ad0a:	f101 0304 	add.w	r3, r1, #4
 800ad0e:	d50a      	bpl.n	800ad26 <_printf_i+0xce>
 800ad10:	680e      	ldr	r6, [r1, #0]
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	2e00      	cmp	r6, #0
 800ad16:	da03      	bge.n	800ad20 <_printf_i+0xc8>
 800ad18:	232d      	movs	r3, #45	; 0x2d
 800ad1a:	4276      	negs	r6, r6
 800ad1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad20:	485e      	ldr	r0, [pc, #376]	; (800ae9c <_printf_i+0x244>)
 800ad22:	230a      	movs	r3, #10
 800ad24:	e019      	b.n	800ad5a <_printf_i+0x102>
 800ad26:	680e      	ldr	r6, [r1, #0]
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad2e:	bf18      	it	ne
 800ad30:	b236      	sxthne	r6, r6
 800ad32:	e7ef      	b.n	800ad14 <_printf_i+0xbc>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	6820      	ldr	r0, [r4, #0]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	6029      	str	r1, [r5, #0]
 800ad3c:	0601      	lsls	r1, r0, #24
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0xec>
 800ad40:	681e      	ldr	r6, [r3, #0]
 800ad42:	e002      	b.n	800ad4a <_printf_i+0xf2>
 800ad44:	0646      	lsls	r6, r0, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0xe8>
 800ad48:	881e      	ldrh	r6, [r3, #0]
 800ad4a:	4854      	ldr	r0, [pc, #336]	; (800ae9c <_printf_i+0x244>)
 800ad4c:	2f6f      	cmp	r7, #111	; 0x6f
 800ad4e:	bf0c      	ite	eq
 800ad50:	2308      	moveq	r3, #8
 800ad52:	230a      	movne	r3, #10
 800ad54:	2100      	movs	r1, #0
 800ad56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad5a:	6865      	ldr	r5, [r4, #4]
 800ad5c:	60a5      	str	r5, [r4, #8]
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	bfa2      	ittt	ge
 800ad62:	6821      	ldrge	r1, [r4, #0]
 800ad64:	f021 0104 	bicge.w	r1, r1, #4
 800ad68:	6021      	strge	r1, [r4, #0]
 800ad6a:	b90e      	cbnz	r6, 800ad70 <_printf_i+0x118>
 800ad6c:	2d00      	cmp	r5, #0
 800ad6e:	d04d      	beq.n	800ae0c <_printf_i+0x1b4>
 800ad70:	4615      	mov	r5, r2
 800ad72:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad76:	fb03 6711 	mls	r7, r3, r1, r6
 800ad7a:	5dc7      	ldrb	r7, [r0, r7]
 800ad7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad80:	4637      	mov	r7, r6
 800ad82:	42bb      	cmp	r3, r7
 800ad84:	460e      	mov	r6, r1
 800ad86:	d9f4      	bls.n	800ad72 <_printf_i+0x11a>
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d10b      	bne.n	800ada4 <_printf_i+0x14c>
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	07de      	lsls	r6, r3, #31
 800ad90:	d508      	bpl.n	800ada4 <_printf_i+0x14c>
 800ad92:	6923      	ldr	r3, [r4, #16]
 800ad94:	6861      	ldr	r1, [r4, #4]
 800ad96:	4299      	cmp	r1, r3
 800ad98:	bfde      	ittt	le
 800ad9a:	2330      	movle	r3, #48	; 0x30
 800ad9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ada0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ada4:	1b52      	subs	r2, r2, r5
 800ada6:	6122      	str	r2, [r4, #16]
 800ada8:	f8cd a000 	str.w	sl, [sp]
 800adac:	464b      	mov	r3, r9
 800adae:	aa03      	add	r2, sp, #12
 800adb0:	4621      	mov	r1, r4
 800adb2:	4640      	mov	r0, r8
 800adb4:	f7ff fee2 	bl	800ab7c <_printf_common>
 800adb8:	3001      	adds	r0, #1
 800adba:	d14c      	bne.n	800ae56 <_printf_i+0x1fe>
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
 800adc0:	b004      	add	sp, #16
 800adc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc6:	4835      	ldr	r0, [pc, #212]	; (800ae9c <_printf_i+0x244>)
 800adc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800adcc:	6829      	ldr	r1, [r5, #0]
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	f851 6b04 	ldr.w	r6, [r1], #4
 800add4:	6029      	str	r1, [r5, #0]
 800add6:	061d      	lsls	r5, r3, #24
 800add8:	d514      	bpl.n	800ae04 <_printf_i+0x1ac>
 800adda:	07df      	lsls	r7, r3, #31
 800addc:	bf44      	itt	mi
 800adde:	f043 0320 	orrmi.w	r3, r3, #32
 800ade2:	6023      	strmi	r3, [r4, #0]
 800ade4:	b91e      	cbnz	r6, 800adee <_printf_i+0x196>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	f023 0320 	bic.w	r3, r3, #32
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	2310      	movs	r3, #16
 800adf0:	e7b0      	b.n	800ad54 <_printf_i+0xfc>
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	f043 0320 	orr.w	r3, r3, #32
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	2378      	movs	r3, #120	; 0x78
 800adfc:	4828      	ldr	r0, [pc, #160]	; (800aea0 <_printf_i+0x248>)
 800adfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae02:	e7e3      	b.n	800adcc <_printf_i+0x174>
 800ae04:	0659      	lsls	r1, r3, #25
 800ae06:	bf48      	it	mi
 800ae08:	b2b6      	uxthmi	r6, r6
 800ae0a:	e7e6      	b.n	800adda <_printf_i+0x182>
 800ae0c:	4615      	mov	r5, r2
 800ae0e:	e7bb      	b.n	800ad88 <_printf_i+0x130>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	6826      	ldr	r6, [r4, #0]
 800ae14:	6961      	ldr	r1, [r4, #20]
 800ae16:	1d18      	adds	r0, r3, #4
 800ae18:	6028      	str	r0, [r5, #0]
 800ae1a:	0635      	lsls	r5, r6, #24
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	d501      	bpl.n	800ae24 <_printf_i+0x1cc>
 800ae20:	6019      	str	r1, [r3, #0]
 800ae22:	e002      	b.n	800ae2a <_printf_i+0x1d2>
 800ae24:	0670      	lsls	r0, r6, #25
 800ae26:	d5fb      	bpl.n	800ae20 <_printf_i+0x1c8>
 800ae28:	8019      	strh	r1, [r3, #0]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	4615      	mov	r5, r2
 800ae30:	e7ba      	b.n	800ada8 <_printf_i+0x150>
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	1d1a      	adds	r2, r3, #4
 800ae36:	602a      	str	r2, [r5, #0]
 800ae38:	681d      	ldr	r5, [r3, #0]
 800ae3a:	6862      	ldr	r2, [r4, #4]
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f7f5 f9ee 	bl	8000220 <memchr>
 800ae44:	b108      	cbz	r0, 800ae4a <_printf_i+0x1f2>
 800ae46:	1b40      	subs	r0, r0, r5
 800ae48:	6060      	str	r0, [r4, #4]
 800ae4a:	6863      	ldr	r3, [r4, #4]
 800ae4c:	6123      	str	r3, [r4, #16]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae54:	e7a8      	b.n	800ada8 <_printf_i+0x150>
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	462a      	mov	r2, r5
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	47d0      	blx	sl
 800ae60:	3001      	adds	r0, #1
 800ae62:	d0ab      	beq.n	800adbc <_printf_i+0x164>
 800ae64:	6823      	ldr	r3, [r4, #0]
 800ae66:	079b      	lsls	r3, r3, #30
 800ae68:	d413      	bmi.n	800ae92 <_printf_i+0x23a>
 800ae6a:	68e0      	ldr	r0, [r4, #12]
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	4298      	cmp	r0, r3
 800ae70:	bfb8      	it	lt
 800ae72:	4618      	movlt	r0, r3
 800ae74:	e7a4      	b.n	800adc0 <_printf_i+0x168>
 800ae76:	2301      	movs	r3, #1
 800ae78:	4632      	mov	r2, r6
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	47d0      	blx	sl
 800ae80:	3001      	adds	r0, #1
 800ae82:	d09b      	beq.n	800adbc <_printf_i+0x164>
 800ae84:	3501      	adds	r5, #1
 800ae86:	68e3      	ldr	r3, [r4, #12]
 800ae88:	9903      	ldr	r1, [sp, #12]
 800ae8a:	1a5b      	subs	r3, r3, r1
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	dcf2      	bgt.n	800ae76 <_printf_i+0x21e>
 800ae90:	e7eb      	b.n	800ae6a <_printf_i+0x212>
 800ae92:	2500      	movs	r5, #0
 800ae94:	f104 0619 	add.w	r6, r4, #25
 800ae98:	e7f5      	b.n	800ae86 <_printf_i+0x22e>
 800ae9a:	bf00      	nop
 800ae9c:	0800e9c6 	.word	0x0800e9c6
 800aea0:	0800e9d7 	.word	0x0800e9d7

0800aea4 <siprintf>:
 800aea4:	b40e      	push	{r1, r2, r3}
 800aea6:	b500      	push	{lr}
 800aea8:	b09c      	sub	sp, #112	; 0x70
 800aeaa:	ab1d      	add	r3, sp, #116	; 0x74
 800aeac:	9002      	str	r0, [sp, #8]
 800aeae:	9006      	str	r0, [sp, #24]
 800aeb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aeb4:	4809      	ldr	r0, [pc, #36]	; (800aedc <siprintf+0x38>)
 800aeb6:	9107      	str	r1, [sp, #28]
 800aeb8:	9104      	str	r1, [sp, #16]
 800aeba:	4909      	ldr	r1, [pc, #36]	; (800aee0 <siprintf+0x3c>)
 800aebc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aec0:	9105      	str	r1, [sp, #20]
 800aec2:	6800      	ldr	r0, [r0, #0]
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	a902      	add	r1, sp, #8
 800aec8:	f001 fb78 	bl	800c5bc <_svfiprintf_r>
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	2200      	movs	r2, #0
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	b01c      	add	sp, #112	; 0x70
 800aed4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aed8:	b003      	add	sp, #12
 800aeda:	4770      	bx	lr
 800aedc:	20000088 	.word	0x20000088
 800aee0:	ffff0208 	.word	0xffff0208

0800aee4 <quorem>:
 800aee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	6903      	ldr	r3, [r0, #16]
 800aeea:	690c      	ldr	r4, [r1, #16]
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	4607      	mov	r7, r0
 800aef0:	f2c0 8081 	blt.w	800aff6 <quorem+0x112>
 800aef4:	3c01      	subs	r4, #1
 800aef6:	f101 0814 	add.w	r8, r1, #20
 800aefa:	f100 0514 	add.w	r5, r0, #20
 800aefe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af02:	9301      	str	r3, [sp, #4]
 800af04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af0c:	3301      	adds	r3, #1
 800af0e:	429a      	cmp	r2, r3
 800af10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af18:	fbb2 f6f3 	udiv	r6, r2, r3
 800af1c:	d331      	bcc.n	800af82 <quorem+0x9e>
 800af1e:	f04f 0e00 	mov.w	lr, #0
 800af22:	4640      	mov	r0, r8
 800af24:	46ac      	mov	ip, r5
 800af26:	46f2      	mov	sl, lr
 800af28:	f850 2b04 	ldr.w	r2, [r0], #4
 800af2c:	b293      	uxth	r3, r2
 800af2e:	fb06 e303 	mla	r3, r6, r3, lr
 800af32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af36:	b29b      	uxth	r3, r3
 800af38:	ebaa 0303 	sub.w	r3, sl, r3
 800af3c:	f8dc a000 	ldr.w	sl, [ip]
 800af40:	0c12      	lsrs	r2, r2, #16
 800af42:	fa13 f38a 	uxtah	r3, r3, sl
 800af46:	fb06 e202 	mla	r2, r6, r2, lr
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	9b00      	ldr	r3, [sp, #0]
 800af4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af52:	b292      	uxth	r2, r2
 800af54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af5c:	f8bd 3000 	ldrh.w	r3, [sp]
 800af60:	4581      	cmp	r9, r0
 800af62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af66:	f84c 3b04 	str.w	r3, [ip], #4
 800af6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af6e:	d2db      	bcs.n	800af28 <quorem+0x44>
 800af70:	f855 300b 	ldr.w	r3, [r5, fp]
 800af74:	b92b      	cbnz	r3, 800af82 <quorem+0x9e>
 800af76:	9b01      	ldr	r3, [sp, #4]
 800af78:	3b04      	subs	r3, #4
 800af7a:	429d      	cmp	r5, r3
 800af7c:	461a      	mov	r2, r3
 800af7e:	d32e      	bcc.n	800afde <quorem+0xfa>
 800af80:	613c      	str	r4, [r7, #16]
 800af82:	4638      	mov	r0, r7
 800af84:	f001 f8c6 	bl	800c114 <__mcmp>
 800af88:	2800      	cmp	r0, #0
 800af8a:	db24      	blt.n	800afd6 <quorem+0xf2>
 800af8c:	3601      	adds	r6, #1
 800af8e:	4628      	mov	r0, r5
 800af90:	f04f 0c00 	mov.w	ip, #0
 800af94:	f858 2b04 	ldr.w	r2, [r8], #4
 800af98:	f8d0 e000 	ldr.w	lr, [r0]
 800af9c:	b293      	uxth	r3, r2
 800af9e:	ebac 0303 	sub.w	r3, ip, r3
 800afa2:	0c12      	lsrs	r2, r2, #16
 800afa4:	fa13 f38e 	uxtah	r3, r3, lr
 800afa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afb6:	45c1      	cmp	r9, r8
 800afb8:	f840 3b04 	str.w	r3, [r0], #4
 800afbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800afc0:	d2e8      	bcs.n	800af94 <quorem+0xb0>
 800afc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afca:	b922      	cbnz	r2, 800afd6 <quorem+0xf2>
 800afcc:	3b04      	subs	r3, #4
 800afce:	429d      	cmp	r5, r3
 800afd0:	461a      	mov	r2, r3
 800afd2:	d30a      	bcc.n	800afea <quorem+0x106>
 800afd4:	613c      	str	r4, [r7, #16]
 800afd6:	4630      	mov	r0, r6
 800afd8:	b003      	add	sp, #12
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	6812      	ldr	r2, [r2, #0]
 800afe0:	3b04      	subs	r3, #4
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	d1cc      	bne.n	800af80 <quorem+0x9c>
 800afe6:	3c01      	subs	r4, #1
 800afe8:	e7c7      	b.n	800af7a <quorem+0x96>
 800afea:	6812      	ldr	r2, [r2, #0]
 800afec:	3b04      	subs	r3, #4
 800afee:	2a00      	cmp	r2, #0
 800aff0:	d1f0      	bne.n	800afd4 <quorem+0xf0>
 800aff2:	3c01      	subs	r4, #1
 800aff4:	e7eb      	b.n	800afce <quorem+0xea>
 800aff6:	2000      	movs	r0, #0
 800aff8:	e7ee      	b.n	800afd8 <quorem+0xf4>
 800affa:	0000      	movs	r0, r0
 800affc:	0000      	movs	r0, r0
	...

0800b000 <_dtoa_r>:
 800b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	ed2d 8b04 	vpush	{d8-d9}
 800b008:	ec57 6b10 	vmov	r6, r7, d0
 800b00c:	b093      	sub	sp, #76	; 0x4c
 800b00e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b010:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b014:	9106      	str	r1, [sp, #24]
 800b016:	ee10 aa10 	vmov	sl, s0
 800b01a:	4604      	mov	r4, r0
 800b01c:	9209      	str	r2, [sp, #36]	; 0x24
 800b01e:	930c      	str	r3, [sp, #48]	; 0x30
 800b020:	46bb      	mov	fp, r7
 800b022:	b975      	cbnz	r5, 800b042 <_dtoa_r+0x42>
 800b024:	2010      	movs	r0, #16
 800b026:	f000 fddd 	bl	800bbe4 <malloc>
 800b02a:	4602      	mov	r2, r0
 800b02c:	6260      	str	r0, [r4, #36]	; 0x24
 800b02e:	b920      	cbnz	r0, 800b03a <_dtoa_r+0x3a>
 800b030:	4ba7      	ldr	r3, [pc, #668]	; (800b2d0 <_dtoa_r+0x2d0>)
 800b032:	21ea      	movs	r1, #234	; 0xea
 800b034:	48a7      	ldr	r0, [pc, #668]	; (800b2d4 <_dtoa_r+0x2d4>)
 800b036:	f001 fbd1 	bl	800c7dc <__assert_func>
 800b03a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b03e:	6005      	str	r5, [r0, #0]
 800b040:	60c5      	str	r5, [r0, #12]
 800b042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b044:	6819      	ldr	r1, [r3, #0]
 800b046:	b151      	cbz	r1, 800b05e <_dtoa_r+0x5e>
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	604a      	str	r2, [r1, #4]
 800b04c:	2301      	movs	r3, #1
 800b04e:	4093      	lsls	r3, r2
 800b050:	608b      	str	r3, [r1, #8]
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fe1c 	bl	800bc90 <_Bfree>
 800b058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	1e3b      	subs	r3, r7, #0
 800b060:	bfaa      	itet	ge
 800b062:	2300      	movge	r3, #0
 800b064:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b068:	f8c8 3000 	strge.w	r3, [r8]
 800b06c:	4b9a      	ldr	r3, [pc, #616]	; (800b2d8 <_dtoa_r+0x2d8>)
 800b06e:	bfbc      	itt	lt
 800b070:	2201      	movlt	r2, #1
 800b072:	f8c8 2000 	strlt.w	r2, [r8]
 800b076:	ea33 030b 	bics.w	r3, r3, fp
 800b07a:	d11b      	bne.n	800b0b4 <_dtoa_r+0xb4>
 800b07c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b07e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b082:	6013      	str	r3, [r2, #0]
 800b084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b088:	4333      	orrs	r3, r6
 800b08a:	f000 8592 	beq.w	800bbb2 <_dtoa_r+0xbb2>
 800b08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b090:	b963      	cbnz	r3, 800b0ac <_dtoa_r+0xac>
 800b092:	4b92      	ldr	r3, [pc, #584]	; (800b2dc <_dtoa_r+0x2dc>)
 800b094:	e022      	b.n	800b0dc <_dtoa_r+0xdc>
 800b096:	4b92      	ldr	r3, [pc, #584]	; (800b2e0 <_dtoa_r+0x2e0>)
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	3308      	adds	r3, #8
 800b09c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	9801      	ldr	r0, [sp, #4]
 800b0a2:	b013      	add	sp, #76	; 0x4c
 800b0a4:	ecbd 8b04 	vpop	{d8-d9}
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	4b8b      	ldr	r3, [pc, #556]	; (800b2dc <_dtoa_r+0x2dc>)
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	3303      	adds	r3, #3
 800b0b2:	e7f3      	b.n	800b09c <_dtoa_r+0x9c>
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	f7f5 fd24 	bl	8000b08 <__aeabi_dcmpeq>
 800b0c0:	ec4b ab19 	vmov	d9, sl, fp
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	b158      	cbz	r0, 800b0e0 <_dtoa_r+0xe0>
 800b0c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	6013      	str	r3, [r2, #0]
 800b0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 856b 	beq.w	800bbac <_dtoa_r+0xbac>
 800b0d6:	4883      	ldr	r0, [pc, #524]	; (800b2e4 <_dtoa_r+0x2e4>)
 800b0d8:	6018      	str	r0, [r3, #0]
 800b0da:	1e43      	subs	r3, r0, #1
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	e7df      	b.n	800b0a0 <_dtoa_r+0xa0>
 800b0e0:	ec4b ab10 	vmov	d0, sl, fp
 800b0e4:	aa10      	add	r2, sp, #64	; 0x40
 800b0e6:	a911      	add	r1, sp, #68	; 0x44
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f001 f8b9 	bl	800c260 <__d2b>
 800b0ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b0f2:	ee08 0a10 	vmov	s16, r0
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	f000 8084 	beq.w	800b204 <_dtoa_r+0x204>
 800b0fc:	ee19 3a90 	vmov	r3, s19
 800b100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b104:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b108:	4656      	mov	r6, sl
 800b10a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b10e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b112:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b116:	4b74      	ldr	r3, [pc, #464]	; (800b2e8 <_dtoa_r+0x2e8>)
 800b118:	2200      	movs	r2, #0
 800b11a:	4630      	mov	r0, r6
 800b11c:	4639      	mov	r1, r7
 800b11e:	f7f5 f8d3 	bl	80002c8 <__aeabi_dsub>
 800b122:	a365      	add	r3, pc, #404	; (adr r3, 800b2b8 <_dtoa_r+0x2b8>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	f7f5 fa86 	bl	8000638 <__aeabi_dmul>
 800b12c:	a364      	add	r3, pc, #400	; (adr r3, 800b2c0 <_dtoa_r+0x2c0>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f7f5 f8cb 	bl	80002cc <__adddf3>
 800b136:	4606      	mov	r6, r0
 800b138:	4628      	mov	r0, r5
 800b13a:	460f      	mov	r7, r1
 800b13c:	f7f5 fa12 	bl	8000564 <__aeabi_i2d>
 800b140:	a361      	add	r3, pc, #388	; (adr r3, 800b2c8 <_dtoa_r+0x2c8>)
 800b142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b146:	f7f5 fa77 	bl	8000638 <__aeabi_dmul>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4630      	mov	r0, r6
 800b150:	4639      	mov	r1, r7
 800b152:	f7f5 f8bb 	bl	80002cc <__adddf3>
 800b156:	4606      	mov	r6, r0
 800b158:	460f      	mov	r7, r1
 800b15a:	f7f5 fd1d 	bl	8000b98 <__aeabi_d2iz>
 800b15e:	2200      	movs	r2, #0
 800b160:	9000      	str	r0, [sp, #0]
 800b162:	2300      	movs	r3, #0
 800b164:	4630      	mov	r0, r6
 800b166:	4639      	mov	r1, r7
 800b168:	f7f5 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800b16c:	b150      	cbz	r0, 800b184 <_dtoa_r+0x184>
 800b16e:	9800      	ldr	r0, [sp, #0]
 800b170:	f7f5 f9f8 	bl	8000564 <__aeabi_i2d>
 800b174:	4632      	mov	r2, r6
 800b176:	463b      	mov	r3, r7
 800b178:	f7f5 fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 800b17c:	b910      	cbnz	r0, 800b184 <_dtoa_r+0x184>
 800b17e:	9b00      	ldr	r3, [sp, #0]
 800b180:	3b01      	subs	r3, #1
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	9b00      	ldr	r3, [sp, #0]
 800b186:	2b16      	cmp	r3, #22
 800b188:	d85a      	bhi.n	800b240 <_dtoa_r+0x240>
 800b18a:	9a00      	ldr	r2, [sp, #0]
 800b18c:	4b57      	ldr	r3, [pc, #348]	; (800b2ec <_dtoa_r+0x2ec>)
 800b18e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	ec51 0b19 	vmov	r0, r1, d9
 800b19a:	f7f5 fcbf 	bl	8000b1c <__aeabi_dcmplt>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d050      	beq.n	800b244 <_dtoa_r+0x244>
 800b1a2:	9b00      	ldr	r3, [sp, #0]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1ae:	1b5d      	subs	r5, r3, r5
 800b1b0:	1e6b      	subs	r3, r5, #1
 800b1b2:	9305      	str	r3, [sp, #20]
 800b1b4:	bf45      	ittet	mi
 800b1b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b1ba:	9304      	strmi	r3, [sp, #16]
 800b1bc:	2300      	movpl	r3, #0
 800b1be:	2300      	movmi	r3, #0
 800b1c0:	bf4c      	ite	mi
 800b1c2:	9305      	strmi	r3, [sp, #20]
 800b1c4:	9304      	strpl	r3, [sp, #16]
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	db3d      	blt.n	800b248 <_dtoa_r+0x248>
 800b1cc:	9b05      	ldr	r3, [sp, #20]
 800b1ce:	9a00      	ldr	r2, [sp, #0]
 800b1d0:	920a      	str	r2, [sp, #40]	; 0x28
 800b1d2:	4413      	add	r3, r2
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9307      	str	r3, [sp, #28]
 800b1da:	9b06      	ldr	r3, [sp, #24]
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	f200 8089 	bhi.w	800b2f4 <_dtoa_r+0x2f4>
 800b1e2:	2b05      	cmp	r3, #5
 800b1e4:	bfc4      	itt	gt
 800b1e6:	3b04      	subgt	r3, #4
 800b1e8:	9306      	strgt	r3, [sp, #24]
 800b1ea:	9b06      	ldr	r3, [sp, #24]
 800b1ec:	f1a3 0302 	sub.w	r3, r3, #2
 800b1f0:	bfcc      	ite	gt
 800b1f2:	2500      	movgt	r5, #0
 800b1f4:	2501      	movle	r5, #1
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	f200 8087 	bhi.w	800b30a <_dtoa_r+0x30a>
 800b1fc:	e8df f003 	tbb	[pc, r3]
 800b200:	59383a2d 	.word	0x59383a2d
 800b204:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b208:	441d      	add	r5, r3
 800b20a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b20e:	2b20      	cmp	r3, #32
 800b210:	bfc1      	itttt	gt
 800b212:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b216:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b21a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b21e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b222:	bfda      	itte	le
 800b224:	f1c3 0320 	rsble	r3, r3, #32
 800b228:	fa06 f003 	lslle.w	r0, r6, r3
 800b22c:	4318      	orrgt	r0, r3
 800b22e:	f7f5 f989 	bl	8000544 <__aeabi_ui2d>
 800b232:	2301      	movs	r3, #1
 800b234:	4606      	mov	r6, r0
 800b236:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b23a:	3d01      	subs	r5, #1
 800b23c:	930e      	str	r3, [sp, #56]	; 0x38
 800b23e:	e76a      	b.n	800b116 <_dtoa_r+0x116>
 800b240:	2301      	movs	r3, #1
 800b242:	e7b2      	b.n	800b1aa <_dtoa_r+0x1aa>
 800b244:	900b      	str	r0, [sp, #44]	; 0x2c
 800b246:	e7b1      	b.n	800b1ac <_dtoa_r+0x1ac>
 800b248:	9b04      	ldr	r3, [sp, #16]
 800b24a:	9a00      	ldr	r2, [sp, #0]
 800b24c:	1a9b      	subs	r3, r3, r2
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	4253      	negs	r3, r2
 800b252:	9307      	str	r3, [sp, #28]
 800b254:	2300      	movs	r3, #0
 800b256:	930a      	str	r3, [sp, #40]	; 0x28
 800b258:	e7bf      	b.n	800b1da <_dtoa_r+0x1da>
 800b25a:	2300      	movs	r3, #0
 800b25c:	9308      	str	r3, [sp, #32]
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc55      	bgt.n	800b310 <_dtoa_r+0x310>
 800b264:	2301      	movs	r3, #1
 800b266:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b26a:	461a      	mov	r2, r3
 800b26c:	9209      	str	r2, [sp, #36]	; 0x24
 800b26e:	e00c      	b.n	800b28a <_dtoa_r+0x28a>
 800b270:	2301      	movs	r3, #1
 800b272:	e7f3      	b.n	800b25c <_dtoa_r+0x25c>
 800b274:	2300      	movs	r3, #0
 800b276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b278:	9308      	str	r3, [sp, #32]
 800b27a:	9b00      	ldr	r3, [sp, #0]
 800b27c:	4413      	add	r3, r2
 800b27e:	9302      	str	r3, [sp, #8]
 800b280:	3301      	adds	r3, #1
 800b282:	2b01      	cmp	r3, #1
 800b284:	9303      	str	r3, [sp, #12]
 800b286:	bfb8      	it	lt
 800b288:	2301      	movlt	r3, #1
 800b28a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b28c:	2200      	movs	r2, #0
 800b28e:	6042      	str	r2, [r0, #4]
 800b290:	2204      	movs	r2, #4
 800b292:	f102 0614 	add.w	r6, r2, #20
 800b296:	429e      	cmp	r6, r3
 800b298:	6841      	ldr	r1, [r0, #4]
 800b29a:	d93d      	bls.n	800b318 <_dtoa_r+0x318>
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 fcb7 	bl	800bc10 <_Balloc>
 800b2a2:	9001      	str	r0, [sp, #4]
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d13b      	bne.n	800b320 <_dtoa_r+0x320>
 800b2a8:	4b11      	ldr	r3, [pc, #68]	; (800b2f0 <_dtoa_r+0x2f0>)
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2b0:	e6c0      	b.n	800b034 <_dtoa_r+0x34>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e7df      	b.n	800b276 <_dtoa_r+0x276>
 800b2b6:	bf00      	nop
 800b2b8:	636f4361 	.word	0x636f4361
 800b2bc:	3fd287a7 	.word	0x3fd287a7
 800b2c0:	8b60c8b3 	.word	0x8b60c8b3
 800b2c4:	3fc68a28 	.word	0x3fc68a28
 800b2c8:	509f79fb 	.word	0x509f79fb
 800b2cc:	3fd34413 	.word	0x3fd34413
 800b2d0:	0800e9f5 	.word	0x0800e9f5
 800b2d4:	0800ea0c 	.word	0x0800ea0c
 800b2d8:	7ff00000 	.word	0x7ff00000
 800b2dc:	0800e9f1 	.word	0x0800e9f1
 800b2e0:	0800e9e8 	.word	0x0800e9e8
 800b2e4:	0800e9c5 	.word	0x0800e9c5
 800b2e8:	3ff80000 	.word	0x3ff80000
 800b2ec:	0800eb00 	.word	0x0800eb00
 800b2f0:	0800ea67 	.word	0x0800ea67
 800b2f4:	2501      	movs	r5, #1
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9306      	str	r3, [sp, #24]
 800b2fa:	9508      	str	r5, [sp, #32]
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b300:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b304:	2200      	movs	r2, #0
 800b306:	2312      	movs	r3, #18
 800b308:	e7b0      	b.n	800b26c <_dtoa_r+0x26c>
 800b30a:	2301      	movs	r3, #1
 800b30c:	9308      	str	r3, [sp, #32]
 800b30e:	e7f5      	b.n	800b2fc <_dtoa_r+0x2fc>
 800b310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b312:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b316:	e7b8      	b.n	800b28a <_dtoa_r+0x28a>
 800b318:	3101      	adds	r1, #1
 800b31a:	6041      	str	r1, [r0, #4]
 800b31c:	0052      	lsls	r2, r2, #1
 800b31e:	e7b8      	b.n	800b292 <_dtoa_r+0x292>
 800b320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	2b0e      	cmp	r3, #14
 800b32a:	f200 809d 	bhi.w	800b468 <_dtoa_r+0x468>
 800b32e:	2d00      	cmp	r5, #0
 800b330:	f000 809a 	beq.w	800b468 <_dtoa_r+0x468>
 800b334:	9b00      	ldr	r3, [sp, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	dd32      	ble.n	800b3a0 <_dtoa_r+0x3a0>
 800b33a:	4ab7      	ldr	r2, [pc, #732]	; (800b618 <_dtoa_r+0x618>)
 800b33c:	f003 030f 	and.w	r3, r3, #15
 800b340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b344:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	05d8      	lsls	r0, r3, #23
 800b34c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b350:	d516      	bpl.n	800b380 <_dtoa_r+0x380>
 800b352:	4bb2      	ldr	r3, [pc, #712]	; (800b61c <_dtoa_r+0x61c>)
 800b354:	ec51 0b19 	vmov	r0, r1, d9
 800b358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b35c:	f7f5 fa96 	bl	800088c <__aeabi_ddiv>
 800b360:	f007 070f 	and.w	r7, r7, #15
 800b364:	4682      	mov	sl, r0
 800b366:	468b      	mov	fp, r1
 800b368:	2503      	movs	r5, #3
 800b36a:	4eac      	ldr	r6, [pc, #688]	; (800b61c <_dtoa_r+0x61c>)
 800b36c:	b957      	cbnz	r7, 800b384 <_dtoa_r+0x384>
 800b36e:	4642      	mov	r2, r8
 800b370:	464b      	mov	r3, r9
 800b372:	4650      	mov	r0, sl
 800b374:	4659      	mov	r1, fp
 800b376:	f7f5 fa89 	bl	800088c <__aeabi_ddiv>
 800b37a:	4682      	mov	sl, r0
 800b37c:	468b      	mov	fp, r1
 800b37e:	e028      	b.n	800b3d2 <_dtoa_r+0x3d2>
 800b380:	2502      	movs	r5, #2
 800b382:	e7f2      	b.n	800b36a <_dtoa_r+0x36a>
 800b384:	07f9      	lsls	r1, r7, #31
 800b386:	d508      	bpl.n	800b39a <_dtoa_r+0x39a>
 800b388:	4640      	mov	r0, r8
 800b38a:	4649      	mov	r1, r9
 800b38c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b390:	f7f5 f952 	bl	8000638 <__aeabi_dmul>
 800b394:	3501      	adds	r5, #1
 800b396:	4680      	mov	r8, r0
 800b398:	4689      	mov	r9, r1
 800b39a:	107f      	asrs	r7, r7, #1
 800b39c:	3608      	adds	r6, #8
 800b39e:	e7e5      	b.n	800b36c <_dtoa_r+0x36c>
 800b3a0:	f000 809b 	beq.w	800b4da <_dtoa_r+0x4da>
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	4f9d      	ldr	r7, [pc, #628]	; (800b61c <_dtoa_r+0x61c>)
 800b3a8:	425e      	negs	r6, r3
 800b3aa:	4b9b      	ldr	r3, [pc, #620]	; (800b618 <_dtoa_r+0x618>)
 800b3ac:	f006 020f 	and.w	r2, r6, #15
 800b3b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	ec51 0b19 	vmov	r0, r1, d9
 800b3bc:	f7f5 f93c 	bl	8000638 <__aeabi_dmul>
 800b3c0:	1136      	asrs	r6, r6, #4
 800b3c2:	4682      	mov	sl, r0
 800b3c4:	468b      	mov	fp, r1
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2502      	movs	r5, #2
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	d17a      	bne.n	800b4c4 <_dtoa_r+0x4c4>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1d3      	bne.n	800b37a <_dtoa_r+0x37a>
 800b3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 8082 	beq.w	800b4de <_dtoa_r+0x4de>
 800b3da:	4b91      	ldr	r3, [pc, #580]	; (800b620 <_dtoa_r+0x620>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4650      	mov	r0, sl
 800b3e0:	4659      	mov	r1, fp
 800b3e2:	f7f5 fb9b 	bl	8000b1c <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d079      	beq.n	800b4de <_dtoa_r+0x4de>
 800b3ea:	9b03      	ldr	r3, [sp, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d076      	beq.n	800b4de <_dtoa_r+0x4de>
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd36      	ble.n	800b464 <_dtoa_r+0x464>
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	4650      	mov	r0, sl
 800b3fa:	4659      	mov	r1, fp
 800b3fc:	1e5f      	subs	r7, r3, #1
 800b3fe:	2200      	movs	r2, #0
 800b400:	4b88      	ldr	r3, [pc, #544]	; (800b624 <_dtoa_r+0x624>)
 800b402:	f7f5 f919 	bl	8000638 <__aeabi_dmul>
 800b406:	9e02      	ldr	r6, [sp, #8]
 800b408:	4682      	mov	sl, r0
 800b40a:	468b      	mov	fp, r1
 800b40c:	3501      	adds	r5, #1
 800b40e:	4628      	mov	r0, r5
 800b410:	f7f5 f8a8 	bl	8000564 <__aeabi_i2d>
 800b414:	4652      	mov	r2, sl
 800b416:	465b      	mov	r3, fp
 800b418:	f7f5 f90e 	bl	8000638 <__aeabi_dmul>
 800b41c:	4b82      	ldr	r3, [pc, #520]	; (800b628 <_dtoa_r+0x628>)
 800b41e:	2200      	movs	r2, #0
 800b420:	f7f4 ff54 	bl	80002cc <__adddf3>
 800b424:	46d0      	mov	r8, sl
 800b426:	46d9      	mov	r9, fp
 800b428:	4682      	mov	sl, r0
 800b42a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b42e:	2e00      	cmp	r6, #0
 800b430:	d158      	bne.n	800b4e4 <_dtoa_r+0x4e4>
 800b432:	4b7e      	ldr	r3, [pc, #504]	; (800b62c <_dtoa_r+0x62c>)
 800b434:	2200      	movs	r2, #0
 800b436:	4640      	mov	r0, r8
 800b438:	4649      	mov	r1, r9
 800b43a:	f7f4 ff45 	bl	80002c8 <__aeabi_dsub>
 800b43e:	4652      	mov	r2, sl
 800b440:	465b      	mov	r3, fp
 800b442:	4680      	mov	r8, r0
 800b444:	4689      	mov	r9, r1
 800b446:	f7f5 fb87 	bl	8000b58 <__aeabi_dcmpgt>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	f040 8295 	bne.w	800b97a <_dtoa_r+0x97a>
 800b450:	4652      	mov	r2, sl
 800b452:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	f7f5 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800b45e:	2800      	cmp	r0, #0
 800b460:	f040 8289 	bne.w	800b976 <_dtoa_r+0x976>
 800b464:	ec5b ab19 	vmov	sl, fp, d9
 800b468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f2c0 8148 	blt.w	800b700 <_dtoa_r+0x700>
 800b470:	9a00      	ldr	r2, [sp, #0]
 800b472:	2a0e      	cmp	r2, #14
 800b474:	f300 8144 	bgt.w	800b700 <_dtoa_r+0x700>
 800b478:	4b67      	ldr	r3, [pc, #412]	; (800b618 <_dtoa_r+0x618>)
 800b47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b47e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b484:	2b00      	cmp	r3, #0
 800b486:	f280 80d5 	bge.w	800b634 <_dtoa_r+0x634>
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f300 80d1 	bgt.w	800b634 <_dtoa_r+0x634>
 800b492:	f040 826f 	bne.w	800b974 <_dtoa_r+0x974>
 800b496:	4b65      	ldr	r3, [pc, #404]	; (800b62c <_dtoa_r+0x62c>)
 800b498:	2200      	movs	r2, #0
 800b49a:	4640      	mov	r0, r8
 800b49c:	4649      	mov	r1, r9
 800b49e:	f7f5 f8cb 	bl	8000638 <__aeabi_dmul>
 800b4a2:	4652      	mov	r2, sl
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	f7f5 fb4d 	bl	8000b44 <__aeabi_dcmpge>
 800b4aa:	9e03      	ldr	r6, [sp, #12]
 800b4ac:	4637      	mov	r7, r6
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f040 8245 	bne.w	800b93e <_dtoa_r+0x93e>
 800b4b4:	9d01      	ldr	r5, [sp, #4]
 800b4b6:	2331      	movs	r3, #49	; 0x31
 800b4b8:	f805 3b01 	strb.w	r3, [r5], #1
 800b4bc:	9b00      	ldr	r3, [sp, #0]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	e240      	b.n	800b946 <_dtoa_r+0x946>
 800b4c4:	07f2      	lsls	r2, r6, #31
 800b4c6:	d505      	bpl.n	800b4d4 <_dtoa_r+0x4d4>
 800b4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4cc:	f7f5 f8b4 	bl	8000638 <__aeabi_dmul>
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	1076      	asrs	r6, r6, #1
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	e777      	b.n	800b3ca <_dtoa_r+0x3ca>
 800b4da:	2502      	movs	r5, #2
 800b4dc:	e779      	b.n	800b3d2 <_dtoa_r+0x3d2>
 800b4de:	9f00      	ldr	r7, [sp, #0]
 800b4e0:	9e03      	ldr	r6, [sp, #12]
 800b4e2:	e794      	b.n	800b40e <_dtoa_r+0x40e>
 800b4e4:	9901      	ldr	r1, [sp, #4]
 800b4e6:	4b4c      	ldr	r3, [pc, #304]	; (800b618 <_dtoa_r+0x618>)
 800b4e8:	4431      	add	r1, r6
 800b4ea:	910d      	str	r1, [sp, #52]	; 0x34
 800b4ec:	9908      	ldr	r1, [sp, #32]
 800b4ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4f6:	2900      	cmp	r1, #0
 800b4f8:	d043      	beq.n	800b582 <_dtoa_r+0x582>
 800b4fa:	494d      	ldr	r1, [pc, #308]	; (800b630 <_dtoa_r+0x630>)
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	f7f5 f9c5 	bl	800088c <__aeabi_ddiv>
 800b502:	4652      	mov	r2, sl
 800b504:	465b      	mov	r3, fp
 800b506:	f7f4 fedf 	bl	80002c8 <__aeabi_dsub>
 800b50a:	9d01      	ldr	r5, [sp, #4]
 800b50c:	4682      	mov	sl, r0
 800b50e:	468b      	mov	fp, r1
 800b510:	4649      	mov	r1, r9
 800b512:	4640      	mov	r0, r8
 800b514:	f7f5 fb40 	bl	8000b98 <__aeabi_d2iz>
 800b518:	4606      	mov	r6, r0
 800b51a:	f7f5 f823 	bl	8000564 <__aeabi_i2d>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	f7f4 fecf 	bl	80002c8 <__aeabi_dsub>
 800b52a:	3630      	adds	r6, #48	; 0x30
 800b52c:	f805 6b01 	strb.w	r6, [r5], #1
 800b530:	4652      	mov	r2, sl
 800b532:	465b      	mov	r3, fp
 800b534:	4680      	mov	r8, r0
 800b536:	4689      	mov	r9, r1
 800b538:	f7f5 faf0 	bl	8000b1c <__aeabi_dcmplt>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d163      	bne.n	800b608 <_dtoa_r+0x608>
 800b540:	4642      	mov	r2, r8
 800b542:	464b      	mov	r3, r9
 800b544:	4936      	ldr	r1, [pc, #216]	; (800b620 <_dtoa_r+0x620>)
 800b546:	2000      	movs	r0, #0
 800b548:	f7f4 febe 	bl	80002c8 <__aeabi_dsub>
 800b54c:	4652      	mov	r2, sl
 800b54e:	465b      	mov	r3, fp
 800b550:	f7f5 fae4 	bl	8000b1c <__aeabi_dcmplt>
 800b554:	2800      	cmp	r0, #0
 800b556:	f040 80b5 	bne.w	800b6c4 <_dtoa_r+0x6c4>
 800b55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b55c:	429d      	cmp	r5, r3
 800b55e:	d081      	beq.n	800b464 <_dtoa_r+0x464>
 800b560:	4b30      	ldr	r3, [pc, #192]	; (800b624 <_dtoa_r+0x624>)
 800b562:	2200      	movs	r2, #0
 800b564:	4650      	mov	r0, sl
 800b566:	4659      	mov	r1, fp
 800b568:	f7f5 f866 	bl	8000638 <__aeabi_dmul>
 800b56c:	4b2d      	ldr	r3, [pc, #180]	; (800b624 <_dtoa_r+0x624>)
 800b56e:	4682      	mov	sl, r0
 800b570:	468b      	mov	fp, r1
 800b572:	4640      	mov	r0, r8
 800b574:	4649      	mov	r1, r9
 800b576:	2200      	movs	r2, #0
 800b578:	f7f5 f85e 	bl	8000638 <__aeabi_dmul>
 800b57c:	4680      	mov	r8, r0
 800b57e:	4689      	mov	r9, r1
 800b580:	e7c6      	b.n	800b510 <_dtoa_r+0x510>
 800b582:	4650      	mov	r0, sl
 800b584:	4659      	mov	r1, fp
 800b586:	f7f5 f857 	bl	8000638 <__aeabi_dmul>
 800b58a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b58c:	9d01      	ldr	r5, [sp, #4]
 800b58e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b590:	4682      	mov	sl, r0
 800b592:	468b      	mov	fp, r1
 800b594:	4649      	mov	r1, r9
 800b596:	4640      	mov	r0, r8
 800b598:	f7f5 fafe 	bl	8000b98 <__aeabi_d2iz>
 800b59c:	4606      	mov	r6, r0
 800b59e:	f7f4 ffe1 	bl	8000564 <__aeabi_i2d>
 800b5a2:	3630      	adds	r6, #48	; 0x30
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4640      	mov	r0, r8
 800b5aa:	4649      	mov	r1, r9
 800b5ac:	f7f4 fe8c 	bl	80002c8 <__aeabi_dsub>
 800b5b0:	f805 6b01 	strb.w	r6, [r5], #1
 800b5b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5b6:	429d      	cmp	r5, r3
 800b5b8:	4680      	mov	r8, r0
 800b5ba:	4689      	mov	r9, r1
 800b5bc:	f04f 0200 	mov.w	r2, #0
 800b5c0:	d124      	bne.n	800b60c <_dtoa_r+0x60c>
 800b5c2:	4b1b      	ldr	r3, [pc, #108]	; (800b630 <_dtoa_r+0x630>)
 800b5c4:	4650      	mov	r0, sl
 800b5c6:	4659      	mov	r1, fp
 800b5c8:	f7f4 fe80 	bl	80002cc <__adddf3>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	f7f5 fac0 	bl	8000b58 <__aeabi_dcmpgt>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d173      	bne.n	800b6c4 <_dtoa_r+0x6c4>
 800b5dc:	4652      	mov	r2, sl
 800b5de:	465b      	mov	r3, fp
 800b5e0:	4913      	ldr	r1, [pc, #76]	; (800b630 <_dtoa_r+0x630>)
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	f7f4 fe70 	bl	80002c8 <__aeabi_dsub>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	f7f5 fa94 	bl	8000b1c <__aeabi_dcmplt>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f43f af35 	beq.w	800b464 <_dtoa_r+0x464>
 800b5fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5fc:	1e6b      	subs	r3, r5, #1
 800b5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800b600:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b604:	2b30      	cmp	r3, #48	; 0x30
 800b606:	d0f8      	beq.n	800b5fa <_dtoa_r+0x5fa>
 800b608:	9700      	str	r7, [sp, #0]
 800b60a:	e049      	b.n	800b6a0 <_dtoa_r+0x6a0>
 800b60c:	4b05      	ldr	r3, [pc, #20]	; (800b624 <_dtoa_r+0x624>)
 800b60e:	f7f5 f813 	bl	8000638 <__aeabi_dmul>
 800b612:	4680      	mov	r8, r0
 800b614:	4689      	mov	r9, r1
 800b616:	e7bd      	b.n	800b594 <_dtoa_r+0x594>
 800b618:	0800eb00 	.word	0x0800eb00
 800b61c:	0800ead8 	.word	0x0800ead8
 800b620:	3ff00000 	.word	0x3ff00000
 800b624:	40240000 	.word	0x40240000
 800b628:	401c0000 	.word	0x401c0000
 800b62c:	40140000 	.word	0x40140000
 800b630:	3fe00000 	.word	0x3fe00000
 800b634:	9d01      	ldr	r5, [sp, #4]
 800b636:	4656      	mov	r6, sl
 800b638:	465f      	mov	r7, fp
 800b63a:	4642      	mov	r2, r8
 800b63c:	464b      	mov	r3, r9
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	f7f5 f923 	bl	800088c <__aeabi_ddiv>
 800b646:	f7f5 faa7 	bl	8000b98 <__aeabi_d2iz>
 800b64a:	4682      	mov	sl, r0
 800b64c:	f7f4 ff8a 	bl	8000564 <__aeabi_i2d>
 800b650:	4642      	mov	r2, r8
 800b652:	464b      	mov	r3, r9
 800b654:	f7f4 fff0 	bl	8000638 <__aeabi_dmul>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4630      	mov	r0, r6
 800b65e:	4639      	mov	r1, r7
 800b660:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b664:	f7f4 fe30 	bl	80002c8 <__aeabi_dsub>
 800b668:	f805 6b01 	strb.w	r6, [r5], #1
 800b66c:	9e01      	ldr	r6, [sp, #4]
 800b66e:	9f03      	ldr	r7, [sp, #12]
 800b670:	1bae      	subs	r6, r5, r6
 800b672:	42b7      	cmp	r7, r6
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	d135      	bne.n	800b6e6 <_dtoa_r+0x6e6>
 800b67a:	f7f4 fe27 	bl	80002cc <__adddf3>
 800b67e:	4642      	mov	r2, r8
 800b680:	464b      	mov	r3, r9
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	f7f5 fa67 	bl	8000b58 <__aeabi_dcmpgt>
 800b68a:	b9d0      	cbnz	r0, 800b6c2 <_dtoa_r+0x6c2>
 800b68c:	4642      	mov	r2, r8
 800b68e:	464b      	mov	r3, r9
 800b690:	4630      	mov	r0, r6
 800b692:	4639      	mov	r1, r7
 800b694:	f7f5 fa38 	bl	8000b08 <__aeabi_dcmpeq>
 800b698:	b110      	cbz	r0, 800b6a0 <_dtoa_r+0x6a0>
 800b69a:	f01a 0f01 	tst.w	sl, #1
 800b69e:	d110      	bne.n	800b6c2 <_dtoa_r+0x6c2>
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	ee18 1a10 	vmov	r1, s16
 800b6a6:	f000 faf3 	bl	800bc90 <_Bfree>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	9800      	ldr	r0, [sp, #0]
 800b6ae:	702b      	strb	r3, [r5, #0]
 800b6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	6018      	str	r0, [r3, #0]
 800b6b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f43f acf1 	beq.w	800b0a0 <_dtoa_r+0xa0>
 800b6be:	601d      	str	r5, [r3, #0]
 800b6c0:	e4ee      	b.n	800b0a0 <_dtoa_r+0xa0>
 800b6c2:	9f00      	ldr	r7, [sp, #0]
 800b6c4:	462b      	mov	r3, r5
 800b6c6:	461d      	mov	r5, r3
 800b6c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6cc:	2a39      	cmp	r2, #57	; 0x39
 800b6ce:	d106      	bne.n	800b6de <_dtoa_r+0x6de>
 800b6d0:	9a01      	ldr	r2, [sp, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d1f7      	bne.n	800b6c6 <_dtoa_r+0x6c6>
 800b6d6:	9901      	ldr	r1, [sp, #4]
 800b6d8:	2230      	movs	r2, #48	; 0x30
 800b6da:	3701      	adds	r7, #1
 800b6dc:	700a      	strb	r2, [r1, #0]
 800b6de:	781a      	ldrb	r2, [r3, #0]
 800b6e0:	3201      	adds	r2, #1
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	e790      	b.n	800b608 <_dtoa_r+0x608>
 800b6e6:	4ba6      	ldr	r3, [pc, #664]	; (800b980 <_dtoa_r+0x980>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f7f4 ffa5 	bl	8000638 <__aeabi_dmul>
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	f7f5 fa07 	bl	8000b08 <__aeabi_dcmpeq>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d09d      	beq.n	800b63a <_dtoa_r+0x63a>
 800b6fe:	e7cf      	b.n	800b6a0 <_dtoa_r+0x6a0>
 800b700:	9a08      	ldr	r2, [sp, #32]
 800b702:	2a00      	cmp	r2, #0
 800b704:	f000 80d7 	beq.w	800b8b6 <_dtoa_r+0x8b6>
 800b708:	9a06      	ldr	r2, [sp, #24]
 800b70a:	2a01      	cmp	r2, #1
 800b70c:	f300 80ba 	bgt.w	800b884 <_dtoa_r+0x884>
 800b710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b712:	2a00      	cmp	r2, #0
 800b714:	f000 80b2 	beq.w	800b87c <_dtoa_r+0x87c>
 800b718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b71c:	9e07      	ldr	r6, [sp, #28]
 800b71e:	9d04      	ldr	r5, [sp, #16]
 800b720:	9a04      	ldr	r2, [sp, #16]
 800b722:	441a      	add	r2, r3
 800b724:	9204      	str	r2, [sp, #16]
 800b726:	9a05      	ldr	r2, [sp, #20]
 800b728:	2101      	movs	r1, #1
 800b72a:	441a      	add	r2, r3
 800b72c:	4620      	mov	r0, r4
 800b72e:	9205      	str	r2, [sp, #20]
 800b730:	f000 fb66 	bl	800be00 <__i2b>
 800b734:	4607      	mov	r7, r0
 800b736:	2d00      	cmp	r5, #0
 800b738:	dd0c      	ble.n	800b754 <_dtoa_r+0x754>
 800b73a:	9b05      	ldr	r3, [sp, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dd09      	ble.n	800b754 <_dtoa_r+0x754>
 800b740:	42ab      	cmp	r3, r5
 800b742:	9a04      	ldr	r2, [sp, #16]
 800b744:	bfa8      	it	ge
 800b746:	462b      	movge	r3, r5
 800b748:	1ad2      	subs	r2, r2, r3
 800b74a:	9204      	str	r2, [sp, #16]
 800b74c:	9a05      	ldr	r2, [sp, #20]
 800b74e:	1aed      	subs	r5, r5, r3
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	9305      	str	r3, [sp, #20]
 800b754:	9b07      	ldr	r3, [sp, #28]
 800b756:	b31b      	cbz	r3, 800b7a0 <_dtoa_r+0x7a0>
 800b758:	9b08      	ldr	r3, [sp, #32]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f000 80af 	beq.w	800b8be <_dtoa_r+0x8be>
 800b760:	2e00      	cmp	r6, #0
 800b762:	dd13      	ble.n	800b78c <_dtoa_r+0x78c>
 800b764:	4639      	mov	r1, r7
 800b766:	4632      	mov	r2, r6
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 fc09 	bl	800bf80 <__pow5mult>
 800b76e:	ee18 2a10 	vmov	r2, s16
 800b772:	4601      	mov	r1, r0
 800b774:	4607      	mov	r7, r0
 800b776:	4620      	mov	r0, r4
 800b778:	f000 fb58 	bl	800be2c <__multiply>
 800b77c:	ee18 1a10 	vmov	r1, s16
 800b780:	4680      	mov	r8, r0
 800b782:	4620      	mov	r0, r4
 800b784:	f000 fa84 	bl	800bc90 <_Bfree>
 800b788:	ee08 8a10 	vmov	s16, r8
 800b78c:	9b07      	ldr	r3, [sp, #28]
 800b78e:	1b9a      	subs	r2, r3, r6
 800b790:	d006      	beq.n	800b7a0 <_dtoa_r+0x7a0>
 800b792:	ee18 1a10 	vmov	r1, s16
 800b796:	4620      	mov	r0, r4
 800b798:	f000 fbf2 	bl	800bf80 <__pow5mult>
 800b79c:	ee08 0a10 	vmov	s16, r0
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 fb2c 	bl	800be00 <__i2b>
 800b7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	f340 8088 	ble.w	800b8c2 <_dtoa_r+0x8c2>
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4601      	mov	r1, r0
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 fbe2 	bl	800bf80 <__pow5mult>
 800b7bc:	9b06      	ldr	r3, [sp, #24]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	f340 8081 	ble.w	800b8c8 <_dtoa_r+0x8c8>
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	6933      	ldr	r3, [r6, #16]
 800b7cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7d0:	6918      	ldr	r0, [r3, #16]
 800b7d2:	f000 fac5 	bl	800bd60 <__hi0bits>
 800b7d6:	f1c0 0020 	rsb	r0, r0, #32
 800b7da:	9b05      	ldr	r3, [sp, #20]
 800b7dc:	4418      	add	r0, r3
 800b7de:	f010 001f 	ands.w	r0, r0, #31
 800b7e2:	f000 8092 	beq.w	800b90a <_dtoa_r+0x90a>
 800b7e6:	f1c0 0320 	rsb	r3, r0, #32
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	f340 808a 	ble.w	800b904 <_dtoa_r+0x904>
 800b7f0:	f1c0 001c 	rsb	r0, r0, #28
 800b7f4:	9b04      	ldr	r3, [sp, #16]
 800b7f6:	4403      	add	r3, r0
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	9b05      	ldr	r3, [sp, #20]
 800b7fc:	4403      	add	r3, r0
 800b7fe:	4405      	add	r5, r0
 800b800:	9305      	str	r3, [sp, #20]
 800b802:	9b04      	ldr	r3, [sp, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	dd07      	ble.n	800b818 <_dtoa_r+0x818>
 800b808:	ee18 1a10 	vmov	r1, s16
 800b80c:	461a      	mov	r2, r3
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 fc10 	bl	800c034 <__lshift>
 800b814:	ee08 0a10 	vmov	s16, r0
 800b818:	9b05      	ldr	r3, [sp, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dd05      	ble.n	800b82a <_dtoa_r+0x82a>
 800b81e:	4631      	mov	r1, r6
 800b820:	461a      	mov	r2, r3
 800b822:	4620      	mov	r0, r4
 800b824:	f000 fc06 	bl	800c034 <__lshift>
 800b828:	4606      	mov	r6, r0
 800b82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d06e      	beq.n	800b90e <_dtoa_r+0x90e>
 800b830:	ee18 0a10 	vmov	r0, s16
 800b834:	4631      	mov	r1, r6
 800b836:	f000 fc6d 	bl	800c114 <__mcmp>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	da67      	bge.n	800b90e <_dtoa_r+0x90e>
 800b83e:	9b00      	ldr	r3, [sp, #0]
 800b840:	3b01      	subs	r3, #1
 800b842:	ee18 1a10 	vmov	r1, s16
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	220a      	movs	r2, #10
 800b84a:	2300      	movs	r3, #0
 800b84c:	4620      	mov	r0, r4
 800b84e:	f000 fa41 	bl	800bcd4 <__multadd>
 800b852:	9b08      	ldr	r3, [sp, #32]
 800b854:	ee08 0a10 	vmov	s16, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 81b1 	beq.w	800bbc0 <_dtoa_r+0xbc0>
 800b85e:	2300      	movs	r3, #0
 800b860:	4639      	mov	r1, r7
 800b862:	220a      	movs	r2, #10
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fa35 	bl	800bcd4 <__multadd>
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	4607      	mov	r7, r0
 800b870:	f300 808e 	bgt.w	800b990 <_dtoa_r+0x990>
 800b874:	9b06      	ldr	r3, [sp, #24]
 800b876:	2b02      	cmp	r3, #2
 800b878:	dc51      	bgt.n	800b91e <_dtoa_r+0x91e>
 800b87a:	e089      	b.n	800b990 <_dtoa_r+0x990>
 800b87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b87e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b882:	e74b      	b.n	800b71c <_dtoa_r+0x71c>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	1e5e      	subs	r6, r3, #1
 800b888:	9b07      	ldr	r3, [sp, #28]
 800b88a:	42b3      	cmp	r3, r6
 800b88c:	bfbf      	itttt	lt
 800b88e:	9b07      	ldrlt	r3, [sp, #28]
 800b890:	9607      	strlt	r6, [sp, #28]
 800b892:	1af2      	sublt	r2, r6, r3
 800b894:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b896:	bfb6      	itet	lt
 800b898:	189b      	addlt	r3, r3, r2
 800b89a:	1b9e      	subge	r6, r3, r6
 800b89c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	bfb8      	it	lt
 800b8a2:	2600      	movlt	r6, #0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	bfb7      	itett	lt
 800b8a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b8ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b8b0:	1a9d      	sublt	r5, r3, r2
 800b8b2:	2300      	movlt	r3, #0
 800b8b4:	e734      	b.n	800b720 <_dtoa_r+0x720>
 800b8b6:	9e07      	ldr	r6, [sp, #28]
 800b8b8:	9d04      	ldr	r5, [sp, #16]
 800b8ba:	9f08      	ldr	r7, [sp, #32]
 800b8bc:	e73b      	b.n	800b736 <_dtoa_r+0x736>
 800b8be:	9a07      	ldr	r2, [sp, #28]
 800b8c0:	e767      	b.n	800b792 <_dtoa_r+0x792>
 800b8c2:	9b06      	ldr	r3, [sp, #24]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	dc18      	bgt.n	800b8fa <_dtoa_r+0x8fa>
 800b8c8:	f1ba 0f00 	cmp.w	sl, #0
 800b8cc:	d115      	bne.n	800b8fa <_dtoa_r+0x8fa>
 800b8ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8d2:	b993      	cbnz	r3, 800b8fa <_dtoa_r+0x8fa>
 800b8d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8d8:	0d1b      	lsrs	r3, r3, #20
 800b8da:	051b      	lsls	r3, r3, #20
 800b8dc:	b183      	cbz	r3, 800b900 <_dtoa_r+0x900>
 800b8de:	9b04      	ldr	r3, [sp, #16]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	9b05      	ldr	r3, [sp, #20]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	9305      	str	r3, [sp, #20]
 800b8ea:	f04f 0801 	mov.w	r8, #1
 800b8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f47f af6a 	bne.w	800b7ca <_dtoa_r+0x7ca>
 800b8f6:	2001      	movs	r0, #1
 800b8f8:	e76f      	b.n	800b7da <_dtoa_r+0x7da>
 800b8fa:	f04f 0800 	mov.w	r8, #0
 800b8fe:	e7f6      	b.n	800b8ee <_dtoa_r+0x8ee>
 800b900:	4698      	mov	r8, r3
 800b902:	e7f4      	b.n	800b8ee <_dtoa_r+0x8ee>
 800b904:	f43f af7d 	beq.w	800b802 <_dtoa_r+0x802>
 800b908:	4618      	mov	r0, r3
 800b90a:	301c      	adds	r0, #28
 800b90c:	e772      	b.n	800b7f4 <_dtoa_r+0x7f4>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	dc37      	bgt.n	800b984 <_dtoa_r+0x984>
 800b914:	9b06      	ldr	r3, [sp, #24]
 800b916:	2b02      	cmp	r3, #2
 800b918:	dd34      	ble.n	800b984 <_dtoa_r+0x984>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	9302      	str	r3, [sp, #8]
 800b91e:	9b02      	ldr	r3, [sp, #8]
 800b920:	b96b      	cbnz	r3, 800b93e <_dtoa_r+0x93e>
 800b922:	4631      	mov	r1, r6
 800b924:	2205      	movs	r2, #5
 800b926:	4620      	mov	r0, r4
 800b928:	f000 f9d4 	bl	800bcd4 <__multadd>
 800b92c:	4601      	mov	r1, r0
 800b92e:	4606      	mov	r6, r0
 800b930:	ee18 0a10 	vmov	r0, s16
 800b934:	f000 fbee 	bl	800c114 <__mcmp>
 800b938:	2800      	cmp	r0, #0
 800b93a:	f73f adbb 	bgt.w	800b4b4 <_dtoa_r+0x4b4>
 800b93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b940:	9d01      	ldr	r5, [sp, #4]
 800b942:	43db      	mvns	r3, r3
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	f04f 0800 	mov.w	r8, #0
 800b94a:	4631      	mov	r1, r6
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 f99f 	bl	800bc90 <_Bfree>
 800b952:	2f00      	cmp	r7, #0
 800b954:	f43f aea4 	beq.w	800b6a0 <_dtoa_r+0x6a0>
 800b958:	f1b8 0f00 	cmp.w	r8, #0
 800b95c:	d005      	beq.n	800b96a <_dtoa_r+0x96a>
 800b95e:	45b8      	cmp	r8, r7
 800b960:	d003      	beq.n	800b96a <_dtoa_r+0x96a>
 800b962:	4641      	mov	r1, r8
 800b964:	4620      	mov	r0, r4
 800b966:	f000 f993 	bl	800bc90 <_Bfree>
 800b96a:	4639      	mov	r1, r7
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 f98f 	bl	800bc90 <_Bfree>
 800b972:	e695      	b.n	800b6a0 <_dtoa_r+0x6a0>
 800b974:	2600      	movs	r6, #0
 800b976:	4637      	mov	r7, r6
 800b978:	e7e1      	b.n	800b93e <_dtoa_r+0x93e>
 800b97a:	9700      	str	r7, [sp, #0]
 800b97c:	4637      	mov	r7, r6
 800b97e:	e599      	b.n	800b4b4 <_dtoa_r+0x4b4>
 800b980:	40240000 	.word	0x40240000
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	2b00      	cmp	r3, #0
 800b988:	f000 80ca 	beq.w	800bb20 <_dtoa_r+0xb20>
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	9302      	str	r3, [sp, #8]
 800b990:	2d00      	cmp	r5, #0
 800b992:	dd05      	ble.n	800b9a0 <_dtoa_r+0x9a0>
 800b994:	4639      	mov	r1, r7
 800b996:	462a      	mov	r2, r5
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 fb4b 	bl	800c034 <__lshift>
 800b99e:	4607      	mov	r7, r0
 800b9a0:	f1b8 0f00 	cmp.w	r8, #0
 800b9a4:	d05b      	beq.n	800ba5e <_dtoa_r+0xa5e>
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 f931 	bl	800bc10 <_Balloc>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	b928      	cbnz	r0, 800b9be <_dtoa_r+0x9be>
 800b9b2:	4b87      	ldr	r3, [pc, #540]	; (800bbd0 <_dtoa_r+0xbd0>)
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9ba:	f7ff bb3b 	b.w	800b034 <_dtoa_r+0x34>
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	3202      	adds	r2, #2
 800b9c2:	0092      	lsls	r2, r2, #2
 800b9c4:	f107 010c 	add.w	r1, r7, #12
 800b9c8:	300c      	adds	r0, #12
 800b9ca:	f000 f913 	bl	800bbf4 <memcpy>
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 fb2e 	bl	800c034 <__lshift>
 800b9d8:	9b01      	ldr	r3, [sp, #4]
 800b9da:	f103 0901 	add.w	r9, r3, #1
 800b9de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	9305      	str	r3, [sp, #20]
 800b9e6:	f00a 0301 	and.w	r3, sl, #1
 800b9ea:	46b8      	mov	r8, r7
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	4631      	mov	r1, r6
 800b9f2:	ee18 0a10 	vmov	r0, s16
 800b9f6:	f7ff fa75 	bl	800aee4 <quorem>
 800b9fa:	4641      	mov	r1, r8
 800b9fc:	9002      	str	r0, [sp, #8]
 800b9fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba02:	ee18 0a10 	vmov	r0, s16
 800ba06:	f000 fb85 	bl	800c114 <__mcmp>
 800ba0a:	463a      	mov	r2, r7
 800ba0c:	9003      	str	r0, [sp, #12]
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4620      	mov	r0, r4
 800ba12:	f000 fb9b 	bl	800c14c <__mdiff>
 800ba16:	68c2      	ldr	r2, [r0, #12]
 800ba18:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	bb02      	cbnz	r2, 800ba62 <_dtoa_r+0xa62>
 800ba20:	4601      	mov	r1, r0
 800ba22:	ee18 0a10 	vmov	r0, s16
 800ba26:	f000 fb75 	bl	800c114 <__mcmp>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4620      	mov	r0, r4
 800ba30:	9207      	str	r2, [sp, #28]
 800ba32:	f000 f92d 	bl	800bc90 <_Bfree>
 800ba36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba3a:	ea43 0102 	orr.w	r1, r3, r2
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	430b      	orrs	r3, r1
 800ba42:	464d      	mov	r5, r9
 800ba44:	d10f      	bne.n	800ba66 <_dtoa_r+0xa66>
 800ba46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba4a:	d02a      	beq.n	800baa2 <_dtoa_r+0xaa2>
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	dd02      	ble.n	800ba58 <_dtoa_r+0xa58>
 800ba52:	9b02      	ldr	r3, [sp, #8]
 800ba54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba58:	f88b a000 	strb.w	sl, [fp]
 800ba5c:	e775      	b.n	800b94a <_dtoa_r+0x94a>
 800ba5e:	4638      	mov	r0, r7
 800ba60:	e7ba      	b.n	800b9d8 <_dtoa_r+0x9d8>
 800ba62:	2201      	movs	r2, #1
 800ba64:	e7e2      	b.n	800ba2c <_dtoa_r+0xa2c>
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	db04      	blt.n	800ba76 <_dtoa_r+0xa76>
 800ba6c:	9906      	ldr	r1, [sp, #24]
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	9904      	ldr	r1, [sp, #16]
 800ba72:	430b      	orrs	r3, r1
 800ba74:	d122      	bne.n	800babc <_dtoa_r+0xabc>
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	ddee      	ble.n	800ba58 <_dtoa_r+0xa58>
 800ba7a:	ee18 1a10 	vmov	r1, s16
 800ba7e:	2201      	movs	r2, #1
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fad7 	bl	800c034 <__lshift>
 800ba86:	4631      	mov	r1, r6
 800ba88:	ee08 0a10 	vmov	s16, r0
 800ba8c:	f000 fb42 	bl	800c114 <__mcmp>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	dc03      	bgt.n	800ba9c <_dtoa_r+0xa9c>
 800ba94:	d1e0      	bne.n	800ba58 <_dtoa_r+0xa58>
 800ba96:	f01a 0f01 	tst.w	sl, #1
 800ba9a:	d0dd      	beq.n	800ba58 <_dtoa_r+0xa58>
 800ba9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baa0:	d1d7      	bne.n	800ba52 <_dtoa_r+0xa52>
 800baa2:	2339      	movs	r3, #57	; 0x39
 800baa4:	f88b 3000 	strb.w	r3, [fp]
 800baa8:	462b      	mov	r3, r5
 800baaa:	461d      	mov	r5, r3
 800baac:	3b01      	subs	r3, #1
 800baae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bab2:	2a39      	cmp	r2, #57	; 0x39
 800bab4:	d071      	beq.n	800bb9a <_dtoa_r+0xb9a>
 800bab6:	3201      	adds	r2, #1
 800bab8:	701a      	strb	r2, [r3, #0]
 800baba:	e746      	b.n	800b94a <_dtoa_r+0x94a>
 800babc:	2a00      	cmp	r2, #0
 800babe:	dd07      	ble.n	800bad0 <_dtoa_r+0xad0>
 800bac0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bac4:	d0ed      	beq.n	800baa2 <_dtoa_r+0xaa2>
 800bac6:	f10a 0301 	add.w	r3, sl, #1
 800baca:	f88b 3000 	strb.w	r3, [fp]
 800bace:	e73c      	b.n	800b94a <_dtoa_r+0x94a>
 800bad0:	9b05      	ldr	r3, [sp, #20]
 800bad2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bad6:	4599      	cmp	r9, r3
 800bad8:	d047      	beq.n	800bb6a <_dtoa_r+0xb6a>
 800bada:	ee18 1a10 	vmov	r1, s16
 800bade:	2300      	movs	r3, #0
 800bae0:	220a      	movs	r2, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f8f6 	bl	800bcd4 <__multadd>
 800bae8:	45b8      	cmp	r8, r7
 800baea:	ee08 0a10 	vmov	s16, r0
 800baee:	f04f 0300 	mov.w	r3, #0
 800baf2:	f04f 020a 	mov.w	r2, #10
 800baf6:	4641      	mov	r1, r8
 800baf8:	4620      	mov	r0, r4
 800bafa:	d106      	bne.n	800bb0a <_dtoa_r+0xb0a>
 800bafc:	f000 f8ea 	bl	800bcd4 <__multadd>
 800bb00:	4680      	mov	r8, r0
 800bb02:	4607      	mov	r7, r0
 800bb04:	f109 0901 	add.w	r9, r9, #1
 800bb08:	e772      	b.n	800b9f0 <_dtoa_r+0x9f0>
 800bb0a:	f000 f8e3 	bl	800bcd4 <__multadd>
 800bb0e:	4639      	mov	r1, r7
 800bb10:	4680      	mov	r8, r0
 800bb12:	2300      	movs	r3, #0
 800bb14:	220a      	movs	r2, #10
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 f8dc 	bl	800bcd4 <__multadd>
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	e7f1      	b.n	800bb04 <_dtoa_r+0xb04>
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	9302      	str	r3, [sp, #8]
 800bb24:	9d01      	ldr	r5, [sp, #4]
 800bb26:	ee18 0a10 	vmov	r0, s16
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	f7ff f9da 	bl	800aee4 <quorem>
 800bb30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb34:	9b01      	ldr	r3, [sp, #4]
 800bb36:	f805 ab01 	strb.w	sl, [r5], #1
 800bb3a:	1aea      	subs	r2, r5, r3
 800bb3c:	9b02      	ldr	r3, [sp, #8]
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	dd09      	ble.n	800bb56 <_dtoa_r+0xb56>
 800bb42:	ee18 1a10 	vmov	r1, s16
 800bb46:	2300      	movs	r3, #0
 800bb48:	220a      	movs	r2, #10
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f000 f8c2 	bl	800bcd4 <__multadd>
 800bb50:	ee08 0a10 	vmov	s16, r0
 800bb54:	e7e7      	b.n	800bb26 <_dtoa_r+0xb26>
 800bb56:	9b02      	ldr	r3, [sp, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bfc8      	it	gt
 800bb5c:	461d      	movgt	r5, r3
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	bfd8      	it	le
 800bb62:	2501      	movle	r5, #1
 800bb64:	441d      	add	r5, r3
 800bb66:	f04f 0800 	mov.w	r8, #0
 800bb6a:	ee18 1a10 	vmov	r1, s16
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4620      	mov	r0, r4
 800bb72:	f000 fa5f 	bl	800c034 <__lshift>
 800bb76:	4631      	mov	r1, r6
 800bb78:	ee08 0a10 	vmov	s16, r0
 800bb7c:	f000 faca 	bl	800c114 <__mcmp>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	dc91      	bgt.n	800baa8 <_dtoa_r+0xaa8>
 800bb84:	d102      	bne.n	800bb8c <_dtoa_r+0xb8c>
 800bb86:	f01a 0f01 	tst.w	sl, #1
 800bb8a:	d18d      	bne.n	800baa8 <_dtoa_r+0xaa8>
 800bb8c:	462b      	mov	r3, r5
 800bb8e:	461d      	mov	r5, r3
 800bb90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb94:	2a30      	cmp	r2, #48	; 0x30
 800bb96:	d0fa      	beq.n	800bb8e <_dtoa_r+0xb8e>
 800bb98:	e6d7      	b.n	800b94a <_dtoa_r+0x94a>
 800bb9a:	9a01      	ldr	r2, [sp, #4]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d184      	bne.n	800baaa <_dtoa_r+0xaaa>
 800bba0:	9b00      	ldr	r3, [sp, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	2331      	movs	r3, #49	; 0x31
 800bba8:	7013      	strb	r3, [r2, #0]
 800bbaa:	e6ce      	b.n	800b94a <_dtoa_r+0x94a>
 800bbac:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <_dtoa_r+0xbd4>)
 800bbae:	f7ff ba95 	b.w	800b0dc <_dtoa_r+0xdc>
 800bbb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f47f aa6e 	bne.w	800b096 <_dtoa_r+0x96>
 800bbba:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <_dtoa_r+0xbd8>)
 800bbbc:	f7ff ba8e 	b.w	800b0dc <_dtoa_r+0xdc>
 800bbc0:	9b02      	ldr	r3, [sp, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	dcae      	bgt.n	800bb24 <_dtoa_r+0xb24>
 800bbc6:	9b06      	ldr	r3, [sp, #24]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	f73f aea8 	bgt.w	800b91e <_dtoa_r+0x91e>
 800bbce:	e7a9      	b.n	800bb24 <_dtoa_r+0xb24>
 800bbd0:	0800ea67 	.word	0x0800ea67
 800bbd4:	0800e9c4 	.word	0x0800e9c4
 800bbd8:	0800e9e8 	.word	0x0800e9e8

0800bbdc <_localeconv_r>:
 800bbdc:	4800      	ldr	r0, [pc, #0]	; (800bbe0 <_localeconv_r+0x4>)
 800bbde:	4770      	bx	lr
 800bbe0:	200001dc 	.word	0x200001dc

0800bbe4 <malloc>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <malloc+0xc>)
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	f000 bc17 	b.w	800c41c <_malloc_r>
 800bbee:	bf00      	nop
 800bbf0:	20000088 	.word	0x20000088

0800bbf4 <memcpy>:
 800bbf4:	440a      	add	r2, r1
 800bbf6:	4291      	cmp	r1, r2
 800bbf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbfc:	d100      	bne.n	800bc00 <memcpy+0xc>
 800bbfe:	4770      	bx	lr
 800bc00:	b510      	push	{r4, lr}
 800bc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc0a:	4291      	cmp	r1, r2
 800bc0c:	d1f9      	bne.n	800bc02 <memcpy+0xe>
 800bc0e:	bd10      	pop	{r4, pc}

0800bc10 <_Balloc>:
 800bc10:	b570      	push	{r4, r5, r6, lr}
 800bc12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	b976      	cbnz	r6, 800bc38 <_Balloc+0x28>
 800bc1a:	2010      	movs	r0, #16
 800bc1c:	f7ff ffe2 	bl	800bbe4 <malloc>
 800bc20:	4602      	mov	r2, r0
 800bc22:	6260      	str	r0, [r4, #36]	; 0x24
 800bc24:	b920      	cbnz	r0, 800bc30 <_Balloc+0x20>
 800bc26:	4b18      	ldr	r3, [pc, #96]	; (800bc88 <_Balloc+0x78>)
 800bc28:	4818      	ldr	r0, [pc, #96]	; (800bc8c <_Balloc+0x7c>)
 800bc2a:	2166      	movs	r1, #102	; 0x66
 800bc2c:	f000 fdd6 	bl	800c7dc <__assert_func>
 800bc30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc34:	6006      	str	r6, [r0, #0]
 800bc36:	60c6      	str	r6, [r0, #12]
 800bc38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc3a:	68f3      	ldr	r3, [r6, #12]
 800bc3c:	b183      	cbz	r3, 800bc60 <_Balloc+0x50>
 800bc3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc46:	b9b8      	cbnz	r0, 800bc78 <_Balloc+0x68>
 800bc48:	2101      	movs	r1, #1
 800bc4a:	fa01 f605 	lsl.w	r6, r1, r5
 800bc4e:	1d72      	adds	r2, r6, #5
 800bc50:	0092      	lsls	r2, r2, #2
 800bc52:	4620      	mov	r0, r4
 800bc54:	f000 fb60 	bl	800c318 <_calloc_r>
 800bc58:	b160      	cbz	r0, 800bc74 <_Balloc+0x64>
 800bc5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc5e:	e00e      	b.n	800bc7e <_Balloc+0x6e>
 800bc60:	2221      	movs	r2, #33	; 0x21
 800bc62:	2104      	movs	r1, #4
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 fb57 	bl	800c318 <_calloc_r>
 800bc6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc6c:	60f0      	str	r0, [r6, #12]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1e4      	bne.n	800bc3e <_Balloc+0x2e>
 800bc74:	2000      	movs	r0, #0
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	6802      	ldr	r2, [r0, #0]
 800bc7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc84:	e7f7      	b.n	800bc76 <_Balloc+0x66>
 800bc86:	bf00      	nop
 800bc88:	0800e9f5 	.word	0x0800e9f5
 800bc8c:	0800ea78 	.word	0x0800ea78

0800bc90 <_Bfree>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc94:	4605      	mov	r5, r0
 800bc96:	460c      	mov	r4, r1
 800bc98:	b976      	cbnz	r6, 800bcb8 <_Bfree+0x28>
 800bc9a:	2010      	movs	r0, #16
 800bc9c:	f7ff ffa2 	bl	800bbe4 <malloc>
 800bca0:	4602      	mov	r2, r0
 800bca2:	6268      	str	r0, [r5, #36]	; 0x24
 800bca4:	b920      	cbnz	r0, 800bcb0 <_Bfree+0x20>
 800bca6:	4b09      	ldr	r3, [pc, #36]	; (800bccc <_Bfree+0x3c>)
 800bca8:	4809      	ldr	r0, [pc, #36]	; (800bcd0 <_Bfree+0x40>)
 800bcaa:	218a      	movs	r1, #138	; 0x8a
 800bcac:	f000 fd96 	bl	800c7dc <__assert_func>
 800bcb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcb4:	6006      	str	r6, [r0, #0]
 800bcb6:	60c6      	str	r6, [r0, #12]
 800bcb8:	b13c      	cbz	r4, 800bcca <_Bfree+0x3a>
 800bcba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcbc:	6862      	ldr	r2, [r4, #4]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcc4:	6021      	str	r1, [r4, #0]
 800bcc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcca:	bd70      	pop	{r4, r5, r6, pc}
 800bccc:	0800e9f5 	.word	0x0800e9f5
 800bcd0:	0800ea78 	.word	0x0800ea78

0800bcd4 <__multadd>:
 800bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	690d      	ldr	r5, [r1, #16]
 800bcda:	4607      	mov	r7, r0
 800bcdc:	460c      	mov	r4, r1
 800bcde:	461e      	mov	r6, r3
 800bce0:	f101 0c14 	add.w	ip, r1, #20
 800bce4:	2000      	movs	r0, #0
 800bce6:	f8dc 3000 	ldr.w	r3, [ip]
 800bcea:	b299      	uxth	r1, r3
 800bcec:	fb02 6101 	mla	r1, r2, r1, r6
 800bcf0:	0c1e      	lsrs	r6, r3, #16
 800bcf2:	0c0b      	lsrs	r3, r1, #16
 800bcf4:	fb02 3306 	mla	r3, r2, r6, r3
 800bcf8:	b289      	uxth	r1, r1
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd00:	4285      	cmp	r5, r0
 800bd02:	f84c 1b04 	str.w	r1, [ip], #4
 800bd06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd0a:	dcec      	bgt.n	800bce6 <__multadd+0x12>
 800bd0c:	b30e      	cbz	r6, 800bd52 <__multadd+0x7e>
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	42ab      	cmp	r3, r5
 800bd12:	dc19      	bgt.n	800bd48 <__multadd+0x74>
 800bd14:	6861      	ldr	r1, [r4, #4]
 800bd16:	4638      	mov	r0, r7
 800bd18:	3101      	adds	r1, #1
 800bd1a:	f7ff ff79 	bl	800bc10 <_Balloc>
 800bd1e:	4680      	mov	r8, r0
 800bd20:	b928      	cbnz	r0, 800bd2e <__multadd+0x5a>
 800bd22:	4602      	mov	r2, r0
 800bd24:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <__multadd+0x84>)
 800bd26:	480d      	ldr	r0, [pc, #52]	; (800bd5c <__multadd+0x88>)
 800bd28:	21b5      	movs	r1, #181	; 0xb5
 800bd2a:	f000 fd57 	bl	800c7dc <__assert_func>
 800bd2e:	6922      	ldr	r2, [r4, #16]
 800bd30:	3202      	adds	r2, #2
 800bd32:	f104 010c 	add.w	r1, r4, #12
 800bd36:	0092      	lsls	r2, r2, #2
 800bd38:	300c      	adds	r0, #12
 800bd3a:	f7ff ff5b 	bl	800bbf4 <memcpy>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4638      	mov	r0, r7
 800bd42:	f7ff ffa5 	bl	800bc90 <_Bfree>
 800bd46:	4644      	mov	r4, r8
 800bd48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd4c:	3501      	adds	r5, #1
 800bd4e:	615e      	str	r6, [r3, #20]
 800bd50:	6125      	str	r5, [r4, #16]
 800bd52:	4620      	mov	r0, r4
 800bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd58:	0800ea67 	.word	0x0800ea67
 800bd5c:	0800ea78 	.word	0x0800ea78

0800bd60 <__hi0bits>:
 800bd60:	0c03      	lsrs	r3, r0, #16
 800bd62:	041b      	lsls	r3, r3, #16
 800bd64:	b9d3      	cbnz	r3, 800bd9c <__hi0bits+0x3c>
 800bd66:	0400      	lsls	r0, r0, #16
 800bd68:	2310      	movs	r3, #16
 800bd6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd6e:	bf04      	itt	eq
 800bd70:	0200      	lsleq	r0, r0, #8
 800bd72:	3308      	addeq	r3, #8
 800bd74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd78:	bf04      	itt	eq
 800bd7a:	0100      	lsleq	r0, r0, #4
 800bd7c:	3304      	addeq	r3, #4
 800bd7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd82:	bf04      	itt	eq
 800bd84:	0080      	lsleq	r0, r0, #2
 800bd86:	3302      	addeq	r3, #2
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	db05      	blt.n	800bd98 <__hi0bits+0x38>
 800bd8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd90:	f103 0301 	add.w	r3, r3, #1
 800bd94:	bf08      	it	eq
 800bd96:	2320      	moveq	r3, #32
 800bd98:	4618      	mov	r0, r3
 800bd9a:	4770      	bx	lr
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	e7e4      	b.n	800bd6a <__hi0bits+0xa>

0800bda0 <__lo0bits>:
 800bda0:	6803      	ldr	r3, [r0, #0]
 800bda2:	f013 0207 	ands.w	r2, r3, #7
 800bda6:	4601      	mov	r1, r0
 800bda8:	d00b      	beq.n	800bdc2 <__lo0bits+0x22>
 800bdaa:	07da      	lsls	r2, r3, #31
 800bdac:	d423      	bmi.n	800bdf6 <__lo0bits+0x56>
 800bdae:	0798      	lsls	r0, r3, #30
 800bdb0:	bf49      	itett	mi
 800bdb2:	085b      	lsrmi	r3, r3, #1
 800bdb4:	089b      	lsrpl	r3, r3, #2
 800bdb6:	2001      	movmi	r0, #1
 800bdb8:	600b      	strmi	r3, [r1, #0]
 800bdba:	bf5c      	itt	pl
 800bdbc:	600b      	strpl	r3, [r1, #0]
 800bdbe:	2002      	movpl	r0, #2
 800bdc0:	4770      	bx	lr
 800bdc2:	b298      	uxth	r0, r3
 800bdc4:	b9a8      	cbnz	r0, 800bdf2 <__lo0bits+0x52>
 800bdc6:	0c1b      	lsrs	r3, r3, #16
 800bdc8:	2010      	movs	r0, #16
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	b90a      	cbnz	r2, 800bdd2 <__lo0bits+0x32>
 800bdce:	3008      	adds	r0, #8
 800bdd0:	0a1b      	lsrs	r3, r3, #8
 800bdd2:	071a      	lsls	r2, r3, #28
 800bdd4:	bf04      	itt	eq
 800bdd6:	091b      	lsreq	r3, r3, #4
 800bdd8:	3004      	addeq	r0, #4
 800bdda:	079a      	lsls	r2, r3, #30
 800bddc:	bf04      	itt	eq
 800bdde:	089b      	lsreq	r3, r3, #2
 800bde0:	3002      	addeq	r0, #2
 800bde2:	07da      	lsls	r2, r3, #31
 800bde4:	d403      	bmi.n	800bdee <__lo0bits+0x4e>
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	f100 0001 	add.w	r0, r0, #1
 800bdec:	d005      	beq.n	800bdfa <__lo0bits+0x5a>
 800bdee:	600b      	str	r3, [r1, #0]
 800bdf0:	4770      	bx	lr
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	e7e9      	b.n	800bdca <__lo0bits+0x2a>
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	4770      	bx	lr
 800bdfa:	2020      	movs	r0, #32
 800bdfc:	4770      	bx	lr
	...

0800be00 <__i2b>:
 800be00:	b510      	push	{r4, lr}
 800be02:	460c      	mov	r4, r1
 800be04:	2101      	movs	r1, #1
 800be06:	f7ff ff03 	bl	800bc10 <_Balloc>
 800be0a:	4602      	mov	r2, r0
 800be0c:	b928      	cbnz	r0, 800be1a <__i2b+0x1a>
 800be0e:	4b05      	ldr	r3, [pc, #20]	; (800be24 <__i2b+0x24>)
 800be10:	4805      	ldr	r0, [pc, #20]	; (800be28 <__i2b+0x28>)
 800be12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be16:	f000 fce1 	bl	800c7dc <__assert_func>
 800be1a:	2301      	movs	r3, #1
 800be1c:	6144      	str	r4, [r0, #20]
 800be1e:	6103      	str	r3, [r0, #16]
 800be20:	bd10      	pop	{r4, pc}
 800be22:	bf00      	nop
 800be24:	0800ea67 	.word	0x0800ea67
 800be28:	0800ea78 	.word	0x0800ea78

0800be2c <__multiply>:
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	4691      	mov	r9, r2
 800be32:	690a      	ldr	r2, [r1, #16]
 800be34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be38:	429a      	cmp	r2, r3
 800be3a:	bfb8      	it	lt
 800be3c:	460b      	movlt	r3, r1
 800be3e:	460c      	mov	r4, r1
 800be40:	bfbc      	itt	lt
 800be42:	464c      	movlt	r4, r9
 800be44:	4699      	movlt	r9, r3
 800be46:	6927      	ldr	r7, [r4, #16]
 800be48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be4c:	68a3      	ldr	r3, [r4, #8]
 800be4e:	6861      	ldr	r1, [r4, #4]
 800be50:	eb07 060a 	add.w	r6, r7, sl
 800be54:	42b3      	cmp	r3, r6
 800be56:	b085      	sub	sp, #20
 800be58:	bfb8      	it	lt
 800be5a:	3101      	addlt	r1, #1
 800be5c:	f7ff fed8 	bl	800bc10 <_Balloc>
 800be60:	b930      	cbnz	r0, 800be70 <__multiply+0x44>
 800be62:	4602      	mov	r2, r0
 800be64:	4b44      	ldr	r3, [pc, #272]	; (800bf78 <__multiply+0x14c>)
 800be66:	4845      	ldr	r0, [pc, #276]	; (800bf7c <__multiply+0x150>)
 800be68:	f240 115d 	movw	r1, #349	; 0x15d
 800be6c:	f000 fcb6 	bl	800c7dc <__assert_func>
 800be70:	f100 0514 	add.w	r5, r0, #20
 800be74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be78:	462b      	mov	r3, r5
 800be7a:	2200      	movs	r2, #0
 800be7c:	4543      	cmp	r3, r8
 800be7e:	d321      	bcc.n	800bec4 <__multiply+0x98>
 800be80:	f104 0314 	add.w	r3, r4, #20
 800be84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be88:	f109 0314 	add.w	r3, r9, #20
 800be8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be90:	9202      	str	r2, [sp, #8]
 800be92:	1b3a      	subs	r2, r7, r4
 800be94:	3a15      	subs	r2, #21
 800be96:	f022 0203 	bic.w	r2, r2, #3
 800be9a:	3204      	adds	r2, #4
 800be9c:	f104 0115 	add.w	r1, r4, #21
 800bea0:	428f      	cmp	r7, r1
 800bea2:	bf38      	it	cc
 800bea4:	2204      	movcc	r2, #4
 800bea6:	9201      	str	r2, [sp, #4]
 800bea8:	9a02      	ldr	r2, [sp, #8]
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	429a      	cmp	r2, r3
 800beae:	d80c      	bhi.n	800beca <__multiply+0x9e>
 800beb0:	2e00      	cmp	r6, #0
 800beb2:	dd03      	ble.n	800bebc <__multiply+0x90>
 800beb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d05a      	beq.n	800bf72 <__multiply+0x146>
 800bebc:	6106      	str	r6, [r0, #16]
 800bebe:	b005      	add	sp, #20
 800bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec4:	f843 2b04 	str.w	r2, [r3], #4
 800bec8:	e7d8      	b.n	800be7c <__multiply+0x50>
 800beca:	f8b3 a000 	ldrh.w	sl, [r3]
 800bece:	f1ba 0f00 	cmp.w	sl, #0
 800bed2:	d024      	beq.n	800bf1e <__multiply+0xf2>
 800bed4:	f104 0e14 	add.w	lr, r4, #20
 800bed8:	46a9      	mov	r9, r5
 800beda:	f04f 0c00 	mov.w	ip, #0
 800bede:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bee2:	f8d9 1000 	ldr.w	r1, [r9]
 800bee6:	fa1f fb82 	uxth.w	fp, r2
 800beea:	b289      	uxth	r1, r1
 800beec:	fb0a 110b 	mla	r1, sl, fp, r1
 800bef0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bef4:	f8d9 2000 	ldr.w	r2, [r9]
 800bef8:	4461      	add	r1, ip
 800befa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800befe:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf06:	b289      	uxth	r1, r1
 800bf08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf0c:	4577      	cmp	r7, lr
 800bf0e:	f849 1b04 	str.w	r1, [r9], #4
 800bf12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf16:	d8e2      	bhi.n	800bede <__multiply+0xb2>
 800bf18:	9a01      	ldr	r2, [sp, #4]
 800bf1a:	f845 c002 	str.w	ip, [r5, r2]
 800bf1e:	9a03      	ldr	r2, [sp, #12]
 800bf20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf24:	3304      	adds	r3, #4
 800bf26:	f1b9 0f00 	cmp.w	r9, #0
 800bf2a:	d020      	beq.n	800bf6e <__multiply+0x142>
 800bf2c:	6829      	ldr	r1, [r5, #0]
 800bf2e:	f104 0c14 	add.w	ip, r4, #20
 800bf32:	46ae      	mov	lr, r5
 800bf34:	f04f 0a00 	mov.w	sl, #0
 800bf38:	f8bc b000 	ldrh.w	fp, [ip]
 800bf3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf40:	fb09 220b 	mla	r2, r9, fp, r2
 800bf44:	4492      	add	sl, r2
 800bf46:	b289      	uxth	r1, r1
 800bf48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf4c:	f84e 1b04 	str.w	r1, [lr], #4
 800bf50:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf54:	f8be 1000 	ldrh.w	r1, [lr]
 800bf58:	0c12      	lsrs	r2, r2, #16
 800bf5a:	fb09 1102 	mla	r1, r9, r2, r1
 800bf5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bf62:	4567      	cmp	r7, ip
 800bf64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf68:	d8e6      	bhi.n	800bf38 <__multiply+0x10c>
 800bf6a:	9a01      	ldr	r2, [sp, #4]
 800bf6c:	50a9      	str	r1, [r5, r2]
 800bf6e:	3504      	adds	r5, #4
 800bf70:	e79a      	b.n	800bea8 <__multiply+0x7c>
 800bf72:	3e01      	subs	r6, #1
 800bf74:	e79c      	b.n	800beb0 <__multiply+0x84>
 800bf76:	bf00      	nop
 800bf78:	0800ea67 	.word	0x0800ea67
 800bf7c:	0800ea78 	.word	0x0800ea78

0800bf80 <__pow5mult>:
 800bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	4615      	mov	r5, r2
 800bf86:	f012 0203 	ands.w	r2, r2, #3
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	d007      	beq.n	800bfa0 <__pow5mult+0x20>
 800bf90:	4c25      	ldr	r4, [pc, #148]	; (800c028 <__pow5mult+0xa8>)
 800bf92:	3a01      	subs	r2, #1
 800bf94:	2300      	movs	r3, #0
 800bf96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf9a:	f7ff fe9b 	bl	800bcd4 <__multadd>
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	10ad      	asrs	r5, r5, #2
 800bfa2:	d03d      	beq.n	800c020 <__pow5mult+0xa0>
 800bfa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bfa6:	b97c      	cbnz	r4, 800bfc8 <__pow5mult+0x48>
 800bfa8:	2010      	movs	r0, #16
 800bfaa:	f7ff fe1b 	bl	800bbe4 <malloc>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	6270      	str	r0, [r6, #36]	; 0x24
 800bfb2:	b928      	cbnz	r0, 800bfc0 <__pow5mult+0x40>
 800bfb4:	4b1d      	ldr	r3, [pc, #116]	; (800c02c <__pow5mult+0xac>)
 800bfb6:	481e      	ldr	r0, [pc, #120]	; (800c030 <__pow5mult+0xb0>)
 800bfb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfbc:	f000 fc0e 	bl	800c7dc <__assert_func>
 800bfc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfc4:	6004      	str	r4, [r0, #0]
 800bfc6:	60c4      	str	r4, [r0, #12]
 800bfc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bfcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfd0:	b94c      	cbnz	r4, 800bfe6 <__pow5mult+0x66>
 800bfd2:	f240 2171 	movw	r1, #625	; 0x271
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff ff12 	bl	800be00 <__i2b>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	f04f 0900 	mov.w	r9, #0
 800bfea:	07eb      	lsls	r3, r5, #31
 800bfec:	d50a      	bpl.n	800c004 <__pow5mult+0x84>
 800bfee:	4639      	mov	r1, r7
 800bff0:	4622      	mov	r2, r4
 800bff2:	4630      	mov	r0, r6
 800bff4:	f7ff ff1a 	bl	800be2c <__multiply>
 800bff8:	4639      	mov	r1, r7
 800bffa:	4680      	mov	r8, r0
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7ff fe47 	bl	800bc90 <_Bfree>
 800c002:	4647      	mov	r7, r8
 800c004:	106d      	asrs	r5, r5, #1
 800c006:	d00b      	beq.n	800c020 <__pow5mult+0xa0>
 800c008:	6820      	ldr	r0, [r4, #0]
 800c00a:	b938      	cbnz	r0, 800c01c <__pow5mult+0x9c>
 800c00c:	4622      	mov	r2, r4
 800c00e:	4621      	mov	r1, r4
 800c010:	4630      	mov	r0, r6
 800c012:	f7ff ff0b 	bl	800be2c <__multiply>
 800c016:	6020      	str	r0, [r4, #0]
 800c018:	f8c0 9000 	str.w	r9, [r0]
 800c01c:	4604      	mov	r4, r0
 800c01e:	e7e4      	b.n	800bfea <__pow5mult+0x6a>
 800c020:	4638      	mov	r0, r7
 800c022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c026:	bf00      	nop
 800c028:	0800ebc8 	.word	0x0800ebc8
 800c02c:	0800e9f5 	.word	0x0800e9f5
 800c030:	0800ea78 	.word	0x0800ea78

0800c034 <__lshift>:
 800c034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c038:	460c      	mov	r4, r1
 800c03a:	6849      	ldr	r1, [r1, #4]
 800c03c:	6923      	ldr	r3, [r4, #16]
 800c03e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c042:	68a3      	ldr	r3, [r4, #8]
 800c044:	4607      	mov	r7, r0
 800c046:	4691      	mov	r9, r2
 800c048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c04c:	f108 0601 	add.w	r6, r8, #1
 800c050:	42b3      	cmp	r3, r6
 800c052:	db0b      	blt.n	800c06c <__lshift+0x38>
 800c054:	4638      	mov	r0, r7
 800c056:	f7ff fddb 	bl	800bc10 <_Balloc>
 800c05a:	4605      	mov	r5, r0
 800c05c:	b948      	cbnz	r0, 800c072 <__lshift+0x3e>
 800c05e:	4602      	mov	r2, r0
 800c060:	4b2a      	ldr	r3, [pc, #168]	; (800c10c <__lshift+0xd8>)
 800c062:	482b      	ldr	r0, [pc, #172]	; (800c110 <__lshift+0xdc>)
 800c064:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c068:	f000 fbb8 	bl	800c7dc <__assert_func>
 800c06c:	3101      	adds	r1, #1
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	e7ee      	b.n	800c050 <__lshift+0x1c>
 800c072:	2300      	movs	r3, #0
 800c074:	f100 0114 	add.w	r1, r0, #20
 800c078:	f100 0210 	add.w	r2, r0, #16
 800c07c:	4618      	mov	r0, r3
 800c07e:	4553      	cmp	r3, sl
 800c080:	db37      	blt.n	800c0f2 <__lshift+0xbe>
 800c082:	6920      	ldr	r0, [r4, #16]
 800c084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c088:	f104 0314 	add.w	r3, r4, #20
 800c08c:	f019 091f 	ands.w	r9, r9, #31
 800c090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c094:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c098:	d02f      	beq.n	800c0fa <__lshift+0xc6>
 800c09a:	f1c9 0e20 	rsb	lr, r9, #32
 800c09e:	468a      	mov	sl, r1
 800c0a0:	f04f 0c00 	mov.w	ip, #0
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	fa02 f209 	lsl.w	r2, r2, r9
 800c0aa:	ea42 020c 	orr.w	r2, r2, ip
 800c0ae:	f84a 2b04 	str.w	r2, [sl], #4
 800c0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b6:	4298      	cmp	r0, r3
 800c0b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c0bc:	d8f2      	bhi.n	800c0a4 <__lshift+0x70>
 800c0be:	1b03      	subs	r3, r0, r4
 800c0c0:	3b15      	subs	r3, #21
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	f104 0215 	add.w	r2, r4, #21
 800c0cc:	4290      	cmp	r0, r2
 800c0ce:	bf38      	it	cc
 800c0d0:	2304      	movcc	r3, #4
 800c0d2:	f841 c003 	str.w	ip, [r1, r3]
 800c0d6:	f1bc 0f00 	cmp.w	ip, #0
 800c0da:	d001      	beq.n	800c0e0 <__lshift+0xac>
 800c0dc:	f108 0602 	add.w	r6, r8, #2
 800c0e0:	3e01      	subs	r6, #1
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	612e      	str	r6, [r5, #16]
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	f7ff fdd2 	bl	800bc90 <_Bfree>
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	e7c1      	b.n	800c07e <__lshift+0x4a>
 800c0fa:	3904      	subs	r1, #4
 800c0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c100:	f841 2f04 	str.w	r2, [r1, #4]!
 800c104:	4298      	cmp	r0, r3
 800c106:	d8f9      	bhi.n	800c0fc <__lshift+0xc8>
 800c108:	e7ea      	b.n	800c0e0 <__lshift+0xac>
 800c10a:	bf00      	nop
 800c10c:	0800ea67 	.word	0x0800ea67
 800c110:	0800ea78 	.word	0x0800ea78

0800c114 <__mcmp>:
 800c114:	b530      	push	{r4, r5, lr}
 800c116:	6902      	ldr	r2, [r0, #16]
 800c118:	690c      	ldr	r4, [r1, #16]
 800c11a:	1b12      	subs	r2, r2, r4
 800c11c:	d10e      	bne.n	800c13c <__mcmp+0x28>
 800c11e:	f100 0314 	add.w	r3, r0, #20
 800c122:	3114      	adds	r1, #20
 800c124:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c128:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c12c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c130:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c134:	42a5      	cmp	r5, r4
 800c136:	d003      	beq.n	800c140 <__mcmp+0x2c>
 800c138:	d305      	bcc.n	800c146 <__mcmp+0x32>
 800c13a:	2201      	movs	r2, #1
 800c13c:	4610      	mov	r0, r2
 800c13e:	bd30      	pop	{r4, r5, pc}
 800c140:	4283      	cmp	r3, r0
 800c142:	d3f3      	bcc.n	800c12c <__mcmp+0x18>
 800c144:	e7fa      	b.n	800c13c <__mcmp+0x28>
 800c146:	f04f 32ff 	mov.w	r2, #4294967295
 800c14a:	e7f7      	b.n	800c13c <__mcmp+0x28>

0800c14c <__mdiff>:
 800c14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c150:	460c      	mov	r4, r1
 800c152:	4606      	mov	r6, r0
 800c154:	4611      	mov	r1, r2
 800c156:	4620      	mov	r0, r4
 800c158:	4690      	mov	r8, r2
 800c15a:	f7ff ffdb 	bl	800c114 <__mcmp>
 800c15e:	1e05      	subs	r5, r0, #0
 800c160:	d110      	bne.n	800c184 <__mdiff+0x38>
 800c162:	4629      	mov	r1, r5
 800c164:	4630      	mov	r0, r6
 800c166:	f7ff fd53 	bl	800bc10 <_Balloc>
 800c16a:	b930      	cbnz	r0, 800c17a <__mdiff+0x2e>
 800c16c:	4b3a      	ldr	r3, [pc, #232]	; (800c258 <__mdiff+0x10c>)
 800c16e:	4602      	mov	r2, r0
 800c170:	f240 2132 	movw	r1, #562	; 0x232
 800c174:	4839      	ldr	r0, [pc, #228]	; (800c25c <__mdiff+0x110>)
 800c176:	f000 fb31 	bl	800c7dc <__assert_func>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c184:	bfa4      	itt	ge
 800c186:	4643      	movge	r3, r8
 800c188:	46a0      	movge	r8, r4
 800c18a:	4630      	mov	r0, r6
 800c18c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c190:	bfa6      	itte	ge
 800c192:	461c      	movge	r4, r3
 800c194:	2500      	movge	r5, #0
 800c196:	2501      	movlt	r5, #1
 800c198:	f7ff fd3a 	bl	800bc10 <_Balloc>
 800c19c:	b920      	cbnz	r0, 800c1a8 <__mdiff+0x5c>
 800c19e:	4b2e      	ldr	r3, [pc, #184]	; (800c258 <__mdiff+0x10c>)
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1a6:	e7e5      	b.n	800c174 <__mdiff+0x28>
 800c1a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1ac:	6926      	ldr	r6, [r4, #16]
 800c1ae:	60c5      	str	r5, [r0, #12]
 800c1b0:	f104 0914 	add.w	r9, r4, #20
 800c1b4:	f108 0514 	add.w	r5, r8, #20
 800c1b8:	f100 0e14 	add.w	lr, r0, #20
 800c1bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c1c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1c4:	f108 0210 	add.w	r2, r8, #16
 800c1c8:	46f2      	mov	sl, lr
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1d4:	fa1f f883 	uxth.w	r8, r3
 800c1d8:	fa11 f18b 	uxtah	r1, r1, fp
 800c1dc:	0c1b      	lsrs	r3, r3, #16
 800c1de:	eba1 0808 	sub.w	r8, r1, r8
 800c1e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c1ea:	fa1f f888 	uxth.w	r8, r8
 800c1ee:	1419      	asrs	r1, r3, #16
 800c1f0:	454e      	cmp	r6, r9
 800c1f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c1f6:	f84a 3b04 	str.w	r3, [sl], #4
 800c1fa:	d8e7      	bhi.n	800c1cc <__mdiff+0x80>
 800c1fc:	1b33      	subs	r3, r6, r4
 800c1fe:	3b15      	subs	r3, #21
 800c200:	f023 0303 	bic.w	r3, r3, #3
 800c204:	3304      	adds	r3, #4
 800c206:	3415      	adds	r4, #21
 800c208:	42a6      	cmp	r6, r4
 800c20a:	bf38      	it	cc
 800c20c:	2304      	movcc	r3, #4
 800c20e:	441d      	add	r5, r3
 800c210:	4473      	add	r3, lr
 800c212:	469e      	mov	lr, r3
 800c214:	462e      	mov	r6, r5
 800c216:	4566      	cmp	r6, ip
 800c218:	d30e      	bcc.n	800c238 <__mdiff+0xec>
 800c21a:	f10c 0203 	add.w	r2, ip, #3
 800c21e:	1b52      	subs	r2, r2, r5
 800c220:	f022 0203 	bic.w	r2, r2, #3
 800c224:	3d03      	subs	r5, #3
 800c226:	45ac      	cmp	ip, r5
 800c228:	bf38      	it	cc
 800c22a:	2200      	movcc	r2, #0
 800c22c:	441a      	add	r2, r3
 800c22e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c232:	b17b      	cbz	r3, 800c254 <__mdiff+0x108>
 800c234:	6107      	str	r7, [r0, #16]
 800c236:	e7a3      	b.n	800c180 <__mdiff+0x34>
 800c238:	f856 8b04 	ldr.w	r8, [r6], #4
 800c23c:	fa11 f288 	uxtah	r2, r1, r8
 800c240:	1414      	asrs	r4, r2, #16
 800c242:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c246:	b292      	uxth	r2, r2
 800c248:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c24c:	f84e 2b04 	str.w	r2, [lr], #4
 800c250:	1421      	asrs	r1, r4, #16
 800c252:	e7e0      	b.n	800c216 <__mdiff+0xca>
 800c254:	3f01      	subs	r7, #1
 800c256:	e7ea      	b.n	800c22e <__mdiff+0xe2>
 800c258:	0800ea67 	.word	0x0800ea67
 800c25c:	0800ea78 	.word	0x0800ea78

0800c260 <__d2b>:
 800c260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c264:	4689      	mov	r9, r1
 800c266:	2101      	movs	r1, #1
 800c268:	ec57 6b10 	vmov	r6, r7, d0
 800c26c:	4690      	mov	r8, r2
 800c26e:	f7ff fccf 	bl	800bc10 <_Balloc>
 800c272:	4604      	mov	r4, r0
 800c274:	b930      	cbnz	r0, 800c284 <__d2b+0x24>
 800c276:	4602      	mov	r2, r0
 800c278:	4b25      	ldr	r3, [pc, #148]	; (800c310 <__d2b+0xb0>)
 800c27a:	4826      	ldr	r0, [pc, #152]	; (800c314 <__d2b+0xb4>)
 800c27c:	f240 310a 	movw	r1, #778	; 0x30a
 800c280:	f000 faac 	bl	800c7dc <__assert_func>
 800c284:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c28c:	bb35      	cbnz	r5, 800c2dc <__d2b+0x7c>
 800c28e:	2e00      	cmp	r6, #0
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	d028      	beq.n	800c2e6 <__d2b+0x86>
 800c294:	4668      	mov	r0, sp
 800c296:	9600      	str	r6, [sp, #0]
 800c298:	f7ff fd82 	bl	800bda0 <__lo0bits>
 800c29c:	9900      	ldr	r1, [sp, #0]
 800c29e:	b300      	cbz	r0, 800c2e2 <__d2b+0x82>
 800c2a0:	9a01      	ldr	r2, [sp, #4]
 800c2a2:	f1c0 0320 	rsb	r3, r0, #32
 800c2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2aa:	430b      	orrs	r3, r1
 800c2ac:	40c2      	lsrs	r2, r0
 800c2ae:	6163      	str	r3, [r4, #20]
 800c2b0:	9201      	str	r2, [sp, #4]
 800c2b2:	9b01      	ldr	r3, [sp, #4]
 800c2b4:	61a3      	str	r3, [r4, #24]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	bf14      	ite	ne
 800c2ba:	2202      	movne	r2, #2
 800c2bc:	2201      	moveq	r2, #1
 800c2be:	6122      	str	r2, [r4, #16]
 800c2c0:	b1d5      	cbz	r5, 800c2f8 <__d2b+0x98>
 800c2c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2c6:	4405      	add	r5, r0
 800c2c8:	f8c9 5000 	str.w	r5, [r9]
 800c2cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2d0:	f8c8 0000 	str.w	r0, [r8]
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	b003      	add	sp, #12
 800c2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2e0:	e7d5      	b.n	800c28e <__d2b+0x2e>
 800c2e2:	6161      	str	r1, [r4, #20]
 800c2e4:	e7e5      	b.n	800c2b2 <__d2b+0x52>
 800c2e6:	a801      	add	r0, sp, #4
 800c2e8:	f7ff fd5a 	bl	800bda0 <__lo0bits>
 800c2ec:	9b01      	ldr	r3, [sp, #4]
 800c2ee:	6163      	str	r3, [r4, #20]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	6122      	str	r2, [r4, #16]
 800c2f4:	3020      	adds	r0, #32
 800c2f6:	e7e3      	b.n	800c2c0 <__d2b+0x60>
 800c2f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c300:	f8c9 0000 	str.w	r0, [r9]
 800c304:	6918      	ldr	r0, [r3, #16]
 800c306:	f7ff fd2b 	bl	800bd60 <__hi0bits>
 800c30a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c30e:	e7df      	b.n	800c2d0 <__d2b+0x70>
 800c310:	0800ea67 	.word	0x0800ea67
 800c314:	0800ea78 	.word	0x0800ea78

0800c318 <_calloc_r>:
 800c318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c31a:	fba1 2402 	umull	r2, r4, r1, r2
 800c31e:	b94c      	cbnz	r4, 800c334 <_calloc_r+0x1c>
 800c320:	4611      	mov	r1, r2
 800c322:	9201      	str	r2, [sp, #4]
 800c324:	f000 f87a 	bl	800c41c <_malloc_r>
 800c328:	9a01      	ldr	r2, [sp, #4]
 800c32a:	4605      	mov	r5, r0
 800c32c:	b930      	cbnz	r0, 800c33c <_calloc_r+0x24>
 800c32e:	4628      	mov	r0, r5
 800c330:	b003      	add	sp, #12
 800c332:	bd30      	pop	{r4, r5, pc}
 800c334:	220c      	movs	r2, #12
 800c336:	6002      	str	r2, [r0, #0]
 800c338:	2500      	movs	r5, #0
 800c33a:	e7f8      	b.n	800c32e <_calloc_r+0x16>
 800c33c:	4621      	mov	r1, r4
 800c33e:	f7fe f93f 	bl	800a5c0 <memset>
 800c342:	e7f4      	b.n	800c32e <_calloc_r+0x16>

0800c344 <_free_r>:
 800c344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c346:	2900      	cmp	r1, #0
 800c348:	d044      	beq.n	800c3d4 <_free_r+0x90>
 800c34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c34e:	9001      	str	r0, [sp, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f1a1 0404 	sub.w	r4, r1, #4
 800c356:	bfb8      	it	lt
 800c358:	18e4      	addlt	r4, r4, r3
 800c35a:	f000 fa9b 	bl	800c894 <__malloc_lock>
 800c35e:	4a1e      	ldr	r2, [pc, #120]	; (800c3d8 <_free_r+0x94>)
 800c360:	9801      	ldr	r0, [sp, #4]
 800c362:	6813      	ldr	r3, [r2, #0]
 800c364:	b933      	cbnz	r3, 800c374 <_free_r+0x30>
 800c366:	6063      	str	r3, [r4, #4]
 800c368:	6014      	str	r4, [r2, #0]
 800c36a:	b003      	add	sp, #12
 800c36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c370:	f000 ba96 	b.w	800c8a0 <__malloc_unlock>
 800c374:	42a3      	cmp	r3, r4
 800c376:	d908      	bls.n	800c38a <_free_r+0x46>
 800c378:	6825      	ldr	r5, [r4, #0]
 800c37a:	1961      	adds	r1, r4, r5
 800c37c:	428b      	cmp	r3, r1
 800c37e:	bf01      	itttt	eq
 800c380:	6819      	ldreq	r1, [r3, #0]
 800c382:	685b      	ldreq	r3, [r3, #4]
 800c384:	1949      	addeq	r1, r1, r5
 800c386:	6021      	streq	r1, [r4, #0]
 800c388:	e7ed      	b.n	800c366 <_free_r+0x22>
 800c38a:	461a      	mov	r2, r3
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	b10b      	cbz	r3, 800c394 <_free_r+0x50>
 800c390:	42a3      	cmp	r3, r4
 800c392:	d9fa      	bls.n	800c38a <_free_r+0x46>
 800c394:	6811      	ldr	r1, [r2, #0]
 800c396:	1855      	adds	r5, r2, r1
 800c398:	42a5      	cmp	r5, r4
 800c39a:	d10b      	bne.n	800c3b4 <_free_r+0x70>
 800c39c:	6824      	ldr	r4, [r4, #0]
 800c39e:	4421      	add	r1, r4
 800c3a0:	1854      	adds	r4, r2, r1
 800c3a2:	42a3      	cmp	r3, r4
 800c3a4:	6011      	str	r1, [r2, #0]
 800c3a6:	d1e0      	bne.n	800c36a <_free_r+0x26>
 800c3a8:	681c      	ldr	r4, [r3, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	6053      	str	r3, [r2, #4]
 800c3ae:	4421      	add	r1, r4
 800c3b0:	6011      	str	r1, [r2, #0]
 800c3b2:	e7da      	b.n	800c36a <_free_r+0x26>
 800c3b4:	d902      	bls.n	800c3bc <_free_r+0x78>
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	6003      	str	r3, [r0, #0]
 800c3ba:	e7d6      	b.n	800c36a <_free_r+0x26>
 800c3bc:	6825      	ldr	r5, [r4, #0]
 800c3be:	1961      	adds	r1, r4, r5
 800c3c0:	428b      	cmp	r3, r1
 800c3c2:	bf04      	itt	eq
 800c3c4:	6819      	ldreq	r1, [r3, #0]
 800c3c6:	685b      	ldreq	r3, [r3, #4]
 800c3c8:	6063      	str	r3, [r4, #4]
 800c3ca:	bf04      	itt	eq
 800c3cc:	1949      	addeq	r1, r1, r5
 800c3ce:	6021      	streq	r1, [r4, #0]
 800c3d0:	6054      	str	r4, [r2, #4]
 800c3d2:	e7ca      	b.n	800c36a <_free_r+0x26>
 800c3d4:	b003      	add	sp, #12
 800c3d6:	bd30      	pop	{r4, r5, pc}
 800c3d8:	20000b30 	.word	0x20000b30

0800c3dc <sbrk_aligned>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	4e0e      	ldr	r6, [pc, #56]	; (800c418 <sbrk_aligned+0x3c>)
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	6831      	ldr	r1, [r6, #0]
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	b911      	cbnz	r1, 800c3ee <sbrk_aligned+0x12>
 800c3e8:	f000 f9e8 	bl	800c7bc <_sbrk_r>
 800c3ec:	6030      	str	r0, [r6, #0]
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f000 f9e3 	bl	800c7bc <_sbrk_r>
 800c3f6:	1c43      	adds	r3, r0, #1
 800c3f8:	d00a      	beq.n	800c410 <sbrk_aligned+0x34>
 800c3fa:	1cc4      	adds	r4, r0, #3
 800c3fc:	f024 0403 	bic.w	r4, r4, #3
 800c400:	42a0      	cmp	r0, r4
 800c402:	d007      	beq.n	800c414 <sbrk_aligned+0x38>
 800c404:	1a21      	subs	r1, r4, r0
 800c406:	4628      	mov	r0, r5
 800c408:	f000 f9d8 	bl	800c7bc <_sbrk_r>
 800c40c:	3001      	adds	r0, #1
 800c40e:	d101      	bne.n	800c414 <sbrk_aligned+0x38>
 800c410:	f04f 34ff 	mov.w	r4, #4294967295
 800c414:	4620      	mov	r0, r4
 800c416:	bd70      	pop	{r4, r5, r6, pc}
 800c418:	20000b34 	.word	0x20000b34

0800c41c <_malloc_r>:
 800c41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c420:	1ccd      	adds	r5, r1, #3
 800c422:	f025 0503 	bic.w	r5, r5, #3
 800c426:	3508      	adds	r5, #8
 800c428:	2d0c      	cmp	r5, #12
 800c42a:	bf38      	it	cc
 800c42c:	250c      	movcc	r5, #12
 800c42e:	2d00      	cmp	r5, #0
 800c430:	4607      	mov	r7, r0
 800c432:	db01      	blt.n	800c438 <_malloc_r+0x1c>
 800c434:	42a9      	cmp	r1, r5
 800c436:	d905      	bls.n	800c444 <_malloc_r+0x28>
 800c438:	230c      	movs	r3, #12
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	2600      	movs	r6, #0
 800c43e:	4630      	mov	r0, r6
 800c440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c444:	4e2e      	ldr	r6, [pc, #184]	; (800c500 <_malloc_r+0xe4>)
 800c446:	f000 fa25 	bl	800c894 <__malloc_lock>
 800c44a:	6833      	ldr	r3, [r6, #0]
 800c44c:	461c      	mov	r4, r3
 800c44e:	bb34      	cbnz	r4, 800c49e <_malloc_r+0x82>
 800c450:	4629      	mov	r1, r5
 800c452:	4638      	mov	r0, r7
 800c454:	f7ff ffc2 	bl	800c3dc <sbrk_aligned>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	4604      	mov	r4, r0
 800c45c:	d14d      	bne.n	800c4fa <_malloc_r+0xde>
 800c45e:	6834      	ldr	r4, [r6, #0]
 800c460:	4626      	mov	r6, r4
 800c462:	2e00      	cmp	r6, #0
 800c464:	d140      	bne.n	800c4e8 <_malloc_r+0xcc>
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	4631      	mov	r1, r6
 800c46a:	4638      	mov	r0, r7
 800c46c:	eb04 0803 	add.w	r8, r4, r3
 800c470:	f000 f9a4 	bl	800c7bc <_sbrk_r>
 800c474:	4580      	cmp	r8, r0
 800c476:	d13a      	bne.n	800c4ee <_malloc_r+0xd2>
 800c478:	6821      	ldr	r1, [r4, #0]
 800c47a:	3503      	adds	r5, #3
 800c47c:	1a6d      	subs	r5, r5, r1
 800c47e:	f025 0503 	bic.w	r5, r5, #3
 800c482:	3508      	adds	r5, #8
 800c484:	2d0c      	cmp	r5, #12
 800c486:	bf38      	it	cc
 800c488:	250c      	movcc	r5, #12
 800c48a:	4629      	mov	r1, r5
 800c48c:	4638      	mov	r0, r7
 800c48e:	f7ff ffa5 	bl	800c3dc <sbrk_aligned>
 800c492:	3001      	adds	r0, #1
 800c494:	d02b      	beq.n	800c4ee <_malloc_r+0xd2>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	442b      	add	r3, r5
 800c49a:	6023      	str	r3, [r4, #0]
 800c49c:	e00e      	b.n	800c4bc <_malloc_r+0xa0>
 800c49e:	6822      	ldr	r2, [r4, #0]
 800c4a0:	1b52      	subs	r2, r2, r5
 800c4a2:	d41e      	bmi.n	800c4e2 <_malloc_r+0xc6>
 800c4a4:	2a0b      	cmp	r2, #11
 800c4a6:	d916      	bls.n	800c4d6 <_malloc_r+0xba>
 800c4a8:	1961      	adds	r1, r4, r5
 800c4aa:	42a3      	cmp	r3, r4
 800c4ac:	6025      	str	r5, [r4, #0]
 800c4ae:	bf18      	it	ne
 800c4b0:	6059      	strne	r1, [r3, #4]
 800c4b2:	6863      	ldr	r3, [r4, #4]
 800c4b4:	bf08      	it	eq
 800c4b6:	6031      	streq	r1, [r6, #0]
 800c4b8:	5162      	str	r2, [r4, r5]
 800c4ba:	604b      	str	r3, [r1, #4]
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f104 060b 	add.w	r6, r4, #11
 800c4c2:	f000 f9ed 	bl	800c8a0 <__malloc_unlock>
 800c4c6:	f026 0607 	bic.w	r6, r6, #7
 800c4ca:	1d23      	adds	r3, r4, #4
 800c4cc:	1af2      	subs	r2, r6, r3
 800c4ce:	d0b6      	beq.n	800c43e <_malloc_r+0x22>
 800c4d0:	1b9b      	subs	r3, r3, r6
 800c4d2:	50a3      	str	r3, [r4, r2]
 800c4d4:	e7b3      	b.n	800c43e <_malloc_r+0x22>
 800c4d6:	6862      	ldr	r2, [r4, #4]
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	bf0c      	ite	eq
 800c4dc:	6032      	streq	r2, [r6, #0]
 800c4de:	605a      	strne	r2, [r3, #4]
 800c4e0:	e7ec      	b.n	800c4bc <_malloc_r+0xa0>
 800c4e2:	4623      	mov	r3, r4
 800c4e4:	6864      	ldr	r4, [r4, #4]
 800c4e6:	e7b2      	b.n	800c44e <_malloc_r+0x32>
 800c4e8:	4634      	mov	r4, r6
 800c4ea:	6876      	ldr	r6, [r6, #4]
 800c4ec:	e7b9      	b.n	800c462 <_malloc_r+0x46>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	603b      	str	r3, [r7, #0]
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	f000 f9d4 	bl	800c8a0 <__malloc_unlock>
 800c4f8:	e7a1      	b.n	800c43e <_malloc_r+0x22>
 800c4fa:	6025      	str	r5, [r4, #0]
 800c4fc:	e7de      	b.n	800c4bc <_malloc_r+0xa0>
 800c4fe:	bf00      	nop
 800c500:	20000b30 	.word	0x20000b30

0800c504 <__ssputs_r>:
 800c504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c508:	688e      	ldr	r6, [r1, #8]
 800c50a:	429e      	cmp	r6, r3
 800c50c:	4682      	mov	sl, r0
 800c50e:	460c      	mov	r4, r1
 800c510:	4690      	mov	r8, r2
 800c512:	461f      	mov	r7, r3
 800c514:	d838      	bhi.n	800c588 <__ssputs_r+0x84>
 800c516:	898a      	ldrh	r2, [r1, #12]
 800c518:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c51c:	d032      	beq.n	800c584 <__ssputs_r+0x80>
 800c51e:	6825      	ldr	r5, [r4, #0]
 800c520:	6909      	ldr	r1, [r1, #16]
 800c522:	eba5 0901 	sub.w	r9, r5, r1
 800c526:	6965      	ldr	r5, [r4, #20]
 800c528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c52c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c530:	3301      	adds	r3, #1
 800c532:	444b      	add	r3, r9
 800c534:	106d      	asrs	r5, r5, #1
 800c536:	429d      	cmp	r5, r3
 800c538:	bf38      	it	cc
 800c53a:	461d      	movcc	r5, r3
 800c53c:	0553      	lsls	r3, r2, #21
 800c53e:	d531      	bpl.n	800c5a4 <__ssputs_r+0xa0>
 800c540:	4629      	mov	r1, r5
 800c542:	f7ff ff6b 	bl	800c41c <_malloc_r>
 800c546:	4606      	mov	r6, r0
 800c548:	b950      	cbnz	r0, 800c560 <__ssputs_r+0x5c>
 800c54a:	230c      	movs	r3, #12
 800c54c:	f8ca 3000 	str.w	r3, [sl]
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	f04f 30ff 	mov.w	r0, #4294967295
 800c55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c560:	6921      	ldr	r1, [r4, #16]
 800c562:	464a      	mov	r2, r9
 800c564:	f7ff fb46 	bl	800bbf4 <memcpy>
 800c568:	89a3      	ldrh	r3, [r4, #12]
 800c56a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c572:	81a3      	strh	r3, [r4, #12]
 800c574:	6126      	str	r6, [r4, #16]
 800c576:	6165      	str	r5, [r4, #20]
 800c578:	444e      	add	r6, r9
 800c57a:	eba5 0509 	sub.w	r5, r5, r9
 800c57e:	6026      	str	r6, [r4, #0]
 800c580:	60a5      	str	r5, [r4, #8]
 800c582:	463e      	mov	r6, r7
 800c584:	42be      	cmp	r6, r7
 800c586:	d900      	bls.n	800c58a <__ssputs_r+0x86>
 800c588:	463e      	mov	r6, r7
 800c58a:	6820      	ldr	r0, [r4, #0]
 800c58c:	4632      	mov	r2, r6
 800c58e:	4641      	mov	r1, r8
 800c590:	f000 f966 	bl	800c860 <memmove>
 800c594:	68a3      	ldr	r3, [r4, #8]
 800c596:	1b9b      	subs	r3, r3, r6
 800c598:	60a3      	str	r3, [r4, #8]
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	4433      	add	r3, r6
 800c59e:	6023      	str	r3, [r4, #0]
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e7db      	b.n	800c55c <__ssputs_r+0x58>
 800c5a4:	462a      	mov	r2, r5
 800c5a6:	f000 f981 	bl	800c8ac <_realloc_r>
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d1e1      	bne.n	800c574 <__ssputs_r+0x70>
 800c5b0:	6921      	ldr	r1, [r4, #16]
 800c5b2:	4650      	mov	r0, sl
 800c5b4:	f7ff fec6 	bl	800c344 <_free_r>
 800c5b8:	e7c7      	b.n	800c54a <__ssputs_r+0x46>
	...

0800c5bc <_svfiprintf_r>:
 800c5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c0:	4698      	mov	r8, r3
 800c5c2:	898b      	ldrh	r3, [r1, #12]
 800c5c4:	061b      	lsls	r3, r3, #24
 800c5c6:	b09d      	sub	sp, #116	; 0x74
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	d50e      	bpl.n	800c5ee <_svfiprintf_r+0x32>
 800c5d0:	690b      	ldr	r3, [r1, #16]
 800c5d2:	b963      	cbnz	r3, 800c5ee <_svfiprintf_r+0x32>
 800c5d4:	2140      	movs	r1, #64	; 0x40
 800c5d6:	f7ff ff21 	bl	800c41c <_malloc_r>
 800c5da:	6028      	str	r0, [r5, #0]
 800c5dc:	6128      	str	r0, [r5, #16]
 800c5de:	b920      	cbnz	r0, 800c5ea <_svfiprintf_r+0x2e>
 800c5e0:	230c      	movs	r3, #12
 800c5e2:	603b      	str	r3, [r7, #0]
 800c5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e8:	e0d1      	b.n	800c78e <_svfiprintf_r+0x1d2>
 800c5ea:	2340      	movs	r3, #64	; 0x40
 800c5ec:	616b      	str	r3, [r5, #20]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5fc:	2330      	movs	r3, #48	; 0x30
 800c5fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7a8 <_svfiprintf_r+0x1ec>
 800c602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c606:	f04f 0901 	mov.w	r9, #1
 800c60a:	4623      	mov	r3, r4
 800c60c:	469a      	mov	sl, r3
 800c60e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c612:	b10a      	cbz	r2, 800c618 <_svfiprintf_r+0x5c>
 800c614:	2a25      	cmp	r2, #37	; 0x25
 800c616:	d1f9      	bne.n	800c60c <_svfiprintf_r+0x50>
 800c618:	ebba 0b04 	subs.w	fp, sl, r4
 800c61c:	d00b      	beq.n	800c636 <_svfiprintf_r+0x7a>
 800c61e:	465b      	mov	r3, fp
 800c620:	4622      	mov	r2, r4
 800c622:	4629      	mov	r1, r5
 800c624:	4638      	mov	r0, r7
 800c626:	f7ff ff6d 	bl	800c504 <__ssputs_r>
 800c62a:	3001      	adds	r0, #1
 800c62c:	f000 80aa 	beq.w	800c784 <_svfiprintf_r+0x1c8>
 800c630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c632:	445a      	add	r2, fp
 800c634:	9209      	str	r2, [sp, #36]	; 0x24
 800c636:	f89a 3000 	ldrb.w	r3, [sl]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 80a2 	beq.w	800c784 <_svfiprintf_r+0x1c8>
 800c640:	2300      	movs	r3, #0
 800c642:	f04f 32ff 	mov.w	r2, #4294967295
 800c646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64a:	f10a 0a01 	add.w	sl, sl, #1
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	9307      	str	r3, [sp, #28]
 800c652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c656:	931a      	str	r3, [sp, #104]	; 0x68
 800c658:	4654      	mov	r4, sl
 800c65a:	2205      	movs	r2, #5
 800c65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c660:	4851      	ldr	r0, [pc, #324]	; (800c7a8 <_svfiprintf_r+0x1ec>)
 800c662:	f7f3 fddd 	bl	8000220 <memchr>
 800c666:	9a04      	ldr	r2, [sp, #16]
 800c668:	b9d8      	cbnz	r0, 800c6a2 <_svfiprintf_r+0xe6>
 800c66a:	06d0      	lsls	r0, r2, #27
 800c66c:	bf44      	itt	mi
 800c66e:	2320      	movmi	r3, #32
 800c670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c674:	0711      	lsls	r1, r2, #28
 800c676:	bf44      	itt	mi
 800c678:	232b      	movmi	r3, #43	; 0x2b
 800c67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c67e:	f89a 3000 	ldrb.w	r3, [sl]
 800c682:	2b2a      	cmp	r3, #42	; 0x2a
 800c684:	d015      	beq.n	800c6b2 <_svfiprintf_r+0xf6>
 800c686:	9a07      	ldr	r2, [sp, #28]
 800c688:	4654      	mov	r4, sl
 800c68a:	2000      	movs	r0, #0
 800c68c:	f04f 0c0a 	mov.w	ip, #10
 800c690:	4621      	mov	r1, r4
 800c692:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c696:	3b30      	subs	r3, #48	; 0x30
 800c698:	2b09      	cmp	r3, #9
 800c69a:	d94e      	bls.n	800c73a <_svfiprintf_r+0x17e>
 800c69c:	b1b0      	cbz	r0, 800c6cc <_svfiprintf_r+0x110>
 800c69e:	9207      	str	r2, [sp, #28]
 800c6a0:	e014      	b.n	800c6cc <_svfiprintf_r+0x110>
 800c6a2:	eba0 0308 	sub.w	r3, r0, r8
 800c6a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	9304      	str	r3, [sp, #16]
 800c6ae:	46a2      	mov	sl, r4
 800c6b0:	e7d2      	b.n	800c658 <_svfiprintf_r+0x9c>
 800c6b2:	9b03      	ldr	r3, [sp, #12]
 800c6b4:	1d19      	adds	r1, r3, #4
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	9103      	str	r1, [sp, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bfbb      	ittet	lt
 800c6be:	425b      	neglt	r3, r3
 800c6c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c4:	9307      	strge	r3, [sp, #28]
 800c6c6:	9307      	strlt	r3, [sp, #28]
 800c6c8:	bfb8      	it	lt
 800c6ca:	9204      	strlt	r2, [sp, #16]
 800c6cc:	7823      	ldrb	r3, [r4, #0]
 800c6ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d0:	d10c      	bne.n	800c6ec <_svfiprintf_r+0x130>
 800c6d2:	7863      	ldrb	r3, [r4, #1]
 800c6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d6:	d135      	bne.n	800c744 <_svfiprintf_r+0x188>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	1d1a      	adds	r2, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9203      	str	r2, [sp, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	bfb8      	it	lt
 800c6e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6e8:	3402      	adds	r4, #2
 800c6ea:	9305      	str	r3, [sp, #20]
 800c6ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7b8 <_svfiprintf_r+0x1fc>
 800c6f0:	7821      	ldrb	r1, [r4, #0]
 800c6f2:	2203      	movs	r2, #3
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	f7f3 fd93 	bl	8000220 <memchr>
 800c6fa:	b140      	cbz	r0, 800c70e <_svfiprintf_r+0x152>
 800c6fc:	2340      	movs	r3, #64	; 0x40
 800c6fe:	eba0 000a 	sub.w	r0, r0, sl
 800c702:	fa03 f000 	lsl.w	r0, r3, r0
 800c706:	9b04      	ldr	r3, [sp, #16]
 800c708:	4303      	orrs	r3, r0
 800c70a:	3401      	adds	r4, #1
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c712:	4826      	ldr	r0, [pc, #152]	; (800c7ac <_svfiprintf_r+0x1f0>)
 800c714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c718:	2206      	movs	r2, #6
 800c71a:	f7f3 fd81 	bl	8000220 <memchr>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d038      	beq.n	800c794 <_svfiprintf_r+0x1d8>
 800c722:	4b23      	ldr	r3, [pc, #140]	; (800c7b0 <_svfiprintf_r+0x1f4>)
 800c724:	bb1b      	cbnz	r3, 800c76e <_svfiprintf_r+0x1b2>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	3307      	adds	r3, #7
 800c72a:	f023 0307 	bic.w	r3, r3, #7
 800c72e:	3308      	adds	r3, #8
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c734:	4433      	add	r3, r6
 800c736:	9309      	str	r3, [sp, #36]	; 0x24
 800c738:	e767      	b.n	800c60a <_svfiprintf_r+0x4e>
 800c73a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73e:	460c      	mov	r4, r1
 800c740:	2001      	movs	r0, #1
 800c742:	e7a5      	b.n	800c690 <_svfiprintf_r+0xd4>
 800c744:	2300      	movs	r3, #0
 800c746:	3401      	adds	r4, #1
 800c748:	9305      	str	r3, [sp, #20]
 800c74a:	4619      	mov	r1, r3
 800c74c:	f04f 0c0a 	mov.w	ip, #10
 800c750:	4620      	mov	r0, r4
 800c752:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c756:	3a30      	subs	r2, #48	; 0x30
 800c758:	2a09      	cmp	r2, #9
 800c75a:	d903      	bls.n	800c764 <_svfiprintf_r+0x1a8>
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0c5      	beq.n	800c6ec <_svfiprintf_r+0x130>
 800c760:	9105      	str	r1, [sp, #20]
 800c762:	e7c3      	b.n	800c6ec <_svfiprintf_r+0x130>
 800c764:	fb0c 2101 	mla	r1, ip, r1, r2
 800c768:	4604      	mov	r4, r0
 800c76a:	2301      	movs	r3, #1
 800c76c:	e7f0      	b.n	800c750 <_svfiprintf_r+0x194>
 800c76e:	ab03      	add	r3, sp, #12
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	462a      	mov	r2, r5
 800c774:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <_svfiprintf_r+0x1f8>)
 800c776:	a904      	add	r1, sp, #16
 800c778:	4638      	mov	r0, r7
 800c77a:	f7fd ffc9 	bl	800a710 <_printf_float>
 800c77e:	1c42      	adds	r2, r0, #1
 800c780:	4606      	mov	r6, r0
 800c782:	d1d6      	bne.n	800c732 <_svfiprintf_r+0x176>
 800c784:	89ab      	ldrh	r3, [r5, #12]
 800c786:	065b      	lsls	r3, r3, #25
 800c788:	f53f af2c 	bmi.w	800c5e4 <_svfiprintf_r+0x28>
 800c78c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c78e:	b01d      	add	sp, #116	; 0x74
 800c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c794:	ab03      	add	r3, sp, #12
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	462a      	mov	r2, r5
 800c79a:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <_svfiprintf_r+0x1f8>)
 800c79c:	a904      	add	r1, sp, #16
 800c79e:	4638      	mov	r0, r7
 800c7a0:	f7fe fa5a 	bl	800ac58 <_printf_i>
 800c7a4:	e7eb      	b.n	800c77e <_svfiprintf_r+0x1c2>
 800c7a6:	bf00      	nop
 800c7a8:	0800ebd4 	.word	0x0800ebd4
 800c7ac:	0800ebde 	.word	0x0800ebde
 800c7b0:	0800a711 	.word	0x0800a711
 800c7b4:	0800c505 	.word	0x0800c505
 800c7b8:	0800ebda 	.word	0x0800ebda

0800c7bc <_sbrk_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4d06      	ldr	r5, [pc, #24]	; (800c7d8 <_sbrk_r+0x1c>)
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	4608      	mov	r0, r1
 800c7c6:	602b      	str	r3, [r5, #0]
 800c7c8:	f7f8 f932 	bl	8004a30 <_sbrk>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_sbrk_r+0x1a>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_sbrk_r+0x1a>
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	20000b38 	.word	0x20000b38

0800c7dc <__assert_func>:
 800c7dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7de:	4614      	mov	r4, r2
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4b09      	ldr	r3, [pc, #36]	; (800c808 <__assert_func+0x2c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	68d8      	ldr	r0, [r3, #12]
 800c7ea:	b14c      	cbz	r4, 800c800 <__assert_func+0x24>
 800c7ec:	4b07      	ldr	r3, [pc, #28]	; (800c80c <__assert_func+0x30>)
 800c7ee:	9100      	str	r1, [sp, #0]
 800c7f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7f4:	4906      	ldr	r1, [pc, #24]	; (800c810 <__assert_func+0x34>)
 800c7f6:	462b      	mov	r3, r5
 800c7f8:	f000 f80e 	bl	800c818 <fiprintf>
 800c7fc:	f000 faac 	bl	800cd58 <abort>
 800c800:	4b04      	ldr	r3, [pc, #16]	; (800c814 <__assert_func+0x38>)
 800c802:	461c      	mov	r4, r3
 800c804:	e7f3      	b.n	800c7ee <__assert_func+0x12>
 800c806:	bf00      	nop
 800c808:	20000088 	.word	0x20000088
 800c80c:	0800ebe5 	.word	0x0800ebe5
 800c810:	0800ebf2 	.word	0x0800ebf2
 800c814:	0800ec20 	.word	0x0800ec20

0800c818 <fiprintf>:
 800c818:	b40e      	push	{r1, r2, r3}
 800c81a:	b503      	push	{r0, r1, lr}
 800c81c:	4601      	mov	r1, r0
 800c81e:	ab03      	add	r3, sp, #12
 800c820:	4805      	ldr	r0, [pc, #20]	; (800c838 <fiprintf+0x20>)
 800c822:	f853 2b04 	ldr.w	r2, [r3], #4
 800c826:	6800      	ldr	r0, [r0, #0]
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	f000 f897 	bl	800c95c <_vfiprintf_r>
 800c82e:	b002      	add	sp, #8
 800c830:	f85d eb04 	ldr.w	lr, [sp], #4
 800c834:	b003      	add	sp, #12
 800c836:	4770      	bx	lr
 800c838:	20000088 	.word	0x20000088

0800c83c <__ascii_mbtowc>:
 800c83c:	b082      	sub	sp, #8
 800c83e:	b901      	cbnz	r1, 800c842 <__ascii_mbtowc+0x6>
 800c840:	a901      	add	r1, sp, #4
 800c842:	b142      	cbz	r2, 800c856 <__ascii_mbtowc+0x1a>
 800c844:	b14b      	cbz	r3, 800c85a <__ascii_mbtowc+0x1e>
 800c846:	7813      	ldrb	r3, [r2, #0]
 800c848:	600b      	str	r3, [r1, #0]
 800c84a:	7812      	ldrb	r2, [r2, #0]
 800c84c:	1e10      	subs	r0, r2, #0
 800c84e:	bf18      	it	ne
 800c850:	2001      	movne	r0, #1
 800c852:	b002      	add	sp, #8
 800c854:	4770      	bx	lr
 800c856:	4610      	mov	r0, r2
 800c858:	e7fb      	b.n	800c852 <__ascii_mbtowc+0x16>
 800c85a:	f06f 0001 	mvn.w	r0, #1
 800c85e:	e7f8      	b.n	800c852 <__ascii_mbtowc+0x16>

0800c860 <memmove>:
 800c860:	4288      	cmp	r0, r1
 800c862:	b510      	push	{r4, lr}
 800c864:	eb01 0402 	add.w	r4, r1, r2
 800c868:	d902      	bls.n	800c870 <memmove+0x10>
 800c86a:	4284      	cmp	r4, r0
 800c86c:	4623      	mov	r3, r4
 800c86e:	d807      	bhi.n	800c880 <memmove+0x20>
 800c870:	1e43      	subs	r3, r0, #1
 800c872:	42a1      	cmp	r1, r4
 800c874:	d008      	beq.n	800c888 <memmove+0x28>
 800c876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c87a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c87e:	e7f8      	b.n	800c872 <memmove+0x12>
 800c880:	4402      	add	r2, r0
 800c882:	4601      	mov	r1, r0
 800c884:	428a      	cmp	r2, r1
 800c886:	d100      	bne.n	800c88a <memmove+0x2a>
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c88e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c892:	e7f7      	b.n	800c884 <memmove+0x24>

0800c894 <__malloc_lock>:
 800c894:	4801      	ldr	r0, [pc, #4]	; (800c89c <__malloc_lock+0x8>)
 800c896:	f000 bc1f 	b.w	800d0d8 <__retarget_lock_acquire_recursive>
 800c89a:	bf00      	nop
 800c89c:	20000b3c 	.word	0x20000b3c

0800c8a0 <__malloc_unlock>:
 800c8a0:	4801      	ldr	r0, [pc, #4]	; (800c8a8 <__malloc_unlock+0x8>)
 800c8a2:	f000 bc1a 	b.w	800d0da <__retarget_lock_release_recursive>
 800c8a6:	bf00      	nop
 800c8a8:	20000b3c 	.word	0x20000b3c

0800c8ac <_realloc_r>:
 800c8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b0:	4680      	mov	r8, r0
 800c8b2:	4614      	mov	r4, r2
 800c8b4:	460e      	mov	r6, r1
 800c8b6:	b921      	cbnz	r1, 800c8c2 <_realloc_r+0x16>
 800c8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	4611      	mov	r1, r2
 800c8be:	f7ff bdad 	b.w	800c41c <_malloc_r>
 800c8c2:	b92a      	cbnz	r2, 800c8d0 <_realloc_r+0x24>
 800c8c4:	f7ff fd3e 	bl	800c344 <_free_r>
 800c8c8:	4625      	mov	r5, r4
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d0:	f000 fc6a 	bl	800d1a8 <_malloc_usable_size_r>
 800c8d4:	4284      	cmp	r4, r0
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	d802      	bhi.n	800c8e0 <_realloc_r+0x34>
 800c8da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8de:	d812      	bhi.n	800c906 <_realloc_r+0x5a>
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	4640      	mov	r0, r8
 800c8e4:	f7ff fd9a 	bl	800c41c <_malloc_r>
 800c8e8:	4605      	mov	r5, r0
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0ed      	beq.n	800c8ca <_realloc_r+0x1e>
 800c8ee:	42bc      	cmp	r4, r7
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	bf28      	it	cs
 800c8f6:	463a      	movcs	r2, r7
 800c8f8:	f7ff f97c 	bl	800bbf4 <memcpy>
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	4640      	mov	r0, r8
 800c900:	f7ff fd20 	bl	800c344 <_free_r>
 800c904:	e7e1      	b.n	800c8ca <_realloc_r+0x1e>
 800c906:	4635      	mov	r5, r6
 800c908:	e7df      	b.n	800c8ca <_realloc_r+0x1e>

0800c90a <__sfputc_r>:
 800c90a:	6893      	ldr	r3, [r2, #8]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	b410      	push	{r4}
 800c912:	6093      	str	r3, [r2, #8]
 800c914:	da08      	bge.n	800c928 <__sfputc_r+0x1e>
 800c916:	6994      	ldr	r4, [r2, #24]
 800c918:	42a3      	cmp	r3, r4
 800c91a:	db01      	blt.n	800c920 <__sfputc_r+0x16>
 800c91c:	290a      	cmp	r1, #10
 800c91e:	d103      	bne.n	800c928 <__sfputc_r+0x1e>
 800c920:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c924:	f000 b94a 	b.w	800cbbc <__swbuf_r>
 800c928:	6813      	ldr	r3, [r2, #0]
 800c92a:	1c58      	adds	r0, r3, #1
 800c92c:	6010      	str	r0, [r2, #0]
 800c92e:	7019      	strb	r1, [r3, #0]
 800c930:	4608      	mov	r0, r1
 800c932:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <__sfputs_r>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	4606      	mov	r6, r0
 800c93c:	460f      	mov	r7, r1
 800c93e:	4614      	mov	r4, r2
 800c940:	18d5      	adds	r5, r2, r3
 800c942:	42ac      	cmp	r4, r5
 800c944:	d101      	bne.n	800c94a <__sfputs_r+0x12>
 800c946:	2000      	movs	r0, #0
 800c948:	e007      	b.n	800c95a <__sfputs_r+0x22>
 800c94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94e:	463a      	mov	r2, r7
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff ffda 	bl	800c90a <__sfputc_r>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	d1f3      	bne.n	800c942 <__sfputs_r+0xa>
 800c95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c95c <_vfiprintf_r>:
 800c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c960:	460d      	mov	r5, r1
 800c962:	b09d      	sub	sp, #116	; 0x74
 800c964:	4614      	mov	r4, r2
 800c966:	4698      	mov	r8, r3
 800c968:	4606      	mov	r6, r0
 800c96a:	b118      	cbz	r0, 800c974 <_vfiprintf_r+0x18>
 800c96c:	6983      	ldr	r3, [r0, #24]
 800c96e:	b90b      	cbnz	r3, 800c974 <_vfiprintf_r+0x18>
 800c970:	f000 fb14 	bl	800cf9c <__sinit>
 800c974:	4b89      	ldr	r3, [pc, #548]	; (800cb9c <_vfiprintf_r+0x240>)
 800c976:	429d      	cmp	r5, r3
 800c978:	d11b      	bne.n	800c9b2 <_vfiprintf_r+0x56>
 800c97a:	6875      	ldr	r5, [r6, #4]
 800c97c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c97e:	07d9      	lsls	r1, r3, #31
 800c980:	d405      	bmi.n	800c98e <_vfiprintf_r+0x32>
 800c982:	89ab      	ldrh	r3, [r5, #12]
 800c984:	059a      	lsls	r2, r3, #22
 800c986:	d402      	bmi.n	800c98e <_vfiprintf_r+0x32>
 800c988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c98a:	f000 fba5 	bl	800d0d8 <__retarget_lock_acquire_recursive>
 800c98e:	89ab      	ldrh	r3, [r5, #12]
 800c990:	071b      	lsls	r3, r3, #28
 800c992:	d501      	bpl.n	800c998 <_vfiprintf_r+0x3c>
 800c994:	692b      	ldr	r3, [r5, #16]
 800c996:	b9eb      	cbnz	r3, 800c9d4 <_vfiprintf_r+0x78>
 800c998:	4629      	mov	r1, r5
 800c99a:	4630      	mov	r0, r6
 800c99c:	f000 f96e 	bl	800cc7c <__swsetup_r>
 800c9a0:	b1c0      	cbz	r0, 800c9d4 <_vfiprintf_r+0x78>
 800c9a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9a4:	07dc      	lsls	r4, r3, #31
 800c9a6:	d50e      	bpl.n	800c9c6 <_vfiprintf_r+0x6a>
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ac:	b01d      	add	sp, #116	; 0x74
 800c9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b2:	4b7b      	ldr	r3, [pc, #492]	; (800cba0 <_vfiprintf_r+0x244>)
 800c9b4:	429d      	cmp	r5, r3
 800c9b6:	d101      	bne.n	800c9bc <_vfiprintf_r+0x60>
 800c9b8:	68b5      	ldr	r5, [r6, #8]
 800c9ba:	e7df      	b.n	800c97c <_vfiprintf_r+0x20>
 800c9bc:	4b79      	ldr	r3, [pc, #484]	; (800cba4 <_vfiprintf_r+0x248>)
 800c9be:	429d      	cmp	r5, r3
 800c9c0:	bf08      	it	eq
 800c9c2:	68f5      	ldreq	r5, [r6, #12]
 800c9c4:	e7da      	b.n	800c97c <_vfiprintf_r+0x20>
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	0598      	lsls	r0, r3, #22
 800c9ca:	d4ed      	bmi.n	800c9a8 <_vfiprintf_r+0x4c>
 800c9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ce:	f000 fb84 	bl	800d0da <__retarget_lock_release_recursive>
 800c9d2:	e7e9      	b.n	800c9a8 <_vfiprintf_r+0x4c>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d8:	2320      	movs	r3, #32
 800c9da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e2:	2330      	movs	r3, #48	; 0x30
 800c9e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cba8 <_vfiprintf_r+0x24c>
 800c9e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9ec:	f04f 0901 	mov.w	r9, #1
 800c9f0:	4623      	mov	r3, r4
 800c9f2:	469a      	mov	sl, r3
 800c9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9f8:	b10a      	cbz	r2, 800c9fe <_vfiprintf_r+0xa2>
 800c9fa:	2a25      	cmp	r2, #37	; 0x25
 800c9fc:	d1f9      	bne.n	800c9f2 <_vfiprintf_r+0x96>
 800c9fe:	ebba 0b04 	subs.w	fp, sl, r4
 800ca02:	d00b      	beq.n	800ca1c <_vfiprintf_r+0xc0>
 800ca04:	465b      	mov	r3, fp
 800ca06:	4622      	mov	r2, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff ff94 	bl	800c938 <__sfputs_r>
 800ca10:	3001      	adds	r0, #1
 800ca12:	f000 80aa 	beq.w	800cb6a <_vfiprintf_r+0x20e>
 800ca16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca18:	445a      	add	r2, fp
 800ca1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 80a2 	beq.w	800cb6a <_vfiprintf_r+0x20e>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca30:	f10a 0a01 	add.w	sl, sl, #1
 800ca34:	9304      	str	r3, [sp, #16]
 800ca36:	9307      	str	r3, [sp, #28]
 800ca38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ca3e:	4654      	mov	r4, sl
 800ca40:	2205      	movs	r2, #5
 800ca42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca46:	4858      	ldr	r0, [pc, #352]	; (800cba8 <_vfiprintf_r+0x24c>)
 800ca48:	f7f3 fbea 	bl	8000220 <memchr>
 800ca4c:	9a04      	ldr	r2, [sp, #16]
 800ca4e:	b9d8      	cbnz	r0, 800ca88 <_vfiprintf_r+0x12c>
 800ca50:	06d1      	lsls	r1, r2, #27
 800ca52:	bf44      	itt	mi
 800ca54:	2320      	movmi	r3, #32
 800ca56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca5a:	0713      	lsls	r3, r2, #28
 800ca5c:	bf44      	itt	mi
 800ca5e:	232b      	movmi	r3, #43	; 0x2b
 800ca60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca64:	f89a 3000 	ldrb.w	r3, [sl]
 800ca68:	2b2a      	cmp	r3, #42	; 0x2a
 800ca6a:	d015      	beq.n	800ca98 <_vfiprintf_r+0x13c>
 800ca6c:	9a07      	ldr	r2, [sp, #28]
 800ca6e:	4654      	mov	r4, sl
 800ca70:	2000      	movs	r0, #0
 800ca72:	f04f 0c0a 	mov.w	ip, #10
 800ca76:	4621      	mov	r1, r4
 800ca78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca7c:	3b30      	subs	r3, #48	; 0x30
 800ca7e:	2b09      	cmp	r3, #9
 800ca80:	d94e      	bls.n	800cb20 <_vfiprintf_r+0x1c4>
 800ca82:	b1b0      	cbz	r0, 800cab2 <_vfiprintf_r+0x156>
 800ca84:	9207      	str	r2, [sp, #28]
 800ca86:	e014      	b.n	800cab2 <_vfiprintf_r+0x156>
 800ca88:	eba0 0308 	sub.w	r3, r0, r8
 800ca8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca90:	4313      	orrs	r3, r2
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	46a2      	mov	sl, r4
 800ca96:	e7d2      	b.n	800ca3e <_vfiprintf_r+0xe2>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	1d19      	adds	r1, r3, #4
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	9103      	str	r1, [sp, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	bfbb      	ittet	lt
 800caa4:	425b      	neglt	r3, r3
 800caa6:	f042 0202 	orrlt.w	r2, r2, #2
 800caaa:	9307      	strge	r3, [sp, #28]
 800caac:	9307      	strlt	r3, [sp, #28]
 800caae:	bfb8      	it	lt
 800cab0:	9204      	strlt	r2, [sp, #16]
 800cab2:	7823      	ldrb	r3, [r4, #0]
 800cab4:	2b2e      	cmp	r3, #46	; 0x2e
 800cab6:	d10c      	bne.n	800cad2 <_vfiprintf_r+0x176>
 800cab8:	7863      	ldrb	r3, [r4, #1]
 800caba:	2b2a      	cmp	r3, #42	; 0x2a
 800cabc:	d135      	bne.n	800cb2a <_vfiprintf_r+0x1ce>
 800cabe:	9b03      	ldr	r3, [sp, #12]
 800cac0:	1d1a      	adds	r2, r3, #4
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	9203      	str	r2, [sp, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bfb8      	it	lt
 800caca:	f04f 33ff 	movlt.w	r3, #4294967295
 800cace:	3402      	adds	r4, #2
 800cad0:	9305      	str	r3, [sp, #20]
 800cad2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cbb8 <_vfiprintf_r+0x25c>
 800cad6:	7821      	ldrb	r1, [r4, #0]
 800cad8:	2203      	movs	r2, #3
 800cada:	4650      	mov	r0, sl
 800cadc:	f7f3 fba0 	bl	8000220 <memchr>
 800cae0:	b140      	cbz	r0, 800caf4 <_vfiprintf_r+0x198>
 800cae2:	2340      	movs	r3, #64	; 0x40
 800cae4:	eba0 000a 	sub.w	r0, r0, sl
 800cae8:	fa03 f000 	lsl.w	r0, r3, r0
 800caec:	9b04      	ldr	r3, [sp, #16]
 800caee:	4303      	orrs	r3, r0
 800caf0:	3401      	adds	r4, #1
 800caf2:	9304      	str	r3, [sp, #16]
 800caf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf8:	482c      	ldr	r0, [pc, #176]	; (800cbac <_vfiprintf_r+0x250>)
 800cafa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cafe:	2206      	movs	r2, #6
 800cb00:	f7f3 fb8e 	bl	8000220 <memchr>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d03f      	beq.n	800cb88 <_vfiprintf_r+0x22c>
 800cb08:	4b29      	ldr	r3, [pc, #164]	; (800cbb0 <_vfiprintf_r+0x254>)
 800cb0a:	bb1b      	cbnz	r3, 800cb54 <_vfiprintf_r+0x1f8>
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	3307      	adds	r3, #7
 800cb10:	f023 0307 	bic.w	r3, r3, #7
 800cb14:	3308      	adds	r3, #8
 800cb16:	9303      	str	r3, [sp, #12]
 800cb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1a:	443b      	add	r3, r7
 800cb1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb1e:	e767      	b.n	800c9f0 <_vfiprintf_r+0x94>
 800cb20:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb24:	460c      	mov	r4, r1
 800cb26:	2001      	movs	r0, #1
 800cb28:	e7a5      	b.n	800ca76 <_vfiprintf_r+0x11a>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	3401      	adds	r4, #1
 800cb2e:	9305      	str	r3, [sp, #20]
 800cb30:	4619      	mov	r1, r3
 800cb32:	f04f 0c0a 	mov.w	ip, #10
 800cb36:	4620      	mov	r0, r4
 800cb38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3c:	3a30      	subs	r2, #48	; 0x30
 800cb3e:	2a09      	cmp	r2, #9
 800cb40:	d903      	bls.n	800cb4a <_vfiprintf_r+0x1ee>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0c5      	beq.n	800cad2 <_vfiprintf_r+0x176>
 800cb46:	9105      	str	r1, [sp, #20]
 800cb48:	e7c3      	b.n	800cad2 <_vfiprintf_r+0x176>
 800cb4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb4e:	4604      	mov	r4, r0
 800cb50:	2301      	movs	r3, #1
 800cb52:	e7f0      	b.n	800cb36 <_vfiprintf_r+0x1da>
 800cb54:	ab03      	add	r3, sp, #12
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	462a      	mov	r2, r5
 800cb5a:	4b16      	ldr	r3, [pc, #88]	; (800cbb4 <_vfiprintf_r+0x258>)
 800cb5c:	a904      	add	r1, sp, #16
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f7fd fdd6 	bl	800a710 <_printf_float>
 800cb64:	4607      	mov	r7, r0
 800cb66:	1c78      	adds	r0, r7, #1
 800cb68:	d1d6      	bne.n	800cb18 <_vfiprintf_r+0x1bc>
 800cb6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb6c:	07d9      	lsls	r1, r3, #31
 800cb6e:	d405      	bmi.n	800cb7c <_vfiprintf_r+0x220>
 800cb70:	89ab      	ldrh	r3, [r5, #12]
 800cb72:	059a      	lsls	r2, r3, #22
 800cb74:	d402      	bmi.n	800cb7c <_vfiprintf_r+0x220>
 800cb76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb78:	f000 faaf 	bl	800d0da <__retarget_lock_release_recursive>
 800cb7c:	89ab      	ldrh	r3, [r5, #12]
 800cb7e:	065b      	lsls	r3, r3, #25
 800cb80:	f53f af12 	bmi.w	800c9a8 <_vfiprintf_r+0x4c>
 800cb84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb86:	e711      	b.n	800c9ac <_vfiprintf_r+0x50>
 800cb88:	ab03      	add	r3, sp, #12
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	462a      	mov	r2, r5
 800cb8e:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <_vfiprintf_r+0x258>)
 800cb90:	a904      	add	r1, sp, #16
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7fe f860 	bl	800ac58 <_printf_i>
 800cb98:	e7e4      	b.n	800cb64 <_vfiprintf_r+0x208>
 800cb9a:	bf00      	nop
 800cb9c:	0800ed4c 	.word	0x0800ed4c
 800cba0:	0800ed6c 	.word	0x0800ed6c
 800cba4:	0800ed2c 	.word	0x0800ed2c
 800cba8:	0800ebd4 	.word	0x0800ebd4
 800cbac:	0800ebde 	.word	0x0800ebde
 800cbb0:	0800a711 	.word	0x0800a711
 800cbb4:	0800c939 	.word	0x0800c939
 800cbb8:	0800ebda 	.word	0x0800ebda

0800cbbc <__swbuf_r>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	460e      	mov	r6, r1
 800cbc0:	4614      	mov	r4, r2
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	b118      	cbz	r0, 800cbce <__swbuf_r+0x12>
 800cbc6:	6983      	ldr	r3, [r0, #24]
 800cbc8:	b90b      	cbnz	r3, 800cbce <__swbuf_r+0x12>
 800cbca:	f000 f9e7 	bl	800cf9c <__sinit>
 800cbce:	4b21      	ldr	r3, [pc, #132]	; (800cc54 <__swbuf_r+0x98>)
 800cbd0:	429c      	cmp	r4, r3
 800cbd2:	d12b      	bne.n	800cc2c <__swbuf_r+0x70>
 800cbd4:	686c      	ldr	r4, [r5, #4]
 800cbd6:	69a3      	ldr	r3, [r4, #24]
 800cbd8:	60a3      	str	r3, [r4, #8]
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	071a      	lsls	r2, r3, #28
 800cbde:	d52f      	bpl.n	800cc40 <__swbuf_r+0x84>
 800cbe0:	6923      	ldr	r3, [r4, #16]
 800cbe2:	b36b      	cbz	r3, 800cc40 <__swbuf_r+0x84>
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	6820      	ldr	r0, [r4, #0]
 800cbe8:	1ac0      	subs	r0, r0, r3
 800cbea:	6963      	ldr	r3, [r4, #20]
 800cbec:	b2f6      	uxtb	r6, r6
 800cbee:	4283      	cmp	r3, r0
 800cbf0:	4637      	mov	r7, r6
 800cbf2:	dc04      	bgt.n	800cbfe <__swbuf_r+0x42>
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f000 f93c 	bl	800ce74 <_fflush_r>
 800cbfc:	bb30      	cbnz	r0, 800cc4c <__swbuf_r+0x90>
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	60a3      	str	r3, [r4, #8]
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	6022      	str	r2, [r4, #0]
 800cc0a:	701e      	strb	r6, [r3, #0]
 800cc0c:	6963      	ldr	r3, [r4, #20]
 800cc0e:	3001      	adds	r0, #1
 800cc10:	4283      	cmp	r3, r0
 800cc12:	d004      	beq.n	800cc1e <__swbuf_r+0x62>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	07db      	lsls	r3, r3, #31
 800cc18:	d506      	bpl.n	800cc28 <__swbuf_r+0x6c>
 800cc1a:	2e0a      	cmp	r6, #10
 800cc1c:	d104      	bne.n	800cc28 <__swbuf_r+0x6c>
 800cc1e:	4621      	mov	r1, r4
 800cc20:	4628      	mov	r0, r5
 800cc22:	f000 f927 	bl	800ce74 <_fflush_r>
 800cc26:	b988      	cbnz	r0, 800cc4c <__swbuf_r+0x90>
 800cc28:	4638      	mov	r0, r7
 800cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2c:	4b0a      	ldr	r3, [pc, #40]	; (800cc58 <__swbuf_r+0x9c>)
 800cc2e:	429c      	cmp	r4, r3
 800cc30:	d101      	bne.n	800cc36 <__swbuf_r+0x7a>
 800cc32:	68ac      	ldr	r4, [r5, #8]
 800cc34:	e7cf      	b.n	800cbd6 <__swbuf_r+0x1a>
 800cc36:	4b09      	ldr	r3, [pc, #36]	; (800cc5c <__swbuf_r+0xa0>)
 800cc38:	429c      	cmp	r4, r3
 800cc3a:	bf08      	it	eq
 800cc3c:	68ec      	ldreq	r4, [r5, #12]
 800cc3e:	e7ca      	b.n	800cbd6 <__swbuf_r+0x1a>
 800cc40:	4621      	mov	r1, r4
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f81a 	bl	800cc7c <__swsetup_r>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d0cb      	beq.n	800cbe4 <__swbuf_r+0x28>
 800cc4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc50:	e7ea      	b.n	800cc28 <__swbuf_r+0x6c>
 800cc52:	bf00      	nop
 800cc54:	0800ed4c 	.word	0x0800ed4c
 800cc58:	0800ed6c 	.word	0x0800ed6c
 800cc5c:	0800ed2c 	.word	0x0800ed2c

0800cc60 <__ascii_wctomb>:
 800cc60:	b149      	cbz	r1, 800cc76 <__ascii_wctomb+0x16>
 800cc62:	2aff      	cmp	r2, #255	; 0xff
 800cc64:	bf85      	ittet	hi
 800cc66:	238a      	movhi	r3, #138	; 0x8a
 800cc68:	6003      	strhi	r3, [r0, #0]
 800cc6a:	700a      	strbls	r2, [r1, #0]
 800cc6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc70:	bf98      	it	ls
 800cc72:	2001      	movls	r0, #1
 800cc74:	4770      	bx	lr
 800cc76:	4608      	mov	r0, r1
 800cc78:	4770      	bx	lr
	...

0800cc7c <__swsetup_r>:
 800cc7c:	4b32      	ldr	r3, [pc, #200]	; (800cd48 <__swsetup_r+0xcc>)
 800cc7e:	b570      	push	{r4, r5, r6, lr}
 800cc80:	681d      	ldr	r5, [r3, #0]
 800cc82:	4606      	mov	r6, r0
 800cc84:	460c      	mov	r4, r1
 800cc86:	b125      	cbz	r5, 800cc92 <__swsetup_r+0x16>
 800cc88:	69ab      	ldr	r3, [r5, #24]
 800cc8a:	b913      	cbnz	r3, 800cc92 <__swsetup_r+0x16>
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	f000 f985 	bl	800cf9c <__sinit>
 800cc92:	4b2e      	ldr	r3, [pc, #184]	; (800cd4c <__swsetup_r+0xd0>)
 800cc94:	429c      	cmp	r4, r3
 800cc96:	d10f      	bne.n	800ccb8 <__swsetup_r+0x3c>
 800cc98:	686c      	ldr	r4, [r5, #4]
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cca0:	0719      	lsls	r1, r3, #28
 800cca2:	d42c      	bmi.n	800ccfe <__swsetup_r+0x82>
 800cca4:	06dd      	lsls	r5, r3, #27
 800cca6:	d411      	bmi.n	800cccc <__swsetup_r+0x50>
 800cca8:	2309      	movs	r3, #9
 800ccaa:	6033      	str	r3, [r6, #0]
 800ccac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb6:	e03e      	b.n	800cd36 <__swsetup_r+0xba>
 800ccb8:	4b25      	ldr	r3, [pc, #148]	; (800cd50 <__swsetup_r+0xd4>)
 800ccba:	429c      	cmp	r4, r3
 800ccbc:	d101      	bne.n	800ccc2 <__swsetup_r+0x46>
 800ccbe:	68ac      	ldr	r4, [r5, #8]
 800ccc0:	e7eb      	b.n	800cc9a <__swsetup_r+0x1e>
 800ccc2:	4b24      	ldr	r3, [pc, #144]	; (800cd54 <__swsetup_r+0xd8>)
 800ccc4:	429c      	cmp	r4, r3
 800ccc6:	bf08      	it	eq
 800ccc8:	68ec      	ldreq	r4, [r5, #12]
 800ccca:	e7e6      	b.n	800cc9a <__swsetup_r+0x1e>
 800cccc:	0758      	lsls	r0, r3, #29
 800ccce:	d512      	bpl.n	800ccf6 <__swsetup_r+0x7a>
 800ccd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccd2:	b141      	cbz	r1, 800cce6 <__swsetup_r+0x6a>
 800ccd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd8:	4299      	cmp	r1, r3
 800ccda:	d002      	beq.n	800cce2 <__swsetup_r+0x66>
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f7ff fb31 	bl	800c344 <_free_r>
 800cce2:	2300      	movs	r3, #0
 800cce4:	6363      	str	r3, [r4, #52]	; 0x34
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	6063      	str	r3, [r4, #4]
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	89a3      	ldrh	r3, [r4, #12]
 800ccf8:	f043 0308 	orr.w	r3, r3, #8
 800ccfc:	81a3      	strh	r3, [r4, #12]
 800ccfe:	6923      	ldr	r3, [r4, #16]
 800cd00:	b94b      	cbnz	r3, 800cd16 <__swsetup_r+0x9a>
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd0c:	d003      	beq.n	800cd16 <__swsetup_r+0x9a>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4630      	mov	r0, r6
 800cd12:	f000 fa09 	bl	800d128 <__smakebuf_r>
 800cd16:	89a0      	ldrh	r0, [r4, #12]
 800cd18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd1c:	f010 0301 	ands.w	r3, r0, #1
 800cd20:	d00a      	beq.n	800cd38 <__swsetup_r+0xbc>
 800cd22:	2300      	movs	r3, #0
 800cd24:	60a3      	str	r3, [r4, #8]
 800cd26:	6963      	ldr	r3, [r4, #20]
 800cd28:	425b      	negs	r3, r3
 800cd2a:	61a3      	str	r3, [r4, #24]
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	b943      	cbnz	r3, 800cd42 <__swsetup_r+0xc6>
 800cd30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd34:	d1ba      	bne.n	800ccac <__swsetup_r+0x30>
 800cd36:	bd70      	pop	{r4, r5, r6, pc}
 800cd38:	0781      	lsls	r1, r0, #30
 800cd3a:	bf58      	it	pl
 800cd3c:	6963      	ldrpl	r3, [r4, #20]
 800cd3e:	60a3      	str	r3, [r4, #8]
 800cd40:	e7f4      	b.n	800cd2c <__swsetup_r+0xb0>
 800cd42:	2000      	movs	r0, #0
 800cd44:	e7f7      	b.n	800cd36 <__swsetup_r+0xba>
 800cd46:	bf00      	nop
 800cd48:	20000088 	.word	0x20000088
 800cd4c:	0800ed4c 	.word	0x0800ed4c
 800cd50:	0800ed6c 	.word	0x0800ed6c
 800cd54:	0800ed2c 	.word	0x0800ed2c

0800cd58 <abort>:
 800cd58:	b508      	push	{r3, lr}
 800cd5a:	2006      	movs	r0, #6
 800cd5c:	f000 fa54 	bl	800d208 <raise>
 800cd60:	2001      	movs	r0, #1
 800cd62:	f7f7 fded 	bl	8004940 <_exit>
	...

0800cd68 <__sflush_r>:
 800cd68:	898a      	ldrh	r2, [r1, #12]
 800cd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6e:	4605      	mov	r5, r0
 800cd70:	0710      	lsls	r0, r2, #28
 800cd72:	460c      	mov	r4, r1
 800cd74:	d458      	bmi.n	800ce28 <__sflush_r+0xc0>
 800cd76:	684b      	ldr	r3, [r1, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	dc05      	bgt.n	800cd88 <__sflush_r+0x20>
 800cd7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dc02      	bgt.n	800cd88 <__sflush_r+0x20>
 800cd82:	2000      	movs	r0, #0
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd8a:	2e00      	cmp	r6, #0
 800cd8c:	d0f9      	beq.n	800cd82 <__sflush_r+0x1a>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd94:	682f      	ldr	r7, [r5, #0]
 800cd96:	602b      	str	r3, [r5, #0]
 800cd98:	d032      	beq.n	800ce00 <__sflush_r+0x98>
 800cd9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	075a      	lsls	r2, r3, #29
 800cda0:	d505      	bpl.n	800cdae <__sflush_r+0x46>
 800cda2:	6863      	ldr	r3, [r4, #4]
 800cda4:	1ac0      	subs	r0, r0, r3
 800cda6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cda8:	b10b      	cbz	r3, 800cdae <__sflush_r+0x46>
 800cdaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cdac:	1ac0      	subs	r0, r0, r3
 800cdae:	2300      	movs	r3, #0
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdb4:	6a21      	ldr	r1, [r4, #32]
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	47b0      	blx	r6
 800cdba:	1c43      	adds	r3, r0, #1
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	d106      	bne.n	800cdce <__sflush_r+0x66>
 800cdc0:	6829      	ldr	r1, [r5, #0]
 800cdc2:	291d      	cmp	r1, #29
 800cdc4:	d82c      	bhi.n	800ce20 <__sflush_r+0xb8>
 800cdc6:	4a2a      	ldr	r2, [pc, #168]	; (800ce70 <__sflush_r+0x108>)
 800cdc8:	40ca      	lsrs	r2, r1
 800cdca:	07d6      	lsls	r6, r2, #31
 800cdcc:	d528      	bpl.n	800ce20 <__sflush_r+0xb8>
 800cdce:	2200      	movs	r2, #0
 800cdd0:	6062      	str	r2, [r4, #4]
 800cdd2:	04d9      	lsls	r1, r3, #19
 800cdd4:	6922      	ldr	r2, [r4, #16]
 800cdd6:	6022      	str	r2, [r4, #0]
 800cdd8:	d504      	bpl.n	800cde4 <__sflush_r+0x7c>
 800cdda:	1c42      	adds	r2, r0, #1
 800cddc:	d101      	bne.n	800cde2 <__sflush_r+0x7a>
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	b903      	cbnz	r3, 800cde4 <__sflush_r+0x7c>
 800cde2:	6560      	str	r0, [r4, #84]	; 0x54
 800cde4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cde6:	602f      	str	r7, [r5, #0]
 800cde8:	2900      	cmp	r1, #0
 800cdea:	d0ca      	beq.n	800cd82 <__sflush_r+0x1a>
 800cdec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdf0:	4299      	cmp	r1, r3
 800cdf2:	d002      	beq.n	800cdfa <__sflush_r+0x92>
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f7ff faa5 	bl	800c344 <_free_r>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	6360      	str	r0, [r4, #52]	; 0x34
 800cdfe:	e7c1      	b.n	800cd84 <__sflush_r+0x1c>
 800ce00:	6a21      	ldr	r1, [r4, #32]
 800ce02:	2301      	movs	r3, #1
 800ce04:	4628      	mov	r0, r5
 800ce06:	47b0      	blx	r6
 800ce08:	1c41      	adds	r1, r0, #1
 800ce0a:	d1c7      	bne.n	800cd9c <__sflush_r+0x34>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d0c4      	beq.n	800cd9c <__sflush_r+0x34>
 800ce12:	2b1d      	cmp	r3, #29
 800ce14:	d001      	beq.n	800ce1a <__sflush_r+0xb2>
 800ce16:	2b16      	cmp	r3, #22
 800ce18:	d101      	bne.n	800ce1e <__sflush_r+0xb6>
 800ce1a:	602f      	str	r7, [r5, #0]
 800ce1c:	e7b1      	b.n	800cd82 <__sflush_r+0x1a>
 800ce1e:	89a3      	ldrh	r3, [r4, #12]
 800ce20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce24:	81a3      	strh	r3, [r4, #12]
 800ce26:	e7ad      	b.n	800cd84 <__sflush_r+0x1c>
 800ce28:	690f      	ldr	r7, [r1, #16]
 800ce2a:	2f00      	cmp	r7, #0
 800ce2c:	d0a9      	beq.n	800cd82 <__sflush_r+0x1a>
 800ce2e:	0793      	lsls	r3, r2, #30
 800ce30:	680e      	ldr	r6, [r1, #0]
 800ce32:	bf08      	it	eq
 800ce34:	694b      	ldreq	r3, [r1, #20]
 800ce36:	600f      	str	r7, [r1, #0]
 800ce38:	bf18      	it	ne
 800ce3a:	2300      	movne	r3, #0
 800ce3c:	eba6 0807 	sub.w	r8, r6, r7
 800ce40:	608b      	str	r3, [r1, #8]
 800ce42:	f1b8 0f00 	cmp.w	r8, #0
 800ce46:	dd9c      	ble.n	800cd82 <__sflush_r+0x1a>
 800ce48:	6a21      	ldr	r1, [r4, #32]
 800ce4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce4c:	4643      	mov	r3, r8
 800ce4e:	463a      	mov	r2, r7
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b0      	blx	r6
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dc06      	bgt.n	800ce66 <__sflush_r+0xfe>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	f04f 30ff 	mov.w	r0, #4294967295
 800ce64:	e78e      	b.n	800cd84 <__sflush_r+0x1c>
 800ce66:	4407      	add	r7, r0
 800ce68:	eba8 0800 	sub.w	r8, r8, r0
 800ce6c:	e7e9      	b.n	800ce42 <__sflush_r+0xda>
 800ce6e:	bf00      	nop
 800ce70:	20400001 	.word	0x20400001

0800ce74 <_fflush_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	690b      	ldr	r3, [r1, #16]
 800ce78:	4605      	mov	r5, r0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	b913      	cbnz	r3, 800ce84 <_fflush_r+0x10>
 800ce7e:	2500      	movs	r5, #0
 800ce80:	4628      	mov	r0, r5
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	b118      	cbz	r0, 800ce8e <_fflush_r+0x1a>
 800ce86:	6983      	ldr	r3, [r0, #24]
 800ce88:	b90b      	cbnz	r3, 800ce8e <_fflush_r+0x1a>
 800ce8a:	f000 f887 	bl	800cf9c <__sinit>
 800ce8e:	4b14      	ldr	r3, [pc, #80]	; (800cee0 <_fflush_r+0x6c>)
 800ce90:	429c      	cmp	r4, r3
 800ce92:	d11b      	bne.n	800cecc <_fflush_r+0x58>
 800ce94:	686c      	ldr	r4, [r5, #4]
 800ce96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d0ef      	beq.n	800ce7e <_fflush_r+0xa>
 800ce9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cea0:	07d0      	lsls	r0, r2, #31
 800cea2:	d404      	bmi.n	800ceae <_fflush_r+0x3a>
 800cea4:	0599      	lsls	r1, r3, #22
 800cea6:	d402      	bmi.n	800ceae <_fflush_r+0x3a>
 800cea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceaa:	f000 f915 	bl	800d0d8 <__retarget_lock_acquire_recursive>
 800ceae:	4628      	mov	r0, r5
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	f7ff ff59 	bl	800cd68 <__sflush_r>
 800ceb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ceb8:	07da      	lsls	r2, r3, #31
 800ceba:	4605      	mov	r5, r0
 800cebc:	d4e0      	bmi.n	800ce80 <_fflush_r+0xc>
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	059b      	lsls	r3, r3, #22
 800cec2:	d4dd      	bmi.n	800ce80 <_fflush_r+0xc>
 800cec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cec6:	f000 f908 	bl	800d0da <__retarget_lock_release_recursive>
 800ceca:	e7d9      	b.n	800ce80 <_fflush_r+0xc>
 800cecc:	4b05      	ldr	r3, [pc, #20]	; (800cee4 <_fflush_r+0x70>)
 800cece:	429c      	cmp	r4, r3
 800ced0:	d101      	bne.n	800ced6 <_fflush_r+0x62>
 800ced2:	68ac      	ldr	r4, [r5, #8]
 800ced4:	e7df      	b.n	800ce96 <_fflush_r+0x22>
 800ced6:	4b04      	ldr	r3, [pc, #16]	; (800cee8 <_fflush_r+0x74>)
 800ced8:	429c      	cmp	r4, r3
 800ceda:	bf08      	it	eq
 800cedc:	68ec      	ldreq	r4, [r5, #12]
 800cede:	e7da      	b.n	800ce96 <_fflush_r+0x22>
 800cee0:	0800ed4c 	.word	0x0800ed4c
 800cee4:	0800ed6c 	.word	0x0800ed6c
 800cee8:	0800ed2c 	.word	0x0800ed2c

0800ceec <std>:
 800ceec:	2300      	movs	r3, #0
 800ceee:	b510      	push	{r4, lr}
 800cef0:	4604      	mov	r4, r0
 800cef2:	e9c0 3300 	strd	r3, r3, [r0]
 800cef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cefa:	6083      	str	r3, [r0, #8]
 800cefc:	8181      	strh	r1, [r0, #12]
 800cefe:	6643      	str	r3, [r0, #100]	; 0x64
 800cf00:	81c2      	strh	r2, [r0, #14]
 800cf02:	6183      	str	r3, [r0, #24]
 800cf04:	4619      	mov	r1, r3
 800cf06:	2208      	movs	r2, #8
 800cf08:	305c      	adds	r0, #92	; 0x5c
 800cf0a:	f7fd fb59 	bl	800a5c0 <memset>
 800cf0e:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <std+0x38>)
 800cf10:	6263      	str	r3, [r4, #36]	; 0x24
 800cf12:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <std+0x3c>)
 800cf14:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <std+0x40>)
 800cf18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf1a:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <std+0x44>)
 800cf1c:	6224      	str	r4, [r4, #32]
 800cf1e:	6323      	str	r3, [r4, #48]	; 0x30
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	bf00      	nop
 800cf24:	0800d241 	.word	0x0800d241
 800cf28:	0800d263 	.word	0x0800d263
 800cf2c:	0800d29b 	.word	0x0800d29b
 800cf30:	0800d2bf 	.word	0x0800d2bf

0800cf34 <_cleanup_r>:
 800cf34:	4901      	ldr	r1, [pc, #4]	; (800cf3c <_cleanup_r+0x8>)
 800cf36:	f000 b8af 	b.w	800d098 <_fwalk_reent>
 800cf3a:	bf00      	nop
 800cf3c:	0800ce75 	.word	0x0800ce75

0800cf40 <__sfmoreglue>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	2268      	movs	r2, #104	; 0x68
 800cf44:	1e4d      	subs	r5, r1, #1
 800cf46:	4355      	muls	r5, r2
 800cf48:	460e      	mov	r6, r1
 800cf4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf4e:	f7ff fa65 	bl	800c41c <_malloc_r>
 800cf52:	4604      	mov	r4, r0
 800cf54:	b140      	cbz	r0, 800cf68 <__sfmoreglue+0x28>
 800cf56:	2100      	movs	r1, #0
 800cf58:	e9c0 1600 	strd	r1, r6, [r0]
 800cf5c:	300c      	adds	r0, #12
 800cf5e:	60a0      	str	r0, [r4, #8]
 800cf60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf64:	f7fd fb2c 	bl	800a5c0 <memset>
 800cf68:	4620      	mov	r0, r4
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}

0800cf6c <__sfp_lock_acquire>:
 800cf6c:	4801      	ldr	r0, [pc, #4]	; (800cf74 <__sfp_lock_acquire+0x8>)
 800cf6e:	f000 b8b3 	b.w	800d0d8 <__retarget_lock_acquire_recursive>
 800cf72:	bf00      	nop
 800cf74:	20000b3d 	.word	0x20000b3d

0800cf78 <__sfp_lock_release>:
 800cf78:	4801      	ldr	r0, [pc, #4]	; (800cf80 <__sfp_lock_release+0x8>)
 800cf7a:	f000 b8ae 	b.w	800d0da <__retarget_lock_release_recursive>
 800cf7e:	bf00      	nop
 800cf80:	20000b3d 	.word	0x20000b3d

0800cf84 <__sinit_lock_acquire>:
 800cf84:	4801      	ldr	r0, [pc, #4]	; (800cf8c <__sinit_lock_acquire+0x8>)
 800cf86:	f000 b8a7 	b.w	800d0d8 <__retarget_lock_acquire_recursive>
 800cf8a:	bf00      	nop
 800cf8c:	20000b3e 	.word	0x20000b3e

0800cf90 <__sinit_lock_release>:
 800cf90:	4801      	ldr	r0, [pc, #4]	; (800cf98 <__sinit_lock_release+0x8>)
 800cf92:	f000 b8a2 	b.w	800d0da <__retarget_lock_release_recursive>
 800cf96:	bf00      	nop
 800cf98:	20000b3e 	.word	0x20000b3e

0800cf9c <__sinit>:
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	f7ff fff0 	bl	800cf84 <__sinit_lock_acquire>
 800cfa4:	69a3      	ldr	r3, [r4, #24]
 800cfa6:	b11b      	cbz	r3, 800cfb0 <__sinit+0x14>
 800cfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfac:	f7ff bff0 	b.w	800cf90 <__sinit_lock_release>
 800cfb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfb4:	6523      	str	r3, [r4, #80]	; 0x50
 800cfb6:	4b13      	ldr	r3, [pc, #76]	; (800d004 <__sinit+0x68>)
 800cfb8:	4a13      	ldr	r2, [pc, #76]	; (800d008 <__sinit+0x6c>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfbe:	42a3      	cmp	r3, r4
 800cfc0:	bf04      	itt	eq
 800cfc2:	2301      	moveq	r3, #1
 800cfc4:	61a3      	streq	r3, [r4, #24]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 f820 	bl	800d00c <__sfp>
 800cfcc:	6060      	str	r0, [r4, #4]
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f000 f81c 	bl	800d00c <__sfp>
 800cfd4:	60a0      	str	r0, [r4, #8]
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f000 f818 	bl	800d00c <__sfp>
 800cfdc:	2200      	movs	r2, #0
 800cfde:	60e0      	str	r0, [r4, #12]
 800cfe0:	2104      	movs	r1, #4
 800cfe2:	6860      	ldr	r0, [r4, #4]
 800cfe4:	f7ff ff82 	bl	800ceec <std>
 800cfe8:	68a0      	ldr	r0, [r4, #8]
 800cfea:	2201      	movs	r2, #1
 800cfec:	2109      	movs	r1, #9
 800cfee:	f7ff ff7d 	bl	800ceec <std>
 800cff2:	68e0      	ldr	r0, [r4, #12]
 800cff4:	2202      	movs	r2, #2
 800cff6:	2112      	movs	r1, #18
 800cff8:	f7ff ff78 	bl	800ceec <std>
 800cffc:	2301      	movs	r3, #1
 800cffe:	61a3      	str	r3, [r4, #24]
 800d000:	e7d2      	b.n	800cfa8 <__sinit+0xc>
 800d002:	bf00      	nop
 800d004:	0800e9b0 	.word	0x0800e9b0
 800d008:	0800cf35 	.word	0x0800cf35

0800d00c <__sfp>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	4607      	mov	r7, r0
 800d010:	f7ff ffac 	bl	800cf6c <__sfp_lock_acquire>
 800d014:	4b1e      	ldr	r3, [pc, #120]	; (800d090 <__sfp+0x84>)
 800d016:	681e      	ldr	r6, [r3, #0]
 800d018:	69b3      	ldr	r3, [r6, #24]
 800d01a:	b913      	cbnz	r3, 800d022 <__sfp+0x16>
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7ff ffbd 	bl	800cf9c <__sinit>
 800d022:	3648      	adds	r6, #72	; 0x48
 800d024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d028:	3b01      	subs	r3, #1
 800d02a:	d503      	bpl.n	800d034 <__sfp+0x28>
 800d02c:	6833      	ldr	r3, [r6, #0]
 800d02e:	b30b      	cbz	r3, 800d074 <__sfp+0x68>
 800d030:	6836      	ldr	r6, [r6, #0]
 800d032:	e7f7      	b.n	800d024 <__sfp+0x18>
 800d034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d038:	b9d5      	cbnz	r5, 800d070 <__sfp+0x64>
 800d03a:	4b16      	ldr	r3, [pc, #88]	; (800d094 <__sfp+0x88>)
 800d03c:	60e3      	str	r3, [r4, #12]
 800d03e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d042:	6665      	str	r5, [r4, #100]	; 0x64
 800d044:	f000 f847 	bl	800d0d6 <__retarget_lock_init_recursive>
 800d048:	f7ff ff96 	bl	800cf78 <__sfp_lock_release>
 800d04c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d054:	6025      	str	r5, [r4, #0]
 800d056:	61a5      	str	r5, [r4, #24]
 800d058:	2208      	movs	r2, #8
 800d05a:	4629      	mov	r1, r5
 800d05c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d060:	f7fd faae 	bl	800a5c0 <memset>
 800d064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d06c:	4620      	mov	r0, r4
 800d06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d070:	3468      	adds	r4, #104	; 0x68
 800d072:	e7d9      	b.n	800d028 <__sfp+0x1c>
 800d074:	2104      	movs	r1, #4
 800d076:	4638      	mov	r0, r7
 800d078:	f7ff ff62 	bl	800cf40 <__sfmoreglue>
 800d07c:	4604      	mov	r4, r0
 800d07e:	6030      	str	r0, [r6, #0]
 800d080:	2800      	cmp	r0, #0
 800d082:	d1d5      	bne.n	800d030 <__sfp+0x24>
 800d084:	f7ff ff78 	bl	800cf78 <__sfp_lock_release>
 800d088:	230c      	movs	r3, #12
 800d08a:	603b      	str	r3, [r7, #0]
 800d08c:	e7ee      	b.n	800d06c <__sfp+0x60>
 800d08e:	bf00      	nop
 800d090:	0800e9b0 	.word	0x0800e9b0
 800d094:	ffff0001 	.word	0xffff0001

0800d098 <_fwalk_reent>:
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	4606      	mov	r6, r0
 800d09e:	4688      	mov	r8, r1
 800d0a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0a4:	2700      	movs	r7, #0
 800d0a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0aa:	f1b9 0901 	subs.w	r9, r9, #1
 800d0ae:	d505      	bpl.n	800d0bc <_fwalk_reent+0x24>
 800d0b0:	6824      	ldr	r4, [r4, #0]
 800d0b2:	2c00      	cmp	r4, #0
 800d0b4:	d1f7      	bne.n	800d0a6 <_fwalk_reent+0xe>
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0bc:	89ab      	ldrh	r3, [r5, #12]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d907      	bls.n	800d0d2 <_fwalk_reent+0x3a>
 800d0c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	d003      	beq.n	800d0d2 <_fwalk_reent+0x3a>
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	47c0      	blx	r8
 800d0d0:	4307      	orrs	r7, r0
 800d0d2:	3568      	adds	r5, #104	; 0x68
 800d0d4:	e7e9      	b.n	800d0aa <_fwalk_reent+0x12>

0800d0d6 <__retarget_lock_init_recursive>:
 800d0d6:	4770      	bx	lr

0800d0d8 <__retarget_lock_acquire_recursive>:
 800d0d8:	4770      	bx	lr

0800d0da <__retarget_lock_release_recursive>:
 800d0da:	4770      	bx	lr

0800d0dc <__swhatbuf_r>:
 800d0dc:	b570      	push	{r4, r5, r6, lr}
 800d0de:	460e      	mov	r6, r1
 800d0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e4:	2900      	cmp	r1, #0
 800d0e6:	b096      	sub	sp, #88	; 0x58
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	461d      	mov	r5, r3
 800d0ec:	da08      	bge.n	800d100 <__swhatbuf_r+0x24>
 800d0ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	602a      	str	r2, [r5, #0]
 800d0f6:	061a      	lsls	r2, r3, #24
 800d0f8:	d410      	bmi.n	800d11c <__swhatbuf_r+0x40>
 800d0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0fe:	e00e      	b.n	800d11e <__swhatbuf_r+0x42>
 800d100:	466a      	mov	r2, sp
 800d102:	f000 f903 	bl	800d30c <_fstat_r>
 800d106:	2800      	cmp	r0, #0
 800d108:	dbf1      	blt.n	800d0ee <__swhatbuf_r+0x12>
 800d10a:	9a01      	ldr	r2, [sp, #4]
 800d10c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d114:	425a      	negs	r2, r3
 800d116:	415a      	adcs	r2, r3
 800d118:	602a      	str	r2, [r5, #0]
 800d11a:	e7ee      	b.n	800d0fa <__swhatbuf_r+0x1e>
 800d11c:	2340      	movs	r3, #64	; 0x40
 800d11e:	2000      	movs	r0, #0
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	b016      	add	sp, #88	; 0x58
 800d124:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d128 <__smakebuf_r>:
 800d128:	898b      	ldrh	r3, [r1, #12]
 800d12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d12c:	079d      	lsls	r5, r3, #30
 800d12e:	4606      	mov	r6, r0
 800d130:	460c      	mov	r4, r1
 800d132:	d507      	bpl.n	800d144 <__smakebuf_r+0x1c>
 800d134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	6123      	str	r3, [r4, #16]
 800d13c:	2301      	movs	r3, #1
 800d13e:	6163      	str	r3, [r4, #20]
 800d140:	b002      	add	sp, #8
 800d142:	bd70      	pop	{r4, r5, r6, pc}
 800d144:	ab01      	add	r3, sp, #4
 800d146:	466a      	mov	r2, sp
 800d148:	f7ff ffc8 	bl	800d0dc <__swhatbuf_r>
 800d14c:	9900      	ldr	r1, [sp, #0]
 800d14e:	4605      	mov	r5, r0
 800d150:	4630      	mov	r0, r6
 800d152:	f7ff f963 	bl	800c41c <_malloc_r>
 800d156:	b948      	cbnz	r0, 800d16c <__smakebuf_r+0x44>
 800d158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d15c:	059a      	lsls	r2, r3, #22
 800d15e:	d4ef      	bmi.n	800d140 <__smakebuf_r+0x18>
 800d160:	f023 0303 	bic.w	r3, r3, #3
 800d164:	f043 0302 	orr.w	r3, r3, #2
 800d168:	81a3      	strh	r3, [r4, #12]
 800d16a:	e7e3      	b.n	800d134 <__smakebuf_r+0xc>
 800d16c:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <__smakebuf_r+0x7c>)
 800d16e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	6020      	str	r0, [r4, #0]
 800d174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d178:	81a3      	strh	r3, [r4, #12]
 800d17a:	9b00      	ldr	r3, [sp, #0]
 800d17c:	6163      	str	r3, [r4, #20]
 800d17e:	9b01      	ldr	r3, [sp, #4]
 800d180:	6120      	str	r0, [r4, #16]
 800d182:	b15b      	cbz	r3, 800d19c <__smakebuf_r+0x74>
 800d184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d188:	4630      	mov	r0, r6
 800d18a:	f000 f8d1 	bl	800d330 <_isatty_r>
 800d18e:	b128      	cbz	r0, 800d19c <__smakebuf_r+0x74>
 800d190:	89a3      	ldrh	r3, [r4, #12]
 800d192:	f023 0303 	bic.w	r3, r3, #3
 800d196:	f043 0301 	orr.w	r3, r3, #1
 800d19a:	81a3      	strh	r3, [r4, #12]
 800d19c:	89a0      	ldrh	r0, [r4, #12]
 800d19e:	4305      	orrs	r5, r0
 800d1a0:	81a5      	strh	r5, [r4, #12]
 800d1a2:	e7cd      	b.n	800d140 <__smakebuf_r+0x18>
 800d1a4:	0800cf35 	.word	0x0800cf35

0800d1a8 <_malloc_usable_size_r>:
 800d1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ac:	1f18      	subs	r0, r3, #4
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfbc      	itt	lt
 800d1b2:	580b      	ldrlt	r3, [r1, r0]
 800d1b4:	18c0      	addlt	r0, r0, r3
 800d1b6:	4770      	bx	lr

0800d1b8 <_raise_r>:
 800d1b8:	291f      	cmp	r1, #31
 800d1ba:	b538      	push	{r3, r4, r5, lr}
 800d1bc:	4604      	mov	r4, r0
 800d1be:	460d      	mov	r5, r1
 800d1c0:	d904      	bls.n	800d1cc <_raise_r+0x14>
 800d1c2:	2316      	movs	r3, #22
 800d1c4:	6003      	str	r3, [r0, #0]
 800d1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1ce:	b112      	cbz	r2, 800d1d6 <_raise_r+0x1e>
 800d1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1d4:	b94b      	cbnz	r3, 800d1ea <_raise_r+0x32>
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f000 f830 	bl	800d23c <_getpid_r>
 800d1dc:	462a      	mov	r2, r5
 800d1de:	4601      	mov	r1, r0
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1e6:	f000 b817 	b.w	800d218 <_kill_r>
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d00a      	beq.n	800d204 <_raise_r+0x4c>
 800d1ee:	1c59      	adds	r1, r3, #1
 800d1f0:	d103      	bne.n	800d1fa <_raise_r+0x42>
 800d1f2:	2316      	movs	r3, #22
 800d1f4:	6003      	str	r3, [r0, #0]
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	e7e7      	b.n	800d1ca <_raise_r+0x12>
 800d1fa:	2400      	movs	r4, #0
 800d1fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d200:	4628      	mov	r0, r5
 800d202:	4798      	blx	r3
 800d204:	2000      	movs	r0, #0
 800d206:	e7e0      	b.n	800d1ca <_raise_r+0x12>

0800d208 <raise>:
 800d208:	4b02      	ldr	r3, [pc, #8]	; (800d214 <raise+0xc>)
 800d20a:	4601      	mov	r1, r0
 800d20c:	6818      	ldr	r0, [r3, #0]
 800d20e:	f7ff bfd3 	b.w	800d1b8 <_raise_r>
 800d212:	bf00      	nop
 800d214:	20000088 	.word	0x20000088

0800d218 <_kill_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d07      	ldr	r5, [pc, #28]	; (800d238 <_kill_r+0x20>)
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	4608      	mov	r0, r1
 800d222:	4611      	mov	r1, r2
 800d224:	602b      	str	r3, [r5, #0]
 800d226:	f7f7 fb7b 	bl	8004920 <_kill>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	d102      	bne.n	800d234 <_kill_r+0x1c>
 800d22e:	682b      	ldr	r3, [r5, #0]
 800d230:	b103      	cbz	r3, 800d234 <_kill_r+0x1c>
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	bd38      	pop	{r3, r4, r5, pc}
 800d236:	bf00      	nop
 800d238:	20000b38 	.word	0x20000b38

0800d23c <_getpid_r>:
 800d23c:	f7f7 bb68 	b.w	8004910 <_getpid>

0800d240 <__sread>:
 800d240:	b510      	push	{r4, lr}
 800d242:	460c      	mov	r4, r1
 800d244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d248:	f000 f894 	bl	800d374 <_read_r>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	bfab      	itete	ge
 800d250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d252:	89a3      	ldrhlt	r3, [r4, #12]
 800d254:	181b      	addge	r3, r3, r0
 800d256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d25a:	bfac      	ite	ge
 800d25c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d25e:	81a3      	strhlt	r3, [r4, #12]
 800d260:	bd10      	pop	{r4, pc}

0800d262 <__swrite>:
 800d262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d266:	461f      	mov	r7, r3
 800d268:	898b      	ldrh	r3, [r1, #12]
 800d26a:	05db      	lsls	r3, r3, #23
 800d26c:	4605      	mov	r5, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	4616      	mov	r6, r2
 800d272:	d505      	bpl.n	800d280 <__swrite+0x1e>
 800d274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d278:	2302      	movs	r3, #2
 800d27a:	2200      	movs	r2, #0
 800d27c:	f000 f868 	bl	800d350 <_lseek_r>
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d28a:	81a3      	strh	r3, [r4, #12]
 800d28c:	4632      	mov	r2, r6
 800d28e:	463b      	mov	r3, r7
 800d290:	4628      	mov	r0, r5
 800d292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d296:	f000 b817 	b.w	800d2c8 <_write_r>

0800d29a <__sseek>:
 800d29a:	b510      	push	{r4, lr}
 800d29c:	460c      	mov	r4, r1
 800d29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a2:	f000 f855 	bl	800d350 <_lseek_r>
 800d2a6:	1c43      	adds	r3, r0, #1
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	bf15      	itete	ne
 800d2ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2b6:	81a3      	strheq	r3, [r4, #12]
 800d2b8:	bf18      	it	ne
 800d2ba:	81a3      	strhne	r3, [r4, #12]
 800d2bc:	bd10      	pop	{r4, pc}

0800d2be <__sclose>:
 800d2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c2:	f000 b813 	b.w	800d2ec <_close_r>
	...

0800d2c8 <_write_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d07      	ldr	r5, [pc, #28]	; (800d2e8 <_write_r+0x20>)
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	602a      	str	r2, [r5, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	f7f7 fb59 	bl	800498e <_write>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_write_r+0x1e>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_write_r+0x1e>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	20000b38 	.word	0x20000b38

0800d2ec <_close_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d06      	ldr	r5, [pc, #24]	; (800d308 <_close_r+0x1c>)
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4608      	mov	r0, r1
 800d2f6:	602b      	str	r3, [r5, #0]
 800d2f8:	f7f7 fb65 	bl	80049c6 <_close>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_close_r+0x1a>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_close_r+0x1a>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20000b38 	.word	0x20000b38

0800d30c <_fstat_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	; (800d32c <_fstat_r+0x20>)
 800d310:	2300      	movs	r3, #0
 800d312:	4604      	mov	r4, r0
 800d314:	4608      	mov	r0, r1
 800d316:	4611      	mov	r1, r2
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	f7f7 fb60 	bl	80049de <_fstat>
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	d102      	bne.n	800d328 <_fstat_r+0x1c>
 800d322:	682b      	ldr	r3, [r5, #0]
 800d324:	b103      	cbz	r3, 800d328 <_fstat_r+0x1c>
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	bd38      	pop	{r3, r4, r5, pc}
 800d32a:	bf00      	nop
 800d32c:	20000b38 	.word	0x20000b38

0800d330 <_isatty_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d06      	ldr	r5, [pc, #24]	; (800d34c <_isatty_r+0x1c>)
 800d334:	2300      	movs	r3, #0
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	f7f7 fb5f 	bl	80049fe <_isatty>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_isatty_r+0x1a>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_isatty_r+0x1a>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	20000b38 	.word	0x20000b38

0800d350 <_lseek_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d07      	ldr	r5, [pc, #28]	; (800d370 <_lseek_r+0x20>)
 800d354:	4604      	mov	r4, r0
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	602a      	str	r2, [r5, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	f7f7 fb58 	bl	8004a14 <_lseek>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_lseek_r+0x1e>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_lseek_r+0x1e>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	20000b38 	.word	0x20000b38

0800d374 <_read_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d07      	ldr	r5, [pc, #28]	; (800d394 <_read_r+0x20>)
 800d378:	4604      	mov	r4, r0
 800d37a:	4608      	mov	r0, r1
 800d37c:	4611      	mov	r1, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	602a      	str	r2, [r5, #0]
 800d382:	461a      	mov	r2, r3
 800d384:	f7f7 fae6 	bl	8004954 <_read>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_read_r+0x1e>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_read_r+0x1e>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	20000b38 	.word	0x20000b38

0800d398 <atan>:
 800d398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	ec55 4b10 	vmov	r4, r5, d0
 800d3a0:	4bc3      	ldr	r3, [pc, #780]	; (800d6b0 <atan+0x318>)
 800d3a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d3a6:	429e      	cmp	r6, r3
 800d3a8:	46ab      	mov	fp, r5
 800d3aa:	dd18      	ble.n	800d3de <atan+0x46>
 800d3ac:	4bc1      	ldr	r3, [pc, #772]	; (800d6b4 <atan+0x31c>)
 800d3ae:	429e      	cmp	r6, r3
 800d3b0:	dc01      	bgt.n	800d3b6 <atan+0x1e>
 800d3b2:	d109      	bne.n	800d3c8 <atan+0x30>
 800d3b4:	b144      	cbz	r4, 800d3c8 <atan+0x30>
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	462b      	mov	r3, r5
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	4629      	mov	r1, r5
 800d3be:	f7f2 ff85 	bl	80002cc <__adddf3>
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	460d      	mov	r5, r1
 800d3c6:	e006      	b.n	800d3d6 <atan+0x3e>
 800d3c8:	f1bb 0f00 	cmp.w	fp, #0
 800d3cc:	f300 8131 	bgt.w	800d632 <atan+0x29a>
 800d3d0:	a59b      	add	r5, pc, #620	; (adr r5, 800d640 <atan+0x2a8>)
 800d3d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d3d6:	ec45 4b10 	vmov	d0, r4, r5
 800d3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	4bb6      	ldr	r3, [pc, #728]	; (800d6b8 <atan+0x320>)
 800d3e0:	429e      	cmp	r6, r3
 800d3e2:	dc14      	bgt.n	800d40e <atan+0x76>
 800d3e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d3e8:	429e      	cmp	r6, r3
 800d3ea:	dc0d      	bgt.n	800d408 <atan+0x70>
 800d3ec:	a396      	add	r3, pc, #600	; (adr r3, 800d648 <atan+0x2b0>)
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	ee10 0a10 	vmov	r0, s0
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	f7f2 ff68 	bl	80002cc <__adddf3>
 800d3fc:	4baf      	ldr	r3, [pc, #700]	; (800d6bc <atan+0x324>)
 800d3fe:	2200      	movs	r2, #0
 800d400:	f7f3 fbaa 	bl	8000b58 <__aeabi_dcmpgt>
 800d404:	2800      	cmp	r0, #0
 800d406:	d1e6      	bne.n	800d3d6 <atan+0x3e>
 800d408:	f04f 3aff 	mov.w	sl, #4294967295
 800d40c:	e02b      	b.n	800d466 <atan+0xce>
 800d40e:	f000 f963 	bl	800d6d8 <fabs>
 800d412:	4bab      	ldr	r3, [pc, #684]	; (800d6c0 <atan+0x328>)
 800d414:	429e      	cmp	r6, r3
 800d416:	ec55 4b10 	vmov	r4, r5, d0
 800d41a:	f300 80bf 	bgt.w	800d59c <atan+0x204>
 800d41e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d422:	429e      	cmp	r6, r3
 800d424:	f300 80a0 	bgt.w	800d568 <atan+0x1d0>
 800d428:	ee10 2a10 	vmov	r2, s0
 800d42c:	ee10 0a10 	vmov	r0, s0
 800d430:	462b      	mov	r3, r5
 800d432:	4629      	mov	r1, r5
 800d434:	f7f2 ff4a 	bl	80002cc <__adddf3>
 800d438:	4ba0      	ldr	r3, [pc, #640]	; (800d6bc <atan+0x324>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	f7f2 ff44 	bl	80002c8 <__aeabi_dsub>
 800d440:	2200      	movs	r2, #0
 800d442:	4606      	mov	r6, r0
 800d444:	460f      	mov	r7, r1
 800d446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d44a:	4620      	mov	r0, r4
 800d44c:	4629      	mov	r1, r5
 800d44e:	f7f2 ff3d 	bl	80002cc <__adddf3>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4630      	mov	r0, r6
 800d458:	4639      	mov	r1, r7
 800d45a:	f7f3 fa17 	bl	800088c <__aeabi_ddiv>
 800d45e:	f04f 0a00 	mov.w	sl, #0
 800d462:	4604      	mov	r4, r0
 800d464:	460d      	mov	r5, r1
 800d466:	4622      	mov	r2, r4
 800d468:	462b      	mov	r3, r5
 800d46a:	4620      	mov	r0, r4
 800d46c:	4629      	mov	r1, r5
 800d46e:	f7f3 f8e3 	bl	8000638 <__aeabi_dmul>
 800d472:	4602      	mov	r2, r0
 800d474:	460b      	mov	r3, r1
 800d476:	4680      	mov	r8, r0
 800d478:	4689      	mov	r9, r1
 800d47a:	f7f3 f8dd 	bl	8000638 <__aeabi_dmul>
 800d47e:	a374      	add	r3, pc, #464	; (adr r3, 800d650 <atan+0x2b8>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	4606      	mov	r6, r0
 800d486:	460f      	mov	r7, r1
 800d488:	f7f3 f8d6 	bl	8000638 <__aeabi_dmul>
 800d48c:	a372      	add	r3, pc, #456	; (adr r3, 800d658 <atan+0x2c0>)
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	f7f2 ff1b 	bl	80002cc <__adddf3>
 800d496:	4632      	mov	r2, r6
 800d498:	463b      	mov	r3, r7
 800d49a:	f7f3 f8cd 	bl	8000638 <__aeabi_dmul>
 800d49e:	a370      	add	r3, pc, #448	; (adr r3, 800d660 <atan+0x2c8>)
 800d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a4:	f7f2 ff12 	bl	80002cc <__adddf3>
 800d4a8:	4632      	mov	r2, r6
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	f7f3 f8c4 	bl	8000638 <__aeabi_dmul>
 800d4b0:	a36d      	add	r3, pc, #436	; (adr r3, 800d668 <atan+0x2d0>)
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f2 ff09 	bl	80002cc <__adddf3>
 800d4ba:	4632      	mov	r2, r6
 800d4bc:	463b      	mov	r3, r7
 800d4be:	f7f3 f8bb 	bl	8000638 <__aeabi_dmul>
 800d4c2:	a36b      	add	r3, pc, #428	; (adr r3, 800d670 <atan+0x2d8>)
 800d4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c8:	f7f2 ff00 	bl	80002cc <__adddf3>
 800d4cc:	4632      	mov	r2, r6
 800d4ce:	463b      	mov	r3, r7
 800d4d0:	f7f3 f8b2 	bl	8000638 <__aeabi_dmul>
 800d4d4:	a368      	add	r3, pc, #416	; (adr r3, 800d678 <atan+0x2e0>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	f7f2 fef7 	bl	80002cc <__adddf3>
 800d4de:	4642      	mov	r2, r8
 800d4e0:	464b      	mov	r3, r9
 800d4e2:	f7f3 f8a9 	bl	8000638 <__aeabi_dmul>
 800d4e6:	a366      	add	r3, pc, #408	; (adr r3, 800d680 <atan+0x2e8>)
 800d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ec:	4680      	mov	r8, r0
 800d4ee:	4689      	mov	r9, r1
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	4639      	mov	r1, r7
 800d4f4:	f7f3 f8a0 	bl	8000638 <__aeabi_dmul>
 800d4f8:	a363      	add	r3, pc, #396	; (adr r3, 800d688 <atan+0x2f0>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	f7f2 fee3 	bl	80002c8 <__aeabi_dsub>
 800d502:	4632      	mov	r2, r6
 800d504:	463b      	mov	r3, r7
 800d506:	f7f3 f897 	bl	8000638 <__aeabi_dmul>
 800d50a:	a361      	add	r3, pc, #388	; (adr r3, 800d690 <atan+0x2f8>)
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	f7f2 feda 	bl	80002c8 <__aeabi_dsub>
 800d514:	4632      	mov	r2, r6
 800d516:	463b      	mov	r3, r7
 800d518:	f7f3 f88e 	bl	8000638 <__aeabi_dmul>
 800d51c:	a35e      	add	r3, pc, #376	; (adr r3, 800d698 <atan+0x300>)
 800d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d522:	f7f2 fed1 	bl	80002c8 <__aeabi_dsub>
 800d526:	4632      	mov	r2, r6
 800d528:	463b      	mov	r3, r7
 800d52a:	f7f3 f885 	bl	8000638 <__aeabi_dmul>
 800d52e:	a35c      	add	r3, pc, #368	; (adr r3, 800d6a0 <atan+0x308>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	f7f2 fec8 	bl	80002c8 <__aeabi_dsub>
 800d538:	4632      	mov	r2, r6
 800d53a:	463b      	mov	r3, r7
 800d53c:	f7f3 f87c 	bl	8000638 <__aeabi_dmul>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4640      	mov	r0, r8
 800d546:	4649      	mov	r1, r9
 800d548:	f7f2 fec0 	bl	80002cc <__adddf3>
 800d54c:	4622      	mov	r2, r4
 800d54e:	462b      	mov	r3, r5
 800d550:	f7f3 f872 	bl	8000638 <__aeabi_dmul>
 800d554:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	d14b      	bne.n	800d5f6 <atan+0x25e>
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	f7f2 feb1 	bl	80002c8 <__aeabi_dsub>
 800d566:	e72c      	b.n	800d3c2 <atan+0x2a>
 800d568:	ee10 0a10 	vmov	r0, s0
 800d56c:	4b53      	ldr	r3, [pc, #332]	; (800d6bc <atan+0x324>)
 800d56e:	2200      	movs	r2, #0
 800d570:	4629      	mov	r1, r5
 800d572:	f7f2 fea9 	bl	80002c8 <__aeabi_dsub>
 800d576:	4b51      	ldr	r3, [pc, #324]	; (800d6bc <atan+0x324>)
 800d578:	4606      	mov	r6, r0
 800d57a:	460f      	mov	r7, r1
 800d57c:	2200      	movs	r2, #0
 800d57e:	4620      	mov	r0, r4
 800d580:	4629      	mov	r1, r5
 800d582:	f7f2 fea3 	bl	80002cc <__adddf3>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4630      	mov	r0, r6
 800d58c:	4639      	mov	r1, r7
 800d58e:	f7f3 f97d 	bl	800088c <__aeabi_ddiv>
 800d592:	f04f 0a01 	mov.w	sl, #1
 800d596:	4604      	mov	r4, r0
 800d598:	460d      	mov	r5, r1
 800d59a:	e764      	b.n	800d466 <atan+0xce>
 800d59c:	4b49      	ldr	r3, [pc, #292]	; (800d6c4 <atan+0x32c>)
 800d59e:	429e      	cmp	r6, r3
 800d5a0:	da1d      	bge.n	800d5de <atan+0x246>
 800d5a2:	ee10 0a10 	vmov	r0, s0
 800d5a6:	4b48      	ldr	r3, [pc, #288]	; (800d6c8 <atan+0x330>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7f2 fe8c 	bl	80002c8 <__aeabi_dsub>
 800d5b0:	4b45      	ldr	r3, [pc, #276]	; (800d6c8 <atan+0x330>)
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	460f      	mov	r7, r1
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	f7f3 f83c 	bl	8000638 <__aeabi_dmul>
 800d5c0:	4b3e      	ldr	r3, [pc, #248]	; (800d6bc <atan+0x324>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f7f2 fe82 	bl	80002cc <__adddf3>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	f7f3 f95c 	bl	800088c <__aeabi_ddiv>
 800d5d4:	f04f 0a02 	mov.w	sl, #2
 800d5d8:	4604      	mov	r4, r0
 800d5da:	460d      	mov	r5, r1
 800d5dc:	e743      	b.n	800d466 <atan+0xce>
 800d5de:	462b      	mov	r3, r5
 800d5e0:	ee10 2a10 	vmov	r2, s0
 800d5e4:	4939      	ldr	r1, [pc, #228]	; (800d6cc <atan+0x334>)
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	f7f3 f950 	bl	800088c <__aeabi_ddiv>
 800d5ec:	f04f 0a03 	mov.w	sl, #3
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	e737      	b.n	800d466 <atan+0xce>
 800d5f6:	4b36      	ldr	r3, [pc, #216]	; (800d6d0 <atan+0x338>)
 800d5f8:	4e36      	ldr	r6, [pc, #216]	; (800d6d4 <atan+0x33c>)
 800d5fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d5fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d602:	e9da 2300 	ldrd	r2, r3, [sl]
 800d606:	f7f2 fe5f 	bl	80002c8 <__aeabi_dsub>
 800d60a:	4622      	mov	r2, r4
 800d60c:	462b      	mov	r3, r5
 800d60e:	f7f2 fe5b 	bl	80002c8 <__aeabi_dsub>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d61a:	f7f2 fe55 	bl	80002c8 <__aeabi_dsub>
 800d61e:	f1bb 0f00 	cmp.w	fp, #0
 800d622:	4604      	mov	r4, r0
 800d624:	460d      	mov	r5, r1
 800d626:	f6bf aed6 	bge.w	800d3d6 <atan+0x3e>
 800d62a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d62e:	461d      	mov	r5, r3
 800d630:	e6d1      	b.n	800d3d6 <atan+0x3e>
 800d632:	a51d      	add	r5, pc, #116	; (adr r5, 800d6a8 <atan+0x310>)
 800d634:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d638:	e6cd      	b.n	800d3d6 <atan+0x3e>
 800d63a:	bf00      	nop
 800d63c:	f3af 8000 	nop.w
 800d640:	54442d18 	.word	0x54442d18
 800d644:	bff921fb 	.word	0xbff921fb
 800d648:	8800759c 	.word	0x8800759c
 800d64c:	7e37e43c 	.word	0x7e37e43c
 800d650:	e322da11 	.word	0xe322da11
 800d654:	3f90ad3a 	.word	0x3f90ad3a
 800d658:	24760deb 	.word	0x24760deb
 800d65c:	3fa97b4b 	.word	0x3fa97b4b
 800d660:	a0d03d51 	.word	0xa0d03d51
 800d664:	3fb10d66 	.word	0x3fb10d66
 800d668:	c54c206e 	.word	0xc54c206e
 800d66c:	3fb745cd 	.word	0x3fb745cd
 800d670:	920083ff 	.word	0x920083ff
 800d674:	3fc24924 	.word	0x3fc24924
 800d678:	5555550d 	.word	0x5555550d
 800d67c:	3fd55555 	.word	0x3fd55555
 800d680:	2c6a6c2f 	.word	0x2c6a6c2f
 800d684:	bfa2b444 	.word	0xbfa2b444
 800d688:	52defd9a 	.word	0x52defd9a
 800d68c:	3fadde2d 	.word	0x3fadde2d
 800d690:	af749a6d 	.word	0xaf749a6d
 800d694:	3fb3b0f2 	.word	0x3fb3b0f2
 800d698:	fe231671 	.word	0xfe231671
 800d69c:	3fbc71c6 	.word	0x3fbc71c6
 800d6a0:	9998ebc4 	.word	0x9998ebc4
 800d6a4:	3fc99999 	.word	0x3fc99999
 800d6a8:	54442d18 	.word	0x54442d18
 800d6ac:	3ff921fb 	.word	0x3ff921fb
 800d6b0:	440fffff 	.word	0x440fffff
 800d6b4:	7ff00000 	.word	0x7ff00000
 800d6b8:	3fdbffff 	.word	0x3fdbffff
 800d6bc:	3ff00000 	.word	0x3ff00000
 800d6c0:	3ff2ffff 	.word	0x3ff2ffff
 800d6c4:	40038000 	.word	0x40038000
 800d6c8:	3ff80000 	.word	0x3ff80000
 800d6cc:	bff00000 	.word	0xbff00000
 800d6d0:	0800edb0 	.word	0x0800edb0
 800d6d4:	0800ed90 	.word	0x0800ed90

0800d6d8 <fabs>:
 800d6d8:	ec51 0b10 	vmov	r0, r1, d0
 800d6dc:	ee10 2a10 	vmov	r2, s0
 800d6e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6e4:	ec43 2b10 	vmov	d0, r2, r3
 800d6e8:	4770      	bx	lr
 800d6ea:	0000      	movs	r0, r0
 800d6ec:	0000      	movs	r0, r0
	...

0800d6f0 <tan>:
 800d6f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6f2:	ec53 2b10 	vmov	r2, r3, d0
 800d6f6:	4816      	ldr	r0, [pc, #88]	; (800d750 <tan+0x60>)
 800d6f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d6fc:	4281      	cmp	r1, r0
 800d6fe:	dc07      	bgt.n	800d710 <tan+0x20>
 800d700:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800d748 <tan+0x58>
 800d704:	2001      	movs	r0, #1
 800d706:	b005      	add	sp, #20
 800d708:	f85d eb04 	ldr.w	lr, [sp], #4
 800d70c:	f000 bd80 	b.w	800e210 <__kernel_tan>
 800d710:	4810      	ldr	r0, [pc, #64]	; (800d754 <tan+0x64>)
 800d712:	4281      	cmp	r1, r0
 800d714:	dd09      	ble.n	800d72a <tan+0x3a>
 800d716:	ee10 0a10 	vmov	r0, s0
 800d71a:	4619      	mov	r1, r3
 800d71c:	f7f2 fdd4 	bl	80002c8 <__aeabi_dsub>
 800d720:	ec41 0b10 	vmov	d0, r0, r1
 800d724:	b005      	add	sp, #20
 800d726:	f85d fb04 	ldr.w	pc, [sp], #4
 800d72a:	4668      	mov	r0, sp
 800d72c:	f000 f814 	bl	800d758 <__ieee754_rem_pio2>
 800d730:	0040      	lsls	r0, r0, #1
 800d732:	f000 0002 	and.w	r0, r0, #2
 800d736:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d73a:	ed9d 0b00 	vldr	d0, [sp]
 800d73e:	f1c0 0001 	rsb	r0, r0, #1
 800d742:	f000 fd65 	bl	800e210 <__kernel_tan>
 800d746:	e7ed      	b.n	800d724 <tan+0x34>
	...
 800d750:	3fe921fb 	.word	0x3fe921fb
 800d754:	7fefffff 	.word	0x7fefffff

0800d758 <__ieee754_rem_pio2>:
 800d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	ed2d 8b02 	vpush	{d8}
 800d760:	ec55 4b10 	vmov	r4, r5, d0
 800d764:	4bca      	ldr	r3, [pc, #808]	; (800da90 <__ieee754_rem_pio2+0x338>)
 800d766:	b08b      	sub	sp, #44	; 0x2c
 800d768:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d76c:	4598      	cmp	r8, r3
 800d76e:	4682      	mov	sl, r0
 800d770:	9502      	str	r5, [sp, #8]
 800d772:	dc08      	bgt.n	800d786 <__ieee754_rem_pio2+0x2e>
 800d774:	2200      	movs	r2, #0
 800d776:	2300      	movs	r3, #0
 800d778:	ed80 0b00 	vstr	d0, [r0]
 800d77c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d780:	f04f 0b00 	mov.w	fp, #0
 800d784:	e028      	b.n	800d7d8 <__ieee754_rem_pio2+0x80>
 800d786:	4bc3      	ldr	r3, [pc, #780]	; (800da94 <__ieee754_rem_pio2+0x33c>)
 800d788:	4598      	cmp	r8, r3
 800d78a:	dc78      	bgt.n	800d87e <__ieee754_rem_pio2+0x126>
 800d78c:	9b02      	ldr	r3, [sp, #8]
 800d78e:	4ec2      	ldr	r6, [pc, #776]	; (800da98 <__ieee754_rem_pio2+0x340>)
 800d790:	2b00      	cmp	r3, #0
 800d792:	ee10 0a10 	vmov	r0, s0
 800d796:	a3b0      	add	r3, pc, #704	; (adr r3, 800da58 <__ieee754_rem_pio2+0x300>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	4629      	mov	r1, r5
 800d79e:	dd39      	ble.n	800d814 <__ieee754_rem_pio2+0xbc>
 800d7a0:	f7f2 fd92 	bl	80002c8 <__aeabi_dsub>
 800d7a4:	45b0      	cmp	r8, r6
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	460d      	mov	r5, r1
 800d7aa:	d01b      	beq.n	800d7e4 <__ieee754_rem_pio2+0x8c>
 800d7ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800da60 <__ieee754_rem_pio2+0x308>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd89 	bl	80002c8 <__aeabi_dsub>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	e9ca 2300 	strd	r2, r3, [sl]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f2 fd81 	bl	80002c8 <__aeabi_dsub>
 800d7c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800da60 <__ieee754_rem_pio2+0x308>)
 800d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7cc:	f7f2 fd7c 	bl	80002c8 <__aeabi_dsub>
 800d7d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d7d4:	f04f 0b01 	mov.w	fp, #1
 800d7d8:	4658      	mov	r0, fp
 800d7da:	b00b      	add	sp, #44	; 0x2c
 800d7dc:	ecbd 8b02 	vpop	{d8}
 800d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800da68 <__ieee754_rem_pio2+0x310>)
 800d7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ea:	f7f2 fd6d 	bl	80002c8 <__aeabi_dsub>
 800d7ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800da70 <__ieee754_rem_pio2+0x318>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	460d      	mov	r5, r1
 800d7f8:	f7f2 fd66 	bl	80002c8 <__aeabi_dsub>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	460b      	mov	r3, r1
 800d800:	e9ca 2300 	strd	r2, r3, [sl]
 800d804:	4620      	mov	r0, r4
 800d806:	4629      	mov	r1, r5
 800d808:	f7f2 fd5e 	bl	80002c8 <__aeabi_dsub>
 800d80c:	a398      	add	r3, pc, #608	; (adr r3, 800da70 <__ieee754_rem_pio2+0x318>)
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	e7db      	b.n	800d7cc <__ieee754_rem_pio2+0x74>
 800d814:	f7f2 fd5a 	bl	80002cc <__adddf3>
 800d818:	45b0      	cmp	r8, r6
 800d81a:	4604      	mov	r4, r0
 800d81c:	460d      	mov	r5, r1
 800d81e:	d016      	beq.n	800d84e <__ieee754_rem_pio2+0xf6>
 800d820:	a38f      	add	r3, pc, #572	; (adr r3, 800da60 <__ieee754_rem_pio2+0x308>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	f7f2 fd51 	bl	80002cc <__adddf3>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	e9ca 2300 	strd	r2, r3, [sl]
 800d832:	4620      	mov	r0, r4
 800d834:	4629      	mov	r1, r5
 800d836:	f7f2 fd47 	bl	80002c8 <__aeabi_dsub>
 800d83a:	a389      	add	r3, pc, #548	; (adr r3, 800da60 <__ieee754_rem_pio2+0x308>)
 800d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d840:	f7f2 fd44 	bl	80002cc <__adddf3>
 800d844:	f04f 3bff 	mov.w	fp, #4294967295
 800d848:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d84c:	e7c4      	b.n	800d7d8 <__ieee754_rem_pio2+0x80>
 800d84e:	a386      	add	r3, pc, #536	; (adr r3, 800da68 <__ieee754_rem_pio2+0x310>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f7f2 fd3a 	bl	80002cc <__adddf3>
 800d858:	a385      	add	r3, pc, #532	; (adr r3, 800da70 <__ieee754_rem_pio2+0x318>)
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	4604      	mov	r4, r0
 800d860:	460d      	mov	r5, r1
 800d862:	f7f2 fd33 	bl	80002cc <__adddf3>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	e9ca 2300 	strd	r2, r3, [sl]
 800d86e:	4620      	mov	r0, r4
 800d870:	4629      	mov	r1, r5
 800d872:	f7f2 fd29 	bl	80002c8 <__aeabi_dsub>
 800d876:	a37e      	add	r3, pc, #504	; (adr r3, 800da70 <__ieee754_rem_pio2+0x318>)
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	e7e0      	b.n	800d840 <__ieee754_rem_pio2+0xe8>
 800d87e:	4b87      	ldr	r3, [pc, #540]	; (800da9c <__ieee754_rem_pio2+0x344>)
 800d880:	4598      	cmp	r8, r3
 800d882:	f300 80d9 	bgt.w	800da38 <__ieee754_rem_pio2+0x2e0>
 800d886:	f7ff ff27 	bl	800d6d8 <fabs>
 800d88a:	ec55 4b10 	vmov	r4, r5, d0
 800d88e:	ee10 0a10 	vmov	r0, s0
 800d892:	a379      	add	r3, pc, #484	; (adr r3, 800da78 <__ieee754_rem_pio2+0x320>)
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	4629      	mov	r1, r5
 800d89a:	f7f2 fecd 	bl	8000638 <__aeabi_dmul>
 800d89e:	4b80      	ldr	r3, [pc, #512]	; (800daa0 <__ieee754_rem_pio2+0x348>)
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f7f2 fd13 	bl	80002cc <__adddf3>
 800d8a6:	f7f3 f977 	bl	8000b98 <__aeabi_d2iz>
 800d8aa:	4683      	mov	fp, r0
 800d8ac:	f7f2 fe5a 	bl	8000564 <__aeabi_i2d>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	ec43 2b18 	vmov	d8, r2, r3
 800d8b8:	a367      	add	r3, pc, #412	; (adr r3, 800da58 <__ieee754_rem_pio2+0x300>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f2 febb 	bl	8000638 <__aeabi_dmul>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7f2 fcfd 	bl	80002c8 <__aeabi_dsub>
 800d8ce:	a364      	add	r3, pc, #400	; (adr r3, 800da60 <__ieee754_rem_pio2+0x308>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	4606      	mov	r6, r0
 800d8d6:	460f      	mov	r7, r1
 800d8d8:	ec51 0b18 	vmov	r0, r1, d8
 800d8dc:	f7f2 feac 	bl	8000638 <__aeabi_dmul>
 800d8e0:	f1bb 0f1f 	cmp.w	fp, #31
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	460d      	mov	r5, r1
 800d8e8:	dc0d      	bgt.n	800d906 <__ieee754_rem_pio2+0x1ae>
 800d8ea:	4b6e      	ldr	r3, [pc, #440]	; (800daa4 <__ieee754_rem_pio2+0x34c>)
 800d8ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f4:	4543      	cmp	r3, r8
 800d8f6:	d006      	beq.n	800d906 <__ieee754_rem_pio2+0x1ae>
 800d8f8:	4622      	mov	r2, r4
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4639      	mov	r1, r7
 800d900:	f7f2 fce2 	bl	80002c8 <__aeabi_dsub>
 800d904:	e00f      	b.n	800d926 <__ieee754_rem_pio2+0x1ce>
 800d906:	462b      	mov	r3, r5
 800d908:	4622      	mov	r2, r4
 800d90a:	4630      	mov	r0, r6
 800d90c:	4639      	mov	r1, r7
 800d90e:	f7f2 fcdb 	bl	80002c8 <__aeabi_dsub>
 800d912:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d916:	9303      	str	r3, [sp, #12]
 800d918:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d91c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d920:	f1b8 0f10 	cmp.w	r8, #16
 800d924:	dc02      	bgt.n	800d92c <__ieee754_rem_pio2+0x1d4>
 800d926:	e9ca 0100 	strd	r0, r1, [sl]
 800d92a:	e039      	b.n	800d9a0 <__ieee754_rem_pio2+0x248>
 800d92c:	a34e      	add	r3, pc, #312	; (adr r3, 800da68 <__ieee754_rem_pio2+0x310>)
 800d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d932:	ec51 0b18 	vmov	r0, r1, d8
 800d936:	f7f2 fe7f 	bl	8000638 <__aeabi_dmul>
 800d93a:	4604      	mov	r4, r0
 800d93c:	460d      	mov	r5, r1
 800d93e:	4602      	mov	r2, r0
 800d940:	460b      	mov	r3, r1
 800d942:	4630      	mov	r0, r6
 800d944:	4639      	mov	r1, r7
 800d946:	f7f2 fcbf 	bl	80002c8 <__aeabi_dsub>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4680      	mov	r8, r0
 800d950:	4689      	mov	r9, r1
 800d952:	4630      	mov	r0, r6
 800d954:	4639      	mov	r1, r7
 800d956:	f7f2 fcb7 	bl	80002c8 <__aeabi_dsub>
 800d95a:	4622      	mov	r2, r4
 800d95c:	462b      	mov	r3, r5
 800d95e:	f7f2 fcb3 	bl	80002c8 <__aeabi_dsub>
 800d962:	a343      	add	r3, pc, #268	; (adr r3, 800da70 <__ieee754_rem_pio2+0x318>)
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	4604      	mov	r4, r0
 800d96a:	460d      	mov	r5, r1
 800d96c:	ec51 0b18 	vmov	r0, r1, d8
 800d970:	f7f2 fe62 	bl	8000638 <__aeabi_dmul>
 800d974:	4622      	mov	r2, r4
 800d976:	462b      	mov	r3, r5
 800d978:	f7f2 fca6 	bl	80002c8 <__aeabi_dsub>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	4604      	mov	r4, r0
 800d982:	460d      	mov	r5, r1
 800d984:	4640      	mov	r0, r8
 800d986:	4649      	mov	r1, r9
 800d988:	f7f2 fc9e 	bl	80002c8 <__aeabi_dsub>
 800d98c:	9a03      	ldr	r2, [sp, #12]
 800d98e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	2b31      	cmp	r3, #49	; 0x31
 800d996:	dc24      	bgt.n	800d9e2 <__ieee754_rem_pio2+0x28a>
 800d998:	e9ca 0100 	strd	r0, r1, [sl]
 800d99c:	4646      	mov	r6, r8
 800d99e:	464f      	mov	r7, r9
 800d9a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	4642      	mov	r2, r8
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f7f2 fc8c 	bl	80002c8 <__aeabi_dsub>
 800d9b0:	462b      	mov	r3, r5
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	f7f2 fc88 	bl	80002c8 <__aeabi_dsub>
 800d9b8:	9b02      	ldr	r3, [sp, #8]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d9c0:	f6bf af0a 	bge.w	800d7d8 <__ieee754_rem_pio2+0x80>
 800d9c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800d9cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9d0:	f8ca 8000 	str.w	r8, [sl]
 800d9d4:	f8ca 0008 	str.w	r0, [sl, #8]
 800d9d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800d9dc:	f1cb 0b00 	rsb	fp, fp, #0
 800d9e0:	e6fa      	b.n	800d7d8 <__ieee754_rem_pio2+0x80>
 800d9e2:	a327      	add	r3, pc, #156	; (adr r3, 800da80 <__ieee754_rem_pio2+0x328>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	ec51 0b18 	vmov	r0, r1, d8
 800d9ec:	f7f2 fe24 	bl	8000638 <__aeabi_dmul>
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	460d      	mov	r5, r1
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	f7f2 fc64 	bl	80002c8 <__aeabi_dsub>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	4606      	mov	r6, r0
 800da06:	460f      	mov	r7, r1
 800da08:	4640      	mov	r0, r8
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f2 fc5c 	bl	80002c8 <__aeabi_dsub>
 800da10:	4622      	mov	r2, r4
 800da12:	462b      	mov	r3, r5
 800da14:	f7f2 fc58 	bl	80002c8 <__aeabi_dsub>
 800da18:	a31b      	add	r3, pc, #108	; (adr r3, 800da88 <__ieee754_rem_pio2+0x330>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	4604      	mov	r4, r0
 800da20:	460d      	mov	r5, r1
 800da22:	ec51 0b18 	vmov	r0, r1, d8
 800da26:	f7f2 fe07 	bl	8000638 <__aeabi_dmul>
 800da2a:	4622      	mov	r2, r4
 800da2c:	462b      	mov	r3, r5
 800da2e:	f7f2 fc4b 	bl	80002c8 <__aeabi_dsub>
 800da32:	4604      	mov	r4, r0
 800da34:	460d      	mov	r5, r1
 800da36:	e75f      	b.n	800d8f8 <__ieee754_rem_pio2+0x1a0>
 800da38:	4b1b      	ldr	r3, [pc, #108]	; (800daa8 <__ieee754_rem_pio2+0x350>)
 800da3a:	4598      	cmp	r8, r3
 800da3c:	dd36      	ble.n	800daac <__ieee754_rem_pio2+0x354>
 800da3e:	ee10 2a10 	vmov	r2, s0
 800da42:	462b      	mov	r3, r5
 800da44:	4620      	mov	r0, r4
 800da46:	4629      	mov	r1, r5
 800da48:	f7f2 fc3e 	bl	80002c8 <__aeabi_dsub>
 800da4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da50:	e9ca 0100 	strd	r0, r1, [sl]
 800da54:	e694      	b.n	800d780 <__ieee754_rem_pio2+0x28>
 800da56:	bf00      	nop
 800da58:	54400000 	.word	0x54400000
 800da5c:	3ff921fb 	.word	0x3ff921fb
 800da60:	1a626331 	.word	0x1a626331
 800da64:	3dd0b461 	.word	0x3dd0b461
 800da68:	1a600000 	.word	0x1a600000
 800da6c:	3dd0b461 	.word	0x3dd0b461
 800da70:	2e037073 	.word	0x2e037073
 800da74:	3ba3198a 	.word	0x3ba3198a
 800da78:	6dc9c883 	.word	0x6dc9c883
 800da7c:	3fe45f30 	.word	0x3fe45f30
 800da80:	2e000000 	.word	0x2e000000
 800da84:	3ba3198a 	.word	0x3ba3198a
 800da88:	252049c1 	.word	0x252049c1
 800da8c:	397b839a 	.word	0x397b839a
 800da90:	3fe921fb 	.word	0x3fe921fb
 800da94:	4002d97b 	.word	0x4002d97b
 800da98:	3ff921fb 	.word	0x3ff921fb
 800da9c:	413921fb 	.word	0x413921fb
 800daa0:	3fe00000 	.word	0x3fe00000
 800daa4:	0800edd0 	.word	0x0800edd0
 800daa8:	7fefffff 	.word	0x7fefffff
 800daac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dab0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dab4:	ee10 0a10 	vmov	r0, s0
 800dab8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dabc:	ee10 6a10 	vmov	r6, s0
 800dac0:	460f      	mov	r7, r1
 800dac2:	f7f3 f869 	bl	8000b98 <__aeabi_d2iz>
 800dac6:	f7f2 fd4d 	bl	8000564 <__aeabi_i2d>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4630      	mov	r0, r6
 800dad0:	4639      	mov	r1, r7
 800dad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dad6:	f7f2 fbf7 	bl	80002c8 <__aeabi_dsub>
 800dada:	4b23      	ldr	r3, [pc, #140]	; (800db68 <__ieee754_rem_pio2+0x410>)
 800dadc:	2200      	movs	r2, #0
 800dade:	f7f2 fdab 	bl	8000638 <__aeabi_dmul>
 800dae2:	460f      	mov	r7, r1
 800dae4:	4606      	mov	r6, r0
 800dae6:	f7f3 f857 	bl	8000b98 <__aeabi_d2iz>
 800daea:	f7f2 fd3b 	bl	8000564 <__aeabi_i2d>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4630      	mov	r0, r6
 800daf4:	4639      	mov	r1, r7
 800daf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dafa:	f7f2 fbe5 	bl	80002c8 <__aeabi_dsub>
 800dafe:	4b1a      	ldr	r3, [pc, #104]	; (800db68 <__ieee754_rem_pio2+0x410>)
 800db00:	2200      	movs	r2, #0
 800db02:	f7f2 fd99 	bl	8000638 <__aeabi_dmul>
 800db06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db0a:	ad04      	add	r5, sp, #16
 800db0c:	f04f 0803 	mov.w	r8, #3
 800db10:	46a9      	mov	r9, r5
 800db12:	2600      	movs	r6, #0
 800db14:	2700      	movs	r7, #0
 800db16:	4632      	mov	r2, r6
 800db18:	463b      	mov	r3, r7
 800db1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800db1e:	46c3      	mov	fp, r8
 800db20:	3d08      	subs	r5, #8
 800db22:	f108 38ff 	add.w	r8, r8, #4294967295
 800db26:	f7f2 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d1f3      	bne.n	800db16 <__ieee754_rem_pio2+0x3be>
 800db2e:	4b0f      	ldr	r3, [pc, #60]	; (800db6c <__ieee754_rem_pio2+0x414>)
 800db30:	9301      	str	r3, [sp, #4]
 800db32:	2302      	movs	r3, #2
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	4622      	mov	r2, r4
 800db38:	465b      	mov	r3, fp
 800db3a:	4651      	mov	r1, sl
 800db3c:	4648      	mov	r0, r9
 800db3e:	f000 f817 	bl	800db70 <__kernel_rem_pio2>
 800db42:	9b02      	ldr	r3, [sp, #8]
 800db44:	2b00      	cmp	r3, #0
 800db46:	4683      	mov	fp, r0
 800db48:	f6bf ae46 	bge.w	800d7d8 <__ieee754_rem_pio2+0x80>
 800db4c:	e9da 2100 	ldrd	r2, r1, [sl]
 800db50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db54:	e9ca 2300 	strd	r2, r3, [sl]
 800db58:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800db5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db60:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800db64:	e73a      	b.n	800d9dc <__ieee754_rem_pio2+0x284>
 800db66:	bf00      	nop
 800db68:	41700000 	.word	0x41700000
 800db6c:	0800ee50 	.word	0x0800ee50

0800db70 <__kernel_rem_pio2>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	ed2d 8b02 	vpush	{d8}
 800db78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800db7c:	f112 0f14 	cmn.w	r2, #20
 800db80:	9308      	str	r3, [sp, #32]
 800db82:	9101      	str	r1, [sp, #4]
 800db84:	4bc4      	ldr	r3, [pc, #784]	; (800de98 <__kernel_rem_pio2+0x328>)
 800db86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800db88:	900b      	str	r0, [sp, #44]	; 0x2c
 800db8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db8e:	9302      	str	r3, [sp, #8]
 800db90:	9b08      	ldr	r3, [sp, #32]
 800db92:	f103 33ff 	add.w	r3, r3, #4294967295
 800db96:	bfa8      	it	ge
 800db98:	1ed4      	subge	r4, r2, #3
 800db9a:	9306      	str	r3, [sp, #24]
 800db9c:	bfb2      	itee	lt
 800db9e:	2400      	movlt	r4, #0
 800dba0:	2318      	movge	r3, #24
 800dba2:	fb94 f4f3 	sdivge	r4, r4, r3
 800dba6:	f06f 0317 	mvn.w	r3, #23
 800dbaa:	fb04 3303 	mla	r3, r4, r3, r3
 800dbae:	eb03 0a02 	add.w	sl, r3, r2
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	9a06      	ldr	r2, [sp, #24]
 800dbb6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800de88 <__kernel_rem_pio2+0x318>
 800dbba:	eb03 0802 	add.w	r8, r3, r2
 800dbbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dbc0:	1aa7      	subs	r7, r4, r2
 800dbc2:	ae22      	add	r6, sp, #136	; 0x88
 800dbc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dbc8:	2500      	movs	r5, #0
 800dbca:	4545      	cmp	r5, r8
 800dbcc:	dd13      	ble.n	800dbf6 <__kernel_rem_pio2+0x86>
 800dbce:	9b08      	ldr	r3, [sp, #32]
 800dbd0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800de88 <__kernel_rem_pio2+0x318>
 800dbd4:	aa22      	add	r2, sp, #136	; 0x88
 800dbd6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dbda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800dbde:	f04f 0800 	mov.w	r8, #0
 800dbe2:	9b02      	ldr	r3, [sp, #8]
 800dbe4:	4598      	cmp	r8, r3
 800dbe6:	dc2f      	bgt.n	800dc48 <__kernel_rem_pio2+0xd8>
 800dbe8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dbec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800dbf0:	462f      	mov	r7, r5
 800dbf2:	2600      	movs	r6, #0
 800dbf4:	e01b      	b.n	800dc2e <__kernel_rem_pio2+0xbe>
 800dbf6:	42ef      	cmn	r7, r5
 800dbf8:	d407      	bmi.n	800dc0a <__kernel_rem_pio2+0x9a>
 800dbfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dbfe:	f7f2 fcb1 	bl	8000564 <__aeabi_i2d>
 800dc02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dc06:	3501      	adds	r5, #1
 800dc08:	e7df      	b.n	800dbca <__kernel_rem_pio2+0x5a>
 800dc0a:	ec51 0b18 	vmov	r0, r1, d8
 800dc0e:	e7f8      	b.n	800dc02 <__kernel_rem_pio2+0x92>
 800dc10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dc18:	f7f2 fd0e 	bl	8000638 <__aeabi_dmul>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	460b      	mov	r3, r1
 800dc20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc24:	f7f2 fb52 	bl	80002cc <__adddf3>
 800dc28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc2c:	3601      	adds	r6, #1
 800dc2e:	9b06      	ldr	r3, [sp, #24]
 800dc30:	429e      	cmp	r6, r3
 800dc32:	f1a7 0708 	sub.w	r7, r7, #8
 800dc36:	ddeb      	ble.n	800dc10 <__kernel_rem_pio2+0xa0>
 800dc38:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc3c:	f108 0801 	add.w	r8, r8, #1
 800dc40:	ecab 7b02 	vstmia	fp!, {d7}
 800dc44:	3508      	adds	r5, #8
 800dc46:	e7cc      	b.n	800dbe2 <__kernel_rem_pio2+0x72>
 800dc48:	9b02      	ldr	r3, [sp, #8]
 800dc4a:	aa0e      	add	r2, sp, #56	; 0x38
 800dc4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc50:	930d      	str	r3, [sp, #52]	; 0x34
 800dc52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dc54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dc58:	9c02      	ldr	r4, [sp, #8]
 800dc5a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc5c:	00e3      	lsls	r3, r4, #3
 800dc5e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc60:	ab9a      	add	r3, sp, #616	; 0x268
 800dc62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dc6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800dc6e:	ab72      	add	r3, sp, #456	; 0x1c8
 800dc70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800dc74:	46c3      	mov	fp, r8
 800dc76:	46a1      	mov	r9, r4
 800dc78:	f1b9 0f00 	cmp.w	r9, #0
 800dc7c:	f1a5 0508 	sub.w	r5, r5, #8
 800dc80:	dc77      	bgt.n	800dd72 <__kernel_rem_pio2+0x202>
 800dc82:	ec47 6b10 	vmov	d0, r6, r7
 800dc86:	4650      	mov	r0, sl
 800dc88:	f000 fd4e 	bl	800e728 <scalbn>
 800dc8c:	ec57 6b10 	vmov	r6, r7, d0
 800dc90:	2200      	movs	r2, #0
 800dc92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dc96:	ee10 0a10 	vmov	r0, s0
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f7f2 fccc 	bl	8000638 <__aeabi_dmul>
 800dca0:	ec41 0b10 	vmov	d0, r0, r1
 800dca4:	f000 fcc0 	bl	800e628 <floor>
 800dca8:	4b7c      	ldr	r3, [pc, #496]	; (800de9c <__kernel_rem_pio2+0x32c>)
 800dcaa:	ec51 0b10 	vmov	r0, r1, d0
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f7f2 fcc2 	bl	8000638 <__aeabi_dmul>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4630      	mov	r0, r6
 800dcba:	4639      	mov	r1, r7
 800dcbc:	f7f2 fb04 	bl	80002c8 <__aeabi_dsub>
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	f7f2 ff68 	bl	8000b98 <__aeabi_d2iz>
 800dcc8:	9004      	str	r0, [sp, #16]
 800dcca:	f7f2 fc4b 	bl	8000564 <__aeabi_i2d>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 faf7 	bl	80002c8 <__aeabi_dsub>
 800dcda:	f1ba 0f00 	cmp.w	sl, #0
 800dcde:	4606      	mov	r6, r0
 800dce0:	460f      	mov	r7, r1
 800dce2:	dd6d      	ble.n	800ddc0 <__kernel_rem_pio2+0x250>
 800dce4:	1e62      	subs	r2, r4, #1
 800dce6:	ab0e      	add	r3, sp, #56	; 0x38
 800dce8:	9d04      	ldr	r5, [sp, #16]
 800dcea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dcee:	f1ca 0118 	rsb	r1, sl, #24
 800dcf2:	fa40 f301 	asr.w	r3, r0, r1
 800dcf6:	441d      	add	r5, r3
 800dcf8:	408b      	lsls	r3, r1
 800dcfa:	1ac0      	subs	r0, r0, r3
 800dcfc:	ab0e      	add	r3, sp, #56	; 0x38
 800dcfe:	9504      	str	r5, [sp, #16]
 800dd00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dd04:	f1ca 0317 	rsb	r3, sl, #23
 800dd08:	fa40 fb03 	asr.w	fp, r0, r3
 800dd0c:	f1bb 0f00 	cmp.w	fp, #0
 800dd10:	dd65      	ble.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd12:	9b04      	ldr	r3, [sp, #16]
 800dd14:	2200      	movs	r2, #0
 800dd16:	3301      	adds	r3, #1
 800dd18:	9304      	str	r3, [sp, #16]
 800dd1a:	4615      	mov	r5, r2
 800dd1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dd20:	4294      	cmp	r4, r2
 800dd22:	f300 809c 	bgt.w	800de5e <__kernel_rem_pio2+0x2ee>
 800dd26:	f1ba 0f00 	cmp.w	sl, #0
 800dd2a:	dd07      	ble.n	800dd3c <__kernel_rem_pio2+0x1cc>
 800dd2c:	f1ba 0f01 	cmp.w	sl, #1
 800dd30:	f000 80c0 	beq.w	800deb4 <__kernel_rem_pio2+0x344>
 800dd34:	f1ba 0f02 	cmp.w	sl, #2
 800dd38:	f000 80c6 	beq.w	800dec8 <__kernel_rem_pio2+0x358>
 800dd3c:	f1bb 0f02 	cmp.w	fp, #2
 800dd40:	d14d      	bne.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd42:	4632      	mov	r2, r6
 800dd44:	463b      	mov	r3, r7
 800dd46:	4956      	ldr	r1, [pc, #344]	; (800dea0 <__kernel_rem_pio2+0x330>)
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f7f2 fabd 	bl	80002c8 <__aeabi_dsub>
 800dd4e:	4606      	mov	r6, r0
 800dd50:	460f      	mov	r7, r1
 800dd52:	2d00      	cmp	r5, #0
 800dd54:	d043      	beq.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd56:	4650      	mov	r0, sl
 800dd58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800de90 <__kernel_rem_pio2+0x320>
 800dd5c:	f000 fce4 	bl	800e728 <scalbn>
 800dd60:	4630      	mov	r0, r6
 800dd62:	4639      	mov	r1, r7
 800dd64:	ec53 2b10 	vmov	r2, r3, d0
 800dd68:	f7f2 faae 	bl	80002c8 <__aeabi_dsub>
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	460f      	mov	r7, r1
 800dd70:	e035      	b.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd72:	4b4c      	ldr	r3, [pc, #304]	; (800dea4 <__kernel_rem_pio2+0x334>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	4630      	mov	r0, r6
 800dd78:	4639      	mov	r1, r7
 800dd7a:	f7f2 fc5d 	bl	8000638 <__aeabi_dmul>
 800dd7e:	f7f2 ff0b 	bl	8000b98 <__aeabi_d2iz>
 800dd82:	f7f2 fbef 	bl	8000564 <__aeabi_i2d>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	ec43 2b18 	vmov	d8, r2, r3
 800dd8e:	4b46      	ldr	r3, [pc, #280]	; (800dea8 <__kernel_rem_pio2+0x338>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	f7f2 fc51 	bl	8000638 <__aeabi_dmul>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	4639      	mov	r1, r7
 800dd9e:	f7f2 fa93 	bl	80002c8 <__aeabi_dsub>
 800dda2:	f7f2 fef9 	bl	8000b98 <__aeabi_d2iz>
 800dda6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ddaa:	f84b 0b04 	str.w	r0, [fp], #4
 800ddae:	ec51 0b18 	vmov	r0, r1, d8
 800ddb2:	f7f2 fa8b 	bl	80002cc <__adddf3>
 800ddb6:	f109 39ff 	add.w	r9, r9, #4294967295
 800ddba:	4606      	mov	r6, r0
 800ddbc:	460f      	mov	r7, r1
 800ddbe:	e75b      	b.n	800dc78 <__kernel_rem_pio2+0x108>
 800ddc0:	d106      	bne.n	800ddd0 <__kernel_rem_pio2+0x260>
 800ddc2:	1e63      	subs	r3, r4, #1
 800ddc4:	aa0e      	add	r2, sp, #56	; 0x38
 800ddc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ddca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ddce:	e79d      	b.n	800dd0c <__kernel_rem_pio2+0x19c>
 800ddd0:	4b36      	ldr	r3, [pc, #216]	; (800deac <__kernel_rem_pio2+0x33c>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f7f2 feb6 	bl	8000b44 <__aeabi_dcmpge>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d13d      	bne.n	800de58 <__kernel_rem_pio2+0x2e8>
 800dddc:	4683      	mov	fp, r0
 800ddde:	2200      	movs	r2, #0
 800dde0:	2300      	movs	r3, #0
 800dde2:	4630      	mov	r0, r6
 800dde4:	4639      	mov	r1, r7
 800dde6:	f7f2 fe8f 	bl	8000b08 <__aeabi_dcmpeq>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f000 80c0 	beq.w	800df70 <__kernel_rem_pio2+0x400>
 800ddf0:	1e65      	subs	r5, r4, #1
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	9902      	ldr	r1, [sp, #8]
 800ddf8:	428b      	cmp	r3, r1
 800ddfa:	da6c      	bge.n	800ded6 <__kernel_rem_pio2+0x366>
 800ddfc:	2a00      	cmp	r2, #0
 800ddfe:	f000 8089 	beq.w	800df14 <__kernel_rem_pio2+0x3a4>
 800de02:	ab0e      	add	r3, sp, #56	; 0x38
 800de04:	f1aa 0a18 	sub.w	sl, sl, #24
 800de08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 80ad 	beq.w	800df6c <__kernel_rem_pio2+0x3fc>
 800de12:	4650      	mov	r0, sl
 800de14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800de90 <__kernel_rem_pio2+0x320>
 800de18:	f000 fc86 	bl	800e728 <scalbn>
 800de1c:	ab9a      	add	r3, sp, #616	; 0x268
 800de1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800de22:	ec57 6b10 	vmov	r6, r7, d0
 800de26:	00ec      	lsls	r4, r5, #3
 800de28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800de2c:	46aa      	mov	sl, r5
 800de2e:	f1ba 0f00 	cmp.w	sl, #0
 800de32:	f280 80d6 	bge.w	800dfe2 <__kernel_rem_pio2+0x472>
 800de36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800de88 <__kernel_rem_pio2+0x318>
 800de3a:	462e      	mov	r6, r5
 800de3c:	2e00      	cmp	r6, #0
 800de3e:	f2c0 8104 	blt.w	800e04a <__kernel_rem_pio2+0x4da>
 800de42:	ab72      	add	r3, sp, #456	; 0x1c8
 800de44:	ed8d 8b06 	vstr	d8, [sp, #24]
 800de48:	f8df a064 	ldr.w	sl, [pc, #100]	; 800deb0 <__kernel_rem_pio2+0x340>
 800de4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800de50:	f04f 0800 	mov.w	r8, #0
 800de54:	1baf      	subs	r7, r5, r6
 800de56:	e0ea      	b.n	800e02e <__kernel_rem_pio2+0x4be>
 800de58:	f04f 0b02 	mov.w	fp, #2
 800de5c:	e759      	b.n	800dd12 <__kernel_rem_pio2+0x1a2>
 800de5e:	f8d8 3000 	ldr.w	r3, [r8]
 800de62:	b955      	cbnz	r5, 800de7a <__kernel_rem_pio2+0x30a>
 800de64:	b123      	cbz	r3, 800de70 <__kernel_rem_pio2+0x300>
 800de66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800de6a:	f8c8 3000 	str.w	r3, [r8]
 800de6e:	2301      	movs	r3, #1
 800de70:	3201      	adds	r2, #1
 800de72:	f108 0804 	add.w	r8, r8, #4
 800de76:	461d      	mov	r5, r3
 800de78:	e752      	b.n	800dd20 <__kernel_rem_pio2+0x1b0>
 800de7a:	1acb      	subs	r3, r1, r3
 800de7c:	f8c8 3000 	str.w	r3, [r8]
 800de80:	462b      	mov	r3, r5
 800de82:	e7f5      	b.n	800de70 <__kernel_rem_pio2+0x300>
 800de84:	f3af 8000 	nop.w
	...
 800de94:	3ff00000 	.word	0x3ff00000
 800de98:	0800ef98 	.word	0x0800ef98
 800de9c:	40200000 	.word	0x40200000
 800dea0:	3ff00000 	.word	0x3ff00000
 800dea4:	3e700000 	.word	0x3e700000
 800dea8:	41700000 	.word	0x41700000
 800deac:	3fe00000 	.word	0x3fe00000
 800deb0:	0800ef58 	.word	0x0800ef58
 800deb4:	1e62      	subs	r2, r4, #1
 800deb6:	ab0e      	add	r3, sp, #56	; 0x38
 800deb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800debc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dec0:	a90e      	add	r1, sp, #56	; 0x38
 800dec2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dec6:	e739      	b.n	800dd3c <__kernel_rem_pio2+0x1cc>
 800dec8:	1e62      	subs	r2, r4, #1
 800deca:	ab0e      	add	r3, sp, #56	; 0x38
 800decc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ded0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ded4:	e7f4      	b.n	800dec0 <__kernel_rem_pio2+0x350>
 800ded6:	a90e      	add	r1, sp, #56	; 0x38
 800ded8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dedc:	3b01      	subs	r3, #1
 800dede:	430a      	orrs	r2, r1
 800dee0:	e789      	b.n	800ddf6 <__kernel_rem_pio2+0x286>
 800dee2:	3301      	adds	r3, #1
 800dee4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dee8:	2900      	cmp	r1, #0
 800deea:	d0fa      	beq.n	800dee2 <__kernel_rem_pio2+0x372>
 800deec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800deee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800def2:	446a      	add	r2, sp
 800def4:	3a98      	subs	r2, #152	; 0x98
 800def6:	920a      	str	r2, [sp, #40]	; 0x28
 800def8:	9a08      	ldr	r2, [sp, #32]
 800defa:	18e3      	adds	r3, r4, r3
 800defc:	18a5      	adds	r5, r4, r2
 800defe:	aa22      	add	r2, sp, #136	; 0x88
 800df00:	f104 0801 	add.w	r8, r4, #1
 800df04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800df08:	9304      	str	r3, [sp, #16]
 800df0a:	9b04      	ldr	r3, [sp, #16]
 800df0c:	4543      	cmp	r3, r8
 800df0e:	da04      	bge.n	800df1a <__kernel_rem_pio2+0x3aa>
 800df10:	461c      	mov	r4, r3
 800df12:	e6a3      	b.n	800dc5c <__kernel_rem_pio2+0xec>
 800df14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df16:	2301      	movs	r3, #1
 800df18:	e7e4      	b.n	800dee4 <__kernel_rem_pio2+0x374>
 800df1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800df20:	f7f2 fb20 	bl	8000564 <__aeabi_i2d>
 800df24:	e8e5 0102 	strd	r0, r1, [r5], #8
 800df28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df2a:	46ab      	mov	fp, r5
 800df2c:	461c      	mov	r4, r3
 800df2e:	f04f 0900 	mov.w	r9, #0
 800df32:	2600      	movs	r6, #0
 800df34:	2700      	movs	r7, #0
 800df36:	9b06      	ldr	r3, [sp, #24]
 800df38:	4599      	cmp	r9, r3
 800df3a:	dd06      	ble.n	800df4a <__kernel_rem_pio2+0x3da>
 800df3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800df42:	f108 0801 	add.w	r8, r8, #1
 800df46:	930a      	str	r3, [sp, #40]	; 0x28
 800df48:	e7df      	b.n	800df0a <__kernel_rem_pio2+0x39a>
 800df4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800df4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800df52:	f7f2 fb71 	bl	8000638 <__aeabi_dmul>
 800df56:	4602      	mov	r2, r0
 800df58:	460b      	mov	r3, r1
 800df5a:	4630      	mov	r0, r6
 800df5c:	4639      	mov	r1, r7
 800df5e:	f7f2 f9b5 	bl	80002cc <__adddf3>
 800df62:	f109 0901 	add.w	r9, r9, #1
 800df66:	4606      	mov	r6, r0
 800df68:	460f      	mov	r7, r1
 800df6a:	e7e4      	b.n	800df36 <__kernel_rem_pio2+0x3c6>
 800df6c:	3d01      	subs	r5, #1
 800df6e:	e748      	b.n	800de02 <__kernel_rem_pio2+0x292>
 800df70:	ec47 6b10 	vmov	d0, r6, r7
 800df74:	f1ca 0000 	rsb	r0, sl, #0
 800df78:	f000 fbd6 	bl	800e728 <scalbn>
 800df7c:	ec57 6b10 	vmov	r6, r7, d0
 800df80:	4ba0      	ldr	r3, [pc, #640]	; (800e204 <__kernel_rem_pio2+0x694>)
 800df82:	ee10 0a10 	vmov	r0, s0
 800df86:	2200      	movs	r2, #0
 800df88:	4639      	mov	r1, r7
 800df8a:	f7f2 fddb 	bl	8000b44 <__aeabi_dcmpge>
 800df8e:	b1f8      	cbz	r0, 800dfd0 <__kernel_rem_pio2+0x460>
 800df90:	4b9d      	ldr	r3, [pc, #628]	; (800e208 <__kernel_rem_pio2+0x698>)
 800df92:	2200      	movs	r2, #0
 800df94:	4630      	mov	r0, r6
 800df96:	4639      	mov	r1, r7
 800df98:	f7f2 fb4e 	bl	8000638 <__aeabi_dmul>
 800df9c:	f7f2 fdfc 	bl	8000b98 <__aeabi_d2iz>
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	f7f2 fadf 	bl	8000564 <__aeabi_i2d>
 800dfa6:	4b97      	ldr	r3, [pc, #604]	; (800e204 <__kernel_rem_pio2+0x694>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f7f2 fb45 	bl	8000638 <__aeabi_dmul>
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	4639      	mov	r1, r7
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f7f2 f987 	bl	80002c8 <__aeabi_dsub>
 800dfba:	f7f2 fded 	bl	8000b98 <__aeabi_d2iz>
 800dfbe:	1c65      	adds	r5, r4, #1
 800dfc0:	ab0e      	add	r3, sp, #56	; 0x38
 800dfc2:	f10a 0a18 	add.w	sl, sl, #24
 800dfc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dfca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dfce:	e720      	b.n	800de12 <__kernel_rem_pio2+0x2a2>
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	4639      	mov	r1, r7
 800dfd4:	f7f2 fde0 	bl	8000b98 <__aeabi_d2iz>
 800dfd8:	ab0e      	add	r3, sp, #56	; 0x38
 800dfda:	4625      	mov	r5, r4
 800dfdc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dfe0:	e717      	b.n	800de12 <__kernel_rem_pio2+0x2a2>
 800dfe2:	ab0e      	add	r3, sp, #56	; 0x38
 800dfe4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dfe8:	f7f2 fabc 	bl	8000564 <__aeabi_i2d>
 800dfec:	4632      	mov	r2, r6
 800dfee:	463b      	mov	r3, r7
 800dff0:	f7f2 fb22 	bl	8000638 <__aeabi_dmul>
 800dff4:	4b84      	ldr	r3, [pc, #528]	; (800e208 <__kernel_rem_pio2+0x698>)
 800dff6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dffa:	2200      	movs	r2, #0
 800dffc:	4630      	mov	r0, r6
 800dffe:	4639      	mov	r1, r7
 800e000:	f7f2 fb1a 	bl	8000638 <__aeabi_dmul>
 800e004:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e008:	4606      	mov	r6, r0
 800e00a:	460f      	mov	r7, r1
 800e00c:	e70f      	b.n	800de2e <__kernel_rem_pio2+0x2be>
 800e00e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e012:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e016:	f7f2 fb0f 	bl	8000638 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e022:	f7f2 f953 	bl	80002cc <__adddf3>
 800e026:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e02a:	f108 0801 	add.w	r8, r8, #1
 800e02e:	9b02      	ldr	r3, [sp, #8]
 800e030:	4598      	cmp	r8, r3
 800e032:	dc01      	bgt.n	800e038 <__kernel_rem_pio2+0x4c8>
 800e034:	45b8      	cmp	r8, r7
 800e036:	ddea      	ble.n	800e00e <__kernel_rem_pio2+0x49e>
 800e038:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e03c:	ab4a      	add	r3, sp, #296	; 0x128
 800e03e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e042:	ed87 7b00 	vstr	d7, [r7]
 800e046:	3e01      	subs	r6, #1
 800e048:	e6f8      	b.n	800de3c <__kernel_rem_pio2+0x2cc>
 800e04a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	dc0b      	bgt.n	800e068 <__kernel_rem_pio2+0x4f8>
 800e050:	2b00      	cmp	r3, #0
 800e052:	dc35      	bgt.n	800e0c0 <__kernel_rem_pio2+0x550>
 800e054:	d059      	beq.n	800e10a <__kernel_rem_pio2+0x59a>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	f003 0007 	and.w	r0, r3, #7
 800e05c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e060:	ecbd 8b02 	vpop	{d8}
 800e064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e068:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d1f3      	bne.n	800e056 <__kernel_rem_pio2+0x4e6>
 800e06e:	ab4a      	add	r3, sp, #296	; 0x128
 800e070:	4423      	add	r3, r4
 800e072:	9306      	str	r3, [sp, #24]
 800e074:	461c      	mov	r4, r3
 800e076:	469a      	mov	sl, r3
 800e078:	9502      	str	r5, [sp, #8]
 800e07a:	9b02      	ldr	r3, [sp, #8]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f1aa 0a08 	sub.w	sl, sl, #8
 800e082:	dc6b      	bgt.n	800e15c <__kernel_rem_pio2+0x5ec>
 800e084:	46aa      	mov	sl, r5
 800e086:	f1ba 0f01 	cmp.w	sl, #1
 800e08a:	f1a4 0408 	sub.w	r4, r4, #8
 800e08e:	f300 8085 	bgt.w	800e19c <__kernel_rem_pio2+0x62c>
 800e092:	9c06      	ldr	r4, [sp, #24]
 800e094:	2000      	movs	r0, #0
 800e096:	3408      	adds	r4, #8
 800e098:	2100      	movs	r1, #0
 800e09a:	2d01      	cmp	r5, #1
 800e09c:	f300 809d 	bgt.w	800e1da <__kernel_rem_pio2+0x66a>
 800e0a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e0a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e0a8:	f1bb 0f00 	cmp.w	fp, #0
 800e0ac:	f040 809b 	bne.w	800e1e6 <__kernel_rem_pio2+0x676>
 800e0b0:	9b01      	ldr	r3, [sp, #4]
 800e0b2:	e9c3 5600 	strd	r5, r6, [r3]
 800e0b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e0ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e0be:	e7ca      	b.n	800e056 <__kernel_rem_pio2+0x4e6>
 800e0c0:	3408      	adds	r4, #8
 800e0c2:	ab4a      	add	r3, sp, #296	; 0x128
 800e0c4:	441c      	add	r4, r3
 800e0c6:	462e      	mov	r6, r5
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	2e00      	cmp	r6, #0
 800e0ce:	da36      	bge.n	800e13e <__kernel_rem_pio2+0x5ce>
 800e0d0:	f1bb 0f00 	cmp.w	fp, #0
 800e0d4:	d039      	beq.n	800e14a <__kernel_rem_pio2+0x5da>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0dc:	9c01      	ldr	r4, [sp, #4]
 800e0de:	e9c4 2300 	strd	r2, r3, [r4]
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e0ea:	f7f2 f8ed 	bl	80002c8 <__aeabi_dsub>
 800e0ee:	ae4c      	add	r6, sp, #304	; 0x130
 800e0f0:	2401      	movs	r4, #1
 800e0f2:	42a5      	cmp	r5, r4
 800e0f4:	da2c      	bge.n	800e150 <__kernel_rem_pio2+0x5e0>
 800e0f6:	f1bb 0f00 	cmp.w	fp, #0
 800e0fa:	d002      	beq.n	800e102 <__kernel_rem_pio2+0x592>
 800e0fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e100:	4619      	mov	r1, r3
 800e102:	9b01      	ldr	r3, [sp, #4]
 800e104:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e108:	e7a5      	b.n	800e056 <__kernel_rem_pio2+0x4e6>
 800e10a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e10e:	eb0d 0403 	add.w	r4, sp, r3
 800e112:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e116:	2000      	movs	r0, #0
 800e118:	2100      	movs	r1, #0
 800e11a:	2d00      	cmp	r5, #0
 800e11c:	da09      	bge.n	800e132 <__kernel_rem_pio2+0x5c2>
 800e11e:	f1bb 0f00 	cmp.w	fp, #0
 800e122:	d002      	beq.n	800e12a <__kernel_rem_pio2+0x5ba>
 800e124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e128:	4619      	mov	r1, r3
 800e12a:	9b01      	ldr	r3, [sp, #4]
 800e12c:	e9c3 0100 	strd	r0, r1, [r3]
 800e130:	e791      	b.n	800e056 <__kernel_rem_pio2+0x4e6>
 800e132:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e136:	f7f2 f8c9 	bl	80002cc <__adddf3>
 800e13a:	3d01      	subs	r5, #1
 800e13c:	e7ed      	b.n	800e11a <__kernel_rem_pio2+0x5aa>
 800e13e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e142:	f7f2 f8c3 	bl	80002cc <__adddf3>
 800e146:	3e01      	subs	r6, #1
 800e148:	e7c0      	b.n	800e0cc <__kernel_rem_pio2+0x55c>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	e7c5      	b.n	800e0dc <__kernel_rem_pio2+0x56c>
 800e150:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e154:	f7f2 f8ba 	bl	80002cc <__adddf3>
 800e158:	3401      	adds	r4, #1
 800e15a:	e7ca      	b.n	800e0f2 <__kernel_rem_pio2+0x582>
 800e15c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e160:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e164:	9b02      	ldr	r3, [sp, #8]
 800e166:	3b01      	subs	r3, #1
 800e168:	9302      	str	r3, [sp, #8]
 800e16a:	4632      	mov	r2, r6
 800e16c:	463b      	mov	r3, r7
 800e16e:	4640      	mov	r0, r8
 800e170:	4649      	mov	r1, r9
 800e172:	f7f2 f8ab 	bl	80002cc <__adddf3>
 800e176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	4640      	mov	r0, r8
 800e180:	4649      	mov	r1, r9
 800e182:	f7f2 f8a1 	bl	80002c8 <__aeabi_dsub>
 800e186:	4632      	mov	r2, r6
 800e188:	463b      	mov	r3, r7
 800e18a:	f7f2 f89f 	bl	80002cc <__adddf3>
 800e18e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e192:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e196:	ed8a 7b00 	vstr	d7, [sl]
 800e19a:	e76e      	b.n	800e07a <__kernel_rem_pio2+0x50a>
 800e19c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e1a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	4632      	mov	r2, r6
 800e1a8:	463b      	mov	r3, r7
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	f7f2 f88e 	bl	80002cc <__adddf3>
 800e1b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f7f2 f884 	bl	80002c8 <__aeabi_dsub>
 800e1c0:	4632      	mov	r2, r6
 800e1c2:	463b      	mov	r3, r7
 800e1c4:	f7f2 f882 	bl	80002cc <__adddf3>
 800e1c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e1d0:	ed84 7b00 	vstr	d7, [r4]
 800e1d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1d8:	e755      	b.n	800e086 <__kernel_rem_pio2+0x516>
 800e1da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e1de:	f7f2 f875 	bl	80002cc <__adddf3>
 800e1e2:	3d01      	subs	r5, #1
 800e1e4:	e759      	b.n	800e09a <__kernel_rem_pio2+0x52a>
 800e1e6:	9b01      	ldr	r3, [sp, #4]
 800e1e8:	9a01      	ldr	r2, [sp, #4]
 800e1ea:	601d      	str	r5, [r3, #0]
 800e1ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e1f0:	605c      	str	r4, [r3, #4]
 800e1f2:	609f      	str	r7, [r3, #8]
 800e1f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e1f8:	60d3      	str	r3, [r2, #12]
 800e1fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1fe:	6110      	str	r0, [r2, #16]
 800e200:	6153      	str	r3, [r2, #20]
 800e202:	e728      	b.n	800e056 <__kernel_rem_pio2+0x4e6>
 800e204:	41700000 	.word	0x41700000
 800e208:	3e700000 	.word	0x3e700000
 800e20c:	00000000 	.word	0x00000000

0800e210 <__kernel_tan>:
 800e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e214:	ed2d 8b06 	vpush	{d8-d10}
 800e218:	ec5b ab10 	vmov	sl, fp, d0
 800e21c:	4be0      	ldr	r3, [pc, #896]	; (800e5a0 <__kernel_tan+0x390>)
 800e21e:	b083      	sub	sp, #12
 800e220:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800e224:	429f      	cmp	r7, r3
 800e226:	ec59 8b11 	vmov	r8, r9, d1
 800e22a:	4606      	mov	r6, r0
 800e22c:	f8cd b000 	str.w	fp, [sp]
 800e230:	dc61      	bgt.n	800e2f6 <__kernel_tan+0xe6>
 800e232:	ee10 0a10 	vmov	r0, s0
 800e236:	4659      	mov	r1, fp
 800e238:	f7f2 fcae 	bl	8000b98 <__aeabi_d2iz>
 800e23c:	4605      	mov	r5, r0
 800e23e:	2800      	cmp	r0, #0
 800e240:	f040 8083 	bne.w	800e34a <__kernel_tan+0x13a>
 800e244:	1c73      	adds	r3, r6, #1
 800e246:	4652      	mov	r2, sl
 800e248:	4313      	orrs	r3, r2
 800e24a:	433b      	orrs	r3, r7
 800e24c:	d112      	bne.n	800e274 <__kernel_tan+0x64>
 800e24e:	ec4b ab10 	vmov	d0, sl, fp
 800e252:	f7ff fa41 	bl	800d6d8 <fabs>
 800e256:	49d3      	ldr	r1, [pc, #844]	; (800e5a4 <__kernel_tan+0x394>)
 800e258:	ec53 2b10 	vmov	r2, r3, d0
 800e25c:	2000      	movs	r0, #0
 800e25e:	f7f2 fb15 	bl	800088c <__aeabi_ddiv>
 800e262:	4682      	mov	sl, r0
 800e264:	468b      	mov	fp, r1
 800e266:	ec4b ab10 	vmov	d0, sl, fp
 800e26a:	b003      	add	sp, #12
 800e26c:	ecbd 8b06 	vpop	{d8-d10}
 800e270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e274:	2e01      	cmp	r6, #1
 800e276:	d0f6      	beq.n	800e266 <__kernel_tan+0x56>
 800e278:	4642      	mov	r2, r8
 800e27a:	464b      	mov	r3, r9
 800e27c:	4650      	mov	r0, sl
 800e27e:	4659      	mov	r1, fp
 800e280:	f7f2 f824 	bl	80002cc <__adddf3>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	460f      	mov	r7, r1
 800e28a:	2000      	movs	r0, #0
 800e28c:	49c6      	ldr	r1, [pc, #792]	; (800e5a8 <__kernel_tan+0x398>)
 800e28e:	f7f2 fafd 	bl	800088c <__aeabi_ddiv>
 800e292:	e9cd 0100 	strd	r0, r1, [sp]
 800e296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e29a:	462e      	mov	r6, r5
 800e29c:	4652      	mov	r2, sl
 800e29e:	462c      	mov	r4, r5
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	461d      	mov	r5, r3
 800e2a4:	4639      	mov	r1, r7
 800e2a6:	465b      	mov	r3, fp
 800e2a8:	f7f2 f80e 	bl	80002c8 <__aeabi_dsub>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f7f2 f808 	bl	80002c8 <__aeabi_dsub>
 800e2b8:	4632      	mov	r2, r6
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	f7f2 f9bc 	bl	8000638 <__aeabi_dmul>
 800e2c0:	4632      	mov	r2, r6
 800e2c2:	4680      	mov	r8, r0
 800e2c4:	4689      	mov	r9, r1
 800e2c6:	462b      	mov	r3, r5
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f2 f9b4 	bl	8000638 <__aeabi_dmul>
 800e2d0:	4bb4      	ldr	r3, [pc, #720]	; (800e5a4 <__kernel_tan+0x394>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f7f1 fffa 	bl	80002cc <__adddf3>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4640      	mov	r0, r8
 800e2de:	4649      	mov	r1, r9
 800e2e0:	f7f1 fff4 	bl	80002cc <__adddf3>
 800e2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2e8:	f7f2 f9a6 	bl	8000638 <__aeabi_dmul>
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	462b      	mov	r3, r5
 800e2f0:	f7f1 ffec 	bl	80002cc <__adddf3>
 800e2f4:	e7b5      	b.n	800e262 <__kernel_tan+0x52>
 800e2f6:	4bad      	ldr	r3, [pc, #692]	; (800e5ac <__kernel_tan+0x39c>)
 800e2f8:	429f      	cmp	r7, r3
 800e2fa:	dd26      	ble.n	800e34a <__kernel_tan+0x13a>
 800e2fc:	9b00      	ldr	r3, [sp, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	da09      	bge.n	800e316 <__kernel_tan+0x106>
 800e302:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e306:	469b      	mov	fp, r3
 800e308:	ee10 aa10 	vmov	sl, s0
 800e30c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e310:	ee11 8a10 	vmov	r8, s2
 800e314:	4699      	mov	r9, r3
 800e316:	4652      	mov	r2, sl
 800e318:	465b      	mov	r3, fp
 800e31a:	a183      	add	r1, pc, #524	; (adr r1, 800e528 <__kernel_tan+0x318>)
 800e31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e320:	f7f1 ffd2 	bl	80002c8 <__aeabi_dsub>
 800e324:	4642      	mov	r2, r8
 800e326:	464b      	mov	r3, r9
 800e328:	4604      	mov	r4, r0
 800e32a:	460d      	mov	r5, r1
 800e32c:	a180      	add	r1, pc, #512	; (adr r1, 800e530 <__kernel_tan+0x320>)
 800e32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e332:	f7f1 ffc9 	bl	80002c8 <__aeabi_dsub>
 800e336:	4622      	mov	r2, r4
 800e338:	462b      	mov	r3, r5
 800e33a:	f7f1 ffc7 	bl	80002cc <__adddf3>
 800e33e:	f04f 0800 	mov.w	r8, #0
 800e342:	4682      	mov	sl, r0
 800e344:	468b      	mov	fp, r1
 800e346:	f04f 0900 	mov.w	r9, #0
 800e34a:	4652      	mov	r2, sl
 800e34c:	465b      	mov	r3, fp
 800e34e:	4650      	mov	r0, sl
 800e350:	4659      	mov	r1, fp
 800e352:	f7f2 f971 	bl	8000638 <__aeabi_dmul>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	ec43 2b18 	vmov	d8, r2, r3
 800e35e:	f7f2 f96b 	bl	8000638 <__aeabi_dmul>
 800e362:	ec53 2b18 	vmov	r2, r3, d8
 800e366:	4604      	mov	r4, r0
 800e368:	460d      	mov	r5, r1
 800e36a:	4650      	mov	r0, sl
 800e36c:	4659      	mov	r1, fp
 800e36e:	f7f2 f963 	bl	8000638 <__aeabi_dmul>
 800e372:	a371      	add	r3, pc, #452	; (adr r3, 800e538 <__kernel_tan+0x328>)
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	ec41 0b19 	vmov	d9, r0, r1
 800e37c:	4620      	mov	r0, r4
 800e37e:	4629      	mov	r1, r5
 800e380:	f7f2 f95a 	bl	8000638 <__aeabi_dmul>
 800e384:	a36e      	add	r3, pc, #440	; (adr r3, 800e540 <__kernel_tan+0x330>)
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	f7f1 ff9f 	bl	80002cc <__adddf3>
 800e38e:	4622      	mov	r2, r4
 800e390:	462b      	mov	r3, r5
 800e392:	f7f2 f951 	bl	8000638 <__aeabi_dmul>
 800e396:	a36c      	add	r3, pc, #432	; (adr r3, 800e548 <__kernel_tan+0x338>)
 800e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39c:	f7f1 ff96 	bl	80002cc <__adddf3>
 800e3a0:	4622      	mov	r2, r4
 800e3a2:	462b      	mov	r3, r5
 800e3a4:	f7f2 f948 	bl	8000638 <__aeabi_dmul>
 800e3a8:	a369      	add	r3, pc, #420	; (adr r3, 800e550 <__kernel_tan+0x340>)
 800e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ae:	f7f1 ff8d 	bl	80002cc <__adddf3>
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	f7f2 f93f 	bl	8000638 <__aeabi_dmul>
 800e3ba:	a367      	add	r3, pc, #412	; (adr r3, 800e558 <__kernel_tan+0x348>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	f7f1 ff84 	bl	80002cc <__adddf3>
 800e3c4:	4622      	mov	r2, r4
 800e3c6:	462b      	mov	r3, r5
 800e3c8:	f7f2 f936 	bl	8000638 <__aeabi_dmul>
 800e3cc:	a364      	add	r3, pc, #400	; (adr r3, 800e560 <__kernel_tan+0x350>)
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	f7f1 ff7b 	bl	80002cc <__adddf3>
 800e3d6:	ec53 2b18 	vmov	r2, r3, d8
 800e3da:	f7f2 f92d 	bl	8000638 <__aeabi_dmul>
 800e3de:	a362      	add	r3, pc, #392	; (adr r3, 800e568 <__kernel_tan+0x358>)
 800e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e4:	ec41 0b1a 	vmov	d10, r0, r1
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	f7f2 f924 	bl	8000638 <__aeabi_dmul>
 800e3f0:	a35f      	add	r3, pc, #380	; (adr r3, 800e570 <__kernel_tan+0x360>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f1 ff69 	bl	80002cc <__adddf3>
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	462b      	mov	r3, r5
 800e3fe:	f7f2 f91b 	bl	8000638 <__aeabi_dmul>
 800e402:	a35d      	add	r3, pc, #372	; (adr r3, 800e578 <__kernel_tan+0x368>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f1 ff60 	bl	80002cc <__adddf3>
 800e40c:	4622      	mov	r2, r4
 800e40e:	462b      	mov	r3, r5
 800e410:	f7f2 f912 	bl	8000638 <__aeabi_dmul>
 800e414:	a35a      	add	r3, pc, #360	; (adr r3, 800e580 <__kernel_tan+0x370>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ff57 	bl	80002cc <__adddf3>
 800e41e:	4622      	mov	r2, r4
 800e420:	462b      	mov	r3, r5
 800e422:	f7f2 f909 	bl	8000638 <__aeabi_dmul>
 800e426:	a358      	add	r3, pc, #352	; (adr r3, 800e588 <__kernel_tan+0x378>)
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	f7f1 ff4e 	bl	80002cc <__adddf3>
 800e430:	4622      	mov	r2, r4
 800e432:	462b      	mov	r3, r5
 800e434:	f7f2 f900 	bl	8000638 <__aeabi_dmul>
 800e438:	a355      	add	r3, pc, #340	; (adr r3, 800e590 <__kernel_tan+0x380>)
 800e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43e:	f7f1 ff45 	bl	80002cc <__adddf3>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	ec51 0b1a 	vmov	r0, r1, d10
 800e44a:	f7f1 ff3f 	bl	80002cc <__adddf3>
 800e44e:	ec53 2b19 	vmov	r2, r3, d9
 800e452:	f7f2 f8f1 	bl	8000638 <__aeabi_dmul>
 800e456:	4642      	mov	r2, r8
 800e458:	464b      	mov	r3, r9
 800e45a:	f7f1 ff37 	bl	80002cc <__adddf3>
 800e45e:	ec53 2b18 	vmov	r2, r3, d8
 800e462:	f7f2 f8e9 	bl	8000638 <__aeabi_dmul>
 800e466:	4642      	mov	r2, r8
 800e468:	464b      	mov	r3, r9
 800e46a:	f7f1 ff2f 	bl	80002cc <__adddf3>
 800e46e:	a34a      	add	r3, pc, #296	; (adr r3, 800e598 <__kernel_tan+0x388>)
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	4604      	mov	r4, r0
 800e476:	460d      	mov	r5, r1
 800e478:	ec51 0b19 	vmov	r0, r1, d9
 800e47c:	f7f2 f8dc 	bl	8000638 <__aeabi_dmul>
 800e480:	4622      	mov	r2, r4
 800e482:	462b      	mov	r3, r5
 800e484:	f7f1 ff22 	bl	80002cc <__adddf3>
 800e488:	460b      	mov	r3, r1
 800e48a:	ec41 0b18 	vmov	d8, r0, r1
 800e48e:	4602      	mov	r2, r0
 800e490:	4659      	mov	r1, fp
 800e492:	4650      	mov	r0, sl
 800e494:	f7f1 ff1a 	bl	80002cc <__adddf3>
 800e498:	4b44      	ldr	r3, [pc, #272]	; (800e5ac <__kernel_tan+0x39c>)
 800e49a:	429f      	cmp	r7, r3
 800e49c:	4604      	mov	r4, r0
 800e49e:	460d      	mov	r5, r1
 800e4a0:	f340 8086 	ble.w	800e5b0 <__kernel_tan+0x3a0>
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f7f2 f85d 	bl	8000564 <__aeabi_i2d>
 800e4aa:	4622      	mov	r2, r4
 800e4ac:	4680      	mov	r8, r0
 800e4ae:	4689      	mov	r9, r1
 800e4b0:	462b      	mov	r3, r5
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7f2 f8bf 	bl	8000638 <__aeabi_dmul>
 800e4ba:	4642      	mov	r2, r8
 800e4bc:	4606      	mov	r6, r0
 800e4be:	460f      	mov	r7, r1
 800e4c0:	464b      	mov	r3, r9
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	4629      	mov	r1, r5
 800e4c6:	f7f1 ff01 	bl	80002cc <__adddf3>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	f7f2 f9db 	bl	800088c <__aeabi_ddiv>
 800e4d6:	ec53 2b18 	vmov	r2, r3, d8
 800e4da:	f7f1 fef5 	bl	80002c8 <__aeabi_dsub>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	4650      	mov	r0, sl
 800e4e4:	4659      	mov	r1, fp
 800e4e6:	f7f1 feef 	bl	80002c8 <__aeabi_dsub>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	f7f1 feed 	bl	80002cc <__adddf3>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4640      	mov	r0, r8
 800e4f8:	4649      	mov	r1, r9
 800e4fa:	f7f1 fee5 	bl	80002c8 <__aeabi_dsub>
 800e4fe:	9b00      	ldr	r3, [sp, #0]
 800e500:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800e504:	f00a 0a02 	and.w	sl, sl, #2
 800e508:	4604      	mov	r4, r0
 800e50a:	f1ca 0001 	rsb	r0, sl, #1
 800e50e:	460d      	mov	r5, r1
 800e510:	f7f2 f828 	bl	8000564 <__aeabi_i2d>
 800e514:	4602      	mov	r2, r0
 800e516:	460b      	mov	r3, r1
 800e518:	4620      	mov	r0, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	f7f2 f88c 	bl	8000638 <__aeabi_dmul>
 800e520:	e69f      	b.n	800e262 <__kernel_tan+0x52>
 800e522:	bf00      	nop
 800e524:	f3af 8000 	nop.w
 800e528:	54442d18 	.word	0x54442d18
 800e52c:	3fe921fb 	.word	0x3fe921fb
 800e530:	33145c07 	.word	0x33145c07
 800e534:	3c81a626 	.word	0x3c81a626
 800e538:	74bf7ad4 	.word	0x74bf7ad4
 800e53c:	3efb2a70 	.word	0x3efb2a70
 800e540:	32f0a7e9 	.word	0x32f0a7e9
 800e544:	3f12b80f 	.word	0x3f12b80f
 800e548:	1a8d1068 	.word	0x1a8d1068
 800e54c:	3f3026f7 	.word	0x3f3026f7
 800e550:	fee08315 	.word	0xfee08315
 800e554:	3f57dbc8 	.word	0x3f57dbc8
 800e558:	e96e8493 	.word	0xe96e8493
 800e55c:	3f8226e3 	.word	0x3f8226e3
 800e560:	1bb341fe 	.word	0x1bb341fe
 800e564:	3faba1ba 	.word	0x3faba1ba
 800e568:	db605373 	.word	0xdb605373
 800e56c:	bef375cb 	.word	0xbef375cb
 800e570:	a03792a6 	.word	0xa03792a6
 800e574:	3f147e88 	.word	0x3f147e88
 800e578:	f2f26501 	.word	0xf2f26501
 800e57c:	3f4344d8 	.word	0x3f4344d8
 800e580:	c9560328 	.word	0xc9560328
 800e584:	3f6d6d22 	.word	0x3f6d6d22
 800e588:	8406d637 	.word	0x8406d637
 800e58c:	3f9664f4 	.word	0x3f9664f4
 800e590:	1110fe7a 	.word	0x1110fe7a
 800e594:	3fc11111 	.word	0x3fc11111
 800e598:	55555563 	.word	0x55555563
 800e59c:	3fd55555 	.word	0x3fd55555
 800e5a0:	3e2fffff 	.word	0x3e2fffff
 800e5a4:	3ff00000 	.word	0x3ff00000
 800e5a8:	bff00000 	.word	0xbff00000
 800e5ac:	3fe59427 	.word	0x3fe59427
 800e5b0:	2e01      	cmp	r6, #1
 800e5b2:	d02f      	beq.n	800e614 <__kernel_tan+0x404>
 800e5b4:	460f      	mov	r7, r1
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4689      	mov	r9, r1
 800e5bc:	2000      	movs	r0, #0
 800e5be:	4917      	ldr	r1, [pc, #92]	; (800e61c <__kernel_tan+0x40c>)
 800e5c0:	f7f2 f964 	bl	800088c <__aeabi_ddiv>
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	e9cd 0100 	strd	r0, r1, [sp]
 800e5ca:	4652      	mov	r2, sl
 800e5cc:	465b      	mov	r3, fp
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	4639      	mov	r1, r7
 800e5d2:	f7f1 fe79 	bl	80002c8 <__aeabi_dsub>
 800e5d6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	ec51 0b18 	vmov	r0, r1, d8
 800e5e2:	f7f1 fe71 	bl	80002c8 <__aeabi_dsub>
 800e5e6:	4632      	mov	r2, r6
 800e5e8:	462b      	mov	r3, r5
 800e5ea:	f7f2 f825 	bl	8000638 <__aeabi_dmul>
 800e5ee:	46b0      	mov	r8, r6
 800e5f0:	460f      	mov	r7, r1
 800e5f2:	4642      	mov	r2, r8
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	4634      	mov	r4, r6
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	f7f2 f81b 	bl	8000638 <__aeabi_dmul>
 800e602:	4b07      	ldr	r3, [pc, #28]	; (800e620 <__kernel_tan+0x410>)
 800e604:	2200      	movs	r2, #0
 800e606:	f7f1 fe61 	bl	80002cc <__adddf3>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4630      	mov	r0, r6
 800e610:	4639      	mov	r1, r7
 800e612:	e665      	b.n	800e2e0 <__kernel_tan+0xd0>
 800e614:	4682      	mov	sl, r0
 800e616:	468b      	mov	fp, r1
 800e618:	e625      	b.n	800e266 <__kernel_tan+0x56>
 800e61a:	bf00      	nop
 800e61c:	bff00000 	.word	0xbff00000
 800e620:	3ff00000 	.word	0x3ff00000
 800e624:	00000000 	.word	0x00000000

0800e628 <floor>:
 800e628:	ec51 0b10 	vmov	r0, r1, d0
 800e62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e630:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e634:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e638:	2e13      	cmp	r6, #19
 800e63a:	ee10 5a10 	vmov	r5, s0
 800e63e:	ee10 8a10 	vmov	r8, s0
 800e642:	460c      	mov	r4, r1
 800e644:	dc32      	bgt.n	800e6ac <floor+0x84>
 800e646:	2e00      	cmp	r6, #0
 800e648:	da14      	bge.n	800e674 <floor+0x4c>
 800e64a:	a333      	add	r3, pc, #204	; (adr r3, 800e718 <floor+0xf0>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	f7f1 fe3c 	bl	80002cc <__adddf3>
 800e654:	2200      	movs	r2, #0
 800e656:	2300      	movs	r3, #0
 800e658:	f7f2 fa7e 	bl	8000b58 <__aeabi_dcmpgt>
 800e65c:	b138      	cbz	r0, 800e66e <floor+0x46>
 800e65e:	2c00      	cmp	r4, #0
 800e660:	da57      	bge.n	800e712 <floor+0xea>
 800e662:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e666:	431d      	orrs	r5, r3
 800e668:	d001      	beq.n	800e66e <floor+0x46>
 800e66a:	4c2d      	ldr	r4, [pc, #180]	; (800e720 <floor+0xf8>)
 800e66c:	2500      	movs	r5, #0
 800e66e:	4621      	mov	r1, r4
 800e670:	4628      	mov	r0, r5
 800e672:	e025      	b.n	800e6c0 <floor+0x98>
 800e674:	4f2b      	ldr	r7, [pc, #172]	; (800e724 <floor+0xfc>)
 800e676:	4137      	asrs	r7, r6
 800e678:	ea01 0307 	and.w	r3, r1, r7
 800e67c:	4303      	orrs	r3, r0
 800e67e:	d01f      	beq.n	800e6c0 <floor+0x98>
 800e680:	a325      	add	r3, pc, #148	; (adr r3, 800e718 <floor+0xf0>)
 800e682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e686:	f7f1 fe21 	bl	80002cc <__adddf3>
 800e68a:	2200      	movs	r2, #0
 800e68c:	2300      	movs	r3, #0
 800e68e:	f7f2 fa63 	bl	8000b58 <__aeabi_dcmpgt>
 800e692:	2800      	cmp	r0, #0
 800e694:	d0eb      	beq.n	800e66e <floor+0x46>
 800e696:	2c00      	cmp	r4, #0
 800e698:	bfbe      	ittt	lt
 800e69a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e69e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e6a2:	19a4      	addlt	r4, r4, r6
 800e6a4:	ea24 0407 	bic.w	r4, r4, r7
 800e6a8:	2500      	movs	r5, #0
 800e6aa:	e7e0      	b.n	800e66e <floor+0x46>
 800e6ac:	2e33      	cmp	r6, #51	; 0x33
 800e6ae:	dd0b      	ble.n	800e6c8 <floor+0xa0>
 800e6b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e6b4:	d104      	bne.n	800e6c0 <floor+0x98>
 800e6b6:	ee10 2a10 	vmov	r2, s0
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	f7f1 fe06 	bl	80002cc <__adddf3>
 800e6c0:	ec41 0b10 	vmov	d0, r0, r1
 800e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d0:	fa23 f707 	lsr.w	r7, r3, r7
 800e6d4:	4207      	tst	r7, r0
 800e6d6:	d0f3      	beq.n	800e6c0 <floor+0x98>
 800e6d8:	a30f      	add	r3, pc, #60	; (adr r3, 800e718 <floor+0xf0>)
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f7f1 fdf5 	bl	80002cc <__adddf3>
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	f7f2 fa37 	bl	8000b58 <__aeabi_dcmpgt>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d0bf      	beq.n	800e66e <floor+0x46>
 800e6ee:	2c00      	cmp	r4, #0
 800e6f0:	da02      	bge.n	800e6f8 <floor+0xd0>
 800e6f2:	2e14      	cmp	r6, #20
 800e6f4:	d103      	bne.n	800e6fe <floor+0xd6>
 800e6f6:	3401      	adds	r4, #1
 800e6f8:	ea25 0507 	bic.w	r5, r5, r7
 800e6fc:	e7b7      	b.n	800e66e <floor+0x46>
 800e6fe:	2301      	movs	r3, #1
 800e700:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e704:	fa03 f606 	lsl.w	r6, r3, r6
 800e708:	4435      	add	r5, r6
 800e70a:	4545      	cmp	r5, r8
 800e70c:	bf38      	it	cc
 800e70e:	18e4      	addcc	r4, r4, r3
 800e710:	e7f2      	b.n	800e6f8 <floor+0xd0>
 800e712:	2500      	movs	r5, #0
 800e714:	462c      	mov	r4, r5
 800e716:	e7aa      	b.n	800e66e <floor+0x46>
 800e718:	8800759c 	.word	0x8800759c
 800e71c:	7e37e43c 	.word	0x7e37e43c
 800e720:	bff00000 	.word	0xbff00000
 800e724:	000fffff 	.word	0x000fffff

0800e728 <scalbn>:
 800e728:	b570      	push	{r4, r5, r6, lr}
 800e72a:	ec55 4b10 	vmov	r4, r5, d0
 800e72e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e732:	4606      	mov	r6, r0
 800e734:	462b      	mov	r3, r5
 800e736:	b99a      	cbnz	r2, 800e760 <scalbn+0x38>
 800e738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e73c:	4323      	orrs	r3, r4
 800e73e:	d036      	beq.n	800e7ae <scalbn+0x86>
 800e740:	4b39      	ldr	r3, [pc, #228]	; (800e828 <scalbn+0x100>)
 800e742:	4629      	mov	r1, r5
 800e744:	ee10 0a10 	vmov	r0, s0
 800e748:	2200      	movs	r2, #0
 800e74a:	f7f1 ff75 	bl	8000638 <__aeabi_dmul>
 800e74e:	4b37      	ldr	r3, [pc, #220]	; (800e82c <scalbn+0x104>)
 800e750:	429e      	cmp	r6, r3
 800e752:	4604      	mov	r4, r0
 800e754:	460d      	mov	r5, r1
 800e756:	da10      	bge.n	800e77a <scalbn+0x52>
 800e758:	a32b      	add	r3, pc, #172	; (adr r3, 800e808 <scalbn+0xe0>)
 800e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75e:	e03a      	b.n	800e7d6 <scalbn+0xae>
 800e760:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e764:	428a      	cmp	r2, r1
 800e766:	d10c      	bne.n	800e782 <scalbn+0x5a>
 800e768:	ee10 2a10 	vmov	r2, s0
 800e76c:	4620      	mov	r0, r4
 800e76e:	4629      	mov	r1, r5
 800e770:	f7f1 fdac 	bl	80002cc <__adddf3>
 800e774:	4604      	mov	r4, r0
 800e776:	460d      	mov	r5, r1
 800e778:	e019      	b.n	800e7ae <scalbn+0x86>
 800e77a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e77e:	460b      	mov	r3, r1
 800e780:	3a36      	subs	r2, #54	; 0x36
 800e782:	4432      	add	r2, r6
 800e784:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e788:	428a      	cmp	r2, r1
 800e78a:	dd08      	ble.n	800e79e <scalbn+0x76>
 800e78c:	2d00      	cmp	r5, #0
 800e78e:	a120      	add	r1, pc, #128	; (adr r1, 800e810 <scalbn+0xe8>)
 800e790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e794:	da1c      	bge.n	800e7d0 <scalbn+0xa8>
 800e796:	a120      	add	r1, pc, #128	; (adr r1, 800e818 <scalbn+0xf0>)
 800e798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e79c:	e018      	b.n	800e7d0 <scalbn+0xa8>
 800e79e:	2a00      	cmp	r2, #0
 800e7a0:	dd08      	ble.n	800e7b4 <scalbn+0x8c>
 800e7a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e7a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e7aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e7ae:	ec45 4b10 	vmov	d0, r4, r5
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e7b8:	da19      	bge.n	800e7ee <scalbn+0xc6>
 800e7ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e7be:	429e      	cmp	r6, r3
 800e7c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e7c4:	dd0a      	ble.n	800e7dc <scalbn+0xb4>
 800e7c6:	a112      	add	r1, pc, #72	; (adr r1, 800e810 <scalbn+0xe8>)
 800e7c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1e2      	bne.n	800e796 <scalbn+0x6e>
 800e7d0:	a30f      	add	r3, pc, #60	; (adr r3, 800e810 <scalbn+0xe8>)
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	f7f1 ff2f 	bl	8000638 <__aeabi_dmul>
 800e7da:	e7cb      	b.n	800e774 <scalbn+0x4c>
 800e7dc:	a10a      	add	r1, pc, #40	; (adr r1, 800e808 <scalbn+0xe0>)
 800e7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d0b8      	beq.n	800e758 <scalbn+0x30>
 800e7e6:	a10e      	add	r1, pc, #56	; (adr r1, 800e820 <scalbn+0xf8>)
 800e7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7ec:	e7b4      	b.n	800e758 <scalbn+0x30>
 800e7ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e7f2:	3236      	adds	r2, #54	; 0x36
 800e7f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e7f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	4b0c      	ldr	r3, [pc, #48]	; (800e830 <scalbn+0x108>)
 800e800:	2200      	movs	r2, #0
 800e802:	e7e8      	b.n	800e7d6 <scalbn+0xae>
 800e804:	f3af 8000 	nop.w
 800e808:	c2f8f359 	.word	0xc2f8f359
 800e80c:	01a56e1f 	.word	0x01a56e1f
 800e810:	8800759c 	.word	0x8800759c
 800e814:	7e37e43c 	.word	0x7e37e43c
 800e818:	8800759c 	.word	0x8800759c
 800e81c:	fe37e43c 	.word	0xfe37e43c
 800e820:	c2f8f359 	.word	0xc2f8f359
 800e824:	81a56e1f 	.word	0x81a56e1f
 800e828:	43500000 	.word	0x43500000
 800e82c:	ffff3cb0 	.word	0xffff3cb0
 800e830:	3c900000 	.word	0x3c900000

0800e834 <_init>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	bf00      	nop
 800e838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83a:	bc08      	pop	{r3}
 800e83c:	469e      	mov	lr, r3
 800e83e:	4770      	bx	lr

0800e840 <_fini>:
 800e840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e842:	bf00      	nop
 800e844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e846:	bc08      	pop	{r3}
 800e848:	469e      	mov	lr, r3
 800e84a:	4770      	bx	lr
