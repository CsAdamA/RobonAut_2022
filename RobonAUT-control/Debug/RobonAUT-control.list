
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800dd80  0800dd80  0001dd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e430  0800e430  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800e430  0800e430  0001e430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e438  0800e438  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e438  0800e438  0001e438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e43c  0800e43c  0001e43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800e440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000228  0800e668  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800e668  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bb9  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bf  00000000  00000000  00037e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002625c  00000000  00000000  0003d968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018738  00000000  00000000  00063bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1204  00000000  00000000  0007c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe8  00000000  00000000  0015d550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd64 	.word	0x0800dd64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800dd64 	.word	0x0800dd64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db12      	blt.n	8001000 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	490a      	ldr	r1, [pc, #40]	; (800100c <__NVIC_DisableIRQ+0x44>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	3320      	adds	r3, #32
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff4:	f3bf 8f4f 	dsb	sy
}
 8000ff8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ffa:	f3bf 8f6f 	isb	sy
}
 8000ffe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0c      	blt.n	800103c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_ClearPendingIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	3360      	adds	r3, #96	; 0x60
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
}
 8001054:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <__NVIC_SystemReset+0x24>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800105e:	4904      	ldr	r1, [pc, #16]	; (8001070 <__NVIC_SystemReset+0x24>)
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_SystemReset+0x28>)
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001066:	f3bf 8f4f 	dsb	sy
}
 800106a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <__NVIC_SystemReset+0x20>
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0004 	.word	0x05fa0004

08001078 <F4_Basic_Init>:
volatile uint8_t fromPC[1];
uint8_t mode;
float v_ref; //mm/s

void F4_Basic_Init(UART_HandleTypeDef *huart_debugg,TIM_HandleTypeDef *htim_scheduler,TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_servo1,TIM_HandleTypeDef *htim_servo2, TIM_HandleTypeDef *htim_encoder)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	char buf[40];
	LED_R(0);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	4842      	ldr	r0, [pc, #264]	; (8001198 <F4_Basic_Init+0x120>)
 800108e:	f004 fe75 	bl	8005d7c <HAL_GPIO_WritePin>
	LED_B(0);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001098:	483f      	ldr	r0, [pc, #252]	; (8001198 <F4_Basic_Init+0x120>)
 800109a:	f004 fe6f 	bl	8005d7c <HAL_GPIO_WritePin>
	LED_G(0);
 800109e:	2201      	movs	r2, #1
 80010a0:	2102      	movs	r1, #2
 80010a2:	483d      	ldr	r0, [pc, #244]	; (8001198 <F4_Basic_Init+0x120>)
 80010a4:	f004 fe6a 	bl	8005d7c <HAL_GPIO_WritePin>
	LED_Y(0);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	483a      	ldr	r0, [pc, #232]	; (8001198 <F4_Basic_Init+0x120>)
 80010b0:	f004 fe64 	bl	8005d7c <HAL_GPIO_WritePin>
	LED_NUCLEO(0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4838      	ldr	r0, [pc, #224]	; (800119c <F4_Basic_Init+0x124>)
 80010ba:	f004 fe5f 	bl	8005d7c <HAL_GPIO_WritePin>
	sprintf(buf,"\r\nRobonAUT 2023 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4937      	ldr	r1, [pc, #220]	; (80011a0 <F4_Basic_Init+0x128>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f009 f985 	bl	800a3d4 <siprintf>
	HAL_UART_Transmit(huart_debugg,(uint8_t*) buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f89e 	bl	8000210 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f107 0110 	add.w	r1, r7, #16
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f007 fc0f 	bl	8008902 <HAL_UART_Transmit>

	//MotorEnable engedélyezése
	motorEnRemote=0;//csak akkor ha megnyomtuk a ravaszt
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <F4_Basic_Init+0x12c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <F4_Basic_Init+0x130>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]

	NVIC_ClearPendingIRQ(On_Board_Button_EXTI_IRQn);
 80010f0:	2028      	movs	r0, #40	; 0x28
 80010f2:	f7ff ff8d 	bl	8001010 <__NVIC_ClearPendingIRQ>
	swState[0] = swState[1] = 0;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <F4_Basic_Init+0x134>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	705a      	strb	r2, [r3, #1]
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <F4_Basic_Init+0x134>)
 80010fe:	785a      	ldrb	r2, [r3, #1]
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <F4_Basic_Init+0x134>)
 8001102:	701a      	strb	r2, [r3, #0]
	bFlag[0] = bFlag[1] = bFlag[2] = 0;
 8001104:	2200      	movs	r2, #0
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <F4_Basic_Init+0x138>)
 8001108:	4611      	mov	r1, r2
 800110a:	7099      	strb	r1, [r3, #2]
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <F4_Basic_Init+0x138>)
 800110e:	4611      	mov	r1, r2
 8001110:	7059      	strb	r1, [r3, #1]
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <F4_Basic_Init+0x138>)
 8001114:	701a      	strb	r2, [r3, #0]
	fromPC[1]=150;
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <F4_Basic_Init+0x13c>)
 8001118:	2296      	movs	r2, #150	; 0x96
 800111a:	705a      	strb	r2, [r3, #1]
	mode=SKILL;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <F4_Basic_Init+0x140>)
 800111e:	2252      	movs	r2, #82	; 0x52
 8001120:	701a      	strb	r2, [r3, #0]
	v_ref = 500;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <F4_Basic_Init+0x144>)
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <F4_Basic_Init+0x148>)
 8001126:	601a      	str	r2, [r3, #0]
	v=0;
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <F4_Basic_Init+0x14c>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

	//timerek elindítása
	TIM1->CCR4=680;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <F4_Basic_Init+0x150>)
 8001132:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR1=684;
 8001138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113c:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1=684; //servot középre
	TIM3->CCR1=499; //0 kitöltési tényező a motorra
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <F4_Basic_Init+0x154>)
 8001144:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=499;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <F4_Basic_Init+0x154>)
 800114c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start(htim_scheduler);//heart beat timer tick start
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f005 fce6 	bl	8006b24 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_1);//motor PWM-ek elindítása
 8001158:	2100      	movs	r1, #0
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f005 fda4 	bl	8006ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_motor, TIM_CHANNEL_2);
 8001160:	2104      	movs	r1, #4
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f005 fda0 	bl	8006ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo1, TIM_CHANNEL_1); //servo RC pwm elindítása
 8001168:	2100      	movs	r1, #0
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f005 fd9c 	bl	8006ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_servo2, TIM_CHANNEL_4); //servo RC pwm elindítása
 8001170:	210c      	movs	r1, #12
 8001172:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001174:	f005 fd98 	bl	8006ca8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(htim_encoder,TIM_CHANNEL_ALL);
 8001178:	213c      	movs	r1, #60	; 0x3c
 800117a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800117c:	f006 f976 	bl	800746c <HAL_TIM_Encoder_Start>

	//Ha a PC-ről küldünk vmit azt fogadjuk
	HAL_UART_Receive_IT(huart_debugg, fromPC, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	490c      	ldr	r1, [pc, #48]	; (80011b4 <F4_Basic_Init+0x13c>)
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f007 fcf0 	bl	8008b6a <HAL_UART_Receive_IT>
	NVIC_DisableIRQ(B1_EXTI_IRQn);
 800118a:	200a      	movs	r0, #10
 800118c:	f7ff ff1c 	bl	8000fc8 <__NVIC_DisableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020400 	.word	0x40020400
 800119c:	40020000 	.word	0x40020000
 80011a0:	0800dd80 	.word	0x0800dd80
 80011a4:	20000684 	.word	0x20000684
 80011a8:	20000685 	.word	0x20000685
 80011ac:	20000244 	.word	0x20000244
 80011b0:	20000248 	.word	0x20000248
 80011b4:	2000024c 	.word	0x2000024c
 80011b8:	2000024d 	.word	0x2000024d
 80011bc:	20000250 	.word	0x20000250
 80011c0:	43fa0000 	.word	0x43fa0000
 80011c4:	20000278 	.word	0x20000278
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40000400 	.word	0x40000400

080011d0 <HDI_Read_Task>:


void HDI_Read_Task(TIM_HandleTypeDef *htim_servo,uint32_t tick, uint32_t period)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	static uint32_t hdi_read_task_tick=0;
	static uint8_t b1_state=0;

	if(hdi_read_task_tick>tick) return;
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HDI_Read_Task+0x150>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	f0c0 8097 	bcc.w	8001316 <HDI_Read_Task+0x146>
	hdi_read_task_tick = tick + period;
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HDI_Read_Task+0x150>)
 80011f0:	6013      	str	r3, [r2, #0]

	swState[0]=SW1;
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <HDI_Read_Task+0x154>)
 80011f8:	f004 fda8 	bl	8005d4c <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b49      	ldr	r3, [pc, #292]	; (8001328 <HDI_Read_Task+0x158>)
 8001202:	701a      	strb	r2, [r3, #0]
	swState[1]=SW2;
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4848      	ldr	r0, [pc, #288]	; (800132c <HDI_Read_Task+0x15c>)
 800120a:	f004 fd9f 	bl	8005d4c <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b45      	ldr	r3, [pc, #276]	; (8001328 <HDI_Read_Task+0x158>)
 8001214:	705a      	strb	r2, [r3, #1]

	if(swState[0] && mode==FAST) LED_G(1);
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HDI_Read_Task+0x158>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <HDI_Read_Task+0x60>
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HDI_Read_Task+0x160>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b3f      	cmp	r3, #63	; 0x3f
 8001224:	d104      	bne.n	8001230 <HDI_Read_Task+0x60>
 8001226:	2200      	movs	r2, #0
 8001228:	2102      	movs	r1, #2
 800122a:	4840      	ldr	r0, [pc, #256]	; (800132c <HDI_Read_Task+0x15c>)
 800122c:	f004 fda6 	bl	8005d7c <HAL_GPIO_WritePin>
	if(!swState[0] && mode==FAST) LED_G(0);
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <HDI_Read_Task+0x158>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <HDI_Read_Task+0x7a>
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HDI_Read_Task+0x160>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b3f      	cmp	r3, #63	; 0x3f
 800123e:	d104      	bne.n	800124a <HDI_Read_Task+0x7a>
 8001240:	2201      	movs	r2, #1
 8001242:	2102      	movs	r1, #2
 8001244:	4839      	ldr	r0, [pc, #228]	; (800132c <HDI_Read_Task+0x15c>)
 8001246:	f004 fd99 	bl	8005d7c <HAL_GPIO_WritePin>
	/*if(swState[1]) LED_B(1);
	else LED_B(0);*/

	if(bFlag[0])
 800124a:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <HDI_Read_Task+0x164>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d031      	beq.n	80012b8 <HDI_Read_Task+0xe8>
	{
		bFlag[0]=0;
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HDI_Read_Task+0x164>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
		//Milyen módban voltunk eddig?
		HAL_FLASH_Unlock();
 800125a:	f004 fa29 	bl	80056b0 <HAL_FLASH_Unlock>
		mode= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7;
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HDI_Read_Task+0x168>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HDI_Read_Task+0x160>)
 8001266:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Lock();
 8001268:	f004 fa44 	bl	80056f4 <HAL_FLASH_Lock>

		//section 7 törlése, hogy újraírhassuk a módot jelző bytot
		HAL_FLASH_Unlock();
 800126c:	f004 fa20 	bl	80056b0 <HAL_FLASH_Unlock>
		FLASH_Erase_Sector(7, FLASH_VOLTAGE_RANGE_3);
 8001270:	2102      	movs	r1, #2
 8001272:	2007      	movs	r0, #7
 8001274:	f004 fb8e 	bl	8005994 <FLASH_Erase_Sector>
		HAL_FLASH_Lock();
 8001278:	f004 fa3c 	bl	80056f4 <HAL_FLASH_Lock>
		HAL_Delay(200);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f002 fee3 	bl	8004048 <HAL_Delay>

		//Állítsuk át a módot
		HAL_FLASH_Unlock();
 8001282:	f004 fa15 	bl	80056b0 <HAL_FLASH_Unlock>
		if(mode==SKILL) HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, FAST);
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HDI_Read_Task+0x160>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b52      	cmp	r3, #82	; 0x52
 800128c:	d108      	bne.n	80012a0 <HDI_Read_Task+0xd0>
 800128e:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	4928      	ldr	r1, [pc, #160]	; (8001338 <HDI_Read_Task+0x168>)
 8001298:	2000      	movs	r0, #0
 800129a:	f004 f9b5 	bl	8005608 <HAL_FLASH_Program>
 800129e:	e007      	b.n	80012b0 <HDI_Read_Task+0xe0>
		else HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_ADDRESS_SECTOR7, SKILL);
 80012a0:	f04f 0252 	mov.w	r2, #82	; 0x52
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	4923      	ldr	r1, [pc, #140]	; (8001338 <HDI_Read_Task+0x168>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f004 f9ac 	bl	8005608 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80012b0:	f004 fa20 	bl	80056f4 <HAL_FLASH_Lock>

		NVIC_SystemReset(); //SW reseteljük a mikorvezérlőt
 80012b4:	f7ff feca 	bl	800104c <__NVIC_SystemReset>
	}

	if(bFlag[1])
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HDI_Read_Task+0x164>)
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d02a      	beq.n	8001318 <HDI_Read_Task+0x148>
	{
		if(b1_state)HAL_TIM_PWM_Start(htim_servo, TIM_CHANNEL_1);
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HDI_Read_Task+0x16c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HDI_Read_Task+0x104>
 80012ca:	2100      	movs	r1, #0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f005 fceb 	bl	8006ca8 <HAL_TIM_PWM_Start>
 80012d2:	e003      	b.n	80012dc <HDI_Read_Task+0x10c>
		else HAL_TIM_PWM_Stop(htim_servo, TIM_CHANNEL_1);
 80012d4:	2100      	movs	r1, #0
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f005 fdae 	bl	8006e38 <HAL_TIM_PWM_Stop>
		LED_Y_TOGGLE;
 80012dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <HDI_Read_Task+0x15c>)
 80012e2:	f004 fd64 	bl	8005dae <HAL_GPIO_TogglePin>
		b1_state = !b1_state;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HDI_Read_Task+0x16c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HDI_Read_Task+0x16c>)
 80012f8:	701a      	strb	r2, [r3, #0]
		bFlag[1]=0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HDI_Read_Task+0x164>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	705a      	strb	r2, [r3, #1]
		HAL_Delay(800);
 8001300:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001304:	f002 fea0 	bl	8004048 <HAL_Delay>
		NVIC_ClearPendingIRQ(B1_EXTI_IRQn);
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff fe81 	bl	8001010 <__NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(B1_EXTI_IRQn);
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fe3c 	bl	8000f8c <__NVIC_EnableIRQ>
 8001314:	e000      	b.n	8001318 <HDI_Read_Task+0x148>
	if(hdi_read_task_tick>tick) return;
 8001316:	bf00      	nop
	}

}
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000254 	.word	0x20000254
 8001324:	40020000 	.word	0x40020000
 8001328:	20000244 	.word	0x20000244
 800132c:	40020400 	.word	0x40020400
 8001330:	2000024d 	.word	0x2000024d
 8001334:	20000248 	.word	0x20000248
 8001338:	08060000 	.word	0x08060000
 800133c:	20000258 	.word	0x20000258

08001340 <Uart_Receive_From_PC_ISR>:

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	LED_Y_TOGGLE;
 8001348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <Uart_Receive_From_PC_ISR+0x30>)
 800134e:	f004 fd2e 	bl	8005dae <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, (uint8_t*)fromPC, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <Uart_Receive_From_PC_ISR+0x34>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f007 fc07 	bl	8008b6a <HAL_UART_Receive_IT>
	TIM1->CCR4 = 4*fromPC[0];
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <Uart_Receive_From_PC_ISR+0x34>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <Uart_Receive_From_PC_ISR+0x38>)
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400
 8001374:	2000024c 	.word	0x2000024c
 8001378:	40010000 	.word	0x40010000

0800137c <Mode_Selector>:

}


void Mode_Selector(UART_HandleTypeDef *huart_debugg, UART_HandleTypeDef *huart_stm)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	//Milyen módban kell működni?
	uint8_t buffer[40];
	uint32_t tmp=0;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34

	//HAL_FLASH_Unlock();
	tmp= *(__IO uint32_t *) FLASH_ADDRESS_SECTOR7; //FLASH-ből kiolvassuk, hogy milyen módban vagyunk
 800138a:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <Mode_Selector+0x134>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
	//HAL_FLASH_Lock();
	mode = (uint8_t)tmp;
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <Mode_Selector+0x138>)
 8001396:	701a      	strb	r2, [r3, #0]

	if(mode==SKILL)
 8001398:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <Mode_Selector+0x138>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b52      	cmp	r3, #82	; 0x52
 800139e:	d135      	bne.n	800140c <Mode_Selector+0x90>
	{
		buffer[0] = CMD_MODE_SKILL; //szólunk a g0-nak, hogy ügyességi módban vagyunk
 80013a0:	2352      	movs	r3, #82	; 0x52
 80013a2:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80013a4:	f107 010c 	add.w	r1, r7, #12
 80013a8:	230a      	movs	r3, #10
 80013aa:	2201      	movs	r2, #1
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f007 faa8 	bl	8008902 <HAL_UART_Transmit>
		HAL_Delay(10);
 80013b2:	200a      	movs	r0, #10
 80013b4:	f002 fe48 	bl	8004048 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);//3 szór is szólunk neki, hogy tuti megkapja a módváltásról az üzenetet
 80013b8:	f107 010c 	add.w	r1, r7, #12
 80013bc:	230a      	movs	r3, #10
 80013be:	2201      	movs	r2, #1
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f007 fa9e 	bl	8008902 <HAL_UART_Transmit>
		HAL_Delay(10);
 80013c6:	200a      	movs	r0, #10
 80013c8:	f002 fe3e 	bl	8004048 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	230a      	movs	r3, #10
 80013d2:	2201      	movs	r2, #1
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f007 fa94 	bl	8008902 <HAL_UART_Transmit>

		sprintf((char*)buffer,"Skill mode!\n\r"); //Debugg uart-ra is kiküldjük, hogy milyen módban vagyunk
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4936      	ldr	r1, [pc, #216]	; (80014b8 <Mode_Selector+0x13c>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f008 fff7 	bl	800a3d4 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ff10 	bl	8000210 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f107 010c 	add.w	r1, r7, #12
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f007 fa81 	bl	8008902 <HAL_UART_Transmit>
		LED_NUCLEO(1); //A NUCLEO zöld LED-je világít, ha ügyeségi üzemmódban vagyunk
 8001400:	2201      	movs	r2, #1
 8001402:	2120      	movs	r1, #32
 8001404:	482d      	ldr	r0, [pc, #180]	; (80014bc <Mode_Selector+0x140>)
 8001406:	f004 fcb9 	bl	8005d7c <HAL_GPIO_WritePin>
	else
	{
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
	}
}
 800140a:	e04c      	b.n	80014a6 <Mode_Selector+0x12a>
	else if(mode==FAST)
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <Mode_Selector+0x138>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b3f      	cmp	r3, #63	; 0x3f
 8001412:	d135      	bne.n	8001480 <Mode_Selector+0x104>
		buffer[0] = CMD_MODE_FAST;
 8001414:	233f      	movs	r3, #63	; 0x3f
 8001416:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001418:	f107 010c 	add.w	r1, r7, #12
 800141c:	230a      	movs	r3, #10
 800141e:	2201      	movs	r2, #1
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f007 fa6e 	bl	8008902 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001426:	200a      	movs	r0, #10
 8001428:	f002 fe0e 	bl	8004048 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 800142c:	f107 010c 	add.w	r1, r7, #12
 8001430:	230a      	movs	r3, #10
 8001432:	2201      	movs	r2, #1
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f007 fa64 	bl	8008902 <HAL_UART_Transmit>
		HAL_Delay(10);
 800143a:	200a      	movs	r0, #10
 800143c:	f002 fe04 	bl	8004048 <HAL_Delay>
		HAL_UART_Transmit(huart_stm, buffer,1, 10);
 8001440:	f107 010c 	add.w	r1, r7, #12
 8001444:	230a      	movs	r3, #10
 8001446:	2201      	movs	r2, #1
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f007 fa5a 	bl	8008902 <HAL_UART_Transmit>
		sprintf((char*)buffer,"Fast mode!\n\r");
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	491b      	ldr	r1, [pc, #108]	; (80014c0 <Mode_Selector+0x144>)
 8001454:	4618      	mov	r0, r3
 8001456:	f008 ffbd 	bl	800a3d4 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe fed6 	bl	8000210 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f107 010c 	add.w	r1, r7, #12
 800146c:	2364      	movs	r3, #100	; 0x64
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f007 fa47 	bl	8008902 <HAL_UART_Transmit>
		LED_NUCLEO(0);
 8001474:	2200      	movs	r2, #0
 8001476:	2120      	movs	r1, #32
 8001478:	4810      	ldr	r0, [pc, #64]	; (80014bc <Mode_Selector+0x140>)
 800147a:	f004 fc7f 	bl	8005d7c <HAL_GPIO_WritePin>
}
 800147e:	e012      	b.n	80014a6 <Mode_Selector+0x12a>
		sprintf((char*)buffer,"Flash error! Press blue button!\n\r");
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	490f      	ldr	r1, [pc, #60]	; (80014c4 <Mode_Selector+0x148>)
 8001486:	4618      	mov	r0, r3
 8001488:	f008 ffa4 	bl	800a3d4 <siprintf>
		HAL_UART_Transmit(huart_debugg, buffer, strlen((char*)buffer), 100);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe febd 	bl	8000210 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	f107 010c 	add.w	r1, r7, #12
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f007 fa2e 	bl	8008902 <HAL_UART_Transmit>
}
 80014a6:	bf00      	nop
 80014a8:	3738      	adds	r7, #56	; 0x38
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	08060000 	.word	0x08060000
 80014b4:	2000024d 	.word	0x2000024d
 80014b8:	0800dda4 	.word	0x0800dda4
 80014bc:	40020000 	.word	0x40020000
 80014c0:	0800ddb4 	.word	0x0800ddb4
 80014c4:	0800ddc4 	.word	0x0800ddc4

080014c8 <Skill_Mode>:

//bemenet detect, kalozrobpoz; kimenet direction
float Skill_Mode(UART_HandleTypeDef *huart_debugg, float kP, float kD, uint32_t t)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80014d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	static uint32_t t_prev=0;
	uint32_t byte=0;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
	static uint32_t byte_prev=0;
	uint8_t delta_byte;
	float p=0;
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
/*	uint8_t str[40];
	sprintf(str,"%d,  %d,  %d,  %d,  %d\n\r",rxBuf[1],rxBuf[2],rxBuf[3],rxBuf[4],rxBuf[5]);
	HAL_UART_Transmit(huart_debugg, str, strlen(str), 10);
*/

	if(LINE_CNT>3 || ignore)//ha éppen node-on vagyunk, akkor az átlagot követjük
 80014e4:	4b62      	ldr	r3, [pc, #392]	; (8001670 <Skill_Mode+0x1a8>)
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d803      	bhi.n	80014f4 <Skill_Mode+0x2c>
 80014ec:	4b61      	ldr	r3, [pc, #388]	; (8001674 <Skill_Mode+0x1ac>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d021      	beq.n	8001538 <Skill_Mode+0x70>
	{
		byte=0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	e00a      	b.n	8001514 <Skill_Mode+0x4c>
		{
			byte += rxBuf[i+2];
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3302      	adds	r3, #2
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <Skill_Mode+0x1a8>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	461a      	mov	r2, r3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4413      	add	r3, r2
 800150c:	61fb      	str	r3, [r7, #28]
		for(i=0;i<LINE_CNT;i++)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	3301      	adds	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	4b56      	ldr	r3, [pc, #344]	; (8001670 <Skill_Mode+0x1a8>)
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	461a      	mov	r2, r3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4293      	cmp	r3, r2
 800151e:	dbee      	blt.n	80014fe <Skill_Mode+0x36>
		}

		if(LINE_CNT) byte /= LINE_CNT;
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <Skill_Mode+0x1a8>)
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05f      	beq.n	80015e8 <Skill_Mode+0x120>
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <Skill_Mode+0x1a8>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	461a      	mov	r2, r3
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fbb3 f3f2 	udiv	r3, r3, r2
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	e057      	b.n	80015e8 <Skill_Mode+0x120>
	}
	else if(path==LEFT)
 8001538:	4b4f      	ldr	r3, [pc, #316]	; (8001678 <Skill_Mode+0x1b0>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10b      	bne.n	8001558 <Skill_Mode+0x90>
	{
		byte = LINE1; //az első vonalt kell követni
 8001540:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <Skill_Mode+0x1a8>)
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	61fb      	str	r3, [r7, #28]
		delta_byte=abs(byte-byte_prev);
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <Skill_Mode+0x1b4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	bfb8      	it	lt
 8001552:	425b      	neglt	r3, r3
 8001554:	74fb      	strb	r3, [r7, #19]
 8001556:	e047      	b.n	80015e8 <Skill_Mode+0x120>
			estuary=ESTUARY_MODE_OFF;
			LED_G(0);
		}
		*/
	}
	else if(path==RIGHT)
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <Skill_Mode+0x1b0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d10e      	bne.n	800157e <Skill_Mode+0xb6>
	{
		byte = rxBuf[1+LINE_CNT];//az utolsó vonalat kell követni
 8001560:	4b43      	ldr	r3, [pc, #268]	; (8001670 <Skill_Mode+0x1a8>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	3301      	adds	r3, #1
 8001566:	4a42      	ldr	r2, [pc, #264]	; (8001670 <Skill_Mode+0x1a8>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	61fb      	str	r3, [r7, #28]
		delta_byte=abs(byte-byte_prev);
 800156c:	4b43      	ldr	r3, [pc, #268]	; (800167c <Skill_Mode+0x1b4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	bfb8      	it	lt
 8001578:	425b      	neglt	r3, r3
 800157a:	74fb      	strb	r3, [r7, #19]
 800157c:	e034      	b.n	80015e8 <Skill_Mode+0x120>
			LED_G(0);
		}
		*/
	}

	else if(path==MIDDLE)
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <Skill_Mode+0x1b0>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d130      	bne.n	80015e8 <Skill_Mode+0x120>
	{
		if(LINE_CNT==1)byte = LINE1;//ha csak 1 vonal van, akkor azt követjük
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <Skill_Mode+0x1a8>)
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d103      	bne.n	8001596 <Skill_Mode+0xce>
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <Skill_Mode+0x1a8>)
 8001590:	789b      	ldrb	r3, [r3, #2]
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	e028      	b.n	80015e8 <Skill_Mode+0x120>
		else if(LINE_CNT==3)//ha 3 vonal van
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <Skill_Mode+0x1a8>)
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d113      	bne.n	80015c6 <Skill_Mode+0xfe>
		{
			byte = rxBuf[3];//a középsőt követjük
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <Skill_Mode+0x1a8>)
 80015a0:	78db      	ldrb	r3, [r3, #3]
 80015a2:	61fb      	str	r3, [r7, #28]
			//folyamatosan nézzük, hogy az 1. és 3.vonal milyen messze van a vonalszenor középontjától
			tmp1=abs((int)LINE1-123);
 80015a4:	4b32      	ldr	r3, [pc, #200]	; (8001670 <Skill_Mode+0x1a8>)
 80015a6:	789b      	ldrb	r3, [r3, #2]
 80015a8:	3b7b      	subs	r3, #123	; 0x7b
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bfb8      	it	lt
 80015ae:	425b      	neglt	r3, r3
 80015b0:	4a33      	ldr	r2, [pc, #204]	; (8001680 <Skill_Mode+0x1b8>)
 80015b2:	6013      	str	r3, [r2, #0]
			tmp2=abs((int)LINE3-123);
 80015b4:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <Skill_Mode+0x1a8>)
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	3b7b      	subs	r3, #123	; 0x7b
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bfb8      	it	lt
 80015be:	425b      	neglt	r3, r3
 80015c0:	4a30      	ldr	r2, [pc, #192]	; (8001684 <Skill_Mode+0x1bc>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e010      	b.n	80015e8 <Skill_Mode+0x120>
		}
		else if(LINE_CNT==2)//ha 2 vonal van, az azt jelenti, hogy az elágazás már annyira szétgáazott, hogy csak 2-t látunk a 3 vonalból
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <Skill_Mode+0x1a8>)
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d10c      	bne.n	80015e8 <Skill_Mode+0x120>
		{
			if(tmp1<tmp2) byte = LINE1; //ha a jobboldali vonalat veszítettük el
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <Skill_Mode+0x1b8>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <Skill_Mode+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	da03      	bge.n	80015e2 <Skill_Mode+0x11a>
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <Skill_Mode+0x1a8>)
 80015dc:	789b      	ldrb	r3, [r3, #2]
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	e002      	b.n	80015e8 <Skill_Mode+0x120>
			else byte = LINE2; //ha a baloldali vonalat veszítettük el
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <Skill_Mode+0x1a8>)
 80015e4:	78db      	ldrb	r3, [r3, #3]
 80015e6:	61fb      	str	r3, [r7, #28]
		}
	}
	p = byte * 204/248.0-102;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	22cc      	movs	r2, #204	; 0xcc
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa7 	bl	8000544 <__aeabi_ui2d>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <Skill_Mode+0x1c0>)
 80015fc:	f7ff f946 	bl	800088c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <Skill_Mode+0x1c4>)
 800160e:	f7fe fe5b 	bl	80002c8 <__aeabi_dsub>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fae5 	bl	8000be8 <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	617b      	str	r3, [r7, #20]
	gamma = -kP * p  - kD*(p-p_prev);
 8001622:	edd7 7a02 	vldr	s15, [r7, #8]
 8001626:	eeb1 7a67 	vneg.f32	s14, s15
 800162a:	edd7 7a05 	vldr	s15, [r7, #20]
 800162e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <Skill_Mode+0x1c8>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	edd7 6a05 	vldr	s13, [r7, #20]
 800163c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001640:	edd7 7a01 	vldr	s15, [r7, #4]
 8001644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <Skill_Mode+0x1cc>)
 800164e:	edc3 7a00 	vstr	s15, [r3]
	p_prev = p;
 8001652:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <Skill_Mode+0x1c8>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	6013      	str	r3, [r2, #0]
	byte_prev=byte;
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <Skill_Mode+0x1b4>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	6013      	str	r3, [r2, #0]

	return gamma;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <Skill_Mode+0x1cc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	ee07 3a90 	vmov	s15, r3
}
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000290 	.word	0x20000290
 8001674:	2000025b 	.word	0x2000025b
 8001678:	2000025a 	.word	0x2000025a
 800167c:	2000025c 	.word	0x2000025c
 8001680:	20000260 	.word	0x20000260
 8001684:	20000264 	.word	0x20000264
 8001688:	406f0000 	.word	0x406f0000
 800168c:	40598000 	.word	0x40598000
 8001690:	20000268 	.word	0x20000268
 8001694:	2000026c 	.word	0x2000026c

08001698 <Detect_Node3>:
	}

}

void Detect_Node3(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	static uint32_t dt=0;
	static uint32_t t_prev=0;

	dt=t-t_prev;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <Detect_Node3+0x64>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <Detect_Node3+0x68>)
 80016ac:	6013      	str	r3, [r2, #0]
	if(LINE_CNT==4 && dt> 2000)
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <Detect_Node3+0x6c>)
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d11e      	bne.n	80016f4 <Detect_Node3+0x5c>
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <Detect_Node3+0x68>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016be:	d919      	bls.n	80016f4 <Detect_Node3+0x5c>
	{
		LED_B_TOGGLE;
 80016c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c4:	4810      	ldr	r0, [pc, #64]	; (8001708 <Detect_Node3+0x70>)
 80016c6:	f004 fb72 	bl	8005dae <HAL_GPIO_TogglePin>
		nodeDetected=1;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <Detect_Node3+0x74>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
		/**/
		if(path==0)path=2;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <Detect_Node3+0x78>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <Detect_Node3+0x48>
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <Detect_Node3+0x78>)
 80016da:	2202      	movs	r2, #2
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e006      	b.n	80016ee <Detect_Node3+0x56>
		else if(path==2)path=0;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <Detect_Node3+0x78>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d102      	bne.n	80016ee <Detect_Node3+0x56>
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <Detect_Node3+0x78>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

		t_prev=t;
 80016ee:	4a03      	ldr	r2, [pc, #12]	; (80016fc <Detect_Node3+0x64>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6013      	str	r3, [r2, #0]
	}
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000270 	.word	0x20000270
 8001700:	20000274 	.word	0x20000274
 8001704:	20000290 	.word	0x20000290
 8001708:	40020400 	.word	0x40020400
 800170c:	20000259 	.word	0x20000259
 8001710:	2000025a 	.word	0x2000025a
 8001714:	00000000 	.word	0x00000000

08001718 <Battery_Voltage_Compensate>:
float v=0;
//ha 1000 akkor a motor full csutkán megy előre
//ha -1000 akkor a motor full csutkán megy hátra

void Battery_Voltage_Compensate(ADC_HandleTypeDef *hadc_UNiMh,ADC_HandleTypeDef *hadc_ULiPo,UART_HandleTypeDef *huart_debugg)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b090      	sub	sp, #64	; 0x40
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	char msg[30];
	uint32_t raw=0;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bat;
	int i;

	//NiMh akku mérése
	for(i=0;i<20;i++)
 8001728:	2300      	movs	r3, #0
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
 800172c:	e016      	b.n	800175c <Battery_Voltage_Compensate+0x44>
	{
		HAL_ADC_Start(hadc_UNiMh);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f002 fcf2 	bl	8004118 <HAL_ADC_Start>
		HAL_Delay(10);
 8001734:	200a      	movs	r0, #10
 8001736:	f002 fc87 	bl	8004048 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_UNiMh,20);
 800173a:	2114      	movs	r1, #20
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f002 fdbd 	bl	80042bc <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 8001742:	200a      	movs	r0, #10
 8001744:	f002 fc80 	bl	8004048 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_UNiMh);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f002 fe42 	bl	80043d2 <HAL_ADC_GetValue>
 800174e:	4602      	mov	r2, r0
 8001750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001752:	4413      	add	r3, r2
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	3301      	adds	r3, #1
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	2b13      	cmp	r3, #19
 8001760:	dde5      	ble.n	800172e <Battery_Voltage_Compensate+0x16>
	}
	bat=(float)raw * 0.00460575 / 20.0;//ez a mi feszültségünk V-ban
 8001762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176c:	ee17 0a90 	vmov	r0, s15
 8001770:	f7fe ff0a 	bl	8000588 <__aeabi_f2d>
 8001774:	a37b      	add	r3, pc, #492	; (adr r3, 8001964 <Battery_Voltage_Compensate+0x24c>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff5d 	bl	8000638 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b71      	ldr	r3, [pc, #452]	; (8001950 <Battery_Voltage_Compensate+0x238>)
 800178c:	f7ff f87e 	bl	800088c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa26 	bl	8000be8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"NiMh charge: %2.2f V \r\n", bat);
 80017a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017a2:	f7fe fef1 	bl	8000588 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	f107 0014 	add.w	r0, r7, #20
 80017ae:	4969      	ldr	r1, [pc, #420]	; (8001954 <Battery_Voltage_Compensate+0x23c>)
 80017b0:	f008 fe10 	bl	800a3d4 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*) msg, strlen(msg),10);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fd29 	bl	8000210 <strlen>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	f107 0114 	add.w	r1, r7, #20
 80017c6:	230a      	movs	r3, #10
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f007 f89a 	bl	8008902 <HAL_UART_Transmit>

	if(bat)compensation=7.75/bat;
 80017ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d009      	beq.n	80017f0 <Battery_Voltage_Compensate+0xd8>
 80017dc:	eef1 6a0f 	vmov.f32	s13, #31	; 0x40f80000  7.750
 80017e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80017e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e8:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <Battery_Voltage_Compensate+0x240>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
 80017ee:	e003      	b.n	80017f8 <Battery_Voltage_Compensate+0xe0>
	else compensation=1;
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <Battery_Voltage_Compensate+0x240>)
 80017f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017f6:	601a      	str	r2, [r3, #0]

	if(bat < 7.2)
 80017f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017fa:	f7fe fec5 	bl	8000588 <__aeabi_f2d>
 80017fe:	a34e      	add	r3, pc, #312	; (adr r3, 8001938 <Battery_Voltage_Compensate+0x220>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7ff f98a 	bl	8000b1c <__aeabi_dcmplt>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d010      	beq.n	8001830 <Battery_Voltage_Compensate+0x118>
	{
		for(i=0;i<10;i++)
 800180e:	2300      	movs	r3, #0
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
 8001812:	e00a      	b.n	800182a <Battery_Voltage_Compensate+0x112>
		{
			LED_Y_TOGGLE;
 8001814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001818:	4850      	ldr	r0, [pc, #320]	; (800195c <Battery_Voltage_Compensate+0x244>)
 800181a:	f004 fac8 	bl	8005dae <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800181e:	20c8      	movs	r0, #200	; 0xc8
 8001820:	f002 fc12 	bl	8004048 <HAL_Delay>
		for(i=0;i<10;i++)
 8001824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001826:	3301      	adds	r3, #1
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
 800182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182c:	2b09      	cmp	r3, #9
 800182e:	ddf1      	ble.n	8001814 <Battery_Voltage_Compensate+0xfc>
		}
	}

	//LiPo akku mérése
	raw=0;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
 8001838:	e016      	b.n	8001868 <Battery_Voltage_Compensate+0x150>
	{
		HAL_ADC_Start(hadc_ULiPo);
 800183a:	68b8      	ldr	r0, [r7, #8]
 800183c:	f002 fc6c 	bl	8004118 <HAL_ADC_Start>
		HAL_Delay(10);
 8001840:	200a      	movs	r0, #10
 8001842:	f002 fc01 	bl	8004048 <HAL_Delay>
		HAL_ADC_PollForConversion(hadc_ULiPo,20);
 8001846:	2114      	movs	r1, #20
 8001848:	68b8      	ldr	r0, [r7, #8]
 800184a:	f002 fd37 	bl	80042bc <HAL_ADC_PollForConversion>
		HAL_Delay(10);
 800184e:	200a      	movs	r0, #10
 8001850:	f002 fbfa 	bl	8004048 <HAL_Delay>
		raw += HAL_ADC_GetValue(hadc_ULiPo);
 8001854:	68b8      	ldr	r0, [r7, #8]
 8001856:	f002 fdbc 	bl	80043d2 <HAL_ADC_GetValue>
 800185a:	4602      	mov	r2, r0
 800185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185e:	4413      	add	r3, r2
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i=0;i<20;i++)
 8001862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001864:	3301      	adds	r3, #1
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
 8001868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186a:	2b13      	cmp	r3, #19
 800186c:	dde5      	ble.n	800183a <Battery_Voltage_Compensate+0x122>

	}
	bat = (float)raw * 0.003241242 / 20.0 + 0.02;//ez a mi feszültségünk V-ban
 800186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001878:	ee17 0a90 	vmov	r0, s15
 800187c:	f7fe fe84 	bl	8000588 <__aeabi_f2d>
 8001880:	a32f      	add	r3, pc, #188	; (adr r3, 8001940 <Battery_Voltage_Compensate+0x228>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fed7 	bl	8000638 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <Battery_Voltage_Compensate+0x238>)
 8001898:	f7fe fff8 	bl	800088c <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	a328      	add	r3, pc, #160	; (adr r3, 8001948 <Battery_Voltage_Compensate+0x230>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fd0f 	bl	80002cc <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f997 	bl	8000be8 <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(msg,"LiPo charge: %2.2f V \r\n", bat);
 80018be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018c0:	f7fe fe62 	bl	8000588 <__aeabi_f2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	f107 0014 	add.w	r0, r7, #20
 80018cc:	4924      	ldr	r1, [pc, #144]	; (8001960 <Battery_Voltage_Compensate+0x248>)
 80018ce:	f008 fd81 	bl	800a3d4 <siprintf>
	HAL_UART_Transmit(huart_debugg, (uint8_t*)msg, strlen(msg),10);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fc9a 	bl	8000210 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f107 0114 	add.w	r1, r7, #20
 80018e4:	230a      	movs	r3, #10
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f007 f80b 	bl	8008902 <HAL_UART_Transmit>

	/**/
	if(bat < 10)
 80018ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d510      	bpl.n	8001920 <Battery_Voltage_Compensate+0x208>
	{
		for(i=0;i<20;i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	63bb      	str	r3, [r7, #56]	; 0x38
 8001902:	e00a      	b.n	800191a <Battery_Voltage_Compensate+0x202>
		{
			LED_Y_TOGGLE;
 8001904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001908:	4814      	ldr	r0, [pc, #80]	; (800195c <Battery_Voltage_Compensate+0x244>)
 800190a:	f004 fa50 	bl	8005dae <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 800190e:	20c8      	movs	r0, #200	; 0xc8
 8001910:	f002 fb9a 	bl	8004048 <HAL_Delay>
		for(i=0;i<20;i++)
 8001914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001916:	3301      	adds	r3, #1
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
 800191a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191c:	2b13      	cmp	r3, #19
 800191e:	ddf1      	ble.n	8001904 <Battery_Voltage_Compensate+0x1ec>
		}
	}

	LED_Y(0);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <Battery_Voltage_Compensate+0x244>)
 8001928:	f004 fa28 	bl	8005d7c <HAL_GPIO_WritePin>

}
 800192c:	bf00      	nop
 800192e:	3740      	adds	r7, #64	; 0x40
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	f3af 8000 	nop.w
 8001938:	cccccccd 	.word	0xcccccccd
 800193c:	401ccccc 	.word	0x401ccccc
 8001940:	8c6df334 	.word	0x8c6df334
 8001944:	3f6a8d60 	.word	0x3f6a8d60
 8001948:	47ae147b 	.word	0x47ae147b
 800194c:	3f947ae1 	.word	0x3f947ae1
 8001950:	40340000 	.word	0x40340000
 8001954:	0800dde8 	.word	0x0800dde8
 8001958:	20000000 	.word	0x20000000
 800195c:	40020400 	.word	0x40020400
 8001960:	0800de00 	.word	0x0800de00
 8001964:	99fa11a9 	.word	0x99fa11a9
 8001968:	3f72dd7a 	.word	0x3f72dd7a
 800196c:	00000000 	.word	0x00000000

08001970 <Measure_Velocity_Task>:

void Measure_Velocity_Task(TIM_HandleTypeDef *htim_encoder,uint32_t tick, uint32_t period)
{
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	static uint32_t tick_prev=0;
	static uint32_t measure_v_task_tick=4;
	static float alpha=0.3;
	static float invalpha=0.7;
	float v_uj=0;
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	617b      	str	r3, [r7, #20]

	if(measure_v_task_tick>tick) return;
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <Measure_Velocity_Task+0xd8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	d354      	bcc.n	8001a36 <Measure_Velocity_Task+0xc6>
	measure_v_task_tick= tick + period;
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <Measure_Velocity_Task+0xd8>)
 8001994:	6013      	str	r3, [r2, #0]
	if(!tick_prev)
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <Measure_Velocity_Task+0xdc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <Measure_Velocity_Task+0x36>
	{
		tick_prev=tick;
 800199e:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <Measure_Velocity_Task+0xdc>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	6013      	str	r3, [r2, #0]
		return;
 80019a4:	e048      	b.n	8001a38 <Measure_Velocity_Task+0xc8>
	}
	v_uj =((float) 0x8000 - (float) __HAL_TIM_GET_COUNTER(htim_encoder))*7.49/(float)period; //mm/s dimenzió
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001a50 <Measure_Velocity_Task+0xe0>
 80019b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019bc:	ee17 0a90 	vmov	r0, s15
 80019c0:	f7fe fde2 	bl	8000588 <__aeabi_f2d>
 80019c4:	a31e      	add	r3, pc, #120	; (adr r3, 8001a40 <Measure_Velocity_Task+0xd0>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fe35 	bl	8000638 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4614      	mov	r4, r2
 80019d4:	461d      	mov	r5, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e0:	ee17 0a90 	vmov	r0, s15
 80019e4:	f7fe fdd0 	bl	8000588 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4620      	mov	r0, r4
 80019ee:	4629      	mov	r1, r5
 80019f0:	f7fe ff4c 	bl	800088c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8f4 	bl	8000be8 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	617b      	str	r3, [r7, #20]
	TIM8->CNT=0x8000;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <Measure_Velocity_Task+0xe4>)
 8001a06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
	//tick_prev=tick;
	//exponenciális szűrés
	v = alpha*(float)v_uj + invalpha*v;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <Measure_Velocity_Task+0xe8>)
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <Measure_Velocity_Task+0xec>)
 8001a1c:	edd3 6a00 	vldr	s13, [r3]
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <Measure_Velocity_Task+0xf0>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <Measure_Velocity_Task+0xf0>)
 8001a30:	edc3 7a00 	vstr	s15, [r3]
 8001a34:	e000      	b.n	8001a38 <Measure_Velocity_Task+0xc8>
	if(measure_v_task_tick>tick) return;
 8001a36:	bf00      	nop
}
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	8f5c28f6 	.word	0x8f5c28f6
 8001a44:	401df5c2 	.word	0x401df5c2
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	2000027c 	.word	0x2000027c
 8001a50:	47000000 	.word	0x47000000
 8001a54:	40010400 	.word	0x40010400
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	20000278 	.word	0x20000278
 8001a64:	00000000 	.word	0x00000000

08001a68 <Motor_Drive_Task>:

void Motor_Drive_Task(TIM_HandleTypeDef *htim_motor, UART_HandleTypeDef *huart, uint32_t tick, uint32_t period) //DUTY paramtert kiszedtem -> változtassuk a globális változót
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
	static uint32_t motor_drive_task_tick=5;
	static float f,u=0;

	int32_t ccr1;
	int32_t ccr2;
	if(motor_drive_task_tick>tick) return;
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <Motor_Drive_Task+0x230>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f0c0 80f8 	bcc.w	8001c72 <Motor_Drive_Task+0x20a>
	motor_drive_task_tick= tick + period;
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a83      	ldr	r2, [pc, #524]	; (8001c98 <Motor_Drive_Task+0x230>)
 8001a8a:	6013      	str	r3, [r2, #0]

	if(motorEnRemote && motorEnLineOk) //ha nem nyomtunk vészstopot és az akkuk is rendben vannak akkor pöröghet a motor
 8001a8c:	4b83      	ldr	r3, [pc, #524]	; (8001c9c <Motor_Drive_Task+0x234>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80b4 	beq.w	8001bfe <Motor_Drive_Task+0x196>
 8001a96:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <Motor_Drive_Task+0x238>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80af 	beq.w	8001bfe <Motor_Drive_Task+0x196>
	{
		//az u paraméter a bevatkozó jel minusz holtásávot adja meg
		u= KC * (v_ref - v) * compensation + f;
 8001aa0:	4b80      	ldr	r3, [pc, #512]	; (8001ca4 <Motor_Drive_Task+0x23c>)
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	4b80      	ldr	r3, [pc, #512]	; (8001ca8 <Motor_Drive_Task+0x240>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab0:	ee17 0a90 	vmov	r0, s15
 8001ab4:	f7fe fd68 	bl	8000588 <__aeabi_f2d>
 8001ab8:	a371      	add	r3, pc, #452	; (adr r3, 8001c80 <Motor_Drive_Task+0x218>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fdbb 	bl	8000638 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	461d      	mov	r5, r3
 8001aca:	4b78      	ldr	r3, [pc, #480]	; (8001cac <Motor_Drive_Task+0x244>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd5a 	bl	8000588 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4620      	mov	r0, r4
 8001ada:	4629      	mov	r1, r5
 8001adc:	f7fe fdac 	bl	8000638 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4614      	mov	r4, r2
 8001ae6:	461d      	mov	r5, r3
 8001ae8:	4b71      	ldr	r3, [pc, #452]	; (8001cb0 <Motor_Drive_Task+0x248>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd4b 	bl	8000588 <__aeabi_f2d>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4620      	mov	r0, r4
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fbe7 	bl	80002cc <__adddf3>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f86f 	bl	8000be8 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001b0e:	6013      	str	r3, [r2, #0]
		if(u>880) u=880;
 8001b10:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001cb8 <Motor_Drive_Task+0x250>
 8001b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	dd03      	ble.n	8001b2c <Motor_Drive_Task+0xc4>
 8001b24:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001b26:	4a65      	ldr	r2, [pc, #404]	; (8001cbc <Motor_Drive_Task+0x254>)
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00c      	b.n	8001b46 <Motor_Drive_Task+0xde>
		else if(u<-200)u=-200;
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001cc0 <Motor_Drive_Task+0x258>
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	d502      	bpl.n	8001b46 <Motor_Drive_Task+0xde>
 8001b40:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001b42:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <Motor_Drive_Task+0x25c>)
 8001b44:	601a      	str	r2, [r3, #0]
		f = ZD*f + (1-ZD)*u;
 8001b46:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <Motor_Drive_Task+0x248>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd1c 	bl	8000588 <__aeabi_f2d>
 8001b50:	a34d      	add	r3, pc, #308	; (adr r3, 8001c88 <Motor_Drive_Task+0x220>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fd6f 	bl	8000638 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fd0e 	bl	8000588 <__aeabi_f2d>
 8001b6c:	a348      	add	r3, pc, #288	; (adr r3, 8001c90 <Motor_Drive_Task+0x228>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fd61 	bl	8000638 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	f7fe fba5 	bl	80002cc <__adddf3>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f82d 	bl	8000be8 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <Motor_Drive_Task+0x248>)
 8001b92:	6013      	str	r3, [r2, #0]
		//ez alapján a kiadandó kitöltési tényező
		if(u>0) motorDuty=(int)u+70;
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	dd0a      	ble.n	8001bba <Motor_Drive_Task+0x152>
 8001ba4:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bae:	ee17 3a90 	vmov	r3, s15
 8001bb2:	3346      	adds	r3, #70	; 0x46
 8001bb4:	4a44      	ldr	r2, [pc, #272]	; (8001cc8 <Motor_Drive_Task+0x260>)
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e01b      	b.n	8001bf2 <Motor_Drive_Task+0x18a>
		else if(u<0) motorDuty=(int)u-70;
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d50a      	bpl.n	8001be0 <Motor_Drive_Task+0x178>
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd4:	ee17 3a90 	vmov	r3, s15
 8001bd8:	3b46      	subs	r3, #70	; 0x46
 8001bda:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <Motor_Drive_Task+0x260>)
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e008      	b.n	8001bf2 <Motor_Drive_Task+0x18a>
		else motorDuty=(int)u;
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bea:	ee17 2a90 	vmov	r2, s15
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <Motor_Drive_Task+0x260>)
 8001bf0:	601a      	str	r2, [r3, #0]


		MOTOR_EN(1);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	4835      	ldr	r0, [pc, #212]	; (8001ccc <Motor_Drive_Task+0x264>)
 8001bf8:	f004 f8c0 	bl	8005d7c <HAL_GPIO_WritePin>
 8001bfc:	e00c      	b.n	8001c18 <Motor_Drive_Task+0x1b0>
	}
	else
	{	f=u=0;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <Motor_Drive_Task+0x24c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <Motor_Drive_Task+0x248>)
 8001c0c:	6013      	str	r3, [r2, #0]
		MOTOR_EN(0); //amugy stop
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2140      	movs	r1, #64	; 0x40
 8001c12:	482e      	ldr	r0, [pc, #184]	; (8001ccc <Motor_Drive_Task+0x264>)
 8001c14:	f004 f8b2 	bl	8005d7c <HAL_GPIO_WritePin>
	}
	//A két érték amit irogatsz (TIM3->CCR1,CCR2) konkrét timer periféria regiszterek, nem feltétlen jó őket folyamatosan újraírni 10ms enként
	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <Motor_Drive_Task+0x260>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <Motor_Drive_Task+0x268>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d021      	beq.n	8001c68 <Motor_Drive_Task+0x200>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <Motor_Drive_Task+0x260>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001c2c:	0fda      	lsrs	r2, r3, #31
 8001c2e:	4413      	add	r3, r2
 8001c30:	105b      	asrs	r3, r3, #1
 8001c32:	3b01      	subs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
		if(ccr2>950)ccr2=950;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	dd02      	ble.n	8001c46 <Motor_Drive_Task+0x1de>
 8001c40:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001c44:	617b      	str	r3, [r7, #20]
		if(ccr2<-950)ccr2=-950;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <Motor_Drive_Task+0x26c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	da01      	bge.n	8001c52 <Motor_Drive_Task+0x1ea>
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <Motor_Drive_Task+0x26c>)
 8001c50:	617b      	str	r3, [r7, #20]
		ccr1= 998-ccr2;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8001c58:	3302      	adds	r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <Motor_Drive_Task+0x270>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <Motor_Drive_Task+0x270>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <Motor_Drive_Task+0x260>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <Motor_Drive_Task+0x268>)
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e000      	b.n	8001c74 <Motor_Drive_Task+0x20c>
	if(motor_drive_task_tick>tick) return;
 8001c72:	bf00      	nop
}
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	30be0ded 	.word	0x30be0ded
 8001c84:	3fd02a99 	.word	0x3fd02a99
 8001c88:	9b3d07c8 	.word	0x9b3d07c8
 8001c8c:	3fef9f55 	.word	0x3fef9f55
 8001c90:	30be0e00 	.word	0x30be0e00
 8001c94:	3f882a99 	.word	0x3f882a99
 8001c98:	20000010 	.word	0x20000010
 8001c9c:	20000684 	.word	0x20000684
 8001ca0:	20000685 	.word	0x20000685
 8001ca4:	20000250 	.word	0x20000250
 8001ca8:	20000278 	.word	0x20000278
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000280 	.word	0x20000280
 8001cb4:	20000284 	.word	0x20000284
 8001cb8:	445c0000 	.word	0x445c0000
 8001cbc:	445c0000 	.word	0x445c0000
 8001cc0:	c3480000 	.word	0xc3480000
 8001cc4:	c3480000 	.word	0xc3480000
 8001cc8:	20000288 	.word	0x20000288
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	2000028c 	.word	0x2000028c
 8001cd4:	fffffc4a 	.word	0xfffffc4a
 8001cd8:	40000400 	.word	0x40000400

08001cdc <G0_Read_Fast>:
uint8_t txBuf[]={CMD_READ_SKILL_FORWARD};
uint8_t rxBuf[10];


uint8_t G0_Read_Fast(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]

	uint8_t state=0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
	txBuf[0]=CMD_READ_FAST;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <G0_Read_Fast+0x5c>)
 8001cec:	222a      	movs	r2, #42	; 0x2a
 8001cee:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4910      	ldr	r1, [pc, #64]	; (8001d38 <G0_Read_Fast+0x5c>)
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f006 fe03 	bl	8008902 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 8, 2);
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	2208      	movs	r2, #8
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <G0_Read_Fast+0x60>)
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f006 fe8f 	bl	8008a26 <HAL_UART_Receive>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <G0_Read_Fast+0x64>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[7]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <G0_Read_Fast+0x50>
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <G0_Read_Fast+0x60>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b17      	cmp	r3, #23
 8001d1e:	d105      	bne.n	8001d2c <G0_Read_Fast+0x50>
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <G0_Read_Fast+0x60>)
 8001d22:	79db      	ldrb	r3, [r3, #7]
 8001d24:	2b12      	cmp	r3, #18
 8001d26:	d101      	bne.n	8001d2c <G0_Read_Fast+0x50>
	{
		return 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <G0_Read_Fast+0x52>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001d2c:	2301      	movs	r3, #1
	}
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000014 	.word	0x20000014
 8001d3c:	20000290 	.word	0x20000290
 8001d40:	20000685 	.word	0x20000685

08001d44 <G0_Read_Skill>:

uint8_t G0_Read_Skill(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint8_t command)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	71fb      	strb	r3, [r7, #7]
	uint8_t state=1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
	txBuf[0]=command;
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <G0_Read_Skill+0x60>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(huart_stm, txBuf,1, 1);
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4910      	ldr	r1, [pc, #64]	; (8001da4 <G0_Read_Skill+0x60>)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f006 fdcd 	bl	8008902 <HAL_UART_Transmit>
	state=HAL_UART_Receive(huart_stm, rxBuf, 10, 2);
 8001d68:	2302      	movs	r3, #2
 8001d6a:	220a      	movs	r2, #10
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <G0_Read_Skill+0x64>)
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f006 fe59 	bl	8008a26 <HAL_UART_Receive>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]
	motorEnLineOk=1; //ha van akkor mehet a szabályozás
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <G0_Read_Skill+0x68>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
	if((state==0)&&(rxBuf[0]==START_BYTE) && (rxBuf[9]==STOP_BYTE))//jöt adat a G0 tól és a keret is megfelelő
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <G0_Read_Skill+0x54>
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <G0_Read_Skill+0x64>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b17      	cmp	r3, #23
 8001d8a:	d105      	bne.n	8001d98 <G0_Read_Skill+0x54>
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <G0_Read_Skill+0x64>)
 8001d8e:	7a5b      	ldrb	r3, [r3, #9]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d101      	bne.n	8001d98 <G0_Read_Skill+0x54>
	{
		return 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <G0_Read_Skill+0x56>
	}
	else //nem jött szabályos adat a G0-tól
	{
		return 1;
 8001d98:	2301      	movs	r3, #1
	}
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000014 	.word	0x20000014
 8001da8:	20000290 	.word	0x20000290
 8001dac:	20000685 	.word	0x20000685

08001db0 <Line_Track_Task>:

void Line_Track_Task(UART_HandleTypeDef *huart_stm,UART_HandleTypeDef *huart_debugg, uint32_t tick, uint32_t period)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
	static float PHI;
	static float gamma=0;
	static uint32_t ccr_rear_prev=0;
	static uint32_t ccr_front_prev=0;

	if(line_track_task_tick>tick) return;
 8001dbe:	4ba6      	ldr	r3, [pc, #664]	; (8002058 <Line_Track_Task+0x2a8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f0c0 81f3 	bcc.w	80021b0 <Line_Track_Task+0x400>
	line_track_task_tick = tick + period;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4aa1      	ldr	r2, [pc, #644]	; (8002058 <Line_Track_Task+0x2a8>)
 8001dd2:	6013      	str	r3, [r2, #0]

	if(mode == SKILL)
 8001dd4:	4ba1      	ldr	r3, [pc, #644]	; (800205c <Line_Track_Task+0x2ac>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b52      	cmp	r3, #82	; 0x52
 8001dda:	f040 8169 	bne.w	80020b0 <Line_Track_Task+0x300>
	{
		//if(orientation==FORWARD) //ELŐREMENET
		if(swState[1])
 8001dde:	4ba0      	ldr	r3, [pc, #640]	; (8002060 <Line_Track_Task+0x2b0>)
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 808a 	beq.w	8001efc <Line_Track_Task+0x14c>
		{
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_FORWARD)) return;
 8001de8:	2239      	movs	r2, #57	; 0x39
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff ffa9 	bl	8001d44 <G0_Read_Skill>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 81dd 	bne.w	80021b4 <Line_Track_Task+0x404>
			v_ref=1100;
 8001dfa:	4b9a      	ldr	r3, [pc, #616]	; (8002064 <Line_Track_Task+0x2b4>)
 8001dfc:	4a9a      	ldr	r2, [pc, #616]	; (8002068 <Line_Track_Task+0x2b8>)
 8001dfe:	601a      	str	r2, [r3, #0]
			Detect_Node3(huart_debugg, tick);
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f7ff fc48 	bl	8001698 <Detect_Node3>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8001e08:	4b98      	ldr	r3, [pc, #608]	; (800206c <Line_Track_Task+0x2bc>)
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 81d3 	beq.w	80021b8 <Line_Track_Task+0x408>
 8001e12:	4b96      	ldr	r3, [pc, #600]	; (800206c <Line_Track_Task+0x2bc>)
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	f200 81ce 	bhi.w	80021b8 <Line_Track_Task+0x408>

			gamma = Skill_Mode(huart_debugg, -0.004, -0.05, tick);
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	eddf 0a94 	vldr	s1, [pc, #592]	; 8002070 <Line_Track_Task+0x2c0>
 8001e22:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002074 <Line_Track_Task+0x2c4>
 8001e26:	68b8      	ldr	r0, [r7, #8]
 8001e28:	f7ff fb4e 	bl	80014c8 <Skill_Mode>
 8001e2c:	eef0 7a40 	vmov.f32	s15, s0
 8001e30:	4b91      	ldr	r3, [pc, #580]	; (8002078 <Line_Track_Task+0x2c8>)
 8001e32:	edc3 7a00 	vstr	s15, [r3]
			PHI = atan((L/(L+D_FRONT))*tan(gamma));
 8001e36:	4b90      	ldr	r3, [pc, #576]	; (8002078 <Line_Track_Task+0x2c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fba4 	bl	8000588 <__aeabi_f2d>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	ec43 2b10 	vmov	d0, r2, r3
 8001e48:	f00a feea 	bl	800cc20 <tan>
 8001e4c:	ec51 0b10 	vmov	r0, r1, d0
 8001e50:	a37d      	add	r3, pc, #500	; (adr r3, 8002048 <Line_Track_Task+0x298>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fbef 	bl	8000638 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
 8001e62:	eeb0 0a47 	vmov.f32	s0, s14
 8001e66:	eef0 0a67 	vmov.f32	s1, s15
 8001e6a:	f00a fd2d 	bl	800c8c8 <atan>
 8001e6e:	ec53 2b10 	vmov	r2, r3, d0
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe feb7 	bl	8000be8 <__aeabi_d2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a7f      	ldr	r2, [pc, #508]	; (800207c <Line_Track_Task+0x2cc>)
 8001e7e:	6013      	str	r3, [r2, #0]
			ccr = (uint16_t)(-1400 * PHI + SERVO_FRONT_CCR_MIDDLE);//balra kanyarodás
 8001e80:	4b7e      	ldr	r3, [pc, #504]	; (800207c <Line_Track_Task+0x2cc>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002080 <Line_Track_Task+0x2d0>
 8001e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002084 <Line_Track_Task+0x2d4>
 8001e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9a:	ee17 3a90 	vmov	r3, s15
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b79      	ldr	r3, [pc, #484]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ea4:	601a      	str	r2, [r3, #0]
			if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8001ea6:	4b78      	ldr	r3, [pc, #480]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001eae:	dd04      	ble.n	8001eba <Line_Track_Task+0x10a>
			{
				ccr = CCR_FRONT_MAX;
 8001eb0:	4b75      	ldr	r3, [pc, #468]	; (8002088 <Line_Track_Task+0x2d8>)
 8001eb2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e008      	b.n	8001ecc <Line_Track_Task+0x11c>
			}
			else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 8001eba:	4b73      	ldr	r3, [pc, #460]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ec2:	da03      	bge.n	8001ecc <Line_Track_Task+0x11c>
			{
				ccr = CCR_FRONT_MIN;
 8001ec4:	4b70      	ldr	r3, [pc, #448]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ec6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001eca:	601a      	str	r2, [r3, #0]
			}
			TIM2->CCR1 = ccr;
 8001ecc:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
			ccr_front_prev= ccr;
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b6b      	ldr	r3, [pc, #428]	; (800208c <Line_Track_Task+0x2dc>)
 8001ede:	601a      	str	r2, [r3, #0]
			if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 8001ee0:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <Line_Track_Task+0x2e0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f5b3 7f2c 	cmp.w	r3, #688	; 0x2b0
 8001ee8:	d003      	beq.n	8001ef2 <Line_Track_Task+0x142>
 8001eea:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <Line_Track_Task+0x2e4>)
 8001eec:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
			ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <Line_Track_Task+0x2e0>)
 8001ef4:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e166      	b.n	80021ca <Line_Track_Task+0x41a>
		}
		else //if(orientation==REVERSE)//TOLATÁS
		{
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_REVERSE)) return;
 8001efc:	2291      	movs	r2, #145	; 0x91
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff ff1f 	bl	8001d44 <G0_Read_Skill>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f040 8157 	bne.w	80021bc <Line_Track_Task+0x40c>
			v_ref=-1100;
 8001f0e:	4b55      	ldr	r3, [pc, #340]	; (8002064 <Line_Track_Task+0x2b4>)
 8001f10:	4a61      	ldr	r2, [pc, #388]	; (8002098 <Line_Track_Task+0x2e8>)
 8001f12:	601a      	str	r2, [r3, #0]
			Detect_Node3(huart_debugg, tick);
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f7ff fbbe 	bl	8001698 <Detect_Node3>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <Line_Track_Task+0x2bc>)
 8001f1e:	785b      	ldrb	r3, [r3, #1]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 814d 	beq.w	80021c0 <Line_Track_Task+0x410>
 8001f26:	4b51      	ldr	r3, [pc, #324]	; (800206c <Line_Track_Task+0x2bc>)
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	f200 8148 	bhi.w	80021c0 <Line_Track_Task+0x410>

			gamma = Skill_Mode(huart_debugg, 0.004, 0.12, tick);
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800209c <Line_Track_Task+0x2ec>
 8001f36:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80020a0 <Line_Track_Task+0x2f0>
 8001f3a:	68b8      	ldr	r0, [r7, #8]
 8001f3c:	f7ff fac4 	bl	80014c8 <Skill_Mode>
 8001f40:	eef0 7a40 	vmov.f32	s15, s0
 8001f44:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <Line_Track_Task+0x2c8>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
			PHI = atan((L/(L+D_REAR))*tan(gamma));////////////////////kiszámolni kézzel
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <Line_Track_Task+0x2c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb1a 	bl	8000588 <__aeabi_f2d>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	ec43 2b10 	vmov	d0, r2, r3
 8001f5c:	f00a fe60 	bl	800cc20 <tan>
 8001f60:	ec51 0b10 	vmov	r0, r1, d0
 8001f64:	a33a      	add	r3, pc, #232	; (adr r3, 8002050 <Line_Track_Task+0x2a0>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb65 	bl	8000638 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	ec43 2b17 	vmov	d7, r2, r3
 8001f76:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7a:	eef0 0a67 	vmov.f32	s1, s15
 8001f7e:	f00a fca3 	bl	800c8c8 <atan>
 8001f82:	ec53 2b10 	vmov	r2, r3, d0
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe2d 	bl	8000be8 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a3a      	ldr	r2, [pc, #232]	; (800207c <Line_Track_Task+0x2cc>)
 8001f92:	6013      	str	r3, [r2, #0]
			if(PHI>0)ccr = (uint16_t)(1070 * PHI + SERVO_REAR_CCR_MIDDLE);
 8001f94:	4b39      	ldr	r3, [pc, #228]	; (800207c <Line_Track_Task+0x2cc>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dd13      	ble.n	8001fcc <Line_Track_Task+0x21c>
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <Line_Track_Task+0x2cc>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80020a4 <Line_Track_Task+0x2f4>
 8001fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80020a8 <Line_Track_Task+0x2f8>
 8001fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbe:	ee17 3a90 	vmov	r3, s15
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <Line_Track_Task+0x2d8>)
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e012      	b.n	8001ff2 <Line_Track_Task+0x242>
			else ccr = (uint16_t)(1180 * PHI + SERVO_REAR_CCR_MIDDLE);
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <Line_Track_Task+0x2cc>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80020ac <Line_Track_Task+0x2fc>
 8001fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fda:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80020a8 <Line_Track_Task+0x2f8>
 8001fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe6:	ee17 3a90 	vmov	r3, s15
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ff0:	601a      	str	r2, [r3, #0]
			//HÁTSÓ SZERVÓ
			if(ccr > CCR_REAR_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001ffa:	dd04      	ble.n	8002006 <Line_Track_Task+0x256>
			{
				ccr = CCR_REAR_MAX;
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <Line_Track_Task+0x2d8>)
 8001ffe:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e008      	b.n	8002018 <Line_Track_Task+0x268>
			}
			else if(ccr < CCR_REAR_MIN)//egyik irányba se
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <Line_Track_Task+0x2d8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800200e:	da03      	bge.n	8002018 <Line_Track_Task+0x268>
			{
				ccr = CCR_REAR_MIN;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <Line_Track_Task+0x2d8>)
 8002012:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8002016:	601a      	str	r2, [r3, #0]
			}
			TIM1->CCR4 = ccr;
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <Line_Track_Task+0x2d8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <Line_Track_Task+0x2e4>)
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
			ccr_rear_prev=ccr;
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <Line_Track_Task+0x2d8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <Line_Track_Task+0x2e0>)
 8002028:	601a      	str	r2, [r3, #0]
			if(ccr_front_prev!=SERVO_FRONT_CCR_MIDDLE) TIM2->CCR1 = SERVO_FRONT_CCR_MIDDLE;
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <Line_Track_Task+0x2dc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002032:	d004      	beq.n	800203e <Line_Track_Task+0x28e>
 8002034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002038:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
			ccr_front_prev=SERVO_FRONT_CCR_MIDDLE;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <Line_Track_Task+0x2dc>)
 8002040:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e0c0      	b.n	80021ca <Line_Track_Task+0x41a>
 8002048:	c4830201 	.word	0xc4830201
 800204c:	3fe73a26 	.word	0x3fe73a26
 8002050:	a3f47e90 	.word	0xa3f47e90
 8002054:	3fe8fd1f 	.word	0x3fe8fd1f
 8002058:	2000029c 	.word	0x2000029c
 800205c:	2000024d 	.word	0x2000024d
 8002060:	20000244 	.word	0x20000244
 8002064:	20000250 	.word	0x20000250
 8002068:	44898000 	.word	0x44898000
 800206c:	20000290 	.word	0x20000290
 8002070:	bd4ccccd 	.word	0xbd4ccccd
 8002074:	bb83126f 	.word	0xbb83126f
 8002078:	200002a0 	.word	0x200002a0
 800207c:	200002a4 	.word	0x200002a4
 8002080:	c4af0000 	.word	0xc4af0000
 8002084:	44300000 	.word	0x44300000
 8002088:	20000018 	.word	0x20000018
 800208c:	200002a8 	.word	0x200002a8
 8002090:	200002ac 	.word	0x200002ac
 8002094:	40010000 	.word	0x40010000
 8002098:	c4898000 	.word	0xc4898000
 800209c:	3df5c28f 	.word	0x3df5c28f
 80020a0:	3b83126f 	.word	0x3b83126f
 80020a4:	4485c000 	.word	0x4485c000
 80020a8:	442c0000 	.word	0x442c0000
 80020ac:	44938000 	.word	0x44938000
		}

	}
	/*****Gyorsasági pálya üzemmód******/
	else if(mode == FAST)
 80020b0:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <Line_Track_Task+0x428>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b3f      	cmp	r3, #63	; 0x3f
 80020b6:	f040 8088 	bne.w	80021ca <Line_Track_Task+0x41a>
	{
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fe0d 	bl	8001cdc <G0_Read_Fast>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d17d      	bne.n	80021c4 <Line_Track_Task+0x414>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80020c8:	4b44      	ldr	r3, [pc, #272]	; (80021dc <Line_Track_Task+0x42c>)
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d07b      	beq.n	80021c8 <Line_Track_Task+0x418>
 80020d0:	4b42      	ldr	r3, [pc, #264]	; (80021dc <Line_Track_Task+0x42c>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d877      	bhi.n	80021c8 <Line_Track_Task+0x418>
		gamma = Fast_Mode(huart_debugg,tick);
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	68b8      	ldr	r0, [r7, #8]
 80020dc:	f000 f890 	bl	8002200 <Fast_Mode>
 80020e0:	eef0 7a40 	vmov.f32	s15, s0
 80020e4:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <Line_Track_Task+0x430>)
 80020e6:	edc3 7a00 	vstr	s15, [r3]
		PHI = atan((L/(L+D_FRONT))*tan(gamma));
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <Line_Track_Task+0x430>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa4a 	bl	8000588 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	ec43 2b10 	vmov	d0, r2, r3
 80020fc:	f00a fd90 	bl	800cc20 <tan>
 8002100:	ec51 0b10 	vmov	r0, r1, d0
 8002104:	a332      	add	r3, pc, #200	; (adr r3, 80021d0 <Line_Track_Task+0x420>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe fa95 	bl	8000638 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	ec43 2b17 	vmov	d7, r2, r3
 8002116:	eeb0 0a47 	vmov.f32	s0, s14
 800211a:	eef0 0a67 	vmov.f32	s1, s15
 800211e:	f00a fbd3 	bl	800c8c8 <atan>
 8002122:	ec53 2b10 	vmov	r2, r3, d0
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fd5d 	bl	8000be8 <__aeabi_d2f>
 800212e:	4603      	mov	r3, r0
 8002130:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <Line_Track_Task+0x434>)
 8002132:	6013      	str	r3, [r2, #0]
		ccr = (uint16_t)(-SERVO_M * PHI + SERVO_FRONT_CCR_MIDDLE);
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <Line_Track_Task+0x434>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80021e8 <Line_Track_Task+0x438>
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80021ec <Line_Track_Task+0x43c>
 8002146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800214a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214e:	ee17 3a90 	vmov	r3, s15
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <Line_Track_Task+0x440>)
 8002158:	601a      	str	r2, [r3, #0]

		if(ccr > CCR_FRONT_MAX)//ne feszítsük neki a mechanikai határnak a szervót
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <Line_Track_Task+0x440>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002162:	dd04      	ble.n	800216e <Line_Track_Task+0x3be>
		{
			ccr = CCR_FRONT_MAX;
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <Line_Track_Task+0x440>)
 8002166:	f44f 7261 	mov.w	r2, #900	; 0x384
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e008      	b.n	8002180 <Line_Track_Task+0x3d0>
		}
		else if(ccr < CCR_FRONT_MIN)//egyik irányba se
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <Line_Track_Task+0x440>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002176:	da03      	bge.n	8002180 <Line_Track_Task+0x3d0>
		{
			ccr = CCR_FRONT_MIN;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <Line_Track_Task+0x440>)
 800217a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800217e:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR1 = ccr;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <Line_Track_Task+0x440>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
		ccr_front_prev= ccr;
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <Line_Track_Task+0x440>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <Line_Track_Task+0x444>)
 8002192:	601a      	str	r2, [r3, #0]
		if(ccr_rear_prev!=SERVO_REAR_CCR_MIDDLE) TIM1->CCR4 = SERVO_REAR_CCR_MIDDLE;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <Line_Track_Task+0x448>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f5b3 7f2c 	cmp.w	r3, #688	; 0x2b0
 800219c:	d003      	beq.n	80021a6 <Line_Track_Task+0x3f6>
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <Line_Track_Task+0x44c>)
 80021a0:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
		ccr_rear_prev=SERVO_REAR_CCR_MIDDLE;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <Line_Track_Task+0x448>)
 80021a8:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e00c      	b.n	80021ca <Line_Track_Task+0x41a>
	if(line_track_task_tick>tick) return;
 80021b0:	bf00      	nop
 80021b2:	e00a      	b.n	80021ca <Line_Track_Task+0x41a>
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_FORWARD)) return;
 80021b4:	bf00      	nop
 80021b6:	e008      	b.n	80021ca <Line_Track_Task+0x41a>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80021b8:	bf00      	nop
 80021ba:	e006      	b.n	80021ca <Line_Track_Task+0x41a>
			if(G0_Read_Skill(huart_stm, huart_debugg,CMD_READ_SKILL_REVERSE)) return;
 80021bc:	bf00      	nop
 80021be:	e004      	b.n	80021ca <Line_Track_Task+0x41a>
			if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80021c0:	bf00      	nop
 80021c2:	e002      	b.n	80021ca <Line_Track_Task+0x41a>
		if(G0_Read_Fast(huart_stm, huart_debugg)) return; //ha sikertelen az olvasás a G0 ból akkor nincs értelme az egésznek
 80021c4:	bf00      	nop
 80021c6:	e000      	b.n	80021ca <Line_Track_Task+0x41a>
		if (LINE_CNT<1 || LINE_CNT > 4) return;//ha nincs vonal a kocsi alatt
 80021c8:	bf00      	nop
	}
}
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	c4830201 	.word	0xc4830201
 80021d4:	3fe73a26 	.word	0x3fe73a26
 80021d8:	2000024d 	.word	0x2000024d
 80021dc:	20000290 	.word	0x20000290
 80021e0:	200002a0 	.word	0x200002a0
 80021e4:	200002a4 	.word	0x200002a4
 80021e8:	c4af0000 	.word	0xc4af0000
 80021ec:	44300000 	.word	0x44300000
 80021f0:	20000018 	.word	0x20000018
 80021f4:	200002a8 	.word	0x200002a8
 80021f8:	200002ac 	.word	0x200002ac
 80021fc:	40010000 	.word	0x40010000

08002200 <Fast_Mode>:

float Fast_Mode(UART_HandleTypeDef *huart_debugg, uint32_t t)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
	static float x_elso_prev=0;
	static float x_hatso;
	static float delta;
	static float gamma;

	uint32_t sum=0;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
	uint32_t dist=0;
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]


	if(swState[0] == FREERUN_MODE)
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <Fast_Mode+0x12c>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d171      	bne.n	80022fe <Fast_Mode+0xfe>
	{
		/*****Gyorsító jelölés figyelése (szaggatott 3 vonal)*****/
		if(LINE_CNT != lineCnt_prev && (!Free_Run_State || Free_Run_State==2)) //ha változik az alattunk lévő vonalak száma
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <Fast_Mode+0x130>)
 800221c:	785a      	ldrb	r2, [r3, #1]
 800221e:	4b45      	ldr	r3, [pc, #276]	; (8002334 <Fast_Mode+0x134>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d044      	beq.n	80022b0 <Fast_Mode+0xb0>
 8002226:	4b44      	ldr	r3, [pc, #272]	; (8002338 <Fast_Mode+0x138>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <Fast_Mode+0x36>
 800222e:	4b42      	ldr	r3, [pc, #264]	; (8002338 <Fast_Mode+0x138>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d13c      	bne.n	80022b0 <Fast_Mode+0xb0>
		{
			dt[index] = t - t_prev;
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <Fast_Mode+0x13c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a41      	ldr	r2, [pc, #260]	; (8002340 <Fast_Mode+0x140>)
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	4611      	mov	r1, r2
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <Fast_Mode+0x144>)
 8002246:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			sum=dt[0] + dt[1] + dt[2] + dt[3]+ dt[4];
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <Fast_Mode+0x144>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <Fast_Mode+0x144>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	441a      	add	r2, r3
 8002254:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <Fast_Mode+0x144>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	441a      	add	r2, r3
 800225a:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <Fast_Mode+0x144>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	441a      	add	r2, r3
 8002260:	4b38      	ldr	r3, [pc, #224]	; (8002344 <Fast_Mode+0x144>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
			if((sum > 300) && (sum < 700))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800226e:	d90f      	bls.n	8002290 <Fast_Mode+0x90>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002276:	d20b      	bcs.n	8002290 <Fast_Mode+0x90>
			{
				v_ref=4200;
 8002278:	4b33      	ldr	r3, [pc, #204]	; (8002348 <Fast_Mode+0x148>)
 800227a:	4a34      	ldr	r2, [pc, #208]	; (800234c <Fast_Mode+0x14c>)
 800227c:	601a      	str	r2, [r3, #0]
				LED_B(1);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002284:	4832      	ldr	r0, [pc, #200]	; (8002350 <Fast_Mode+0x150>)
 8002286:	f003 fd79 	bl	8005d7c <HAL_GPIO_WritePin>
				Free_Run_State=1;
 800228a:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <Fast_Mode+0x138>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
			}
			index++;
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <Fast_Mode+0x140>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <Fast_Mode+0x140>)
 800229a:	701a      	strb	r2, [r3, #0]
			if(index>4) index=0;
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <Fast_Mode+0x140>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d902      	bls.n	80022aa <Fast_Mode+0xaa>
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <Fast_Mode+0x140>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
			t_prev = t;
 80022aa:	4a24      	ldr	r2, [pc, #144]	; (800233c <Fast_Mode+0x13c>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6013      	str	r3, [r2, #0]
		}
		/* A memóriajellegű statikus változók segítségével vizsgáljuk a szaggatott vonalat*/
		lineCnt_prev = LINE_CNT; //az előző értéket a jelenlegihez hangoljuk
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <Fast_Mode+0x130>)
 80022b2:	785a      	ldrb	r2, [r3, #1]
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <Fast_Mode+0x134>)
 80022b6:	701a      	strb	r2, [r3, #0]

		/*****Lassító jelölés figyelése (folytonos 3 vonal)*****/
		if(LINE_CNT > 1 && (!Free_Run_State || Free_Run_State==1)) //ha 3 vonalat érzékelünk
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <Fast_Mode+0x130>)
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d91a      	bls.n	80022f6 <Fast_Mode+0xf6>
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <Fast_Mode+0x138>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <Fast_Mode+0xd0>
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <Fast_Mode+0x138>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d112      	bne.n	80022f6 <Fast_Mode+0xf6>
		{
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <Fast_Mode+0x154>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	338c      	adds	r3, #140	; 0x8c
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d951      	bls.n	8002380 <Fast_Mode+0x180>
			{
				v_ref = 1100;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <Fast_Mode+0x148>)
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <Fast_Mode+0x158>)
 80022e0:	601a      	str	r2, [r3, #0]
				Free_Run_State=2;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <Fast_Mode+0x138>)
 80022e4:	2202      	movs	r2, #2
 80022e6:	701a      	strb	r2, [r3, #0]
				LED_B(0);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ee:	4818      	ldr	r0, [pc, #96]	; (8002350 <Fast_Mode+0x150>)
 80022f0:	f003 fd44 	bl	8005d7c <HAL_GPIO_WritePin>
			if(t > (start3time + BREAK_TIME_MS)) //ha már legalább BREAK_TIME_MS -idő óta folyamatosan 3 vonal van alattunk
 80022f4:	e044      	b.n	8002380 <Fast_Mode+0x180>
			}
		}
		else //ha 1 vonalat érzékelünk
		{
			start3time = t;
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <Fast_Mode+0x154>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e040      	b.n	8002380 <Fast_Mode+0x180>
		}
		/*****FÉKEZÉS NEGATÍV PWM-EL*******/
	}

	/*****SC üzemmód******/
	else if(swState[0]==SC_MODE)
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <Fast_Mode+0x12c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d13c      	bne.n	8002380 <Fast_Mode+0x180>
	{
		dist=(((uint16_t)rxBuf[5])<<8) | ((uint16_t)rxBuf[6]);
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <Fast_Mode+0x130>)
 8002308:	795b      	ldrb	r3, [r3, #5]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <Fast_Mode+0x130>)
 800230e:	7992      	ldrb	r2, [r2, #6]
 8002310:	4313      	orrs	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
		if(dist>1000 || rxBuf[4]) v_ref=1500; //ha tul messze vana  SC vagy érvénytelen az olvasás
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800231a:	d803      	bhi.n	8002324 <Fast_Mode+0x124>
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <Fast_Mode+0x130>)
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01f      	beq.n	8002364 <Fast_Mode+0x164>
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <Fast_Mode+0x148>)
 8002326:	4a0d      	ldr	r2, [pc, #52]	; (800235c <Fast_Mode+0x15c>)
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e029      	b.n	8002380 <Fast_Mode+0x180>
 800232c:	20000244 	.word	0x20000244
 8002330:	20000290 	.word	0x20000290
 8002334:	2000001c 	.word	0x2000001c
 8002338:	200002b0 	.word	0x200002b0
 800233c:	200002b4 	.word	0x200002b4
 8002340:	200002b8 	.word	0x200002b8
 8002344:	20000020 	.word	0x20000020
 8002348:	20000250 	.word	0x20000250
 800234c:	45834000 	.word	0x45834000
 8002350:	40020400 	.word	0x40020400
 8002354:	200002bc 	.word	0x200002bc
 8002358:	44898000 	.word	0x44898000
 800235c:	44bb8000 	.word	0x44bb8000
 8002360:	43fa0000 	.word	0x43fa0000
		else v_ref = 2*(float)dist-500;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002372:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002360 <Fast_Mode+0x160>
 8002376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800237a:	4bc9      	ldr	r3, [pc, #804]	; (80026a0 <Fast_Mode+0x4a0>)
 800237c:	edc3 7a00 	vstr	s15, [r3]
	}

	x_elso=(float)rxBuf[2]*204/248.0-102;;
 8002380:	4bc8      	ldr	r3, [pc, #800]	; (80026a4 <Fast_Mode+0x4a4>)
 8002382:	789b      	ldrb	r3, [r3, #2]
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238c:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80026a8 <Fast_Mode+0x4a8>
 8002390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002394:	ee17 0a90 	vmov	r0, s15
 8002398:	f7fe f8f6 	bl	8000588 <__aeabi_f2d>
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	4bc2      	ldr	r3, [pc, #776]	; (80026ac <Fast_Mode+0x4ac>)
 80023a2:	f7fe fa73 	bl	800088c <__aeabi_ddiv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4bbf      	ldr	r3, [pc, #764]	; (80026b0 <Fast_Mode+0x4b0>)
 80023b4:	f7fd ff88 	bl	80002c8 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fc12 	bl	8000be8 <__aeabi_d2f>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4abb      	ldr	r2, [pc, #748]	; (80026b4 <Fast_Mode+0x4b4>)
 80023c8:	6013      	str	r3, [r2, #0]
	x_hatso=(float)rxBuf[3]*204/244.0-102;
 80023ca:	4bb6      	ldr	r3, [pc, #728]	; (80026a4 <Fast_Mode+0x4a4>)
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d6:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80026a8 <Fast_Mode+0x4a8>
 80023da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023de:	ee17 0a90 	vmov	r0, s15
 80023e2:	f7fe f8d1 	bl	8000588 <__aeabi_f2d>
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	4bb3      	ldr	r3, [pc, #716]	; (80026b8 <Fast_Mode+0x4b8>)
 80023ec:	f7fe fa4e 	bl	800088c <__aeabi_ddiv>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4bac      	ldr	r3, [pc, #688]	; (80026b0 <Fast_Mode+0x4b0>)
 80023fe:	f7fd ff63 	bl	80002c8 <__aeabi_dsub>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fbed 	bl	8000be8 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
 8002410:	4aaa      	ldr	r2, [pc, #680]	; (80026bc <Fast_Mode+0x4bc>)
 8002412:	6013      	str	r3, [r2, #0]
	delta=atan((float)(x_elso-x_hatso)/L_SENSOR);
 8002414:	4ba7      	ldr	r3, [pc, #668]	; (80026b4 <Fast_Mode+0x4b4>)
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	4ba8      	ldr	r3, [pc, #672]	; (80026bc <Fast_Mode+0x4bc>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002424:	ee17 0a90 	vmov	r0, s15
 8002428:	f7fe f8ae 	bl	8000588 <__aeabi_f2d>
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	4ba3      	ldr	r3, [pc, #652]	; (80026c0 <Fast_Mode+0x4c0>)
 8002432:	f7fe fa2b 	bl	800088c <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	ec43 2b17 	vmov	d7, r2, r3
 800243e:	eeb0 0a47 	vmov.f32	s0, s14
 8002442:	eef0 0a67 	vmov.f32	s1, s15
 8002446:	f00a fa3f 	bl	800c8c8 <atan>
 800244a:	ec53 2b10 	vmov	r2, r3, d0
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f7fe fbc9 	bl	8000be8 <__aeabi_d2f>
 8002456:	4603      	mov	r3, r0
 8002458:	4a9a      	ldr	r2, [pc, #616]	; (80026c4 <Fast_Mode+0x4c4>)
 800245a:	6013      	str	r3, [r2, #0]
	/**/
	//szabályozóparaméterek ujraszámolása az aktuális sebesség alapján
	if(v>100)
 800245c:	4b9a      	ldr	r3, [pc, #616]	; (80026c8 <Fast_Mode+0x4c8>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80026cc <Fast_Mode+0x4cc>
 8002466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	f340 80b6 	ble.w	80025de <Fast_Mode+0x3de>
	{
		if(v<2000)
 8002472:	4b95      	ldr	r3, [pc, #596]	; (80026c8 <Fast_Mode+0x4c8>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80026d0 <Fast_Mode+0x4d0>
 800247c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d554      	bpl.n	8002530 <Fast_Mode+0x330>
		{
			k_p = -L/(v*v)*S1MULTS2_SLOW;
 8002486:	4b90      	ldr	r3, [pc, #576]	; (80026c8 <Fast_Mode+0x4c8>)
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <Fast_Mode+0x4c8>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	ee17 0a90 	vmov	r0, s15
 800249a:	f7fe f875 	bl	8000588 <__aeabi_f2d>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	a173      	add	r1, pc, #460	; (adr r1, 8002670 <Fast_Mode+0x470>)
 80024a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024a8:	f7fe f9f0 	bl	800088c <__aeabi_ddiv>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	a370      	add	r3, pc, #448	; (adr r3, 8002678 <Fast_Mode+0x478>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f8bd 	bl	8000638 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb8f 	bl	8000be8 <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a81      	ldr	r2, [pc, #516]	; (80026d4 <Fast_Mode+0x4d4>)
 80024ce:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_SLOW-v*k_p);
 80024d0:	4b7d      	ldr	r3, [pc, #500]	; (80026c8 <Fast_Mode+0x4c8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f857 	bl	8000588 <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	a168      	add	r1, pc, #416	; (adr r1, 8002680 <Fast_Mode+0x480>)
 80024e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024e4:	f7fe f9d2 	bl	800088c <__aeabi_ddiv>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4614      	mov	r4, r2
 80024ee:	461d      	mov	r5, r3
 80024f0:	4b75      	ldr	r3, [pc, #468]	; (80026c8 <Fast_Mode+0x4c8>)
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	4b77      	ldr	r3, [pc, #476]	; (80026d4 <Fast_Mode+0x4d4>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	ee17 0a90 	vmov	r0, s15
 800250c:	f7fe f83c 	bl	8000588 <__aeabi_f2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f7fe f88e 	bl	8000638 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb60 	bl	8000be8 <__aeabi_d2f>
 8002528:	4603      	mov	r3, r0
 800252a:	4a6b      	ldr	r2, [pc, #428]	; (80026d8 <Fast_Mode+0x4d8>)
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e056      	b.n	80025de <Fast_Mode+0x3de>
		}
		else
		{
			k_p = -L/(v*v)*S1MULTS2_FAST;
 8002530:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <Fast_Mode+0x4c8>)
 8002532:	ed93 7a00 	vldr	s14, [r3]
 8002536:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <Fast_Mode+0x4c8>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002540:	ee17 0a90 	vmov	r0, s15
 8002544:	f7fe f820 	bl	8000588 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	a148      	add	r1, pc, #288	; (adr r1, 8002670 <Fast_Mode+0x470>)
 800254e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002552:	f7fe f99b 	bl	800088c <__aeabi_ddiv>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	a34a      	add	r3, pc, #296	; (adr r3, 8002688 <Fast_Mode+0x488>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f7fe f868 	bl	8000638 <__aeabi_dmul>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f7fe fb3a 	bl	8000be8 <__aeabi_d2f>
 8002574:	4603      	mov	r3, r0
 8002576:	4a57      	ldr	r2, [pc, #348]	; (80026d4 <Fast_Mode+0x4d4>)
 8002578:	6013      	str	r3, [r2, #0]
			k_delta = L/v*(S1ADDS2_FAST-v*k_p);
 800257a:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <Fast_Mode+0x4c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe f802 	bl	8000588 <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	a13d      	add	r1, pc, #244	; (adr r1, 8002680 <Fast_Mode+0x480>)
 800258a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800258e:	f7fe f97d 	bl	800088c <__aeabi_ddiv>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4614      	mov	r4, r2
 8002598:	461d      	mov	r5, r3
 800259a:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <Fast_Mode+0x4c8>)
 800259c:	ed93 7a00 	vldr	s14, [r3]
 80025a0:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <Fast_Mode+0x4d4>)
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025aa:	ee17 0a90 	vmov	r0, s15
 80025ae:	f7fd ffeb 	bl	8000588 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	a136      	add	r1, pc, #216	; (adr r1, 8002690 <Fast_Mode+0x490>)
 80025b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025bc:	f7fd fe84 	bl	80002c8 <__aeabi_dsub>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fe f836 	bl	8000638 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fb08 	bl	8000be8 <__aeabi_d2f>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a3f      	ldr	r2, [pc, #252]	; (80026d8 <Fast_Mode+0x4d8>)
 80025dc:	6013      	str	r3, [r2, #0]
		}
	}

	gamma = -k_p * x_elso -k_delta * delta - K_D * (x_elso-x_elso_prev);
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <Fast_Mode+0x4d4>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	eeb1 7a67 	vneg.f32	s14, s15
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <Fast_Mode+0x4b4>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <Fast_Mode+0x4d8>)
 80025f4:	edd3 6a00 	vldr	s13, [r3]
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <Fast_Mode+0x4c4>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002606:	ee17 0a90 	vmov	r0, s15
 800260a:	f7fd ffbd 	bl	8000588 <__aeabi_f2d>
 800260e:	4604      	mov	r4, r0
 8002610:	460d      	mov	r5, r1
 8002612:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <Fast_Mode+0x4b4>)
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	4b30      	ldr	r3, [pc, #192]	; (80026dc <Fast_Mode+0x4dc>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002622:	ee17 0a90 	vmov	r0, s15
 8002626:	f7fd ffaf 	bl	8000588 <__aeabi_f2d>
 800262a:	a31b      	add	r3, pc, #108	; (adr r3, 8002698 <Fast_Mode+0x498>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fe f802 	bl	8000638 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4620      	mov	r0, r4
 800263a:	4629      	mov	r1, r5
 800263c:	f7fd fe46 	bl	80002cc <__adddf3>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe face 	bl	8000be8 <__aeabi_d2f>
 800264c:	4603      	mov	r3, r0
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <Fast_Mode+0x4e0>)
 8002650:	6013      	str	r3, [r2, #0]
	x_elso_prev = x_elso;
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <Fast_Mode+0x4b4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	; (80026dc <Fast_Mode+0x4dc>)
 8002658:	6013      	str	r3, [r2, #0]

	return gamma;
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <Fast_Mode+0x4e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	ee07 3a90 	vmov	s15, r3
}
 8002662:	eeb0 0a67 	vmov.f32	s0, s15
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bdb0      	pop	{r4, r5, r7, pc}
 800266c:	f3af 8000 	nop.w
 8002670:	00000000 	.word	0x00000000
 8002674:	c0716000 	.word	0xc0716000
 8002678:	fd21ff2e 	.word	0xfd21ff2e
 800267c:	402275f6 	.word	0x402275f6
 8002680:	00000000 	.word	0x00000000
 8002684:	40716000 	.word	0x40716000
 8002688:	ab367a10 	.word	0xab367a10
 800268c:	402d573e 	.word	0x402d573e
 8002690:	66666666 	.word	0x66666666
 8002694:	c01e6666 	.word	0xc01e6666
 8002698:	9999999a 	.word	0x9999999a
 800269c:	3f999999 	.word	0x3f999999
 80026a0:	20000250 	.word	0x20000250
 80026a4:	20000290 	.word	0x20000290
 80026a8:	434c0000 	.word	0x434c0000
 80026ac:	406f0000 	.word	0x406f0000
 80026b0:	40598000 	.word	0x40598000
 80026b4:	200002c0 	.word	0x200002c0
 80026b8:	406e8000 	.word	0x406e8000
 80026bc:	200002c4 	.word	0x200002c4
 80026c0:	407c4000 	.word	0x407c4000
 80026c4:	200002c8 	.word	0x200002c8
 80026c8:	20000278 	.word	0x20000278
 80026cc:	42c80000 	.word	0x42c80000
 80026d0:	44fa0000 	.word	0x44fa0000
 80026d4:	20000034 	.word	0x20000034
 80026d8:	20000038 	.word	0x20000038
 80026dc:	200002cc 	.word	0x200002cc
 80026e0:	200002d0 	.word	0x200002d0

080026e4 <__NVIC_DisableIRQ>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db12      	blt.n	800271c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	490a      	ldr	r1, [pc, #40]	; (8002728 <__NVIC_DisableIRQ+0x44>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	3320      	adds	r3, #32
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002710:	f3bf 8f4f 	dsb	sy
}
 8002714:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002716:	f3bf 8f6f 	isb	sy
}
 800271a:	bf00      	nop
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002732:	f001 fc17 	bl	8003f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002736:	f000 f885 	bl	8002844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273a:	f000 fd5b 	bl	80031f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800273e:	f000 fd39 	bl	80031b4 <MX_DMA_Init>
  MX_TIM2_Init();
 8002742:	f000 fa75 	bl	8002c30 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002746:	f000 fcb7 	bl	80030b8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800274a:	f000 fb69 	bl	8002e20 <MX_TIM4_Init>
  MX_ADC2_Init();
 800274e:	f000 f97d 	bl	8002a4c <MX_ADC2_Init>
  MX_TIM3_Init();
 8002752:	f000 fae3 	bl	8002d1c <MX_TIM3_Init>
  MX_UART5_Init();
 8002756:	f000 fc85 	bl	8003064 <MX_UART5_Init>
  MX_USART2_UART_Init();
 800275a:	f000 fcd7 	bl	800310c <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800275e:	f000 fc29 	bl	8002fb4 <MX_TIM8_Init>
  MX_ADC1_Init();
 8002762:	f000 f8e1 	bl	8002928 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8002766:	f000 fcfb 	bl	8003160 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 800276a:	f000 fbd5 	bl	8002f18 <MX_TIM5_Init>
  MX_TIM1_Init();
 800276e:	f000 f9bf 	bl	8002af0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5, &htim3, &htim2, &htim1, &htim8);
 8002772:	4b27      	ldr	r3, [pc, #156]	; (8002810 <main+0xe4>)
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <main+0xe8>)
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <main+0xec>)
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <main+0xf0>)
 800277e:	4928      	ldr	r1, [pc, #160]	; (8002820 <main+0xf4>)
 8002780:	4828      	ldr	r0, [pc, #160]	; (8002824 <main+0xf8>)
 8002782:	f7fe fc79 	bl	8001078 <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3);
 8002786:	2108      	movs	r1, #8
 8002788:	4827      	ldr	r0, [pc, #156]	; (8002828 <main+0xfc>)
 800278a:	f000 fe47 	bl	800341c <Remote_Control_Init>
  Battery_Voltage_Compensate(&hadc2, &hadc1, &huart1);
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <main+0xf8>)
 8002790:	4926      	ldr	r1, [pc, #152]	; (800282c <main+0x100>)
 8002792:	4827      	ldr	r0, [pc, #156]	; (8002830 <main+0x104>)
 8002794:	f7fe ffc0 	bl	8001718 <Battery_Voltage_Compensate>
  Mode_Selector(&huart1, &huart5);
 8002798:	4926      	ldr	r1, [pc, #152]	; (8002834 <main+0x108>)
 800279a:	4822      	ldr	r0, [pc, #136]	; (8002824 <main+0xf8>)
 800279c:	f7fe fdee 	bl	800137c <Mode_Selector>
  v_ref=500;
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <main+0x10c>)
 80027a2:	4a26      	ldr	r2, [pc, #152]	; (800283c <main+0x110>)
 80027a4:	601a      	str	r2, [r3, #0]
  TIM1->CCR4=SERVO_REAR_CCR_MIDDLE;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <main+0x114>)
 80027a8:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR1=SERVO_FRONT_CCR_MIDDLE;
 80027ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027b2:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Measure_Velocity_Task(&htim8,TICK, 4);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <main+0xf4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2204      	movs	r2, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4813      	ldr	r0, [pc, #76]	; (8002810 <main+0xe4>)
 80027c4:	f7ff f8d4 	bl	8001970 <Measure_Velocity_Task>
	  Motor_Drive_Task(&htim3, &huart1, TICK, 10);
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <main+0xf4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ce:	230a      	movs	r3, #10
 80027d0:	4914      	ldr	r1, [pc, #80]	; (8002824 <main+0xf8>)
 80027d2:	4812      	ldr	r0, [pc, #72]	; (800281c <main+0xf0>)
 80027d4:	f7ff f948 	bl	8001a68 <Motor_Drive_Task>
	  Line_Track_Task(&huart5, &huart1, TICK, 8);
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <main+0xf4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027de:	2308      	movs	r3, #8
 80027e0:	4910      	ldr	r1, [pc, #64]	; (8002824 <main+0xf8>)
 80027e2:	4814      	ldr	r0, [pc, #80]	; (8002834 <main+0x108>)
 80027e4:	f7ff fae4 	bl	8001db0 <Line_Track_Task>
	  Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 29);
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <main+0xf4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	221d      	movs	r2, #29
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <main+0xf8>)
 80027f4:	2108      	movs	r1, #8
 80027f6:	480c      	ldr	r0, [pc, #48]	; (8002828 <main+0xfc>)
 80027f8:	f000 fe2c 	bl	8003454 <Remote_Control_Task>
	  HDI_Read_Task(&htim2,TICK, 200);
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <main+0xf4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	22c8      	movs	r2, #200	; 0xc8
 8002804:	4619      	mov	r1, r3
 8002806:	4804      	ldr	r0, [pc, #16]	; (8002818 <main+0xec>)
 8002808:	f7fe fce2 	bl	80011d0 <HDI_Read_Task>
	  Measure_Velocity_Task(&htim8,TICK, 4);
 800280c:	e7d4      	b.n	80027b8 <main+0x8c>
 800280e:	bf00      	nop
 8002810:	200004cc 	.word	0x200004cc
 8002814:	20000364 	.word	0x20000364
 8002818:	200003ac 	.word	0x200003ac
 800281c:	200003f4 	.word	0x200003f4
 8002820:	20000484 	.word	0x20000484
 8002824:	200005b8 	.word	0x200005b8
 8002828:	2000043c 	.word	0x2000043c
 800282c:	200002d4 	.word	0x200002d4
 8002830:	2000031c 	.word	0x2000031c
 8002834:	20000574 	.word	0x20000574
 8002838:	20000250 	.word	0x20000250
 800283c:	43fa0000 	.word	0x43fa0000
 8002840:	40010000 	.word	0x40010000

08002844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b094      	sub	sp, #80	; 0x50
 8002848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	2234      	movs	r2, #52	; 0x34
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f007 f94c 	bl	8009af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <SystemClock_Config+0xdc>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	4a2b      	ldr	r2, [pc, #172]	; (8002920 <SystemClock_Config+0xdc>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002876:	6413      	str	r3, [r2, #64]	; 0x40
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <SystemClock_Config+0xdc>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002884:	2300      	movs	r3, #0
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <SystemClock_Config+0xe0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a25      	ldr	r2, [pc, #148]	; (8002924 <SystemClock_Config+0xe0>)
 800288e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <SystemClock_Config+0xe0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028aa:	2302      	movs	r3, #2
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028b4:	2304      	movs	r3, #4
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80028b8:	23b4      	movs	r3, #180	; 0xb4
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028bc:	2302      	movs	r3, #2
 80028be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028c0:	2302      	movs	r3, #2
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028c4:	2302      	movs	r3, #2
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fe3b 	bl	8006548 <HAL_RCC_OscConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028d8:	f000 fd9a 	bl	8003410 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028dc:	f003 fa9a 	bl	8005e14 <HAL_PWREx_EnableOverDrive>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80028e6:	f000 fd93 	bl	8003410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ea:	230f      	movs	r3, #15
 80028ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ee:	2302      	movs	r3, #2
 80028f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80028f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002900:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	2105      	movs	r1, #5
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fad3 	bl	8005eb4 <HAL_RCC_ClockConfig>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002914:	f000 fd7c 	bl	8003410 <Error_Handler>
  }
}
 8002918:	bf00      	nop
 800291a:	3750      	adds	r7, #80	; 0x50
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	40007000 	.word	0x40007000

08002928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800293c:	463b      	mov	r3, r7
 800293e:	2220      	movs	r2, #32
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f007 f8d4 	bl	8009af0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002948:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <MX_ADC1_Init+0x114>)
 800294a:	4a3d      	ldr	r2, [pc, #244]	; (8002a40 <MX_ADC1_Init+0x118>)
 800294c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002950:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002954:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002956:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <MX_ADC1_Init+0x114>)
 800295e:	2201      	movs	r2, #1
 8002960:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002964:	2200      	movs	r2, #0
 8002966:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <MX_ADC1_Init+0x114>)
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002972:	2200      	movs	r2, #0
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002978:	4a32      	ldr	r2, [pc, #200]	; (8002a44 <MX_ADC1_Init+0x11c>)
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <MX_ADC1_Init+0x114>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002984:	2203      	movs	r2, #3
 8002986:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002988:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <MX_ADC1_Init+0x114>)
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002996:	4829      	ldr	r0, [pc, #164]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002998:	f001 fb7a 	bl	8004090 <HAL_ADC_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80029a2:	f000 fd35 	bl	8003410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80029a6:	2308      	movs	r3, #8
 80029a8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80029ae:	2307      	movs	r3, #7
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029b2:	f107 0320 	add.w	r3, r7, #32
 80029b6:	4619      	mov	r1, r3
 80029b8:	4820      	ldr	r0, [pc, #128]	; (8002a3c <MX_ADC1_Init+0x114>)
 80029ba:	f001 fd17 	bl	80043ec <HAL_ADC_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80029c4:	f000 fd24 	bl	8003410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80029c8:	2302      	movs	r3, #2
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029cc:	f107 0320 	add.w	r3, r7, #32
 80029d0:	4619      	mov	r1, r3
 80029d2:	481a      	ldr	r0, [pc, #104]	; (8002a3c <MX_ADC1_Init+0x114>)
 80029d4:	f001 fd0a 	bl	80043ec <HAL_ADC_ConfigChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80029de:	f000 fd17 	bl	8003410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80029e2:	2303      	movs	r3, #3
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029e6:	f107 0320 	add.w	r3, r7, #32
 80029ea:	4619      	mov	r1, r3
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <MX_ADC1_Init+0x114>)
 80029ee:	f001 fcfd 	bl	80043ec <HAL_ADC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80029f8:	f000 fd0a 	bl	8003410 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80029fc:	2308      	movs	r3, #8
 80029fe:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <MX_ADC1_Init+0x120>)
 8002a12:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_ADC1_Init+0x114>)
 8002a26:	f001 ff0f 	bl	8004848 <HAL_ADCEx_InjectedConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002a30:	f000 fcee 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3730      	adds	r7, #48	; 0x30
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200002d4 	.word	0x200002d4
 8002a40:	40012000 	.word	0x40012000
 8002a44:	0f000001 	.word	0x0f000001
 8002a48:	000f0001 	.word	0x000f0001

08002a4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a52:	463b      	mov	r3, r7
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <MX_ADC2_Init+0x9c>)
 8002a62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <MX_ADC2_Init+0xa0>)
 8002a90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002aae:	f001 faef 	bl	8004090 <HAL_ADC_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002ab8:	f000 fcaa 	bl	8003410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002abc:	230d      	movs	r3, #13
 8002abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002ac4:	2307      	movs	r3, #7
 8002ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ac8:	463b      	mov	r3, r7
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_ADC2_Init+0x98>)
 8002ace:	f001 fc8d 	bl	80043ec <HAL_ADC_ConfigChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002ad8:	f000 fc9a 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	2000031c 	.word	0x2000031c
 8002ae8:	40012100 	.word	0x40012100
 8002aec:	0f000001 	.word	0x0f000001

08002af0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b096      	sub	sp, #88	; 0x58
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
 8002b1e:	615a      	str	r2, [r3, #20]
 8002b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	2220      	movs	r2, #32
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 ffe1 	bl	8009af0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b30:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <MX_TIM1_Init+0x13c>)
 8002b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8002b34:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b36:	f240 1267 	movw	r2, #359	; 0x167
 8002b3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8002b42:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b44:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4a:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b50:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b56:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b5c:	4832      	ldr	r0, [pc, #200]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b5e:	f003 ff91 	bl	8006a84 <HAL_TIM_Base_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002b68:	f000 fc52 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b76:	4619      	mov	r1, r3
 8002b78:	482b      	ldr	r0, [pc, #172]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b7a:	f004 ff6b 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002b84:	f000 fc44 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b88:	4827      	ldr	r0, [pc, #156]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002b8a:	f004 f833 	bl	8006bf4 <HAL_TIM_PWM_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002b94:	f000 fc3c 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ba0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4820      	ldr	r0, [pc, #128]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002ba8:	f005 fd7c 	bl	80086a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002bb2:	f000 fc2d 	bl	8003410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb6:	2360      	movs	r3, #96	; 0x60
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750-1;
 8002bba:	f240 23ed 	movw	r3, #749	; 0x2ed
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4813      	ldr	r0, [pc, #76]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002bda:	f004 fe79 	bl	80078d0 <HAL_TIM_PWM_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002be4:	f000 fc14 	bl	8003410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4807      	ldr	r0, [pc, #28]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002c0c:	f005 fdc6 	bl	800879c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002c16:	f000 fbfb 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c1a:	4803      	ldr	r0, [pc, #12]	; (8002c28 <MX_TIM1_Init+0x138>)
 8002c1c:	f000 fea0 	bl	8003960 <HAL_TIM_MspPostInit>

}
 8002c20:	bf00      	nop
 8002c22:	3758      	adds	r7, #88	; 0x58
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000364 	.word	0x20000364
 8002c2c:	40010000 	.word	0x40010000

08002c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
 8002c5c:	615a      	str	r2, [r3, #20]
 8002c5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002c6a:	2259      	movs	r2, #89	; 0x59
 8002c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002c76:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c88:	4823      	ldr	r0, [pc, #140]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002c8a:	f003 fefb 	bl	8006a84 <HAL_TIM_Base_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002c94:	f000 fbbc 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	481c      	ldr	r0, [pc, #112]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002ca6:	f004 fed5 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002cb0:	f000 fbae 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cb4:	4818      	ldr	r0, [pc, #96]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002cb6:	f003 ff9d 	bl	8006bf4 <HAL_TIM_PWM_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002cc0:	f000 fba6 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4811      	ldr	r0, [pc, #68]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002cd4:	f005 fce6 	bl	80086a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002cde:	f000 fb97 	bl	8003410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce2:	2360      	movs	r3, #96	; 0x60
 8002ce4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8002ce6:	f240 23ed 	movw	r3, #749	; 0x2ed
 8002cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4807      	ldr	r0, [pc, #28]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002cfc:	f004 fde8 	bl	80078d0 <HAL_TIM_PWM_ConfigChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002d06:	f000 fb83 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d0a:	4803      	ldr	r0, [pc, #12]	; (8002d18 <MX_TIM2_Init+0xe8>)
 8002d0c:	f000 fe28 	bl	8003960 <HAL_TIM_MspPostInit>

}
 8002d10:	bf00      	nop
 8002d12:	3738      	adds	r7, #56	; 0x38
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200003ac 	.word	0x200003ac

08002d1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	; 0x38
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d30:	f107 0320 	add.w	r3, r7, #32
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
 8002d48:	615a      	str	r2, [r3, #20]
 8002d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d4e:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <MX_TIM3_Init+0x100>)
 8002d50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8002d52:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d5a:	2260      	movs	r2, #96	; 0x60
 8002d5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d72:	4829      	ldr	r0, [pc, #164]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d74:	f003 fe86 	bl	8006a84 <HAL_TIM_Base_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d7e:	f000 fb47 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4822      	ldr	r0, [pc, #136]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002d90:	f004 fe60 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d9a:	f000 fb39 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d9e:	481e      	ldr	r0, [pc, #120]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002da0:	f003 ff28 	bl	8006bf4 <HAL_TIM_PWM_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002daa:	f000 fb31 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002db6:	f107 0320 	add.w	r3, r7, #32
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4816      	ldr	r0, [pc, #88]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002dbe:	f005 fc71 	bl	80086a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002dc8:	f000 fb22 	bl	8003410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dcc:	2360      	movs	r3, #96	; 0x60
 8002dce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	2200      	movs	r2, #0
 8002de0:	4619      	mov	r1, r3
 8002de2:	480d      	ldr	r0, [pc, #52]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002de4:	f004 fd74 	bl	80078d0 <HAL_TIM_PWM_ConfigChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002dee:	f000 fb0f 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2204      	movs	r2, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	4807      	ldr	r0, [pc, #28]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002dfa:	f004 fd69 	bl	80078d0 <HAL_TIM_PWM_ConfigChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002e04:	f000 fb04 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e08:	4803      	ldr	r0, [pc, #12]	; (8002e18 <MX_TIM3_Init+0xfc>)
 8002e0a:	f000 fda9 	bl	8003960 <HAL_TIM_MspPostInit>

}
 8002e0e:	bf00      	nop
 8002e10:	3738      	adds	r7, #56	; 0x38
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200003f4 	.word	0x200003f4
 8002e1c:	40000400 	.word	0x40000400

08002e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e26:	f107 0318 	add.w	r3, r7, #24
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e3e:	463b      	mov	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e4c:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <MX_TIM4_Init+0xf4>)
 8002e4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e52:	f240 321f 	movw	r2, #799	; 0x31f
 8002e56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e72:	4827      	ldr	r0, [pc, #156]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e74:	f003 fe06 	bl	8006a84 <HAL_TIM_Base_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002e7e:	f000 fac7 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e86:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4820      	ldr	r0, [pc, #128]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002e90:	f004 fde0 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002e9a:	f000 fab9 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002e9e:	481c      	ldr	r0, [pc, #112]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002ea0:	f004 f83a 	bl	8006f18 <HAL_TIM_IC_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002eaa:	f000 fab1 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4814      	ldr	r0, [pc, #80]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002ebe:	f005 fbf1 	bl	80086a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002ec8:	f000 faa2 	bl	8003410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ecc:	230a      	movs	r3, #10
 8002ece:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002edc:	463b      	mov	r3, r7
 8002ede:	2208      	movs	r2, #8
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	480b      	ldr	r0, [pc, #44]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002ee4:	f004 fc58 	bl	8007798 <HAL_TIM_IC_ConfigChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002eee:	f000 fa8f 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002ef2:	463b      	mov	r3, r7
 8002ef4:	220c      	movs	r2, #12
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_TIM4_Init+0xf0>)
 8002efa:	f004 fc4d 	bl	8007798 <HAL_TIM_IC_ConfigChannel>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8002f04:	f000 fa84 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000043c 	.word	0x2000043c
 8002f14:	40000800 	.word	0x40000800

08002f18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <MX_TIM5_Init+0x98>)
 8002f38:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f3c:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002f40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f5c:	4813      	ldr	r0, [pc, #76]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f5e:	f003 fd91 	bl	8006a84 <HAL_TIM_Base_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002f68:	f000 fa52 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	4619      	mov	r1, r3
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f7a:	f004 fd6b 	bl	8007a54 <HAL_TIM_ConfigClockSource>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002f84:	f000 fa44 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f90:	463b      	mov	r3, r7
 8002f92:	4619      	mov	r1, r3
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <MX_TIM5_Init+0x94>)
 8002f96:	f005 fb85 	bl	80086a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002fa0:	f000 fa36 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000484 	.word	0x20000484
 8002fb0:	40000c00 	.word	0x40000c00

08002fb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	2224      	movs	r2, #36	; 0x24
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f006 fd94 	bl	8009af0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002fd0:	4b22      	ldr	r3, [pc, #136]	; (800305c <MX_TIM8_Init+0xa8>)
 8002fd2:	4a23      	ldr	r2, [pc, #140]	; (8003060 <MX_TIM8_Init+0xac>)
 8002fd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <MX_TIM8_Init+0xa8>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	; (800305c <MX_TIM8_Init+0xa8>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <MX_TIM8_Init+0xa8>)
 8002fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <MX_TIM8_Init+0xa8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <MX_TIM8_Init+0xa8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ff6:	4b19      	ldr	r3, [pc, #100]	; (800305c <MX_TIM8_Init+0xa8>)
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 800300c:	230c      	movs	r3, #12
 800300e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003010:	2300      	movs	r3, #0
 8003012:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003014:	2301      	movs	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003018:	2300      	movs	r3, #0
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 800301c:	230c      	movs	r3, #12
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	4619      	mov	r1, r3
 8003026:	480d      	ldr	r0, [pc, #52]	; (800305c <MX_TIM8_Init+0xa8>)
 8003028:	f004 f97a 	bl	8007320 <HAL_TIM_Encoder_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003032:	f000 f9ed 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	4619      	mov	r1, r3
 8003042:	4806      	ldr	r0, [pc, #24]	; (800305c <MX_TIM8_Init+0xa8>)
 8003044:	f005 fb2e 	bl	80086a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800304e:	f000 f9df 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	3730      	adds	r7, #48	; 0x30
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200004cc 	.word	0x200004cc
 8003060:	40010400 	.word	0x40010400

08003064 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <MX_UART5_Init+0x4c>)
 800306a:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <MX_UART5_Init+0x50>)
 800306c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <MX_UART5_Init+0x4c>)
 8003070:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003074:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <MX_UART5_Init+0x4c>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <MX_UART5_Init+0x4c>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <MX_UART5_Init+0x4c>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <MX_UART5_Init+0x4c>)
 800308a:	220c      	movs	r2, #12
 800308c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <MX_UART5_Init+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <MX_UART5_Init+0x4c>)
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800309a:	4805      	ldr	r0, [pc, #20]	; (80030b0 <MX_UART5_Init+0x4c>)
 800309c:	f005 fbe4 	bl	8008868 <HAL_UART_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80030a6:	f000 f9b3 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000574 	.word	0x20000574
 80030b4:	40005000 	.word	0x40005000

080030b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <MX_USART1_UART_Init+0x50>)
 80030c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030de:	220c      	movs	r2, #12
 80030e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030f0:	f005 fbba 	bl	8008868 <HAL_UART_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030fa:	f000 f989 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200005b8 	.word	0x200005b8
 8003108:	40011000 	.word	0x40011000

0800310c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <MX_USART2_UART_Init+0x50>)
 8003114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800311c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003144:	f005 fb90 	bl	8008868 <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800314e:	f000 f95f 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200005fc 	.word	0x200005fc
 800315c:	40004400 	.word	0x40004400

08003160 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003166:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <MX_USART3_UART_Init+0x50>)
 8003168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 800316c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003170:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003186:	220c      	movs	r2, #12
 8003188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003192:	2200      	movs	r2, #0
 8003194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003196:	4805      	ldr	r0, [pc, #20]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003198:	f005 fb66 	bl	8008868 <HAL_UART_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031a2:	f000 f935 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000640 	.word	0x20000640
 80031b0:	40004800 	.word	0x40004800

080031b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_DMA_Init+0x3c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <MX_DMA_Init+0x3c>)
 80031c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_DMA_Init+0x3c>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	202f      	movs	r0, #47	; 0x2f
 80031dc:	f001 fdcd 	bl	8004d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80031e0:	202f      	movs	r0, #47	; 0x2f
 80031e2:	f001 fde6 	bl	8004db2 <HAL_NVIC_EnableIRQ>

}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	4b64      	ldr	r3, [pc, #400]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a63      	ldr	r2, [pc, #396]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a5c      	ldr	r2, [pc, #368]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a55      	ldr	r2, [pc, #340]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a47      	ldr	r2, [pc, #284]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <MX_GPIO_Init+0x1ac>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8003296:	2200      	movs	r2, #0
 8003298:	2102      	movs	r1, #2
 800329a:	4842      	ldr	r0, [pc, #264]	; (80033a4 <MX_GPIO_Init+0x1b0>)
 800329c:	f002 fd6e 	bl	8005d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2122      	movs	r1, #34	; 0x22
 80032a4:	4840      	ldr	r0, [pc, #256]	; (80033a8 <MX_GPIO_Init+0x1b4>)
 80032a6:	f002 fd69 	bl	8005d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80032aa:	2200      	movs	r2, #0
 80032ac:	f24e 0142 	movw	r1, #57410	; 0xe042
 80032b0:	483e      	ldr	r0, [pc, #248]	; (80033ac <MX_GPIO_Init+0x1b8>)
 80032b2:	f002 fd63 	bl	8005d7c <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : On_Board_Button_Pin */
  GPIO_InitStruct.Pin = On_Board_Button_Pin;
 80032b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(On_Board_Button_GPIO_Port, &GPIO_InitStruct);
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4619      	mov	r1, r3
 80032cc:	4835      	ldr	r0, [pc, #212]	; (80033a4 <MX_GPIO_Init+0x1b0>)
 80032ce:	f002 fba9 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 80032d2:	2302      	movs	r3, #2
 80032d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	4619      	mov	r1, r3
 80032e8:	482e      	ldr	r0, [pc, #184]	; (80033a4 <MX_GPIO_Init+0x1b0>)
 80032ea:	f002 fb9b 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 80032ee:	2322      	movs	r3, #34	; 0x22
 80032f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2300      	movs	r3, #0
 80032fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4828      	ldr	r0, [pc, #160]	; (80033a8 <MX_GPIO_Init+0x1b4>)
 8003306:	f002 fb8d 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800330a:	f24e 0342 	movw	r3, #57410	; 0xe042
 800330e:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003310:	2301      	movs	r3, #1
 8003312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	4822      	ldr	r0, [pc, #136]	; (80033ac <MX_GPIO_Init+0x1b8>)
 8003324:	f002 fb7e 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B2_Pin|Motor_Feedback_Pin;
 8003328:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 800332c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	f107 0314 	add.w	r3, r7, #20
 800333a:	4619      	mov	r1, r3
 800333c:	481b      	ldr	r0, [pc, #108]	; (80033ac <MX_GPIO_Init+0x1b8>)
 800333e:	f002 fb71 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8003342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	4619      	mov	r1, r3
 8003356:	4814      	ldr	r0, [pc, #80]	; (80033a8 <MX_GPIO_Init+0x1b4>)
 8003358:	f002 fb64 	bl	8005a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800335c:	2310      	movs	r3, #16
 800335e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003360:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	480e      	ldr	r0, [pc, #56]	; (80033ac <MX_GPIO_Init+0x1b8>)
 8003372:	f002 fb57 	bl	8005a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2100      	movs	r1, #0
 800337a:	200a      	movs	r0, #10
 800337c:	f001 fcfd 	bl	8004d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003380:	200a      	movs	r0, #10
 8003382:	f001 fd16 	bl	8004db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2028      	movs	r0, #40	; 0x28
 800338c:	f001 fcf5 	bl	8004d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003390:	2028      	movs	r0, #40	; 0x28
 8003392:	f001 fd0e 	bl	8004db2 <HAL_NVIC_EnableIRQ>

}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400

080033b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
	//ha meg lett nyomva a nucleon a kék gomb
	if(GPIO_Pin == On_Board_Button_Pin)
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c0:	d105      	bne.n	80033ce <HAL_GPIO_EXTI_Callback+0x1e>
	{
		bFlag[0]=1;
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
		NVIC_DisableIRQ(On_Board_Button_EXTI_IRQn);
 80033c8:	2028      	movs	r0, #40	; 0x28
 80033ca:	f7ff f98b 	bl	80026e4 <__NVIC_DisableIRQ>
	}
	if(GPIO_Pin == B1_Pin)
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d105      	bne.n	80033e0 <HAL_GPIO_EXTI_Callback+0x30>
	{
		bFlag[1]=1;
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	705a      	strb	r2, [r3, #1]
		NVIC_DisableIRQ(B1_EXTI_IRQn);
 80033da:	200a      	movs	r0, #10
 80033dc:	f7ff f982 	bl	80026e4 <__NVIC_DisableIRQ>
	}
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000248 	.word	0x20000248

080033ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)Uart_Receive_From_PC_ISR(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a05      	ldr	r2, [pc, #20]	; (800340c <HAL_UART_RxCpltCallback+0x20>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <HAL_UART_RxCpltCallback+0x16>
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fd ff9f 	bl	8001340 <Uart_Receive_From_PC_ISR>
	//else if(huart==&huart3)Uart_Receive_Thunderboard_ISR(huart);
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200005b8 	.word	0x200005b8

08003410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003414:	b672      	cpsid	i
}
 8003416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003418:	e7fe      	b.n	8003418 <Error_Handler+0x8>
	...

0800341c <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	tEdge[0] = 1000;
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <Remote_Control_Init+0x34>)
 8003428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800342c:	601a      	str	r2, [r3, #0]
	tEdge[1] = 500;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <Remote_Control_Init+0x34>)
 8003430:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003434:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <Remote_Control_Init+0x34>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 800343c:	2303      	movs	r3, #3
 800343e:	4a04      	ldr	r2, [pc, #16]	; (8003450 <Remote_Control_Init+0x34>)
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f003 fdc2 	bl	8006fcc <HAL_TIM_IC_Start_DMA>
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000688 	.word	0x20000688

08003454 <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <Remote_Control_Task+0x168>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	f0c0 80a2 	bcc.w	80035b2 <Remote_Control_Task+0x15e>
	remote_control_tick = tick + period;
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	4413      	add	r3, r2
 8003474:	4a51      	ldr	r2, [pc, #324]	; (80035bc <Remote_Control_Task+0x168>)
 8003476:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8003478:	201e      	movs	r0, #30
 800347a:	f001 fca8 	bl	8004dce <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 800347e:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <Remote_Control_Task+0x16c>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <Remote_Control_Task+0x16c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bfb8      	it	lt
 800348c:	425b      	neglt	r3, r3
 800348e:	4a4d      	ldr	r2, [pc, #308]	; (80035c4 <Remote_Control_Task+0x170>)
 8003490:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 8003492:	4b4b      	ldr	r3, [pc, #300]	; (80035c0 <Remote_Control_Task+0x16c>)
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <Remote_Control_Task+0x16c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bfb8      	it	lt
 80034a0:	425b      	neglt	r3, r3
 80034a2:	4a49      	ldr	r2, [pc, #292]	; (80035c8 <Remote_Control_Task+0x174>)
 80034a4:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <Remote_Control_Task+0x16c>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b45      	ldr	r3, [pc, #276]	; (80035c0 <Remote_Control_Task+0x16c>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bfb8      	it	lt
 80034b4:	425b      	neglt	r3, r3
 80034b6:	4a45      	ldr	r2, [pc, #276]	; (80035cc <Remote_Control_Task+0x178>)
 80034b8:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 80034ba:	201e      	movs	r0, #30
 80034bc:	f001 fc79 	bl	8004db2 <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 80034c0:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <Remote_Control_Task+0x170>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	dd06      	ble.n	80034da <Remote_Control_Task+0x86>
 80034cc:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <Remote_Control_Task+0x170>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80034d4:	33ff      	adds	r3, #255	; 0xff
 80034d6:	4a3b      	ldr	r2, [pc, #236]	; (80035c4 <Remote_Control_Task+0x170>)
 80034d8:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 80034da:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <Remote_Control_Task+0x174>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	dd06      	ble.n	80034f4 <Remote_Control_Task+0xa0>
 80034e6:	4b38      	ldr	r3, [pc, #224]	; (80035c8 <Remote_Control_Task+0x174>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80034ee:	33ff      	adds	r3, #255	; 0xff
 80034f0:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <Remote_Control_Task+0x174>)
 80034f2:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <Remote_Control_Task+0x178>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	dd06      	ble.n	800350e <Remote_Control_Task+0xba>
 8003500:	4b32      	ldr	r3, [pc, #200]	; (80035cc <Remote_Control_Task+0x178>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003508:	33ff      	adds	r3, #255	; 0xff
 800350a:	4a30      	ldr	r2, [pc, #192]	; (80035cc <Remote_Control_Task+0x178>)
 800350c:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <Remote_Control_Task+0x170>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <Remote_Control_Task+0x174>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	da0b      	bge.n	8003532 <Remote_Control_Task+0xde>
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <Remote_Control_Task+0x170>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <Remote_Control_Task+0x178>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	da05      	bge.n	8003532 <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <Remote_Control_Task+0x170>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <Remote_Control_Task+0x17c>)
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e016      	b.n	8003560 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8003532:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <Remote_Control_Task+0x174>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <Remote_Control_Task+0x170>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	da0b      	bge.n	8003556 <Remote_Control_Task+0x102>
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <Remote_Control_Task+0x174>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <Remote_Control_Task+0x178>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	da05      	bge.n	8003556 <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 800354a:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <Remote_Control_Task+0x174>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <Remote_Control_Task+0x17c>)
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e004      	b.n	8003560 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <Remote_Control_Task+0x178>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <Remote_Control_Task+0x17c>)
 800355e:	601a      	str	r2, [r3, #0]
	sprintf(string,"%d\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 10);
	remote_control_tick = tick + 1000;
#endif

	if((tLow>70 && tLow<100) || tLow==1000)
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <Remote_Control_Task+0x17c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b46      	cmp	r3, #70	; 0x46
 8003566:	d903      	bls.n	8003570 <Remote_Control_Task+0x11c>
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <Remote_Control_Task+0x17c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b63      	cmp	r3, #99	; 0x63
 800356e:	d904      	bls.n	800357a <Remote_Control_Task+0x126>
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <Remote_Control_Task+0x17c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003578:	d109      	bne.n	800358e <Remote_Control_Task+0x13a>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 800357a:	2200      	movs	r2, #0
 800357c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003580:	4814      	ldr	r0, [pc, #80]	; (80035d4 <Remote_Control_Task+0x180>)
 8003582:	f002 fbfb 	bl	8005d7c <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <Remote_Control_Task+0x184>)
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e012      	b.n	80035b4 <Remote_Control_Task+0x160>
	}
	else
	{
		LED_R(0);
 800358e:	2201      	movs	r2, #1
 8003590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003594:	480f      	ldr	r0, [pc, #60]	; (80035d4 <Remote_Control_Task+0x180>)
 8003596:	f002 fbf1 	bl	8005d7c <HAL_GPIO_WritePin>
		if(tLow <= 70) motorEnRemote=1;
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <Remote_Control_Task+0x17c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b46      	cmp	r3, #70	; 0x46
 80035a0:	d803      	bhi.n	80035aa <Remote_Control_Task+0x156>
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <Remote_Control_Task+0x184>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e004      	b.n	80035b4 <Remote_Control_Task+0x160>
		else motorEnRemote=2;
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <Remote_Control_Task+0x184>)
 80035ac:	2202      	movs	r2, #2
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e000      	b.n	80035b4 <Remote_Control_Task+0x160>
	if(remote_control_tick>tick) return;
 80035b2:	bf00      	nop

	}
}
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000694 	.word	0x20000694
 80035c0:	20000688 	.word	0x20000688
 80035c4:	2000003c 	.word	0x2000003c
 80035c8:	20000040 	.word	0x20000040
 80035cc:	20000044 	.word	0x20000044
 80035d0:	20000048 	.word	0x20000048
 80035d4:	40020400 	.word	0x40020400
 80035d8:	20000684 	.word	0x20000684

080035dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_MspInit+0x4c>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_MspInit+0x4c>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_MspInit+0x4c>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_MspInit+0x4c>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a08      	ldr	r2, [pc, #32]	; (8003628 <HAL_MspInit+0x4c>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_MspInit+0x4c>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800361a:	2007      	movs	r0, #7
 800361c:	f001 fba2 	bl	8004d64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <HAL_ADC_MspInit+0xd8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d128      	bne.n	80036a0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365c:	6453      	str	r3, [r2, #68]	; 0x44
 800365e:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a25      	ldr	r2, [pc, #148]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b23      	ldr	r3, [pc, #140]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 8003686:	2301      	movs	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368a:	2303      	movs	r3, #3
 800368c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8003692:	f107 031c 	add.w	r3, r7, #28
 8003696:	4619      	mov	r1, r3
 8003698:	481c      	ldr	r0, [pc, #112]	; (800370c <HAL_ADC_MspInit+0xe0>)
 800369a:	f002 f9c3 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800369e:	e02c      	b.n	80036fa <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_ADC_MspInit+0xe4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d127      	bne.n	80036fa <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 80036b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036b8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6313      	str	r3, [r2, #48]	; 0x30
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <HAL_ADC_MspInit+0xdc>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 80036e2:	2308      	movs	r3, #8
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036e6:	2303      	movs	r3, #3
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	4807      	ldr	r0, [pc, #28]	; (8003714 <HAL_ADC_MspInit+0xe8>)
 80036f6:	f002 f995 	bl	8005a24 <HAL_GPIO_Init>
}
 80036fa:	bf00      	nop
 80036fc:	3730      	adds	r7, #48	; 0x30
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40012000 	.word	0x40012000
 8003708:	40023800 	.word	0x40023800
 800370c:	40020400 	.word	0x40020400
 8003710:	40012100 	.word	0x40012100
 8003714:	40020800 	.word	0x40020800

08003718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08e      	sub	sp, #56	; 0x38
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5e      	ldr	r2, [pc, #376]	; (80038b0 <HAL_TIM_Base_MspInit+0x198>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	4a5c      	ldr	r2, [pc, #368]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	6453      	str	r3, [r2, #68]	; 0x44
 800374a:	4b5a      	ldr	r3, [pc, #360]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003756:	e0a7      	b.n	80038a8 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d116      	bne.n	8003790 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	201c      	movs	r0, #28
 8003784:	f001 faf9 	bl	8004d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003788:	201c      	movs	r0, #28
 800378a:	f001 fb12 	bl	8004db2 <HAL_NVIC_EnableIRQ>
}
 800378e:	e08b      	b.n	80038a8 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_TIM_Base_MspInit+0x1a0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	4b45      	ldr	r3, [pc, #276]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a44      	ldr	r2, [pc, #272]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037a4:	f043 0302 	orr.w	r3, r3, #2
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b42      	ldr	r3, [pc, #264]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	69bb      	ldr	r3, [r7, #24]
}
 80037b6:	e077      	b.n	80038a8 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM4)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3f      	ldr	r2, [pc, #252]	; (80038bc <HAL_TIM_Base_MspInit+0x1a4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d15f      	bne.n	8003882 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a3a      	ldr	r2, [pc, #232]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 80037d2:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a33      	ldr	r2, [pc, #204]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 80037fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800380c:	2302      	movs	r3, #2
 800380e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003814:	4619      	mov	r1, r3
 8003816:	482a      	ldr	r0, [pc, #168]	; (80038c0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003818:	f002 f904 	bl	8005a24 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 800381e:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003820:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003824:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003828:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003832:	2200      	movs	r2, #0
 8003834:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800383c:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003844:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003848:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800384c:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003854:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003858:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800385c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800385e:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003860:	2200      	movs	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003864:	4817      	ldr	r0, [pc, #92]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003866:	f001 facd 	bl	8004e04 <HAL_DMA_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 8003870:	f7ff fdce 	bl	8003410 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <HAL_TIM_Base_MspInit+0x1ac>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003880:	e012      	b.n	80038a8 <HAL_TIM_Base_MspInit+0x190>
  else if(htim_base->Instance==TIM5)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a11      	ldr	r2, [pc, #68]	; (80038cc <HAL_TIM_Base_MspInit+0x1b4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d10d      	bne.n	80038a8 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	6413      	str	r3, [r2, #64]	; 0x40
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_TIM_Base_MspInit+0x19c>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	bf00      	nop
 80038aa:	3738      	adds	r7, #56	; 0x38
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40020400 	.word	0x40020400
 80038c4:	20000514 	.word	0x20000514
 80038c8:	400260b8 	.word	0x400260b8
 80038cc:	40000c00 	.word	0x40000c00

080038d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_TIM_Encoder_MspInit+0x84>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d12b      	bne.n	800394a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <HAL_TIM_Encoder_MspInit+0x88>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <HAL_TIM_Encoder_MspInit+0x88>)
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <HAL_TIM_Encoder_MspInit+0x88>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_TIM_Encoder_MspInit+0x88>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <HAL_TIM_Encoder_MspInit+0x88>)
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_TIM_Encoder_MspInit+0x88>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800392a:	23c0      	movs	r3, #192	; 0xc0
 800392c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392e:	2302      	movs	r3, #2
 8003930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800393a:	2303      	movs	r3, #3
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	4619      	mov	r1, r3
 8003944:	4805      	ldr	r0, [pc, #20]	; (800395c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003946:	f002 f86d 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800394a:	bf00      	nop
 800394c:	3728      	adds	r7, #40	; 0x28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40010400 	.word	0x40010400
 8003958:	40023800 	.word	0x40023800
 800395c:	40020800 	.word	0x40020800

08003960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a37      	ldr	r2, [pc, #220]	; (8003a5c <HAL_TIM_MspPostInit+0xfc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d11f      	bne.n	80039c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a35      	ldr	r2, [pc, #212]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 800399e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ac:	2300      	movs	r3, #0
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039b0:	2301      	movs	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4619      	mov	r1, r3
 80039ba:	482a      	ldr	r0, [pc, #168]	; (8003a64 <HAL_TIM_MspPostInit+0x104>)
 80039bc:	f002 f832 	bl	8005a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80039c0:	e047      	b.n	8003a52 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d11f      	bne.n	8003a0c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6313      	str	r3, [r2, #48]	; 0x30
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 80039e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039fa:	2301      	movs	r3, #1
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	4619      	mov	r1, r3
 8003a04:	4817      	ldr	r0, [pc, #92]	; (8003a64 <HAL_TIM_MspPostInit+0x104>)
 8003a06:	f002 f80d 	bl	8005a24 <HAL_GPIO_Init>
}
 8003a0a:	e022      	b.n	8003a52 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <HAL_TIM_MspPostInit+0x108>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d11d      	bne.n	8003a52 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_TIM_MspPostInit+0x100>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 8003a32:	23c0      	movs	r3, #192	; 0xc0
 8003a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a42:	2302      	movs	r3, #2
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4805      	ldr	r0, [pc, #20]	; (8003a64 <HAL_TIM_MspPostInit+0x104>)
 8003a4e:	f001 ffe9 	bl	8005a24 <HAL_GPIO_Init>
}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40020000 	.word	0x40020000
 8003a68:	40000400 	.word	0x40000400

08003a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b090      	sub	sp, #64	; 0x40
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <HAL_UART_MspInit+0x210>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d153      	bne.n	8003b36 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a92:	4b7b      	ldr	r3, [pc, #492]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a7a      	ldr	r2, [pc, #488]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9e:	4b78      	ldr	r3, [pc, #480]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	4b74      	ldr	r3, [pc, #464]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b71      	ldr	r3, [pc, #452]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	4b6d      	ldr	r3, [pc, #436]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a6c      	ldr	r2, [pc, #432]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8003ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af0:	2303      	movs	r3, #3
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003af4:	2308      	movs	r3, #8
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 8003af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003afc:	4619      	mov	r1, r3
 8003afe:	4861      	ldr	r0, [pc, #388]	; (8003c84 <HAL_UART_MspInit+0x218>)
 8003b00:	f001 ff90 	bl	8005a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8003b04:	2304      	movs	r3, #4
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003b14:	2308      	movs	r3, #8
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 8003b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	485a      	ldr	r0, [pc, #360]	; (8003c88 <HAL_UART_MspInit+0x21c>)
 8003b20:	f001 ff80 	bl	8005a24 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003b24:	2200      	movs	r2, #0
 8003b26:	2100      	movs	r1, #0
 8003b28:	2035      	movs	r0, #53	; 0x35
 8003b2a:	f001 f926 	bl	8004d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003b2e:	2035      	movs	r0, #53	; 0x35
 8003b30:	f001 f93f 	bl	8004db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b34:	e09e      	b.n	8003c74 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a54      	ldr	r2, [pc, #336]	; (8003c8c <HAL_UART_MspInit+0x220>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d135      	bne.n	8003bac <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	4b4e      	ldr	r3, [pc, #312]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	4a4d      	ldr	r2, [pc, #308]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003b4a:	f043 0310 	orr.w	r3, r3, #16
 8003b4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	4a46      	ldr	r2, [pc, #280]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6c:	4b44      	ldr	r3, [pc, #272]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8003b78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b86:	2303      	movs	r3, #3
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b92:	4619      	mov	r1, r3
 8003b94:	483e      	ldr	r0, [pc, #248]	; (8003c90 <HAL_UART_MspInit+0x224>)
 8003b96:	f001 ff45 	bl	8005a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2025      	movs	r0, #37	; 0x25
 8003ba0:	f001 f8eb 	bl	8004d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ba4:	2025      	movs	r0, #37	; 0x25
 8003ba6:	f001 f904 	bl	8004db2 <HAL_NVIC_EnableIRQ>
}
 8003baa:	e063      	b.n	8003c74 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_UART_MspInit+0x228>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d12c      	bne.n	8003c10 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a30      	ldr	r2, [pc, #192]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a29      	ldr	r2, [pc, #164]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8003bee:	230c      	movs	r3, #12
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bfe:	2307      	movs	r3, #7
 8003c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c06:	4619      	mov	r1, r3
 8003c08:	4821      	ldr	r0, [pc, #132]	; (8003c90 <HAL_UART_MspInit+0x224>)
 8003c0a:	f001 ff0b 	bl	8005a24 <HAL_GPIO_Init>
}
 8003c0e:	e031      	b.n	8003c74 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <HAL_UART_MspInit+0x22c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d12c      	bne.n	8003c74 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6313      	str	r3, [r2, #48]	; 0x30
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_UART_MspInit+0x214>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 8003c52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c60:	2303      	movs	r3, #3
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c64:	2307      	movs	r3, #7
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4805      	ldr	r0, [pc, #20]	; (8003c84 <HAL_UART_MspInit+0x218>)
 8003c70:	f001 fed8 	bl	8005a24 <HAL_GPIO_Init>
}
 8003c74:	bf00      	nop
 8003c76:	3740      	adds	r7, #64	; 0x40
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40005000 	.word	0x40005000
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020c00 	.word	0x40020c00
 8003c8c:	40011000 	.word	0x40011000
 8003c90:	40020000 	.word	0x40020000
 8003c94:	40004400 	.word	0x40004400
 8003c98:	40004800 	.word	0x40004800

08003c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ca0:	e7fe      	b.n	8003ca0 <NMI_Handler+0x4>

08003ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ca6:	e7fe      	b.n	8003ca6 <HardFault_Handler+0x4>

08003ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cac:	e7fe      	b.n	8003cac <MemManage_Handler+0x4>

08003cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cb2:	e7fe      	b.n	8003cb2 <BusFault_Handler+0x4>

08003cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <UsageFault_Handler+0x4>

08003cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ce8:	f000 f98e 	bl	8004008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003cf4:	2010      	movs	r0, #16
 8003cf6:	f002 f875 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <TIM2_IRQHandler+0x10>)
 8003d06:	f003 fc3f 	bl	8007588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200003ac 	.word	0x200003ac

08003d14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <USART1_IRQHandler+0x10>)
 8003d1a:	f004 ff57 	bl	8008bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200005b8 	.word	0x200005b8

08003d28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(On_Board_Button_Pin);
 8003d2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d30:	f002 f858 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <DMA1_Stream7_IRQHandler+0x10>)
 8003d3e:	f001 f9f9 	bl	8005134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000514 	.word	0x20000514

08003d4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <UART5_IRQHandler+0x10>)
 8003d52:	f004 ff3b 	bl	8008bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000574 	.word	0x20000574

08003d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
	return 1;
 8003d64:	2301      	movs	r3, #1
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_kill>:

int _kill(int pid, int sig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d7a:	f005 fe8f 	bl	8009a9c <__errno>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2216      	movs	r2, #22
 8003d82:	601a      	str	r2, [r3, #0]
	return -1;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_exit>:

void _exit (int status)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ffe7 	bl	8003d70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003da2:	e7fe      	b.n	8003da2 <_exit+0x12>

08003da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	e00a      	b.n	8003dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003db6:	f3af 8000 	nop.w
 8003dba:	4601      	mov	r1, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	60ba      	str	r2, [r7, #8]
 8003dc2:	b2ca      	uxtb	r2, r1
 8003dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	dbf0      	blt.n	8003db6 <_read+0x12>
	}

return len;
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e009      	b.n	8003e04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	60ba      	str	r2, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dbf1      	blt.n	8003df0 <_write+0x12>
	}
	return len;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_close>:

int _close(int file)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <_isatty>:

int _isatty(int file)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
	return 1;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <_sbrk+0x5c>)
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <_sbrk+0x60>)
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <_sbrk+0x64>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <_sbrk+0x64>)
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <_sbrk+0x68>)
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <_sbrk+0x64>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d207      	bcs.n	8003ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eb0:	f005 fdf4 	bl	8009a9c <__errno>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e009      	b.n	8003ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <_sbrk+0x64>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <_sbrk+0x64>)
 8003ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20020000 	.word	0x20020000
 8003ee0:	00000400 	.word	0x00000400
 8003ee4:	20000698 	.word	0x20000698
 8003ee8:	200006d0 	.word	0x200006d0

08003eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <SystemInit+0x20>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <SystemInit+0x20>)
 8003ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8003f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f16:	490e      	ldr	r1, [pc, #56]	; (8003f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f18:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f1c:	e002      	b.n	8003f24 <LoopCopyDataInit>

08003f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f22:	3304      	adds	r3, #4

08003f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f28:	d3f9      	bcc.n	8003f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2a:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f2c:	4c0b      	ldr	r4, [pc, #44]	; (8003f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f30:	e001      	b.n	8003f36 <LoopFillZerobss>

08003f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f34:	3204      	adds	r2, #4

08003f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f38:	d3fb      	bcc.n	8003f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f3a:	f7ff ffd7 	bl	8003eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f3e:	f005 fdb3 	bl	8009aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f42:	f7fe fbf3 	bl	800272c <main>
  bx  lr    
 8003f46:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8003f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f50:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003f54:	0800e440 	.word	0x0800e440
  ldr r2, =_sbss
 8003f58:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003f5c:	200006d0 	.word	0x200006d0

08003f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f60:	e7fe      	b.n	8003f60 <ADC_IRQHandler>
	...

08003f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_Init+0x40>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <HAL_Init+0x40>)
 8003f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_Init+0x40>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <HAL_Init+0x40>)
 8003f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f80:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <HAL_Init+0x40>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <HAL_Init+0x40>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	f000 fee9 	bl	8004d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f92:	2000      	movs	r0, #0
 8003f94:	f000 f808 	bl	8003fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f98:	f7ff fb20 	bl	80035dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023c00 	.word	0x40023c00

08003fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_InitTick+0x54>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_InitTick+0x58>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 ff0f 	bl	8004dea <HAL_SYSTICK_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00e      	b.n	8003ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b0f      	cmp	r3, #15
 8003fda:	d80a      	bhi.n	8003ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	f000 fec9 	bl	8004d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fe8:	4a06      	ldr	r2, [pc, #24]	; (8004004 <HAL_InitTick+0x5c>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e000      	b.n	8003ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2000004c 	.word	0x2000004c
 8004000:	20000054 	.word	0x20000054
 8004004:	20000050 	.word	0x20000050

08004008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x20>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_IncTick+0x24>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4413      	add	r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_IncTick+0x24>)
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000054 	.word	0x20000054
 800402c:	2000069c 	.word	0x2000069c

08004030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return uwTick;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_GetTick+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000069c 	.word	0x2000069c

08004048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7ff ffee 	bl	8004030 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d005      	beq.n	800406e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_Delay+0x44>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800406e:	bf00      	nop
 8004070:	f7ff ffde 	bl	8004030 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d8f7      	bhi.n	8004070 <HAL_Delay+0x28>
  {
  }
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000054 	.word	0x20000054

08004090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e033      	b.n	800410e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fabc 	bl	800362c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040d6:	f023 0302 	bic.w	r3, r3, #2
 80040da:	f043 0202 	orr.w	r2, r3, #2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fab4 	bl	8004650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
 80040fe:	e001      	b.n	8004104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_ADC_Start+0x1a>
 800412e:	2302      	movs	r3, #2
 8004130:	e0b2      	b.n	8004298 <HAL_ADC_Start+0x180>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d018      	beq.n	800417a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004158:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <HAL_ADC_Start+0x18c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_ADC_Start+0x190>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0c9a      	lsrs	r2, r3, #18
 8004164:	4613      	mov	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800416c:	e002      	b.n	8004174 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3b01      	subs	r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f9      	bne.n	800416e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d17a      	bne.n	800427e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c6:	d106      	bne.n	80041d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	f023 0206 	bic.w	r2, r3, #6
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
 80041d4:	e002      	b.n	80041dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e4:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_ADC_Start+0x194>)
 80041e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d12a      	bne.n	8004254 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <HAL_ADC_Start+0x198>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d015      	beq.n	8004234 <HAL_ADC_Start+0x11c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_ADC_Start+0x19c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d105      	bne.n	800421e <HAL_ADC_Start+0x106>
 8004212:	4b26      	ldr	r3, [pc, #152]	; (80042ac <HAL_ADC_Start+0x194>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a25      	ldr	r2, [pc, #148]	; (80042b8 <HAL_ADC_Start+0x1a0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d136      	bne.n	8004296 <HAL_ADC_Start+0x17e>
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_ADC_Start+0x194>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d130      	bne.n	8004296 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d129      	bne.n	8004296 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004250:	609a      	str	r2, [r3, #8]
 8004252:	e020      	b.n	8004296 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <HAL_ADC_Start+0x198>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d11b      	bne.n	8004296 <HAL_ADC_Start+0x17e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d114      	bne.n	8004296 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	e00b      	b.n	8004296 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0210 	orr.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	2000004c 	.word	0x2000004c
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	40012300 	.word	0x40012300
 80042b0:	40012000 	.word	0x40012000
 80042b4:	40012100 	.word	0x40012100
 80042b8:	40012200 	.word	0x40012200

080042bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d113      	bne.n	8004302 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e8:	d10b      	bne.n	8004302 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e063      	b.n	80043ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004302:	f7ff fe95 	bl	8004030 <HAL_GetTick>
 8004306:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004308:	e021      	b.n	800434e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d01d      	beq.n	800434e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_ADC_PollForConversion+0x6c>
 8004318:	f7ff fe8a 	bl	8004030 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d212      	bcs.n	800434e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	d00b      	beq.n	800434e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e03d      	b.n	80043ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b02      	cmp	r3, #2
 800435a:	d1d6      	bne.n	800430a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0212 	mvn.w	r2, #18
 8004364:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d123      	bne.n	80043c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11f      	bne.n	80043c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f043 0201 	orr.w	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1c>
 8004404:	2302      	movs	r3, #2
 8004406:	e113      	b.n	8004630 <HAL_ADC_ConfigChannel+0x244>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b09      	cmp	r3, #9
 8004416:	d925      	bls.n	8004464 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68d9      	ldr	r1, [r3, #12]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	3b1e      	subs	r3, #30
 800442e:	2207      	movs	r2, #7
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43da      	mvns	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	400a      	ands	r2, r1
 800443c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68d9      	ldr	r1, [r3, #12]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	4618      	mov	r0, r3
 8004450:	4603      	mov	r3, r0
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4403      	add	r3, r0
 8004456:	3b1e      	subs	r3, #30
 8004458:	409a      	lsls	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e022      	b.n	80044aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6919      	ldr	r1, [r3, #16]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	2207      	movs	r2, #7
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	400a      	ands	r2, r1
 8004486:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6919      	ldr	r1, [r3, #16]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	4618      	mov	r0, r3
 800449a:	4603      	mov	r3, r0
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	4403      	add	r3, r0
 80044a0:	409a      	lsls	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d824      	bhi.n	80044fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	3b05      	subs	r3, #5
 80044c4:	221f      	movs	r2, #31
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43da      	mvns	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	400a      	ands	r2, r1
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4618      	mov	r0, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	3b05      	subs	r3, #5
 80044ee:	fa00 f203 	lsl.w	r2, r0, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
 80044fa:	e04c      	b.n	8004596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b0c      	cmp	r3, #12
 8004502:	d824      	bhi.n	800454e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	3b23      	subs	r3, #35	; 0x23
 8004516:	221f      	movs	r2, #31
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43da      	mvns	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	400a      	ands	r2, r1
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	4618      	mov	r0, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	3b23      	subs	r3, #35	; 0x23
 8004540:	fa00 f203 	lsl.w	r2, r0, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
 800454c:	e023      	b.n	8004596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	3b41      	subs	r3, #65	; 0x41
 8004560:	221f      	movs	r2, #31
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43da      	mvns	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	400a      	ands	r2, r1
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	4618      	mov	r0, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	3b41      	subs	r3, #65	; 0x41
 800458a:	fa00 f203 	lsl.w	r2, r0, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_ADC_ConfigChannel+0x250>)
 8004598:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a28      	ldr	r2, [pc, #160]	; (8004640 <HAL_ADC_ConfigChannel+0x254>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10f      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x1d8>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b12      	cmp	r3, #18
 80045aa:	d10b      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <HAL_ADC_ConfigChannel+0x254>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d12b      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x23a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <HAL_ADC_ConfigChannel+0x1f4>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b11      	cmp	r3, #17
 80045de:	d122      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a11      	ldr	r2, [pc, #68]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d111      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_ADC_ConfigChannel+0x25c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a11      	ldr	r2, [pc, #68]	; (800464c <HAL_ADC_ConfigChannel+0x260>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	0c9a      	lsrs	r2, r3, #18
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004618:	e002      	b.n	8004620 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3b01      	subs	r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f9      	bne.n	800461a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40012300 	.word	0x40012300
 8004640:	40012000 	.word	0x40012000
 8004644:	10000012 	.word	0x10000012
 8004648:	2000004c 	.word	0x2000004c
 800464c:	431bde83 	.word	0x431bde83

08004650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004658:	4b79      	ldr	r3, [pc, #484]	; (8004840 <ADC_Init+0x1f0>)
 800465a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	431a      	orrs	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	021a      	lsls	r2, r3, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	4a58      	ldr	r2, [pc, #352]	; (8004844 <ADC_Init+0x1f4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d022      	beq.n	800472e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6899      	ldr	r1, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	e00f      	b.n	800474e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800473c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800474c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0202 	bic.w	r2, r2, #2
 800475c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6899      	ldr	r1, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7e1b      	ldrb	r3, [r3, #24]
 8004768:	005a      	lsls	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01b      	beq.n	80047b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800479a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	3b01      	subs	r3, #1
 80047a8:	035a      	lsls	r2, r3, #13
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	e007      	b.n	80047c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	3b01      	subs	r3, #1
 80047e0:	051a      	lsls	r2, r3, #20
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004806:	025a      	lsls	r2, r3, #9
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6899      	ldr	r1, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	029a      	lsls	r2, r3, #10
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	40012300 	.word	0x40012300
 8004844:	0f000001 	.word	0x0f000001

08004848 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800485c:	2302      	movs	r3, #2
 800485e:	e17e      	b.n	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b09      	cmp	r3, #9
 800486e:	d925      	bls.n	80048bc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68d9      	ldr	r1, [r3, #12]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	3b1e      	subs	r3, #30
 8004886:	2207      	movs	r2, #7
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43da      	mvns	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	400a      	ands	r2, r1
 8004894:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68d9      	ldr	r1, [r3, #12]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4618      	mov	r0, r3
 80048a8:	4603      	mov	r3, r0
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4403      	add	r3, r0
 80048ae:	3b1e      	subs	r3, #30
 80048b0:	409a      	lsls	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	e022      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6919      	ldr	r1, [r3, #16]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	2207      	movs	r2, #7
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43da      	mvns	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	400a      	ands	r2, r1
 80048de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4618      	mov	r0, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4403      	add	r3, r0
 80048f8:	409a      	lsls	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	3b01      	subs	r3, #1
 800491e:	051a      	lsls	r2, r3, #20
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	3303      	adds	r3, #3
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	221f      	movs	r2, #31
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43da      	mvns	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	400a      	ands	r2, r1
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	4618      	mov	r0, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	3303      	adds	r3, #3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	fa00 f203 	lsl.w	r2, r0, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	4a75      	ldr	r2, [pc, #468]	; (8004b6c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d022      	beq.n	80049e0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80049a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6899      	ldr	r1, [r3, #8]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80049ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
 80049de:	e00f      	b.n	8004a00 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80049ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80049fe:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	7d5b      	ldrb	r3, [r3, #21]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	e007      	b.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a28:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	7d1b      	ldrb	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	e007      	b.n	8004a54 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a52:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d02e      	beq.n	8004aba <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d840      	bhi.n	8004ae2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d002      	beq.n	8004a6a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d014      	beq.n	8004a92 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004a68:	e03b      	b.n	8004ae2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a78:	f023 030f 	bic.w	r3, r3, #15
 8004a7c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6959      	ldr	r1, [r3, #20]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	615a      	str	r2, [r3, #20]
      break;
 8004a90:	e03b      	b.n	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004aa0:	f023 030f 	bic.w	r3, r3, #15
 8004aa4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6999      	ldr	r1, [r3, #24]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	619a      	str	r2, [r3, #24]
      break;
 8004ab8:	e027      	b.n	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ac8:	f023 030f 	bic.w	r3, r3, #15
 8004acc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69d9      	ldr	r1, [r3, #28]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	61da      	str	r2, [r3, #28]
      break;
 8004ae0:	e013      	b.n	8004b0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004af0:	f023 030f 	bic.w	r3, r3, #15
 8004af4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a19      	ldr	r1, [r3, #32]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	621a      	str	r2, [r3, #32]
      break;
 8004b08:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b0a:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d109      	bne.n	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b12      	cmp	r3, #18
 8004b1e:	d105      	bne.n	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10e      	bne.n	8004b54 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b11      	cmp	r3, #17
 8004b46:	d105      	bne.n	8004b54 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	000f0001 	.word	0x000f0001
 8004b70:	40012300 	.word	0x40012300
 8004b74:	40012000 	.word	0x40012000
 8004b78:	10000012 	.word	0x10000012

08004b7c <__NVIC_SetPriorityGrouping>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bae:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	60d3      	str	r3, [r2, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <__NVIC_GetPriorityGrouping>:
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <__NVIC_GetPriorityGrouping+0x18>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 0307 	and.w	r3, r3, #7
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_EnableIRQ>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db0b      	blt.n	8004c0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	4907      	ldr	r1, [pc, #28]	; (8004c18 <__NVIC_EnableIRQ+0x38>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2001      	movs	r0, #1
 8004c02:	fa00 f202 	lsl.w	r2, r0, r2
 8004c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000e100 	.word	0xe000e100

08004c1c <__NVIC_DisableIRQ>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	db12      	blt.n	8004c54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	f003 021f 	and.w	r2, r3, #31
 8004c34:	490a      	ldr	r1, [pc, #40]	; (8004c60 <__NVIC_DisableIRQ+0x44>)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c42:	3320      	adds	r3, #32
 8004c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c48:	f3bf 8f4f 	dsb	sy
}
 8004c4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c4e:	f3bf 8f6f 	isb	sy
}
 8004c52:	bf00      	nop
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000e100 	.word	0xe000e100

08004c64 <__NVIC_SetPriority>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	6039      	str	r1, [r7, #0]
 8004c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	db0a      	blt.n	8004c8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	490c      	ldr	r1, [pc, #48]	; (8004cb0 <__NVIC_SetPriority+0x4c>)
 8004c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c82:	0112      	lsls	r2, r2, #4
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	440b      	add	r3, r1
 8004c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c8c:	e00a      	b.n	8004ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	4908      	ldr	r1, [pc, #32]	; (8004cb4 <__NVIC_SetPriority+0x50>)
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	3b04      	subs	r3, #4
 8004c9c:	0112      	lsls	r2, r2, #4
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	761a      	strb	r2, [r3, #24]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	e000e100 	.word	0xe000e100
 8004cb4:	e000ed00 	.word	0xe000ed00

08004cb8 <NVIC_EncodePriority>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f1c3 0307 	rsb	r3, r3, #7
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	bf28      	it	cs
 8004cd6:	2304      	movcs	r3, #4
 8004cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d902      	bls.n	8004ce8 <NVIC_EncodePriority+0x30>
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3b03      	subs	r3, #3
 8004ce6:	e000      	b.n	8004cea <NVIC_EncodePriority+0x32>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cec:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d00:	f04f 31ff 	mov.w	r1, #4294967295
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	43d9      	mvns	r1, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d10:	4313      	orrs	r3, r2
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3724      	adds	r7, #36	; 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d30:	d301      	bcc.n	8004d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d32:	2301      	movs	r3, #1
 8004d34:	e00f      	b.n	8004d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d36:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <SysTick_Config+0x40>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d3e:	210f      	movs	r1, #15
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	f7ff ff8e 	bl	8004c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <SysTick_Config+0x40>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <SysTick_Config+0x40>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	e000e010 	.word	0xe000e010

08004d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff05 	bl	8004b7c <__NVIC_SetPriorityGrouping>
}
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	4603      	mov	r3, r0
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d8c:	f7ff ff1a 	bl	8004bc4 <__NVIC_GetPriorityGrouping>
 8004d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7ff ff8e 	bl	8004cb8 <NVIC_EncodePriority>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff ff5d 	bl	8004c64 <__NVIC_SetPriority>
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	4603      	mov	r3, r0
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff ff0d 	bl	8004be0 <__NVIC_EnableIRQ>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff ff1d 	bl	8004c1c <__NVIC_DisableIRQ>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff ff94 	bl	8004d20 <SysTick_Config>
 8004df8:	4603      	mov	r3, r0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7ff f90e 	bl	8004030 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e099      	b.n	8004f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e40:	e00f      	b.n	8004e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e42:	f7ff f8f5 	bl	8004030 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d908      	bls.n	8004e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e078      	b.n	8004f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e8      	bne.n	8004e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <HAL_DMA_Init+0x158>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d107      	bne.n	8004ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d117      	bne.n	8004f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00e      	beq.n	8004f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb01 	bl	8005510 <DMA_CheckFifoParam>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f22:	2301      	movs	r3, #1
 8004f24:	e016      	b.n	8004f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fab8 	bl	80054a4 <DMA_CalcBaseAndBitshift>
 8004f34:	4603      	mov	r3, r0
 8004f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	223f      	movs	r2, #63	; 0x3f
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	f010803f 	.word	0xf010803f

08004f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_DMA_Start_IT+0x26>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e040      	b.n	8005008 <HAL_DMA_Start_IT+0xa8>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d12f      	bne.n	8004ffa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fa4a 	bl	8005448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	223f      	movs	r2, #63	; 0x3f
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0216 	orr.w	r2, r2, #22
 8004fce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0208 	orr.w	r2, r2, #8
 8004fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e005      	b.n	8005006 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005002:	2302      	movs	r3, #2
 8005004:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800501e:	f7ff f807 	bl	8004030 <HAL_GetTick>
 8005022:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d008      	beq.n	8005042 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e052      	b.n	80050e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0216 	bic.w	r2, r2, #22
 8005050:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005060:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <HAL_DMA_Abort+0x62>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0208 	bic.w	r2, r2, #8
 8005080:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005092:	e013      	b.n	80050bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005094:	f7fe ffcc 	bl	8004030 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d90c      	bls.n	80050bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2203      	movs	r2, #3
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e015      	b.n	80050e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e4      	bne.n	8005094 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	223f      	movs	r2, #63	; 0x3f
 80050d0:	409a      	lsls	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d004      	beq.n	800510e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00c      	b.n	8005128 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2205      	movs	r2, #5
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005140:	4b8e      	ldr	r3, [pc, #568]	; (800537c <HAL_DMA_IRQHandler+0x248>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a8e      	ldr	r2, [pc, #568]	; (8005380 <HAL_DMA_IRQHandler+0x24c>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	0a9b      	lsrs	r3, r3, #10
 800514c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	2208      	movs	r2, #8
 8005160:	409a      	lsls	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01a      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0204 	bic.w	r2, r2, #4
 8005186:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	2208      	movs	r2, #8
 800518e:	409a      	lsls	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	f043 0201 	orr.w	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	2201      	movs	r2, #1
 80051a6:	409a      	lsls	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d012      	beq.n	80051d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	2201      	movs	r2, #1
 80051c4:	409a      	lsls	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	f043 0202 	orr.w	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	2204      	movs	r2, #4
 80051dc:	409a      	lsls	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d012      	beq.n	800520c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	2204      	movs	r2, #4
 80051fa:	409a      	lsls	r2, r3
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f043 0204 	orr.w	r2, r3, #4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	2210      	movs	r2, #16
 8005212:	409a      	lsls	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d043      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d03c      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	2210      	movs	r2, #16
 8005230:	409a      	lsls	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d018      	beq.n	8005276 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d024      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
 8005262:	e01f      	b.n	80052a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01b      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
 8005274:	e016      	b.n	80052a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d107      	bne.n	8005294 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0208 	bic.w	r2, r2, #8
 8005292:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a8:	2220      	movs	r2, #32
 80052aa:	409a      	lsls	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 808f 	beq.w	80053d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8087 	beq.w	80053d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	2220      	movs	r2, #32
 80052cc:	409a      	lsls	r2, r3
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d136      	bne.n	800534c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0216 	bic.w	r2, r2, #22
 80052ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <HAL_DMA_IRQHandler+0x1da>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0208 	bic.w	r2, r2, #8
 800531c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005322:	223f      	movs	r2, #63	; 0x3f
 8005324:	409a      	lsls	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	2b00      	cmp	r3, #0
 8005340:	d07e      	beq.n	8005440 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
        }
        return;
 800534a:	e079      	b.n	8005440 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01d      	beq.n	8005396 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	2b00      	cmp	r3, #0
 800536e:	d031      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
 8005378:	e02c      	b.n	80053d4 <HAL_DMA_IRQHandler+0x2a0>
 800537a:	bf00      	nop
 800537c:	2000004c 	.word	0x2000004c
 8005380:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d023      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
 8005394:	e01e      	b.n	80053d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10f      	bne.n	80053c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0210 	bic.w	r2, r2, #16
 80053b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d032      	beq.n	8005442 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d022      	beq.n	800542e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2205      	movs	r2, #5
 80053ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	3301      	adds	r3, #1
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	429a      	cmp	r2, r3
 800540a:	d307      	bcc.n	800541c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f2      	bne.n	8005400 <HAL_DMA_IRQHandler+0x2cc>
 800541a:	e000      	b.n	800541e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800541c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
 800543e:	e000      	b.n	8005442 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005440:	bf00      	nop
    }
  }
}
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d108      	bne.n	8005488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005486:	e007      	b.n	8005498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	3b10      	subs	r3, #16
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <DMA_CalcBaseAndBitshift+0x64>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054be:	4a13      	ldr	r2, [pc, #76]	; (800550c <DMA_CalcBaseAndBitshift+0x68>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d909      	bls.n	80054e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	1d1a      	adds	r2, r3, #4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	659a      	str	r2, [r3, #88]	; 0x58
 80054e4:	e007      	b.n	80054f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	aaaaaaab 	.word	0xaaaaaaab
 800550c:	0800de30 	.word	0x0800de30

08005510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11f      	bne.n	800556a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d856      	bhi.n	80055de <DMA_CheckFifoParam+0xce>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <DMA_CheckFifoParam+0x28>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	08005549 	.word	0x08005549
 800553c:	0800555b 	.word	0x0800555b
 8005540:	08005549 	.word	0x08005549
 8005544:	080055df 	.word	0x080055df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d046      	beq.n	80055e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005558:	e043      	b.n	80055e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005562:	d140      	bne.n	80055e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005568:	e03d      	b.n	80055e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005572:	d121      	bne.n	80055b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d837      	bhi.n	80055ea <DMA_CheckFifoParam+0xda>
 800557a:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <DMA_CheckFifoParam+0x70>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	08005591 	.word	0x08005591
 8005584:	08005597 	.word	0x08005597
 8005588:	08005591 	.word	0x08005591
 800558c:	080055a9 	.word	0x080055a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
      break;
 8005594:	e030      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d025      	beq.n	80055ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a6:	e022      	b.n	80055ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055b0:	d11f      	bne.n	80055f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055b6:	e01c      	b.n	80055f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d903      	bls.n	80055c6 <DMA_CheckFifoParam+0xb6>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d003      	beq.n	80055cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055c4:	e018      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ca:	e015      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      break;
 80055dc:	e00b      	b.n	80055f6 <DMA_CheckFifoParam+0xe6>
      break;
 80055de:	bf00      	nop
 80055e0:	e00a      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      break;
 80055e2:	bf00      	nop
 80055e4:	e008      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      break;
 80055e6:	bf00      	nop
 80055e8:	e006      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      break;
 80055ea:	bf00      	nop
 80055ec:	e004      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      break;
 80055ee:	bf00      	nop
 80055f0:	e002      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <DMA_CheckFifoParam+0xe8>
      break;
 80055f6:	bf00      	nop
    }
  } 
  
  return status; 
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop

08005608 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800561a:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <HAL_FLASH_Program+0xa0>)
 800561c:	7e1b      	ldrb	r3, [r3, #24]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_FLASH_Program+0x1e>
 8005622:	2302      	movs	r3, #2
 8005624:	e03b      	b.n	800569e <HAL_FLASH_Program+0x96>
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <HAL_FLASH_Program+0xa0>)
 8005628:	2201      	movs	r2, #1
 800562a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800562c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005630:	f000 f870 	bl	8005714 <FLASH_WaitForLastOperation>
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d12b      	bne.n	8005696 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005644:	783b      	ldrb	r3, [r7, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	68b8      	ldr	r0, [r7, #8]
 800564a:	f000 f91b 	bl	8005884 <FLASH_Program_Byte>
 800564e:	e016      	b.n	800567e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005656:	883b      	ldrh	r3, [r7, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	68b8      	ldr	r0, [r7, #8]
 800565c:	f000 f8ee 	bl	800583c <FLASH_Program_HalfWord>
 8005660:	e00d      	b.n	800567e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d105      	bne.n	8005674 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	68b8      	ldr	r0, [r7, #8]
 800566e:	f000 f8c3 	bl	80057f8 <FLASH_Program_Word>
 8005672:	e004      	b.n	800567e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005678:	68b8      	ldr	r0, [r7, #8]
 800567a:	f000 f88b 	bl	8005794 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800567e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005682:	f000 f847 	bl	8005714 <FLASH_WaitForLastOperation>
 8005686:	4603      	mov	r3, r0
 8005688:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_FLASH_Program+0xa4>)
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	4a07      	ldr	r2, [pc, #28]	; (80056ac <HAL_FLASH_Program+0xa4>)
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005696:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <HAL_FLASH_Program+0xa0>)
 8005698:	2200      	movs	r2, #0
 800569a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200006a0 	.word	0x200006a0
 80056ac:	40023c00 	.word	0x40023c00

080056b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_FLASH_Unlock+0x38>)
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da0b      	bge.n	80056da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_FLASH_Unlock+0x38>)
 80056c4:	4a09      	ldr	r2, [pc, #36]	; (80056ec <HAL_FLASH_Unlock+0x3c>)
 80056c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <HAL_FLASH_Unlock+0x38>)
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <HAL_FLASH_Unlock+0x40>)
 80056cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_FLASH_Unlock+0x38>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da01      	bge.n	80056da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056da:	79fb      	ldrb	r3, [r7, #7]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40023c00 	.word	0x40023c00
 80056ec:	45670123 	.word	0x45670123
 80056f0:	cdef89ab 	.word	0xcdef89ab

080056f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <HAL_FLASH_Lock+0x1c>)
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	4a04      	ldr	r2, [pc, #16]	; (8005710 <HAL_FLASH_Lock+0x1c>)
 80056fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005702:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40023c00 	.word	0x40023c00

08005714 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005720:	4b1a      	ldr	r3, [pc, #104]	; (800578c <FLASH_WaitForLastOperation+0x78>)
 8005722:	2200      	movs	r2, #0
 8005724:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005726:	f7fe fc83 	bl	8004030 <HAL_GetTick>
 800572a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800572c:	e010      	b.n	8005750 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d00c      	beq.n	8005750 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <FLASH_WaitForLastOperation+0x38>
 800573c:	f7fe fc78 	bl	8004030 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d201      	bcs.n	8005750 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e019      	b.n	8005784 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <FLASH_WaitForLastOperation+0x7c>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e8      	bne.n	800572e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <FLASH_WaitForLastOperation+0x7c>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <FLASH_WaitForLastOperation+0x7c>)
 800576a:	2201      	movs	r2, #1
 800576c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <FLASH_WaitForLastOperation+0x7c>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800577a:	f000 f8a5 	bl	80058c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
  
}  
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	200006a0 	.word	0x200006a0
 8005790:	40023c00 	.word	0x40023c00

08005794 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <FLASH_Program_DoubleWord+0x60>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <FLASH_Program_DoubleWord+0x60>)
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <FLASH_Program_DoubleWord+0x60>)
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <FLASH_Program_DoubleWord+0x60>)
 80057b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80057b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057b8:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <FLASH_Program_DoubleWord+0x60>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <FLASH_Program_DoubleWord+0x60>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80057ca:	f3bf 8f6f 	isb	sy
}
 80057ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80057d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	000a      	movs	r2, r1
 80057de:	2300      	movs	r3, #0
 80057e0:	68f9      	ldr	r1, [r7, #12]
 80057e2:	3104      	adds	r1, #4
 80057e4:	4613      	mov	r3, r2
 80057e6:	600b      	str	r3, [r1, #0]
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40023c00 	.word	0x40023c00

080057f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005802:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <FLASH_Program_Word+0x40>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <FLASH_Program_Word+0x40>)
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <FLASH_Program_Word+0x40>)
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <FLASH_Program_Word+0x40>)
 8005814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005818:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <FLASH_Program_Word+0x40>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4a06      	ldr	r2, [pc, #24]	; (8005838 <FLASH_Program_Word+0x40>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40023c00 	.word	0x40023c00

0800583c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	4a09      	ldr	r2, [pc, #36]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <FLASH_Program_HalfWord+0x44>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	801a      	strh	r2, [r3, #0]
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40023c00 	.word	0x40023c00

08005884 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005890:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <FLASH_Program_Byte+0x40>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <FLASH_Program_Byte+0x40>)
 8005896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800589c:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <FLASH_Program_Byte+0x40>)
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <FLASH_Program_Byte+0x40>)
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <FLASH_Program_Byte+0x40>)
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	4a06      	ldr	r2, [pc, #24]	; (80058c4 <FLASH_Program_Byte+0x40>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	701a      	strb	r2, [r3, #0]
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40023c00 	.word	0x40023c00

080058c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80058cc:	4b2f      	ldr	r3, [pc, #188]	; (800598c <FLASH_SetErrorCode+0xc4>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80058d8:	4b2d      	ldr	r3, [pc, #180]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f043 0310 	orr.w	r3, r3, #16
 80058e0:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 80058e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80058e4:	4b29      	ldr	r3, [pc, #164]	; (800598c <FLASH_SetErrorCode+0xc4>)
 80058e6:	2210      	movs	r2, #16
 80058e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80058ea:	4b28      	ldr	r3, [pc, #160]	; (800598c <FLASH_SetErrorCode+0xc4>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f043 0308 	orr.w	r3, r3, #8
 80058fe:	4a24      	ldr	r2, [pc, #144]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 8005900:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005902:	4b22      	ldr	r3, [pc, #136]	; (800598c <FLASH_SetErrorCode+0xc4>)
 8005904:	2220      	movs	r2, #32
 8005906:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <FLASH_SetErrorCode+0xc4>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005914:	4b1e      	ldr	r3, [pc, #120]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f043 0304 	orr.w	r3, r3, #4
 800591c:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 800591e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005920:	4b1a      	ldr	r3, [pc, #104]	; (800598c <FLASH_SetErrorCode+0xc4>)
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005926:	4b19      	ldr	r3, [pc, #100]	; (800598c <FLASH_SetErrorCode+0xc4>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005932:	4b17      	ldr	r3, [pc, #92]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f043 0302 	orr.w	r3, r3, #2
 800593a:	4a15      	ldr	r2, [pc, #84]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 800593c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <FLASH_SetErrorCode+0xc4>)
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005944:	4b11      	ldr	r3, [pc, #68]	; (800598c <FLASH_SetErrorCode+0xc4>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d009      	beq.n	8005964 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005950:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	4a0d      	ldr	r2, [pc, #52]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 800595a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <FLASH_SetErrorCode+0xc4>)
 800595e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005962:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <FLASH_SetErrorCode+0xc4>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f043 0320 	orr.w	r3, r3, #32
 8005978:	4a05      	ldr	r2, [pc, #20]	; (8005990 <FLASH_SetErrorCode+0xc8>)
 800597a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <FLASH_SetErrorCode+0xc4>)
 800597e:	2202      	movs	r2, #2
 8005980:	60da      	str	r2, [r3, #12]
  }
}
 8005982:	bf00      	nop
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40023c00 	.word	0x40023c00
 8005990:	200006a0 	.word	0x200006a0

08005994 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	e010      	b.n	80059d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d103      	bne.n	80059be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80059b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e009      	b.n	80059d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d103      	bne.n	80059cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80059c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e002      	b.n	80059d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80059cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 80059d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	490f      	ldr	r1, [pc, #60]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80059ea:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 80059f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	4313      	orrs	r3, r2
 8005a00:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 8005a02:	f043 0302 	orr.w	r3, r3, #2
 8005a06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <FLASH_Erase_Sector+0x8c>)
 8005a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a12:	6113      	str	r3, [r2, #16]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40023c00 	.word	0x40023c00

08005a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e165      	b.n	8005d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a40:	2201      	movs	r2, #1
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4013      	ands	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	f040 8154 	bne.w	8005d06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d005      	beq.n	8005a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d130      	bne.n	8005ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	2203      	movs	r2, #3
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005aac:	2201      	movs	r2, #1
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	f003 0201 	and.w	r2, r3, #1
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d017      	beq.n	8005b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	2203      	movs	r2, #3
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d123      	bne.n	8005b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	08da      	lsrs	r2, r3, #3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3208      	adds	r2, #8
 8005b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	220f      	movs	r2, #15
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	08da      	lsrs	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3208      	adds	r2, #8
 8005b62:	69b9      	ldr	r1, [r7, #24]
 8005b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	2203      	movs	r2, #3
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 0203 	and.w	r2, r3, #3
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80ae 	beq.w	8005d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	4b5d      	ldr	r3, [pc, #372]	; (8005d24 <HAL_GPIO_Init+0x300>)
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	4a5c      	ldr	r2, [pc, #368]	; (8005d24 <HAL_GPIO_Init+0x300>)
 8005bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bba:	4b5a      	ldr	r3, [pc, #360]	; (8005d24 <HAL_GPIO_Init+0x300>)
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bc6:	4a58      	ldr	r2, [pc, #352]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	089b      	lsrs	r3, r3, #2
 8005bcc:	3302      	adds	r3, #2
 8005bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	220f      	movs	r2, #15
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a4f      	ldr	r2, [pc, #316]	; (8005d2c <HAL_GPIO_Init+0x308>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d025      	beq.n	8005c3e <HAL_GPIO_Init+0x21a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a4e      	ldr	r2, [pc, #312]	; (8005d30 <HAL_GPIO_Init+0x30c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01f      	beq.n	8005c3a <HAL_GPIO_Init+0x216>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a4d      	ldr	r2, [pc, #308]	; (8005d34 <HAL_GPIO_Init+0x310>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d019      	beq.n	8005c36 <HAL_GPIO_Init+0x212>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a4c      	ldr	r2, [pc, #304]	; (8005d38 <HAL_GPIO_Init+0x314>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_GPIO_Init+0x20e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a4b      	ldr	r2, [pc, #300]	; (8005d3c <HAL_GPIO_Init+0x318>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00d      	beq.n	8005c2e <HAL_GPIO_Init+0x20a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a4a      	ldr	r2, [pc, #296]	; (8005d40 <HAL_GPIO_Init+0x31c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <HAL_GPIO_Init+0x206>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a49      	ldr	r2, [pc, #292]	; (8005d44 <HAL_GPIO_Init+0x320>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <HAL_GPIO_Init+0x202>
 8005c22:	2306      	movs	r3, #6
 8005c24:	e00c      	b.n	8005c40 <HAL_GPIO_Init+0x21c>
 8005c26:	2307      	movs	r3, #7
 8005c28:	e00a      	b.n	8005c40 <HAL_GPIO_Init+0x21c>
 8005c2a:	2305      	movs	r3, #5
 8005c2c:	e008      	b.n	8005c40 <HAL_GPIO_Init+0x21c>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e006      	b.n	8005c40 <HAL_GPIO_Init+0x21c>
 8005c32:	2303      	movs	r3, #3
 8005c34:	e004      	b.n	8005c40 <HAL_GPIO_Init+0x21c>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e002      	b.n	8005c40 <HAL_GPIO_Init+0x21c>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <HAL_GPIO_Init+0x21c>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	f002 0203 	and.w	r2, r2, #3
 8005c46:	0092      	lsls	r2, r2, #2
 8005c48:	4093      	lsls	r3, r2
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c50:	4935      	ldr	r1, [pc, #212]	; (8005d28 <HAL_GPIO_Init+0x304>)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	089b      	lsrs	r3, r3, #2
 8005c56:	3302      	adds	r3, #2
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c82:	4a31      	ldr	r2, [pc, #196]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c88:	4b2f      	ldr	r3, [pc, #188]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cac:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cb2:	4b25      	ldr	r3, [pc, #148]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d00:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <HAL_GPIO_Init+0x324>)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	f67f ae96 	bls.w	8005a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	3724      	adds	r7, #36	; 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40013800 	.word	0x40013800
 8005d2c:	40020000 	.word	0x40020000
 8005d30:	40020400 	.word	0x40020400
 8005d34:	40020800 	.word	0x40020800
 8005d38:	40020c00 	.word	0x40020c00
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	40021400 	.word	0x40021400
 8005d44:	40021800 	.word	0x40021800
 8005d48:	40013c00 	.word	0x40013c00

08005d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	e001      	b.n	8005d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	807b      	strh	r3, [r7, #2]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d8c:	787b      	ldrb	r3, [r7, #1]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d98:	e003      	b.n	8005da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d9a:	887b      	ldrh	r3, [r7, #2]
 8005d9c:	041a      	lsls	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	619a      	str	r2, [r3, #24]
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dc0:	887a      	ldrh	r2, [r7, #2]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	041a      	lsls	r2, r3, #16
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	43d9      	mvns	r1, r3
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	400b      	ands	r3, r1
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	619a      	str	r2, [r3, #24]
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d006      	beq.n	8005e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dfa:	4a05      	ldr	r2, [pc, #20]	; (8005e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fd fad4 	bl	80033b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40013c00 	.word	0x40013c00

08005e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e40:	f7fe f8f6 	bl	8004030 <HAL_GetTick>
 8005e44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e46:	e009      	b.n	8005e5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e48:	f7fe f8f2 	bl	8004030 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e56:	d901      	bls.n	8005e5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e01f      	b.n	8005e9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <HAL_PWREx_EnableOverDrive+0x98>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d1ee      	bne.n	8005e48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e70:	f7fe f8de 	bl	8004030 <HAL_GetTick>
 8005e74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e76:	e009      	b.n	8005e8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e78:	f7fe f8da 	bl	8004030 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e86:	d901      	bls.n	8005e8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e007      	b.n	8005e9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <HAL_PWREx_EnableOverDrive+0x98>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e98:	d1ee      	bne.n	8005e78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	420e0040 	.word	0x420e0040
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	420e0044 	.word	0x420e0044

08005eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0cc      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b68      	ldr	r3, [pc, #416]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d90c      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b65      	ldr	r3, [pc, #404]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b63      	ldr	r3, [pc, #396]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0b8      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d020      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f08:	4b59      	ldr	r3, [pc, #356]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4a58      	ldr	r2, [pc, #352]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f20:	4b53      	ldr	r3, [pc, #332]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4a52      	ldr	r2, [pc, #328]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f2c:	4b50      	ldr	r3, [pc, #320]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	494d      	ldr	r1, [pc, #308]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d044      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	4b47      	ldr	r3, [pc, #284]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d119      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d003      	beq.n	8005f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f72:	4b3f      	ldr	r3, [pc, #252]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e06f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f82:	4b3b      	ldr	r3, [pc, #236]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e067      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f92:	4b37      	ldr	r3, [pc, #220]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f023 0203 	bic.w	r2, r3, #3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4934      	ldr	r1, [pc, #208]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa4:	f7fe f844 	bl	8004030 <HAL_GetTick>
 8005fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fac:	f7fe f840 	bl	8004030 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e04f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc2:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 020c 	and.w	r2, r3, #12
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d1eb      	bne.n	8005fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd4:	4b25      	ldr	r3, [pc, #148]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d20c      	bcs.n	8005ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e032      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006008:	4b19      	ldr	r3, [pc, #100]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4916      	ldr	r1, [pc, #88]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006026:	4b12      	ldr	r3, [pc, #72]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	490e      	ldr	r1, [pc, #56]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800603a:	f000 f855 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 800603e:	4602      	mov	r2, r0
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	490a      	ldr	r1, [pc, #40]	; (8006074 <HAL_RCC_ClockConfig+0x1c0>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <HAL_RCC_ClockConfig+0x1c4>)
 8006054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <HAL_RCC_ClockConfig+0x1c8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fd ffa4 	bl	8003fa8 <HAL_InitTick>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40023c00 	.word	0x40023c00
 8006070:	40023800 	.word	0x40023800
 8006074:	0800de18 	.word	0x0800de18
 8006078:	2000004c 	.word	0x2000004c
 800607c:	20000050 	.word	0x20000050

08006080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006084:	4b03      	ldr	r3, [pc, #12]	; (8006094 <HAL_RCC_GetHCLKFreq+0x14>)
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	2000004c 	.word	0x2000004c

08006098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800609c:	f7ff fff0 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	0a9b      	lsrs	r3, r3, #10
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4903      	ldr	r1, [pc, #12]	; (80060bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40023800 	.word	0x40023800
 80060bc:	0800de28 	.word	0x0800de28

080060c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060c4:	f7ff ffdc 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	0b5b      	lsrs	r3, r3, #13
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4903      	ldr	r1, [pc, #12]	; (80060e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060d6:	5ccb      	ldrb	r3, [r1, r3]
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40023800 	.word	0x40023800
 80060e4:	0800de28 	.word	0x0800de28

080060e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ec:	b0ae      	sub	sp, #184	; 0xb8
 80060ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800610e:	4bcb      	ldr	r3, [pc, #812]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b0c      	cmp	r3, #12
 8006118:	f200 8206 	bhi.w	8006528 <HAL_RCC_GetSysClockFreq+0x440>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006159 	.word	0x08006159
 8006128:	08006529 	.word	0x08006529
 800612c:	08006529 	.word	0x08006529
 8006130:	08006529 	.word	0x08006529
 8006134:	08006161 	.word	0x08006161
 8006138:	08006529 	.word	0x08006529
 800613c:	08006529 	.word	0x08006529
 8006140:	08006529 	.word	0x08006529
 8006144:	08006169 	.word	0x08006169
 8006148:	08006529 	.word	0x08006529
 800614c:	08006529 	.word	0x08006529
 8006150:	08006529 	.word	0x08006529
 8006154:	08006359 	.word	0x08006359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006158:	4bb9      	ldr	r3, [pc, #740]	; (8006440 <HAL_RCC_GetSysClockFreq+0x358>)
 800615a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800615e:	e1e7      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006160:	4bb8      	ldr	r3, [pc, #736]	; (8006444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006166:	e1e3      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006168:	4bb4      	ldr	r3, [pc, #720]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006174:	4bb1      	ldr	r3, [pc, #708]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d071      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006180:	4bae      	ldr	r3, [pc, #696]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	099b      	lsrs	r3, r3, #6
 8006186:	2200      	movs	r2, #0
 8006188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800618c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061a6:	4622      	mov	r2, r4
 80061a8:	462b      	mov	r3, r5
 80061aa:	f04f 0000 	mov.w	r0, #0
 80061ae:	f04f 0100 	mov.w	r1, #0
 80061b2:	0159      	lsls	r1, r3, #5
 80061b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061b8:	0150      	lsls	r0, r2, #5
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4621      	mov	r1, r4
 80061c0:	1a51      	subs	r1, r2, r1
 80061c2:	6439      	str	r1, [r7, #64]	; 0x40
 80061c4:	4629      	mov	r1, r5
 80061c6:	eb63 0301 	sbc.w	r3, r3, r1
 80061ca:	647b      	str	r3, [r7, #68]	; 0x44
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80061d8:	4649      	mov	r1, r9
 80061da:	018b      	lsls	r3, r1, #6
 80061dc:	4641      	mov	r1, r8
 80061de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061e2:	4641      	mov	r1, r8
 80061e4:	018a      	lsls	r2, r1, #6
 80061e6:	4641      	mov	r1, r8
 80061e8:	1a51      	subs	r1, r2, r1
 80061ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80061ec:	4649      	mov	r1, r9
 80061ee:	eb63 0301 	sbc.w	r3, r3, r1
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006200:	4649      	mov	r1, r9
 8006202:	00cb      	lsls	r3, r1, #3
 8006204:	4641      	mov	r1, r8
 8006206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800620a:	4641      	mov	r1, r8
 800620c:	00ca      	lsls	r2, r1, #3
 800620e:	4610      	mov	r0, r2
 8006210:	4619      	mov	r1, r3
 8006212:	4603      	mov	r3, r0
 8006214:	4622      	mov	r2, r4
 8006216:	189b      	adds	r3, r3, r2
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
 800621a:	462b      	mov	r3, r5
 800621c:	460a      	mov	r2, r1
 800621e:	eb42 0303 	adc.w	r3, r2, r3
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006230:	4629      	mov	r1, r5
 8006232:	024b      	lsls	r3, r1, #9
 8006234:	4621      	mov	r1, r4
 8006236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800623a:	4621      	mov	r1, r4
 800623c:	024a      	lsls	r2, r1, #9
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006246:	2200      	movs	r2, #0
 8006248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800624c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006254:	f7fa fd18 	bl	8000c88 <__aeabi_uldivmod>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4613      	mov	r3, r2
 800625e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006262:	e067      	b.n	8006334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006264:	4b75      	ldr	r3, [pc, #468]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	099b      	lsrs	r3, r3, #6
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006270:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627c:	67bb      	str	r3, [r7, #120]	; 0x78
 800627e:	2300      	movs	r3, #0
 8006280:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006286:	4622      	mov	r2, r4
 8006288:	462b      	mov	r3, r5
 800628a:	f04f 0000 	mov.w	r0, #0
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	0159      	lsls	r1, r3, #5
 8006294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006298:	0150      	lsls	r0, r2, #5
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4621      	mov	r1, r4
 80062a0:	1a51      	subs	r1, r2, r1
 80062a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80062a4:	4629      	mov	r1, r5
 80062a6:	eb63 0301 	sbc.w	r3, r3, r1
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80062b8:	4649      	mov	r1, r9
 80062ba:	018b      	lsls	r3, r1, #6
 80062bc:	4641      	mov	r1, r8
 80062be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062c2:	4641      	mov	r1, r8
 80062c4:	018a      	lsls	r2, r1, #6
 80062c6:	4641      	mov	r1, r8
 80062c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80062cc:	4649      	mov	r1, r9
 80062ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062e6:	4692      	mov	sl, r2
 80062e8:	469b      	mov	fp, r3
 80062ea:	4623      	mov	r3, r4
 80062ec:	eb1a 0303 	adds.w	r3, sl, r3
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	462b      	mov	r3, r5
 80062f4:	eb4b 0303 	adc.w	r3, fp, r3
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006306:	4629      	mov	r1, r5
 8006308:	028b      	lsls	r3, r1, #10
 800630a:	4621      	mov	r1, r4
 800630c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006310:	4621      	mov	r1, r4
 8006312:	028a      	lsls	r2, r1, #10
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800631c:	2200      	movs	r2, #0
 800631e:	673b      	str	r3, [r7, #112]	; 0x70
 8006320:	677a      	str	r2, [r7, #116]	; 0x74
 8006322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006326:	f7fa fcaf 	bl	8000c88 <__aeabi_uldivmod>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4613      	mov	r3, r2
 8006330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006334:	4b41      	ldr	r3, [pc, #260]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	3301      	adds	r3, #1
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800634a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800634e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006356:	e0eb      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006358:	4b38      	ldr	r3, [pc, #224]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d06b      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006370:	4b32      	ldr	r3, [pc, #200]	; (800643c <HAL_RCC_GetSysClockFreq+0x354>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	099b      	lsrs	r3, r3, #6
 8006376:	2200      	movs	r2, #0
 8006378:	66bb      	str	r3, [r7, #104]	; 0x68
 800637a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800637c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	663b      	str	r3, [r7, #96]	; 0x60
 8006384:	2300      	movs	r3, #0
 8006386:	667b      	str	r3, [r7, #100]	; 0x64
 8006388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800638c:	4622      	mov	r2, r4
 800638e:	462b      	mov	r3, r5
 8006390:	f04f 0000 	mov.w	r0, #0
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	0159      	lsls	r1, r3, #5
 800639a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800639e:	0150      	lsls	r0, r2, #5
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4621      	mov	r1, r4
 80063a6:	1a51      	subs	r1, r2, r1
 80063a8:	61b9      	str	r1, [r7, #24]
 80063aa:	4629      	mov	r1, r5
 80063ac:	eb63 0301 	sbc.w	r3, r3, r1
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80063be:	4659      	mov	r1, fp
 80063c0:	018b      	lsls	r3, r1, #6
 80063c2:	4651      	mov	r1, sl
 80063c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063c8:	4651      	mov	r1, sl
 80063ca:	018a      	lsls	r2, r1, #6
 80063cc:	4651      	mov	r1, sl
 80063ce:	ebb2 0801 	subs.w	r8, r2, r1
 80063d2:	4659      	mov	r1, fp
 80063d4:	eb63 0901 	sbc.w	r9, r3, r1
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ec:	4690      	mov	r8, r2
 80063ee:	4699      	mov	r9, r3
 80063f0:	4623      	mov	r3, r4
 80063f2:	eb18 0303 	adds.w	r3, r8, r3
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	462b      	mov	r3, r5
 80063fa:	eb49 0303 	adc.w	r3, r9, r3
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800640c:	4629      	mov	r1, r5
 800640e:	024b      	lsls	r3, r1, #9
 8006410:	4621      	mov	r1, r4
 8006412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006416:	4621      	mov	r1, r4
 8006418:	024a      	lsls	r2, r1, #9
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006422:	2200      	movs	r2, #0
 8006424:	65bb      	str	r3, [r7, #88]	; 0x58
 8006426:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800642c:	f7fa fc2c 	bl	8000c88 <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4613      	mov	r3, r2
 8006436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800643a:	e065      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x420>
 800643c:	40023800 	.word	0x40023800
 8006440:	00f42400 	.word	0x00f42400
 8006444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006448:	4b3d      	ldr	r3, [pc, #244]	; (8006540 <HAL_RCC_GetSysClockFreq+0x458>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	099b      	lsrs	r3, r3, #6
 800644e:	2200      	movs	r2, #0
 8006450:	4618      	mov	r0, r3
 8006452:	4611      	mov	r1, r2
 8006454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006458:	653b      	str	r3, [r7, #80]	; 0x50
 800645a:	2300      	movs	r3, #0
 800645c:	657b      	str	r3, [r7, #84]	; 0x54
 800645e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006462:	4642      	mov	r2, r8
 8006464:	464b      	mov	r3, r9
 8006466:	f04f 0000 	mov.w	r0, #0
 800646a:	f04f 0100 	mov.w	r1, #0
 800646e:	0159      	lsls	r1, r3, #5
 8006470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006474:	0150      	lsls	r0, r2, #5
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4641      	mov	r1, r8
 800647c:	1a51      	subs	r1, r2, r1
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	4649      	mov	r1, r9
 8006482:	eb63 0301 	sbc.w	r3, r3, r1
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006494:	4659      	mov	r1, fp
 8006496:	018b      	lsls	r3, r1, #6
 8006498:	4651      	mov	r1, sl
 800649a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800649e:	4651      	mov	r1, sl
 80064a0:	018a      	lsls	r2, r1, #6
 80064a2:	4651      	mov	r1, sl
 80064a4:	1a54      	subs	r4, r2, r1
 80064a6:	4659      	mov	r1, fp
 80064a8:	eb63 0501 	sbc.w	r5, r3, r1
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	00eb      	lsls	r3, r5, #3
 80064b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ba:	00e2      	lsls	r2, r4, #3
 80064bc:	4614      	mov	r4, r2
 80064be:	461d      	mov	r5, r3
 80064c0:	4643      	mov	r3, r8
 80064c2:	18e3      	adds	r3, r4, r3
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	464b      	mov	r3, r9
 80064c8:	eb45 0303 	adc.w	r3, r5, r3
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064da:	4629      	mov	r1, r5
 80064dc:	028b      	lsls	r3, r1, #10
 80064de:	4621      	mov	r1, r4
 80064e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064e4:	4621      	mov	r1, r4
 80064e6:	028a      	lsls	r2, r1, #10
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064f0:	2200      	movs	r2, #0
 80064f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80064f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064fa:	f7fa fbc5 	bl	8000c88 <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4613      	mov	r3, r2
 8006504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006508:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <HAL_RCC_GetSysClockFreq+0x458>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	0f1b      	lsrs	r3, r3, #28
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800651a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006526:	e003      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006528:	4b06      	ldr	r3, [pc, #24]	; (8006544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800652a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800652e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006534:	4618      	mov	r0, r3
 8006536:	37b8      	adds	r7, #184	; 0xb8
 8006538:	46bd      	mov	sp, r7
 800653a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653e:	bf00      	nop
 8006540:	40023800 	.word	0x40023800
 8006544:	00f42400 	.word	0x00f42400

08006548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e28d      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8083 	beq.w	800666e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006568:	4b94      	ldr	r3, [pc, #592]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b04      	cmp	r3, #4
 8006572:	d019      	beq.n	80065a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006574:	4b91      	ldr	r3, [pc, #580]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800657c:	2b08      	cmp	r3, #8
 800657e:	d106      	bne.n	800658e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006580:	4b8e      	ldr	r3, [pc, #568]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658c:	d00c      	beq.n	80065a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800658e:	4b8b      	ldr	r3, [pc, #556]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d112      	bne.n	80065c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800659a:	4b88      	ldr	r3, [pc, #544]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a6:	d10b      	bne.n	80065c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a8:	4b84      	ldr	r3, [pc, #528]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d05b      	beq.n	800666c <HAL_RCC_OscConfig+0x124>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d157      	bne.n	800666c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e25a      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c8:	d106      	bne.n	80065d8 <HAL_RCC_OscConfig+0x90>
 80065ca:	4b7c      	ldr	r3, [pc, #496]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a7b      	ldr	r2, [pc, #492]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	e01d      	b.n	8006614 <HAL_RCC_OscConfig+0xcc>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e0:	d10c      	bne.n	80065fc <HAL_RCC_OscConfig+0xb4>
 80065e2:	4b76      	ldr	r3, [pc, #472]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a75      	ldr	r2, [pc, #468]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4b73      	ldr	r3, [pc, #460]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a72      	ldr	r2, [pc, #456]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e00b      	b.n	8006614 <HAL_RCC_OscConfig+0xcc>
 80065fc:	4b6f      	ldr	r3, [pc, #444]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6e      	ldr	r2, [pc, #440]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	4b6c      	ldr	r3, [pc, #432]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6b      	ldr	r2, [pc, #428]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 800660e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d013      	beq.n	8006644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fd fd08 	bl	8004030 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006624:	f7fd fd04 	bl	8004030 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b64      	cmp	r3, #100	; 0x64
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e21f      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006636:	4b61      	ldr	r3, [pc, #388]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0xdc>
 8006642:	e014      	b.n	800666e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006644:	f7fd fcf4 	bl	8004030 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800664c:	f7fd fcf0 	bl	8004030 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b64      	cmp	r3, #100	; 0x64
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e20b      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800665e:	4b57      	ldr	r3, [pc, #348]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x104>
 800666a:	e000      	b.n	800666e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800666c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d06f      	beq.n	800675a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800667a:	4b50      	ldr	r3, [pc, #320]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b00      	cmp	r3, #0
 8006684:	d017      	beq.n	80066b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006686:	4b4d      	ldr	r3, [pc, #308]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800668e:	2b08      	cmp	r3, #8
 8006690:	d105      	bne.n	800669e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006692:	4b4a      	ldr	r3, [pc, #296]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800669e:	4b47      	ldr	r3, [pc, #284]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80066a6:	2b0c      	cmp	r3, #12
 80066a8:	d11c      	bne.n	80066e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066aa:	4b44      	ldr	r3, [pc, #272]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d116      	bne.n	80066e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b6:	4b41      	ldr	r3, [pc, #260]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <HAL_RCC_OscConfig+0x186>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d001      	beq.n	80066ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e1d3      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ce:	4b3b      	ldr	r3, [pc, #236]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4937      	ldr	r1, [pc, #220]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e2:	e03a      	b.n	800675a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d020      	beq.n	800672e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066ec:	4b34      	ldr	r3, [pc, #208]	; (80067c0 <HAL_RCC_OscConfig+0x278>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f2:	f7fd fc9d 	bl	8004030 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066fa:	f7fd fc99 	bl	8004030 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e1b4      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670c:	4b2b      	ldr	r3, [pc, #172]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0f0      	beq.n	80066fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006718:	4b28      	ldr	r3, [pc, #160]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4925      	ldr	r1, [pc, #148]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006728:	4313      	orrs	r3, r2
 800672a:	600b      	str	r3, [r1, #0]
 800672c:	e015      	b.n	800675a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <HAL_RCC_OscConfig+0x278>)
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fd fc7c 	bl	8004030 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800673c:	f7fd fc78 	bl	8004030 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e193      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674e:	4b1b      	ldr	r3, [pc, #108]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d036      	beq.n	80067d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d016      	beq.n	800679c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800676e:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <HAL_RCC_OscConfig+0x27c>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fd fc5c 	bl	8004030 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800677c:	f7fd fc58 	bl	8004030 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e173      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800678e:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_RCC_OscConfig+0x274>)
 8006790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x234>
 800679a:	e01b      	b.n	80067d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <HAL_RCC_OscConfig+0x27c>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a2:	f7fd fc45 	bl	8004030 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a8:	e00e      	b.n	80067c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fd fc41 	bl	8004030 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d907      	bls.n	80067c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e15c      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
 80067bc:	40023800 	.word	0x40023800
 80067c0:	42470000 	.word	0x42470000
 80067c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c8:	4b8a      	ldr	r3, [pc, #552]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80067ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ea      	bne.n	80067aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8097 	beq.w	8006910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e6:	4b83      	ldr	r3, [pc, #524]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10f      	bne.n	8006812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	4b7f      	ldr	r3, [pc, #508]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	4a7e      	ldr	r2, [pc, #504]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	; 0x40
 8006802:	4b7c      	ldr	r3, [pc, #496]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006812:	4b79      	ldr	r3, [pc, #484]	; (80069f8 <HAL_RCC_OscConfig+0x4b0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d118      	bne.n	8006850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800681e:	4b76      	ldr	r3, [pc, #472]	; (80069f8 <HAL_RCC_OscConfig+0x4b0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a75      	ldr	r2, [pc, #468]	; (80069f8 <HAL_RCC_OscConfig+0x4b0>)
 8006824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800682a:	f7fd fc01 	bl	8004030 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006832:	f7fd fbfd 	bl	8004030 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e118      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006844:	4b6c      	ldr	r3, [pc, #432]	; (80069f8 <HAL_RCC_OscConfig+0x4b0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0f0      	beq.n	8006832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d106      	bne.n	8006866 <HAL_RCC_OscConfig+0x31e>
 8006858:	4b66      	ldr	r3, [pc, #408]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	4a65      	ldr	r2, [pc, #404]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6713      	str	r3, [r2, #112]	; 0x70
 8006864:	e01c      	b.n	80068a0 <HAL_RCC_OscConfig+0x358>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2b05      	cmp	r3, #5
 800686c:	d10c      	bne.n	8006888 <HAL_RCC_OscConfig+0x340>
 800686e:	4b61      	ldr	r3, [pc, #388]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006872:	4a60      	ldr	r2, [pc, #384]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006874:	f043 0304 	orr.w	r3, r3, #4
 8006878:	6713      	str	r3, [r2, #112]	; 0x70
 800687a:	4b5e      	ldr	r3, [pc, #376]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	4a5d      	ldr	r2, [pc, #372]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6713      	str	r3, [r2, #112]	; 0x70
 8006886:	e00b      	b.n	80068a0 <HAL_RCC_OscConfig+0x358>
 8006888:	4b5a      	ldr	r3, [pc, #360]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	4a59      	ldr	r2, [pc, #356]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	6713      	str	r3, [r2, #112]	; 0x70
 8006894:	4b57      	ldr	r3, [pc, #348]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	4a56      	ldr	r2, [pc, #344]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800689a:	f023 0304 	bic.w	r3, r3, #4
 800689e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a8:	f7fd fbc2 	bl	8004030 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ae:	e00a      	b.n	80068c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b0:	f7fd fbbe 	bl	8004030 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80068be:	4293      	cmp	r3, r2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e0d7      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c6:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0ee      	beq.n	80068b0 <HAL_RCC_OscConfig+0x368>
 80068d2:	e014      	b.n	80068fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d4:	f7fd fbac 	bl	8004030 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068dc:	f7fd fba8 	bl	8004030 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e0c1      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f2:	4b40      	ldr	r3, [pc, #256]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1ee      	bne.n	80068dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d105      	bne.n	8006910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006904:	4b3b      	ldr	r3, [pc, #236]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	4a3a      	ldr	r2, [pc, #232]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800690a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800690e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80ad 	beq.w	8006a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800691a:	4b36      	ldr	r3, [pc, #216]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b08      	cmp	r3, #8
 8006924:	d060      	beq.n	80069e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d145      	bne.n	80069ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692e:	4b33      	ldr	r3, [pc, #204]	; (80069fc <HAL_RCC_OscConfig+0x4b4>)
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006934:	f7fd fb7c 	bl	8004030 <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800693c:	f7fd fb78 	bl	8004030 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e093      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694e:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	071b      	lsls	r3, r3, #28
 8006986:	491b      	ldr	r1, [pc, #108]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 8006988:	4313      	orrs	r3, r2
 800698a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <HAL_RCC_OscConfig+0x4b4>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fd fb4d 	bl	8004030 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800699a:	f7fd fb49 	bl	8004030 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e064      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ac:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x452>
 80069b8:	e05c      	b.n	8006a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <HAL_RCC_OscConfig+0x4b4>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fd fb36 	bl	8004030 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fd fb32 	bl	8004030 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e04d      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069da:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <HAL_RCC_OscConfig+0x4ac>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x480>
 80069e6:	e045      	b.n	8006a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d107      	bne.n	8006a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e040      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40007000 	.word	0x40007000
 80069fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a00:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <HAL_RCC_OscConfig+0x538>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d030      	beq.n	8006a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d129      	bne.n	8006a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d122      	bne.n	8006a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a30:	4013      	ands	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d119      	bne.n	8006a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d10f      	bne.n	8006a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d107      	bne.n	8006a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800

08006a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e041      	b.n	8006b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fc fe34 	bl	8003718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f001 f9b4 	bl	8007e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d001      	beq.n	8006b3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e046      	b.n	8006bca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a23      	ldr	r2, [pc, #140]	; (8006bd8 <HAL_TIM_Base_Start+0xb4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d022      	beq.n	8006b94 <HAL_TIM_Base_Start+0x70>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b56:	d01d      	beq.n	8006b94 <HAL_TIM_Base_Start+0x70>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	; (8006bdc <HAL_TIM_Base_Start+0xb8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d018      	beq.n	8006b94 <HAL_TIM_Base_Start+0x70>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <HAL_TIM_Base_Start+0xbc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <HAL_TIM_Base_Start+0x70>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <HAL_TIM_Base_Start+0xc0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <HAL_TIM_Base_Start+0x70>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_TIM_Base_Start+0xc4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <HAL_TIM_Base_Start+0x70>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a19      	ldr	r2, [pc, #100]	; (8006bec <HAL_TIM_Base_Start+0xc8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <HAL_TIM_Base_Start+0x70>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <HAL_TIM_Base_Start+0xcc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d111      	bne.n	8006bb8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b06      	cmp	r3, #6
 8006ba4:	d010      	beq.n	8006bc8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 0201 	orr.w	r2, r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb6:	e007      	b.n	8006bc8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40010400 	.word	0x40010400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40001800 	.word	0x40001800

08006bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e041      	b.n	8006c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f839 	bl	8006c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f001 f8fc 	bl	8007e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d109      	bne.n	8006ccc <HAL_TIM_PWM_Start+0x24>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	e022      	b.n	8006d12 <HAL_TIM_PWM_Start+0x6a>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d109      	bne.n	8006ce6 <HAL_TIM_PWM_Start+0x3e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	bf14      	ite	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	2300      	moveq	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	e015      	b.n	8006d12 <HAL_TIM_PWM_Start+0x6a>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d109      	bne.n	8006d00 <HAL_TIM_PWM_Start+0x58>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	bf14      	ite	ne
 8006cf8:	2301      	movne	r3, #1
 8006cfa:	2300      	moveq	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	e008      	b.n	8006d12 <HAL_TIM_PWM_Start+0x6a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e07c      	b.n	8006e14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <HAL_TIM_PWM_Start+0x82>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d28:	e013      	b.n	8006d52 <HAL_TIM_PWM_Start+0xaa>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d104      	bne.n	8006d3a <HAL_TIM_PWM_Start+0x92>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d38:	e00b      	b.n	8006d52 <HAL_TIM_PWM_Start+0xaa>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d104      	bne.n	8006d4a <HAL_TIM_PWM_Start+0xa2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d48:	e003      	b.n	8006d52 <HAL_TIM_PWM_Start+0xaa>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2201      	movs	r2, #1
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fc7c 	bl	8008658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2d      	ldr	r2, [pc, #180]	; (8006e1c <HAL_TIM_PWM_Start+0x174>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIM_PWM_Start+0xcc>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2c      	ldr	r2, [pc, #176]	; (8006e20 <HAL_TIM_PWM_Start+0x178>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d101      	bne.n	8006d78 <HAL_TIM_PWM_Start+0xd0>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <HAL_TIM_PWM_Start+0xd2>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a22      	ldr	r2, [pc, #136]	; (8006e1c <HAL_TIM_PWM_Start+0x174>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_TIM_PWM_Start+0x136>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d01d      	beq.n	8006dde <HAL_TIM_PWM_Start+0x136>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1f      	ldr	r2, [pc, #124]	; (8006e24 <HAL_TIM_PWM_Start+0x17c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_TIM_PWM_Start+0x136>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	; (8006e28 <HAL_TIM_PWM_Start+0x180>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_TIM_PWM_Start+0x136>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <HAL_TIM_PWM_Start+0x184>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIM_PWM_Start+0x136>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a16      	ldr	r2, [pc, #88]	; (8006e20 <HAL_TIM_PWM_Start+0x178>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_TIM_PWM_Start+0x136>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIM_PWM_Start+0x188>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIM_PWM_Start+0x136>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_TIM_PWM_Start+0x18c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d111      	bne.n	8006e02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	d010      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e00:	e007      	b.n	8006e12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40001800 	.word	0x40001800

08006e38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 fc04 	bl	8008658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a2e      	ldr	r2, [pc, #184]	; (8006f10 <HAL_TIM_PWM_Stop+0xd8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d004      	beq.n	8006e64 <HAL_TIM_PWM_Stop+0x2c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2d      	ldr	r2, [pc, #180]	; (8006f14 <HAL_TIM_PWM_Stop+0xdc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d101      	bne.n	8006e68 <HAL_TIM_PWM_Stop+0x30>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <HAL_TIM_PWM_Stop+0x32>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10f      	bne.n	8006e9e <HAL_TIM_PWM_Stop+0x66>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	f240 4344 	movw	r3, #1092	; 0x444
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <HAL_TIM_PWM_Stop+0x66>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <HAL_TIM_PWM_Stop+0x96>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <HAL_TIM_PWM_Stop+0x96>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0201 	bic.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <HAL_TIM_PWM_Stop+0xa6>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006edc:	e013      	b.n	8006f06 <HAL_TIM_PWM_Stop+0xce>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_PWM_Stop+0xb6>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eec:	e00b      	b.n	8006f06 <HAL_TIM_PWM_Stop+0xce>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_PWM_Stop+0xc6>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006efc:	e003      	b.n	8006f06 <HAL_TIM_PWM_Stop+0xce>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40010400 	.word	0x40010400

08006f18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e041      	b.n	8006fae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f839 	bl	8006fb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f000 ff6a 	bl	8007e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <HAL_TIM_IC_Start_DMA+0x22>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	e013      	b.n	8007016 <HAL_TIM_IC_Start_DMA+0x4a>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d104      	bne.n	8006ffe <HAL_TIM_IC_Start_DMA+0x32>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	e00b      	b.n	8007016 <HAL_TIM_IC_Start_DMA+0x4a>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d104      	bne.n	800700e <HAL_TIM_IC_Start_DMA+0x42>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e003      	b.n	8007016 <HAL_TIM_IC_Start_DMA+0x4a>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007014:	b2db      	uxtb	r3, r3
 8007016:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d104      	bne.n	8007028 <HAL_TIM_IC_Start_DMA+0x5c>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007024:	b2db      	uxtb	r3, r3
 8007026:	e013      	b.n	8007050 <HAL_TIM_IC_Start_DMA+0x84>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d104      	bne.n	8007038 <HAL_TIM_IC_Start_DMA+0x6c>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007034:	b2db      	uxtb	r3, r3
 8007036:	e00b      	b.n	8007050 <HAL_TIM_IC_Start_DMA+0x84>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b08      	cmp	r3, #8
 800703c:	d104      	bne.n	8007048 <HAL_TIM_IC_Start_DMA+0x7c>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007044:	b2db      	uxtb	r3, r3
 8007046:	e003      	b.n	8007050 <HAL_TIM_IC_Start_DMA+0x84>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800704e:	b2db      	uxtb	r3, r3
 8007050:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007052:	7dbb      	ldrb	r3, [r7, #22]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d002      	beq.n	800705e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007058:	7d7b      	ldrb	r3, [r7, #21]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d101      	bne.n	8007062 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800705e:	2302      	movs	r3, #2
 8007060:	e146      	b.n	80072f0 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007062:	7dbb      	ldrb	r3, [r7, #22]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d143      	bne.n	80070f0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007068:	7d7b      	ldrb	r3, [r7, #21]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d140      	bne.n	80070f0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <HAL_TIM_IC_Start_DMA+0xb2>
 8007074:	887b      	ldrh	r3, [r7, #2]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e138      	b.n	80072f0 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_TIM_IC_Start_DMA+0xc2>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800708c:	e013      	b.n	80070b6 <HAL_TIM_IC_Start_DMA+0xea>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d104      	bne.n	800709e <HAL_TIM_IC_Start_DMA+0xd2>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	e00b      	b.n	80070b6 <HAL_TIM_IC_Start_DMA+0xea>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Start_DMA+0xe2>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	e003      	b.n	80070b6 <HAL_TIM_IC_Start_DMA+0xea>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <HAL_TIM_IC_Start_DMA+0xfa>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80070c4:	e016      	b.n	80070f4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_IC_Start_DMA+0x10a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80070d4:	e00e      	b.n	80070f4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_IC_Start_DMA+0x11a>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80070e4:	e006      	b.n	80070f4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80070ee:	e001      	b.n	80070f4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0fd      	b.n	80072f0 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2201      	movs	r2, #1
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 faab 	bl	8008658 <TIM_CCxChannelCmd>

  switch (Channel)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	f200 80ad 	bhi.w	8007264 <HAL_TIM_IC_Start_DMA+0x298>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <HAL_TIM_IC_Start_DMA+0x144>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007145 	.word	0x08007145
 8007114:	08007265 	.word	0x08007265
 8007118:	08007265 	.word	0x08007265
 800711c:	08007265 	.word	0x08007265
 8007120:	0800718d 	.word	0x0800718d
 8007124:	08007265 	.word	0x08007265
 8007128:	08007265 	.word	0x08007265
 800712c:	08007265 	.word	0x08007265
 8007130:	080071d5 	.word	0x080071d5
 8007134:	08007265 	.word	0x08007265
 8007138:	08007265 	.word	0x08007265
 800713c:	08007265 	.word	0x08007265
 8007140:	0800721d 	.word	0x0800721d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	4a6b      	ldr	r2, [pc, #428]	; (80072f8 <HAL_TIM_IC_Start_DMA+0x32c>)
 800714a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	4a6a      	ldr	r2, [pc, #424]	; (80072fc <HAL_TIM_IC_Start_DMA+0x330>)
 8007152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	4a69      	ldr	r2, [pc, #420]	; (8007300 <HAL_TIM_IC_Start_DMA+0x334>)
 800715a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3334      	adds	r3, #52	; 0x34
 8007166:	4619      	mov	r1, r3
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	887b      	ldrh	r3, [r7, #2]
 800716c:	f7fd fef8 	bl	8004f60 <HAL_DMA_Start_IT>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e0ba      	b.n	80072f0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007188:	60da      	str	r2, [r3, #12]
      break;
 800718a:	e06e      	b.n	800726a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	4a59      	ldr	r2, [pc, #356]	; (80072f8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007192:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	4a58      	ldr	r2, [pc, #352]	; (80072fc <HAL_TIM_IC_Start_DMA+0x330>)
 800719a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	4a57      	ldr	r2, [pc, #348]	; (8007300 <HAL_TIM_IC_Start_DMA+0x334>)
 80071a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3338      	adds	r3, #56	; 0x38
 80071ae:	4619      	mov	r1, r3
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	887b      	ldrh	r3, [r7, #2]
 80071b4:	f7fd fed4 	bl	8004f60 <HAL_DMA_Start_IT>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e096      	b.n	80072f0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071d0:	60da      	str	r2, [r3, #12]
      break;
 80071d2:	e04a      	b.n	800726a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	4a47      	ldr	r2, [pc, #284]	; (80072f8 <HAL_TIM_IC_Start_DMA+0x32c>)
 80071da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	4a46      	ldr	r2, [pc, #280]	; (80072fc <HAL_TIM_IC_Start_DMA+0x330>)
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	4a45      	ldr	r2, [pc, #276]	; (8007300 <HAL_TIM_IC_Start_DMA+0x334>)
 80071ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	333c      	adds	r3, #60	; 0x3c
 80071f6:	4619      	mov	r1, r3
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	887b      	ldrh	r3, [r7, #2]
 80071fc:	f7fd feb0 	bl	8004f60 <HAL_DMA_Start_IT>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e072      	b.n	80072f0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007218:	60da      	str	r2, [r3, #12]
      break;
 800721a:	e026      	b.n	800726a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	4a35      	ldr	r2, [pc, #212]	; (80072f8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007222:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	4a34      	ldr	r2, [pc, #208]	; (80072fc <HAL_TIM_IC_Start_DMA+0x330>)
 800722a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	4a33      	ldr	r2, [pc, #204]	; (8007300 <HAL_TIM_IC_Start_DMA+0x334>)
 8007232:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3340      	adds	r3, #64	; 0x40
 800723e:	4619      	mov	r1, r3
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	887b      	ldrh	r3, [r7, #2]
 8007244:	f7fd fe8c 	bl	8004f60 <HAL_DMA_Start_IT>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e04e      	b.n	80072f0 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007260:	60da      	str	r2, [r3, #12]
      break;
 8007262:	e002      	b.n	800726a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
      break;
 8007268:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a25      	ldr	r2, [pc, #148]	; (8007304 <HAL_TIM_IC_Start_DMA+0x338>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d022      	beq.n	80072ba <HAL_TIM_IC_Start_DMA+0x2ee>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727c:	d01d      	beq.n	80072ba <HAL_TIM_IC_Start_DMA+0x2ee>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a21      	ldr	r2, [pc, #132]	; (8007308 <HAL_TIM_IC_Start_DMA+0x33c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d018      	beq.n	80072ba <HAL_TIM_IC_Start_DMA+0x2ee>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1f      	ldr	r2, [pc, #124]	; (800730c <HAL_TIM_IC_Start_DMA+0x340>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_TIM_IC_Start_DMA+0x2ee>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <HAL_TIM_IC_Start_DMA+0x344>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_TIM_IC_Start_DMA+0x2ee>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <HAL_TIM_IC_Start_DMA+0x348>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_TIM_IC_Start_DMA+0x2ee>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <HAL_TIM_IC_Start_DMA+0x34c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_TIM_IC_Start_DMA+0x2ee>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <HAL_TIM_IC_Start_DMA+0x350>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d111      	bne.n	80072de <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b06      	cmp	r3, #6
 80072ca:	d010      	beq.n	80072ee <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	e007      	b.n	80072ee <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	08007d01 	.word	0x08007d01
 80072fc:	08007dc9 	.word	0x08007dc9
 8007300:	08007c6f 	.word	0x08007c6f
 8007304:	40010000 	.word	0x40010000
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40010400 	.word	0x40010400
 8007318:	40014000 	.word	0x40014000
 800731c:	40001800 	.word	0x40001800

08007320 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e097      	b.n	8007464 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fc fac1 	bl	80038d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6812      	ldr	r2, [r2, #0]
 8007360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007364:	f023 0307 	bic.w	r3, r3, #7
 8007368:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3304      	adds	r3, #4
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f000 fd5b 	bl	8007e30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a2:	f023 0303 	bic.w	r3, r3, #3
 80073a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	4313      	orrs	r3, r2
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073c0:	f023 030c 	bic.w	r3, r3, #12
 80073c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	4313      	orrs	r3, r2
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	011a      	lsls	r2, r3, #4
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	031b      	lsls	r3, r3, #12
 80073f0:	4313      	orrs	r3, r2
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80073fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	4313      	orrs	r3, r2
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800747c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007484:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800748c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007494:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d110      	bne.n	80074be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d102      	bne.n	80074a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80074a2:	7b7b      	ldrb	r3, [r7, #13]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d001      	beq.n	80074ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e069      	b.n	8007580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074bc:	e031      	b.n	8007522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d110      	bne.n	80074e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d102      	bne.n	80074d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074ca:	7b3b      	ldrb	r3, [r7, #12]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d001      	beq.n	80074d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e055      	b.n	8007580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074e4:	e01d      	b.n	8007522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d108      	bne.n	80074fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d105      	bne.n	80074fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074f2:	7b7b      	ldrb	r3, [r7, #13]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d102      	bne.n	80074fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074f8:	7b3b      	ldrb	r3, [r7, #12]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d001      	beq.n	8007502 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e03e      	b.n	8007580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2202      	movs	r2, #2
 800751e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <HAL_TIM_Encoder_Start+0xc4>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b04      	cmp	r3, #4
 800752c:	d008      	beq.n	8007540 <HAL_TIM_Encoder_Start+0xd4>
 800752e:	e00f      	b.n	8007550 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2201      	movs	r2, #1
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f001 f88d 	bl	8008658 <TIM_CCxChannelCmd>
      break;
 800753e:	e016      	b.n	800756e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2201      	movs	r2, #1
 8007546:	2104      	movs	r1, #4
 8007548:	4618      	mov	r0, r3
 800754a:	f001 f885 	bl	8008658 <TIM_CCxChannelCmd>
      break;
 800754e:	e00e      	b.n	800756e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2201      	movs	r2, #1
 8007556:	2100      	movs	r1, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f001 f87d 	bl	8008658 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2201      	movs	r2, #1
 8007564:	2104      	movs	r1, #4
 8007566:	4618      	mov	r0, r3
 8007568:	f001 f876 	bl	8008658 <TIM_CCxChannelCmd>
      break;
 800756c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0201 	orr.w	r2, r2, #1
 800757c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d122      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d11b      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0202 	mvn.w	r2, #2
 80075b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb1d 	bl	8007c0a <HAL_TIM_IC_CaptureCallback>
 80075d0:	e005      	b.n	80075de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fb0f 	bl	8007bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb2a 	bl	8007c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d122      	bne.n	8007638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d11b      	bne.n	8007638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0204 	mvn.w	r2, #4
 8007608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2202      	movs	r2, #2
 800760e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 faf3 	bl	8007c0a <HAL_TIM_IC_CaptureCallback>
 8007624:	e005      	b.n	8007632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fae5 	bl	8007bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fb00 	bl	8007c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b08      	cmp	r3, #8
 8007644:	d122      	bne.n	800768c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b08      	cmp	r3, #8
 8007652:	d11b      	bne.n	800768c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0208 	mvn.w	r2, #8
 800765c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2204      	movs	r2, #4
 8007662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fac9 	bl	8007c0a <HAL_TIM_IC_CaptureCallback>
 8007678:	e005      	b.n	8007686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fabb 	bl	8007bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fad6 	bl	8007c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	2b10      	cmp	r3, #16
 8007698:	d122      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b10      	cmp	r3, #16
 80076a6:	d11b      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0210 	mvn.w	r2, #16
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2208      	movs	r2, #8
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa9f 	bl	8007c0a <HAL_TIM_IC_CaptureCallback>
 80076cc:	e005      	b.n	80076da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa91 	bl	8007bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 faac 	bl	8007c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d10e      	bne.n	800770c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d107      	bne.n	800770c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0201 	mvn.w	r2, #1
 8007704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa6b 	bl	8007be2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007716:	2b80      	cmp	r3, #128	; 0x80
 8007718:	d10e      	bne.n	8007738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007724:	2b80      	cmp	r3, #128	; 0x80
 8007726:	d107      	bne.n	8007738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 f88e 	bl	8008854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d10e      	bne.n	8007764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007750:	2b40      	cmp	r3, #64	; 0x40
 8007752:	d107      	bne.n	8007764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800775c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa71 	bl	8007c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b20      	cmp	r3, #32
 8007770:	d10e      	bne.n	8007790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b20      	cmp	r3, #32
 800777e:	d107      	bne.n	8007790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0220 	mvn.w	r2, #32
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 f858 	bl	8008840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e088      	b.n	80078c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f000 fd7c 	bl	80082d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 020c 	bic.w	r2, r2, #12
 80077e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6999      	ldr	r1, [r3, #24]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	619a      	str	r2, [r3, #24]
 80077fa:	e060      	b.n	80078be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d11c      	bne.n	800783c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f000 fe00 	bl	8008416 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699a      	ldr	r2, [r3, #24]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007824:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6999      	ldr	r1, [r3, #24]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	021a      	lsls	r2, r3, #8
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	619a      	str	r2, [r3, #24]
 800783a:	e040      	b.n	80078be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b08      	cmp	r3, #8
 8007840:	d11b      	bne.n	800787a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6819      	ldr	r1, [r3, #0]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f000 fe4d 	bl	80084f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 020c 	bic.w	r2, r2, #12
 8007864:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69d9      	ldr	r1, [r3, #28]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	61da      	str	r2, [r3, #28]
 8007878:	e021      	b.n	80078be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b0c      	cmp	r3, #12
 800787e:	d11c      	bne.n	80078ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6819      	ldr	r1, [r3, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f000 fe6a 	bl	8008568 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69d9      	ldr	r1, [r3, #28]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	021a      	lsls	r2, r3, #8
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	61da      	str	r2, [r3, #28]
 80078b8:	e001      	b.n	80078be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d101      	bne.n	80078ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e0ae      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b0c      	cmp	r3, #12
 80078fa:	f200 809f 	bhi.w	8007a3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078fe:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	08007939 	.word	0x08007939
 8007908:	08007a3d 	.word	0x08007a3d
 800790c:	08007a3d 	.word	0x08007a3d
 8007910:	08007a3d 	.word	0x08007a3d
 8007914:	08007979 	.word	0x08007979
 8007918:	08007a3d 	.word	0x08007a3d
 800791c:	08007a3d 	.word	0x08007a3d
 8007920:	08007a3d 	.word	0x08007a3d
 8007924:	080079bb 	.word	0x080079bb
 8007928:	08007a3d 	.word	0x08007a3d
 800792c:	08007a3d 	.word	0x08007a3d
 8007930:	08007a3d 	.word	0x08007a3d
 8007934:	080079fb 	.word	0x080079fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68b9      	ldr	r1, [r7, #8]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fb16 	bl	8007f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0208 	orr.w	r2, r2, #8
 8007952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0204 	bic.w	r2, r2, #4
 8007962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6999      	ldr	r1, [r3, #24]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	619a      	str	r2, [r3, #24]
      break;
 8007976:	e064      	b.n	8007a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fb66 	bl	8008050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6999      	ldr	r1, [r3, #24]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	021a      	lsls	r2, r3, #8
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	619a      	str	r2, [r3, #24]
      break;
 80079b8:	e043      	b.n	8007a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fbbb 	bl	800813c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0208 	orr.w	r2, r2, #8
 80079d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69da      	ldr	r2, [r3, #28]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0204 	bic.w	r2, r2, #4
 80079e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69d9      	ldr	r1, [r3, #28]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	61da      	str	r2, [r3, #28]
      break;
 80079f8:	e023      	b.n	8007a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68b9      	ldr	r1, [r7, #8]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fc0f 	bl	8008224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69da      	ldr	r2, [r3, #28]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69da      	ldr	r2, [r3, #28]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69d9      	ldr	r1, [r3, #28]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	021a      	lsls	r2, r3, #8
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	61da      	str	r2, [r3, #28]
      break;
 8007a3a:	e002      	b.n	8007a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0b4      	b.n	8007bda <HAL_TIM_ConfigClockSource+0x186>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa8:	d03e      	beq.n	8007b28 <HAL_TIM_ConfigClockSource+0xd4>
 8007aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aae:	f200 8087 	bhi.w	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab6:	f000 8086 	beq.w	8007bc6 <HAL_TIM_ConfigClockSource+0x172>
 8007aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abe:	d87f      	bhi.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ac0:	2b70      	cmp	r3, #112	; 0x70
 8007ac2:	d01a      	beq.n	8007afa <HAL_TIM_ConfigClockSource+0xa6>
 8007ac4:	2b70      	cmp	r3, #112	; 0x70
 8007ac6:	d87b      	bhi.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ac8:	2b60      	cmp	r3, #96	; 0x60
 8007aca:	d050      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0x11a>
 8007acc:	2b60      	cmp	r3, #96	; 0x60
 8007ace:	d877      	bhi.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ad0:	2b50      	cmp	r3, #80	; 0x50
 8007ad2:	d03c      	beq.n	8007b4e <HAL_TIM_ConfigClockSource+0xfa>
 8007ad4:	2b50      	cmp	r3, #80	; 0x50
 8007ad6:	d873      	bhi.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	d058      	beq.n	8007b8e <HAL_TIM_ConfigClockSource+0x13a>
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d86f      	bhi.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ae0:	2b30      	cmp	r3, #48	; 0x30
 8007ae2:	d064      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0x15a>
 8007ae4:	2b30      	cmp	r3, #48	; 0x30
 8007ae6:	d86b      	bhi.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d060      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0x15a>
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	d867      	bhi.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d05c      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0x15a>
 8007af4:	2b10      	cmp	r3, #16
 8007af6:	d05a      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0x15a>
 8007af8:	e062      	b.n	8007bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6899      	ldr	r1, [r3, #8]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f000 fd85 	bl	8008618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	609a      	str	r2, [r3, #8]
      break;
 8007b26:	e04f      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	6899      	ldr	r1, [r3, #8]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f000 fd6e 	bl	8008618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b4a:	609a      	str	r2, [r3, #8]
      break;
 8007b4c:	e03c      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	6859      	ldr	r1, [r3, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f000 fc2c 	bl	80083b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2150      	movs	r1, #80	; 0x50
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fd3b 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007b6c:	e02c      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	6859      	ldr	r1, [r3, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f000 fc88 	bl	8008490 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2160      	movs	r1, #96	; 0x60
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fd2b 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007b8c:	e01c      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	6859      	ldr	r1, [r3, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f000 fc0c 	bl	80083b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2140      	movs	r1, #64	; 0x40
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fd1b 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007bac:	e00c      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f000 fd12 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8007bbe:	e003      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc4:	e000      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d107      	bne.n	8007c96 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c94:	e02a      	b.n	8007cec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d107      	bne.n	8007cb0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cae:	e01d      	b.n	8007cec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d107      	bne.n	8007cca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cc8:	e010      	b.n	8007cec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d107      	bne.n	8007ce4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2208      	movs	r2, #8
 8007cd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ce2:	e003      	b.n	8007cec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff ffb4 	bl	8007c5a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]
}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d10f      	bne.n	8007d38 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d146      	bne.n	8007db4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d36:	e03d      	b.n	8007db4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d10f      	bne.n	8007d62 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2202      	movs	r2, #2
 8007d46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d131      	bne.n	8007db4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d60:	e028      	b.n	8007db4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d10f      	bne.n	8007d8c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2204      	movs	r2, #4
 8007d70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d11c      	bne.n	8007db4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8a:	e013      	b.n	8007db4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d10e      	bne.n	8007db4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2208      	movs	r2, #8
 8007d9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d107      	bne.n	8007db4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff28 	bl	8007c0a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d103      	bne.n	8007de8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	771a      	strb	r2, [r3, #28]
 8007de6:	e019      	b.n	8007e1c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d103      	bne.n	8007dfa <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2202      	movs	r2, #2
 8007df6:	771a      	strb	r2, [r3, #28]
 8007df8:	e010      	b.n	8007e1c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d103      	bne.n	8007e0c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2204      	movs	r2, #4
 8007e08:	771a      	strb	r2, [r3, #28]
 8007e0a:	e007      	b.n	8007e1c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d102      	bne.n	8007e1c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff fefe 	bl	8007c1e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	771a      	strb	r2, [r3, #28]
}
 8007e28:	bf00      	nop
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a40      	ldr	r2, [pc, #256]	; (8007f44 <TIM_Base_SetConfig+0x114>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d013      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4e:	d00f      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a3d      	ldr	r2, [pc, #244]	; (8007f48 <TIM_Base_SetConfig+0x118>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00b      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a3c      	ldr	r2, [pc, #240]	; (8007f4c <TIM_Base_SetConfig+0x11c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d007      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a3b      	ldr	r2, [pc, #236]	; (8007f50 <TIM_Base_SetConfig+0x120>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a3a      	ldr	r2, [pc, #232]	; (8007f54 <TIM_Base_SetConfig+0x124>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d108      	bne.n	8007e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2f      	ldr	r2, [pc, #188]	; (8007f44 <TIM_Base_SetConfig+0x114>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d02b      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e90:	d027      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2c      	ldr	r2, [pc, #176]	; (8007f48 <TIM_Base_SetConfig+0x118>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d023      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2b      	ldr	r2, [pc, #172]	; (8007f4c <TIM_Base_SetConfig+0x11c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01f      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <TIM_Base_SetConfig+0x120>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01b      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a29      	ldr	r2, [pc, #164]	; (8007f54 <TIM_Base_SetConfig+0x124>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d017      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a28      	ldr	r2, [pc, #160]	; (8007f58 <TIM_Base_SetConfig+0x128>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a27      	ldr	r2, [pc, #156]	; (8007f5c <TIM_Base_SetConfig+0x12c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00f      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a26      	ldr	r2, [pc, #152]	; (8007f60 <TIM_Base_SetConfig+0x130>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00b      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a25      	ldr	r2, [pc, #148]	; (8007f64 <TIM_Base_SetConfig+0x134>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d007      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a24      	ldr	r2, [pc, #144]	; (8007f68 <TIM_Base_SetConfig+0x138>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d003      	beq.n	8007ee2 <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a23      	ldr	r2, [pc, #140]	; (8007f6c <TIM_Base_SetConfig+0x13c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d108      	bne.n	8007ef4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a0a      	ldr	r2, [pc, #40]	; (8007f44 <TIM_Base_SetConfig+0x114>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a0c      	ldr	r2, [pc, #48]	; (8007f54 <TIM_Base_SetConfig+0x124>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d103      	bne.n	8007f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	615a      	str	r2, [r3, #20]
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40000c00 	.word	0x40000c00
 8007f54:	40010400 	.word	0x40010400
 8007f58:	40014000 	.word	0x40014000
 8007f5c:	40014400 	.word	0x40014400
 8007f60:	40014800 	.word	0x40014800
 8007f64:	40001800 	.word	0x40001800
 8007f68:	40001c00 	.word	0x40001c00
 8007f6c:	40002000 	.word	0x40002000

08007f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f023 0201 	bic.w	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0303 	bic.w	r3, r3, #3
 8007fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f023 0302 	bic.w	r3, r3, #2
 8007fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a20      	ldr	r2, [pc, #128]	; (8008048 <TIM_OC1_SetConfig+0xd8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_OC1_SetConfig+0x64>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a1f      	ldr	r2, [pc, #124]	; (800804c <TIM_OC1_SetConfig+0xdc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d10c      	bne.n	8007fee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f023 0308 	bic.w	r3, r3, #8
 8007fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f023 0304 	bic.w	r3, r3, #4
 8007fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	; (8008048 <TIM_OC1_SetConfig+0xd8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC1_SetConfig+0x8e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	; (800804c <TIM_OC1_SetConfig+0xdc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d111      	bne.n	8008022 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800800c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	621a      	str	r2, [r3, #32]
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	40010000 	.word	0x40010000
 800804c:	40010400 	.word	0x40010400

08008050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	f023 0210 	bic.w	r2, r3, #16
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0320 	bic.w	r3, r3, #32
 800809a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a22      	ldr	r2, [pc, #136]	; (8008134 <TIM_OC2_SetConfig+0xe4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d003      	beq.n	80080b8 <TIM_OC2_SetConfig+0x68>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a21      	ldr	r2, [pc, #132]	; (8008138 <TIM_OC2_SetConfig+0xe8>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d10d      	bne.n	80080d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	011b      	lsls	r3, r3, #4
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a17      	ldr	r2, [pc, #92]	; (8008134 <TIM_OC2_SetConfig+0xe4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <TIM_OC2_SetConfig+0x94>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a16      	ldr	r2, [pc, #88]	; (8008138 <TIM_OC2_SetConfig+0xe8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d113      	bne.n	800810c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40010000 	.word	0x40010000
 8008138:	40010400 	.word	0x40010400

0800813c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a21      	ldr	r2, [pc, #132]	; (800821c <TIM_OC3_SetConfig+0xe0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_OC3_SetConfig+0x66>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a20      	ldr	r2, [pc, #128]	; (8008220 <TIM_OC3_SetConfig+0xe4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d10d      	bne.n	80081be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a16      	ldr	r2, [pc, #88]	; (800821c <TIM_OC3_SetConfig+0xe0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_OC3_SetConfig+0x92>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a15      	ldr	r2, [pc, #84]	; (8008220 <TIM_OC3_SetConfig+0xe4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d113      	bne.n	80081f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	621a      	str	r2, [r3, #32]
}
 8008210:	bf00      	nop
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	40010000 	.word	0x40010000
 8008220:	40010400 	.word	0x40010400

08008224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800825a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800826e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	031b      	lsls	r3, r3, #12
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a12      	ldr	r2, [pc, #72]	; (80082c8 <TIM_OC4_SetConfig+0xa4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d003      	beq.n	800828c <TIM_OC4_SetConfig+0x68>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a11      	ldr	r2, [pc, #68]	; (80082cc <TIM_OC4_SetConfig+0xa8>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d109      	bne.n	80082a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	019b      	lsls	r3, r3, #6
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	4313      	orrs	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40010000 	.word	0x40010000
 80082cc:	40010400 	.word	0x40010400

080082d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f023 0201 	bic.w	r2, r3, #1
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a28      	ldr	r2, [pc, #160]	; (800839c <TIM_TI1_SetConfig+0xcc>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d01b      	beq.n	8008336 <TIM_TI1_SetConfig+0x66>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008304:	d017      	beq.n	8008336 <TIM_TI1_SetConfig+0x66>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4a25      	ldr	r2, [pc, #148]	; (80083a0 <TIM_TI1_SetConfig+0xd0>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d013      	beq.n	8008336 <TIM_TI1_SetConfig+0x66>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <TIM_TI1_SetConfig+0xd4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00f      	beq.n	8008336 <TIM_TI1_SetConfig+0x66>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4a23      	ldr	r2, [pc, #140]	; (80083a8 <TIM_TI1_SetConfig+0xd8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00b      	beq.n	8008336 <TIM_TI1_SetConfig+0x66>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a22      	ldr	r2, [pc, #136]	; (80083ac <TIM_TI1_SetConfig+0xdc>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d007      	beq.n	8008336 <TIM_TI1_SetConfig+0x66>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a21      	ldr	r2, [pc, #132]	; (80083b0 <TIM_TI1_SetConfig+0xe0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_TI1_SetConfig+0x66>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a20      	ldr	r2, [pc, #128]	; (80083b4 <TIM_TI1_SetConfig+0xe4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d101      	bne.n	800833a <TIM_TI1_SetConfig+0x6a>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <TIM_TI1_SetConfig+0x6c>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d008      	beq.n	8008352 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e003      	b.n	800835a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f043 0301 	orr.w	r3, r3, #1
 8008358:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	b2db      	uxtb	r3, r3
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f023 030a 	bic.w	r3, r3, #10
 8008374:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f003 030a 	and.w	r3, r3, #10
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	621a      	str	r2, [r3, #32]
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40001800 	.word	0x40001800

080083b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	f023 0201 	bic.w	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f023 030a 	bic.w	r3, r3, #10
 80083f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	f023 0210 	bic.w	r2, r3, #16
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	031b      	lsls	r3, r3, #12
 800845a:	b29b      	uxth	r3, r3
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008468:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	621a      	str	r2, [r3, #32]
}
 8008484:	bf00      	nop
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	f023 0210 	bic.w	r2, r3, #16
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	031b      	lsls	r3, r3, #12
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	621a      	str	r2, [r3, #32]
}
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 0303 	bic.w	r3, r3, #3
 800851c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800852c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	b2db      	uxtb	r3, r3
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008540:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	4313      	orrs	r3, r2
 800854e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	621a      	str	r2, [r3, #32]
}
 800855c:	bf00      	nop
 800855e:	371c      	adds	r7, #28
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008594:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	031b      	lsls	r3, r3, #12
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80085ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	031b      	lsls	r3, r3, #12
 80085c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	621a      	str	r2, [r3, #32]
}
 80085d6:	bf00      	nop
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	f043 0307 	orr.w	r3, r3, #7
 8008604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	609a      	str	r2, [r3, #8]
}
 800860c:	bf00      	nop
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	021a      	lsls	r2, r3, #8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	431a      	orrs	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4313      	orrs	r3, r2
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	609a      	str	r2, [r3, #8]
}
 800864c:	bf00      	nop
 800864e:	371c      	adds	r7, #28
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	2201      	movs	r2, #1
 800866c:	fa02 f303 	lsl.w	r3, r2, r3
 8008670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6a1a      	ldr	r2, [r3, #32]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	43db      	mvns	r3, r3
 800867a:	401a      	ands	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1a      	ldr	r2, [r3, #32]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f003 031f 	and.w	r3, r3, #31
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	431a      	orrs	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	621a      	str	r2, [r3, #32]
}
 8008696:	bf00      	nop
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e05a      	b.n	8008772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a21      	ldr	r2, [pc, #132]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d022      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008708:	d01d      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1d      	ldr	r2, [pc, #116]	; (8008784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d018      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a1a      	ldr	r2, [pc, #104]	; (800878c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00e      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a18      	ldr	r2, [pc, #96]	; (8008790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d009      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a17      	ldr	r2, [pc, #92]	; (8008794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d004      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a15      	ldr	r2, [pc, #84]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d10c      	bne.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800874c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	4313      	orrs	r3, r2
 8008756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	40010000 	.word	0x40010000
 8008784:	40000400 	.word	0x40000400
 8008788:	40000800 	.word	0x40000800
 800878c:	40000c00 	.word	0x40000c00
 8008790:	40010400 	.word	0x40010400
 8008794:	40014000 	.word	0x40014000
 8008798:	40001800 	.word	0x40001800

0800879c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e03d      	b.n	8008834 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e03f      	b.n	80088fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fb f8ec 	bl	8003a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2224      	movs	r2, #36	; 0x24
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fe81 	bl	80095b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	695a      	ldr	r2, [r3, #20]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b08a      	sub	sp, #40	; 0x28
 8008906:	af02      	add	r7, sp, #8
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b20      	cmp	r3, #32
 8008920:	d17c      	bne.n	8008a1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <HAL_UART_Transmit+0x2c>
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e075      	b.n	8008a1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008938:	2b01      	cmp	r3, #1
 800893a:	d101      	bne.n	8008940 <HAL_UART_Transmit+0x3e>
 800893c:	2302      	movs	r3, #2
 800893e:	e06e      	b.n	8008a1e <HAL_UART_Transmit+0x11c>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2221      	movs	r2, #33	; 0x21
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008956:	f7fb fb6b 	bl	8004030 <HAL_GetTick>
 800895a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	88fa      	ldrh	r2, [r7, #6]
 8008966:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008970:	d108      	bne.n	8008984 <HAL_UART_Transmit+0x82>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d104      	bne.n	8008984 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e003      	b.n	800898c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008994:	e02a      	b.n	80089ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2200      	movs	r2, #0
 800899e:	2180      	movs	r1, #128	; 0x80
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fbc1 	bl	8009128 <UART_WaitOnFlagUntilTimeout>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e036      	b.n	8008a1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10b      	bne.n	80089ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	3302      	adds	r3, #2
 80089ca:	61bb      	str	r3, [r7, #24]
 80089cc:	e007      	b.n	80089de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3301      	adds	r3, #1
 80089dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1cf      	bne.n	8008996 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2140      	movs	r1, #64	; 0x40
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 fb91 	bl	8009128 <UART_WaitOnFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e006      	b.n	8008a1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2220      	movs	r2, #32
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e000      	b.n	8008a1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
  }
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08a      	sub	sp, #40	; 0x28
 8008a2a:	af02      	add	r7, sp, #8
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	f040 808c 	bne.w	8008b60 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_UART_Receive+0x2e>
 8008a4e:	88fb      	ldrh	r3, [r7, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e084      	b.n	8008b62 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <HAL_UART_Receive+0x40>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e07d      	b.n	8008b62 <HAL_UART_Receive+0x13c>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2222      	movs	r2, #34	; 0x22
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a82:	f7fb fad5 	bl	8004030 <HAL_GetTick>
 8008a86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	88fa      	ldrh	r2, [r7, #6]
 8008a8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	88fa      	ldrh	r2, [r7, #6]
 8008a92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9c:	d108      	bne.n	8008ab0 <HAL_UART_Receive+0x8a>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d104      	bne.n	8008ab0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	e003      	b.n	8008ab8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008ac0:	e043      	b.n	8008b4a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2120      	movs	r1, #32
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fb2b 	bl	8009128 <UART_WaitOnFlagUntilTimeout>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e042      	b.n	8008b62 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10c      	bne.n	8008afc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	3302      	adds	r3, #2
 8008af8:	61bb      	str	r3, [r7, #24]
 8008afa:	e01f      	b.n	8008b3c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b04:	d007      	beq.n	8008b16 <HAL_UART_Receive+0xf0>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <HAL_UART_Receive+0xfe>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	e008      	b.n	8008b36 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1b6      	bne.n	8008ac2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e000      	b.n	8008b62 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008b60:	2302      	movs	r3, #2
  }
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d11d      	bne.n	8008bc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_UART_Receive_IT+0x26>
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e016      	b.n	8008bc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_UART_Receive_IT+0x38>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e00f      	b.n	8008bc2 <HAL_UART_Receive_IT+0x58>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fb24 	bl	8009204 <UART_Start_Receive_IT>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	e000      	b.n	8008bc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008bc0:	2302      	movs	r3, #2
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b0ba      	sub	sp, #232	; 0xe8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10f      	bne.n	8008c32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <HAL_UART_IRQHandler+0x66>
 8008c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc07 	bl	800943e <UART_Receive_IT>
      return;
 8008c30:	e256      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 80de 	beq.w	8008df8 <HAL_UART_IRQHandler+0x22c>
 8008c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80d1 	beq.w	8008df8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <HAL_UART_IRQHandler+0xae>
 8008c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	f043 0201 	orr.w	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <HAL_UART_IRQHandler+0xd2>
 8008c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	f043 0202 	orr.w	r2, r3, #2
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <HAL_UART_IRQHandler+0xf6>
 8008caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	f043 0204 	orr.w	r2, r3, #4
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d011      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x126>
 8008cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d005      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	f043 0208 	orr.w	r2, r3, #8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 81ed 	beq.w	80090d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d00:	f003 0320 	and.w	r3, r3, #32
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <HAL_UART_IRQHandler+0x14e>
 8008d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fb92 	bl	800943e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d24:	2b40      	cmp	r3, #64	; 0x40
 8008d26:	bf0c      	ite	eq
 8008d28:	2301      	moveq	r3, #1
 8008d2a:	2300      	movne	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <HAL_UART_IRQHandler+0x17a>
 8008d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d04f      	beq.n	8008de6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa9a 	bl	8009280 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b40      	cmp	r3, #64	; 0x40
 8008d58:	d141      	bne.n	8008dde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3314      	adds	r3, #20
 8008d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3314      	adds	r3, #20
 8008d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1d9      	bne.n	8008d5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d013      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	4a7d      	ldr	r2, [pc, #500]	; (8008fa8 <HAL_UART_IRQHandler+0x3dc>)
 8008db4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fc f998 	bl	80050f0 <HAL_DMA_Abort_IT>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d016      	beq.n	8008df4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd4:	e00e      	b.n	8008df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f990 	bl	80090fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ddc:	e00a      	b.n	8008df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f98c 	bl	80090fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	e006      	b.n	8008df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f988 	bl	80090fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008df2:	e170      	b.n	80090d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	bf00      	nop
    return;
 8008df6:	e16e      	b.n	80090d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	f040 814a 	bne.w	8009096 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e06:	f003 0310 	and.w	r3, r3, #16
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 8143 	beq.w	8009096 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 813c 	beq.w	8009096 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60bb      	str	r3, [r7, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	f040 80b4 	bne.w	8008fac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8140 	beq.w	80090da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e62:	429a      	cmp	r2, r3
 8008e64:	f080 8139 	bcs.w	80090da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7a:	f000 8088 	beq.w	8008f8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	330c      	adds	r3, #12
 8008e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	330c      	adds	r3, #12
 8008ea6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008eaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1d9      	bne.n	8008e7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008edc:	f023 0301 	bic.w	r3, r3, #1
 8008ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3314      	adds	r3, #20
 8008eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e1      	bne.n	8008eca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3314      	adds	r3, #20
 8008f0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3314      	adds	r3, #20
 8008f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e3      	bne.n	8008f06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	330c      	adds	r3, #12
 8008f52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5e:	f023 0310 	bic.w	r3, r3, #16
 8008f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f70:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e3      	bne.n	8008f4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fc f841 	bl	8005010 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f8b6 	bl	8009110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fa4:	e099      	b.n	80090da <HAL_UART_IRQHandler+0x50e>
 8008fa6:	bf00      	nop
 8008fa8:	08009347 	.word	0x08009347
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 808b 	beq.w	80090de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8086 	beq.w	80090de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ff6:	647a      	str	r2, [r7, #68]	; 0x44
 8008ff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e3      	bne.n	8008fd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	623b      	str	r3, [r7, #32]
   return(result);
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	f023 0301 	bic.w	r3, r3, #1
 8009020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3314      	adds	r3, #20
 800902a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800902e:	633a      	str	r2, [r7, #48]	; 0x30
 8009030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e3      	bne.n	800900a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	330c      	adds	r3, #12
 8009056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0310 	bic.w	r3, r3, #16
 8009066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	330c      	adds	r3, #12
 8009070:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009074:	61fa      	str	r2, [r7, #28]
 8009076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009078:	69b9      	ldr	r1, [r7, #24]
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	e841 2300 	strex	r3, r2, [r1]
 8009080:	617b      	str	r3, [r7, #20]
   return(result);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e3      	bne.n	8009050 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f83e 	bl	8009110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009094:	e023      	b.n	80090de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d009      	beq.n	80090b6 <HAL_UART_IRQHandler+0x4ea>
 80090a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f95d 	bl	800936e <UART_Transmit_IT>
    return;
 80090b4:	e014      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <HAL_UART_IRQHandler+0x514>
 80090c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d008      	beq.n	80090e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f99d 	bl	800940e <UART_EndTransmit_IT>
    return;
 80090d4:	e004      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
    return;
 80090d6:	bf00      	nop
 80090d8:	e002      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
      return;
 80090da:	bf00      	nop
 80090dc:	e000      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
      return;
 80090de:	bf00      	nop
  }
}
 80090e0:	37e8      	adds	r7, #232	; 0xe8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop

080090e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b090      	sub	sp, #64	; 0x40
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009138:	e050      	b.n	80091dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d04c      	beq.n	80091dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <UART_WaitOnFlagUntilTimeout+0x30>
 8009148:	f7fa ff72 	bl	8004030 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009154:	429a      	cmp	r2, r3
 8009156:	d241      	bcs.n	80091dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	330c      	adds	r3, #12
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009178:	637a      	str	r2, [r7, #52]	; 0x34
 800917a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800917e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e5      	bne.n	8009158 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3314      	adds	r3, #20
 8009192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	613b      	str	r3, [r7, #16]
   return(result);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3314      	adds	r3, #20
 80091aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ac:	623a      	str	r2, [r7, #32]
 80091ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	69f9      	ldr	r1, [r7, #28]
 80091b2:	6a3a      	ldr	r2, [r7, #32]
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e5      	bne.n	800918c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e00f      	b.n	80091fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4013      	ands	r3, r2
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d09f      	beq.n	800913a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3740      	adds	r7, #64	; 0x40
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	88fa      	ldrh	r2, [r7, #6]
 8009222:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2222      	movs	r2, #34	; 0x22
 800922e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009250:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695a      	ldr	r2, [r3, #20]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f042 0220 	orr.w	r2, r2, #32
 8009270:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b095      	sub	sp, #84	; 0x54
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800929e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a8:	643a      	str	r2, [r7, #64]	; 0x40
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e5      	bne.n	8009288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3314      	adds	r3, #20
 80092c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3314      	adds	r3, #20
 80092da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e5      	bne.n	80092bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d119      	bne.n	800932c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	330c      	adds	r3, #12
 80092fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	60bb      	str	r3, [r7, #8]
   return(result);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f023 0310 	bic.w	r3, r3, #16
 800930e:	647b      	str	r3, [r7, #68]	; 0x44
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009318:	61ba      	str	r2, [r7, #24]
 800931a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6979      	ldr	r1, [r7, #20]
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	613b      	str	r3, [r7, #16]
   return(result);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e5      	bne.n	80092f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2220      	movs	r2, #32
 8009330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	631a      	str	r2, [r3, #48]	; 0x30
}
 800933a:	bf00      	nop
 800933c:	3754      	adds	r7, #84	; 0x54
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fecb 	bl	80090fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b21      	cmp	r3, #33	; 0x21
 8009380:	d13e      	bne.n	8009400 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938a:	d114      	bne.n	80093b6 <UART_Transmit_IT+0x48>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d110      	bne.n	80093b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	1c9a      	adds	r2, r3, #2
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	621a      	str	r2, [r3, #32]
 80093b4:	e008      	b.n	80093c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	1c59      	adds	r1, r3, #1
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6211      	str	r1, [r2, #32]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4619      	mov	r1, r3
 80093d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10f      	bne.n	80093fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	e000      	b.n	8009402 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009400:	2302      	movs	r3, #2
  }
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009424:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2220      	movs	r2, #32
 800942a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff fe5a 	bl	80090e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b08c      	sub	sp, #48	; 0x30
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b22      	cmp	r3, #34	; 0x22
 8009450:	f040 80ab 	bne.w	80095aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945c:	d117      	bne.n	800948e <UART_Receive_IT+0x50>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d113      	bne.n	800948e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	b29b      	uxth	r3, r3
 8009478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947c:	b29a      	uxth	r2, r3
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	1c9a      	adds	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	629a      	str	r2, [r3, #40]	; 0x28
 800948c:	e026      	b.n	80094dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a0:	d007      	beq.n	80094b2 <UART_Receive_IT+0x74>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10a      	bne.n	80094c0 <UART_Receive_IT+0x82>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e008      	b.n	80094d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	4619      	mov	r1, r3
 80094ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d15a      	bne.n	80095a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0220 	bic.w	r2, r2, #32
 80094fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800950e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0201 	bic.w	r2, r2, #1
 800951e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952c:	2b01      	cmp	r3, #1
 800952e:	d135      	bne.n	800959c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	330c      	adds	r3, #12
 800953c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	613b      	str	r3, [r7, #16]
   return(result);
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f023 0310 	bic.w	r3, r3, #16
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	330c      	adds	r3, #12
 8009554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009556:	623a      	str	r2, [r7, #32]
 8009558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	69f9      	ldr	r1, [r7, #28]
 800955c:	6a3a      	ldr	r2, [r7, #32]
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	61bb      	str	r3, [r7, #24]
   return(result);
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e5      	bne.n	8009536 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b10      	cmp	r3, #16
 8009576:	d10a      	bne.n	800958e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff fdbb 	bl	8009110 <HAL_UARTEx_RxEventCallback>
 800959a:	e002      	b.n	80095a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7f9 ff25 	bl	80033ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e002      	b.n	80095ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e000      	b.n	80095ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095aa:	2302      	movs	r3, #2
  }
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3730      	adds	r7, #48	; 0x30
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b8:	b0c0      	sub	sp, #256	; 0x100
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d0:	68d9      	ldr	r1, [r3, #12]
 80095d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	ea40 0301 	orr.w	r3, r0, r1
 80095dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800960c:	f021 010c 	bic.w	r1, r1, #12
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800961a:	430b      	orrs	r3, r1
 800961c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800962a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962e:	6999      	ldr	r1, [r3, #24]
 8009630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	ea40 0301 	orr.w	r3, r0, r1
 800963a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	4b8f      	ldr	r3, [pc, #572]	; (8009880 <UART_SetConfig+0x2cc>)
 8009644:	429a      	cmp	r2, r3
 8009646:	d005      	beq.n	8009654 <UART_SetConfig+0xa0>
 8009648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b8d      	ldr	r3, [pc, #564]	; (8009884 <UART_SetConfig+0x2d0>)
 8009650:	429a      	cmp	r2, r3
 8009652:	d104      	bne.n	800965e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009654:	f7fc fd34 	bl	80060c0 <HAL_RCC_GetPCLK2Freq>
 8009658:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800965c:	e003      	b.n	8009666 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800965e:	f7fc fd1b 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8009662:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009670:	f040 810c 	bne.w	800988c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009678:	2200      	movs	r2, #0
 800967a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800967e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009682:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009686:	4622      	mov	r2, r4
 8009688:	462b      	mov	r3, r5
 800968a:	1891      	adds	r1, r2, r2
 800968c:	65b9      	str	r1, [r7, #88]	; 0x58
 800968e:	415b      	adcs	r3, r3
 8009690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009692:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009696:	4621      	mov	r1, r4
 8009698:	eb12 0801 	adds.w	r8, r2, r1
 800969c:	4629      	mov	r1, r5
 800969e:	eb43 0901 	adc.w	r9, r3, r1
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096b6:	4690      	mov	r8, r2
 80096b8:	4699      	mov	r9, r3
 80096ba:	4623      	mov	r3, r4
 80096bc:	eb18 0303 	adds.w	r3, r8, r3
 80096c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096c4:	462b      	mov	r3, r5
 80096c6:	eb49 0303 	adc.w	r3, r9, r3
 80096ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096e2:	460b      	mov	r3, r1
 80096e4:	18db      	adds	r3, r3, r3
 80096e6:	653b      	str	r3, [r7, #80]	; 0x50
 80096e8:	4613      	mov	r3, r2
 80096ea:	eb42 0303 	adc.w	r3, r2, r3
 80096ee:	657b      	str	r3, [r7, #84]	; 0x54
 80096f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80096f8:	f7f7 fac6 	bl	8000c88 <__aeabi_uldivmod>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4b61      	ldr	r3, [pc, #388]	; (8009888 <UART_SetConfig+0x2d4>)
 8009702:	fba3 2302 	umull	r2, r3, r3, r2
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	011c      	lsls	r4, r3, #4
 800970a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970e:	2200      	movs	r2, #0
 8009710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009714:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009718:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	1891      	adds	r1, r2, r2
 8009722:	64b9      	str	r1, [r7, #72]	; 0x48
 8009724:	415b      	adcs	r3, r3
 8009726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009728:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800972c:	4641      	mov	r1, r8
 800972e:	eb12 0a01 	adds.w	sl, r2, r1
 8009732:	4649      	mov	r1, r9
 8009734:	eb43 0b01 	adc.w	fp, r3, r1
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009744:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800974c:	4692      	mov	sl, r2
 800974e:	469b      	mov	fp, r3
 8009750:	4643      	mov	r3, r8
 8009752:	eb1a 0303 	adds.w	r3, sl, r3
 8009756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800975a:	464b      	mov	r3, r9
 800975c:	eb4b 0303 	adc.w	r3, fp, r3
 8009760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009770:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009774:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009778:	460b      	mov	r3, r1
 800977a:	18db      	adds	r3, r3, r3
 800977c:	643b      	str	r3, [r7, #64]	; 0x40
 800977e:	4613      	mov	r3, r2
 8009780:	eb42 0303 	adc.w	r3, r2, r3
 8009784:	647b      	str	r3, [r7, #68]	; 0x44
 8009786:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800978a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800978e:	f7f7 fa7b 	bl	8000c88 <__aeabi_uldivmod>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4611      	mov	r1, r2
 8009798:	4b3b      	ldr	r3, [pc, #236]	; (8009888 <UART_SetConfig+0x2d4>)
 800979a:	fba3 2301 	umull	r2, r3, r3, r1
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	2264      	movs	r2, #100	; 0x64
 80097a2:	fb02 f303 	mul.w	r3, r2, r3
 80097a6:	1acb      	subs	r3, r1, r3
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097ae:	4b36      	ldr	r3, [pc, #216]	; (8009888 <UART_SetConfig+0x2d4>)
 80097b0:	fba3 2302 	umull	r2, r3, r3, r2
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097bc:	441c      	add	r4, r3
 80097be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097d0:	4642      	mov	r2, r8
 80097d2:	464b      	mov	r3, r9
 80097d4:	1891      	adds	r1, r2, r2
 80097d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80097d8:	415b      	adcs	r3, r3
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097e0:	4641      	mov	r1, r8
 80097e2:	1851      	adds	r1, r2, r1
 80097e4:	6339      	str	r1, [r7, #48]	; 0x30
 80097e6:	4649      	mov	r1, r9
 80097e8:	414b      	adcs	r3, r1
 80097ea:	637b      	str	r3, [r7, #52]	; 0x34
 80097ec:	f04f 0200 	mov.w	r2, #0
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80097f8:	4659      	mov	r1, fp
 80097fa:	00cb      	lsls	r3, r1, #3
 80097fc:	4651      	mov	r1, sl
 80097fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009802:	4651      	mov	r1, sl
 8009804:	00ca      	lsls	r2, r1, #3
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	4603      	mov	r3, r0
 800980c:	4642      	mov	r2, r8
 800980e:	189b      	adds	r3, r3, r2
 8009810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009814:	464b      	mov	r3, r9
 8009816:	460a      	mov	r2, r1
 8009818:	eb42 0303 	adc.w	r3, r2, r3
 800981c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800982c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009830:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009834:	460b      	mov	r3, r1
 8009836:	18db      	adds	r3, r3, r3
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
 800983a:	4613      	mov	r3, r2
 800983c:	eb42 0303 	adc.w	r3, r2, r3
 8009840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009846:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800984a:	f7f7 fa1d 	bl	8000c88 <__aeabi_uldivmod>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <UART_SetConfig+0x2d4>)
 8009854:	fba3 1302 	umull	r1, r3, r3, r2
 8009858:	095b      	lsrs	r3, r3, #5
 800985a:	2164      	movs	r1, #100	; 0x64
 800985c:	fb01 f303 	mul.w	r3, r1, r3
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	3332      	adds	r3, #50	; 0x32
 8009866:	4a08      	ldr	r2, [pc, #32]	; (8009888 <UART_SetConfig+0x2d4>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	095b      	lsrs	r3, r3, #5
 800986e:	f003 0207 	and.w	r2, r3, #7
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4422      	add	r2, r4
 800987a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800987c:	e105      	b.n	8009a8a <UART_SetConfig+0x4d6>
 800987e:	bf00      	nop
 8009880:	40011000 	.word	0x40011000
 8009884:	40011400 	.word	0x40011400
 8009888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800988c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009890:	2200      	movs	r2, #0
 8009892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009896:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800989a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800989e:	4642      	mov	r2, r8
 80098a0:	464b      	mov	r3, r9
 80098a2:	1891      	adds	r1, r2, r2
 80098a4:	6239      	str	r1, [r7, #32]
 80098a6:	415b      	adcs	r3, r3
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
 80098aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098ae:	4641      	mov	r1, r8
 80098b0:	1854      	adds	r4, r2, r1
 80098b2:	4649      	mov	r1, r9
 80098b4:	eb43 0501 	adc.w	r5, r3, r1
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	00eb      	lsls	r3, r5, #3
 80098c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098c6:	00e2      	lsls	r2, r4, #3
 80098c8:	4614      	mov	r4, r2
 80098ca:	461d      	mov	r5, r3
 80098cc:	4643      	mov	r3, r8
 80098ce:	18e3      	adds	r3, r4, r3
 80098d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098d4:	464b      	mov	r3, r9
 80098d6:	eb45 0303 	adc.w	r3, r5, r3
 80098da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098ee:	f04f 0200 	mov.w	r2, #0
 80098f2:	f04f 0300 	mov.w	r3, #0
 80098f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80098fa:	4629      	mov	r1, r5
 80098fc:	008b      	lsls	r3, r1, #2
 80098fe:	4621      	mov	r1, r4
 8009900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009904:	4621      	mov	r1, r4
 8009906:	008a      	lsls	r2, r1, #2
 8009908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800990c:	f7f7 f9bc 	bl	8000c88 <__aeabi_uldivmod>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4b60      	ldr	r3, [pc, #384]	; (8009a98 <UART_SetConfig+0x4e4>)
 8009916:	fba3 2302 	umull	r2, r3, r3, r2
 800991a:	095b      	lsrs	r3, r3, #5
 800991c:	011c      	lsls	r4, r3, #4
 800991e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009922:	2200      	movs	r2, #0
 8009924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009928:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800992c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009930:	4642      	mov	r2, r8
 8009932:	464b      	mov	r3, r9
 8009934:	1891      	adds	r1, r2, r2
 8009936:	61b9      	str	r1, [r7, #24]
 8009938:	415b      	adcs	r3, r3
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009940:	4641      	mov	r1, r8
 8009942:	1851      	adds	r1, r2, r1
 8009944:	6139      	str	r1, [r7, #16]
 8009946:	4649      	mov	r1, r9
 8009948:	414b      	adcs	r3, r1
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	f04f 0200 	mov.w	r2, #0
 8009950:	f04f 0300 	mov.w	r3, #0
 8009954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009958:	4659      	mov	r1, fp
 800995a:	00cb      	lsls	r3, r1, #3
 800995c:	4651      	mov	r1, sl
 800995e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009962:	4651      	mov	r1, sl
 8009964:	00ca      	lsls	r2, r1, #3
 8009966:	4610      	mov	r0, r2
 8009968:	4619      	mov	r1, r3
 800996a:	4603      	mov	r3, r0
 800996c:	4642      	mov	r2, r8
 800996e:	189b      	adds	r3, r3, r2
 8009970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009974:	464b      	mov	r3, r9
 8009976:	460a      	mov	r2, r1
 8009978:	eb42 0303 	adc.w	r3, r2, r3
 800997c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	67bb      	str	r3, [r7, #120]	; 0x78
 800998a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009998:	4649      	mov	r1, r9
 800999a:	008b      	lsls	r3, r1, #2
 800999c:	4641      	mov	r1, r8
 800999e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099a2:	4641      	mov	r1, r8
 80099a4:	008a      	lsls	r2, r1, #2
 80099a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099aa:	f7f7 f96d 	bl	8000c88 <__aeabi_uldivmod>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4b39      	ldr	r3, [pc, #228]	; (8009a98 <UART_SetConfig+0x4e4>)
 80099b4:	fba3 1302 	umull	r1, r3, r3, r2
 80099b8:	095b      	lsrs	r3, r3, #5
 80099ba:	2164      	movs	r1, #100	; 0x64
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	011b      	lsls	r3, r3, #4
 80099c4:	3332      	adds	r3, #50	; 0x32
 80099c6:	4a34      	ldr	r2, [pc, #208]	; (8009a98 <UART_SetConfig+0x4e4>)
 80099c8:	fba2 2303 	umull	r2, r3, r2, r3
 80099cc:	095b      	lsrs	r3, r3, #5
 80099ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099d2:	441c      	add	r4, r3
 80099d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099d8:	2200      	movs	r2, #0
 80099da:	673b      	str	r3, [r7, #112]	; 0x70
 80099dc:	677a      	str	r2, [r7, #116]	; 0x74
 80099de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099e2:	4642      	mov	r2, r8
 80099e4:	464b      	mov	r3, r9
 80099e6:	1891      	adds	r1, r2, r2
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	415b      	adcs	r3, r3
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099f2:	4641      	mov	r1, r8
 80099f4:	1851      	adds	r1, r2, r1
 80099f6:	6039      	str	r1, [r7, #0]
 80099f8:	4649      	mov	r1, r9
 80099fa:	414b      	adcs	r3, r1
 80099fc:	607b      	str	r3, [r7, #4]
 80099fe:	f04f 0200 	mov.w	r2, #0
 8009a02:	f04f 0300 	mov.w	r3, #0
 8009a06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a0a:	4659      	mov	r1, fp
 8009a0c:	00cb      	lsls	r3, r1, #3
 8009a0e:	4651      	mov	r1, sl
 8009a10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a14:	4651      	mov	r1, sl
 8009a16:	00ca      	lsls	r2, r1, #3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4642      	mov	r2, r8
 8009a20:	189b      	adds	r3, r3, r2
 8009a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a24:	464b      	mov	r3, r9
 8009a26:	460a      	mov	r2, r1
 8009a28:	eb42 0303 	adc.w	r3, r2, r3
 8009a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	663b      	str	r3, [r7, #96]	; 0x60
 8009a38:	667a      	str	r2, [r7, #100]	; 0x64
 8009a3a:	f04f 0200 	mov.w	r2, #0
 8009a3e:	f04f 0300 	mov.w	r3, #0
 8009a42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a46:	4649      	mov	r1, r9
 8009a48:	008b      	lsls	r3, r1, #2
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a50:	4641      	mov	r1, r8
 8009a52:	008a      	lsls	r2, r1, #2
 8009a54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a58:	f7f7 f916 	bl	8000c88 <__aeabi_uldivmod>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <UART_SetConfig+0x4e4>)
 8009a62:	fba3 1302 	umull	r1, r3, r3, r2
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	2164      	movs	r1, #100	; 0x64
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	011b      	lsls	r3, r3, #4
 8009a72:	3332      	adds	r3, #50	; 0x32
 8009a74:	4a08      	ldr	r2, [pc, #32]	; (8009a98 <UART_SetConfig+0x4e4>)
 8009a76:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	f003 020f 	and.w	r2, r3, #15
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4422      	add	r2, r4
 8009a88:	609a      	str	r2, [r3, #8]
}
 8009a8a:	bf00      	nop
 8009a8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a90:	46bd      	mov	sp, r7
 8009a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a96:	bf00      	nop
 8009a98:	51eb851f 	.word	0x51eb851f

08009a9c <__errno>:
 8009a9c:	4b01      	ldr	r3, [pc, #4]	; (8009aa4 <__errno+0x8>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20000058 	.word	0x20000058

08009aa8 <__libc_init_array>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4d0d      	ldr	r5, [pc, #52]	; (8009ae0 <__libc_init_array+0x38>)
 8009aac:	4c0d      	ldr	r4, [pc, #52]	; (8009ae4 <__libc_init_array+0x3c>)
 8009aae:	1b64      	subs	r4, r4, r5
 8009ab0:	10a4      	asrs	r4, r4, #2
 8009ab2:	2600      	movs	r6, #0
 8009ab4:	42a6      	cmp	r6, r4
 8009ab6:	d109      	bne.n	8009acc <__libc_init_array+0x24>
 8009ab8:	4d0b      	ldr	r5, [pc, #44]	; (8009ae8 <__libc_init_array+0x40>)
 8009aba:	4c0c      	ldr	r4, [pc, #48]	; (8009aec <__libc_init_array+0x44>)
 8009abc:	f004 f952 	bl	800dd64 <_init>
 8009ac0:	1b64      	subs	r4, r4, r5
 8009ac2:	10a4      	asrs	r4, r4, #2
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	42a6      	cmp	r6, r4
 8009ac8:	d105      	bne.n	8009ad6 <__libc_init_array+0x2e>
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad0:	4798      	blx	r3
 8009ad2:	3601      	adds	r6, #1
 8009ad4:	e7ee      	b.n	8009ab4 <__libc_init_array+0xc>
 8009ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ada:	4798      	blx	r3
 8009adc:	3601      	adds	r6, #1
 8009ade:	e7f2      	b.n	8009ac6 <__libc_init_array+0x1e>
 8009ae0:	0800e438 	.word	0x0800e438
 8009ae4:	0800e438 	.word	0x0800e438
 8009ae8:	0800e438 	.word	0x0800e438
 8009aec:	0800e43c 	.word	0x0800e43c

08009af0 <memset>:
 8009af0:	4402      	add	r2, r0
 8009af2:	4603      	mov	r3, r0
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d100      	bne.n	8009afa <memset+0xa>
 8009af8:	4770      	bx	lr
 8009afa:	f803 1b01 	strb.w	r1, [r3], #1
 8009afe:	e7f9      	b.n	8009af4 <memset+0x4>

08009b00 <__cvt>:
 8009b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	ec55 4b10 	vmov	r4, r5, d0
 8009b08:	2d00      	cmp	r5, #0
 8009b0a:	460e      	mov	r6, r1
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	462b      	mov	r3, r5
 8009b10:	bfbb      	ittet	lt
 8009b12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b16:	461d      	movlt	r5, r3
 8009b18:	2300      	movge	r3, #0
 8009b1a:	232d      	movlt	r3, #45	; 0x2d
 8009b1c:	700b      	strb	r3, [r1, #0]
 8009b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b24:	4691      	mov	r9, r2
 8009b26:	f023 0820 	bic.w	r8, r3, #32
 8009b2a:	bfbc      	itt	lt
 8009b2c:	4622      	movlt	r2, r4
 8009b2e:	4614      	movlt	r4, r2
 8009b30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b34:	d005      	beq.n	8009b42 <__cvt+0x42>
 8009b36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b3a:	d100      	bne.n	8009b3e <__cvt+0x3e>
 8009b3c:	3601      	adds	r6, #1
 8009b3e:	2102      	movs	r1, #2
 8009b40:	e000      	b.n	8009b44 <__cvt+0x44>
 8009b42:	2103      	movs	r1, #3
 8009b44:	ab03      	add	r3, sp, #12
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	ab02      	add	r3, sp, #8
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	ec45 4b10 	vmov	d0, r4, r5
 8009b50:	4653      	mov	r3, sl
 8009b52:	4632      	mov	r2, r6
 8009b54:	f000 fcec 	bl	800a530 <_dtoa_r>
 8009b58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	d102      	bne.n	8009b66 <__cvt+0x66>
 8009b60:	f019 0f01 	tst.w	r9, #1
 8009b64:	d022      	beq.n	8009bac <__cvt+0xac>
 8009b66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b6a:	eb07 0906 	add.w	r9, r7, r6
 8009b6e:	d110      	bne.n	8009b92 <__cvt+0x92>
 8009b70:	783b      	ldrb	r3, [r7, #0]
 8009b72:	2b30      	cmp	r3, #48	; 0x30
 8009b74:	d10a      	bne.n	8009b8c <__cvt+0x8c>
 8009b76:	2200      	movs	r2, #0
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	f7f6 ffc3 	bl	8000b08 <__aeabi_dcmpeq>
 8009b82:	b918      	cbnz	r0, 8009b8c <__cvt+0x8c>
 8009b84:	f1c6 0601 	rsb	r6, r6, #1
 8009b88:	f8ca 6000 	str.w	r6, [sl]
 8009b8c:	f8da 3000 	ldr.w	r3, [sl]
 8009b90:	4499      	add	r9, r3
 8009b92:	2200      	movs	r2, #0
 8009b94:	2300      	movs	r3, #0
 8009b96:	4620      	mov	r0, r4
 8009b98:	4629      	mov	r1, r5
 8009b9a:	f7f6 ffb5 	bl	8000b08 <__aeabi_dcmpeq>
 8009b9e:	b108      	cbz	r0, 8009ba4 <__cvt+0xa4>
 8009ba0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ba4:	2230      	movs	r2, #48	; 0x30
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	454b      	cmp	r3, r9
 8009baa:	d307      	bcc.n	8009bbc <__cvt+0xbc>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bb0:	1bdb      	subs	r3, r3, r7
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	b004      	add	sp, #16
 8009bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbc:	1c59      	adds	r1, r3, #1
 8009bbe:	9103      	str	r1, [sp, #12]
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	e7f0      	b.n	8009ba6 <__cvt+0xa6>

08009bc4 <__exponent>:
 8009bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2900      	cmp	r1, #0
 8009bca:	bfb8      	it	lt
 8009bcc:	4249      	neglt	r1, r1
 8009bce:	f803 2b02 	strb.w	r2, [r3], #2
 8009bd2:	bfb4      	ite	lt
 8009bd4:	222d      	movlt	r2, #45	; 0x2d
 8009bd6:	222b      	movge	r2, #43	; 0x2b
 8009bd8:	2909      	cmp	r1, #9
 8009bda:	7042      	strb	r2, [r0, #1]
 8009bdc:	dd2a      	ble.n	8009c34 <__exponent+0x70>
 8009bde:	f10d 0407 	add.w	r4, sp, #7
 8009be2:	46a4      	mov	ip, r4
 8009be4:	270a      	movs	r7, #10
 8009be6:	46a6      	mov	lr, r4
 8009be8:	460a      	mov	r2, r1
 8009bea:	fb91 f6f7 	sdiv	r6, r1, r7
 8009bee:	fb07 1516 	mls	r5, r7, r6, r1
 8009bf2:	3530      	adds	r5, #48	; 0x30
 8009bf4:	2a63      	cmp	r2, #99	; 0x63
 8009bf6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009bfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009bfe:	4631      	mov	r1, r6
 8009c00:	dcf1      	bgt.n	8009be6 <__exponent+0x22>
 8009c02:	3130      	adds	r1, #48	; 0x30
 8009c04:	f1ae 0502 	sub.w	r5, lr, #2
 8009c08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c0c:	1c44      	adds	r4, r0, #1
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4561      	cmp	r1, ip
 8009c12:	d30a      	bcc.n	8009c2a <__exponent+0x66>
 8009c14:	f10d 0209 	add.w	r2, sp, #9
 8009c18:	eba2 020e 	sub.w	r2, r2, lr
 8009c1c:	4565      	cmp	r5, ip
 8009c1e:	bf88      	it	hi
 8009c20:	2200      	movhi	r2, #0
 8009c22:	4413      	add	r3, r2
 8009c24:	1a18      	subs	r0, r3, r0
 8009c26:	b003      	add	sp, #12
 8009c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c32:	e7ed      	b.n	8009c10 <__exponent+0x4c>
 8009c34:	2330      	movs	r3, #48	; 0x30
 8009c36:	3130      	adds	r1, #48	; 0x30
 8009c38:	7083      	strb	r3, [r0, #2]
 8009c3a:	70c1      	strb	r1, [r0, #3]
 8009c3c:	1d03      	adds	r3, r0, #4
 8009c3e:	e7f1      	b.n	8009c24 <__exponent+0x60>

08009c40 <_printf_float>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	ed2d 8b02 	vpush	{d8}
 8009c48:	b08d      	sub	sp, #52	; 0x34
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c50:	4616      	mov	r6, r2
 8009c52:	461f      	mov	r7, r3
 8009c54:	4605      	mov	r5, r0
 8009c56:	f001 fa59 	bl	800b10c <_localeconv_r>
 8009c5a:	f8d0 a000 	ldr.w	sl, [r0]
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f7f6 fad6 	bl	8000210 <strlen>
 8009c64:	2300      	movs	r3, #0
 8009c66:	930a      	str	r3, [sp, #40]	; 0x28
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	9305      	str	r3, [sp, #20]
 8009c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c74:	3307      	adds	r3, #7
 8009c76:	f023 0307 	bic.w	r3, r3, #7
 8009c7a:	f103 0208 	add.w	r2, r3, #8
 8009c7e:	f8c8 2000 	str.w	r2, [r8]
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c92:	9307      	str	r3, [sp, #28]
 8009c94:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c98:	ee08 0a10 	vmov	s16, r0
 8009c9c:	4b9f      	ldr	r3, [pc, #636]	; (8009f1c <_printf_float+0x2dc>)
 8009c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca6:	f7f6 ff61 	bl	8000b6c <__aeabi_dcmpun>
 8009caa:	bb88      	cbnz	r0, 8009d10 <_printf_float+0xd0>
 8009cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cb0:	4b9a      	ldr	r3, [pc, #616]	; (8009f1c <_printf_float+0x2dc>)
 8009cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb6:	f7f6 ff3b 	bl	8000b30 <__aeabi_dcmple>
 8009cba:	bb48      	cbnz	r0, 8009d10 <_printf_float+0xd0>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 ff2a 	bl	8000b1c <__aeabi_dcmplt>
 8009cc8:	b110      	cbz	r0, 8009cd0 <_printf_float+0x90>
 8009cca:	232d      	movs	r3, #45	; 0x2d
 8009ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd0:	4b93      	ldr	r3, [pc, #588]	; (8009f20 <_printf_float+0x2e0>)
 8009cd2:	4894      	ldr	r0, [pc, #592]	; (8009f24 <_printf_float+0x2e4>)
 8009cd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009cd8:	bf94      	ite	ls
 8009cda:	4698      	movls	r8, r3
 8009cdc:	4680      	movhi	r8, r0
 8009cde:	2303      	movs	r3, #3
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	9b05      	ldr	r3, [sp, #20]
 8009ce4:	f023 0204 	bic.w	r2, r3, #4
 8009ce8:	6022      	str	r2, [r4, #0]
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	9700      	str	r7, [sp, #0]
 8009cf0:	4633      	mov	r3, r6
 8009cf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 f9d8 	bl	800a0ac <_printf_common>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f040 8090 	bne.w	8009e22 <_printf_float+0x1e2>
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	b00d      	add	sp, #52	; 0x34
 8009d08:	ecbd 8b02 	vpop	{d8}
 8009d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d10:	4642      	mov	r2, r8
 8009d12:	464b      	mov	r3, r9
 8009d14:	4640      	mov	r0, r8
 8009d16:	4649      	mov	r1, r9
 8009d18:	f7f6 ff28 	bl	8000b6c <__aeabi_dcmpun>
 8009d1c:	b140      	cbz	r0, 8009d30 <_printf_float+0xf0>
 8009d1e:	464b      	mov	r3, r9
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bfbc      	itt	lt
 8009d24:	232d      	movlt	r3, #45	; 0x2d
 8009d26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d2a:	487f      	ldr	r0, [pc, #508]	; (8009f28 <_printf_float+0x2e8>)
 8009d2c:	4b7f      	ldr	r3, [pc, #508]	; (8009f2c <_printf_float+0x2ec>)
 8009d2e:	e7d1      	b.n	8009cd4 <_printf_float+0x94>
 8009d30:	6863      	ldr	r3, [r4, #4]
 8009d32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d36:	9206      	str	r2, [sp, #24]
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	d13f      	bne.n	8009dbc <_printf_float+0x17c>
 8009d3c:	2306      	movs	r3, #6
 8009d3e:	6063      	str	r3, [r4, #4]
 8009d40:	9b05      	ldr	r3, [sp, #20]
 8009d42:	6861      	ldr	r1, [r4, #4]
 8009d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9303      	str	r3, [sp, #12]
 8009d4c:	ab0a      	add	r3, sp, #40	; 0x28
 8009d4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d52:	ab09      	add	r3, sp, #36	; 0x24
 8009d54:	ec49 8b10 	vmov	d0, r8, r9
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	6022      	str	r2, [r4, #0]
 8009d5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d60:	4628      	mov	r0, r5
 8009d62:	f7ff fecd 	bl	8009b00 <__cvt>
 8009d66:	9b06      	ldr	r3, [sp, #24]
 8009d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d6a:	2b47      	cmp	r3, #71	; 0x47
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	d108      	bne.n	8009d82 <_printf_float+0x142>
 8009d70:	1cc8      	adds	r0, r1, #3
 8009d72:	db02      	blt.n	8009d7a <_printf_float+0x13a>
 8009d74:	6863      	ldr	r3, [r4, #4]
 8009d76:	4299      	cmp	r1, r3
 8009d78:	dd41      	ble.n	8009dfe <_printf_float+0x1be>
 8009d7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009d7e:	fa5f fb8b 	uxtb.w	fp, fp
 8009d82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d86:	d820      	bhi.n	8009dca <_printf_float+0x18a>
 8009d88:	3901      	subs	r1, #1
 8009d8a:	465a      	mov	r2, fp
 8009d8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d90:	9109      	str	r1, [sp, #36]	; 0x24
 8009d92:	f7ff ff17 	bl	8009bc4 <__exponent>
 8009d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d98:	1813      	adds	r3, r2, r0
 8009d9a:	2a01      	cmp	r2, #1
 8009d9c:	4681      	mov	r9, r0
 8009d9e:	6123      	str	r3, [r4, #16]
 8009da0:	dc02      	bgt.n	8009da8 <_printf_float+0x168>
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	07d2      	lsls	r2, r2, #31
 8009da6:	d501      	bpl.n	8009dac <_printf_float+0x16c>
 8009da8:	3301      	adds	r3, #1
 8009daa:	6123      	str	r3, [r4, #16]
 8009dac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d09c      	beq.n	8009cee <_printf_float+0xae>
 8009db4:	232d      	movs	r3, #45	; 0x2d
 8009db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dba:	e798      	b.n	8009cee <_printf_float+0xae>
 8009dbc:	9a06      	ldr	r2, [sp, #24]
 8009dbe:	2a47      	cmp	r2, #71	; 0x47
 8009dc0:	d1be      	bne.n	8009d40 <_printf_float+0x100>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1bc      	bne.n	8009d40 <_printf_float+0x100>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e7b9      	b.n	8009d3e <_printf_float+0xfe>
 8009dca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009dce:	d118      	bne.n	8009e02 <_printf_float+0x1c2>
 8009dd0:	2900      	cmp	r1, #0
 8009dd2:	6863      	ldr	r3, [r4, #4]
 8009dd4:	dd0b      	ble.n	8009dee <_printf_float+0x1ae>
 8009dd6:	6121      	str	r1, [r4, #16]
 8009dd8:	b913      	cbnz	r3, 8009de0 <_printf_float+0x1a0>
 8009dda:	6822      	ldr	r2, [r4, #0]
 8009ddc:	07d0      	lsls	r0, r2, #31
 8009dde:	d502      	bpl.n	8009de6 <_printf_float+0x1a6>
 8009de0:	3301      	adds	r3, #1
 8009de2:	440b      	add	r3, r1
 8009de4:	6123      	str	r3, [r4, #16]
 8009de6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009de8:	f04f 0900 	mov.w	r9, #0
 8009dec:	e7de      	b.n	8009dac <_printf_float+0x16c>
 8009dee:	b913      	cbnz	r3, 8009df6 <_printf_float+0x1b6>
 8009df0:	6822      	ldr	r2, [r4, #0]
 8009df2:	07d2      	lsls	r2, r2, #31
 8009df4:	d501      	bpl.n	8009dfa <_printf_float+0x1ba>
 8009df6:	3302      	adds	r3, #2
 8009df8:	e7f4      	b.n	8009de4 <_printf_float+0x1a4>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e7f2      	b.n	8009de4 <_printf_float+0x1a4>
 8009dfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e04:	4299      	cmp	r1, r3
 8009e06:	db05      	blt.n	8009e14 <_printf_float+0x1d4>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	6121      	str	r1, [r4, #16]
 8009e0c:	07d8      	lsls	r0, r3, #31
 8009e0e:	d5ea      	bpl.n	8009de6 <_printf_float+0x1a6>
 8009e10:	1c4b      	adds	r3, r1, #1
 8009e12:	e7e7      	b.n	8009de4 <_printf_float+0x1a4>
 8009e14:	2900      	cmp	r1, #0
 8009e16:	bfd4      	ite	le
 8009e18:	f1c1 0202 	rsble	r2, r1, #2
 8009e1c:	2201      	movgt	r2, #1
 8009e1e:	4413      	add	r3, r2
 8009e20:	e7e0      	b.n	8009de4 <_printf_float+0x1a4>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	055a      	lsls	r2, r3, #21
 8009e26:	d407      	bmi.n	8009e38 <_printf_float+0x1f8>
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	4642      	mov	r2, r8
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	d12c      	bne.n	8009e90 <_printf_float+0x250>
 8009e36:	e764      	b.n	8009d02 <_printf_float+0xc2>
 8009e38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e3c:	f240 80e0 	bls.w	800a000 <_printf_float+0x3c0>
 8009e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e44:	2200      	movs	r2, #0
 8009e46:	2300      	movs	r3, #0
 8009e48:	f7f6 fe5e 	bl	8000b08 <__aeabi_dcmpeq>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d034      	beq.n	8009eba <_printf_float+0x27a>
 8009e50:	4a37      	ldr	r2, [pc, #220]	; (8009f30 <_printf_float+0x2f0>)
 8009e52:	2301      	movs	r3, #1
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b8      	blx	r7
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	f43f af51 	beq.w	8009d02 <_printf_float+0xc2>
 8009e60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e64:	429a      	cmp	r2, r3
 8009e66:	db02      	blt.n	8009e6e <_printf_float+0x22e>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	07d8      	lsls	r0, r3, #31
 8009e6c:	d510      	bpl.n	8009e90 <_printf_float+0x250>
 8009e6e:	ee18 3a10 	vmov	r3, s16
 8009e72:	4652      	mov	r2, sl
 8009e74:	4631      	mov	r1, r6
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	f43f af41 	beq.w	8009d02 <_printf_float+0xc2>
 8009e80:	f04f 0800 	mov.w	r8, #0
 8009e84:	f104 091a 	add.w	r9, r4, #26
 8009e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	4543      	cmp	r3, r8
 8009e8e:	dc09      	bgt.n	8009ea4 <_printf_float+0x264>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	079b      	lsls	r3, r3, #30
 8009e94:	f100 8105 	bmi.w	800a0a2 <_printf_float+0x462>
 8009e98:	68e0      	ldr	r0, [r4, #12]
 8009e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e9c:	4298      	cmp	r0, r3
 8009e9e:	bfb8      	it	lt
 8009ea0:	4618      	movlt	r0, r3
 8009ea2:	e730      	b.n	8009d06 <_printf_float+0xc6>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	464a      	mov	r2, r9
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f43f af27 	beq.w	8009d02 <_printf_float+0xc2>
 8009eb4:	f108 0801 	add.w	r8, r8, #1
 8009eb8:	e7e6      	b.n	8009e88 <_printf_float+0x248>
 8009eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dc39      	bgt.n	8009f34 <_printf_float+0x2f4>
 8009ec0:	4a1b      	ldr	r2, [pc, #108]	; (8009f30 <_printf_float+0x2f0>)
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f43f af19 	beq.w	8009d02 <_printf_float+0xc2>
 8009ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	d102      	bne.n	8009ede <_printf_float+0x29e>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	07d9      	lsls	r1, r3, #31
 8009edc:	d5d8      	bpl.n	8009e90 <_printf_float+0x250>
 8009ede:	ee18 3a10 	vmov	r3, s16
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	f43f af09 	beq.w	8009d02 <_printf_float+0xc2>
 8009ef0:	f04f 0900 	mov.w	r9, #0
 8009ef4:	f104 0a1a 	add.w	sl, r4, #26
 8009ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efa:	425b      	negs	r3, r3
 8009efc:	454b      	cmp	r3, r9
 8009efe:	dc01      	bgt.n	8009f04 <_printf_float+0x2c4>
 8009f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f02:	e792      	b.n	8009e2a <_printf_float+0x1ea>
 8009f04:	2301      	movs	r3, #1
 8009f06:	4652      	mov	r2, sl
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f43f aef7 	beq.w	8009d02 <_printf_float+0xc2>
 8009f14:	f109 0901 	add.w	r9, r9, #1
 8009f18:	e7ee      	b.n	8009ef8 <_printf_float+0x2b8>
 8009f1a:	bf00      	nop
 8009f1c:	7fefffff 	.word	0x7fefffff
 8009f20:	0800de3c 	.word	0x0800de3c
 8009f24:	0800de40 	.word	0x0800de40
 8009f28:	0800de48 	.word	0x0800de48
 8009f2c:	0800de44 	.word	0x0800de44
 8009f30:	0800de4c 	.word	0x0800de4c
 8009f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	bfa8      	it	ge
 8009f3c:	461a      	movge	r2, r3
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	4691      	mov	r9, r2
 8009f42:	dc37      	bgt.n	8009fb4 <_printf_float+0x374>
 8009f44:	f04f 0b00 	mov.w	fp, #0
 8009f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f4c:	f104 021a 	add.w	r2, r4, #26
 8009f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f52:	9305      	str	r3, [sp, #20]
 8009f54:	eba3 0309 	sub.w	r3, r3, r9
 8009f58:	455b      	cmp	r3, fp
 8009f5a:	dc33      	bgt.n	8009fc4 <_printf_float+0x384>
 8009f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f60:	429a      	cmp	r2, r3
 8009f62:	db3b      	blt.n	8009fdc <_printf_float+0x39c>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	07da      	lsls	r2, r3, #31
 8009f68:	d438      	bmi.n	8009fdc <_printf_float+0x39c>
 8009f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6c:	9a05      	ldr	r2, [sp, #20]
 8009f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f70:	1a9a      	subs	r2, r3, r2
 8009f72:	eba3 0901 	sub.w	r9, r3, r1
 8009f76:	4591      	cmp	r9, r2
 8009f78:	bfa8      	it	ge
 8009f7a:	4691      	movge	r9, r2
 8009f7c:	f1b9 0f00 	cmp.w	r9, #0
 8009f80:	dc35      	bgt.n	8009fee <_printf_float+0x3ae>
 8009f82:	f04f 0800 	mov.w	r8, #0
 8009f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f8a:	f104 0a1a 	add.w	sl, r4, #26
 8009f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f92:	1a9b      	subs	r3, r3, r2
 8009f94:	eba3 0309 	sub.w	r3, r3, r9
 8009f98:	4543      	cmp	r3, r8
 8009f9a:	f77f af79 	ble.w	8009e90 <_printf_float+0x250>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	f43f aeaa 	beq.w	8009d02 <_printf_float+0xc2>
 8009fae:	f108 0801 	add.w	r8, r8, #1
 8009fb2:	e7ec      	b.n	8009f8e <_printf_float+0x34e>
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4642      	mov	r2, r8
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d1c0      	bne.n	8009f44 <_printf_float+0x304>
 8009fc2:	e69e      	b.n	8009d02 <_printf_float+0xc2>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4628      	mov	r0, r5
 8009fca:	9205      	str	r2, [sp, #20]
 8009fcc:	47b8      	blx	r7
 8009fce:	3001      	adds	r0, #1
 8009fd0:	f43f ae97 	beq.w	8009d02 <_printf_float+0xc2>
 8009fd4:	9a05      	ldr	r2, [sp, #20]
 8009fd6:	f10b 0b01 	add.w	fp, fp, #1
 8009fda:	e7b9      	b.n	8009f50 <_printf_float+0x310>
 8009fdc:	ee18 3a10 	vmov	r3, s16
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	47b8      	blx	r7
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d1be      	bne.n	8009f6a <_printf_float+0x32a>
 8009fec:	e689      	b.n	8009d02 <_printf_float+0xc2>
 8009fee:	9a05      	ldr	r2, [sp, #20]
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	4442      	add	r2, r8
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	47b8      	blx	r7
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d1c1      	bne.n	8009f82 <_printf_float+0x342>
 8009ffe:	e680      	b.n	8009d02 <_printf_float+0xc2>
 800a000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a002:	2a01      	cmp	r2, #1
 800a004:	dc01      	bgt.n	800a00a <_printf_float+0x3ca>
 800a006:	07db      	lsls	r3, r3, #31
 800a008:	d538      	bpl.n	800a07c <_printf_float+0x43c>
 800a00a:	2301      	movs	r3, #1
 800a00c:	4642      	mov	r2, r8
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	47b8      	blx	r7
 800a014:	3001      	adds	r0, #1
 800a016:	f43f ae74 	beq.w	8009d02 <_printf_float+0xc2>
 800a01a:	ee18 3a10 	vmov	r3, s16
 800a01e:	4652      	mov	r2, sl
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f ae6b 	beq.w	8009d02 <_printf_float+0xc2>
 800a02c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a030:	2200      	movs	r2, #0
 800a032:	2300      	movs	r3, #0
 800a034:	f7f6 fd68 	bl	8000b08 <__aeabi_dcmpeq>
 800a038:	b9d8      	cbnz	r0, 800a072 <_printf_float+0x432>
 800a03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03c:	f108 0201 	add.w	r2, r8, #1
 800a040:	3b01      	subs	r3, #1
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	47b8      	blx	r7
 800a048:	3001      	adds	r0, #1
 800a04a:	d10e      	bne.n	800a06a <_printf_float+0x42a>
 800a04c:	e659      	b.n	8009d02 <_printf_float+0xc2>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f ae52 	beq.w	8009d02 <_printf_float+0xc2>
 800a05e:	f108 0801 	add.w	r8, r8, #1
 800a062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a064:	3b01      	subs	r3, #1
 800a066:	4543      	cmp	r3, r8
 800a068:	dcf1      	bgt.n	800a04e <_printf_float+0x40e>
 800a06a:	464b      	mov	r3, r9
 800a06c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a070:	e6dc      	b.n	8009e2c <_printf_float+0x1ec>
 800a072:	f04f 0800 	mov.w	r8, #0
 800a076:	f104 0a1a 	add.w	sl, r4, #26
 800a07a:	e7f2      	b.n	800a062 <_printf_float+0x422>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4642      	mov	r2, r8
 800a080:	e7df      	b.n	800a042 <_printf_float+0x402>
 800a082:	2301      	movs	r3, #1
 800a084:	464a      	mov	r2, r9
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	f43f ae38 	beq.w	8009d02 <_printf_float+0xc2>
 800a092:	f108 0801 	add.w	r8, r8, #1
 800a096:	68e3      	ldr	r3, [r4, #12]
 800a098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a09a:	1a5b      	subs	r3, r3, r1
 800a09c:	4543      	cmp	r3, r8
 800a09e:	dcf0      	bgt.n	800a082 <_printf_float+0x442>
 800a0a0:	e6fa      	b.n	8009e98 <_printf_float+0x258>
 800a0a2:	f04f 0800 	mov.w	r8, #0
 800a0a6:	f104 0919 	add.w	r9, r4, #25
 800a0aa:	e7f4      	b.n	800a096 <_printf_float+0x456>

0800a0ac <_printf_common>:
 800a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b0:	4616      	mov	r6, r2
 800a0b2:	4699      	mov	r9, r3
 800a0b4:	688a      	ldr	r2, [r1, #8]
 800a0b6:	690b      	ldr	r3, [r1, #16]
 800a0b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	bfb8      	it	lt
 800a0c0:	4613      	movlt	r3, r2
 800a0c2:	6033      	str	r3, [r6, #0]
 800a0c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	b10a      	cbz	r2, 800a0d2 <_printf_common+0x26>
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	6033      	str	r3, [r6, #0]
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	0699      	lsls	r1, r3, #26
 800a0d6:	bf42      	ittt	mi
 800a0d8:	6833      	ldrmi	r3, [r6, #0]
 800a0da:	3302      	addmi	r3, #2
 800a0dc:	6033      	strmi	r3, [r6, #0]
 800a0de:	6825      	ldr	r5, [r4, #0]
 800a0e0:	f015 0506 	ands.w	r5, r5, #6
 800a0e4:	d106      	bne.n	800a0f4 <_printf_common+0x48>
 800a0e6:	f104 0a19 	add.w	sl, r4, #25
 800a0ea:	68e3      	ldr	r3, [r4, #12]
 800a0ec:	6832      	ldr	r2, [r6, #0]
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	dc26      	bgt.n	800a142 <_printf_common+0x96>
 800a0f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0f8:	1e13      	subs	r3, r2, #0
 800a0fa:	6822      	ldr	r2, [r4, #0]
 800a0fc:	bf18      	it	ne
 800a0fe:	2301      	movne	r3, #1
 800a100:	0692      	lsls	r2, r2, #26
 800a102:	d42b      	bmi.n	800a15c <_printf_common+0xb0>
 800a104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a108:	4649      	mov	r1, r9
 800a10a:	4638      	mov	r0, r7
 800a10c:	47c0      	blx	r8
 800a10e:	3001      	adds	r0, #1
 800a110:	d01e      	beq.n	800a150 <_printf_common+0xa4>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	68e5      	ldr	r5, [r4, #12]
 800a116:	6832      	ldr	r2, [r6, #0]
 800a118:	f003 0306 	and.w	r3, r3, #6
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	bf08      	it	eq
 800a120:	1aad      	subeq	r5, r5, r2
 800a122:	68a3      	ldr	r3, [r4, #8]
 800a124:	6922      	ldr	r2, [r4, #16]
 800a126:	bf0c      	ite	eq
 800a128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a12c:	2500      	movne	r5, #0
 800a12e:	4293      	cmp	r3, r2
 800a130:	bfc4      	itt	gt
 800a132:	1a9b      	subgt	r3, r3, r2
 800a134:	18ed      	addgt	r5, r5, r3
 800a136:	2600      	movs	r6, #0
 800a138:	341a      	adds	r4, #26
 800a13a:	42b5      	cmp	r5, r6
 800a13c:	d11a      	bne.n	800a174 <_printf_common+0xc8>
 800a13e:	2000      	movs	r0, #0
 800a140:	e008      	b.n	800a154 <_printf_common+0xa8>
 800a142:	2301      	movs	r3, #1
 800a144:	4652      	mov	r2, sl
 800a146:	4649      	mov	r1, r9
 800a148:	4638      	mov	r0, r7
 800a14a:	47c0      	blx	r8
 800a14c:	3001      	adds	r0, #1
 800a14e:	d103      	bne.n	800a158 <_printf_common+0xac>
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	3501      	adds	r5, #1
 800a15a:	e7c6      	b.n	800a0ea <_printf_common+0x3e>
 800a15c:	18e1      	adds	r1, r4, r3
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	2030      	movs	r0, #48	; 0x30
 800a162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a166:	4422      	add	r2, r4
 800a168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a16c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a170:	3302      	adds	r3, #2
 800a172:	e7c7      	b.n	800a104 <_printf_common+0x58>
 800a174:	2301      	movs	r3, #1
 800a176:	4622      	mov	r2, r4
 800a178:	4649      	mov	r1, r9
 800a17a:	4638      	mov	r0, r7
 800a17c:	47c0      	blx	r8
 800a17e:	3001      	adds	r0, #1
 800a180:	d0e6      	beq.n	800a150 <_printf_common+0xa4>
 800a182:	3601      	adds	r6, #1
 800a184:	e7d9      	b.n	800a13a <_printf_common+0x8e>
	...

0800a188 <_printf_i>:
 800a188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	7e0f      	ldrb	r7, [r1, #24]
 800a18e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a190:	2f78      	cmp	r7, #120	; 0x78
 800a192:	4691      	mov	r9, r2
 800a194:	4680      	mov	r8, r0
 800a196:	460c      	mov	r4, r1
 800a198:	469a      	mov	sl, r3
 800a19a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a19e:	d807      	bhi.n	800a1b0 <_printf_i+0x28>
 800a1a0:	2f62      	cmp	r7, #98	; 0x62
 800a1a2:	d80a      	bhi.n	800a1ba <_printf_i+0x32>
 800a1a4:	2f00      	cmp	r7, #0
 800a1a6:	f000 80d8 	beq.w	800a35a <_printf_i+0x1d2>
 800a1aa:	2f58      	cmp	r7, #88	; 0x58
 800a1ac:	f000 80a3 	beq.w	800a2f6 <_printf_i+0x16e>
 800a1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1b8:	e03a      	b.n	800a230 <_printf_i+0xa8>
 800a1ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1be:	2b15      	cmp	r3, #21
 800a1c0:	d8f6      	bhi.n	800a1b0 <_printf_i+0x28>
 800a1c2:	a101      	add	r1, pc, #4	; (adr r1, 800a1c8 <_printf_i+0x40>)
 800a1c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1c8:	0800a221 	.word	0x0800a221
 800a1cc:	0800a235 	.word	0x0800a235
 800a1d0:	0800a1b1 	.word	0x0800a1b1
 800a1d4:	0800a1b1 	.word	0x0800a1b1
 800a1d8:	0800a1b1 	.word	0x0800a1b1
 800a1dc:	0800a1b1 	.word	0x0800a1b1
 800a1e0:	0800a235 	.word	0x0800a235
 800a1e4:	0800a1b1 	.word	0x0800a1b1
 800a1e8:	0800a1b1 	.word	0x0800a1b1
 800a1ec:	0800a1b1 	.word	0x0800a1b1
 800a1f0:	0800a1b1 	.word	0x0800a1b1
 800a1f4:	0800a341 	.word	0x0800a341
 800a1f8:	0800a265 	.word	0x0800a265
 800a1fc:	0800a323 	.word	0x0800a323
 800a200:	0800a1b1 	.word	0x0800a1b1
 800a204:	0800a1b1 	.word	0x0800a1b1
 800a208:	0800a363 	.word	0x0800a363
 800a20c:	0800a1b1 	.word	0x0800a1b1
 800a210:	0800a265 	.word	0x0800a265
 800a214:	0800a1b1 	.word	0x0800a1b1
 800a218:	0800a1b1 	.word	0x0800a1b1
 800a21c:	0800a32b 	.word	0x0800a32b
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	602a      	str	r2, [r5, #0]
 800a228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a22c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a230:	2301      	movs	r3, #1
 800a232:	e0a3      	b.n	800a37c <_printf_i+0x1f4>
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	6829      	ldr	r1, [r5, #0]
 800a238:	0606      	lsls	r6, r0, #24
 800a23a:	f101 0304 	add.w	r3, r1, #4
 800a23e:	d50a      	bpl.n	800a256 <_printf_i+0xce>
 800a240:	680e      	ldr	r6, [r1, #0]
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	2e00      	cmp	r6, #0
 800a246:	da03      	bge.n	800a250 <_printf_i+0xc8>
 800a248:	232d      	movs	r3, #45	; 0x2d
 800a24a:	4276      	negs	r6, r6
 800a24c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a250:	485e      	ldr	r0, [pc, #376]	; (800a3cc <_printf_i+0x244>)
 800a252:	230a      	movs	r3, #10
 800a254:	e019      	b.n	800a28a <_printf_i+0x102>
 800a256:	680e      	ldr	r6, [r1, #0]
 800a258:	602b      	str	r3, [r5, #0]
 800a25a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a25e:	bf18      	it	ne
 800a260:	b236      	sxthne	r6, r6
 800a262:	e7ef      	b.n	800a244 <_printf_i+0xbc>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	6820      	ldr	r0, [r4, #0]
 800a268:	1d19      	adds	r1, r3, #4
 800a26a:	6029      	str	r1, [r5, #0]
 800a26c:	0601      	lsls	r1, r0, #24
 800a26e:	d501      	bpl.n	800a274 <_printf_i+0xec>
 800a270:	681e      	ldr	r6, [r3, #0]
 800a272:	e002      	b.n	800a27a <_printf_i+0xf2>
 800a274:	0646      	lsls	r6, r0, #25
 800a276:	d5fb      	bpl.n	800a270 <_printf_i+0xe8>
 800a278:	881e      	ldrh	r6, [r3, #0]
 800a27a:	4854      	ldr	r0, [pc, #336]	; (800a3cc <_printf_i+0x244>)
 800a27c:	2f6f      	cmp	r7, #111	; 0x6f
 800a27e:	bf0c      	ite	eq
 800a280:	2308      	moveq	r3, #8
 800a282:	230a      	movne	r3, #10
 800a284:	2100      	movs	r1, #0
 800a286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a28a:	6865      	ldr	r5, [r4, #4]
 800a28c:	60a5      	str	r5, [r4, #8]
 800a28e:	2d00      	cmp	r5, #0
 800a290:	bfa2      	ittt	ge
 800a292:	6821      	ldrge	r1, [r4, #0]
 800a294:	f021 0104 	bicge.w	r1, r1, #4
 800a298:	6021      	strge	r1, [r4, #0]
 800a29a:	b90e      	cbnz	r6, 800a2a0 <_printf_i+0x118>
 800a29c:	2d00      	cmp	r5, #0
 800a29e:	d04d      	beq.n	800a33c <_printf_i+0x1b4>
 800a2a0:	4615      	mov	r5, r2
 800a2a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2a6:	fb03 6711 	mls	r7, r3, r1, r6
 800a2aa:	5dc7      	ldrb	r7, [r0, r7]
 800a2ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2b0:	4637      	mov	r7, r6
 800a2b2:	42bb      	cmp	r3, r7
 800a2b4:	460e      	mov	r6, r1
 800a2b6:	d9f4      	bls.n	800a2a2 <_printf_i+0x11a>
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d10b      	bne.n	800a2d4 <_printf_i+0x14c>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	07de      	lsls	r6, r3, #31
 800a2c0:	d508      	bpl.n	800a2d4 <_printf_i+0x14c>
 800a2c2:	6923      	ldr	r3, [r4, #16]
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	4299      	cmp	r1, r3
 800a2c8:	bfde      	ittt	le
 800a2ca:	2330      	movle	r3, #48	; 0x30
 800a2cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2d4:	1b52      	subs	r2, r2, r5
 800a2d6:	6122      	str	r2, [r4, #16]
 800a2d8:	f8cd a000 	str.w	sl, [sp]
 800a2dc:	464b      	mov	r3, r9
 800a2de:	aa03      	add	r2, sp, #12
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f7ff fee2 	bl	800a0ac <_printf_common>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d14c      	bne.n	800a386 <_printf_i+0x1fe>
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	b004      	add	sp, #16
 800a2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f6:	4835      	ldr	r0, [pc, #212]	; (800a3cc <_printf_i+0x244>)
 800a2f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2fc:	6829      	ldr	r1, [r5, #0]
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	f851 6b04 	ldr.w	r6, [r1], #4
 800a304:	6029      	str	r1, [r5, #0]
 800a306:	061d      	lsls	r5, r3, #24
 800a308:	d514      	bpl.n	800a334 <_printf_i+0x1ac>
 800a30a:	07df      	lsls	r7, r3, #31
 800a30c:	bf44      	itt	mi
 800a30e:	f043 0320 	orrmi.w	r3, r3, #32
 800a312:	6023      	strmi	r3, [r4, #0]
 800a314:	b91e      	cbnz	r6, 800a31e <_printf_i+0x196>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	f023 0320 	bic.w	r3, r3, #32
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	2310      	movs	r3, #16
 800a320:	e7b0      	b.n	800a284 <_printf_i+0xfc>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	f043 0320 	orr.w	r3, r3, #32
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	2378      	movs	r3, #120	; 0x78
 800a32c:	4828      	ldr	r0, [pc, #160]	; (800a3d0 <_printf_i+0x248>)
 800a32e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a332:	e7e3      	b.n	800a2fc <_printf_i+0x174>
 800a334:	0659      	lsls	r1, r3, #25
 800a336:	bf48      	it	mi
 800a338:	b2b6      	uxthmi	r6, r6
 800a33a:	e7e6      	b.n	800a30a <_printf_i+0x182>
 800a33c:	4615      	mov	r5, r2
 800a33e:	e7bb      	b.n	800a2b8 <_printf_i+0x130>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	6826      	ldr	r6, [r4, #0]
 800a344:	6961      	ldr	r1, [r4, #20]
 800a346:	1d18      	adds	r0, r3, #4
 800a348:	6028      	str	r0, [r5, #0]
 800a34a:	0635      	lsls	r5, r6, #24
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	d501      	bpl.n	800a354 <_printf_i+0x1cc>
 800a350:	6019      	str	r1, [r3, #0]
 800a352:	e002      	b.n	800a35a <_printf_i+0x1d2>
 800a354:	0670      	lsls	r0, r6, #25
 800a356:	d5fb      	bpl.n	800a350 <_printf_i+0x1c8>
 800a358:	8019      	strh	r1, [r3, #0]
 800a35a:	2300      	movs	r3, #0
 800a35c:	6123      	str	r3, [r4, #16]
 800a35e:	4615      	mov	r5, r2
 800a360:	e7ba      	b.n	800a2d8 <_printf_i+0x150>
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	602a      	str	r2, [r5, #0]
 800a368:	681d      	ldr	r5, [r3, #0]
 800a36a:	6862      	ldr	r2, [r4, #4]
 800a36c:	2100      	movs	r1, #0
 800a36e:	4628      	mov	r0, r5
 800a370:	f7f5 ff56 	bl	8000220 <memchr>
 800a374:	b108      	cbz	r0, 800a37a <_printf_i+0x1f2>
 800a376:	1b40      	subs	r0, r0, r5
 800a378:	6060      	str	r0, [r4, #4]
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	6123      	str	r3, [r4, #16]
 800a37e:	2300      	movs	r3, #0
 800a380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a384:	e7a8      	b.n	800a2d8 <_printf_i+0x150>
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	462a      	mov	r2, r5
 800a38a:	4649      	mov	r1, r9
 800a38c:	4640      	mov	r0, r8
 800a38e:	47d0      	blx	sl
 800a390:	3001      	adds	r0, #1
 800a392:	d0ab      	beq.n	800a2ec <_printf_i+0x164>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	079b      	lsls	r3, r3, #30
 800a398:	d413      	bmi.n	800a3c2 <_printf_i+0x23a>
 800a39a:	68e0      	ldr	r0, [r4, #12]
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	4298      	cmp	r0, r3
 800a3a0:	bfb8      	it	lt
 800a3a2:	4618      	movlt	r0, r3
 800a3a4:	e7a4      	b.n	800a2f0 <_printf_i+0x168>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4632      	mov	r2, r6
 800a3aa:	4649      	mov	r1, r9
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	47d0      	blx	sl
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d09b      	beq.n	800a2ec <_printf_i+0x164>
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	68e3      	ldr	r3, [r4, #12]
 800a3b8:	9903      	ldr	r1, [sp, #12]
 800a3ba:	1a5b      	subs	r3, r3, r1
 800a3bc:	42ab      	cmp	r3, r5
 800a3be:	dcf2      	bgt.n	800a3a6 <_printf_i+0x21e>
 800a3c0:	e7eb      	b.n	800a39a <_printf_i+0x212>
 800a3c2:	2500      	movs	r5, #0
 800a3c4:	f104 0619 	add.w	r6, r4, #25
 800a3c8:	e7f5      	b.n	800a3b6 <_printf_i+0x22e>
 800a3ca:	bf00      	nop
 800a3cc:	0800de4e 	.word	0x0800de4e
 800a3d0:	0800de5f 	.word	0x0800de5f

0800a3d4 <siprintf>:
 800a3d4:	b40e      	push	{r1, r2, r3}
 800a3d6:	b500      	push	{lr}
 800a3d8:	b09c      	sub	sp, #112	; 0x70
 800a3da:	ab1d      	add	r3, sp, #116	; 0x74
 800a3dc:	9002      	str	r0, [sp, #8]
 800a3de:	9006      	str	r0, [sp, #24]
 800a3e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3e4:	4809      	ldr	r0, [pc, #36]	; (800a40c <siprintf+0x38>)
 800a3e6:	9107      	str	r1, [sp, #28]
 800a3e8:	9104      	str	r1, [sp, #16]
 800a3ea:	4909      	ldr	r1, [pc, #36]	; (800a410 <siprintf+0x3c>)
 800a3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f0:	9105      	str	r1, [sp, #20]
 800a3f2:	6800      	ldr	r0, [r0, #0]
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	a902      	add	r1, sp, #8
 800a3f8:	f001 fb78 	bl	800baec <_svfiprintf_r>
 800a3fc:	9b02      	ldr	r3, [sp, #8]
 800a3fe:	2200      	movs	r2, #0
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	b01c      	add	sp, #112	; 0x70
 800a404:	f85d eb04 	ldr.w	lr, [sp], #4
 800a408:	b003      	add	sp, #12
 800a40a:	4770      	bx	lr
 800a40c:	20000058 	.word	0x20000058
 800a410:	ffff0208 	.word	0xffff0208

0800a414 <quorem>:
 800a414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	6903      	ldr	r3, [r0, #16]
 800a41a:	690c      	ldr	r4, [r1, #16]
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	4607      	mov	r7, r0
 800a420:	f2c0 8081 	blt.w	800a526 <quorem+0x112>
 800a424:	3c01      	subs	r4, #1
 800a426:	f101 0814 	add.w	r8, r1, #20
 800a42a:	f100 0514 	add.w	r5, r0, #20
 800a42e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a43c:	3301      	adds	r3, #1
 800a43e:	429a      	cmp	r2, r3
 800a440:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a448:	fbb2 f6f3 	udiv	r6, r2, r3
 800a44c:	d331      	bcc.n	800a4b2 <quorem+0x9e>
 800a44e:	f04f 0e00 	mov.w	lr, #0
 800a452:	4640      	mov	r0, r8
 800a454:	46ac      	mov	ip, r5
 800a456:	46f2      	mov	sl, lr
 800a458:	f850 2b04 	ldr.w	r2, [r0], #4
 800a45c:	b293      	uxth	r3, r2
 800a45e:	fb06 e303 	mla	r3, r6, r3, lr
 800a462:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a466:	b29b      	uxth	r3, r3
 800a468:	ebaa 0303 	sub.w	r3, sl, r3
 800a46c:	f8dc a000 	ldr.w	sl, [ip]
 800a470:	0c12      	lsrs	r2, r2, #16
 800a472:	fa13 f38a 	uxtah	r3, r3, sl
 800a476:	fb06 e202 	mla	r2, r6, r2, lr
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	9b00      	ldr	r3, [sp, #0]
 800a47e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a482:	b292      	uxth	r2, r2
 800a484:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a48c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a490:	4581      	cmp	r9, r0
 800a492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a496:	f84c 3b04 	str.w	r3, [ip], #4
 800a49a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a49e:	d2db      	bcs.n	800a458 <quorem+0x44>
 800a4a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4a4:	b92b      	cbnz	r3, 800a4b2 <quorem+0x9e>
 800a4a6:	9b01      	ldr	r3, [sp, #4]
 800a4a8:	3b04      	subs	r3, #4
 800a4aa:	429d      	cmp	r5, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	d32e      	bcc.n	800a50e <quorem+0xfa>
 800a4b0:	613c      	str	r4, [r7, #16]
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f001 f8c6 	bl	800b644 <__mcmp>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	db24      	blt.n	800a506 <quorem+0xf2>
 800a4bc:	3601      	adds	r6, #1
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f04f 0c00 	mov.w	ip, #0
 800a4c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a4cc:	b293      	uxth	r3, r2
 800a4ce:	ebac 0303 	sub.w	r3, ip, r3
 800a4d2:	0c12      	lsrs	r2, r2, #16
 800a4d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a4d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a4dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4e6:	45c1      	cmp	r9, r8
 800a4e8:	f840 3b04 	str.w	r3, [r0], #4
 800a4ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4f0:	d2e8      	bcs.n	800a4c4 <quorem+0xb0>
 800a4f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4fa:	b922      	cbnz	r2, 800a506 <quorem+0xf2>
 800a4fc:	3b04      	subs	r3, #4
 800a4fe:	429d      	cmp	r5, r3
 800a500:	461a      	mov	r2, r3
 800a502:	d30a      	bcc.n	800a51a <quorem+0x106>
 800a504:	613c      	str	r4, [r7, #16]
 800a506:	4630      	mov	r0, r6
 800a508:	b003      	add	sp, #12
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	6812      	ldr	r2, [r2, #0]
 800a510:	3b04      	subs	r3, #4
 800a512:	2a00      	cmp	r2, #0
 800a514:	d1cc      	bne.n	800a4b0 <quorem+0x9c>
 800a516:	3c01      	subs	r4, #1
 800a518:	e7c7      	b.n	800a4aa <quorem+0x96>
 800a51a:	6812      	ldr	r2, [r2, #0]
 800a51c:	3b04      	subs	r3, #4
 800a51e:	2a00      	cmp	r2, #0
 800a520:	d1f0      	bne.n	800a504 <quorem+0xf0>
 800a522:	3c01      	subs	r4, #1
 800a524:	e7eb      	b.n	800a4fe <quorem+0xea>
 800a526:	2000      	movs	r0, #0
 800a528:	e7ee      	b.n	800a508 <quorem+0xf4>
 800a52a:	0000      	movs	r0, r0
 800a52c:	0000      	movs	r0, r0
	...

0800a530 <_dtoa_r>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	ed2d 8b04 	vpush	{d8-d9}
 800a538:	ec57 6b10 	vmov	r6, r7, d0
 800a53c:	b093      	sub	sp, #76	; 0x4c
 800a53e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a540:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a544:	9106      	str	r1, [sp, #24]
 800a546:	ee10 aa10 	vmov	sl, s0
 800a54a:	4604      	mov	r4, r0
 800a54c:	9209      	str	r2, [sp, #36]	; 0x24
 800a54e:	930c      	str	r3, [sp, #48]	; 0x30
 800a550:	46bb      	mov	fp, r7
 800a552:	b975      	cbnz	r5, 800a572 <_dtoa_r+0x42>
 800a554:	2010      	movs	r0, #16
 800a556:	f000 fddd 	bl	800b114 <malloc>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6260      	str	r0, [r4, #36]	; 0x24
 800a55e:	b920      	cbnz	r0, 800a56a <_dtoa_r+0x3a>
 800a560:	4ba7      	ldr	r3, [pc, #668]	; (800a800 <_dtoa_r+0x2d0>)
 800a562:	21ea      	movs	r1, #234	; 0xea
 800a564:	48a7      	ldr	r0, [pc, #668]	; (800a804 <_dtoa_r+0x2d4>)
 800a566:	f001 fbd1 	bl	800bd0c <__assert_func>
 800a56a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a56e:	6005      	str	r5, [r0, #0]
 800a570:	60c5      	str	r5, [r0, #12]
 800a572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a574:	6819      	ldr	r1, [r3, #0]
 800a576:	b151      	cbz	r1, 800a58e <_dtoa_r+0x5e>
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	604a      	str	r2, [r1, #4]
 800a57c:	2301      	movs	r3, #1
 800a57e:	4093      	lsls	r3, r2
 800a580:	608b      	str	r3, [r1, #8]
 800a582:	4620      	mov	r0, r4
 800a584:	f000 fe1c 	bl	800b1c0 <_Bfree>
 800a588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	1e3b      	subs	r3, r7, #0
 800a590:	bfaa      	itet	ge
 800a592:	2300      	movge	r3, #0
 800a594:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a598:	f8c8 3000 	strge.w	r3, [r8]
 800a59c:	4b9a      	ldr	r3, [pc, #616]	; (800a808 <_dtoa_r+0x2d8>)
 800a59e:	bfbc      	itt	lt
 800a5a0:	2201      	movlt	r2, #1
 800a5a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a5a6:	ea33 030b 	bics.w	r3, r3, fp
 800a5aa:	d11b      	bne.n	800a5e4 <_dtoa_r+0xb4>
 800a5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5b8:	4333      	orrs	r3, r6
 800a5ba:	f000 8592 	beq.w	800b0e2 <_dtoa_r+0xbb2>
 800a5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c0:	b963      	cbnz	r3, 800a5dc <_dtoa_r+0xac>
 800a5c2:	4b92      	ldr	r3, [pc, #584]	; (800a80c <_dtoa_r+0x2dc>)
 800a5c4:	e022      	b.n	800a60c <_dtoa_r+0xdc>
 800a5c6:	4b92      	ldr	r3, [pc, #584]	; (800a810 <_dtoa_r+0x2e0>)
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	b013      	add	sp, #76	; 0x4c
 800a5d4:	ecbd 8b04 	vpop	{d8-d9}
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	4b8b      	ldr	r3, [pc, #556]	; (800a80c <_dtoa_r+0x2dc>)
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	3303      	adds	r3, #3
 800a5e2:	e7f3      	b.n	800a5cc <_dtoa_r+0x9c>
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	4659      	mov	r1, fp
 800a5ec:	f7f6 fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 800a5f0:	ec4b ab19 	vmov	d9, sl, fp
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	b158      	cbz	r0, 800a610 <_dtoa_r+0xe0>
 800a5f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 856b 	beq.w	800b0dc <_dtoa_r+0xbac>
 800a606:	4883      	ldr	r0, [pc, #524]	; (800a814 <_dtoa_r+0x2e4>)
 800a608:	6018      	str	r0, [r3, #0]
 800a60a:	1e43      	subs	r3, r0, #1
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	e7df      	b.n	800a5d0 <_dtoa_r+0xa0>
 800a610:	ec4b ab10 	vmov	d0, sl, fp
 800a614:	aa10      	add	r2, sp, #64	; 0x40
 800a616:	a911      	add	r1, sp, #68	; 0x44
 800a618:	4620      	mov	r0, r4
 800a61a:	f001 f8b9 	bl	800b790 <__d2b>
 800a61e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a622:	ee08 0a10 	vmov	s16, r0
 800a626:	2d00      	cmp	r5, #0
 800a628:	f000 8084 	beq.w	800a734 <_dtoa_r+0x204>
 800a62c:	ee19 3a90 	vmov	r3, s19
 800a630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a634:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a638:	4656      	mov	r6, sl
 800a63a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a63e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a642:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a646:	4b74      	ldr	r3, [pc, #464]	; (800a818 <_dtoa_r+0x2e8>)
 800a648:	2200      	movs	r2, #0
 800a64a:	4630      	mov	r0, r6
 800a64c:	4639      	mov	r1, r7
 800a64e:	f7f5 fe3b 	bl	80002c8 <__aeabi_dsub>
 800a652:	a365      	add	r3, pc, #404	; (adr r3, 800a7e8 <_dtoa_r+0x2b8>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f7f5 ffee 	bl	8000638 <__aeabi_dmul>
 800a65c:	a364      	add	r3, pc, #400	; (adr r3, 800a7f0 <_dtoa_r+0x2c0>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7f5 fe33 	bl	80002cc <__adddf3>
 800a666:	4606      	mov	r6, r0
 800a668:	4628      	mov	r0, r5
 800a66a:	460f      	mov	r7, r1
 800a66c:	f7f5 ff7a 	bl	8000564 <__aeabi_i2d>
 800a670:	a361      	add	r3, pc, #388	; (adr r3, 800a7f8 <_dtoa_r+0x2c8>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f5 ffdf 	bl	8000638 <__aeabi_dmul>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4630      	mov	r0, r6
 800a680:	4639      	mov	r1, r7
 800a682:	f7f5 fe23 	bl	80002cc <__adddf3>
 800a686:	4606      	mov	r6, r0
 800a688:	460f      	mov	r7, r1
 800a68a:	f7f6 fa85 	bl	8000b98 <__aeabi_d2iz>
 800a68e:	2200      	movs	r2, #0
 800a690:	9000      	str	r0, [sp, #0]
 800a692:	2300      	movs	r3, #0
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f7f6 fa40 	bl	8000b1c <__aeabi_dcmplt>
 800a69c:	b150      	cbz	r0, 800a6b4 <_dtoa_r+0x184>
 800a69e:	9800      	ldr	r0, [sp, #0]
 800a6a0:	f7f5 ff60 	bl	8000564 <__aeabi_i2d>
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	f7f6 fa2e 	bl	8000b08 <__aeabi_dcmpeq>
 800a6ac:	b910      	cbnz	r0, 800a6b4 <_dtoa_r+0x184>
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	9b00      	ldr	r3, [sp, #0]
 800a6b6:	2b16      	cmp	r3, #22
 800a6b8:	d85a      	bhi.n	800a770 <_dtoa_r+0x240>
 800a6ba:	9a00      	ldr	r2, [sp, #0]
 800a6bc:	4b57      	ldr	r3, [pc, #348]	; (800a81c <_dtoa_r+0x2ec>)
 800a6be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	ec51 0b19 	vmov	r0, r1, d9
 800a6ca:	f7f6 fa27 	bl	8000b1c <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d050      	beq.n	800a774 <_dtoa_r+0x244>
 800a6d2:	9b00      	ldr	r3, [sp, #0]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6de:	1b5d      	subs	r5, r3, r5
 800a6e0:	1e6b      	subs	r3, r5, #1
 800a6e2:	9305      	str	r3, [sp, #20]
 800a6e4:	bf45      	ittet	mi
 800a6e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a6ea:	9304      	strmi	r3, [sp, #16]
 800a6ec:	2300      	movpl	r3, #0
 800a6ee:	2300      	movmi	r3, #0
 800a6f0:	bf4c      	ite	mi
 800a6f2:	9305      	strmi	r3, [sp, #20]
 800a6f4:	9304      	strpl	r3, [sp, #16]
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	db3d      	blt.n	800a778 <_dtoa_r+0x248>
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	9a00      	ldr	r2, [sp, #0]
 800a700:	920a      	str	r2, [sp, #40]	; 0x28
 800a702:	4413      	add	r3, r2
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	2300      	movs	r3, #0
 800a708:	9307      	str	r3, [sp, #28]
 800a70a:	9b06      	ldr	r3, [sp, #24]
 800a70c:	2b09      	cmp	r3, #9
 800a70e:	f200 8089 	bhi.w	800a824 <_dtoa_r+0x2f4>
 800a712:	2b05      	cmp	r3, #5
 800a714:	bfc4      	itt	gt
 800a716:	3b04      	subgt	r3, #4
 800a718:	9306      	strgt	r3, [sp, #24]
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	f1a3 0302 	sub.w	r3, r3, #2
 800a720:	bfcc      	ite	gt
 800a722:	2500      	movgt	r5, #0
 800a724:	2501      	movle	r5, #1
 800a726:	2b03      	cmp	r3, #3
 800a728:	f200 8087 	bhi.w	800a83a <_dtoa_r+0x30a>
 800a72c:	e8df f003 	tbb	[pc, r3]
 800a730:	59383a2d 	.word	0x59383a2d
 800a734:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a738:	441d      	add	r5, r3
 800a73a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a73e:	2b20      	cmp	r3, #32
 800a740:	bfc1      	itttt	gt
 800a742:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a746:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a74a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a74e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a752:	bfda      	itte	le
 800a754:	f1c3 0320 	rsble	r3, r3, #32
 800a758:	fa06 f003 	lslle.w	r0, r6, r3
 800a75c:	4318      	orrgt	r0, r3
 800a75e:	f7f5 fef1 	bl	8000544 <__aeabi_ui2d>
 800a762:	2301      	movs	r3, #1
 800a764:	4606      	mov	r6, r0
 800a766:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a76a:	3d01      	subs	r5, #1
 800a76c:	930e      	str	r3, [sp, #56]	; 0x38
 800a76e:	e76a      	b.n	800a646 <_dtoa_r+0x116>
 800a770:	2301      	movs	r3, #1
 800a772:	e7b2      	b.n	800a6da <_dtoa_r+0x1aa>
 800a774:	900b      	str	r0, [sp, #44]	; 0x2c
 800a776:	e7b1      	b.n	800a6dc <_dtoa_r+0x1ac>
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	9a00      	ldr	r2, [sp, #0]
 800a77c:	1a9b      	subs	r3, r3, r2
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	4253      	negs	r3, r2
 800a782:	9307      	str	r3, [sp, #28]
 800a784:	2300      	movs	r3, #0
 800a786:	930a      	str	r3, [sp, #40]	; 0x28
 800a788:	e7bf      	b.n	800a70a <_dtoa_r+0x1da>
 800a78a:	2300      	movs	r3, #0
 800a78c:	9308      	str	r3, [sp, #32]
 800a78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	dc55      	bgt.n	800a840 <_dtoa_r+0x310>
 800a794:	2301      	movs	r3, #1
 800a796:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a79a:	461a      	mov	r2, r3
 800a79c:	9209      	str	r2, [sp, #36]	; 0x24
 800a79e:	e00c      	b.n	800a7ba <_dtoa_r+0x28a>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e7f3      	b.n	800a78c <_dtoa_r+0x25c>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a8:	9308      	str	r3, [sp, #32]
 800a7aa:	9b00      	ldr	r3, [sp, #0]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	9302      	str	r3, [sp, #8]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	bfb8      	it	lt
 800a7b8:	2301      	movlt	r3, #1
 800a7ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7bc:	2200      	movs	r2, #0
 800a7be:	6042      	str	r2, [r0, #4]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	f102 0614 	add.w	r6, r2, #20
 800a7c6:	429e      	cmp	r6, r3
 800a7c8:	6841      	ldr	r1, [r0, #4]
 800a7ca:	d93d      	bls.n	800a848 <_dtoa_r+0x318>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fcb7 	bl	800b140 <_Balloc>
 800a7d2:	9001      	str	r0, [sp, #4]
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d13b      	bne.n	800a850 <_dtoa_r+0x320>
 800a7d8:	4b11      	ldr	r3, [pc, #68]	; (800a820 <_dtoa_r+0x2f0>)
 800a7da:	4602      	mov	r2, r0
 800a7dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a7e0:	e6c0      	b.n	800a564 <_dtoa_r+0x34>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e7df      	b.n	800a7a6 <_dtoa_r+0x276>
 800a7e6:	bf00      	nop
 800a7e8:	636f4361 	.word	0x636f4361
 800a7ec:	3fd287a7 	.word	0x3fd287a7
 800a7f0:	8b60c8b3 	.word	0x8b60c8b3
 800a7f4:	3fc68a28 	.word	0x3fc68a28
 800a7f8:	509f79fb 	.word	0x509f79fb
 800a7fc:	3fd34413 	.word	0x3fd34413
 800a800:	0800de7d 	.word	0x0800de7d
 800a804:	0800de94 	.word	0x0800de94
 800a808:	7ff00000 	.word	0x7ff00000
 800a80c:	0800de79 	.word	0x0800de79
 800a810:	0800de70 	.word	0x0800de70
 800a814:	0800de4d 	.word	0x0800de4d
 800a818:	3ff80000 	.word	0x3ff80000
 800a81c:	0800df88 	.word	0x0800df88
 800a820:	0800deef 	.word	0x0800deef
 800a824:	2501      	movs	r5, #1
 800a826:	2300      	movs	r3, #0
 800a828:	9306      	str	r3, [sp, #24]
 800a82a:	9508      	str	r5, [sp, #32]
 800a82c:	f04f 33ff 	mov.w	r3, #4294967295
 800a830:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a834:	2200      	movs	r2, #0
 800a836:	2312      	movs	r3, #18
 800a838:	e7b0      	b.n	800a79c <_dtoa_r+0x26c>
 800a83a:	2301      	movs	r3, #1
 800a83c:	9308      	str	r3, [sp, #32]
 800a83e:	e7f5      	b.n	800a82c <_dtoa_r+0x2fc>
 800a840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a842:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a846:	e7b8      	b.n	800a7ba <_dtoa_r+0x28a>
 800a848:	3101      	adds	r1, #1
 800a84a:	6041      	str	r1, [r0, #4]
 800a84c:	0052      	lsls	r2, r2, #1
 800a84e:	e7b8      	b.n	800a7c2 <_dtoa_r+0x292>
 800a850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a852:	9a01      	ldr	r2, [sp, #4]
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	2b0e      	cmp	r3, #14
 800a85a:	f200 809d 	bhi.w	800a998 <_dtoa_r+0x468>
 800a85e:	2d00      	cmp	r5, #0
 800a860:	f000 809a 	beq.w	800a998 <_dtoa_r+0x468>
 800a864:	9b00      	ldr	r3, [sp, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	dd32      	ble.n	800a8d0 <_dtoa_r+0x3a0>
 800a86a:	4ab7      	ldr	r2, [pc, #732]	; (800ab48 <_dtoa_r+0x618>)
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a874:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	05d8      	lsls	r0, r3, #23
 800a87c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a880:	d516      	bpl.n	800a8b0 <_dtoa_r+0x380>
 800a882:	4bb2      	ldr	r3, [pc, #712]	; (800ab4c <_dtoa_r+0x61c>)
 800a884:	ec51 0b19 	vmov	r0, r1, d9
 800a888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a88c:	f7f5 fffe 	bl	800088c <__aeabi_ddiv>
 800a890:	f007 070f 	and.w	r7, r7, #15
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	2503      	movs	r5, #3
 800a89a:	4eac      	ldr	r6, [pc, #688]	; (800ab4c <_dtoa_r+0x61c>)
 800a89c:	b957      	cbnz	r7, 800a8b4 <_dtoa_r+0x384>
 800a89e:	4642      	mov	r2, r8
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	f7f5 fff1 	bl	800088c <__aeabi_ddiv>
 800a8aa:	4682      	mov	sl, r0
 800a8ac:	468b      	mov	fp, r1
 800a8ae:	e028      	b.n	800a902 <_dtoa_r+0x3d2>
 800a8b0:	2502      	movs	r5, #2
 800a8b2:	e7f2      	b.n	800a89a <_dtoa_r+0x36a>
 800a8b4:	07f9      	lsls	r1, r7, #31
 800a8b6:	d508      	bpl.n	800a8ca <_dtoa_r+0x39a>
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8c0:	f7f5 feba 	bl	8000638 <__aeabi_dmul>
 800a8c4:	3501      	adds	r5, #1
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	107f      	asrs	r7, r7, #1
 800a8cc:	3608      	adds	r6, #8
 800a8ce:	e7e5      	b.n	800a89c <_dtoa_r+0x36c>
 800a8d0:	f000 809b 	beq.w	800aa0a <_dtoa_r+0x4da>
 800a8d4:	9b00      	ldr	r3, [sp, #0]
 800a8d6:	4f9d      	ldr	r7, [pc, #628]	; (800ab4c <_dtoa_r+0x61c>)
 800a8d8:	425e      	negs	r6, r3
 800a8da:	4b9b      	ldr	r3, [pc, #620]	; (800ab48 <_dtoa_r+0x618>)
 800a8dc:	f006 020f 	and.w	r2, r6, #15
 800a8e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	ec51 0b19 	vmov	r0, r1, d9
 800a8ec:	f7f5 fea4 	bl	8000638 <__aeabi_dmul>
 800a8f0:	1136      	asrs	r6, r6, #4
 800a8f2:	4682      	mov	sl, r0
 800a8f4:	468b      	mov	fp, r1
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2502      	movs	r5, #2
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	d17a      	bne.n	800a9f4 <_dtoa_r+0x4c4>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1d3      	bne.n	800a8aa <_dtoa_r+0x37a>
 800a902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8082 	beq.w	800aa0e <_dtoa_r+0x4de>
 800a90a:	4b91      	ldr	r3, [pc, #580]	; (800ab50 <_dtoa_r+0x620>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	4650      	mov	r0, sl
 800a910:	4659      	mov	r1, fp
 800a912:	f7f6 f903 	bl	8000b1c <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d079      	beq.n	800aa0e <_dtoa_r+0x4de>
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d076      	beq.n	800aa0e <_dtoa_r+0x4de>
 800a920:	9b02      	ldr	r3, [sp, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	dd36      	ble.n	800a994 <_dtoa_r+0x464>
 800a926:	9b00      	ldr	r3, [sp, #0]
 800a928:	4650      	mov	r0, sl
 800a92a:	4659      	mov	r1, fp
 800a92c:	1e5f      	subs	r7, r3, #1
 800a92e:	2200      	movs	r2, #0
 800a930:	4b88      	ldr	r3, [pc, #544]	; (800ab54 <_dtoa_r+0x624>)
 800a932:	f7f5 fe81 	bl	8000638 <__aeabi_dmul>
 800a936:	9e02      	ldr	r6, [sp, #8]
 800a938:	4682      	mov	sl, r0
 800a93a:	468b      	mov	fp, r1
 800a93c:	3501      	adds	r5, #1
 800a93e:	4628      	mov	r0, r5
 800a940:	f7f5 fe10 	bl	8000564 <__aeabi_i2d>
 800a944:	4652      	mov	r2, sl
 800a946:	465b      	mov	r3, fp
 800a948:	f7f5 fe76 	bl	8000638 <__aeabi_dmul>
 800a94c:	4b82      	ldr	r3, [pc, #520]	; (800ab58 <_dtoa_r+0x628>)
 800a94e:	2200      	movs	r2, #0
 800a950:	f7f5 fcbc 	bl	80002cc <__adddf3>
 800a954:	46d0      	mov	r8, sl
 800a956:	46d9      	mov	r9, fp
 800a958:	4682      	mov	sl, r0
 800a95a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a95e:	2e00      	cmp	r6, #0
 800a960:	d158      	bne.n	800aa14 <_dtoa_r+0x4e4>
 800a962:	4b7e      	ldr	r3, [pc, #504]	; (800ab5c <_dtoa_r+0x62c>)
 800a964:	2200      	movs	r2, #0
 800a966:	4640      	mov	r0, r8
 800a968:	4649      	mov	r1, r9
 800a96a:	f7f5 fcad 	bl	80002c8 <__aeabi_dsub>
 800a96e:	4652      	mov	r2, sl
 800a970:	465b      	mov	r3, fp
 800a972:	4680      	mov	r8, r0
 800a974:	4689      	mov	r9, r1
 800a976:	f7f6 f8ef 	bl	8000b58 <__aeabi_dcmpgt>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f040 8295 	bne.w	800aeaa <_dtoa_r+0x97a>
 800a980:	4652      	mov	r2, sl
 800a982:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a986:	4640      	mov	r0, r8
 800a988:	4649      	mov	r1, r9
 800a98a:	f7f6 f8c7 	bl	8000b1c <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	f040 8289 	bne.w	800aea6 <_dtoa_r+0x976>
 800a994:	ec5b ab19 	vmov	sl, fp, d9
 800a998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f2c0 8148 	blt.w	800ac30 <_dtoa_r+0x700>
 800a9a0:	9a00      	ldr	r2, [sp, #0]
 800a9a2:	2a0e      	cmp	r2, #14
 800a9a4:	f300 8144 	bgt.w	800ac30 <_dtoa_r+0x700>
 800a9a8:	4b67      	ldr	r3, [pc, #412]	; (800ab48 <_dtoa_r+0x618>)
 800a9aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f280 80d5 	bge.w	800ab64 <_dtoa_r+0x634>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f300 80d1 	bgt.w	800ab64 <_dtoa_r+0x634>
 800a9c2:	f040 826f 	bne.w	800aea4 <_dtoa_r+0x974>
 800a9c6:	4b65      	ldr	r3, [pc, #404]	; (800ab5c <_dtoa_r+0x62c>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	f7f5 fe33 	bl	8000638 <__aeabi_dmul>
 800a9d2:	4652      	mov	r2, sl
 800a9d4:	465b      	mov	r3, fp
 800a9d6:	f7f6 f8b5 	bl	8000b44 <__aeabi_dcmpge>
 800a9da:	9e03      	ldr	r6, [sp, #12]
 800a9dc:	4637      	mov	r7, r6
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f040 8245 	bne.w	800ae6e <_dtoa_r+0x93e>
 800a9e4:	9d01      	ldr	r5, [sp, #4]
 800a9e6:	2331      	movs	r3, #49	; 0x31
 800a9e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	e240      	b.n	800ae76 <_dtoa_r+0x946>
 800a9f4:	07f2      	lsls	r2, r6, #31
 800a9f6:	d505      	bpl.n	800aa04 <_dtoa_r+0x4d4>
 800a9f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fc:	f7f5 fe1c 	bl	8000638 <__aeabi_dmul>
 800aa00:	3501      	adds	r5, #1
 800aa02:	2301      	movs	r3, #1
 800aa04:	1076      	asrs	r6, r6, #1
 800aa06:	3708      	adds	r7, #8
 800aa08:	e777      	b.n	800a8fa <_dtoa_r+0x3ca>
 800aa0a:	2502      	movs	r5, #2
 800aa0c:	e779      	b.n	800a902 <_dtoa_r+0x3d2>
 800aa0e:	9f00      	ldr	r7, [sp, #0]
 800aa10:	9e03      	ldr	r6, [sp, #12]
 800aa12:	e794      	b.n	800a93e <_dtoa_r+0x40e>
 800aa14:	9901      	ldr	r1, [sp, #4]
 800aa16:	4b4c      	ldr	r3, [pc, #304]	; (800ab48 <_dtoa_r+0x618>)
 800aa18:	4431      	add	r1, r6
 800aa1a:	910d      	str	r1, [sp, #52]	; 0x34
 800aa1c:	9908      	ldr	r1, [sp, #32]
 800aa1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa26:	2900      	cmp	r1, #0
 800aa28:	d043      	beq.n	800aab2 <_dtoa_r+0x582>
 800aa2a:	494d      	ldr	r1, [pc, #308]	; (800ab60 <_dtoa_r+0x630>)
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f7f5 ff2d 	bl	800088c <__aeabi_ddiv>
 800aa32:	4652      	mov	r2, sl
 800aa34:	465b      	mov	r3, fp
 800aa36:	f7f5 fc47 	bl	80002c8 <__aeabi_dsub>
 800aa3a:	9d01      	ldr	r5, [sp, #4]
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	468b      	mov	fp, r1
 800aa40:	4649      	mov	r1, r9
 800aa42:	4640      	mov	r0, r8
 800aa44:	f7f6 f8a8 	bl	8000b98 <__aeabi_d2iz>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	f7f5 fd8b 	bl	8000564 <__aeabi_i2d>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4640      	mov	r0, r8
 800aa54:	4649      	mov	r1, r9
 800aa56:	f7f5 fc37 	bl	80002c8 <__aeabi_dsub>
 800aa5a:	3630      	adds	r6, #48	; 0x30
 800aa5c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa60:	4652      	mov	r2, sl
 800aa62:	465b      	mov	r3, fp
 800aa64:	4680      	mov	r8, r0
 800aa66:	4689      	mov	r9, r1
 800aa68:	f7f6 f858 	bl	8000b1c <__aeabi_dcmplt>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d163      	bne.n	800ab38 <_dtoa_r+0x608>
 800aa70:	4642      	mov	r2, r8
 800aa72:	464b      	mov	r3, r9
 800aa74:	4936      	ldr	r1, [pc, #216]	; (800ab50 <_dtoa_r+0x620>)
 800aa76:	2000      	movs	r0, #0
 800aa78:	f7f5 fc26 	bl	80002c8 <__aeabi_dsub>
 800aa7c:	4652      	mov	r2, sl
 800aa7e:	465b      	mov	r3, fp
 800aa80:	f7f6 f84c 	bl	8000b1c <__aeabi_dcmplt>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f040 80b5 	bne.w	800abf4 <_dtoa_r+0x6c4>
 800aa8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa8c:	429d      	cmp	r5, r3
 800aa8e:	d081      	beq.n	800a994 <_dtoa_r+0x464>
 800aa90:	4b30      	ldr	r3, [pc, #192]	; (800ab54 <_dtoa_r+0x624>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	4650      	mov	r0, sl
 800aa96:	4659      	mov	r1, fp
 800aa98:	f7f5 fdce 	bl	8000638 <__aeabi_dmul>
 800aa9c:	4b2d      	ldr	r3, [pc, #180]	; (800ab54 <_dtoa_r+0x624>)
 800aa9e:	4682      	mov	sl, r0
 800aaa0:	468b      	mov	fp, r1
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f7f5 fdc6 	bl	8000638 <__aeabi_dmul>
 800aaac:	4680      	mov	r8, r0
 800aaae:	4689      	mov	r9, r1
 800aab0:	e7c6      	b.n	800aa40 <_dtoa_r+0x510>
 800aab2:	4650      	mov	r0, sl
 800aab4:	4659      	mov	r1, fp
 800aab6:	f7f5 fdbf 	bl	8000638 <__aeabi_dmul>
 800aaba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aabc:	9d01      	ldr	r5, [sp, #4]
 800aabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800aac0:	4682      	mov	sl, r0
 800aac2:	468b      	mov	fp, r1
 800aac4:	4649      	mov	r1, r9
 800aac6:	4640      	mov	r0, r8
 800aac8:	f7f6 f866 	bl	8000b98 <__aeabi_d2iz>
 800aacc:	4606      	mov	r6, r0
 800aace:	f7f5 fd49 	bl	8000564 <__aeabi_i2d>
 800aad2:	3630      	adds	r6, #48	; 0x30
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4640      	mov	r0, r8
 800aada:	4649      	mov	r1, r9
 800aadc:	f7f5 fbf4 	bl	80002c8 <__aeabi_dsub>
 800aae0:	f805 6b01 	strb.w	r6, [r5], #1
 800aae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae6:	429d      	cmp	r5, r3
 800aae8:	4680      	mov	r8, r0
 800aaea:	4689      	mov	r9, r1
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	d124      	bne.n	800ab3c <_dtoa_r+0x60c>
 800aaf2:	4b1b      	ldr	r3, [pc, #108]	; (800ab60 <_dtoa_r+0x630>)
 800aaf4:	4650      	mov	r0, sl
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	f7f5 fbe8 	bl	80002cc <__adddf3>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	4640      	mov	r0, r8
 800ab02:	4649      	mov	r1, r9
 800ab04:	f7f6 f828 	bl	8000b58 <__aeabi_dcmpgt>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d173      	bne.n	800abf4 <_dtoa_r+0x6c4>
 800ab0c:	4652      	mov	r2, sl
 800ab0e:	465b      	mov	r3, fp
 800ab10:	4913      	ldr	r1, [pc, #76]	; (800ab60 <_dtoa_r+0x630>)
 800ab12:	2000      	movs	r0, #0
 800ab14:	f7f5 fbd8 	bl	80002c8 <__aeabi_dsub>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4649      	mov	r1, r9
 800ab20:	f7f5 fffc 	bl	8000b1c <__aeabi_dcmplt>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	f43f af35 	beq.w	800a994 <_dtoa_r+0x464>
 800ab2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab2c:	1e6b      	subs	r3, r5, #1
 800ab2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab34:	2b30      	cmp	r3, #48	; 0x30
 800ab36:	d0f8      	beq.n	800ab2a <_dtoa_r+0x5fa>
 800ab38:	9700      	str	r7, [sp, #0]
 800ab3a:	e049      	b.n	800abd0 <_dtoa_r+0x6a0>
 800ab3c:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <_dtoa_r+0x624>)
 800ab3e:	f7f5 fd7b 	bl	8000638 <__aeabi_dmul>
 800ab42:	4680      	mov	r8, r0
 800ab44:	4689      	mov	r9, r1
 800ab46:	e7bd      	b.n	800aac4 <_dtoa_r+0x594>
 800ab48:	0800df88 	.word	0x0800df88
 800ab4c:	0800df60 	.word	0x0800df60
 800ab50:	3ff00000 	.word	0x3ff00000
 800ab54:	40240000 	.word	0x40240000
 800ab58:	401c0000 	.word	0x401c0000
 800ab5c:	40140000 	.word	0x40140000
 800ab60:	3fe00000 	.word	0x3fe00000
 800ab64:	9d01      	ldr	r5, [sp, #4]
 800ab66:	4656      	mov	r6, sl
 800ab68:	465f      	mov	r7, fp
 800ab6a:	4642      	mov	r2, r8
 800ab6c:	464b      	mov	r3, r9
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	f7f5 fe8b 	bl	800088c <__aeabi_ddiv>
 800ab76:	f7f6 f80f 	bl	8000b98 <__aeabi_d2iz>
 800ab7a:	4682      	mov	sl, r0
 800ab7c:	f7f5 fcf2 	bl	8000564 <__aeabi_i2d>
 800ab80:	4642      	mov	r2, r8
 800ab82:	464b      	mov	r3, r9
 800ab84:	f7f5 fd58 	bl	8000638 <__aeabi_dmul>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4639      	mov	r1, r7
 800ab90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ab94:	f7f5 fb98 	bl	80002c8 <__aeabi_dsub>
 800ab98:	f805 6b01 	strb.w	r6, [r5], #1
 800ab9c:	9e01      	ldr	r6, [sp, #4]
 800ab9e:	9f03      	ldr	r7, [sp, #12]
 800aba0:	1bae      	subs	r6, r5, r6
 800aba2:	42b7      	cmp	r7, r6
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	d135      	bne.n	800ac16 <_dtoa_r+0x6e6>
 800abaa:	f7f5 fb8f 	bl	80002cc <__adddf3>
 800abae:	4642      	mov	r2, r8
 800abb0:	464b      	mov	r3, r9
 800abb2:	4606      	mov	r6, r0
 800abb4:	460f      	mov	r7, r1
 800abb6:	f7f5 ffcf 	bl	8000b58 <__aeabi_dcmpgt>
 800abba:	b9d0      	cbnz	r0, 800abf2 <_dtoa_r+0x6c2>
 800abbc:	4642      	mov	r2, r8
 800abbe:	464b      	mov	r3, r9
 800abc0:	4630      	mov	r0, r6
 800abc2:	4639      	mov	r1, r7
 800abc4:	f7f5 ffa0 	bl	8000b08 <__aeabi_dcmpeq>
 800abc8:	b110      	cbz	r0, 800abd0 <_dtoa_r+0x6a0>
 800abca:	f01a 0f01 	tst.w	sl, #1
 800abce:	d110      	bne.n	800abf2 <_dtoa_r+0x6c2>
 800abd0:	4620      	mov	r0, r4
 800abd2:	ee18 1a10 	vmov	r1, s16
 800abd6:	f000 faf3 	bl	800b1c0 <_Bfree>
 800abda:	2300      	movs	r3, #0
 800abdc:	9800      	ldr	r0, [sp, #0]
 800abde:	702b      	strb	r3, [r5, #0]
 800abe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abe2:	3001      	adds	r0, #1
 800abe4:	6018      	str	r0, [r3, #0]
 800abe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f43f acf1 	beq.w	800a5d0 <_dtoa_r+0xa0>
 800abee:	601d      	str	r5, [r3, #0]
 800abf0:	e4ee      	b.n	800a5d0 <_dtoa_r+0xa0>
 800abf2:	9f00      	ldr	r7, [sp, #0]
 800abf4:	462b      	mov	r3, r5
 800abf6:	461d      	mov	r5, r3
 800abf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abfc:	2a39      	cmp	r2, #57	; 0x39
 800abfe:	d106      	bne.n	800ac0e <_dtoa_r+0x6de>
 800ac00:	9a01      	ldr	r2, [sp, #4]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d1f7      	bne.n	800abf6 <_dtoa_r+0x6c6>
 800ac06:	9901      	ldr	r1, [sp, #4]
 800ac08:	2230      	movs	r2, #48	; 0x30
 800ac0a:	3701      	adds	r7, #1
 800ac0c:	700a      	strb	r2, [r1, #0]
 800ac0e:	781a      	ldrb	r2, [r3, #0]
 800ac10:	3201      	adds	r2, #1
 800ac12:	701a      	strb	r2, [r3, #0]
 800ac14:	e790      	b.n	800ab38 <_dtoa_r+0x608>
 800ac16:	4ba6      	ldr	r3, [pc, #664]	; (800aeb0 <_dtoa_r+0x980>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f7f5 fd0d 	bl	8000638 <__aeabi_dmul>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2300      	movs	r3, #0
 800ac22:	4606      	mov	r6, r0
 800ac24:	460f      	mov	r7, r1
 800ac26:	f7f5 ff6f 	bl	8000b08 <__aeabi_dcmpeq>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d09d      	beq.n	800ab6a <_dtoa_r+0x63a>
 800ac2e:	e7cf      	b.n	800abd0 <_dtoa_r+0x6a0>
 800ac30:	9a08      	ldr	r2, [sp, #32]
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	f000 80d7 	beq.w	800ade6 <_dtoa_r+0x8b6>
 800ac38:	9a06      	ldr	r2, [sp, #24]
 800ac3a:	2a01      	cmp	r2, #1
 800ac3c:	f300 80ba 	bgt.w	800adb4 <_dtoa_r+0x884>
 800ac40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	f000 80b2 	beq.w	800adac <_dtoa_r+0x87c>
 800ac48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac4c:	9e07      	ldr	r6, [sp, #28]
 800ac4e:	9d04      	ldr	r5, [sp, #16]
 800ac50:	9a04      	ldr	r2, [sp, #16]
 800ac52:	441a      	add	r2, r3
 800ac54:	9204      	str	r2, [sp, #16]
 800ac56:	9a05      	ldr	r2, [sp, #20]
 800ac58:	2101      	movs	r1, #1
 800ac5a:	441a      	add	r2, r3
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	9205      	str	r2, [sp, #20]
 800ac60:	f000 fb66 	bl	800b330 <__i2b>
 800ac64:	4607      	mov	r7, r0
 800ac66:	2d00      	cmp	r5, #0
 800ac68:	dd0c      	ble.n	800ac84 <_dtoa_r+0x754>
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dd09      	ble.n	800ac84 <_dtoa_r+0x754>
 800ac70:	42ab      	cmp	r3, r5
 800ac72:	9a04      	ldr	r2, [sp, #16]
 800ac74:	bfa8      	it	ge
 800ac76:	462b      	movge	r3, r5
 800ac78:	1ad2      	subs	r2, r2, r3
 800ac7a:	9204      	str	r2, [sp, #16]
 800ac7c:	9a05      	ldr	r2, [sp, #20]
 800ac7e:	1aed      	subs	r5, r5, r3
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	b31b      	cbz	r3, 800acd0 <_dtoa_r+0x7a0>
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 80af 	beq.w	800adee <_dtoa_r+0x8be>
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	dd13      	ble.n	800acbc <_dtoa_r+0x78c>
 800ac94:	4639      	mov	r1, r7
 800ac96:	4632      	mov	r2, r6
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fc09 	bl	800b4b0 <__pow5mult>
 800ac9e:	ee18 2a10 	vmov	r2, s16
 800aca2:	4601      	mov	r1, r0
 800aca4:	4607      	mov	r7, r0
 800aca6:	4620      	mov	r0, r4
 800aca8:	f000 fb58 	bl	800b35c <__multiply>
 800acac:	ee18 1a10 	vmov	r1, s16
 800acb0:	4680      	mov	r8, r0
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 fa84 	bl	800b1c0 <_Bfree>
 800acb8:	ee08 8a10 	vmov	s16, r8
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	1b9a      	subs	r2, r3, r6
 800acc0:	d006      	beq.n	800acd0 <_dtoa_r+0x7a0>
 800acc2:	ee18 1a10 	vmov	r1, s16
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fbf2 	bl	800b4b0 <__pow5mult>
 800accc:	ee08 0a10 	vmov	s16, r0
 800acd0:	2101      	movs	r1, #1
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fb2c 	bl	800b330 <__i2b>
 800acd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acda:	2b00      	cmp	r3, #0
 800acdc:	4606      	mov	r6, r0
 800acde:	f340 8088 	ble.w	800adf2 <_dtoa_r+0x8c2>
 800ace2:	461a      	mov	r2, r3
 800ace4:	4601      	mov	r1, r0
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 fbe2 	bl	800b4b0 <__pow5mult>
 800acec:	9b06      	ldr	r3, [sp, #24]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	4606      	mov	r6, r0
 800acf2:	f340 8081 	ble.w	800adf8 <_dtoa_r+0x8c8>
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	6933      	ldr	r3, [r6, #16]
 800acfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad00:	6918      	ldr	r0, [r3, #16]
 800ad02:	f000 fac5 	bl	800b290 <__hi0bits>
 800ad06:	f1c0 0020 	rsb	r0, r0, #32
 800ad0a:	9b05      	ldr	r3, [sp, #20]
 800ad0c:	4418      	add	r0, r3
 800ad0e:	f010 001f 	ands.w	r0, r0, #31
 800ad12:	f000 8092 	beq.w	800ae3a <_dtoa_r+0x90a>
 800ad16:	f1c0 0320 	rsb	r3, r0, #32
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	f340 808a 	ble.w	800ae34 <_dtoa_r+0x904>
 800ad20:	f1c0 001c 	rsb	r0, r0, #28
 800ad24:	9b04      	ldr	r3, [sp, #16]
 800ad26:	4403      	add	r3, r0
 800ad28:	9304      	str	r3, [sp, #16]
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	4403      	add	r3, r0
 800ad2e:	4405      	add	r5, r0
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd07      	ble.n	800ad48 <_dtoa_r+0x818>
 800ad38:	ee18 1a10 	vmov	r1, s16
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fc10 	bl	800b564 <__lshift>
 800ad44:	ee08 0a10 	vmov	s16, r0
 800ad48:	9b05      	ldr	r3, [sp, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dd05      	ble.n	800ad5a <_dtoa_r+0x82a>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	461a      	mov	r2, r3
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 fc06 	bl	800b564 <__lshift>
 800ad58:	4606      	mov	r6, r0
 800ad5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d06e      	beq.n	800ae3e <_dtoa_r+0x90e>
 800ad60:	ee18 0a10 	vmov	r0, s16
 800ad64:	4631      	mov	r1, r6
 800ad66:	f000 fc6d 	bl	800b644 <__mcmp>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	da67      	bge.n	800ae3e <_dtoa_r+0x90e>
 800ad6e:	9b00      	ldr	r3, [sp, #0]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	ee18 1a10 	vmov	r1, s16
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	220a      	movs	r2, #10
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fa41 	bl	800b204 <__multadd>
 800ad82:	9b08      	ldr	r3, [sp, #32]
 800ad84:	ee08 0a10 	vmov	s16, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 81b1 	beq.w	800b0f0 <_dtoa_r+0xbc0>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	4639      	mov	r1, r7
 800ad92:	220a      	movs	r2, #10
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fa35 	bl	800b204 <__multadd>
 800ad9a:	9b02      	ldr	r3, [sp, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	4607      	mov	r7, r0
 800ada0:	f300 808e 	bgt.w	800aec0 <_dtoa_r+0x990>
 800ada4:	9b06      	ldr	r3, [sp, #24]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	dc51      	bgt.n	800ae4e <_dtoa_r+0x91e>
 800adaa:	e089      	b.n	800aec0 <_dtoa_r+0x990>
 800adac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800adb2:	e74b      	b.n	800ac4c <_dtoa_r+0x71c>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	1e5e      	subs	r6, r3, #1
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	42b3      	cmp	r3, r6
 800adbc:	bfbf      	itttt	lt
 800adbe:	9b07      	ldrlt	r3, [sp, #28]
 800adc0:	9607      	strlt	r6, [sp, #28]
 800adc2:	1af2      	sublt	r2, r6, r3
 800adc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800adc6:	bfb6      	itet	lt
 800adc8:	189b      	addlt	r3, r3, r2
 800adca:	1b9e      	subge	r6, r3, r6
 800adcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	bfb8      	it	lt
 800add2:	2600      	movlt	r6, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	bfb7      	itett	lt
 800add8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800addc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ade0:	1a9d      	sublt	r5, r3, r2
 800ade2:	2300      	movlt	r3, #0
 800ade4:	e734      	b.n	800ac50 <_dtoa_r+0x720>
 800ade6:	9e07      	ldr	r6, [sp, #28]
 800ade8:	9d04      	ldr	r5, [sp, #16]
 800adea:	9f08      	ldr	r7, [sp, #32]
 800adec:	e73b      	b.n	800ac66 <_dtoa_r+0x736>
 800adee:	9a07      	ldr	r2, [sp, #28]
 800adf0:	e767      	b.n	800acc2 <_dtoa_r+0x792>
 800adf2:	9b06      	ldr	r3, [sp, #24]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	dc18      	bgt.n	800ae2a <_dtoa_r+0x8fa>
 800adf8:	f1ba 0f00 	cmp.w	sl, #0
 800adfc:	d115      	bne.n	800ae2a <_dtoa_r+0x8fa>
 800adfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae02:	b993      	cbnz	r3, 800ae2a <_dtoa_r+0x8fa>
 800ae04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae08:	0d1b      	lsrs	r3, r3, #20
 800ae0a:	051b      	lsls	r3, r3, #20
 800ae0c:	b183      	cbz	r3, 800ae30 <_dtoa_r+0x900>
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	3301      	adds	r3, #1
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	3301      	adds	r3, #1
 800ae18:	9305      	str	r3, [sp, #20]
 800ae1a:	f04f 0801 	mov.w	r8, #1
 800ae1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f47f af6a 	bne.w	800acfa <_dtoa_r+0x7ca>
 800ae26:	2001      	movs	r0, #1
 800ae28:	e76f      	b.n	800ad0a <_dtoa_r+0x7da>
 800ae2a:	f04f 0800 	mov.w	r8, #0
 800ae2e:	e7f6      	b.n	800ae1e <_dtoa_r+0x8ee>
 800ae30:	4698      	mov	r8, r3
 800ae32:	e7f4      	b.n	800ae1e <_dtoa_r+0x8ee>
 800ae34:	f43f af7d 	beq.w	800ad32 <_dtoa_r+0x802>
 800ae38:	4618      	mov	r0, r3
 800ae3a:	301c      	adds	r0, #28
 800ae3c:	e772      	b.n	800ad24 <_dtoa_r+0x7f4>
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dc37      	bgt.n	800aeb4 <_dtoa_r+0x984>
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	dd34      	ble.n	800aeb4 <_dtoa_r+0x984>
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	9302      	str	r3, [sp, #8]
 800ae4e:	9b02      	ldr	r3, [sp, #8]
 800ae50:	b96b      	cbnz	r3, 800ae6e <_dtoa_r+0x93e>
 800ae52:	4631      	mov	r1, r6
 800ae54:	2205      	movs	r2, #5
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 f9d4 	bl	800b204 <__multadd>
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	4606      	mov	r6, r0
 800ae60:	ee18 0a10 	vmov	r0, s16
 800ae64:	f000 fbee 	bl	800b644 <__mcmp>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f73f adbb 	bgt.w	800a9e4 <_dtoa_r+0x4b4>
 800ae6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae70:	9d01      	ldr	r5, [sp, #4]
 800ae72:	43db      	mvns	r3, r3
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	f04f 0800 	mov.w	r8, #0
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 f99f 	bl	800b1c0 <_Bfree>
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	f43f aea4 	beq.w	800abd0 <_dtoa_r+0x6a0>
 800ae88:	f1b8 0f00 	cmp.w	r8, #0
 800ae8c:	d005      	beq.n	800ae9a <_dtoa_r+0x96a>
 800ae8e:	45b8      	cmp	r8, r7
 800ae90:	d003      	beq.n	800ae9a <_dtoa_r+0x96a>
 800ae92:	4641      	mov	r1, r8
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 f993 	bl	800b1c0 <_Bfree>
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 f98f 	bl	800b1c0 <_Bfree>
 800aea2:	e695      	b.n	800abd0 <_dtoa_r+0x6a0>
 800aea4:	2600      	movs	r6, #0
 800aea6:	4637      	mov	r7, r6
 800aea8:	e7e1      	b.n	800ae6e <_dtoa_r+0x93e>
 800aeaa:	9700      	str	r7, [sp, #0]
 800aeac:	4637      	mov	r7, r6
 800aeae:	e599      	b.n	800a9e4 <_dtoa_r+0x4b4>
 800aeb0:	40240000 	.word	0x40240000
 800aeb4:	9b08      	ldr	r3, [sp, #32]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 80ca 	beq.w	800b050 <_dtoa_r+0xb20>
 800aebc:	9b03      	ldr	r3, [sp, #12]
 800aebe:	9302      	str	r3, [sp, #8]
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	dd05      	ble.n	800aed0 <_dtoa_r+0x9a0>
 800aec4:	4639      	mov	r1, r7
 800aec6:	462a      	mov	r2, r5
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fb4b 	bl	800b564 <__lshift>
 800aece:	4607      	mov	r7, r0
 800aed0:	f1b8 0f00 	cmp.w	r8, #0
 800aed4:	d05b      	beq.n	800af8e <_dtoa_r+0xa5e>
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 f931 	bl	800b140 <_Balloc>
 800aede:	4605      	mov	r5, r0
 800aee0:	b928      	cbnz	r0, 800aeee <_dtoa_r+0x9be>
 800aee2:	4b87      	ldr	r3, [pc, #540]	; (800b100 <_dtoa_r+0xbd0>)
 800aee4:	4602      	mov	r2, r0
 800aee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aeea:	f7ff bb3b 	b.w	800a564 <_dtoa_r+0x34>
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	3202      	adds	r2, #2
 800aef2:	0092      	lsls	r2, r2, #2
 800aef4:	f107 010c 	add.w	r1, r7, #12
 800aef8:	300c      	adds	r0, #12
 800aefa:	f000 f913 	bl	800b124 <memcpy>
 800aefe:	2201      	movs	r2, #1
 800af00:	4629      	mov	r1, r5
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fb2e 	bl	800b564 <__lshift>
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	f103 0901 	add.w	r9, r3, #1
 800af0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af12:	4413      	add	r3, r2
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	f00a 0301 	and.w	r3, sl, #1
 800af1a:	46b8      	mov	r8, r7
 800af1c:	9304      	str	r3, [sp, #16]
 800af1e:	4607      	mov	r7, r0
 800af20:	4631      	mov	r1, r6
 800af22:	ee18 0a10 	vmov	r0, s16
 800af26:	f7ff fa75 	bl	800a414 <quorem>
 800af2a:	4641      	mov	r1, r8
 800af2c:	9002      	str	r0, [sp, #8]
 800af2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af32:	ee18 0a10 	vmov	r0, s16
 800af36:	f000 fb85 	bl	800b644 <__mcmp>
 800af3a:	463a      	mov	r2, r7
 800af3c:	9003      	str	r0, [sp, #12]
 800af3e:	4631      	mov	r1, r6
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fb9b 	bl	800b67c <__mdiff>
 800af46:	68c2      	ldr	r2, [r0, #12]
 800af48:	f109 3bff 	add.w	fp, r9, #4294967295
 800af4c:	4605      	mov	r5, r0
 800af4e:	bb02      	cbnz	r2, 800af92 <_dtoa_r+0xa62>
 800af50:	4601      	mov	r1, r0
 800af52:	ee18 0a10 	vmov	r0, s16
 800af56:	f000 fb75 	bl	800b644 <__mcmp>
 800af5a:	4602      	mov	r2, r0
 800af5c:	4629      	mov	r1, r5
 800af5e:	4620      	mov	r0, r4
 800af60:	9207      	str	r2, [sp, #28]
 800af62:	f000 f92d 	bl	800b1c0 <_Bfree>
 800af66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800af6a:	ea43 0102 	orr.w	r1, r3, r2
 800af6e:	9b04      	ldr	r3, [sp, #16]
 800af70:	430b      	orrs	r3, r1
 800af72:	464d      	mov	r5, r9
 800af74:	d10f      	bne.n	800af96 <_dtoa_r+0xa66>
 800af76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800af7a:	d02a      	beq.n	800afd2 <_dtoa_r+0xaa2>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dd02      	ble.n	800af88 <_dtoa_r+0xa58>
 800af82:	9b02      	ldr	r3, [sp, #8]
 800af84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800af88:	f88b a000 	strb.w	sl, [fp]
 800af8c:	e775      	b.n	800ae7a <_dtoa_r+0x94a>
 800af8e:	4638      	mov	r0, r7
 800af90:	e7ba      	b.n	800af08 <_dtoa_r+0x9d8>
 800af92:	2201      	movs	r2, #1
 800af94:	e7e2      	b.n	800af5c <_dtoa_r+0xa2c>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	db04      	blt.n	800afa6 <_dtoa_r+0xa76>
 800af9c:	9906      	ldr	r1, [sp, #24]
 800af9e:	430b      	orrs	r3, r1
 800afa0:	9904      	ldr	r1, [sp, #16]
 800afa2:	430b      	orrs	r3, r1
 800afa4:	d122      	bne.n	800afec <_dtoa_r+0xabc>
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	ddee      	ble.n	800af88 <_dtoa_r+0xa58>
 800afaa:	ee18 1a10 	vmov	r1, s16
 800afae:	2201      	movs	r2, #1
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fad7 	bl	800b564 <__lshift>
 800afb6:	4631      	mov	r1, r6
 800afb8:	ee08 0a10 	vmov	s16, r0
 800afbc:	f000 fb42 	bl	800b644 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dc03      	bgt.n	800afcc <_dtoa_r+0xa9c>
 800afc4:	d1e0      	bne.n	800af88 <_dtoa_r+0xa58>
 800afc6:	f01a 0f01 	tst.w	sl, #1
 800afca:	d0dd      	beq.n	800af88 <_dtoa_r+0xa58>
 800afcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afd0:	d1d7      	bne.n	800af82 <_dtoa_r+0xa52>
 800afd2:	2339      	movs	r3, #57	; 0x39
 800afd4:	f88b 3000 	strb.w	r3, [fp]
 800afd8:	462b      	mov	r3, r5
 800afda:	461d      	mov	r5, r3
 800afdc:	3b01      	subs	r3, #1
 800afde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800afe2:	2a39      	cmp	r2, #57	; 0x39
 800afe4:	d071      	beq.n	800b0ca <_dtoa_r+0xb9a>
 800afe6:	3201      	adds	r2, #1
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	e746      	b.n	800ae7a <_dtoa_r+0x94a>
 800afec:	2a00      	cmp	r2, #0
 800afee:	dd07      	ble.n	800b000 <_dtoa_r+0xad0>
 800aff0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aff4:	d0ed      	beq.n	800afd2 <_dtoa_r+0xaa2>
 800aff6:	f10a 0301 	add.w	r3, sl, #1
 800affa:	f88b 3000 	strb.w	r3, [fp]
 800affe:	e73c      	b.n	800ae7a <_dtoa_r+0x94a>
 800b000:	9b05      	ldr	r3, [sp, #20]
 800b002:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b006:	4599      	cmp	r9, r3
 800b008:	d047      	beq.n	800b09a <_dtoa_r+0xb6a>
 800b00a:	ee18 1a10 	vmov	r1, s16
 800b00e:	2300      	movs	r3, #0
 800b010:	220a      	movs	r2, #10
 800b012:	4620      	mov	r0, r4
 800b014:	f000 f8f6 	bl	800b204 <__multadd>
 800b018:	45b8      	cmp	r8, r7
 800b01a:	ee08 0a10 	vmov	s16, r0
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	f04f 020a 	mov.w	r2, #10
 800b026:	4641      	mov	r1, r8
 800b028:	4620      	mov	r0, r4
 800b02a:	d106      	bne.n	800b03a <_dtoa_r+0xb0a>
 800b02c:	f000 f8ea 	bl	800b204 <__multadd>
 800b030:	4680      	mov	r8, r0
 800b032:	4607      	mov	r7, r0
 800b034:	f109 0901 	add.w	r9, r9, #1
 800b038:	e772      	b.n	800af20 <_dtoa_r+0x9f0>
 800b03a:	f000 f8e3 	bl	800b204 <__multadd>
 800b03e:	4639      	mov	r1, r7
 800b040:	4680      	mov	r8, r0
 800b042:	2300      	movs	r3, #0
 800b044:	220a      	movs	r2, #10
 800b046:	4620      	mov	r0, r4
 800b048:	f000 f8dc 	bl	800b204 <__multadd>
 800b04c:	4607      	mov	r7, r0
 800b04e:	e7f1      	b.n	800b034 <_dtoa_r+0xb04>
 800b050:	9b03      	ldr	r3, [sp, #12]
 800b052:	9302      	str	r3, [sp, #8]
 800b054:	9d01      	ldr	r5, [sp, #4]
 800b056:	ee18 0a10 	vmov	r0, s16
 800b05a:	4631      	mov	r1, r6
 800b05c:	f7ff f9da 	bl	800a414 <quorem>
 800b060:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b064:	9b01      	ldr	r3, [sp, #4]
 800b066:	f805 ab01 	strb.w	sl, [r5], #1
 800b06a:	1aea      	subs	r2, r5, r3
 800b06c:	9b02      	ldr	r3, [sp, #8]
 800b06e:	4293      	cmp	r3, r2
 800b070:	dd09      	ble.n	800b086 <_dtoa_r+0xb56>
 800b072:	ee18 1a10 	vmov	r1, s16
 800b076:	2300      	movs	r3, #0
 800b078:	220a      	movs	r2, #10
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 f8c2 	bl	800b204 <__multadd>
 800b080:	ee08 0a10 	vmov	s16, r0
 800b084:	e7e7      	b.n	800b056 <_dtoa_r+0xb26>
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	bfc8      	it	gt
 800b08c:	461d      	movgt	r5, r3
 800b08e:	9b01      	ldr	r3, [sp, #4]
 800b090:	bfd8      	it	le
 800b092:	2501      	movle	r5, #1
 800b094:	441d      	add	r5, r3
 800b096:	f04f 0800 	mov.w	r8, #0
 800b09a:	ee18 1a10 	vmov	r1, s16
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 fa5f 	bl	800b564 <__lshift>
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	ee08 0a10 	vmov	s16, r0
 800b0ac:	f000 faca 	bl	800b644 <__mcmp>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	dc91      	bgt.n	800afd8 <_dtoa_r+0xaa8>
 800b0b4:	d102      	bne.n	800b0bc <_dtoa_r+0xb8c>
 800b0b6:	f01a 0f01 	tst.w	sl, #1
 800b0ba:	d18d      	bne.n	800afd8 <_dtoa_r+0xaa8>
 800b0bc:	462b      	mov	r3, r5
 800b0be:	461d      	mov	r5, r3
 800b0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0c4:	2a30      	cmp	r2, #48	; 0x30
 800b0c6:	d0fa      	beq.n	800b0be <_dtoa_r+0xb8e>
 800b0c8:	e6d7      	b.n	800ae7a <_dtoa_r+0x94a>
 800b0ca:	9a01      	ldr	r2, [sp, #4]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d184      	bne.n	800afda <_dtoa_r+0xaaa>
 800b0d0:	9b00      	ldr	r3, [sp, #0]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	2331      	movs	r3, #49	; 0x31
 800b0d8:	7013      	strb	r3, [r2, #0]
 800b0da:	e6ce      	b.n	800ae7a <_dtoa_r+0x94a>
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <_dtoa_r+0xbd4>)
 800b0de:	f7ff ba95 	b.w	800a60c <_dtoa_r+0xdc>
 800b0e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f47f aa6e 	bne.w	800a5c6 <_dtoa_r+0x96>
 800b0ea:	4b07      	ldr	r3, [pc, #28]	; (800b108 <_dtoa_r+0xbd8>)
 800b0ec:	f7ff ba8e 	b.w	800a60c <_dtoa_r+0xdc>
 800b0f0:	9b02      	ldr	r3, [sp, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dcae      	bgt.n	800b054 <_dtoa_r+0xb24>
 800b0f6:	9b06      	ldr	r3, [sp, #24]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	f73f aea8 	bgt.w	800ae4e <_dtoa_r+0x91e>
 800b0fe:	e7a9      	b.n	800b054 <_dtoa_r+0xb24>
 800b100:	0800deef 	.word	0x0800deef
 800b104:	0800de4c 	.word	0x0800de4c
 800b108:	0800de70 	.word	0x0800de70

0800b10c <_localeconv_r>:
 800b10c:	4800      	ldr	r0, [pc, #0]	; (800b110 <_localeconv_r+0x4>)
 800b10e:	4770      	bx	lr
 800b110:	200001ac 	.word	0x200001ac

0800b114 <malloc>:
 800b114:	4b02      	ldr	r3, [pc, #8]	; (800b120 <malloc+0xc>)
 800b116:	4601      	mov	r1, r0
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	f000 bc17 	b.w	800b94c <_malloc_r>
 800b11e:	bf00      	nop
 800b120:	20000058 	.word	0x20000058

0800b124 <memcpy>:
 800b124:	440a      	add	r2, r1
 800b126:	4291      	cmp	r1, r2
 800b128:	f100 33ff 	add.w	r3, r0, #4294967295
 800b12c:	d100      	bne.n	800b130 <memcpy+0xc>
 800b12e:	4770      	bx	lr
 800b130:	b510      	push	{r4, lr}
 800b132:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b13a:	4291      	cmp	r1, r2
 800b13c:	d1f9      	bne.n	800b132 <memcpy+0xe>
 800b13e:	bd10      	pop	{r4, pc}

0800b140 <_Balloc>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b144:	4604      	mov	r4, r0
 800b146:	460d      	mov	r5, r1
 800b148:	b976      	cbnz	r6, 800b168 <_Balloc+0x28>
 800b14a:	2010      	movs	r0, #16
 800b14c:	f7ff ffe2 	bl	800b114 <malloc>
 800b150:	4602      	mov	r2, r0
 800b152:	6260      	str	r0, [r4, #36]	; 0x24
 800b154:	b920      	cbnz	r0, 800b160 <_Balloc+0x20>
 800b156:	4b18      	ldr	r3, [pc, #96]	; (800b1b8 <_Balloc+0x78>)
 800b158:	4818      	ldr	r0, [pc, #96]	; (800b1bc <_Balloc+0x7c>)
 800b15a:	2166      	movs	r1, #102	; 0x66
 800b15c:	f000 fdd6 	bl	800bd0c <__assert_func>
 800b160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b164:	6006      	str	r6, [r0, #0]
 800b166:	60c6      	str	r6, [r0, #12]
 800b168:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b16a:	68f3      	ldr	r3, [r6, #12]
 800b16c:	b183      	cbz	r3, 800b190 <_Balloc+0x50>
 800b16e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b176:	b9b8      	cbnz	r0, 800b1a8 <_Balloc+0x68>
 800b178:	2101      	movs	r1, #1
 800b17a:	fa01 f605 	lsl.w	r6, r1, r5
 800b17e:	1d72      	adds	r2, r6, #5
 800b180:	0092      	lsls	r2, r2, #2
 800b182:	4620      	mov	r0, r4
 800b184:	f000 fb60 	bl	800b848 <_calloc_r>
 800b188:	b160      	cbz	r0, 800b1a4 <_Balloc+0x64>
 800b18a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b18e:	e00e      	b.n	800b1ae <_Balloc+0x6e>
 800b190:	2221      	movs	r2, #33	; 0x21
 800b192:	2104      	movs	r1, #4
 800b194:	4620      	mov	r0, r4
 800b196:	f000 fb57 	bl	800b848 <_calloc_r>
 800b19a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b19c:	60f0      	str	r0, [r6, #12]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e4      	bne.n	800b16e <_Balloc+0x2e>
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	6802      	ldr	r2, [r0, #0]
 800b1aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1b4:	e7f7      	b.n	800b1a6 <_Balloc+0x66>
 800b1b6:	bf00      	nop
 800b1b8:	0800de7d 	.word	0x0800de7d
 800b1bc:	0800df00 	.word	0x0800df00

0800b1c0 <_Bfree>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	b976      	cbnz	r6, 800b1e8 <_Bfree+0x28>
 800b1ca:	2010      	movs	r0, #16
 800b1cc:	f7ff ffa2 	bl	800b114 <malloc>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	6268      	str	r0, [r5, #36]	; 0x24
 800b1d4:	b920      	cbnz	r0, 800b1e0 <_Bfree+0x20>
 800b1d6:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <_Bfree+0x3c>)
 800b1d8:	4809      	ldr	r0, [pc, #36]	; (800b200 <_Bfree+0x40>)
 800b1da:	218a      	movs	r1, #138	; 0x8a
 800b1dc:	f000 fd96 	bl	800bd0c <__assert_func>
 800b1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1e4:	6006      	str	r6, [r0, #0]
 800b1e6:	60c6      	str	r6, [r0, #12]
 800b1e8:	b13c      	cbz	r4, 800b1fa <_Bfree+0x3a>
 800b1ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1ec:	6862      	ldr	r2, [r4, #4]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1f4:	6021      	str	r1, [r4, #0]
 800b1f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	0800de7d 	.word	0x0800de7d
 800b200:	0800df00 	.word	0x0800df00

0800b204 <__multadd>:
 800b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b208:	690d      	ldr	r5, [r1, #16]
 800b20a:	4607      	mov	r7, r0
 800b20c:	460c      	mov	r4, r1
 800b20e:	461e      	mov	r6, r3
 800b210:	f101 0c14 	add.w	ip, r1, #20
 800b214:	2000      	movs	r0, #0
 800b216:	f8dc 3000 	ldr.w	r3, [ip]
 800b21a:	b299      	uxth	r1, r3
 800b21c:	fb02 6101 	mla	r1, r2, r1, r6
 800b220:	0c1e      	lsrs	r6, r3, #16
 800b222:	0c0b      	lsrs	r3, r1, #16
 800b224:	fb02 3306 	mla	r3, r2, r6, r3
 800b228:	b289      	uxth	r1, r1
 800b22a:	3001      	adds	r0, #1
 800b22c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b230:	4285      	cmp	r5, r0
 800b232:	f84c 1b04 	str.w	r1, [ip], #4
 800b236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b23a:	dcec      	bgt.n	800b216 <__multadd+0x12>
 800b23c:	b30e      	cbz	r6, 800b282 <__multadd+0x7e>
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	42ab      	cmp	r3, r5
 800b242:	dc19      	bgt.n	800b278 <__multadd+0x74>
 800b244:	6861      	ldr	r1, [r4, #4]
 800b246:	4638      	mov	r0, r7
 800b248:	3101      	adds	r1, #1
 800b24a:	f7ff ff79 	bl	800b140 <_Balloc>
 800b24e:	4680      	mov	r8, r0
 800b250:	b928      	cbnz	r0, 800b25e <__multadd+0x5a>
 800b252:	4602      	mov	r2, r0
 800b254:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <__multadd+0x84>)
 800b256:	480d      	ldr	r0, [pc, #52]	; (800b28c <__multadd+0x88>)
 800b258:	21b5      	movs	r1, #181	; 0xb5
 800b25a:	f000 fd57 	bl	800bd0c <__assert_func>
 800b25e:	6922      	ldr	r2, [r4, #16]
 800b260:	3202      	adds	r2, #2
 800b262:	f104 010c 	add.w	r1, r4, #12
 800b266:	0092      	lsls	r2, r2, #2
 800b268:	300c      	adds	r0, #12
 800b26a:	f7ff ff5b 	bl	800b124 <memcpy>
 800b26e:	4621      	mov	r1, r4
 800b270:	4638      	mov	r0, r7
 800b272:	f7ff ffa5 	bl	800b1c0 <_Bfree>
 800b276:	4644      	mov	r4, r8
 800b278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b27c:	3501      	adds	r5, #1
 800b27e:	615e      	str	r6, [r3, #20]
 800b280:	6125      	str	r5, [r4, #16]
 800b282:	4620      	mov	r0, r4
 800b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b288:	0800deef 	.word	0x0800deef
 800b28c:	0800df00 	.word	0x0800df00

0800b290 <__hi0bits>:
 800b290:	0c03      	lsrs	r3, r0, #16
 800b292:	041b      	lsls	r3, r3, #16
 800b294:	b9d3      	cbnz	r3, 800b2cc <__hi0bits+0x3c>
 800b296:	0400      	lsls	r0, r0, #16
 800b298:	2310      	movs	r3, #16
 800b29a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b29e:	bf04      	itt	eq
 800b2a0:	0200      	lsleq	r0, r0, #8
 800b2a2:	3308      	addeq	r3, #8
 800b2a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2a8:	bf04      	itt	eq
 800b2aa:	0100      	lsleq	r0, r0, #4
 800b2ac:	3304      	addeq	r3, #4
 800b2ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2b2:	bf04      	itt	eq
 800b2b4:	0080      	lsleq	r0, r0, #2
 800b2b6:	3302      	addeq	r3, #2
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	db05      	blt.n	800b2c8 <__hi0bits+0x38>
 800b2bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2c0:	f103 0301 	add.w	r3, r3, #1
 800b2c4:	bf08      	it	eq
 800b2c6:	2320      	moveq	r3, #32
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	4770      	bx	lr
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e7e4      	b.n	800b29a <__hi0bits+0xa>

0800b2d0 <__lo0bits>:
 800b2d0:	6803      	ldr	r3, [r0, #0]
 800b2d2:	f013 0207 	ands.w	r2, r3, #7
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	d00b      	beq.n	800b2f2 <__lo0bits+0x22>
 800b2da:	07da      	lsls	r2, r3, #31
 800b2dc:	d423      	bmi.n	800b326 <__lo0bits+0x56>
 800b2de:	0798      	lsls	r0, r3, #30
 800b2e0:	bf49      	itett	mi
 800b2e2:	085b      	lsrmi	r3, r3, #1
 800b2e4:	089b      	lsrpl	r3, r3, #2
 800b2e6:	2001      	movmi	r0, #1
 800b2e8:	600b      	strmi	r3, [r1, #0]
 800b2ea:	bf5c      	itt	pl
 800b2ec:	600b      	strpl	r3, [r1, #0]
 800b2ee:	2002      	movpl	r0, #2
 800b2f0:	4770      	bx	lr
 800b2f2:	b298      	uxth	r0, r3
 800b2f4:	b9a8      	cbnz	r0, 800b322 <__lo0bits+0x52>
 800b2f6:	0c1b      	lsrs	r3, r3, #16
 800b2f8:	2010      	movs	r0, #16
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	b90a      	cbnz	r2, 800b302 <__lo0bits+0x32>
 800b2fe:	3008      	adds	r0, #8
 800b300:	0a1b      	lsrs	r3, r3, #8
 800b302:	071a      	lsls	r2, r3, #28
 800b304:	bf04      	itt	eq
 800b306:	091b      	lsreq	r3, r3, #4
 800b308:	3004      	addeq	r0, #4
 800b30a:	079a      	lsls	r2, r3, #30
 800b30c:	bf04      	itt	eq
 800b30e:	089b      	lsreq	r3, r3, #2
 800b310:	3002      	addeq	r0, #2
 800b312:	07da      	lsls	r2, r3, #31
 800b314:	d403      	bmi.n	800b31e <__lo0bits+0x4e>
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	f100 0001 	add.w	r0, r0, #1
 800b31c:	d005      	beq.n	800b32a <__lo0bits+0x5a>
 800b31e:	600b      	str	r3, [r1, #0]
 800b320:	4770      	bx	lr
 800b322:	4610      	mov	r0, r2
 800b324:	e7e9      	b.n	800b2fa <__lo0bits+0x2a>
 800b326:	2000      	movs	r0, #0
 800b328:	4770      	bx	lr
 800b32a:	2020      	movs	r0, #32
 800b32c:	4770      	bx	lr
	...

0800b330 <__i2b>:
 800b330:	b510      	push	{r4, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	2101      	movs	r1, #1
 800b336:	f7ff ff03 	bl	800b140 <_Balloc>
 800b33a:	4602      	mov	r2, r0
 800b33c:	b928      	cbnz	r0, 800b34a <__i2b+0x1a>
 800b33e:	4b05      	ldr	r3, [pc, #20]	; (800b354 <__i2b+0x24>)
 800b340:	4805      	ldr	r0, [pc, #20]	; (800b358 <__i2b+0x28>)
 800b342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b346:	f000 fce1 	bl	800bd0c <__assert_func>
 800b34a:	2301      	movs	r3, #1
 800b34c:	6144      	str	r4, [r0, #20]
 800b34e:	6103      	str	r3, [r0, #16]
 800b350:	bd10      	pop	{r4, pc}
 800b352:	bf00      	nop
 800b354:	0800deef 	.word	0x0800deef
 800b358:	0800df00 	.word	0x0800df00

0800b35c <__multiply>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	4691      	mov	r9, r2
 800b362:	690a      	ldr	r2, [r1, #16]
 800b364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b368:	429a      	cmp	r2, r3
 800b36a:	bfb8      	it	lt
 800b36c:	460b      	movlt	r3, r1
 800b36e:	460c      	mov	r4, r1
 800b370:	bfbc      	itt	lt
 800b372:	464c      	movlt	r4, r9
 800b374:	4699      	movlt	r9, r3
 800b376:	6927      	ldr	r7, [r4, #16]
 800b378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b37c:	68a3      	ldr	r3, [r4, #8]
 800b37e:	6861      	ldr	r1, [r4, #4]
 800b380:	eb07 060a 	add.w	r6, r7, sl
 800b384:	42b3      	cmp	r3, r6
 800b386:	b085      	sub	sp, #20
 800b388:	bfb8      	it	lt
 800b38a:	3101      	addlt	r1, #1
 800b38c:	f7ff fed8 	bl	800b140 <_Balloc>
 800b390:	b930      	cbnz	r0, 800b3a0 <__multiply+0x44>
 800b392:	4602      	mov	r2, r0
 800b394:	4b44      	ldr	r3, [pc, #272]	; (800b4a8 <__multiply+0x14c>)
 800b396:	4845      	ldr	r0, [pc, #276]	; (800b4ac <__multiply+0x150>)
 800b398:	f240 115d 	movw	r1, #349	; 0x15d
 800b39c:	f000 fcb6 	bl	800bd0c <__assert_func>
 800b3a0:	f100 0514 	add.w	r5, r0, #20
 800b3a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4543      	cmp	r3, r8
 800b3ae:	d321      	bcc.n	800b3f4 <__multiply+0x98>
 800b3b0:	f104 0314 	add.w	r3, r4, #20
 800b3b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b3b8:	f109 0314 	add.w	r3, r9, #20
 800b3bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b3c0:	9202      	str	r2, [sp, #8]
 800b3c2:	1b3a      	subs	r2, r7, r4
 800b3c4:	3a15      	subs	r2, #21
 800b3c6:	f022 0203 	bic.w	r2, r2, #3
 800b3ca:	3204      	adds	r2, #4
 800b3cc:	f104 0115 	add.w	r1, r4, #21
 800b3d0:	428f      	cmp	r7, r1
 800b3d2:	bf38      	it	cc
 800b3d4:	2204      	movcc	r2, #4
 800b3d6:	9201      	str	r2, [sp, #4]
 800b3d8:	9a02      	ldr	r2, [sp, #8]
 800b3da:	9303      	str	r3, [sp, #12]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d80c      	bhi.n	800b3fa <__multiply+0x9e>
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	dd03      	ble.n	800b3ec <__multiply+0x90>
 800b3e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d05a      	beq.n	800b4a2 <__multiply+0x146>
 800b3ec:	6106      	str	r6, [r0, #16]
 800b3ee:	b005      	add	sp, #20
 800b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f4:	f843 2b04 	str.w	r2, [r3], #4
 800b3f8:	e7d8      	b.n	800b3ac <__multiply+0x50>
 800b3fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3fe:	f1ba 0f00 	cmp.w	sl, #0
 800b402:	d024      	beq.n	800b44e <__multiply+0xf2>
 800b404:	f104 0e14 	add.w	lr, r4, #20
 800b408:	46a9      	mov	r9, r5
 800b40a:	f04f 0c00 	mov.w	ip, #0
 800b40e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b412:	f8d9 1000 	ldr.w	r1, [r9]
 800b416:	fa1f fb82 	uxth.w	fp, r2
 800b41a:	b289      	uxth	r1, r1
 800b41c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b424:	f8d9 2000 	ldr.w	r2, [r9]
 800b428:	4461      	add	r1, ip
 800b42a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b42e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b436:	b289      	uxth	r1, r1
 800b438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b43c:	4577      	cmp	r7, lr
 800b43e:	f849 1b04 	str.w	r1, [r9], #4
 800b442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b446:	d8e2      	bhi.n	800b40e <__multiply+0xb2>
 800b448:	9a01      	ldr	r2, [sp, #4]
 800b44a:	f845 c002 	str.w	ip, [r5, r2]
 800b44e:	9a03      	ldr	r2, [sp, #12]
 800b450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b454:	3304      	adds	r3, #4
 800b456:	f1b9 0f00 	cmp.w	r9, #0
 800b45a:	d020      	beq.n	800b49e <__multiply+0x142>
 800b45c:	6829      	ldr	r1, [r5, #0]
 800b45e:	f104 0c14 	add.w	ip, r4, #20
 800b462:	46ae      	mov	lr, r5
 800b464:	f04f 0a00 	mov.w	sl, #0
 800b468:	f8bc b000 	ldrh.w	fp, [ip]
 800b46c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b470:	fb09 220b 	mla	r2, r9, fp, r2
 800b474:	4492      	add	sl, r2
 800b476:	b289      	uxth	r1, r1
 800b478:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b47c:	f84e 1b04 	str.w	r1, [lr], #4
 800b480:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b484:	f8be 1000 	ldrh.w	r1, [lr]
 800b488:	0c12      	lsrs	r2, r2, #16
 800b48a:	fb09 1102 	mla	r1, r9, r2, r1
 800b48e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b492:	4567      	cmp	r7, ip
 800b494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b498:	d8e6      	bhi.n	800b468 <__multiply+0x10c>
 800b49a:	9a01      	ldr	r2, [sp, #4]
 800b49c:	50a9      	str	r1, [r5, r2]
 800b49e:	3504      	adds	r5, #4
 800b4a0:	e79a      	b.n	800b3d8 <__multiply+0x7c>
 800b4a2:	3e01      	subs	r6, #1
 800b4a4:	e79c      	b.n	800b3e0 <__multiply+0x84>
 800b4a6:	bf00      	nop
 800b4a8:	0800deef 	.word	0x0800deef
 800b4ac:	0800df00 	.word	0x0800df00

0800b4b0 <__pow5mult>:
 800b4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b4:	4615      	mov	r5, r2
 800b4b6:	f012 0203 	ands.w	r2, r2, #3
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	d007      	beq.n	800b4d0 <__pow5mult+0x20>
 800b4c0:	4c25      	ldr	r4, [pc, #148]	; (800b558 <__pow5mult+0xa8>)
 800b4c2:	3a01      	subs	r2, #1
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4ca:	f7ff fe9b 	bl	800b204 <__multadd>
 800b4ce:	4607      	mov	r7, r0
 800b4d0:	10ad      	asrs	r5, r5, #2
 800b4d2:	d03d      	beq.n	800b550 <__pow5mult+0xa0>
 800b4d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4d6:	b97c      	cbnz	r4, 800b4f8 <__pow5mult+0x48>
 800b4d8:	2010      	movs	r0, #16
 800b4da:	f7ff fe1b 	bl	800b114 <malloc>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	6270      	str	r0, [r6, #36]	; 0x24
 800b4e2:	b928      	cbnz	r0, 800b4f0 <__pow5mult+0x40>
 800b4e4:	4b1d      	ldr	r3, [pc, #116]	; (800b55c <__pow5mult+0xac>)
 800b4e6:	481e      	ldr	r0, [pc, #120]	; (800b560 <__pow5mult+0xb0>)
 800b4e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4ec:	f000 fc0e 	bl	800bd0c <__assert_func>
 800b4f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4f4:	6004      	str	r4, [r0, #0]
 800b4f6:	60c4      	str	r4, [r0, #12]
 800b4f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b500:	b94c      	cbnz	r4, 800b516 <__pow5mult+0x66>
 800b502:	f240 2171 	movw	r1, #625	; 0x271
 800b506:	4630      	mov	r0, r6
 800b508:	f7ff ff12 	bl	800b330 <__i2b>
 800b50c:	2300      	movs	r3, #0
 800b50e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b512:	4604      	mov	r4, r0
 800b514:	6003      	str	r3, [r0, #0]
 800b516:	f04f 0900 	mov.w	r9, #0
 800b51a:	07eb      	lsls	r3, r5, #31
 800b51c:	d50a      	bpl.n	800b534 <__pow5mult+0x84>
 800b51e:	4639      	mov	r1, r7
 800b520:	4622      	mov	r2, r4
 800b522:	4630      	mov	r0, r6
 800b524:	f7ff ff1a 	bl	800b35c <__multiply>
 800b528:	4639      	mov	r1, r7
 800b52a:	4680      	mov	r8, r0
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7ff fe47 	bl	800b1c0 <_Bfree>
 800b532:	4647      	mov	r7, r8
 800b534:	106d      	asrs	r5, r5, #1
 800b536:	d00b      	beq.n	800b550 <__pow5mult+0xa0>
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	b938      	cbnz	r0, 800b54c <__pow5mult+0x9c>
 800b53c:	4622      	mov	r2, r4
 800b53e:	4621      	mov	r1, r4
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff ff0b 	bl	800b35c <__multiply>
 800b546:	6020      	str	r0, [r4, #0]
 800b548:	f8c0 9000 	str.w	r9, [r0]
 800b54c:	4604      	mov	r4, r0
 800b54e:	e7e4      	b.n	800b51a <__pow5mult+0x6a>
 800b550:	4638      	mov	r0, r7
 800b552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b556:	bf00      	nop
 800b558:	0800e050 	.word	0x0800e050
 800b55c:	0800de7d 	.word	0x0800de7d
 800b560:	0800df00 	.word	0x0800df00

0800b564 <__lshift>:
 800b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b568:	460c      	mov	r4, r1
 800b56a:	6849      	ldr	r1, [r1, #4]
 800b56c:	6923      	ldr	r3, [r4, #16]
 800b56e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b572:	68a3      	ldr	r3, [r4, #8]
 800b574:	4607      	mov	r7, r0
 800b576:	4691      	mov	r9, r2
 800b578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b57c:	f108 0601 	add.w	r6, r8, #1
 800b580:	42b3      	cmp	r3, r6
 800b582:	db0b      	blt.n	800b59c <__lshift+0x38>
 800b584:	4638      	mov	r0, r7
 800b586:	f7ff fddb 	bl	800b140 <_Balloc>
 800b58a:	4605      	mov	r5, r0
 800b58c:	b948      	cbnz	r0, 800b5a2 <__lshift+0x3e>
 800b58e:	4602      	mov	r2, r0
 800b590:	4b2a      	ldr	r3, [pc, #168]	; (800b63c <__lshift+0xd8>)
 800b592:	482b      	ldr	r0, [pc, #172]	; (800b640 <__lshift+0xdc>)
 800b594:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b598:	f000 fbb8 	bl	800bd0c <__assert_func>
 800b59c:	3101      	adds	r1, #1
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	e7ee      	b.n	800b580 <__lshift+0x1c>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f100 0114 	add.w	r1, r0, #20
 800b5a8:	f100 0210 	add.w	r2, r0, #16
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	4553      	cmp	r3, sl
 800b5b0:	db37      	blt.n	800b622 <__lshift+0xbe>
 800b5b2:	6920      	ldr	r0, [r4, #16]
 800b5b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5b8:	f104 0314 	add.w	r3, r4, #20
 800b5bc:	f019 091f 	ands.w	r9, r9, #31
 800b5c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b5c8:	d02f      	beq.n	800b62a <__lshift+0xc6>
 800b5ca:	f1c9 0e20 	rsb	lr, r9, #32
 800b5ce:	468a      	mov	sl, r1
 800b5d0:	f04f 0c00 	mov.w	ip, #0
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	fa02 f209 	lsl.w	r2, r2, r9
 800b5da:	ea42 020c 	orr.w	r2, r2, ip
 800b5de:	f84a 2b04 	str.w	r2, [sl], #4
 800b5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e6:	4298      	cmp	r0, r3
 800b5e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b5ec:	d8f2      	bhi.n	800b5d4 <__lshift+0x70>
 800b5ee:	1b03      	subs	r3, r0, r4
 800b5f0:	3b15      	subs	r3, #21
 800b5f2:	f023 0303 	bic.w	r3, r3, #3
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	f104 0215 	add.w	r2, r4, #21
 800b5fc:	4290      	cmp	r0, r2
 800b5fe:	bf38      	it	cc
 800b600:	2304      	movcc	r3, #4
 800b602:	f841 c003 	str.w	ip, [r1, r3]
 800b606:	f1bc 0f00 	cmp.w	ip, #0
 800b60a:	d001      	beq.n	800b610 <__lshift+0xac>
 800b60c:	f108 0602 	add.w	r6, r8, #2
 800b610:	3e01      	subs	r6, #1
 800b612:	4638      	mov	r0, r7
 800b614:	612e      	str	r6, [r5, #16]
 800b616:	4621      	mov	r1, r4
 800b618:	f7ff fdd2 	bl	800b1c0 <_Bfree>
 800b61c:	4628      	mov	r0, r5
 800b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b622:	f842 0f04 	str.w	r0, [r2, #4]!
 800b626:	3301      	adds	r3, #1
 800b628:	e7c1      	b.n	800b5ae <__lshift+0x4a>
 800b62a:	3904      	subs	r1, #4
 800b62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b630:	f841 2f04 	str.w	r2, [r1, #4]!
 800b634:	4298      	cmp	r0, r3
 800b636:	d8f9      	bhi.n	800b62c <__lshift+0xc8>
 800b638:	e7ea      	b.n	800b610 <__lshift+0xac>
 800b63a:	bf00      	nop
 800b63c:	0800deef 	.word	0x0800deef
 800b640:	0800df00 	.word	0x0800df00

0800b644 <__mcmp>:
 800b644:	b530      	push	{r4, r5, lr}
 800b646:	6902      	ldr	r2, [r0, #16]
 800b648:	690c      	ldr	r4, [r1, #16]
 800b64a:	1b12      	subs	r2, r2, r4
 800b64c:	d10e      	bne.n	800b66c <__mcmp+0x28>
 800b64e:	f100 0314 	add.w	r3, r0, #20
 800b652:	3114      	adds	r1, #20
 800b654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b65c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b664:	42a5      	cmp	r5, r4
 800b666:	d003      	beq.n	800b670 <__mcmp+0x2c>
 800b668:	d305      	bcc.n	800b676 <__mcmp+0x32>
 800b66a:	2201      	movs	r2, #1
 800b66c:	4610      	mov	r0, r2
 800b66e:	bd30      	pop	{r4, r5, pc}
 800b670:	4283      	cmp	r3, r0
 800b672:	d3f3      	bcc.n	800b65c <__mcmp+0x18>
 800b674:	e7fa      	b.n	800b66c <__mcmp+0x28>
 800b676:	f04f 32ff 	mov.w	r2, #4294967295
 800b67a:	e7f7      	b.n	800b66c <__mcmp+0x28>

0800b67c <__mdiff>:
 800b67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b680:	460c      	mov	r4, r1
 800b682:	4606      	mov	r6, r0
 800b684:	4611      	mov	r1, r2
 800b686:	4620      	mov	r0, r4
 800b688:	4690      	mov	r8, r2
 800b68a:	f7ff ffdb 	bl	800b644 <__mcmp>
 800b68e:	1e05      	subs	r5, r0, #0
 800b690:	d110      	bne.n	800b6b4 <__mdiff+0x38>
 800b692:	4629      	mov	r1, r5
 800b694:	4630      	mov	r0, r6
 800b696:	f7ff fd53 	bl	800b140 <_Balloc>
 800b69a:	b930      	cbnz	r0, 800b6aa <__mdiff+0x2e>
 800b69c:	4b3a      	ldr	r3, [pc, #232]	; (800b788 <__mdiff+0x10c>)
 800b69e:	4602      	mov	r2, r0
 800b6a0:	f240 2132 	movw	r1, #562	; 0x232
 800b6a4:	4839      	ldr	r0, [pc, #228]	; (800b78c <__mdiff+0x110>)
 800b6a6:	f000 fb31 	bl	800bd0c <__assert_func>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b4:	bfa4      	itt	ge
 800b6b6:	4643      	movge	r3, r8
 800b6b8:	46a0      	movge	r8, r4
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6c0:	bfa6      	itte	ge
 800b6c2:	461c      	movge	r4, r3
 800b6c4:	2500      	movge	r5, #0
 800b6c6:	2501      	movlt	r5, #1
 800b6c8:	f7ff fd3a 	bl	800b140 <_Balloc>
 800b6cc:	b920      	cbnz	r0, 800b6d8 <__mdiff+0x5c>
 800b6ce:	4b2e      	ldr	r3, [pc, #184]	; (800b788 <__mdiff+0x10c>)
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b6d6:	e7e5      	b.n	800b6a4 <__mdiff+0x28>
 800b6d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6dc:	6926      	ldr	r6, [r4, #16]
 800b6de:	60c5      	str	r5, [r0, #12]
 800b6e0:	f104 0914 	add.w	r9, r4, #20
 800b6e4:	f108 0514 	add.w	r5, r8, #20
 800b6e8:	f100 0e14 	add.w	lr, r0, #20
 800b6ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6f4:	f108 0210 	add.w	r2, r8, #16
 800b6f8:	46f2      	mov	sl, lr
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b704:	fa1f f883 	uxth.w	r8, r3
 800b708:	fa11 f18b 	uxtah	r1, r1, fp
 800b70c:	0c1b      	lsrs	r3, r3, #16
 800b70e:	eba1 0808 	sub.w	r8, r1, r8
 800b712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b71a:	fa1f f888 	uxth.w	r8, r8
 800b71e:	1419      	asrs	r1, r3, #16
 800b720:	454e      	cmp	r6, r9
 800b722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b726:	f84a 3b04 	str.w	r3, [sl], #4
 800b72a:	d8e7      	bhi.n	800b6fc <__mdiff+0x80>
 800b72c:	1b33      	subs	r3, r6, r4
 800b72e:	3b15      	subs	r3, #21
 800b730:	f023 0303 	bic.w	r3, r3, #3
 800b734:	3304      	adds	r3, #4
 800b736:	3415      	adds	r4, #21
 800b738:	42a6      	cmp	r6, r4
 800b73a:	bf38      	it	cc
 800b73c:	2304      	movcc	r3, #4
 800b73e:	441d      	add	r5, r3
 800b740:	4473      	add	r3, lr
 800b742:	469e      	mov	lr, r3
 800b744:	462e      	mov	r6, r5
 800b746:	4566      	cmp	r6, ip
 800b748:	d30e      	bcc.n	800b768 <__mdiff+0xec>
 800b74a:	f10c 0203 	add.w	r2, ip, #3
 800b74e:	1b52      	subs	r2, r2, r5
 800b750:	f022 0203 	bic.w	r2, r2, #3
 800b754:	3d03      	subs	r5, #3
 800b756:	45ac      	cmp	ip, r5
 800b758:	bf38      	it	cc
 800b75a:	2200      	movcc	r2, #0
 800b75c:	441a      	add	r2, r3
 800b75e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b762:	b17b      	cbz	r3, 800b784 <__mdiff+0x108>
 800b764:	6107      	str	r7, [r0, #16]
 800b766:	e7a3      	b.n	800b6b0 <__mdiff+0x34>
 800b768:	f856 8b04 	ldr.w	r8, [r6], #4
 800b76c:	fa11 f288 	uxtah	r2, r1, r8
 800b770:	1414      	asrs	r4, r2, #16
 800b772:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b776:	b292      	uxth	r2, r2
 800b778:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b77c:	f84e 2b04 	str.w	r2, [lr], #4
 800b780:	1421      	asrs	r1, r4, #16
 800b782:	e7e0      	b.n	800b746 <__mdiff+0xca>
 800b784:	3f01      	subs	r7, #1
 800b786:	e7ea      	b.n	800b75e <__mdiff+0xe2>
 800b788:	0800deef 	.word	0x0800deef
 800b78c:	0800df00 	.word	0x0800df00

0800b790 <__d2b>:
 800b790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b794:	4689      	mov	r9, r1
 800b796:	2101      	movs	r1, #1
 800b798:	ec57 6b10 	vmov	r6, r7, d0
 800b79c:	4690      	mov	r8, r2
 800b79e:	f7ff fccf 	bl	800b140 <_Balloc>
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	b930      	cbnz	r0, 800b7b4 <__d2b+0x24>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	4b25      	ldr	r3, [pc, #148]	; (800b840 <__d2b+0xb0>)
 800b7aa:	4826      	ldr	r0, [pc, #152]	; (800b844 <__d2b+0xb4>)
 800b7ac:	f240 310a 	movw	r1, #778	; 0x30a
 800b7b0:	f000 faac 	bl	800bd0c <__assert_func>
 800b7b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7bc:	bb35      	cbnz	r5, 800b80c <__d2b+0x7c>
 800b7be:	2e00      	cmp	r6, #0
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	d028      	beq.n	800b816 <__d2b+0x86>
 800b7c4:	4668      	mov	r0, sp
 800b7c6:	9600      	str	r6, [sp, #0]
 800b7c8:	f7ff fd82 	bl	800b2d0 <__lo0bits>
 800b7cc:	9900      	ldr	r1, [sp, #0]
 800b7ce:	b300      	cbz	r0, 800b812 <__d2b+0x82>
 800b7d0:	9a01      	ldr	r2, [sp, #4]
 800b7d2:	f1c0 0320 	rsb	r3, r0, #32
 800b7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7da:	430b      	orrs	r3, r1
 800b7dc:	40c2      	lsrs	r2, r0
 800b7de:	6163      	str	r3, [r4, #20]
 800b7e0:	9201      	str	r2, [sp, #4]
 800b7e2:	9b01      	ldr	r3, [sp, #4]
 800b7e4:	61a3      	str	r3, [r4, #24]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	bf14      	ite	ne
 800b7ea:	2202      	movne	r2, #2
 800b7ec:	2201      	moveq	r2, #1
 800b7ee:	6122      	str	r2, [r4, #16]
 800b7f0:	b1d5      	cbz	r5, 800b828 <__d2b+0x98>
 800b7f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7f6:	4405      	add	r5, r0
 800b7f8:	f8c9 5000 	str.w	r5, [r9]
 800b7fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b800:	f8c8 0000 	str.w	r0, [r8]
 800b804:	4620      	mov	r0, r4
 800b806:	b003      	add	sp, #12
 800b808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b80c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b810:	e7d5      	b.n	800b7be <__d2b+0x2e>
 800b812:	6161      	str	r1, [r4, #20]
 800b814:	e7e5      	b.n	800b7e2 <__d2b+0x52>
 800b816:	a801      	add	r0, sp, #4
 800b818:	f7ff fd5a 	bl	800b2d0 <__lo0bits>
 800b81c:	9b01      	ldr	r3, [sp, #4]
 800b81e:	6163      	str	r3, [r4, #20]
 800b820:	2201      	movs	r2, #1
 800b822:	6122      	str	r2, [r4, #16]
 800b824:	3020      	adds	r0, #32
 800b826:	e7e3      	b.n	800b7f0 <__d2b+0x60>
 800b828:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b82c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b830:	f8c9 0000 	str.w	r0, [r9]
 800b834:	6918      	ldr	r0, [r3, #16]
 800b836:	f7ff fd2b 	bl	800b290 <__hi0bits>
 800b83a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b83e:	e7df      	b.n	800b800 <__d2b+0x70>
 800b840:	0800deef 	.word	0x0800deef
 800b844:	0800df00 	.word	0x0800df00

0800b848 <_calloc_r>:
 800b848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b84a:	fba1 2402 	umull	r2, r4, r1, r2
 800b84e:	b94c      	cbnz	r4, 800b864 <_calloc_r+0x1c>
 800b850:	4611      	mov	r1, r2
 800b852:	9201      	str	r2, [sp, #4]
 800b854:	f000 f87a 	bl	800b94c <_malloc_r>
 800b858:	9a01      	ldr	r2, [sp, #4]
 800b85a:	4605      	mov	r5, r0
 800b85c:	b930      	cbnz	r0, 800b86c <_calloc_r+0x24>
 800b85e:	4628      	mov	r0, r5
 800b860:	b003      	add	sp, #12
 800b862:	bd30      	pop	{r4, r5, pc}
 800b864:	220c      	movs	r2, #12
 800b866:	6002      	str	r2, [r0, #0]
 800b868:	2500      	movs	r5, #0
 800b86a:	e7f8      	b.n	800b85e <_calloc_r+0x16>
 800b86c:	4621      	mov	r1, r4
 800b86e:	f7fe f93f 	bl	8009af0 <memset>
 800b872:	e7f4      	b.n	800b85e <_calloc_r+0x16>

0800b874 <_free_r>:
 800b874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b876:	2900      	cmp	r1, #0
 800b878:	d044      	beq.n	800b904 <_free_r+0x90>
 800b87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87e:	9001      	str	r0, [sp, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f1a1 0404 	sub.w	r4, r1, #4
 800b886:	bfb8      	it	lt
 800b888:	18e4      	addlt	r4, r4, r3
 800b88a:	f000 fa9b 	bl	800bdc4 <__malloc_lock>
 800b88e:	4a1e      	ldr	r2, [pc, #120]	; (800b908 <_free_r+0x94>)
 800b890:	9801      	ldr	r0, [sp, #4]
 800b892:	6813      	ldr	r3, [r2, #0]
 800b894:	b933      	cbnz	r3, 800b8a4 <_free_r+0x30>
 800b896:	6063      	str	r3, [r4, #4]
 800b898:	6014      	str	r4, [r2, #0]
 800b89a:	b003      	add	sp, #12
 800b89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8a0:	f000 ba96 	b.w	800bdd0 <__malloc_unlock>
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	d908      	bls.n	800b8ba <_free_r+0x46>
 800b8a8:	6825      	ldr	r5, [r4, #0]
 800b8aa:	1961      	adds	r1, r4, r5
 800b8ac:	428b      	cmp	r3, r1
 800b8ae:	bf01      	itttt	eq
 800b8b0:	6819      	ldreq	r1, [r3, #0]
 800b8b2:	685b      	ldreq	r3, [r3, #4]
 800b8b4:	1949      	addeq	r1, r1, r5
 800b8b6:	6021      	streq	r1, [r4, #0]
 800b8b8:	e7ed      	b.n	800b896 <_free_r+0x22>
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	b10b      	cbz	r3, 800b8c4 <_free_r+0x50>
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	d9fa      	bls.n	800b8ba <_free_r+0x46>
 800b8c4:	6811      	ldr	r1, [r2, #0]
 800b8c6:	1855      	adds	r5, r2, r1
 800b8c8:	42a5      	cmp	r5, r4
 800b8ca:	d10b      	bne.n	800b8e4 <_free_r+0x70>
 800b8cc:	6824      	ldr	r4, [r4, #0]
 800b8ce:	4421      	add	r1, r4
 800b8d0:	1854      	adds	r4, r2, r1
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	6011      	str	r1, [r2, #0]
 800b8d6:	d1e0      	bne.n	800b89a <_free_r+0x26>
 800b8d8:	681c      	ldr	r4, [r3, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	6053      	str	r3, [r2, #4]
 800b8de:	4421      	add	r1, r4
 800b8e0:	6011      	str	r1, [r2, #0]
 800b8e2:	e7da      	b.n	800b89a <_free_r+0x26>
 800b8e4:	d902      	bls.n	800b8ec <_free_r+0x78>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	6003      	str	r3, [r0, #0]
 800b8ea:	e7d6      	b.n	800b89a <_free_r+0x26>
 800b8ec:	6825      	ldr	r5, [r4, #0]
 800b8ee:	1961      	adds	r1, r4, r5
 800b8f0:	428b      	cmp	r3, r1
 800b8f2:	bf04      	itt	eq
 800b8f4:	6819      	ldreq	r1, [r3, #0]
 800b8f6:	685b      	ldreq	r3, [r3, #4]
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	bf04      	itt	eq
 800b8fc:	1949      	addeq	r1, r1, r5
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	6054      	str	r4, [r2, #4]
 800b902:	e7ca      	b.n	800b89a <_free_r+0x26>
 800b904:	b003      	add	sp, #12
 800b906:	bd30      	pop	{r4, r5, pc}
 800b908:	200006c0 	.word	0x200006c0

0800b90c <sbrk_aligned>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	4e0e      	ldr	r6, [pc, #56]	; (800b948 <sbrk_aligned+0x3c>)
 800b910:	460c      	mov	r4, r1
 800b912:	6831      	ldr	r1, [r6, #0]
 800b914:	4605      	mov	r5, r0
 800b916:	b911      	cbnz	r1, 800b91e <sbrk_aligned+0x12>
 800b918:	f000 f9e8 	bl	800bcec <_sbrk_r>
 800b91c:	6030      	str	r0, [r6, #0]
 800b91e:	4621      	mov	r1, r4
 800b920:	4628      	mov	r0, r5
 800b922:	f000 f9e3 	bl	800bcec <_sbrk_r>
 800b926:	1c43      	adds	r3, r0, #1
 800b928:	d00a      	beq.n	800b940 <sbrk_aligned+0x34>
 800b92a:	1cc4      	adds	r4, r0, #3
 800b92c:	f024 0403 	bic.w	r4, r4, #3
 800b930:	42a0      	cmp	r0, r4
 800b932:	d007      	beq.n	800b944 <sbrk_aligned+0x38>
 800b934:	1a21      	subs	r1, r4, r0
 800b936:	4628      	mov	r0, r5
 800b938:	f000 f9d8 	bl	800bcec <_sbrk_r>
 800b93c:	3001      	adds	r0, #1
 800b93e:	d101      	bne.n	800b944 <sbrk_aligned+0x38>
 800b940:	f04f 34ff 	mov.w	r4, #4294967295
 800b944:	4620      	mov	r0, r4
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	200006c4 	.word	0x200006c4

0800b94c <_malloc_r>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	1ccd      	adds	r5, r1, #3
 800b952:	f025 0503 	bic.w	r5, r5, #3
 800b956:	3508      	adds	r5, #8
 800b958:	2d0c      	cmp	r5, #12
 800b95a:	bf38      	it	cc
 800b95c:	250c      	movcc	r5, #12
 800b95e:	2d00      	cmp	r5, #0
 800b960:	4607      	mov	r7, r0
 800b962:	db01      	blt.n	800b968 <_malloc_r+0x1c>
 800b964:	42a9      	cmp	r1, r5
 800b966:	d905      	bls.n	800b974 <_malloc_r+0x28>
 800b968:	230c      	movs	r3, #12
 800b96a:	603b      	str	r3, [r7, #0]
 800b96c:	2600      	movs	r6, #0
 800b96e:	4630      	mov	r0, r6
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	4e2e      	ldr	r6, [pc, #184]	; (800ba30 <_malloc_r+0xe4>)
 800b976:	f000 fa25 	bl	800bdc4 <__malloc_lock>
 800b97a:	6833      	ldr	r3, [r6, #0]
 800b97c:	461c      	mov	r4, r3
 800b97e:	bb34      	cbnz	r4, 800b9ce <_malloc_r+0x82>
 800b980:	4629      	mov	r1, r5
 800b982:	4638      	mov	r0, r7
 800b984:	f7ff ffc2 	bl	800b90c <sbrk_aligned>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	4604      	mov	r4, r0
 800b98c:	d14d      	bne.n	800ba2a <_malloc_r+0xde>
 800b98e:	6834      	ldr	r4, [r6, #0]
 800b990:	4626      	mov	r6, r4
 800b992:	2e00      	cmp	r6, #0
 800b994:	d140      	bne.n	800ba18 <_malloc_r+0xcc>
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	4631      	mov	r1, r6
 800b99a:	4638      	mov	r0, r7
 800b99c:	eb04 0803 	add.w	r8, r4, r3
 800b9a0:	f000 f9a4 	bl	800bcec <_sbrk_r>
 800b9a4:	4580      	cmp	r8, r0
 800b9a6:	d13a      	bne.n	800ba1e <_malloc_r+0xd2>
 800b9a8:	6821      	ldr	r1, [r4, #0]
 800b9aa:	3503      	adds	r5, #3
 800b9ac:	1a6d      	subs	r5, r5, r1
 800b9ae:	f025 0503 	bic.w	r5, r5, #3
 800b9b2:	3508      	adds	r5, #8
 800b9b4:	2d0c      	cmp	r5, #12
 800b9b6:	bf38      	it	cc
 800b9b8:	250c      	movcc	r5, #12
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff ffa5 	bl	800b90c <sbrk_aligned>
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d02b      	beq.n	800ba1e <_malloc_r+0xd2>
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	442b      	add	r3, r5
 800b9ca:	6023      	str	r3, [r4, #0]
 800b9cc:	e00e      	b.n	800b9ec <_malloc_r+0xa0>
 800b9ce:	6822      	ldr	r2, [r4, #0]
 800b9d0:	1b52      	subs	r2, r2, r5
 800b9d2:	d41e      	bmi.n	800ba12 <_malloc_r+0xc6>
 800b9d4:	2a0b      	cmp	r2, #11
 800b9d6:	d916      	bls.n	800ba06 <_malloc_r+0xba>
 800b9d8:	1961      	adds	r1, r4, r5
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	6025      	str	r5, [r4, #0]
 800b9de:	bf18      	it	ne
 800b9e0:	6059      	strne	r1, [r3, #4]
 800b9e2:	6863      	ldr	r3, [r4, #4]
 800b9e4:	bf08      	it	eq
 800b9e6:	6031      	streq	r1, [r6, #0]
 800b9e8:	5162      	str	r2, [r4, r5]
 800b9ea:	604b      	str	r3, [r1, #4]
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	f104 060b 	add.w	r6, r4, #11
 800b9f2:	f000 f9ed 	bl	800bdd0 <__malloc_unlock>
 800b9f6:	f026 0607 	bic.w	r6, r6, #7
 800b9fa:	1d23      	adds	r3, r4, #4
 800b9fc:	1af2      	subs	r2, r6, r3
 800b9fe:	d0b6      	beq.n	800b96e <_malloc_r+0x22>
 800ba00:	1b9b      	subs	r3, r3, r6
 800ba02:	50a3      	str	r3, [r4, r2]
 800ba04:	e7b3      	b.n	800b96e <_malloc_r+0x22>
 800ba06:	6862      	ldr	r2, [r4, #4]
 800ba08:	42a3      	cmp	r3, r4
 800ba0a:	bf0c      	ite	eq
 800ba0c:	6032      	streq	r2, [r6, #0]
 800ba0e:	605a      	strne	r2, [r3, #4]
 800ba10:	e7ec      	b.n	800b9ec <_malloc_r+0xa0>
 800ba12:	4623      	mov	r3, r4
 800ba14:	6864      	ldr	r4, [r4, #4]
 800ba16:	e7b2      	b.n	800b97e <_malloc_r+0x32>
 800ba18:	4634      	mov	r4, r6
 800ba1a:	6876      	ldr	r6, [r6, #4]
 800ba1c:	e7b9      	b.n	800b992 <_malloc_r+0x46>
 800ba1e:	230c      	movs	r3, #12
 800ba20:	603b      	str	r3, [r7, #0]
 800ba22:	4638      	mov	r0, r7
 800ba24:	f000 f9d4 	bl	800bdd0 <__malloc_unlock>
 800ba28:	e7a1      	b.n	800b96e <_malloc_r+0x22>
 800ba2a:	6025      	str	r5, [r4, #0]
 800ba2c:	e7de      	b.n	800b9ec <_malloc_r+0xa0>
 800ba2e:	bf00      	nop
 800ba30:	200006c0 	.word	0x200006c0

0800ba34 <__ssputs_r>:
 800ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	688e      	ldr	r6, [r1, #8]
 800ba3a:	429e      	cmp	r6, r3
 800ba3c:	4682      	mov	sl, r0
 800ba3e:	460c      	mov	r4, r1
 800ba40:	4690      	mov	r8, r2
 800ba42:	461f      	mov	r7, r3
 800ba44:	d838      	bhi.n	800bab8 <__ssputs_r+0x84>
 800ba46:	898a      	ldrh	r2, [r1, #12]
 800ba48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba4c:	d032      	beq.n	800bab4 <__ssputs_r+0x80>
 800ba4e:	6825      	ldr	r5, [r4, #0]
 800ba50:	6909      	ldr	r1, [r1, #16]
 800ba52:	eba5 0901 	sub.w	r9, r5, r1
 800ba56:	6965      	ldr	r5, [r4, #20]
 800ba58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba60:	3301      	adds	r3, #1
 800ba62:	444b      	add	r3, r9
 800ba64:	106d      	asrs	r5, r5, #1
 800ba66:	429d      	cmp	r5, r3
 800ba68:	bf38      	it	cc
 800ba6a:	461d      	movcc	r5, r3
 800ba6c:	0553      	lsls	r3, r2, #21
 800ba6e:	d531      	bpl.n	800bad4 <__ssputs_r+0xa0>
 800ba70:	4629      	mov	r1, r5
 800ba72:	f7ff ff6b 	bl	800b94c <_malloc_r>
 800ba76:	4606      	mov	r6, r0
 800ba78:	b950      	cbnz	r0, 800ba90 <__ssputs_r+0x5c>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	f8ca 3000 	str.w	r3, [sl]
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba90:	6921      	ldr	r1, [r4, #16]
 800ba92:	464a      	mov	r2, r9
 800ba94:	f7ff fb46 	bl	800b124 <memcpy>
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baa2:	81a3      	strh	r3, [r4, #12]
 800baa4:	6126      	str	r6, [r4, #16]
 800baa6:	6165      	str	r5, [r4, #20]
 800baa8:	444e      	add	r6, r9
 800baaa:	eba5 0509 	sub.w	r5, r5, r9
 800baae:	6026      	str	r6, [r4, #0]
 800bab0:	60a5      	str	r5, [r4, #8]
 800bab2:	463e      	mov	r6, r7
 800bab4:	42be      	cmp	r6, r7
 800bab6:	d900      	bls.n	800baba <__ssputs_r+0x86>
 800bab8:	463e      	mov	r6, r7
 800baba:	6820      	ldr	r0, [r4, #0]
 800babc:	4632      	mov	r2, r6
 800babe:	4641      	mov	r1, r8
 800bac0:	f000 f966 	bl	800bd90 <memmove>
 800bac4:	68a3      	ldr	r3, [r4, #8]
 800bac6:	1b9b      	subs	r3, r3, r6
 800bac8:	60a3      	str	r3, [r4, #8]
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	4433      	add	r3, r6
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	2000      	movs	r0, #0
 800bad2:	e7db      	b.n	800ba8c <__ssputs_r+0x58>
 800bad4:	462a      	mov	r2, r5
 800bad6:	f000 f981 	bl	800bddc <_realloc_r>
 800bada:	4606      	mov	r6, r0
 800badc:	2800      	cmp	r0, #0
 800bade:	d1e1      	bne.n	800baa4 <__ssputs_r+0x70>
 800bae0:	6921      	ldr	r1, [r4, #16]
 800bae2:	4650      	mov	r0, sl
 800bae4:	f7ff fec6 	bl	800b874 <_free_r>
 800bae8:	e7c7      	b.n	800ba7a <__ssputs_r+0x46>
	...

0800baec <_svfiprintf_r>:
 800baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	4698      	mov	r8, r3
 800baf2:	898b      	ldrh	r3, [r1, #12]
 800baf4:	061b      	lsls	r3, r3, #24
 800baf6:	b09d      	sub	sp, #116	; 0x74
 800baf8:	4607      	mov	r7, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	4614      	mov	r4, r2
 800bafe:	d50e      	bpl.n	800bb1e <_svfiprintf_r+0x32>
 800bb00:	690b      	ldr	r3, [r1, #16]
 800bb02:	b963      	cbnz	r3, 800bb1e <_svfiprintf_r+0x32>
 800bb04:	2140      	movs	r1, #64	; 0x40
 800bb06:	f7ff ff21 	bl	800b94c <_malloc_r>
 800bb0a:	6028      	str	r0, [r5, #0]
 800bb0c:	6128      	str	r0, [r5, #16]
 800bb0e:	b920      	cbnz	r0, 800bb1a <_svfiprintf_r+0x2e>
 800bb10:	230c      	movs	r3, #12
 800bb12:	603b      	str	r3, [r7, #0]
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295
 800bb18:	e0d1      	b.n	800bcbe <_svfiprintf_r+0x1d2>
 800bb1a:	2340      	movs	r3, #64	; 0x40
 800bb1c:	616b      	str	r3, [r5, #20]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9309      	str	r3, [sp, #36]	; 0x24
 800bb22:	2320      	movs	r3, #32
 800bb24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb28:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb2c:	2330      	movs	r3, #48	; 0x30
 800bb2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bcd8 <_svfiprintf_r+0x1ec>
 800bb32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb36:	f04f 0901 	mov.w	r9, #1
 800bb3a:	4623      	mov	r3, r4
 800bb3c:	469a      	mov	sl, r3
 800bb3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb42:	b10a      	cbz	r2, 800bb48 <_svfiprintf_r+0x5c>
 800bb44:	2a25      	cmp	r2, #37	; 0x25
 800bb46:	d1f9      	bne.n	800bb3c <_svfiprintf_r+0x50>
 800bb48:	ebba 0b04 	subs.w	fp, sl, r4
 800bb4c:	d00b      	beq.n	800bb66 <_svfiprintf_r+0x7a>
 800bb4e:	465b      	mov	r3, fp
 800bb50:	4622      	mov	r2, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	4638      	mov	r0, r7
 800bb56:	f7ff ff6d 	bl	800ba34 <__ssputs_r>
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	f000 80aa 	beq.w	800bcb4 <_svfiprintf_r+0x1c8>
 800bb60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb62:	445a      	add	r2, fp
 800bb64:	9209      	str	r2, [sp, #36]	; 0x24
 800bb66:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 80a2 	beq.w	800bcb4 <_svfiprintf_r+0x1c8>
 800bb70:	2300      	movs	r3, #0
 800bb72:	f04f 32ff 	mov.w	r2, #4294967295
 800bb76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb7a:	f10a 0a01 	add.w	sl, sl, #1
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	9307      	str	r3, [sp, #28]
 800bb82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb86:	931a      	str	r3, [sp, #104]	; 0x68
 800bb88:	4654      	mov	r4, sl
 800bb8a:	2205      	movs	r2, #5
 800bb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb90:	4851      	ldr	r0, [pc, #324]	; (800bcd8 <_svfiprintf_r+0x1ec>)
 800bb92:	f7f4 fb45 	bl	8000220 <memchr>
 800bb96:	9a04      	ldr	r2, [sp, #16]
 800bb98:	b9d8      	cbnz	r0, 800bbd2 <_svfiprintf_r+0xe6>
 800bb9a:	06d0      	lsls	r0, r2, #27
 800bb9c:	bf44      	itt	mi
 800bb9e:	2320      	movmi	r3, #32
 800bba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba4:	0711      	lsls	r1, r2, #28
 800bba6:	bf44      	itt	mi
 800bba8:	232b      	movmi	r3, #43	; 0x2b
 800bbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbae:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb2:	2b2a      	cmp	r3, #42	; 0x2a
 800bbb4:	d015      	beq.n	800bbe2 <_svfiprintf_r+0xf6>
 800bbb6:	9a07      	ldr	r2, [sp, #28]
 800bbb8:	4654      	mov	r4, sl
 800bbba:	2000      	movs	r0, #0
 800bbbc:	f04f 0c0a 	mov.w	ip, #10
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbc6:	3b30      	subs	r3, #48	; 0x30
 800bbc8:	2b09      	cmp	r3, #9
 800bbca:	d94e      	bls.n	800bc6a <_svfiprintf_r+0x17e>
 800bbcc:	b1b0      	cbz	r0, 800bbfc <_svfiprintf_r+0x110>
 800bbce:	9207      	str	r2, [sp, #28]
 800bbd0:	e014      	b.n	800bbfc <_svfiprintf_r+0x110>
 800bbd2:	eba0 0308 	sub.w	r3, r0, r8
 800bbd6:	fa09 f303 	lsl.w	r3, r9, r3
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	9304      	str	r3, [sp, #16]
 800bbde:	46a2      	mov	sl, r4
 800bbe0:	e7d2      	b.n	800bb88 <_svfiprintf_r+0x9c>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	1d19      	adds	r1, r3, #4
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	9103      	str	r1, [sp, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	bfbb      	ittet	lt
 800bbee:	425b      	neglt	r3, r3
 800bbf0:	f042 0202 	orrlt.w	r2, r2, #2
 800bbf4:	9307      	strge	r3, [sp, #28]
 800bbf6:	9307      	strlt	r3, [sp, #28]
 800bbf8:	bfb8      	it	lt
 800bbfa:	9204      	strlt	r2, [sp, #16]
 800bbfc:	7823      	ldrb	r3, [r4, #0]
 800bbfe:	2b2e      	cmp	r3, #46	; 0x2e
 800bc00:	d10c      	bne.n	800bc1c <_svfiprintf_r+0x130>
 800bc02:	7863      	ldrb	r3, [r4, #1]
 800bc04:	2b2a      	cmp	r3, #42	; 0x2a
 800bc06:	d135      	bne.n	800bc74 <_svfiprintf_r+0x188>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	1d1a      	adds	r2, r3, #4
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	9203      	str	r2, [sp, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	bfb8      	it	lt
 800bc14:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc18:	3402      	adds	r4, #2
 800bc1a:	9305      	str	r3, [sp, #20]
 800bc1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bce8 <_svfiprintf_r+0x1fc>
 800bc20:	7821      	ldrb	r1, [r4, #0]
 800bc22:	2203      	movs	r2, #3
 800bc24:	4650      	mov	r0, sl
 800bc26:	f7f4 fafb 	bl	8000220 <memchr>
 800bc2a:	b140      	cbz	r0, 800bc3e <_svfiprintf_r+0x152>
 800bc2c:	2340      	movs	r3, #64	; 0x40
 800bc2e:	eba0 000a 	sub.w	r0, r0, sl
 800bc32:	fa03 f000 	lsl.w	r0, r3, r0
 800bc36:	9b04      	ldr	r3, [sp, #16]
 800bc38:	4303      	orrs	r3, r0
 800bc3a:	3401      	adds	r4, #1
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc42:	4826      	ldr	r0, [pc, #152]	; (800bcdc <_svfiprintf_r+0x1f0>)
 800bc44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc48:	2206      	movs	r2, #6
 800bc4a:	f7f4 fae9 	bl	8000220 <memchr>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d038      	beq.n	800bcc4 <_svfiprintf_r+0x1d8>
 800bc52:	4b23      	ldr	r3, [pc, #140]	; (800bce0 <_svfiprintf_r+0x1f4>)
 800bc54:	bb1b      	cbnz	r3, 800bc9e <_svfiprintf_r+0x1b2>
 800bc56:	9b03      	ldr	r3, [sp, #12]
 800bc58:	3307      	adds	r3, #7
 800bc5a:	f023 0307 	bic.w	r3, r3, #7
 800bc5e:	3308      	adds	r3, #8
 800bc60:	9303      	str	r3, [sp, #12]
 800bc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc64:	4433      	add	r3, r6
 800bc66:	9309      	str	r3, [sp, #36]	; 0x24
 800bc68:	e767      	b.n	800bb3a <_svfiprintf_r+0x4e>
 800bc6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6e:	460c      	mov	r4, r1
 800bc70:	2001      	movs	r0, #1
 800bc72:	e7a5      	b.n	800bbc0 <_svfiprintf_r+0xd4>
 800bc74:	2300      	movs	r3, #0
 800bc76:	3401      	adds	r4, #1
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	f04f 0c0a 	mov.w	ip, #10
 800bc80:	4620      	mov	r0, r4
 800bc82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc86:	3a30      	subs	r2, #48	; 0x30
 800bc88:	2a09      	cmp	r2, #9
 800bc8a:	d903      	bls.n	800bc94 <_svfiprintf_r+0x1a8>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0c5      	beq.n	800bc1c <_svfiprintf_r+0x130>
 800bc90:	9105      	str	r1, [sp, #20]
 800bc92:	e7c3      	b.n	800bc1c <_svfiprintf_r+0x130>
 800bc94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc98:	4604      	mov	r4, r0
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e7f0      	b.n	800bc80 <_svfiprintf_r+0x194>
 800bc9e:	ab03      	add	r3, sp, #12
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	462a      	mov	r2, r5
 800bca4:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <_svfiprintf_r+0x1f8>)
 800bca6:	a904      	add	r1, sp, #16
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f7fd ffc9 	bl	8009c40 <_printf_float>
 800bcae:	1c42      	adds	r2, r0, #1
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	d1d6      	bne.n	800bc62 <_svfiprintf_r+0x176>
 800bcb4:	89ab      	ldrh	r3, [r5, #12]
 800bcb6:	065b      	lsls	r3, r3, #25
 800bcb8:	f53f af2c 	bmi.w	800bb14 <_svfiprintf_r+0x28>
 800bcbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcbe:	b01d      	add	sp, #116	; 0x74
 800bcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc4:	ab03      	add	r3, sp, #12
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	462a      	mov	r2, r5
 800bcca:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <_svfiprintf_r+0x1f8>)
 800bccc:	a904      	add	r1, sp, #16
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7fe fa5a 	bl	800a188 <_printf_i>
 800bcd4:	e7eb      	b.n	800bcae <_svfiprintf_r+0x1c2>
 800bcd6:	bf00      	nop
 800bcd8:	0800e05c 	.word	0x0800e05c
 800bcdc:	0800e066 	.word	0x0800e066
 800bce0:	08009c41 	.word	0x08009c41
 800bce4:	0800ba35 	.word	0x0800ba35
 800bce8:	0800e062 	.word	0x0800e062

0800bcec <_sbrk_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d06      	ldr	r5, [pc, #24]	; (800bd08 <_sbrk_r+0x1c>)
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	602b      	str	r3, [r5, #0]
 800bcf8:	f7f8 f8c2 	bl	8003e80 <_sbrk>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d102      	bne.n	800bd06 <_sbrk_r+0x1a>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	b103      	cbz	r3, 800bd06 <_sbrk_r+0x1a>
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	200006c8 	.word	0x200006c8

0800bd0c <__assert_func>:
 800bd0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd0e:	4614      	mov	r4, r2
 800bd10:	461a      	mov	r2, r3
 800bd12:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <__assert_func+0x2c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4605      	mov	r5, r0
 800bd18:	68d8      	ldr	r0, [r3, #12]
 800bd1a:	b14c      	cbz	r4, 800bd30 <__assert_func+0x24>
 800bd1c:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <__assert_func+0x30>)
 800bd1e:	9100      	str	r1, [sp, #0]
 800bd20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd24:	4906      	ldr	r1, [pc, #24]	; (800bd40 <__assert_func+0x34>)
 800bd26:	462b      	mov	r3, r5
 800bd28:	f000 f80e 	bl	800bd48 <fiprintf>
 800bd2c:	f000 faac 	bl	800c288 <abort>
 800bd30:	4b04      	ldr	r3, [pc, #16]	; (800bd44 <__assert_func+0x38>)
 800bd32:	461c      	mov	r4, r3
 800bd34:	e7f3      	b.n	800bd1e <__assert_func+0x12>
 800bd36:	bf00      	nop
 800bd38:	20000058 	.word	0x20000058
 800bd3c:	0800e06d 	.word	0x0800e06d
 800bd40:	0800e07a 	.word	0x0800e07a
 800bd44:	0800e0a8 	.word	0x0800e0a8

0800bd48 <fiprintf>:
 800bd48:	b40e      	push	{r1, r2, r3}
 800bd4a:	b503      	push	{r0, r1, lr}
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	ab03      	add	r3, sp, #12
 800bd50:	4805      	ldr	r0, [pc, #20]	; (800bd68 <fiprintf+0x20>)
 800bd52:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd56:	6800      	ldr	r0, [r0, #0]
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	f000 f897 	bl	800be8c <_vfiprintf_r>
 800bd5e:	b002      	add	sp, #8
 800bd60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd64:	b003      	add	sp, #12
 800bd66:	4770      	bx	lr
 800bd68:	20000058 	.word	0x20000058

0800bd6c <__ascii_mbtowc>:
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	b901      	cbnz	r1, 800bd72 <__ascii_mbtowc+0x6>
 800bd70:	a901      	add	r1, sp, #4
 800bd72:	b142      	cbz	r2, 800bd86 <__ascii_mbtowc+0x1a>
 800bd74:	b14b      	cbz	r3, 800bd8a <__ascii_mbtowc+0x1e>
 800bd76:	7813      	ldrb	r3, [r2, #0]
 800bd78:	600b      	str	r3, [r1, #0]
 800bd7a:	7812      	ldrb	r2, [r2, #0]
 800bd7c:	1e10      	subs	r0, r2, #0
 800bd7e:	bf18      	it	ne
 800bd80:	2001      	movne	r0, #1
 800bd82:	b002      	add	sp, #8
 800bd84:	4770      	bx	lr
 800bd86:	4610      	mov	r0, r2
 800bd88:	e7fb      	b.n	800bd82 <__ascii_mbtowc+0x16>
 800bd8a:	f06f 0001 	mvn.w	r0, #1
 800bd8e:	e7f8      	b.n	800bd82 <__ascii_mbtowc+0x16>

0800bd90 <memmove>:
 800bd90:	4288      	cmp	r0, r1
 800bd92:	b510      	push	{r4, lr}
 800bd94:	eb01 0402 	add.w	r4, r1, r2
 800bd98:	d902      	bls.n	800bda0 <memmove+0x10>
 800bd9a:	4284      	cmp	r4, r0
 800bd9c:	4623      	mov	r3, r4
 800bd9e:	d807      	bhi.n	800bdb0 <memmove+0x20>
 800bda0:	1e43      	subs	r3, r0, #1
 800bda2:	42a1      	cmp	r1, r4
 800bda4:	d008      	beq.n	800bdb8 <memmove+0x28>
 800bda6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdae:	e7f8      	b.n	800bda2 <memmove+0x12>
 800bdb0:	4402      	add	r2, r0
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	428a      	cmp	r2, r1
 800bdb6:	d100      	bne.n	800bdba <memmove+0x2a>
 800bdb8:	bd10      	pop	{r4, pc}
 800bdba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdc2:	e7f7      	b.n	800bdb4 <memmove+0x24>

0800bdc4 <__malloc_lock>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__malloc_lock+0x8>)
 800bdc6:	f000 bc1f 	b.w	800c608 <__retarget_lock_acquire_recursive>
 800bdca:	bf00      	nop
 800bdcc:	200006cc 	.word	0x200006cc

0800bdd0 <__malloc_unlock>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	; (800bdd8 <__malloc_unlock+0x8>)
 800bdd2:	f000 bc1a 	b.w	800c60a <__retarget_lock_release_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	200006cc 	.word	0x200006cc

0800bddc <_realloc_r>:
 800bddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde0:	4680      	mov	r8, r0
 800bde2:	4614      	mov	r4, r2
 800bde4:	460e      	mov	r6, r1
 800bde6:	b921      	cbnz	r1, 800bdf2 <_realloc_r+0x16>
 800bde8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdec:	4611      	mov	r1, r2
 800bdee:	f7ff bdad 	b.w	800b94c <_malloc_r>
 800bdf2:	b92a      	cbnz	r2, 800be00 <_realloc_r+0x24>
 800bdf4:	f7ff fd3e 	bl	800b874 <_free_r>
 800bdf8:	4625      	mov	r5, r4
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be00:	f000 fc6a 	bl	800c6d8 <_malloc_usable_size_r>
 800be04:	4284      	cmp	r4, r0
 800be06:	4607      	mov	r7, r0
 800be08:	d802      	bhi.n	800be10 <_realloc_r+0x34>
 800be0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be0e:	d812      	bhi.n	800be36 <_realloc_r+0x5a>
 800be10:	4621      	mov	r1, r4
 800be12:	4640      	mov	r0, r8
 800be14:	f7ff fd9a 	bl	800b94c <_malloc_r>
 800be18:	4605      	mov	r5, r0
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d0ed      	beq.n	800bdfa <_realloc_r+0x1e>
 800be1e:	42bc      	cmp	r4, r7
 800be20:	4622      	mov	r2, r4
 800be22:	4631      	mov	r1, r6
 800be24:	bf28      	it	cs
 800be26:	463a      	movcs	r2, r7
 800be28:	f7ff f97c 	bl	800b124 <memcpy>
 800be2c:	4631      	mov	r1, r6
 800be2e:	4640      	mov	r0, r8
 800be30:	f7ff fd20 	bl	800b874 <_free_r>
 800be34:	e7e1      	b.n	800bdfa <_realloc_r+0x1e>
 800be36:	4635      	mov	r5, r6
 800be38:	e7df      	b.n	800bdfa <_realloc_r+0x1e>

0800be3a <__sfputc_r>:
 800be3a:	6893      	ldr	r3, [r2, #8]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	b410      	push	{r4}
 800be42:	6093      	str	r3, [r2, #8]
 800be44:	da08      	bge.n	800be58 <__sfputc_r+0x1e>
 800be46:	6994      	ldr	r4, [r2, #24]
 800be48:	42a3      	cmp	r3, r4
 800be4a:	db01      	blt.n	800be50 <__sfputc_r+0x16>
 800be4c:	290a      	cmp	r1, #10
 800be4e:	d103      	bne.n	800be58 <__sfputc_r+0x1e>
 800be50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be54:	f000 b94a 	b.w	800c0ec <__swbuf_r>
 800be58:	6813      	ldr	r3, [r2, #0]
 800be5a:	1c58      	adds	r0, r3, #1
 800be5c:	6010      	str	r0, [r2, #0]
 800be5e:	7019      	strb	r1, [r3, #0]
 800be60:	4608      	mov	r0, r1
 800be62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <__sfputs_r>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	4614      	mov	r4, r2
 800be70:	18d5      	adds	r5, r2, r3
 800be72:	42ac      	cmp	r4, r5
 800be74:	d101      	bne.n	800be7a <__sfputs_r+0x12>
 800be76:	2000      	movs	r0, #0
 800be78:	e007      	b.n	800be8a <__sfputs_r+0x22>
 800be7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be7e:	463a      	mov	r2, r7
 800be80:	4630      	mov	r0, r6
 800be82:	f7ff ffda 	bl	800be3a <__sfputc_r>
 800be86:	1c43      	adds	r3, r0, #1
 800be88:	d1f3      	bne.n	800be72 <__sfputs_r+0xa>
 800be8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be8c <_vfiprintf_r>:
 800be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	460d      	mov	r5, r1
 800be92:	b09d      	sub	sp, #116	; 0x74
 800be94:	4614      	mov	r4, r2
 800be96:	4698      	mov	r8, r3
 800be98:	4606      	mov	r6, r0
 800be9a:	b118      	cbz	r0, 800bea4 <_vfiprintf_r+0x18>
 800be9c:	6983      	ldr	r3, [r0, #24]
 800be9e:	b90b      	cbnz	r3, 800bea4 <_vfiprintf_r+0x18>
 800bea0:	f000 fb14 	bl	800c4cc <__sinit>
 800bea4:	4b89      	ldr	r3, [pc, #548]	; (800c0cc <_vfiprintf_r+0x240>)
 800bea6:	429d      	cmp	r5, r3
 800bea8:	d11b      	bne.n	800bee2 <_vfiprintf_r+0x56>
 800beaa:	6875      	ldr	r5, [r6, #4]
 800beac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beae:	07d9      	lsls	r1, r3, #31
 800beb0:	d405      	bmi.n	800bebe <_vfiprintf_r+0x32>
 800beb2:	89ab      	ldrh	r3, [r5, #12]
 800beb4:	059a      	lsls	r2, r3, #22
 800beb6:	d402      	bmi.n	800bebe <_vfiprintf_r+0x32>
 800beb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beba:	f000 fba5 	bl	800c608 <__retarget_lock_acquire_recursive>
 800bebe:	89ab      	ldrh	r3, [r5, #12]
 800bec0:	071b      	lsls	r3, r3, #28
 800bec2:	d501      	bpl.n	800bec8 <_vfiprintf_r+0x3c>
 800bec4:	692b      	ldr	r3, [r5, #16]
 800bec6:	b9eb      	cbnz	r3, 800bf04 <_vfiprintf_r+0x78>
 800bec8:	4629      	mov	r1, r5
 800beca:	4630      	mov	r0, r6
 800becc:	f000 f96e 	bl	800c1ac <__swsetup_r>
 800bed0:	b1c0      	cbz	r0, 800bf04 <_vfiprintf_r+0x78>
 800bed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bed4:	07dc      	lsls	r4, r3, #31
 800bed6:	d50e      	bpl.n	800bef6 <_vfiprintf_r+0x6a>
 800bed8:	f04f 30ff 	mov.w	r0, #4294967295
 800bedc:	b01d      	add	sp, #116	; 0x74
 800bede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee2:	4b7b      	ldr	r3, [pc, #492]	; (800c0d0 <_vfiprintf_r+0x244>)
 800bee4:	429d      	cmp	r5, r3
 800bee6:	d101      	bne.n	800beec <_vfiprintf_r+0x60>
 800bee8:	68b5      	ldr	r5, [r6, #8]
 800beea:	e7df      	b.n	800beac <_vfiprintf_r+0x20>
 800beec:	4b79      	ldr	r3, [pc, #484]	; (800c0d4 <_vfiprintf_r+0x248>)
 800beee:	429d      	cmp	r5, r3
 800bef0:	bf08      	it	eq
 800bef2:	68f5      	ldreq	r5, [r6, #12]
 800bef4:	e7da      	b.n	800beac <_vfiprintf_r+0x20>
 800bef6:	89ab      	ldrh	r3, [r5, #12]
 800bef8:	0598      	lsls	r0, r3, #22
 800befa:	d4ed      	bmi.n	800bed8 <_vfiprintf_r+0x4c>
 800befc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800befe:	f000 fb84 	bl	800c60a <__retarget_lock_release_recursive>
 800bf02:	e7e9      	b.n	800bed8 <_vfiprintf_r+0x4c>
 800bf04:	2300      	movs	r3, #0
 800bf06:	9309      	str	r3, [sp, #36]	; 0x24
 800bf08:	2320      	movs	r3, #32
 800bf0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf12:	2330      	movs	r3, #48	; 0x30
 800bf14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0d8 <_vfiprintf_r+0x24c>
 800bf18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf1c:	f04f 0901 	mov.w	r9, #1
 800bf20:	4623      	mov	r3, r4
 800bf22:	469a      	mov	sl, r3
 800bf24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf28:	b10a      	cbz	r2, 800bf2e <_vfiprintf_r+0xa2>
 800bf2a:	2a25      	cmp	r2, #37	; 0x25
 800bf2c:	d1f9      	bne.n	800bf22 <_vfiprintf_r+0x96>
 800bf2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf32:	d00b      	beq.n	800bf4c <_vfiprintf_r+0xc0>
 800bf34:	465b      	mov	r3, fp
 800bf36:	4622      	mov	r2, r4
 800bf38:	4629      	mov	r1, r5
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	f7ff ff94 	bl	800be68 <__sfputs_r>
 800bf40:	3001      	adds	r0, #1
 800bf42:	f000 80aa 	beq.w	800c09a <_vfiprintf_r+0x20e>
 800bf46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf48:	445a      	add	r2, fp
 800bf4a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 80a2 	beq.w	800c09a <_vfiprintf_r+0x20e>
 800bf56:	2300      	movs	r3, #0
 800bf58:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf60:	f10a 0a01 	add.w	sl, sl, #1
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	9307      	str	r3, [sp, #28]
 800bf68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf6c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf6e:	4654      	mov	r4, sl
 800bf70:	2205      	movs	r2, #5
 800bf72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf76:	4858      	ldr	r0, [pc, #352]	; (800c0d8 <_vfiprintf_r+0x24c>)
 800bf78:	f7f4 f952 	bl	8000220 <memchr>
 800bf7c:	9a04      	ldr	r2, [sp, #16]
 800bf7e:	b9d8      	cbnz	r0, 800bfb8 <_vfiprintf_r+0x12c>
 800bf80:	06d1      	lsls	r1, r2, #27
 800bf82:	bf44      	itt	mi
 800bf84:	2320      	movmi	r3, #32
 800bf86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf8a:	0713      	lsls	r3, r2, #28
 800bf8c:	bf44      	itt	mi
 800bf8e:	232b      	movmi	r3, #43	; 0x2b
 800bf90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf94:	f89a 3000 	ldrb.w	r3, [sl]
 800bf98:	2b2a      	cmp	r3, #42	; 0x2a
 800bf9a:	d015      	beq.n	800bfc8 <_vfiprintf_r+0x13c>
 800bf9c:	9a07      	ldr	r2, [sp, #28]
 800bf9e:	4654      	mov	r4, sl
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	f04f 0c0a 	mov.w	ip, #10
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfac:	3b30      	subs	r3, #48	; 0x30
 800bfae:	2b09      	cmp	r3, #9
 800bfb0:	d94e      	bls.n	800c050 <_vfiprintf_r+0x1c4>
 800bfb2:	b1b0      	cbz	r0, 800bfe2 <_vfiprintf_r+0x156>
 800bfb4:	9207      	str	r2, [sp, #28]
 800bfb6:	e014      	b.n	800bfe2 <_vfiprintf_r+0x156>
 800bfb8:	eba0 0308 	sub.w	r3, r0, r8
 800bfbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	9304      	str	r3, [sp, #16]
 800bfc4:	46a2      	mov	sl, r4
 800bfc6:	e7d2      	b.n	800bf6e <_vfiprintf_r+0xe2>
 800bfc8:	9b03      	ldr	r3, [sp, #12]
 800bfca:	1d19      	adds	r1, r3, #4
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	9103      	str	r1, [sp, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	bfbb      	ittet	lt
 800bfd4:	425b      	neglt	r3, r3
 800bfd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bfda:	9307      	strge	r3, [sp, #28]
 800bfdc:	9307      	strlt	r3, [sp, #28]
 800bfde:	bfb8      	it	lt
 800bfe0:	9204      	strlt	r2, [sp, #16]
 800bfe2:	7823      	ldrb	r3, [r4, #0]
 800bfe4:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe6:	d10c      	bne.n	800c002 <_vfiprintf_r+0x176>
 800bfe8:	7863      	ldrb	r3, [r4, #1]
 800bfea:	2b2a      	cmp	r3, #42	; 0x2a
 800bfec:	d135      	bne.n	800c05a <_vfiprintf_r+0x1ce>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	1d1a      	adds	r2, r3, #4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	9203      	str	r2, [sp, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfb8      	it	lt
 800bffa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bffe:	3402      	adds	r4, #2
 800c000:	9305      	str	r3, [sp, #20]
 800c002:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0e8 <_vfiprintf_r+0x25c>
 800c006:	7821      	ldrb	r1, [r4, #0]
 800c008:	2203      	movs	r2, #3
 800c00a:	4650      	mov	r0, sl
 800c00c:	f7f4 f908 	bl	8000220 <memchr>
 800c010:	b140      	cbz	r0, 800c024 <_vfiprintf_r+0x198>
 800c012:	2340      	movs	r3, #64	; 0x40
 800c014:	eba0 000a 	sub.w	r0, r0, sl
 800c018:	fa03 f000 	lsl.w	r0, r3, r0
 800c01c:	9b04      	ldr	r3, [sp, #16]
 800c01e:	4303      	orrs	r3, r0
 800c020:	3401      	adds	r4, #1
 800c022:	9304      	str	r3, [sp, #16]
 800c024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c028:	482c      	ldr	r0, [pc, #176]	; (800c0dc <_vfiprintf_r+0x250>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02e:	2206      	movs	r2, #6
 800c030:	f7f4 f8f6 	bl	8000220 <memchr>
 800c034:	2800      	cmp	r0, #0
 800c036:	d03f      	beq.n	800c0b8 <_vfiprintf_r+0x22c>
 800c038:	4b29      	ldr	r3, [pc, #164]	; (800c0e0 <_vfiprintf_r+0x254>)
 800c03a:	bb1b      	cbnz	r3, 800c084 <_vfiprintf_r+0x1f8>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	3307      	adds	r3, #7
 800c040:	f023 0307 	bic.w	r3, r3, #7
 800c044:	3308      	adds	r3, #8
 800c046:	9303      	str	r3, [sp, #12]
 800c048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04a:	443b      	add	r3, r7
 800c04c:	9309      	str	r3, [sp, #36]	; 0x24
 800c04e:	e767      	b.n	800bf20 <_vfiprintf_r+0x94>
 800c050:	fb0c 3202 	mla	r2, ip, r2, r3
 800c054:	460c      	mov	r4, r1
 800c056:	2001      	movs	r0, #1
 800c058:	e7a5      	b.n	800bfa6 <_vfiprintf_r+0x11a>
 800c05a:	2300      	movs	r3, #0
 800c05c:	3401      	adds	r4, #1
 800c05e:	9305      	str	r3, [sp, #20]
 800c060:	4619      	mov	r1, r3
 800c062:	f04f 0c0a 	mov.w	ip, #10
 800c066:	4620      	mov	r0, r4
 800c068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06c:	3a30      	subs	r2, #48	; 0x30
 800c06e:	2a09      	cmp	r2, #9
 800c070:	d903      	bls.n	800c07a <_vfiprintf_r+0x1ee>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0c5      	beq.n	800c002 <_vfiprintf_r+0x176>
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	e7c3      	b.n	800c002 <_vfiprintf_r+0x176>
 800c07a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c07e:	4604      	mov	r4, r0
 800c080:	2301      	movs	r3, #1
 800c082:	e7f0      	b.n	800c066 <_vfiprintf_r+0x1da>
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	462a      	mov	r2, r5
 800c08a:	4b16      	ldr	r3, [pc, #88]	; (800c0e4 <_vfiprintf_r+0x258>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4630      	mov	r0, r6
 800c090:	f7fd fdd6 	bl	8009c40 <_printf_float>
 800c094:	4607      	mov	r7, r0
 800c096:	1c78      	adds	r0, r7, #1
 800c098:	d1d6      	bne.n	800c048 <_vfiprintf_r+0x1bc>
 800c09a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c09c:	07d9      	lsls	r1, r3, #31
 800c09e:	d405      	bmi.n	800c0ac <_vfiprintf_r+0x220>
 800c0a0:	89ab      	ldrh	r3, [r5, #12]
 800c0a2:	059a      	lsls	r2, r3, #22
 800c0a4:	d402      	bmi.n	800c0ac <_vfiprintf_r+0x220>
 800c0a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0a8:	f000 faaf 	bl	800c60a <__retarget_lock_release_recursive>
 800c0ac:	89ab      	ldrh	r3, [r5, #12]
 800c0ae:	065b      	lsls	r3, r3, #25
 800c0b0:	f53f af12 	bmi.w	800bed8 <_vfiprintf_r+0x4c>
 800c0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0b6:	e711      	b.n	800bedc <_vfiprintf_r+0x50>
 800c0b8:	ab03      	add	r3, sp, #12
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	462a      	mov	r2, r5
 800c0be:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <_vfiprintf_r+0x258>)
 800c0c0:	a904      	add	r1, sp, #16
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7fe f860 	bl	800a188 <_printf_i>
 800c0c8:	e7e4      	b.n	800c094 <_vfiprintf_r+0x208>
 800c0ca:	bf00      	nop
 800c0cc:	0800e1d4 	.word	0x0800e1d4
 800c0d0:	0800e1f4 	.word	0x0800e1f4
 800c0d4:	0800e1b4 	.word	0x0800e1b4
 800c0d8:	0800e05c 	.word	0x0800e05c
 800c0dc:	0800e066 	.word	0x0800e066
 800c0e0:	08009c41 	.word	0x08009c41
 800c0e4:	0800be69 	.word	0x0800be69
 800c0e8:	0800e062 	.word	0x0800e062

0800c0ec <__swbuf_r>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	460e      	mov	r6, r1
 800c0f0:	4614      	mov	r4, r2
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	b118      	cbz	r0, 800c0fe <__swbuf_r+0x12>
 800c0f6:	6983      	ldr	r3, [r0, #24]
 800c0f8:	b90b      	cbnz	r3, 800c0fe <__swbuf_r+0x12>
 800c0fa:	f000 f9e7 	bl	800c4cc <__sinit>
 800c0fe:	4b21      	ldr	r3, [pc, #132]	; (800c184 <__swbuf_r+0x98>)
 800c100:	429c      	cmp	r4, r3
 800c102:	d12b      	bne.n	800c15c <__swbuf_r+0x70>
 800c104:	686c      	ldr	r4, [r5, #4]
 800c106:	69a3      	ldr	r3, [r4, #24]
 800c108:	60a3      	str	r3, [r4, #8]
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	071a      	lsls	r2, r3, #28
 800c10e:	d52f      	bpl.n	800c170 <__swbuf_r+0x84>
 800c110:	6923      	ldr	r3, [r4, #16]
 800c112:	b36b      	cbz	r3, 800c170 <__swbuf_r+0x84>
 800c114:	6923      	ldr	r3, [r4, #16]
 800c116:	6820      	ldr	r0, [r4, #0]
 800c118:	1ac0      	subs	r0, r0, r3
 800c11a:	6963      	ldr	r3, [r4, #20]
 800c11c:	b2f6      	uxtb	r6, r6
 800c11e:	4283      	cmp	r3, r0
 800c120:	4637      	mov	r7, r6
 800c122:	dc04      	bgt.n	800c12e <__swbuf_r+0x42>
 800c124:	4621      	mov	r1, r4
 800c126:	4628      	mov	r0, r5
 800c128:	f000 f93c 	bl	800c3a4 <_fflush_r>
 800c12c:	bb30      	cbnz	r0, 800c17c <__swbuf_r+0x90>
 800c12e:	68a3      	ldr	r3, [r4, #8]
 800c130:	3b01      	subs	r3, #1
 800c132:	60a3      	str	r3, [r4, #8]
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	1c5a      	adds	r2, r3, #1
 800c138:	6022      	str	r2, [r4, #0]
 800c13a:	701e      	strb	r6, [r3, #0]
 800c13c:	6963      	ldr	r3, [r4, #20]
 800c13e:	3001      	adds	r0, #1
 800c140:	4283      	cmp	r3, r0
 800c142:	d004      	beq.n	800c14e <__swbuf_r+0x62>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	07db      	lsls	r3, r3, #31
 800c148:	d506      	bpl.n	800c158 <__swbuf_r+0x6c>
 800c14a:	2e0a      	cmp	r6, #10
 800c14c:	d104      	bne.n	800c158 <__swbuf_r+0x6c>
 800c14e:	4621      	mov	r1, r4
 800c150:	4628      	mov	r0, r5
 800c152:	f000 f927 	bl	800c3a4 <_fflush_r>
 800c156:	b988      	cbnz	r0, 800c17c <__swbuf_r+0x90>
 800c158:	4638      	mov	r0, r7
 800c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c15c:	4b0a      	ldr	r3, [pc, #40]	; (800c188 <__swbuf_r+0x9c>)
 800c15e:	429c      	cmp	r4, r3
 800c160:	d101      	bne.n	800c166 <__swbuf_r+0x7a>
 800c162:	68ac      	ldr	r4, [r5, #8]
 800c164:	e7cf      	b.n	800c106 <__swbuf_r+0x1a>
 800c166:	4b09      	ldr	r3, [pc, #36]	; (800c18c <__swbuf_r+0xa0>)
 800c168:	429c      	cmp	r4, r3
 800c16a:	bf08      	it	eq
 800c16c:	68ec      	ldreq	r4, [r5, #12]
 800c16e:	e7ca      	b.n	800c106 <__swbuf_r+0x1a>
 800c170:	4621      	mov	r1, r4
 800c172:	4628      	mov	r0, r5
 800c174:	f000 f81a 	bl	800c1ac <__swsetup_r>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d0cb      	beq.n	800c114 <__swbuf_r+0x28>
 800c17c:	f04f 37ff 	mov.w	r7, #4294967295
 800c180:	e7ea      	b.n	800c158 <__swbuf_r+0x6c>
 800c182:	bf00      	nop
 800c184:	0800e1d4 	.word	0x0800e1d4
 800c188:	0800e1f4 	.word	0x0800e1f4
 800c18c:	0800e1b4 	.word	0x0800e1b4

0800c190 <__ascii_wctomb>:
 800c190:	b149      	cbz	r1, 800c1a6 <__ascii_wctomb+0x16>
 800c192:	2aff      	cmp	r2, #255	; 0xff
 800c194:	bf85      	ittet	hi
 800c196:	238a      	movhi	r3, #138	; 0x8a
 800c198:	6003      	strhi	r3, [r0, #0]
 800c19a:	700a      	strbls	r2, [r1, #0]
 800c19c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1a0:	bf98      	it	ls
 800c1a2:	2001      	movls	r0, #1
 800c1a4:	4770      	bx	lr
 800c1a6:	4608      	mov	r0, r1
 800c1a8:	4770      	bx	lr
	...

0800c1ac <__swsetup_r>:
 800c1ac:	4b32      	ldr	r3, [pc, #200]	; (800c278 <__swsetup_r+0xcc>)
 800c1ae:	b570      	push	{r4, r5, r6, lr}
 800c1b0:	681d      	ldr	r5, [r3, #0]
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	b125      	cbz	r5, 800c1c2 <__swsetup_r+0x16>
 800c1b8:	69ab      	ldr	r3, [r5, #24]
 800c1ba:	b913      	cbnz	r3, 800c1c2 <__swsetup_r+0x16>
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f000 f985 	bl	800c4cc <__sinit>
 800c1c2:	4b2e      	ldr	r3, [pc, #184]	; (800c27c <__swsetup_r+0xd0>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d10f      	bne.n	800c1e8 <__swsetup_r+0x3c>
 800c1c8:	686c      	ldr	r4, [r5, #4]
 800c1ca:	89a3      	ldrh	r3, [r4, #12]
 800c1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1d0:	0719      	lsls	r1, r3, #28
 800c1d2:	d42c      	bmi.n	800c22e <__swsetup_r+0x82>
 800c1d4:	06dd      	lsls	r5, r3, #27
 800c1d6:	d411      	bmi.n	800c1fc <__swsetup_r+0x50>
 800c1d8:	2309      	movs	r3, #9
 800c1da:	6033      	str	r3, [r6, #0]
 800c1dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e6:	e03e      	b.n	800c266 <__swsetup_r+0xba>
 800c1e8:	4b25      	ldr	r3, [pc, #148]	; (800c280 <__swsetup_r+0xd4>)
 800c1ea:	429c      	cmp	r4, r3
 800c1ec:	d101      	bne.n	800c1f2 <__swsetup_r+0x46>
 800c1ee:	68ac      	ldr	r4, [r5, #8]
 800c1f0:	e7eb      	b.n	800c1ca <__swsetup_r+0x1e>
 800c1f2:	4b24      	ldr	r3, [pc, #144]	; (800c284 <__swsetup_r+0xd8>)
 800c1f4:	429c      	cmp	r4, r3
 800c1f6:	bf08      	it	eq
 800c1f8:	68ec      	ldreq	r4, [r5, #12]
 800c1fa:	e7e6      	b.n	800c1ca <__swsetup_r+0x1e>
 800c1fc:	0758      	lsls	r0, r3, #29
 800c1fe:	d512      	bpl.n	800c226 <__swsetup_r+0x7a>
 800c200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c202:	b141      	cbz	r1, 800c216 <__swsetup_r+0x6a>
 800c204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c208:	4299      	cmp	r1, r3
 800c20a:	d002      	beq.n	800c212 <__swsetup_r+0x66>
 800c20c:	4630      	mov	r0, r6
 800c20e:	f7ff fb31 	bl	800b874 <_free_r>
 800c212:	2300      	movs	r3, #0
 800c214:	6363      	str	r3, [r4, #52]	; 0x34
 800c216:	89a3      	ldrh	r3, [r4, #12]
 800c218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	2300      	movs	r3, #0
 800c220:	6063      	str	r3, [r4, #4]
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f043 0308 	orr.w	r3, r3, #8
 800c22c:	81a3      	strh	r3, [r4, #12]
 800c22e:	6923      	ldr	r3, [r4, #16]
 800c230:	b94b      	cbnz	r3, 800c246 <__swsetup_r+0x9a>
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c23c:	d003      	beq.n	800c246 <__swsetup_r+0x9a>
 800c23e:	4621      	mov	r1, r4
 800c240:	4630      	mov	r0, r6
 800c242:	f000 fa09 	bl	800c658 <__smakebuf_r>
 800c246:	89a0      	ldrh	r0, [r4, #12]
 800c248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c24c:	f010 0301 	ands.w	r3, r0, #1
 800c250:	d00a      	beq.n	800c268 <__swsetup_r+0xbc>
 800c252:	2300      	movs	r3, #0
 800c254:	60a3      	str	r3, [r4, #8]
 800c256:	6963      	ldr	r3, [r4, #20]
 800c258:	425b      	negs	r3, r3
 800c25a:	61a3      	str	r3, [r4, #24]
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	b943      	cbnz	r3, 800c272 <__swsetup_r+0xc6>
 800c260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c264:	d1ba      	bne.n	800c1dc <__swsetup_r+0x30>
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	0781      	lsls	r1, r0, #30
 800c26a:	bf58      	it	pl
 800c26c:	6963      	ldrpl	r3, [r4, #20]
 800c26e:	60a3      	str	r3, [r4, #8]
 800c270:	e7f4      	b.n	800c25c <__swsetup_r+0xb0>
 800c272:	2000      	movs	r0, #0
 800c274:	e7f7      	b.n	800c266 <__swsetup_r+0xba>
 800c276:	bf00      	nop
 800c278:	20000058 	.word	0x20000058
 800c27c:	0800e1d4 	.word	0x0800e1d4
 800c280:	0800e1f4 	.word	0x0800e1f4
 800c284:	0800e1b4 	.word	0x0800e1b4

0800c288 <abort>:
 800c288:	b508      	push	{r3, lr}
 800c28a:	2006      	movs	r0, #6
 800c28c:	f000 fa54 	bl	800c738 <raise>
 800c290:	2001      	movs	r0, #1
 800c292:	f7f7 fd7d 	bl	8003d90 <_exit>
	...

0800c298 <__sflush_r>:
 800c298:	898a      	ldrh	r2, [r1, #12]
 800c29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29e:	4605      	mov	r5, r0
 800c2a0:	0710      	lsls	r0, r2, #28
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	d458      	bmi.n	800c358 <__sflush_r+0xc0>
 800c2a6:	684b      	ldr	r3, [r1, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dc05      	bgt.n	800c2b8 <__sflush_r+0x20>
 800c2ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	dc02      	bgt.n	800c2b8 <__sflush_r+0x20>
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ba:	2e00      	cmp	r6, #0
 800c2bc:	d0f9      	beq.n	800c2b2 <__sflush_r+0x1a>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2c4:	682f      	ldr	r7, [r5, #0]
 800c2c6:	602b      	str	r3, [r5, #0]
 800c2c8:	d032      	beq.n	800c330 <__sflush_r+0x98>
 800c2ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	075a      	lsls	r2, r3, #29
 800c2d0:	d505      	bpl.n	800c2de <__sflush_r+0x46>
 800c2d2:	6863      	ldr	r3, [r4, #4]
 800c2d4:	1ac0      	subs	r0, r0, r3
 800c2d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2d8:	b10b      	cbz	r3, 800c2de <__sflush_r+0x46>
 800c2da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2dc:	1ac0      	subs	r0, r0, r3
 800c2de:	2300      	movs	r3, #0
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2e4:	6a21      	ldr	r1, [r4, #32]
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b0      	blx	r6
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	d106      	bne.n	800c2fe <__sflush_r+0x66>
 800c2f0:	6829      	ldr	r1, [r5, #0]
 800c2f2:	291d      	cmp	r1, #29
 800c2f4:	d82c      	bhi.n	800c350 <__sflush_r+0xb8>
 800c2f6:	4a2a      	ldr	r2, [pc, #168]	; (800c3a0 <__sflush_r+0x108>)
 800c2f8:	40ca      	lsrs	r2, r1
 800c2fa:	07d6      	lsls	r6, r2, #31
 800c2fc:	d528      	bpl.n	800c350 <__sflush_r+0xb8>
 800c2fe:	2200      	movs	r2, #0
 800c300:	6062      	str	r2, [r4, #4]
 800c302:	04d9      	lsls	r1, r3, #19
 800c304:	6922      	ldr	r2, [r4, #16]
 800c306:	6022      	str	r2, [r4, #0]
 800c308:	d504      	bpl.n	800c314 <__sflush_r+0x7c>
 800c30a:	1c42      	adds	r2, r0, #1
 800c30c:	d101      	bne.n	800c312 <__sflush_r+0x7a>
 800c30e:	682b      	ldr	r3, [r5, #0]
 800c310:	b903      	cbnz	r3, 800c314 <__sflush_r+0x7c>
 800c312:	6560      	str	r0, [r4, #84]	; 0x54
 800c314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c316:	602f      	str	r7, [r5, #0]
 800c318:	2900      	cmp	r1, #0
 800c31a:	d0ca      	beq.n	800c2b2 <__sflush_r+0x1a>
 800c31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c320:	4299      	cmp	r1, r3
 800c322:	d002      	beq.n	800c32a <__sflush_r+0x92>
 800c324:	4628      	mov	r0, r5
 800c326:	f7ff faa5 	bl	800b874 <_free_r>
 800c32a:	2000      	movs	r0, #0
 800c32c:	6360      	str	r0, [r4, #52]	; 0x34
 800c32e:	e7c1      	b.n	800c2b4 <__sflush_r+0x1c>
 800c330:	6a21      	ldr	r1, [r4, #32]
 800c332:	2301      	movs	r3, #1
 800c334:	4628      	mov	r0, r5
 800c336:	47b0      	blx	r6
 800c338:	1c41      	adds	r1, r0, #1
 800c33a:	d1c7      	bne.n	800c2cc <__sflush_r+0x34>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d0c4      	beq.n	800c2cc <__sflush_r+0x34>
 800c342:	2b1d      	cmp	r3, #29
 800c344:	d001      	beq.n	800c34a <__sflush_r+0xb2>
 800c346:	2b16      	cmp	r3, #22
 800c348:	d101      	bne.n	800c34e <__sflush_r+0xb6>
 800c34a:	602f      	str	r7, [r5, #0]
 800c34c:	e7b1      	b.n	800c2b2 <__sflush_r+0x1a>
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c354:	81a3      	strh	r3, [r4, #12]
 800c356:	e7ad      	b.n	800c2b4 <__sflush_r+0x1c>
 800c358:	690f      	ldr	r7, [r1, #16]
 800c35a:	2f00      	cmp	r7, #0
 800c35c:	d0a9      	beq.n	800c2b2 <__sflush_r+0x1a>
 800c35e:	0793      	lsls	r3, r2, #30
 800c360:	680e      	ldr	r6, [r1, #0]
 800c362:	bf08      	it	eq
 800c364:	694b      	ldreq	r3, [r1, #20]
 800c366:	600f      	str	r7, [r1, #0]
 800c368:	bf18      	it	ne
 800c36a:	2300      	movne	r3, #0
 800c36c:	eba6 0807 	sub.w	r8, r6, r7
 800c370:	608b      	str	r3, [r1, #8]
 800c372:	f1b8 0f00 	cmp.w	r8, #0
 800c376:	dd9c      	ble.n	800c2b2 <__sflush_r+0x1a>
 800c378:	6a21      	ldr	r1, [r4, #32]
 800c37a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c37c:	4643      	mov	r3, r8
 800c37e:	463a      	mov	r2, r7
 800c380:	4628      	mov	r0, r5
 800c382:	47b0      	blx	r6
 800c384:	2800      	cmp	r0, #0
 800c386:	dc06      	bgt.n	800c396 <__sflush_r+0xfe>
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	f04f 30ff 	mov.w	r0, #4294967295
 800c394:	e78e      	b.n	800c2b4 <__sflush_r+0x1c>
 800c396:	4407      	add	r7, r0
 800c398:	eba8 0800 	sub.w	r8, r8, r0
 800c39c:	e7e9      	b.n	800c372 <__sflush_r+0xda>
 800c39e:	bf00      	nop
 800c3a0:	20400001 	.word	0x20400001

0800c3a4 <_fflush_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	690b      	ldr	r3, [r1, #16]
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	b913      	cbnz	r3, 800c3b4 <_fflush_r+0x10>
 800c3ae:	2500      	movs	r5, #0
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	b118      	cbz	r0, 800c3be <_fflush_r+0x1a>
 800c3b6:	6983      	ldr	r3, [r0, #24]
 800c3b8:	b90b      	cbnz	r3, 800c3be <_fflush_r+0x1a>
 800c3ba:	f000 f887 	bl	800c4cc <__sinit>
 800c3be:	4b14      	ldr	r3, [pc, #80]	; (800c410 <_fflush_r+0x6c>)
 800c3c0:	429c      	cmp	r4, r3
 800c3c2:	d11b      	bne.n	800c3fc <_fflush_r+0x58>
 800c3c4:	686c      	ldr	r4, [r5, #4]
 800c3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0ef      	beq.n	800c3ae <_fflush_r+0xa>
 800c3ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3d0:	07d0      	lsls	r0, r2, #31
 800c3d2:	d404      	bmi.n	800c3de <_fflush_r+0x3a>
 800c3d4:	0599      	lsls	r1, r3, #22
 800c3d6:	d402      	bmi.n	800c3de <_fflush_r+0x3a>
 800c3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3da:	f000 f915 	bl	800c608 <__retarget_lock_acquire_recursive>
 800c3de:	4628      	mov	r0, r5
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	f7ff ff59 	bl	800c298 <__sflush_r>
 800c3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3e8:	07da      	lsls	r2, r3, #31
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	d4e0      	bmi.n	800c3b0 <_fflush_r+0xc>
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	059b      	lsls	r3, r3, #22
 800c3f2:	d4dd      	bmi.n	800c3b0 <_fflush_r+0xc>
 800c3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3f6:	f000 f908 	bl	800c60a <__retarget_lock_release_recursive>
 800c3fa:	e7d9      	b.n	800c3b0 <_fflush_r+0xc>
 800c3fc:	4b05      	ldr	r3, [pc, #20]	; (800c414 <_fflush_r+0x70>)
 800c3fe:	429c      	cmp	r4, r3
 800c400:	d101      	bne.n	800c406 <_fflush_r+0x62>
 800c402:	68ac      	ldr	r4, [r5, #8]
 800c404:	e7df      	b.n	800c3c6 <_fflush_r+0x22>
 800c406:	4b04      	ldr	r3, [pc, #16]	; (800c418 <_fflush_r+0x74>)
 800c408:	429c      	cmp	r4, r3
 800c40a:	bf08      	it	eq
 800c40c:	68ec      	ldreq	r4, [r5, #12]
 800c40e:	e7da      	b.n	800c3c6 <_fflush_r+0x22>
 800c410:	0800e1d4 	.word	0x0800e1d4
 800c414:	0800e1f4 	.word	0x0800e1f4
 800c418:	0800e1b4 	.word	0x0800e1b4

0800c41c <std>:
 800c41c:	2300      	movs	r3, #0
 800c41e:	b510      	push	{r4, lr}
 800c420:	4604      	mov	r4, r0
 800c422:	e9c0 3300 	strd	r3, r3, [r0]
 800c426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c42a:	6083      	str	r3, [r0, #8]
 800c42c:	8181      	strh	r1, [r0, #12]
 800c42e:	6643      	str	r3, [r0, #100]	; 0x64
 800c430:	81c2      	strh	r2, [r0, #14]
 800c432:	6183      	str	r3, [r0, #24]
 800c434:	4619      	mov	r1, r3
 800c436:	2208      	movs	r2, #8
 800c438:	305c      	adds	r0, #92	; 0x5c
 800c43a:	f7fd fb59 	bl	8009af0 <memset>
 800c43e:	4b05      	ldr	r3, [pc, #20]	; (800c454 <std+0x38>)
 800c440:	6263      	str	r3, [r4, #36]	; 0x24
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <std+0x3c>)
 800c444:	62a3      	str	r3, [r4, #40]	; 0x28
 800c446:	4b05      	ldr	r3, [pc, #20]	; (800c45c <std+0x40>)
 800c448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c44a:	4b05      	ldr	r3, [pc, #20]	; (800c460 <std+0x44>)
 800c44c:	6224      	str	r4, [r4, #32]
 800c44e:	6323      	str	r3, [r4, #48]	; 0x30
 800c450:	bd10      	pop	{r4, pc}
 800c452:	bf00      	nop
 800c454:	0800c771 	.word	0x0800c771
 800c458:	0800c793 	.word	0x0800c793
 800c45c:	0800c7cb 	.word	0x0800c7cb
 800c460:	0800c7ef 	.word	0x0800c7ef

0800c464 <_cleanup_r>:
 800c464:	4901      	ldr	r1, [pc, #4]	; (800c46c <_cleanup_r+0x8>)
 800c466:	f000 b8af 	b.w	800c5c8 <_fwalk_reent>
 800c46a:	bf00      	nop
 800c46c:	0800c3a5 	.word	0x0800c3a5

0800c470 <__sfmoreglue>:
 800c470:	b570      	push	{r4, r5, r6, lr}
 800c472:	2268      	movs	r2, #104	; 0x68
 800c474:	1e4d      	subs	r5, r1, #1
 800c476:	4355      	muls	r5, r2
 800c478:	460e      	mov	r6, r1
 800c47a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c47e:	f7ff fa65 	bl	800b94c <_malloc_r>
 800c482:	4604      	mov	r4, r0
 800c484:	b140      	cbz	r0, 800c498 <__sfmoreglue+0x28>
 800c486:	2100      	movs	r1, #0
 800c488:	e9c0 1600 	strd	r1, r6, [r0]
 800c48c:	300c      	adds	r0, #12
 800c48e:	60a0      	str	r0, [r4, #8]
 800c490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c494:	f7fd fb2c 	bl	8009af0 <memset>
 800c498:	4620      	mov	r0, r4
 800c49a:	bd70      	pop	{r4, r5, r6, pc}

0800c49c <__sfp_lock_acquire>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__sfp_lock_acquire+0x8>)
 800c49e:	f000 b8b3 	b.w	800c608 <__retarget_lock_acquire_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	200006cd 	.word	0x200006cd

0800c4a8 <__sfp_lock_release>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__sfp_lock_release+0x8>)
 800c4aa:	f000 b8ae 	b.w	800c60a <__retarget_lock_release_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	200006cd 	.word	0x200006cd

0800c4b4 <__sinit_lock_acquire>:
 800c4b4:	4801      	ldr	r0, [pc, #4]	; (800c4bc <__sinit_lock_acquire+0x8>)
 800c4b6:	f000 b8a7 	b.w	800c608 <__retarget_lock_acquire_recursive>
 800c4ba:	bf00      	nop
 800c4bc:	200006ce 	.word	0x200006ce

0800c4c0 <__sinit_lock_release>:
 800c4c0:	4801      	ldr	r0, [pc, #4]	; (800c4c8 <__sinit_lock_release+0x8>)
 800c4c2:	f000 b8a2 	b.w	800c60a <__retarget_lock_release_recursive>
 800c4c6:	bf00      	nop
 800c4c8:	200006ce 	.word	0x200006ce

0800c4cc <__sinit>:
 800c4cc:	b510      	push	{r4, lr}
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	f7ff fff0 	bl	800c4b4 <__sinit_lock_acquire>
 800c4d4:	69a3      	ldr	r3, [r4, #24]
 800c4d6:	b11b      	cbz	r3, 800c4e0 <__sinit+0x14>
 800c4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4dc:	f7ff bff0 	b.w	800c4c0 <__sinit_lock_release>
 800c4e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4e4:	6523      	str	r3, [r4, #80]	; 0x50
 800c4e6:	4b13      	ldr	r3, [pc, #76]	; (800c534 <__sinit+0x68>)
 800c4e8:	4a13      	ldr	r2, [pc, #76]	; (800c538 <__sinit+0x6c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4ee:	42a3      	cmp	r3, r4
 800c4f0:	bf04      	itt	eq
 800c4f2:	2301      	moveq	r3, #1
 800c4f4:	61a3      	streq	r3, [r4, #24]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 f820 	bl	800c53c <__sfp>
 800c4fc:	6060      	str	r0, [r4, #4]
 800c4fe:	4620      	mov	r0, r4
 800c500:	f000 f81c 	bl	800c53c <__sfp>
 800c504:	60a0      	str	r0, [r4, #8]
 800c506:	4620      	mov	r0, r4
 800c508:	f000 f818 	bl	800c53c <__sfp>
 800c50c:	2200      	movs	r2, #0
 800c50e:	60e0      	str	r0, [r4, #12]
 800c510:	2104      	movs	r1, #4
 800c512:	6860      	ldr	r0, [r4, #4]
 800c514:	f7ff ff82 	bl	800c41c <std>
 800c518:	68a0      	ldr	r0, [r4, #8]
 800c51a:	2201      	movs	r2, #1
 800c51c:	2109      	movs	r1, #9
 800c51e:	f7ff ff7d 	bl	800c41c <std>
 800c522:	68e0      	ldr	r0, [r4, #12]
 800c524:	2202      	movs	r2, #2
 800c526:	2112      	movs	r1, #18
 800c528:	f7ff ff78 	bl	800c41c <std>
 800c52c:	2301      	movs	r3, #1
 800c52e:	61a3      	str	r3, [r4, #24]
 800c530:	e7d2      	b.n	800c4d8 <__sinit+0xc>
 800c532:	bf00      	nop
 800c534:	0800de38 	.word	0x0800de38
 800c538:	0800c465 	.word	0x0800c465

0800c53c <__sfp>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	4607      	mov	r7, r0
 800c540:	f7ff ffac 	bl	800c49c <__sfp_lock_acquire>
 800c544:	4b1e      	ldr	r3, [pc, #120]	; (800c5c0 <__sfp+0x84>)
 800c546:	681e      	ldr	r6, [r3, #0]
 800c548:	69b3      	ldr	r3, [r6, #24]
 800c54a:	b913      	cbnz	r3, 800c552 <__sfp+0x16>
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7ff ffbd 	bl	800c4cc <__sinit>
 800c552:	3648      	adds	r6, #72	; 0x48
 800c554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c558:	3b01      	subs	r3, #1
 800c55a:	d503      	bpl.n	800c564 <__sfp+0x28>
 800c55c:	6833      	ldr	r3, [r6, #0]
 800c55e:	b30b      	cbz	r3, 800c5a4 <__sfp+0x68>
 800c560:	6836      	ldr	r6, [r6, #0]
 800c562:	e7f7      	b.n	800c554 <__sfp+0x18>
 800c564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c568:	b9d5      	cbnz	r5, 800c5a0 <__sfp+0x64>
 800c56a:	4b16      	ldr	r3, [pc, #88]	; (800c5c4 <__sfp+0x88>)
 800c56c:	60e3      	str	r3, [r4, #12]
 800c56e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c572:	6665      	str	r5, [r4, #100]	; 0x64
 800c574:	f000 f847 	bl	800c606 <__retarget_lock_init_recursive>
 800c578:	f7ff ff96 	bl	800c4a8 <__sfp_lock_release>
 800c57c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c584:	6025      	str	r5, [r4, #0]
 800c586:	61a5      	str	r5, [r4, #24]
 800c588:	2208      	movs	r2, #8
 800c58a:	4629      	mov	r1, r5
 800c58c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c590:	f7fd faae 	bl	8009af0 <memset>
 800c594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c59c:	4620      	mov	r0, r4
 800c59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5a0:	3468      	adds	r4, #104	; 0x68
 800c5a2:	e7d9      	b.n	800c558 <__sfp+0x1c>
 800c5a4:	2104      	movs	r1, #4
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	f7ff ff62 	bl	800c470 <__sfmoreglue>
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	6030      	str	r0, [r6, #0]
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d1d5      	bne.n	800c560 <__sfp+0x24>
 800c5b4:	f7ff ff78 	bl	800c4a8 <__sfp_lock_release>
 800c5b8:	230c      	movs	r3, #12
 800c5ba:	603b      	str	r3, [r7, #0]
 800c5bc:	e7ee      	b.n	800c59c <__sfp+0x60>
 800c5be:	bf00      	nop
 800c5c0:	0800de38 	.word	0x0800de38
 800c5c4:	ffff0001 	.word	0xffff0001

0800c5c8 <_fwalk_reent>:
 800c5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	4688      	mov	r8, r1
 800c5d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5d4:	2700      	movs	r7, #0
 800c5d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5da:	f1b9 0901 	subs.w	r9, r9, #1
 800c5de:	d505      	bpl.n	800c5ec <_fwalk_reent+0x24>
 800c5e0:	6824      	ldr	r4, [r4, #0]
 800c5e2:	2c00      	cmp	r4, #0
 800c5e4:	d1f7      	bne.n	800c5d6 <_fwalk_reent+0xe>
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ec:	89ab      	ldrh	r3, [r5, #12]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d907      	bls.n	800c602 <_fwalk_reent+0x3a>
 800c5f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	d003      	beq.n	800c602 <_fwalk_reent+0x3a>
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	47c0      	blx	r8
 800c600:	4307      	orrs	r7, r0
 800c602:	3568      	adds	r5, #104	; 0x68
 800c604:	e7e9      	b.n	800c5da <_fwalk_reent+0x12>

0800c606 <__retarget_lock_init_recursive>:
 800c606:	4770      	bx	lr

0800c608 <__retarget_lock_acquire_recursive>:
 800c608:	4770      	bx	lr

0800c60a <__retarget_lock_release_recursive>:
 800c60a:	4770      	bx	lr

0800c60c <__swhatbuf_r>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	460e      	mov	r6, r1
 800c610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c614:	2900      	cmp	r1, #0
 800c616:	b096      	sub	sp, #88	; 0x58
 800c618:	4614      	mov	r4, r2
 800c61a:	461d      	mov	r5, r3
 800c61c:	da08      	bge.n	800c630 <__swhatbuf_r+0x24>
 800c61e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	602a      	str	r2, [r5, #0]
 800c626:	061a      	lsls	r2, r3, #24
 800c628:	d410      	bmi.n	800c64c <__swhatbuf_r+0x40>
 800c62a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c62e:	e00e      	b.n	800c64e <__swhatbuf_r+0x42>
 800c630:	466a      	mov	r2, sp
 800c632:	f000 f903 	bl	800c83c <_fstat_r>
 800c636:	2800      	cmp	r0, #0
 800c638:	dbf1      	blt.n	800c61e <__swhatbuf_r+0x12>
 800c63a:	9a01      	ldr	r2, [sp, #4]
 800c63c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c640:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c644:	425a      	negs	r2, r3
 800c646:	415a      	adcs	r2, r3
 800c648:	602a      	str	r2, [r5, #0]
 800c64a:	e7ee      	b.n	800c62a <__swhatbuf_r+0x1e>
 800c64c:	2340      	movs	r3, #64	; 0x40
 800c64e:	2000      	movs	r0, #0
 800c650:	6023      	str	r3, [r4, #0]
 800c652:	b016      	add	sp, #88	; 0x58
 800c654:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c658 <__smakebuf_r>:
 800c658:	898b      	ldrh	r3, [r1, #12]
 800c65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c65c:	079d      	lsls	r5, r3, #30
 800c65e:	4606      	mov	r6, r0
 800c660:	460c      	mov	r4, r1
 800c662:	d507      	bpl.n	800c674 <__smakebuf_r+0x1c>
 800c664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	2301      	movs	r3, #1
 800c66e:	6163      	str	r3, [r4, #20]
 800c670:	b002      	add	sp, #8
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	ab01      	add	r3, sp, #4
 800c676:	466a      	mov	r2, sp
 800c678:	f7ff ffc8 	bl	800c60c <__swhatbuf_r>
 800c67c:	9900      	ldr	r1, [sp, #0]
 800c67e:	4605      	mov	r5, r0
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff f963 	bl	800b94c <_malloc_r>
 800c686:	b948      	cbnz	r0, 800c69c <__smakebuf_r+0x44>
 800c688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68c:	059a      	lsls	r2, r3, #22
 800c68e:	d4ef      	bmi.n	800c670 <__smakebuf_r+0x18>
 800c690:	f023 0303 	bic.w	r3, r3, #3
 800c694:	f043 0302 	orr.w	r3, r3, #2
 800c698:	81a3      	strh	r3, [r4, #12]
 800c69a:	e7e3      	b.n	800c664 <__smakebuf_r+0xc>
 800c69c:	4b0d      	ldr	r3, [pc, #52]	; (800c6d4 <__smakebuf_r+0x7c>)
 800c69e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	6020      	str	r0, [r4, #0]
 800c6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	9b00      	ldr	r3, [sp, #0]
 800c6ac:	6163      	str	r3, [r4, #20]
 800c6ae:	9b01      	ldr	r3, [sp, #4]
 800c6b0:	6120      	str	r0, [r4, #16]
 800c6b2:	b15b      	cbz	r3, 800c6cc <__smakebuf_r+0x74>
 800c6b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f000 f8d1 	bl	800c860 <_isatty_r>
 800c6be:	b128      	cbz	r0, 800c6cc <__smakebuf_r+0x74>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f023 0303 	bic.w	r3, r3, #3
 800c6c6:	f043 0301 	orr.w	r3, r3, #1
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	89a0      	ldrh	r0, [r4, #12]
 800c6ce:	4305      	orrs	r5, r0
 800c6d0:	81a5      	strh	r5, [r4, #12]
 800c6d2:	e7cd      	b.n	800c670 <__smakebuf_r+0x18>
 800c6d4:	0800c465 	.word	0x0800c465

0800c6d8 <_malloc_usable_size_r>:
 800c6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6dc:	1f18      	subs	r0, r3, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfbc      	itt	lt
 800c6e2:	580b      	ldrlt	r3, [r1, r0]
 800c6e4:	18c0      	addlt	r0, r0, r3
 800c6e6:	4770      	bx	lr

0800c6e8 <_raise_r>:
 800c6e8:	291f      	cmp	r1, #31
 800c6ea:	b538      	push	{r3, r4, r5, lr}
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	460d      	mov	r5, r1
 800c6f0:	d904      	bls.n	800c6fc <_raise_r+0x14>
 800c6f2:	2316      	movs	r3, #22
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6fe:	b112      	cbz	r2, 800c706 <_raise_r+0x1e>
 800c700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c704:	b94b      	cbnz	r3, 800c71a <_raise_r+0x32>
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f830 	bl	800c76c <_getpid_r>
 800c70c:	462a      	mov	r2, r5
 800c70e:	4601      	mov	r1, r0
 800c710:	4620      	mov	r0, r4
 800c712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c716:	f000 b817 	b.w	800c748 <_kill_r>
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d00a      	beq.n	800c734 <_raise_r+0x4c>
 800c71e:	1c59      	adds	r1, r3, #1
 800c720:	d103      	bne.n	800c72a <_raise_r+0x42>
 800c722:	2316      	movs	r3, #22
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	2001      	movs	r0, #1
 800c728:	e7e7      	b.n	800c6fa <_raise_r+0x12>
 800c72a:	2400      	movs	r4, #0
 800c72c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c730:	4628      	mov	r0, r5
 800c732:	4798      	blx	r3
 800c734:	2000      	movs	r0, #0
 800c736:	e7e0      	b.n	800c6fa <_raise_r+0x12>

0800c738 <raise>:
 800c738:	4b02      	ldr	r3, [pc, #8]	; (800c744 <raise+0xc>)
 800c73a:	4601      	mov	r1, r0
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	f7ff bfd3 	b.w	800c6e8 <_raise_r>
 800c742:	bf00      	nop
 800c744:	20000058 	.word	0x20000058

0800c748 <_kill_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4d07      	ldr	r5, [pc, #28]	; (800c768 <_kill_r+0x20>)
 800c74c:	2300      	movs	r3, #0
 800c74e:	4604      	mov	r4, r0
 800c750:	4608      	mov	r0, r1
 800c752:	4611      	mov	r1, r2
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	f7f7 fb0b 	bl	8003d70 <_kill>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d102      	bne.n	800c764 <_kill_r+0x1c>
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	b103      	cbz	r3, 800c764 <_kill_r+0x1c>
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	bd38      	pop	{r3, r4, r5, pc}
 800c766:	bf00      	nop
 800c768:	200006c8 	.word	0x200006c8

0800c76c <_getpid_r>:
 800c76c:	f7f7 baf8 	b.w	8003d60 <_getpid>

0800c770 <__sread>:
 800c770:	b510      	push	{r4, lr}
 800c772:	460c      	mov	r4, r1
 800c774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c778:	f000 f894 	bl	800c8a4 <_read_r>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	bfab      	itete	ge
 800c780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c782:	89a3      	ldrhlt	r3, [r4, #12]
 800c784:	181b      	addge	r3, r3, r0
 800c786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c78a:	bfac      	ite	ge
 800c78c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c78e:	81a3      	strhlt	r3, [r4, #12]
 800c790:	bd10      	pop	{r4, pc}

0800c792 <__swrite>:
 800c792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c796:	461f      	mov	r7, r3
 800c798:	898b      	ldrh	r3, [r1, #12]
 800c79a:	05db      	lsls	r3, r3, #23
 800c79c:	4605      	mov	r5, r0
 800c79e:	460c      	mov	r4, r1
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	d505      	bpl.n	800c7b0 <__swrite+0x1e>
 800c7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a8:	2302      	movs	r3, #2
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f000 f868 	bl	800c880 <_lseek_r>
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7ba:	81a3      	strh	r3, [r4, #12]
 800c7bc:	4632      	mov	r2, r6
 800c7be:	463b      	mov	r3, r7
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c6:	f000 b817 	b.w	800c7f8 <_write_r>

0800c7ca <__sseek>:
 800c7ca:	b510      	push	{r4, lr}
 800c7cc:	460c      	mov	r4, r1
 800c7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d2:	f000 f855 	bl	800c880 <_lseek_r>
 800c7d6:	1c43      	adds	r3, r0, #1
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	bf15      	itete	ne
 800c7dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7e6:	81a3      	strheq	r3, [r4, #12]
 800c7e8:	bf18      	it	ne
 800c7ea:	81a3      	strhne	r3, [r4, #12]
 800c7ec:	bd10      	pop	{r4, pc}

0800c7ee <__sclose>:
 800c7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f2:	f000 b813 	b.w	800c81c <_close_r>
	...

0800c7f8 <_write_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d07      	ldr	r5, [pc, #28]	; (800c818 <_write_r+0x20>)
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	4608      	mov	r0, r1
 800c800:	4611      	mov	r1, r2
 800c802:	2200      	movs	r2, #0
 800c804:	602a      	str	r2, [r5, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	f7f7 fae9 	bl	8003dde <_write>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_write_r+0x1e>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_write_r+0x1e>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	200006c8 	.word	0x200006c8

0800c81c <_close_r>:
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	4d06      	ldr	r5, [pc, #24]	; (800c838 <_close_r+0x1c>)
 800c820:	2300      	movs	r3, #0
 800c822:	4604      	mov	r4, r0
 800c824:	4608      	mov	r0, r1
 800c826:	602b      	str	r3, [r5, #0]
 800c828:	f7f7 faf5 	bl	8003e16 <_close>
 800c82c:	1c43      	adds	r3, r0, #1
 800c82e:	d102      	bne.n	800c836 <_close_r+0x1a>
 800c830:	682b      	ldr	r3, [r5, #0]
 800c832:	b103      	cbz	r3, 800c836 <_close_r+0x1a>
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	200006c8 	.word	0x200006c8

0800c83c <_fstat_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d07      	ldr	r5, [pc, #28]	; (800c85c <_fstat_r+0x20>)
 800c840:	2300      	movs	r3, #0
 800c842:	4604      	mov	r4, r0
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	602b      	str	r3, [r5, #0]
 800c84a:	f7f7 faf0 	bl	8003e2e <_fstat>
 800c84e:	1c43      	adds	r3, r0, #1
 800c850:	d102      	bne.n	800c858 <_fstat_r+0x1c>
 800c852:	682b      	ldr	r3, [r5, #0]
 800c854:	b103      	cbz	r3, 800c858 <_fstat_r+0x1c>
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	bd38      	pop	{r3, r4, r5, pc}
 800c85a:	bf00      	nop
 800c85c:	200006c8 	.word	0x200006c8

0800c860 <_isatty_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d06      	ldr	r5, [pc, #24]	; (800c87c <_isatty_r+0x1c>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	602b      	str	r3, [r5, #0]
 800c86c:	f7f7 faef 	bl	8003e4e <_isatty>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_isatty_r+0x1a>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_isatty_r+0x1a>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	200006c8 	.word	0x200006c8

0800c880 <_lseek_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d07      	ldr	r5, [pc, #28]	; (800c8a0 <_lseek_r+0x20>)
 800c884:	4604      	mov	r4, r0
 800c886:	4608      	mov	r0, r1
 800c888:	4611      	mov	r1, r2
 800c88a:	2200      	movs	r2, #0
 800c88c:	602a      	str	r2, [r5, #0]
 800c88e:	461a      	mov	r2, r3
 800c890:	f7f7 fae8 	bl	8003e64 <_lseek>
 800c894:	1c43      	adds	r3, r0, #1
 800c896:	d102      	bne.n	800c89e <_lseek_r+0x1e>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	b103      	cbz	r3, 800c89e <_lseek_r+0x1e>
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	200006c8 	.word	0x200006c8

0800c8a4 <_read_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d07      	ldr	r5, [pc, #28]	; (800c8c4 <_read_r+0x20>)
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	602a      	str	r2, [r5, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f7f7 fa76 	bl	8003da4 <_read>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_read_r+0x1e>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_read_r+0x1e>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	200006c8 	.word	0x200006c8

0800c8c8 <atan>:
 800c8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	ec55 4b10 	vmov	r4, r5, d0
 800c8d0:	4bc3      	ldr	r3, [pc, #780]	; (800cbe0 <atan+0x318>)
 800c8d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8d6:	429e      	cmp	r6, r3
 800c8d8:	46ab      	mov	fp, r5
 800c8da:	dd18      	ble.n	800c90e <atan+0x46>
 800c8dc:	4bc1      	ldr	r3, [pc, #772]	; (800cbe4 <atan+0x31c>)
 800c8de:	429e      	cmp	r6, r3
 800c8e0:	dc01      	bgt.n	800c8e6 <atan+0x1e>
 800c8e2:	d109      	bne.n	800c8f8 <atan+0x30>
 800c8e4:	b144      	cbz	r4, 800c8f8 <atan+0x30>
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	f7f3 fced 	bl	80002cc <__adddf3>
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	e006      	b.n	800c906 <atan+0x3e>
 800c8f8:	f1bb 0f00 	cmp.w	fp, #0
 800c8fc:	f300 8131 	bgt.w	800cb62 <atan+0x29a>
 800c900:	a59b      	add	r5, pc, #620	; (adr r5, 800cb70 <atan+0x2a8>)
 800c902:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c906:	ec45 4b10 	vmov	d0, r4, r5
 800c90a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90e:	4bb6      	ldr	r3, [pc, #728]	; (800cbe8 <atan+0x320>)
 800c910:	429e      	cmp	r6, r3
 800c912:	dc14      	bgt.n	800c93e <atan+0x76>
 800c914:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c918:	429e      	cmp	r6, r3
 800c91a:	dc0d      	bgt.n	800c938 <atan+0x70>
 800c91c:	a396      	add	r3, pc, #600	; (adr r3, 800cb78 <atan+0x2b0>)
 800c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c922:	ee10 0a10 	vmov	r0, s0
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fcd0 	bl	80002cc <__adddf3>
 800c92c:	4baf      	ldr	r3, [pc, #700]	; (800cbec <atan+0x324>)
 800c92e:	2200      	movs	r2, #0
 800c930:	f7f4 f912 	bl	8000b58 <__aeabi_dcmpgt>
 800c934:	2800      	cmp	r0, #0
 800c936:	d1e6      	bne.n	800c906 <atan+0x3e>
 800c938:	f04f 3aff 	mov.w	sl, #4294967295
 800c93c:	e02b      	b.n	800c996 <atan+0xce>
 800c93e:	f000 f963 	bl	800cc08 <fabs>
 800c942:	4bab      	ldr	r3, [pc, #684]	; (800cbf0 <atan+0x328>)
 800c944:	429e      	cmp	r6, r3
 800c946:	ec55 4b10 	vmov	r4, r5, d0
 800c94a:	f300 80bf 	bgt.w	800cacc <atan+0x204>
 800c94e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c952:	429e      	cmp	r6, r3
 800c954:	f300 80a0 	bgt.w	800ca98 <atan+0x1d0>
 800c958:	ee10 2a10 	vmov	r2, s0
 800c95c:	ee10 0a10 	vmov	r0, s0
 800c960:	462b      	mov	r3, r5
 800c962:	4629      	mov	r1, r5
 800c964:	f7f3 fcb2 	bl	80002cc <__adddf3>
 800c968:	4ba0      	ldr	r3, [pc, #640]	; (800cbec <atan+0x324>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	f7f3 fcac 	bl	80002c8 <__aeabi_dsub>
 800c970:	2200      	movs	r2, #0
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	f7f3 fca5 	bl	80002cc <__adddf3>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4630      	mov	r0, r6
 800c988:	4639      	mov	r1, r7
 800c98a:	f7f3 ff7f 	bl	800088c <__aeabi_ddiv>
 800c98e:	f04f 0a00 	mov.w	sl, #0
 800c992:	4604      	mov	r4, r0
 800c994:	460d      	mov	r5, r1
 800c996:	4622      	mov	r2, r4
 800c998:	462b      	mov	r3, r5
 800c99a:	4620      	mov	r0, r4
 800c99c:	4629      	mov	r1, r5
 800c99e:	f7f3 fe4b 	bl	8000638 <__aeabi_dmul>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4680      	mov	r8, r0
 800c9a8:	4689      	mov	r9, r1
 800c9aa:	f7f3 fe45 	bl	8000638 <__aeabi_dmul>
 800c9ae:	a374      	add	r3, pc, #464	; (adr r3, 800cb80 <atan+0x2b8>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	4606      	mov	r6, r0
 800c9b6:	460f      	mov	r7, r1
 800c9b8:	f7f3 fe3e 	bl	8000638 <__aeabi_dmul>
 800c9bc:	a372      	add	r3, pc, #456	; (adr r3, 800cb88 <atan+0x2c0>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7f3 fc83 	bl	80002cc <__adddf3>
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	f7f3 fe35 	bl	8000638 <__aeabi_dmul>
 800c9ce:	a370      	add	r3, pc, #448	; (adr r3, 800cb90 <atan+0x2c8>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7f3 fc7a 	bl	80002cc <__adddf3>
 800c9d8:	4632      	mov	r2, r6
 800c9da:	463b      	mov	r3, r7
 800c9dc:	f7f3 fe2c 	bl	8000638 <__aeabi_dmul>
 800c9e0:	a36d      	add	r3, pc, #436	; (adr r3, 800cb98 <atan+0x2d0>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fc71 	bl	80002cc <__adddf3>
 800c9ea:	4632      	mov	r2, r6
 800c9ec:	463b      	mov	r3, r7
 800c9ee:	f7f3 fe23 	bl	8000638 <__aeabi_dmul>
 800c9f2:	a36b      	add	r3, pc, #428	; (adr r3, 800cba0 <atan+0x2d8>)
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	f7f3 fc68 	bl	80002cc <__adddf3>
 800c9fc:	4632      	mov	r2, r6
 800c9fe:	463b      	mov	r3, r7
 800ca00:	f7f3 fe1a 	bl	8000638 <__aeabi_dmul>
 800ca04:	a368      	add	r3, pc, #416	; (adr r3, 800cba8 <atan+0x2e0>)
 800ca06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0a:	f7f3 fc5f 	bl	80002cc <__adddf3>
 800ca0e:	4642      	mov	r2, r8
 800ca10:	464b      	mov	r3, r9
 800ca12:	f7f3 fe11 	bl	8000638 <__aeabi_dmul>
 800ca16:	a366      	add	r3, pc, #408	; (adr r3, 800cbb0 <atan+0x2e8>)
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	4680      	mov	r8, r0
 800ca1e:	4689      	mov	r9, r1
 800ca20:	4630      	mov	r0, r6
 800ca22:	4639      	mov	r1, r7
 800ca24:	f7f3 fe08 	bl	8000638 <__aeabi_dmul>
 800ca28:	a363      	add	r3, pc, #396	; (adr r3, 800cbb8 <atan+0x2f0>)
 800ca2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2e:	f7f3 fc4b 	bl	80002c8 <__aeabi_dsub>
 800ca32:	4632      	mov	r2, r6
 800ca34:	463b      	mov	r3, r7
 800ca36:	f7f3 fdff 	bl	8000638 <__aeabi_dmul>
 800ca3a:	a361      	add	r3, pc, #388	; (adr r3, 800cbc0 <atan+0x2f8>)
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	f7f3 fc42 	bl	80002c8 <__aeabi_dsub>
 800ca44:	4632      	mov	r2, r6
 800ca46:	463b      	mov	r3, r7
 800ca48:	f7f3 fdf6 	bl	8000638 <__aeabi_dmul>
 800ca4c:	a35e      	add	r3, pc, #376	; (adr r3, 800cbc8 <atan+0x300>)
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	f7f3 fc39 	bl	80002c8 <__aeabi_dsub>
 800ca56:	4632      	mov	r2, r6
 800ca58:	463b      	mov	r3, r7
 800ca5a:	f7f3 fded 	bl	8000638 <__aeabi_dmul>
 800ca5e:	a35c      	add	r3, pc, #368	; (adr r3, 800cbd0 <atan+0x308>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	f7f3 fc30 	bl	80002c8 <__aeabi_dsub>
 800ca68:	4632      	mov	r2, r6
 800ca6a:	463b      	mov	r3, r7
 800ca6c:	f7f3 fde4 	bl	8000638 <__aeabi_dmul>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4640      	mov	r0, r8
 800ca76:	4649      	mov	r1, r9
 800ca78:	f7f3 fc28 	bl	80002cc <__adddf3>
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	462b      	mov	r3, r5
 800ca80:	f7f3 fdda 	bl	8000638 <__aeabi_dmul>
 800ca84:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ca88:	4602      	mov	r2, r0
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	d14b      	bne.n	800cb26 <atan+0x25e>
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fc19 	bl	80002c8 <__aeabi_dsub>
 800ca96:	e72c      	b.n	800c8f2 <atan+0x2a>
 800ca98:	ee10 0a10 	vmov	r0, s0
 800ca9c:	4b53      	ldr	r3, [pc, #332]	; (800cbec <atan+0x324>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4629      	mov	r1, r5
 800caa2:	f7f3 fc11 	bl	80002c8 <__aeabi_dsub>
 800caa6:	4b51      	ldr	r3, [pc, #324]	; (800cbec <atan+0x324>)
 800caa8:	4606      	mov	r6, r0
 800caaa:	460f      	mov	r7, r1
 800caac:	2200      	movs	r2, #0
 800caae:	4620      	mov	r0, r4
 800cab0:	4629      	mov	r1, r5
 800cab2:	f7f3 fc0b 	bl	80002cc <__adddf3>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4630      	mov	r0, r6
 800cabc:	4639      	mov	r1, r7
 800cabe:	f7f3 fee5 	bl	800088c <__aeabi_ddiv>
 800cac2:	f04f 0a01 	mov.w	sl, #1
 800cac6:	4604      	mov	r4, r0
 800cac8:	460d      	mov	r5, r1
 800caca:	e764      	b.n	800c996 <atan+0xce>
 800cacc:	4b49      	ldr	r3, [pc, #292]	; (800cbf4 <atan+0x32c>)
 800cace:	429e      	cmp	r6, r3
 800cad0:	da1d      	bge.n	800cb0e <atan+0x246>
 800cad2:	ee10 0a10 	vmov	r0, s0
 800cad6:	4b48      	ldr	r3, [pc, #288]	; (800cbf8 <atan+0x330>)
 800cad8:	2200      	movs	r2, #0
 800cada:	4629      	mov	r1, r5
 800cadc:	f7f3 fbf4 	bl	80002c8 <__aeabi_dsub>
 800cae0:	4b45      	ldr	r3, [pc, #276]	; (800cbf8 <atan+0x330>)
 800cae2:	4606      	mov	r6, r0
 800cae4:	460f      	mov	r7, r1
 800cae6:	2200      	movs	r2, #0
 800cae8:	4620      	mov	r0, r4
 800caea:	4629      	mov	r1, r5
 800caec:	f7f3 fda4 	bl	8000638 <__aeabi_dmul>
 800caf0:	4b3e      	ldr	r3, [pc, #248]	; (800cbec <atan+0x324>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	f7f3 fbea 	bl	80002cc <__adddf3>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4630      	mov	r0, r6
 800cafe:	4639      	mov	r1, r7
 800cb00:	f7f3 fec4 	bl	800088c <__aeabi_ddiv>
 800cb04:	f04f 0a02 	mov.w	sl, #2
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	e743      	b.n	800c996 <atan+0xce>
 800cb0e:	462b      	mov	r3, r5
 800cb10:	ee10 2a10 	vmov	r2, s0
 800cb14:	4939      	ldr	r1, [pc, #228]	; (800cbfc <atan+0x334>)
 800cb16:	2000      	movs	r0, #0
 800cb18:	f7f3 feb8 	bl	800088c <__aeabi_ddiv>
 800cb1c:	f04f 0a03 	mov.w	sl, #3
 800cb20:	4604      	mov	r4, r0
 800cb22:	460d      	mov	r5, r1
 800cb24:	e737      	b.n	800c996 <atan+0xce>
 800cb26:	4b36      	ldr	r3, [pc, #216]	; (800cc00 <atan+0x338>)
 800cb28:	4e36      	ldr	r6, [pc, #216]	; (800cc04 <atan+0x33c>)
 800cb2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cb32:	e9da 2300 	ldrd	r2, r3, [sl]
 800cb36:	f7f3 fbc7 	bl	80002c8 <__aeabi_dsub>
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	462b      	mov	r3, r5
 800cb3e:	f7f3 fbc3 	bl	80002c8 <__aeabi_dsub>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb4a:	f7f3 fbbd 	bl	80002c8 <__aeabi_dsub>
 800cb4e:	f1bb 0f00 	cmp.w	fp, #0
 800cb52:	4604      	mov	r4, r0
 800cb54:	460d      	mov	r5, r1
 800cb56:	f6bf aed6 	bge.w	800c906 <atan+0x3e>
 800cb5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb5e:	461d      	mov	r5, r3
 800cb60:	e6d1      	b.n	800c906 <atan+0x3e>
 800cb62:	a51d      	add	r5, pc, #116	; (adr r5, 800cbd8 <atan+0x310>)
 800cb64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb68:	e6cd      	b.n	800c906 <atan+0x3e>
 800cb6a:	bf00      	nop
 800cb6c:	f3af 8000 	nop.w
 800cb70:	54442d18 	.word	0x54442d18
 800cb74:	bff921fb 	.word	0xbff921fb
 800cb78:	8800759c 	.word	0x8800759c
 800cb7c:	7e37e43c 	.word	0x7e37e43c
 800cb80:	e322da11 	.word	0xe322da11
 800cb84:	3f90ad3a 	.word	0x3f90ad3a
 800cb88:	24760deb 	.word	0x24760deb
 800cb8c:	3fa97b4b 	.word	0x3fa97b4b
 800cb90:	a0d03d51 	.word	0xa0d03d51
 800cb94:	3fb10d66 	.word	0x3fb10d66
 800cb98:	c54c206e 	.word	0xc54c206e
 800cb9c:	3fb745cd 	.word	0x3fb745cd
 800cba0:	920083ff 	.word	0x920083ff
 800cba4:	3fc24924 	.word	0x3fc24924
 800cba8:	5555550d 	.word	0x5555550d
 800cbac:	3fd55555 	.word	0x3fd55555
 800cbb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cbb4:	bfa2b444 	.word	0xbfa2b444
 800cbb8:	52defd9a 	.word	0x52defd9a
 800cbbc:	3fadde2d 	.word	0x3fadde2d
 800cbc0:	af749a6d 	.word	0xaf749a6d
 800cbc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cbc8:	fe231671 	.word	0xfe231671
 800cbcc:	3fbc71c6 	.word	0x3fbc71c6
 800cbd0:	9998ebc4 	.word	0x9998ebc4
 800cbd4:	3fc99999 	.word	0x3fc99999
 800cbd8:	54442d18 	.word	0x54442d18
 800cbdc:	3ff921fb 	.word	0x3ff921fb
 800cbe0:	440fffff 	.word	0x440fffff
 800cbe4:	7ff00000 	.word	0x7ff00000
 800cbe8:	3fdbffff 	.word	0x3fdbffff
 800cbec:	3ff00000 	.word	0x3ff00000
 800cbf0:	3ff2ffff 	.word	0x3ff2ffff
 800cbf4:	40038000 	.word	0x40038000
 800cbf8:	3ff80000 	.word	0x3ff80000
 800cbfc:	bff00000 	.word	0xbff00000
 800cc00:	0800e238 	.word	0x0800e238
 800cc04:	0800e218 	.word	0x0800e218

0800cc08 <fabs>:
 800cc08:	ec51 0b10 	vmov	r0, r1, d0
 800cc0c:	ee10 2a10 	vmov	r2, s0
 800cc10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc14:	ec43 2b10 	vmov	d0, r2, r3
 800cc18:	4770      	bx	lr
 800cc1a:	0000      	movs	r0, r0
 800cc1c:	0000      	movs	r0, r0
	...

0800cc20 <tan>:
 800cc20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc22:	ec53 2b10 	vmov	r2, r3, d0
 800cc26:	4816      	ldr	r0, [pc, #88]	; (800cc80 <tan+0x60>)
 800cc28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc2c:	4281      	cmp	r1, r0
 800cc2e:	dc07      	bgt.n	800cc40 <tan+0x20>
 800cc30:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800cc78 <tan+0x58>
 800cc34:	2001      	movs	r0, #1
 800cc36:	b005      	add	sp, #20
 800cc38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc3c:	f000 bd80 	b.w	800d740 <__kernel_tan>
 800cc40:	4810      	ldr	r0, [pc, #64]	; (800cc84 <tan+0x64>)
 800cc42:	4281      	cmp	r1, r0
 800cc44:	dd09      	ble.n	800cc5a <tan+0x3a>
 800cc46:	ee10 0a10 	vmov	r0, s0
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	f7f3 fb3c 	bl	80002c8 <__aeabi_dsub>
 800cc50:	ec41 0b10 	vmov	d0, r0, r1
 800cc54:	b005      	add	sp, #20
 800cc56:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc5a:	4668      	mov	r0, sp
 800cc5c:	f000 f814 	bl	800cc88 <__ieee754_rem_pio2>
 800cc60:	0040      	lsls	r0, r0, #1
 800cc62:	f000 0002 	and.w	r0, r0, #2
 800cc66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc6a:	ed9d 0b00 	vldr	d0, [sp]
 800cc6e:	f1c0 0001 	rsb	r0, r0, #1
 800cc72:	f000 fd65 	bl	800d740 <__kernel_tan>
 800cc76:	e7ed      	b.n	800cc54 <tan+0x34>
	...
 800cc80:	3fe921fb 	.word	0x3fe921fb
 800cc84:	7fefffff 	.word	0x7fefffff

0800cc88 <__ieee754_rem_pio2>:
 800cc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8c:	ed2d 8b02 	vpush	{d8}
 800cc90:	ec55 4b10 	vmov	r4, r5, d0
 800cc94:	4bca      	ldr	r3, [pc, #808]	; (800cfc0 <__ieee754_rem_pio2+0x338>)
 800cc96:	b08b      	sub	sp, #44	; 0x2c
 800cc98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cc9c:	4598      	cmp	r8, r3
 800cc9e:	4682      	mov	sl, r0
 800cca0:	9502      	str	r5, [sp, #8]
 800cca2:	dc08      	bgt.n	800ccb6 <__ieee754_rem_pio2+0x2e>
 800cca4:	2200      	movs	r2, #0
 800cca6:	2300      	movs	r3, #0
 800cca8:	ed80 0b00 	vstr	d0, [r0]
 800ccac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ccb0:	f04f 0b00 	mov.w	fp, #0
 800ccb4:	e028      	b.n	800cd08 <__ieee754_rem_pio2+0x80>
 800ccb6:	4bc3      	ldr	r3, [pc, #780]	; (800cfc4 <__ieee754_rem_pio2+0x33c>)
 800ccb8:	4598      	cmp	r8, r3
 800ccba:	dc78      	bgt.n	800cdae <__ieee754_rem_pio2+0x126>
 800ccbc:	9b02      	ldr	r3, [sp, #8]
 800ccbe:	4ec2      	ldr	r6, [pc, #776]	; (800cfc8 <__ieee754_rem_pio2+0x340>)
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	ee10 0a10 	vmov	r0, s0
 800ccc6:	a3b0      	add	r3, pc, #704	; (adr r3, 800cf88 <__ieee754_rem_pio2+0x300>)
 800ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cccc:	4629      	mov	r1, r5
 800ccce:	dd39      	ble.n	800cd44 <__ieee754_rem_pio2+0xbc>
 800ccd0:	f7f3 fafa 	bl	80002c8 <__aeabi_dsub>
 800ccd4:	45b0      	cmp	r8, r6
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	d01b      	beq.n	800cd14 <__ieee754_rem_pio2+0x8c>
 800ccdc:	a3ac      	add	r3, pc, #688	; (adr r3, 800cf90 <__ieee754_rem_pio2+0x308>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 faf1 	bl	80002c8 <__aeabi_dsub>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	e9ca 2300 	strd	r2, r3, [sl]
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 fae9 	bl	80002c8 <__aeabi_dsub>
 800ccf6:	a3a6      	add	r3, pc, #664	; (adr r3, 800cf90 <__ieee754_rem_pio2+0x308>)
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f7f3 fae4 	bl	80002c8 <__aeabi_dsub>
 800cd00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd04:	f04f 0b01 	mov.w	fp, #1
 800cd08:	4658      	mov	r0, fp
 800cd0a:	b00b      	add	sp, #44	; 0x2c
 800cd0c:	ecbd 8b02 	vpop	{d8}
 800cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd14:	a3a0      	add	r3, pc, #640	; (adr r3, 800cf98 <__ieee754_rem_pio2+0x310>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	f7f3 fad5 	bl	80002c8 <__aeabi_dsub>
 800cd1e:	a3a0      	add	r3, pc, #640	; (adr r3, 800cfa0 <__ieee754_rem_pio2+0x318>)
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	4604      	mov	r4, r0
 800cd26:	460d      	mov	r5, r1
 800cd28:	f7f3 face 	bl	80002c8 <__aeabi_dsub>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	e9ca 2300 	strd	r2, r3, [sl]
 800cd34:	4620      	mov	r0, r4
 800cd36:	4629      	mov	r1, r5
 800cd38:	f7f3 fac6 	bl	80002c8 <__aeabi_dsub>
 800cd3c:	a398      	add	r3, pc, #608	; (adr r3, 800cfa0 <__ieee754_rem_pio2+0x318>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	e7db      	b.n	800ccfc <__ieee754_rem_pio2+0x74>
 800cd44:	f7f3 fac2 	bl	80002cc <__adddf3>
 800cd48:	45b0      	cmp	r8, r6
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	d016      	beq.n	800cd7e <__ieee754_rem_pio2+0xf6>
 800cd50:	a38f      	add	r3, pc, #572	; (adr r3, 800cf90 <__ieee754_rem_pio2+0x308>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 fab9 	bl	80002cc <__adddf3>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	e9ca 2300 	strd	r2, r3, [sl]
 800cd62:	4620      	mov	r0, r4
 800cd64:	4629      	mov	r1, r5
 800cd66:	f7f3 faaf 	bl	80002c8 <__aeabi_dsub>
 800cd6a:	a389      	add	r3, pc, #548	; (adr r3, 800cf90 <__ieee754_rem_pio2+0x308>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7f3 faac 	bl	80002cc <__adddf3>
 800cd74:	f04f 3bff 	mov.w	fp, #4294967295
 800cd78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd7c:	e7c4      	b.n	800cd08 <__ieee754_rem_pio2+0x80>
 800cd7e:	a386      	add	r3, pc, #536	; (adr r3, 800cf98 <__ieee754_rem_pio2+0x310>)
 800cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd84:	f7f3 faa2 	bl	80002cc <__adddf3>
 800cd88:	a385      	add	r3, pc, #532	; (adr r3, 800cfa0 <__ieee754_rem_pio2+0x318>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	4604      	mov	r4, r0
 800cd90:	460d      	mov	r5, r1
 800cd92:	f7f3 fa9b 	bl	80002cc <__adddf3>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	e9ca 2300 	strd	r2, r3, [sl]
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fa91 	bl	80002c8 <__aeabi_dsub>
 800cda6:	a37e      	add	r3, pc, #504	; (adr r3, 800cfa0 <__ieee754_rem_pio2+0x318>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	e7e0      	b.n	800cd70 <__ieee754_rem_pio2+0xe8>
 800cdae:	4b87      	ldr	r3, [pc, #540]	; (800cfcc <__ieee754_rem_pio2+0x344>)
 800cdb0:	4598      	cmp	r8, r3
 800cdb2:	f300 80d9 	bgt.w	800cf68 <__ieee754_rem_pio2+0x2e0>
 800cdb6:	f7ff ff27 	bl	800cc08 <fabs>
 800cdba:	ec55 4b10 	vmov	r4, r5, d0
 800cdbe:	ee10 0a10 	vmov	r0, s0
 800cdc2:	a379      	add	r3, pc, #484	; (adr r3, 800cfa8 <__ieee754_rem_pio2+0x320>)
 800cdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc8:	4629      	mov	r1, r5
 800cdca:	f7f3 fc35 	bl	8000638 <__aeabi_dmul>
 800cdce:	4b80      	ldr	r3, [pc, #512]	; (800cfd0 <__ieee754_rem_pio2+0x348>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f7f3 fa7b 	bl	80002cc <__adddf3>
 800cdd6:	f7f3 fedf 	bl	8000b98 <__aeabi_d2iz>
 800cdda:	4683      	mov	fp, r0
 800cddc:	f7f3 fbc2 	bl	8000564 <__aeabi_i2d>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	ec43 2b18 	vmov	d8, r2, r3
 800cde8:	a367      	add	r3, pc, #412	; (adr r3, 800cf88 <__ieee754_rem_pio2+0x300>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7f3 fc23 	bl	8000638 <__aeabi_dmul>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f7f3 fa65 	bl	80002c8 <__aeabi_dsub>
 800cdfe:	a364      	add	r3, pc, #400	; (adr r3, 800cf90 <__ieee754_rem_pio2+0x308>)
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	4606      	mov	r6, r0
 800ce06:	460f      	mov	r7, r1
 800ce08:	ec51 0b18 	vmov	r0, r1, d8
 800ce0c:	f7f3 fc14 	bl	8000638 <__aeabi_dmul>
 800ce10:	f1bb 0f1f 	cmp.w	fp, #31
 800ce14:	4604      	mov	r4, r0
 800ce16:	460d      	mov	r5, r1
 800ce18:	dc0d      	bgt.n	800ce36 <__ieee754_rem_pio2+0x1ae>
 800ce1a:	4b6e      	ldr	r3, [pc, #440]	; (800cfd4 <__ieee754_rem_pio2+0x34c>)
 800ce1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ce20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce24:	4543      	cmp	r3, r8
 800ce26:	d006      	beq.n	800ce36 <__ieee754_rem_pio2+0x1ae>
 800ce28:	4622      	mov	r2, r4
 800ce2a:	462b      	mov	r3, r5
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	4639      	mov	r1, r7
 800ce30:	f7f3 fa4a 	bl	80002c8 <__aeabi_dsub>
 800ce34:	e00f      	b.n	800ce56 <__ieee754_rem_pio2+0x1ce>
 800ce36:	462b      	mov	r3, r5
 800ce38:	4622      	mov	r2, r4
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	4639      	mov	r1, r7
 800ce3e:	f7f3 fa43 	bl	80002c8 <__aeabi_dsub>
 800ce42:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ce46:	9303      	str	r3, [sp, #12]
 800ce48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ce50:	f1b8 0f10 	cmp.w	r8, #16
 800ce54:	dc02      	bgt.n	800ce5c <__ieee754_rem_pio2+0x1d4>
 800ce56:	e9ca 0100 	strd	r0, r1, [sl]
 800ce5a:	e039      	b.n	800ced0 <__ieee754_rem_pio2+0x248>
 800ce5c:	a34e      	add	r3, pc, #312	; (adr r3, 800cf98 <__ieee754_rem_pio2+0x310>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	ec51 0b18 	vmov	r0, r1, d8
 800ce66:	f7f3 fbe7 	bl	8000638 <__aeabi_dmul>
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	460d      	mov	r5, r1
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4630      	mov	r0, r6
 800ce74:	4639      	mov	r1, r7
 800ce76:	f7f3 fa27 	bl	80002c8 <__aeabi_dsub>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	4680      	mov	r8, r0
 800ce80:	4689      	mov	r9, r1
 800ce82:	4630      	mov	r0, r6
 800ce84:	4639      	mov	r1, r7
 800ce86:	f7f3 fa1f 	bl	80002c8 <__aeabi_dsub>
 800ce8a:	4622      	mov	r2, r4
 800ce8c:	462b      	mov	r3, r5
 800ce8e:	f7f3 fa1b 	bl	80002c8 <__aeabi_dsub>
 800ce92:	a343      	add	r3, pc, #268	; (adr r3, 800cfa0 <__ieee754_rem_pio2+0x318>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	4604      	mov	r4, r0
 800ce9a:	460d      	mov	r5, r1
 800ce9c:	ec51 0b18 	vmov	r0, r1, d8
 800cea0:	f7f3 fbca 	bl	8000638 <__aeabi_dmul>
 800cea4:	4622      	mov	r2, r4
 800cea6:	462b      	mov	r3, r5
 800cea8:	f7f3 fa0e 	bl	80002c8 <__aeabi_dsub>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7f3 fa06 	bl	80002c8 <__aeabi_dsub>
 800cebc:	9a03      	ldr	r2, [sp, #12]
 800cebe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	2b31      	cmp	r3, #49	; 0x31
 800cec6:	dc24      	bgt.n	800cf12 <__ieee754_rem_pio2+0x28a>
 800cec8:	e9ca 0100 	strd	r0, r1, [sl]
 800cecc:	4646      	mov	r6, r8
 800cece:	464f      	mov	r7, r9
 800ced0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ced4:	4630      	mov	r0, r6
 800ced6:	4642      	mov	r2, r8
 800ced8:	464b      	mov	r3, r9
 800ceda:	4639      	mov	r1, r7
 800cedc:	f7f3 f9f4 	bl	80002c8 <__aeabi_dsub>
 800cee0:	462b      	mov	r3, r5
 800cee2:	4622      	mov	r2, r4
 800cee4:	f7f3 f9f0 	bl	80002c8 <__aeabi_dsub>
 800cee8:	9b02      	ldr	r3, [sp, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cef0:	f6bf af0a 	bge.w	800cd08 <__ieee754_rem_pio2+0x80>
 800cef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cef8:	f8ca 3004 	str.w	r3, [sl, #4]
 800cefc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf00:	f8ca 8000 	str.w	r8, [sl]
 800cf04:	f8ca 0008 	str.w	r0, [sl, #8]
 800cf08:	f8ca 300c 	str.w	r3, [sl, #12]
 800cf0c:	f1cb 0b00 	rsb	fp, fp, #0
 800cf10:	e6fa      	b.n	800cd08 <__ieee754_rem_pio2+0x80>
 800cf12:	a327      	add	r3, pc, #156	; (adr r3, 800cfb0 <__ieee754_rem_pio2+0x328>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	ec51 0b18 	vmov	r0, r1, d8
 800cf1c:	f7f3 fb8c 	bl	8000638 <__aeabi_dmul>
 800cf20:	4604      	mov	r4, r0
 800cf22:	460d      	mov	r5, r1
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4640      	mov	r0, r8
 800cf2a:	4649      	mov	r1, r9
 800cf2c:	f7f3 f9cc 	bl	80002c8 <__aeabi_dsub>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4606      	mov	r6, r0
 800cf36:	460f      	mov	r7, r1
 800cf38:	4640      	mov	r0, r8
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	f7f3 f9c4 	bl	80002c8 <__aeabi_dsub>
 800cf40:	4622      	mov	r2, r4
 800cf42:	462b      	mov	r3, r5
 800cf44:	f7f3 f9c0 	bl	80002c8 <__aeabi_dsub>
 800cf48:	a31b      	add	r3, pc, #108	; (adr r3, 800cfb8 <__ieee754_rem_pio2+0x330>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460d      	mov	r5, r1
 800cf52:	ec51 0b18 	vmov	r0, r1, d8
 800cf56:	f7f3 fb6f 	bl	8000638 <__aeabi_dmul>
 800cf5a:	4622      	mov	r2, r4
 800cf5c:	462b      	mov	r3, r5
 800cf5e:	f7f3 f9b3 	bl	80002c8 <__aeabi_dsub>
 800cf62:	4604      	mov	r4, r0
 800cf64:	460d      	mov	r5, r1
 800cf66:	e75f      	b.n	800ce28 <__ieee754_rem_pio2+0x1a0>
 800cf68:	4b1b      	ldr	r3, [pc, #108]	; (800cfd8 <__ieee754_rem_pio2+0x350>)
 800cf6a:	4598      	cmp	r8, r3
 800cf6c:	dd36      	ble.n	800cfdc <__ieee754_rem_pio2+0x354>
 800cf6e:	ee10 2a10 	vmov	r2, s0
 800cf72:	462b      	mov	r3, r5
 800cf74:	4620      	mov	r0, r4
 800cf76:	4629      	mov	r1, r5
 800cf78:	f7f3 f9a6 	bl	80002c8 <__aeabi_dsub>
 800cf7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf80:	e9ca 0100 	strd	r0, r1, [sl]
 800cf84:	e694      	b.n	800ccb0 <__ieee754_rem_pio2+0x28>
 800cf86:	bf00      	nop
 800cf88:	54400000 	.word	0x54400000
 800cf8c:	3ff921fb 	.word	0x3ff921fb
 800cf90:	1a626331 	.word	0x1a626331
 800cf94:	3dd0b461 	.word	0x3dd0b461
 800cf98:	1a600000 	.word	0x1a600000
 800cf9c:	3dd0b461 	.word	0x3dd0b461
 800cfa0:	2e037073 	.word	0x2e037073
 800cfa4:	3ba3198a 	.word	0x3ba3198a
 800cfa8:	6dc9c883 	.word	0x6dc9c883
 800cfac:	3fe45f30 	.word	0x3fe45f30
 800cfb0:	2e000000 	.word	0x2e000000
 800cfb4:	3ba3198a 	.word	0x3ba3198a
 800cfb8:	252049c1 	.word	0x252049c1
 800cfbc:	397b839a 	.word	0x397b839a
 800cfc0:	3fe921fb 	.word	0x3fe921fb
 800cfc4:	4002d97b 	.word	0x4002d97b
 800cfc8:	3ff921fb 	.word	0x3ff921fb
 800cfcc:	413921fb 	.word	0x413921fb
 800cfd0:	3fe00000 	.word	0x3fe00000
 800cfd4:	0800e258 	.word	0x0800e258
 800cfd8:	7fefffff 	.word	0x7fefffff
 800cfdc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cfe0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cfe4:	ee10 0a10 	vmov	r0, s0
 800cfe8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800cfec:	ee10 6a10 	vmov	r6, s0
 800cff0:	460f      	mov	r7, r1
 800cff2:	f7f3 fdd1 	bl	8000b98 <__aeabi_d2iz>
 800cff6:	f7f3 fab5 	bl	8000564 <__aeabi_i2d>
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	4630      	mov	r0, r6
 800d000:	4639      	mov	r1, r7
 800d002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d006:	f7f3 f95f 	bl	80002c8 <__aeabi_dsub>
 800d00a:	4b23      	ldr	r3, [pc, #140]	; (800d098 <__ieee754_rem_pio2+0x410>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	f7f3 fb13 	bl	8000638 <__aeabi_dmul>
 800d012:	460f      	mov	r7, r1
 800d014:	4606      	mov	r6, r0
 800d016:	f7f3 fdbf 	bl	8000b98 <__aeabi_d2iz>
 800d01a:	f7f3 faa3 	bl	8000564 <__aeabi_i2d>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4630      	mov	r0, r6
 800d024:	4639      	mov	r1, r7
 800d026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d02a:	f7f3 f94d 	bl	80002c8 <__aeabi_dsub>
 800d02e:	4b1a      	ldr	r3, [pc, #104]	; (800d098 <__ieee754_rem_pio2+0x410>)
 800d030:	2200      	movs	r2, #0
 800d032:	f7f3 fb01 	bl	8000638 <__aeabi_dmul>
 800d036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d03a:	ad04      	add	r5, sp, #16
 800d03c:	f04f 0803 	mov.w	r8, #3
 800d040:	46a9      	mov	r9, r5
 800d042:	2600      	movs	r6, #0
 800d044:	2700      	movs	r7, #0
 800d046:	4632      	mov	r2, r6
 800d048:	463b      	mov	r3, r7
 800d04a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d04e:	46c3      	mov	fp, r8
 800d050:	3d08      	subs	r5, #8
 800d052:	f108 38ff 	add.w	r8, r8, #4294967295
 800d056:	f7f3 fd57 	bl	8000b08 <__aeabi_dcmpeq>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d1f3      	bne.n	800d046 <__ieee754_rem_pio2+0x3be>
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <__ieee754_rem_pio2+0x414>)
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	2302      	movs	r3, #2
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	4622      	mov	r2, r4
 800d068:	465b      	mov	r3, fp
 800d06a:	4651      	mov	r1, sl
 800d06c:	4648      	mov	r0, r9
 800d06e:	f000 f817 	bl	800d0a0 <__kernel_rem_pio2>
 800d072:	9b02      	ldr	r3, [sp, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	4683      	mov	fp, r0
 800d078:	f6bf ae46 	bge.w	800cd08 <__ieee754_rem_pio2+0x80>
 800d07c:	e9da 2100 	ldrd	r2, r1, [sl]
 800d080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d084:	e9ca 2300 	strd	r2, r3, [sl]
 800d088:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d08c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d090:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d094:	e73a      	b.n	800cf0c <__ieee754_rem_pio2+0x284>
 800d096:	bf00      	nop
 800d098:	41700000 	.word	0x41700000
 800d09c:	0800e2d8 	.word	0x0800e2d8

0800d0a0 <__kernel_rem_pio2>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	ed2d 8b02 	vpush	{d8}
 800d0a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d0ac:	f112 0f14 	cmn.w	r2, #20
 800d0b0:	9308      	str	r3, [sp, #32]
 800d0b2:	9101      	str	r1, [sp, #4]
 800d0b4:	4bc4      	ldr	r3, [pc, #784]	; (800d3c8 <__kernel_rem_pio2+0x328>)
 800d0b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d0b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800d0ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0be:	9302      	str	r3, [sp, #8]
 800d0c0:	9b08      	ldr	r3, [sp, #32]
 800d0c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d0c6:	bfa8      	it	ge
 800d0c8:	1ed4      	subge	r4, r2, #3
 800d0ca:	9306      	str	r3, [sp, #24]
 800d0cc:	bfb2      	itee	lt
 800d0ce:	2400      	movlt	r4, #0
 800d0d0:	2318      	movge	r3, #24
 800d0d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d0d6:	f06f 0317 	mvn.w	r3, #23
 800d0da:	fb04 3303 	mla	r3, r4, r3, r3
 800d0de:	eb03 0a02 	add.w	sl, r3, r2
 800d0e2:	9b02      	ldr	r3, [sp, #8]
 800d0e4:	9a06      	ldr	r2, [sp, #24]
 800d0e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d3b8 <__kernel_rem_pio2+0x318>
 800d0ea:	eb03 0802 	add.w	r8, r3, r2
 800d0ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d0f0:	1aa7      	subs	r7, r4, r2
 800d0f2:	ae22      	add	r6, sp, #136	; 0x88
 800d0f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d0f8:	2500      	movs	r5, #0
 800d0fa:	4545      	cmp	r5, r8
 800d0fc:	dd13      	ble.n	800d126 <__kernel_rem_pio2+0x86>
 800d0fe:	9b08      	ldr	r3, [sp, #32]
 800d100:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d3b8 <__kernel_rem_pio2+0x318>
 800d104:	aa22      	add	r2, sp, #136	; 0x88
 800d106:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d10a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d10e:	f04f 0800 	mov.w	r8, #0
 800d112:	9b02      	ldr	r3, [sp, #8]
 800d114:	4598      	cmp	r8, r3
 800d116:	dc2f      	bgt.n	800d178 <__kernel_rem_pio2+0xd8>
 800d118:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d11c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d120:	462f      	mov	r7, r5
 800d122:	2600      	movs	r6, #0
 800d124:	e01b      	b.n	800d15e <__kernel_rem_pio2+0xbe>
 800d126:	42ef      	cmn	r7, r5
 800d128:	d407      	bmi.n	800d13a <__kernel_rem_pio2+0x9a>
 800d12a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d12e:	f7f3 fa19 	bl	8000564 <__aeabi_i2d>
 800d132:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d136:	3501      	adds	r5, #1
 800d138:	e7df      	b.n	800d0fa <__kernel_rem_pio2+0x5a>
 800d13a:	ec51 0b18 	vmov	r0, r1, d8
 800d13e:	e7f8      	b.n	800d132 <__kernel_rem_pio2+0x92>
 800d140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d144:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d148:	f7f3 fa76 	bl	8000638 <__aeabi_dmul>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d154:	f7f3 f8ba 	bl	80002cc <__adddf3>
 800d158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d15c:	3601      	adds	r6, #1
 800d15e:	9b06      	ldr	r3, [sp, #24]
 800d160:	429e      	cmp	r6, r3
 800d162:	f1a7 0708 	sub.w	r7, r7, #8
 800d166:	ddeb      	ble.n	800d140 <__kernel_rem_pio2+0xa0>
 800d168:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d16c:	f108 0801 	add.w	r8, r8, #1
 800d170:	ecab 7b02 	vstmia	fp!, {d7}
 800d174:	3508      	adds	r5, #8
 800d176:	e7cc      	b.n	800d112 <__kernel_rem_pio2+0x72>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	aa0e      	add	r2, sp, #56	; 0x38
 800d17c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d180:	930d      	str	r3, [sp, #52]	; 0x34
 800d182:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d188:	9c02      	ldr	r4, [sp, #8]
 800d18a:	930c      	str	r3, [sp, #48]	; 0x30
 800d18c:	00e3      	lsls	r3, r4, #3
 800d18e:	930a      	str	r3, [sp, #40]	; 0x28
 800d190:	ab9a      	add	r3, sp, #616	; 0x268
 800d192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d196:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d19a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d19e:	ab72      	add	r3, sp, #456	; 0x1c8
 800d1a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d1a4:	46c3      	mov	fp, r8
 800d1a6:	46a1      	mov	r9, r4
 800d1a8:	f1b9 0f00 	cmp.w	r9, #0
 800d1ac:	f1a5 0508 	sub.w	r5, r5, #8
 800d1b0:	dc77      	bgt.n	800d2a2 <__kernel_rem_pio2+0x202>
 800d1b2:	ec47 6b10 	vmov	d0, r6, r7
 800d1b6:	4650      	mov	r0, sl
 800d1b8:	f000 fd4e 	bl	800dc58 <scalbn>
 800d1bc:	ec57 6b10 	vmov	r6, r7, d0
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d1c6:	ee10 0a10 	vmov	r0, s0
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f7f3 fa34 	bl	8000638 <__aeabi_dmul>
 800d1d0:	ec41 0b10 	vmov	d0, r0, r1
 800d1d4:	f000 fcc0 	bl	800db58 <floor>
 800d1d8:	4b7c      	ldr	r3, [pc, #496]	; (800d3cc <__kernel_rem_pio2+0x32c>)
 800d1da:	ec51 0b10 	vmov	r0, r1, d0
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f7f3 fa2a 	bl	8000638 <__aeabi_dmul>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7f3 f86c 	bl	80002c8 <__aeabi_dsub>
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	f7f3 fcd0 	bl	8000b98 <__aeabi_d2iz>
 800d1f8:	9004      	str	r0, [sp, #16]
 800d1fa:	f7f3 f9b3 	bl	8000564 <__aeabi_i2d>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4630      	mov	r0, r6
 800d204:	4639      	mov	r1, r7
 800d206:	f7f3 f85f 	bl	80002c8 <__aeabi_dsub>
 800d20a:	f1ba 0f00 	cmp.w	sl, #0
 800d20e:	4606      	mov	r6, r0
 800d210:	460f      	mov	r7, r1
 800d212:	dd6d      	ble.n	800d2f0 <__kernel_rem_pio2+0x250>
 800d214:	1e62      	subs	r2, r4, #1
 800d216:	ab0e      	add	r3, sp, #56	; 0x38
 800d218:	9d04      	ldr	r5, [sp, #16]
 800d21a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d21e:	f1ca 0118 	rsb	r1, sl, #24
 800d222:	fa40 f301 	asr.w	r3, r0, r1
 800d226:	441d      	add	r5, r3
 800d228:	408b      	lsls	r3, r1
 800d22a:	1ac0      	subs	r0, r0, r3
 800d22c:	ab0e      	add	r3, sp, #56	; 0x38
 800d22e:	9504      	str	r5, [sp, #16]
 800d230:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d234:	f1ca 0317 	rsb	r3, sl, #23
 800d238:	fa40 fb03 	asr.w	fp, r0, r3
 800d23c:	f1bb 0f00 	cmp.w	fp, #0
 800d240:	dd65      	ble.n	800d30e <__kernel_rem_pio2+0x26e>
 800d242:	9b04      	ldr	r3, [sp, #16]
 800d244:	2200      	movs	r2, #0
 800d246:	3301      	adds	r3, #1
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	4615      	mov	r5, r2
 800d24c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d250:	4294      	cmp	r4, r2
 800d252:	f300 809c 	bgt.w	800d38e <__kernel_rem_pio2+0x2ee>
 800d256:	f1ba 0f00 	cmp.w	sl, #0
 800d25a:	dd07      	ble.n	800d26c <__kernel_rem_pio2+0x1cc>
 800d25c:	f1ba 0f01 	cmp.w	sl, #1
 800d260:	f000 80c0 	beq.w	800d3e4 <__kernel_rem_pio2+0x344>
 800d264:	f1ba 0f02 	cmp.w	sl, #2
 800d268:	f000 80c6 	beq.w	800d3f8 <__kernel_rem_pio2+0x358>
 800d26c:	f1bb 0f02 	cmp.w	fp, #2
 800d270:	d14d      	bne.n	800d30e <__kernel_rem_pio2+0x26e>
 800d272:	4632      	mov	r2, r6
 800d274:	463b      	mov	r3, r7
 800d276:	4956      	ldr	r1, [pc, #344]	; (800d3d0 <__kernel_rem_pio2+0x330>)
 800d278:	2000      	movs	r0, #0
 800d27a:	f7f3 f825 	bl	80002c8 <__aeabi_dsub>
 800d27e:	4606      	mov	r6, r0
 800d280:	460f      	mov	r7, r1
 800d282:	2d00      	cmp	r5, #0
 800d284:	d043      	beq.n	800d30e <__kernel_rem_pio2+0x26e>
 800d286:	4650      	mov	r0, sl
 800d288:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d3c0 <__kernel_rem_pio2+0x320>
 800d28c:	f000 fce4 	bl	800dc58 <scalbn>
 800d290:	4630      	mov	r0, r6
 800d292:	4639      	mov	r1, r7
 800d294:	ec53 2b10 	vmov	r2, r3, d0
 800d298:	f7f3 f816 	bl	80002c8 <__aeabi_dsub>
 800d29c:	4606      	mov	r6, r0
 800d29e:	460f      	mov	r7, r1
 800d2a0:	e035      	b.n	800d30e <__kernel_rem_pio2+0x26e>
 800d2a2:	4b4c      	ldr	r3, [pc, #304]	; (800d3d4 <__kernel_rem_pio2+0x334>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	f7f3 f9c5 	bl	8000638 <__aeabi_dmul>
 800d2ae:	f7f3 fc73 	bl	8000b98 <__aeabi_d2iz>
 800d2b2:	f7f3 f957 	bl	8000564 <__aeabi_i2d>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	ec43 2b18 	vmov	d8, r2, r3
 800d2be:	4b46      	ldr	r3, [pc, #280]	; (800d3d8 <__kernel_rem_pio2+0x338>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f7f3 f9b9 	bl	8000638 <__aeabi_dmul>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	4639      	mov	r1, r7
 800d2ce:	f7f2 fffb 	bl	80002c8 <__aeabi_dsub>
 800d2d2:	f7f3 fc61 	bl	8000b98 <__aeabi_d2iz>
 800d2d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2da:	f84b 0b04 	str.w	r0, [fp], #4
 800d2de:	ec51 0b18 	vmov	r0, r1, d8
 800d2e2:	f7f2 fff3 	bl	80002cc <__adddf3>
 800d2e6:	f109 39ff 	add.w	r9, r9, #4294967295
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	460f      	mov	r7, r1
 800d2ee:	e75b      	b.n	800d1a8 <__kernel_rem_pio2+0x108>
 800d2f0:	d106      	bne.n	800d300 <__kernel_rem_pio2+0x260>
 800d2f2:	1e63      	subs	r3, r4, #1
 800d2f4:	aa0e      	add	r2, sp, #56	; 0x38
 800d2f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d2fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d2fe:	e79d      	b.n	800d23c <__kernel_rem_pio2+0x19c>
 800d300:	4b36      	ldr	r3, [pc, #216]	; (800d3dc <__kernel_rem_pio2+0x33c>)
 800d302:	2200      	movs	r2, #0
 800d304:	f7f3 fc1e 	bl	8000b44 <__aeabi_dcmpge>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d13d      	bne.n	800d388 <__kernel_rem_pio2+0x2e8>
 800d30c:	4683      	mov	fp, r0
 800d30e:	2200      	movs	r2, #0
 800d310:	2300      	movs	r3, #0
 800d312:	4630      	mov	r0, r6
 800d314:	4639      	mov	r1, r7
 800d316:	f7f3 fbf7 	bl	8000b08 <__aeabi_dcmpeq>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f000 80c0 	beq.w	800d4a0 <__kernel_rem_pio2+0x400>
 800d320:	1e65      	subs	r5, r4, #1
 800d322:	462b      	mov	r3, r5
 800d324:	2200      	movs	r2, #0
 800d326:	9902      	ldr	r1, [sp, #8]
 800d328:	428b      	cmp	r3, r1
 800d32a:	da6c      	bge.n	800d406 <__kernel_rem_pio2+0x366>
 800d32c:	2a00      	cmp	r2, #0
 800d32e:	f000 8089 	beq.w	800d444 <__kernel_rem_pio2+0x3a4>
 800d332:	ab0e      	add	r3, sp, #56	; 0x38
 800d334:	f1aa 0a18 	sub.w	sl, sl, #24
 800d338:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 80ad 	beq.w	800d49c <__kernel_rem_pio2+0x3fc>
 800d342:	4650      	mov	r0, sl
 800d344:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d3c0 <__kernel_rem_pio2+0x320>
 800d348:	f000 fc86 	bl	800dc58 <scalbn>
 800d34c:	ab9a      	add	r3, sp, #616	; 0x268
 800d34e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d352:	ec57 6b10 	vmov	r6, r7, d0
 800d356:	00ec      	lsls	r4, r5, #3
 800d358:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d35c:	46aa      	mov	sl, r5
 800d35e:	f1ba 0f00 	cmp.w	sl, #0
 800d362:	f280 80d6 	bge.w	800d512 <__kernel_rem_pio2+0x472>
 800d366:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d3b8 <__kernel_rem_pio2+0x318>
 800d36a:	462e      	mov	r6, r5
 800d36c:	2e00      	cmp	r6, #0
 800d36e:	f2c0 8104 	blt.w	800d57a <__kernel_rem_pio2+0x4da>
 800d372:	ab72      	add	r3, sp, #456	; 0x1c8
 800d374:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d378:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d3e0 <__kernel_rem_pio2+0x340>
 800d37c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d380:	f04f 0800 	mov.w	r8, #0
 800d384:	1baf      	subs	r7, r5, r6
 800d386:	e0ea      	b.n	800d55e <__kernel_rem_pio2+0x4be>
 800d388:	f04f 0b02 	mov.w	fp, #2
 800d38c:	e759      	b.n	800d242 <__kernel_rem_pio2+0x1a2>
 800d38e:	f8d8 3000 	ldr.w	r3, [r8]
 800d392:	b955      	cbnz	r5, 800d3aa <__kernel_rem_pio2+0x30a>
 800d394:	b123      	cbz	r3, 800d3a0 <__kernel_rem_pio2+0x300>
 800d396:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d39a:	f8c8 3000 	str.w	r3, [r8]
 800d39e:	2301      	movs	r3, #1
 800d3a0:	3201      	adds	r2, #1
 800d3a2:	f108 0804 	add.w	r8, r8, #4
 800d3a6:	461d      	mov	r5, r3
 800d3a8:	e752      	b.n	800d250 <__kernel_rem_pio2+0x1b0>
 800d3aa:	1acb      	subs	r3, r1, r3
 800d3ac:	f8c8 3000 	str.w	r3, [r8]
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	e7f5      	b.n	800d3a0 <__kernel_rem_pio2+0x300>
 800d3b4:	f3af 8000 	nop.w
	...
 800d3c4:	3ff00000 	.word	0x3ff00000
 800d3c8:	0800e420 	.word	0x0800e420
 800d3cc:	40200000 	.word	0x40200000
 800d3d0:	3ff00000 	.word	0x3ff00000
 800d3d4:	3e700000 	.word	0x3e700000
 800d3d8:	41700000 	.word	0x41700000
 800d3dc:	3fe00000 	.word	0x3fe00000
 800d3e0:	0800e3e0 	.word	0x0800e3e0
 800d3e4:	1e62      	subs	r2, r4, #1
 800d3e6:	ab0e      	add	r3, sp, #56	; 0x38
 800d3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d3f0:	a90e      	add	r1, sp, #56	; 0x38
 800d3f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d3f6:	e739      	b.n	800d26c <__kernel_rem_pio2+0x1cc>
 800d3f8:	1e62      	subs	r2, r4, #1
 800d3fa:	ab0e      	add	r3, sp, #56	; 0x38
 800d3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d400:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d404:	e7f4      	b.n	800d3f0 <__kernel_rem_pio2+0x350>
 800d406:	a90e      	add	r1, sp, #56	; 0x38
 800d408:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	430a      	orrs	r2, r1
 800d410:	e789      	b.n	800d326 <__kernel_rem_pio2+0x286>
 800d412:	3301      	adds	r3, #1
 800d414:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d418:	2900      	cmp	r1, #0
 800d41a:	d0fa      	beq.n	800d412 <__kernel_rem_pio2+0x372>
 800d41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d41e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d422:	446a      	add	r2, sp
 800d424:	3a98      	subs	r2, #152	; 0x98
 800d426:	920a      	str	r2, [sp, #40]	; 0x28
 800d428:	9a08      	ldr	r2, [sp, #32]
 800d42a:	18e3      	adds	r3, r4, r3
 800d42c:	18a5      	adds	r5, r4, r2
 800d42e:	aa22      	add	r2, sp, #136	; 0x88
 800d430:	f104 0801 	add.w	r8, r4, #1
 800d434:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d438:	9304      	str	r3, [sp, #16]
 800d43a:	9b04      	ldr	r3, [sp, #16]
 800d43c:	4543      	cmp	r3, r8
 800d43e:	da04      	bge.n	800d44a <__kernel_rem_pio2+0x3aa>
 800d440:	461c      	mov	r4, r3
 800d442:	e6a3      	b.n	800d18c <__kernel_rem_pio2+0xec>
 800d444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d446:	2301      	movs	r3, #1
 800d448:	e7e4      	b.n	800d414 <__kernel_rem_pio2+0x374>
 800d44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d44c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d450:	f7f3 f888 	bl	8000564 <__aeabi_i2d>
 800d454:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d45a:	46ab      	mov	fp, r5
 800d45c:	461c      	mov	r4, r3
 800d45e:	f04f 0900 	mov.w	r9, #0
 800d462:	2600      	movs	r6, #0
 800d464:	2700      	movs	r7, #0
 800d466:	9b06      	ldr	r3, [sp, #24]
 800d468:	4599      	cmp	r9, r3
 800d46a:	dd06      	ble.n	800d47a <__kernel_rem_pio2+0x3da>
 800d46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d46e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d472:	f108 0801 	add.w	r8, r8, #1
 800d476:	930a      	str	r3, [sp, #40]	; 0x28
 800d478:	e7df      	b.n	800d43a <__kernel_rem_pio2+0x39a>
 800d47a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d47e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d482:	f7f3 f8d9 	bl	8000638 <__aeabi_dmul>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	4630      	mov	r0, r6
 800d48c:	4639      	mov	r1, r7
 800d48e:	f7f2 ff1d 	bl	80002cc <__adddf3>
 800d492:	f109 0901 	add.w	r9, r9, #1
 800d496:	4606      	mov	r6, r0
 800d498:	460f      	mov	r7, r1
 800d49a:	e7e4      	b.n	800d466 <__kernel_rem_pio2+0x3c6>
 800d49c:	3d01      	subs	r5, #1
 800d49e:	e748      	b.n	800d332 <__kernel_rem_pio2+0x292>
 800d4a0:	ec47 6b10 	vmov	d0, r6, r7
 800d4a4:	f1ca 0000 	rsb	r0, sl, #0
 800d4a8:	f000 fbd6 	bl	800dc58 <scalbn>
 800d4ac:	ec57 6b10 	vmov	r6, r7, d0
 800d4b0:	4ba0      	ldr	r3, [pc, #640]	; (800d734 <__kernel_rem_pio2+0x694>)
 800d4b2:	ee10 0a10 	vmov	r0, s0
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	f7f3 fb43 	bl	8000b44 <__aeabi_dcmpge>
 800d4be:	b1f8      	cbz	r0, 800d500 <__kernel_rem_pio2+0x460>
 800d4c0:	4b9d      	ldr	r3, [pc, #628]	; (800d738 <__kernel_rem_pio2+0x698>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	f7f3 f8b6 	bl	8000638 <__aeabi_dmul>
 800d4cc:	f7f3 fb64 	bl	8000b98 <__aeabi_d2iz>
 800d4d0:	4680      	mov	r8, r0
 800d4d2:	f7f3 f847 	bl	8000564 <__aeabi_i2d>
 800d4d6:	4b97      	ldr	r3, [pc, #604]	; (800d734 <__kernel_rem_pio2+0x694>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f7f3 f8ad 	bl	8000638 <__aeabi_dmul>
 800d4de:	460b      	mov	r3, r1
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7f2 feef 	bl	80002c8 <__aeabi_dsub>
 800d4ea:	f7f3 fb55 	bl	8000b98 <__aeabi_d2iz>
 800d4ee:	1c65      	adds	r5, r4, #1
 800d4f0:	ab0e      	add	r3, sp, #56	; 0x38
 800d4f2:	f10a 0a18 	add.w	sl, sl, #24
 800d4f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d4fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d4fe:	e720      	b.n	800d342 <__kernel_rem_pio2+0x2a2>
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	f7f3 fb48 	bl	8000b98 <__aeabi_d2iz>
 800d508:	ab0e      	add	r3, sp, #56	; 0x38
 800d50a:	4625      	mov	r5, r4
 800d50c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d510:	e717      	b.n	800d342 <__kernel_rem_pio2+0x2a2>
 800d512:	ab0e      	add	r3, sp, #56	; 0x38
 800d514:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d518:	f7f3 f824 	bl	8000564 <__aeabi_i2d>
 800d51c:	4632      	mov	r2, r6
 800d51e:	463b      	mov	r3, r7
 800d520:	f7f3 f88a 	bl	8000638 <__aeabi_dmul>
 800d524:	4b84      	ldr	r3, [pc, #528]	; (800d738 <__kernel_rem_pio2+0x698>)
 800d526:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d52a:	2200      	movs	r2, #0
 800d52c:	4630      	mov	r0, r6
 800d52e:	4639      	mov	r1, r7
 800d530:	f7f3 f882 	bl	8000638 <__aeabi_dmul>
 800d534:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d538:	4606      	mov	r6, r0
 800d53a:	460f      	mov	r7, r1
 800d53c:	e70f      	b.n	800d35e <__kernel_rem_pio2+0x2be>
 800d53e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d542:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d546:	f7f3 f877 	bl	8000638 <__aeabi_dmul>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d552:	f7f2 febb 	bl	80002cc <__adddf3>
 800d556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d55a:	f108 0801 	add.w	r8, r8, #1
 800d55e:	9b02      	ldr	r3, [sp, #8]
 800d560:	4598      	cmp	r8, r3
 800d562:	dc01      	bgt.n	800d568 <__kernel_rem_pio2+0x4c8>
 800d564:	45b8      	cmp	r8, r7
 800d566:	ddea      	ble.n	800d53e <__kernel_rem_pio2+0x49e>
 800d568:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d56c:	ab4a      	add	r3, sp, #296	; 0x128
 800d56e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d572:	ed87 7b00 	vstr	d7, [r7]
 800d576:	3e01      	subs	r6, #1
 800d578:	e6f8      	b.n	800d36c <__kernel_rem_pio2+0x2cc>
 800d57a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	dc0b      	bgt.n	800d598 <__kernel_rem_pio2+0x4f8>
 800d580:	2b00      	cmp	r3, #0
 800d582:	dc35      	bgt.n	800d5f0 <__kernel_rem_pio2+0x550>
 800d584:	d059      	beq.n	800d63a <__kernel_rem_pio2+0x59a>
 800d586:	9b04      	ldr	r3, [sp, #16]
 800d588:	f003 0007 	and.w	r0, r3, #7
 800d58c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d590:	ecbd 8b02 	vpop	{d8}
 800d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d598:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d1f3      	bne.n	800d586 <__kernel_rem_pio2+0x4e6>
 800d59e:	ab4a      	add	r3, sp, #296	; 0x128
 800d5a0:	4423      	add	r3, r4
 800d5a2:	9306      	str	r3, [sp, #24]
 800d5a4:	461c      	mov	r4, r3
 800d5a6:	469a      	mov	sl, r3
 800d5a8:	9502      	str	r5, [sp, #8]
 800d5aa:	9b02      	ldr	r3, [sp, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f1aa 0a08 	sub.w	sl, sl, #8
 800d5b2:	dc6b      	bgt.n	800d68c <__kernel_rem_pio2+0x5ec>
 800d5b4:	46aa      	mov	sl, r5
 800d5b6:	f1ba 0f01 	cmp.w	sl, #1
 800d5ba:	f1a4 0408 	sub.w	r4, r4, #8
 800d5be:	f300 8085 	bgt.w	800d6cc <__kernel_rem_pio2+0x62c>
 800d5c2:	9c06      	ldr	r4, [sp, #24]
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	3408      	adds	r4, #8
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	2d01      	cmp	r5, #1
 800d5cc:	f300 809d 	bgt.w	800d70a <__kernel_rem_pio2+0x66a>
 800d5d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d5d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d5d8:	f1bb 0f00 	cmp.w	fp, #0
 800d5dc:	f040 809b 	bne.w	800d716 <__kernel_rem_pio2+0x676>
 800d5e0:	9b01      	ldr	r3, [sp, #4]
 800d5e2:	e9c3 5600 	strd	r5, r6, [r3]
 800d5e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d5ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d5ee:	e7ca      	b.n	800d586 <__kernel_rem_pio2+0x4e6>
 800d5f0:	3408      	adds	r4, #8
 800d5f2:	ab4a      	add	r3, sp, #296	; 0x128
 800d5f4:	441c      	add	r4, r3
 800d5f6:	462e      	mov	r6, r5
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	2e00      	cmp	r6, #0
 800d5fe:	da36      	bge.n	800d66e <__kernel_rem_pio2+0x5ce>
 800d600:	f1bb 0f00 	cmp.w	fp, #0
 800d604:	d039      	beq.n	800d67a <__kernel_rem_pio2+0x5da>
 800d606:	4602      	mov	r2, r0
 800d608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d60c:	9c01      	ldr	r4, [sp, #4]
 800d60e:	e9c4 2300 	strd	r2, r3, [r4]
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d61a:	f7f2 fe55 	bl	80002c8 <__aeabi_dsub>
 800d61e:	ae4c      	add	r6, sp, #304	; 0x130
 800d620:	2401      	movs	r4, #1
 800d622:	42a5      	cmp	r5, r4
 800d624:	da2c      	bge.n	800d680 <__kernel_rem_pio2+0x5e0>
 800d626:	f1bb 0f00 	cmp.w	fp, #0
 800d62a:	d002      	beq.n	800d632 <__kernel_rem_pio2+0x592>
 800d62c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d630:	4619      	mov	r1, r3
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d638:	e7a5      	b.n	800d586 <__kernel_rem_pio2+0x4e6>
 800d63a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d63e:	eb0d 0403 	add.w	r4, sp, r3
 800d642:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d646:	2000      	movs	r0, #0
 800d648:	2100      	movs	r1, #0
 800d64a:	2d00      	cmp	r5, #0
 800d64c:	da09      	bge.n	800d662 <__kernel_rem_pio2+0x5c2>
 800d64e:	f1bb 0f00 	cmp.w	fp, #0
 800d652:	d002      	beq.n	800d65a <__kernel_rem_pio2+0x5ba>
 800d654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d658:	4619      	mov	r1, r3
 800d65a:	9b01      	ldr	r3, [sp, #4]
 800d65c:	e9c3 0100 	strd	r0, r1, [r3]
 800d660:	e791      	b.n	800d586 <__kernel_rem_pio2+0x4e6>
 800d662:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d666:	f7f2 fe31 	bl	80002cc <__adddf3>
 800d66a:	3d01      	subs	r5, #1
 800d66c:	e7ed      	b.n	800d64a <__kernel_rem_pio2+0x5aa>
 800d66e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d672:	f7f2 fe2b 	bl	80002cc <__adddf3>
 800d676:	3e01      	subs	r6, #1
 800d678:	e7c0      	b.n	800d5fc <__kernel_rem_pio2+0x55c>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	e7c5      	b.n	800d60c <__kernel_rem_pio2+0x56c>
 800d680:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d684:	f7f2 fe22 	bl	80002cc <__adddf3>
 800d688:	3401      	adds	r4, #1
 800d68a:	e7ca      	b.n	800d622 <__kernel_rem_pio2+0x582>
 800d68c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d690:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d694:	9b02      	ldr	r3, [sp, #8]
 800d696:	3b01      	subs	r3, #1
 800d698:	9302      	str	r3, [sp, #8]
 800d69a:	4632      	mov	r2, r6
 800d69c:	463b      	mov	r3, r7
 800d69e:	4640      	mov	r0, r8
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	f7f2 fe13 	bl	80002cc <__adddf3>
 800d6a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4640      	mov	r0, r8
 800d6b0:	4649      	mov	r1, r9
 800d6b2:	f7f2 fe09 	bl	80002c8 <__aeabi_dsub>
 800d6b6:	4632      	mov	r2, r6
 800d6b8:	463b      	mov	r3, r7
 800d6ba:	f7f2 fe07 	bl	80002cc <__adddf3>
 800d6be:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d6c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d6c6:	ed8a 7b00 	vstr	d7, [sl]
 800d6ca:	e76e      	b.n	800d5aa <__kernel_rem_pio2+0x50a>
 800d6cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d6d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d6d4:	4640      	mov	r0, r8
 800d6d6:	4632      	mov	r2, r6
 800d6d8:	463b      	mov	r3, r7
 800d6da:	4649      	mov	r1, r9
 800d6dc:	f7f2 fdf6 	bl	80002cc <__adddf3>
 800d6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	4640      	mov	r0, r8
 800d6ea:	4649      	mov	r1, r9
 800d6ec:	f7f2 fdec 	bl	80002c8 <__aeabi_dsub>
 800d6f0:	4632      	mov	r2, r6
 800d6f2:	463b      	mov	r3, r7
 800d6f4:	f7f2 fdea 	bl	80002cc <__adddf3>
 800d6f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d700:	ed84 7b00 	vstr	d7, [r4]
 800d704:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d708:	e755      	b.n	800d5b6 <__kernel_rem_pio2+0x516>
 800d70a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d70e:	f7f2 fddd 	bl	80002cc <__adddf3>
 800d712:	3d01      	subs	r5, #1
 800d714:	e759      	b.n	800d5ca <__kernel_rem_pio2+0x52a>
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	9a01      	ldr	r2, [sp, #4]
 800d71a:	601d      	str	r5, [r3, #0]
 800d71c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d720:	605c      	str	r4, [r3, #4]
 800d722:	609f      	str	r7, [r3, #8]
 800d724:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d728:	60d3      	str	r3, [r2, #12]
 800d72a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d72e:	6110      	str	r0, [r2, #16]
 800d730:	6153      	str	r3, [r2, #20]
 800d732:	e728      	b.n	800d586 <__kernel_rem_pio2+0x4e6>
 800d734:	41700000 	.word	0x41700000
 800d738:	3e700000 	.word	0x3e700000
 800d73c:	00000000 	.word	0x00000000

0800d740 <__kernel_tan>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	ed2d 8b06 	vpush	{d8-d10}
 800d748:	ec5b ab10 	vmov	sl, fp, d0
 800d74c:	4be0      	ldr	r3, [pc, #896]	; (800dad0 <__kernel_tan+0x390>)
 800d74e:	b083      	sub	sp, #12
 800d750:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d754:	429f      	cmp	r7, r3
 800d756:	ec59 8b11 	vmov	r8, r9, d1
 800d75a:	4606      	mov	r6, r0
 800d75c:	f8cd b000 	str.w	fp, [sp]
 800d760:	dc61      	bgt.n	800d826 <__kernel_tan+0xe6>
 800d762:	ee10 0a10 	vmov	r0, s0
 800d766:	4659      	mov	r1, fp
 800d768:	f7f3 fa16 	bl	8000b98 <__aeabi_d2iz>
 800d76c:	4605      	mov	r5, r0
 800d76e:	2800      	cmp	r0, #0
 800d770:	f040 8083 	bne.w	800d87a <__kernel_tan+0x13a>
 800d774:	1c73      	adds	r3, r6, #1
 800d776:	4652      	mov	r2, sl
 800d778:	4313      	orrs	r3, r2
 800d77a:	433b      	orrs	r3, r7
 800d77c:	d112      	bne.n	800d7a4 <__kernel_tan+0x64>
 800d77e:	ec4b ab10 	vmov	d0, sl, fp
 800d782:	f7ff fa41 	bl	800cc08 <fabs>
 800d786:	49d3      	ldr	r1, [pc, #844]	; (800dad4 <__kernel_tan+0x394>)
 800d788:	ec53 2b10 	vmov	r2, r3, d0
 800d78c:	2000      	movs	r0, #0
 800d78e:	f7f3 f87d 	bl	800088c <__aeabi_ddiv>
 800d792:	4682      	mov	sl, r0
 800d794:	468b      	mov	fp, r1
 800d796:	ec4b ab10 	vmov	d0, sl, fp
 800d79a:	b003      	add	sp, #12
 800d79c:	ecbd 8b06 	vpop	{d8-d10}
 800d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a4:	2e01      	cmp	r6, #1
 800d7a6:	d0f6      	beq.n	800d796 <__kernel_tan+0x56>
 800d7a8:	4642      	mov	r2, r8
 800d7aa:	464b      	mov	r3, r9
 800d7ac:	4650      	mov	r0, sl
 800d7ae:	4659      	mov	r1, fp
 800d7b0:	f7f2 fd8c 	bl	80002cc <__adddf3>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	460f      	mov	r7, r1
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	49c6      	ldr	r1, [pc, #792]	; (800dad8 <__kernel_tan+0x398>)
 800d7be:	f7f3 f865 	bl	800088c <__aeabi_ddiv>
 800d7c2:	e9cd 0100 	strd	r0, r1, [sp]
 800d7c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ca:	462e      	mov	r6, r5
 800d7cc:	4652      	mov	r2, sl
 800d7ce:	462c      	mov	r4, r5
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	461d      	mov	r5, r3
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	465b      	mov	r3, fp
 800d7d8:	f7f2 fd76 	bl	80002c8 <__aeabi_dsub>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f7f2 fd70 	bl	80002c8 <__aeabi_dsub>
 800d7e8:	4632      	mov	r2, r6
 800d7ea:	462b      	mov	r3, r5
 800d7ec:	f7f2 ff24 	bl	8000638 <__aeabi_dmul>
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	4680      	mov	r8, r0
 800d7f4:	4689      	mov	r9, r1
 800d7f6:	462b      	mov	r3, r5
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	4639      	mov	r1, r7
 800d7fc:	f7f2 ff1c 	bl	8000638 <__aeabi_dmul>
 800d800:	4bb4      	ldr	r3, [pc, #720]	; (800dad4 <__kernel_tan+0x394>)
 800d802:	2200      	movs	r2, #0
 800d804:	f7f2 fd62 	bl	80002cc <__adddf3>
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	4640      	mov	r0, r8
 800d80e:	4649      	mov	r1, r9
 800d810:	f7f2 fd5c 	bl	80002cc <__adddf3>
 800d814:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d818:	f7f2 ff0e 	bl	8000638 <__aeabi_dmul>
 800d81c:	4622      	mov	r2, r4
 800d81e:	462b      	mov	r3, r5
 800d820:	f7f2 fd54 	bl	80002cc <__adddf3>
 800d824:	e7b5      	b.n	800d792 <__kernel_tan+0x52>
 800d826:	4bad      	ldr	r3, [pc, #692]	; (800dadc <__kernel_tan+0x39c>)
 800d828:	429f      	cmp	r7, r3
 800d82a:	dd26      	ble.n	800d87a <__kernel_tan+0x13a>
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	da09      	bge.n	800d846 <__kernel_tan+0x106>
 800d832:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d836:	469b      	mov	fp, r3
 800d838:	ee10 aa10 	vmov	sl, s0
 800d83c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d840:	ee11 8a10 	vmov	r8, s2
 800d844:	4699      	mov	r9, r3
 800d846:	4652      	mov	r2, sl
 800d848:	465b      	mov	r3, fp
 800d84a:	a183      	add	r1, pc, #524	; (adr r1, 800da58 <__kernel_tan+0x318>)
 800d84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d850:	f7f2 fd3a 	bl	80002c8 <__aeabi_dsub>
 800d854:	4642      	mov	r2, r8
 800d856:	464b      	mov	r3, r9
 800d858:	4604      	mov	r4, r0
 800d85a:	460d      	mov	r5, r1
 800d85c:	a180      	add	r1, pc, #512	; (adr r1, 800da60 <__kernel_tan+0x320>)
 800d85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d862:	f7f2 fd31 	bl	80002c8 <__aeabi_dsub>
 800d866:	4622      	mov	r2, r4
 800d868:	462b      	mov	r3, r5
 800d86a:	f7f2 fd2f 	bl	80002cc <__adddf3>
 800d86e:	f04f 0800 	mov.w	r8, #0
 800d872:	4682      	mov	sl, r0
 800d874:	468b      	mov	fp, r1
 800d876:	f04f 0900 	mov.w	r9, #0
 800d87a:	4652      	mov	r2, sl
 800d87c:	465b      	mov	r3, fp
 800d87e:	4650      	mov	r0, sl
 800d880:	4659      	mov	r1, fp
 800d882:	f7f2 fed9 	bl	8000638 <__aeabi_dmul>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	ec43 2b18 	vmov	d8, r2, r3
 800d88e:	f7f2 fed3 	bl	8000638 <__aeabi_dmul>
 800d892:	ec53 2b18 	vmov	r2, r3, d8
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	4650      	mov	r0, sl
 800d89c:	4659      	mov	r1, fp
 800d89e:	f7f2 fecb 	bl	8000638 <__aeabi_dmul>
 800d8a2:	a371      	add	r3, pc, #452	; (adr r3, 800da68 <__kernel_tan+0x328>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	ec41 0b19 	vmov	d9, r0, r1
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	f7f2 fec2 	bl	8000638 <__aeabi_dmul>
 800d8b4:	a36e      	add	r3, pc, #440	; (adr r3, 800da70 <__kernel_tan+0x330>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	f7f2 fd07 	bl	80002cc <__adddf3>
 800d8be:	4622      	mov	r2, r4
 800d8c0:	462b      	mov	r3, r5
 800d8c2:	f7f2 feb9 	bl	8000638 <__aeabi_dmul>
 800d8c6:	a36c      	add	r3, pc, #432	; (adr r3, 800da78 <__kernel_tan+0x338>)
 800d8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8cc:	f7f2 fcfe 	bl	80002cc <__adddf3>
 800d8d0:	4622      	mov	r2, r4
 800d8d2:	462b      	mov	r3, r5
 800d8d4:	f7f2 feb0 	bl	8000638 <__aeabi_dmul>
 800d8d8:	a369      	add	r3, pc, #420	; (adr r3, 800da80 <__kernel_tan+0x340>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fcf5 	bl	80002cc <__adddf3>
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	462b      	mov	r3, r5
 800d8e6:	f7f2 fea7 	bl	8000638 <__aeabi_dmul>
 800d8ea:	a367      	add	r3, pc, #412	; (adr r3, 800da88 <__kernel_tan+0x348>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fcec 	bl	80002cc <__adddf3>
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	f7f2 fe9e 	bl	8000638 <__aeabi_dmul>
 800d8fc:	a364      	add	r3, pc, #400	; (adr r3, 800da90 <__kernel_tan+0x350>)
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f7f2 fce3 	bl	80002cc <__adddf3>
 800d906:	ec53 2b18 	vmov	r2, r3, d8
 800d90a:	f7f2 fe95 	bl	8000638 <__aeabi_dmul>
 800d90e:	a362      	add	r3, pc, #392	; (adr r3, 800da98 <__kernel_tan+0x358>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	ec41 0b1a 	vmov	d10, r0, r1
 800d918:	4620      	mov	r0, r4
 800d91a:	4629      	mov	r1, r5
 800d91c:	f7f2 fe8c 	bl	8000638 <__aeabi_dmul>
 800d920:	a35f      	add	r3, pc, #380	; (adr r3, 800daa0 <__kernel_tan+0x360>)
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	f7f2 fcd1 	bl	80002cc <__adddf3>
 800d92a:	4622      	mov	r2, r4
 800d92c:	462b      	mov	r3, r5
 800d92e:	f7f2 fe83 	bl	8000638 <__aeabi_dmul>
 800d932:	a35d      	add	r3, pc, #372	; (adr r3, 800daa8 <__kernel_tan+0x368>)
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	f7f2 fcc8 	bl	80002cc <__adddf3>
 800d93c:	4622      	mov	r2, r4
 800d93e:	462b      	mov	r3, r5
 800d940:	f7f2 fe7a 	bl	8000638 <__aeabi_dmul>
 800d944:	a35a      	add	r3, pc, #360	; (adr r3, 800dab0 <__kernel_tan+0x370>)
 800d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94a:	f7f2 fcbf 	bl	80002cc <__adddf3>
 800d94e:	4622      	mov	r2, r4
 800d950:	462b      	mov	r3, r5
 800d952:	f7f2 fe71 	bl	8000638 <__aeabi_dmul>
 800d956:	a358      	add	r3, pc, #352	; (adr r3, 800dab8 <__kernel_tan+0x378>)
 800d958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95c:	f7f2 fcb6 	bl	80002cc <__adddf3>
 800d960:	4622      	mov	r2, r4
 800d962:	462b      	mov	r3, r5
 800d964:	f7f2 fe68 	bl	8000638 <__aeabi_dmul>
 800d968:	a355      	add	r3, pc, #340	; (adr r3, 800dac0 <__kernel_tan+0x380>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 fcad 	bl	80002cc <__adddf3>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	ec51 0b1a 	vmov	r0, r1, d10
 800d97a:	f7f2 fca7 	bl	80002cc <__adddf3>
 800d97e:	ec53 2b19 	vmov	r2, r3, d9
 800d982:	f7f2 fe59 	bl	8000638 <__aeabi_dmul>
 800d986:	4642      	mov	r2, r8
 800d988:	464b      	mov	r3, r9
 800d98a:	f7f2 fc9f 	bl	80002cc <__adddf3>
 800d98e:	ec53 2b18 	vmov	r2, r3, d8
 800d992:	f7f2 fe51 	bl	8000638 <__aeabi_dmul>
 800d996:	4642      	mov	r2, r8
 800d998:	464b      	mov	r3, r9
 800d99a:	f7f2 fc97 	bl	80002cc <__adddf3>
 800d99e:	a34a      	add	r3, pc, #296	; (adr r3, 800dac8 <__kernel_tan+0x388>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	460d      	mov	r5, r1
 800d9a8:	ec51 0b19 	vmov	r0, r1, d9
 800d9ac:	f7f2 fe44 	bl	8000638 <__aeabi_dmul>
 800d9b0:	4622      	mov	r2, r4
 800d9b2:	462b      	mov	r3, r5
 800d9b4:	f7f2 fc8a 	bl	80002cc <__adddf3>
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	ec41 0b18 	vmov	d8, r0, r1
 800d9be:	4602      	mov	r2, r0
 800d9c0:	4659      	mov	r1, fp
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	f7f2 fc82 	bl	80002cc <__adddf3>
 800d9c8:	4b44      	ldr	r3, [pc, #272]	; (800dadc <__kernel_tan+0x39c>)
 800d9ca:	429f      	cmp	r7, r3
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	460d      	mov	r5, r1
 800d9d0:	f340 8086 	ble.w	800dae0 <__kernel_tan+0x3a0>
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f7f2 fdc5 	bl	8000564 <__aeabi_i2d>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	4680      	mov	r8, r0
 800d9de:	4689      	mov	r9, r1
 800d9e0:	462b      	mov	r3, r5
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	f7f2 fe27 	bl	8000638 <__aeabi_dmul>
 800d9ea:	4642      	mov	r2, r8
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	460f      	mov	r7, r1
 800d9f0:	464b      	mov	r3, r9
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	f7f2 fc69 	bl	80002cc <__adddf3>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4630      	mov	r0, r6
 800da00:	4639      	mov	r1, r7
 800da02:	f7f2 ff43 	bl	800088c <__aeabi_ddiv>
 800da06:	ec53 2b18 	vmov	r2, r3, d8
 800da0a:	f7f2 fc5d 	bl	80002c8 <__aeabi_dsub>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	4650      	mov	r0, sl
 800da14:	4659      	mov	r1, fp
 800da16:	f7f2 fc57 	bl	80002c8 <__aeabi_dsub>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	f7f2 fc55 	bl	80002cc <__adddf3>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4640      	mov	r0, r8
 800da28:	4649      	mov	r1, r9
 800da2a:	f7f2 fc4d 	bl	80002c8 <__aeabi_dsub>
 800da2e:	9b00      	ldr	r3, [sp, #0]
 800da30:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800da34:	f00a 0a02 	and.w	sl, sl, #2
 800da38:	4604      	mov	r4, r0
 800da3a:	f1ca 0001 	rsb	r0, sl, #1
 800da3e:	460d      	mov	r5, r1
 800da40:	f7f2 fd90 	bl	8000564 <__aeabi_i2d>
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4620      	mov	r0, r4
 800da4a:	4629      	mov	r1, r5
 800da4c:	f7f2 fdf4 	bl	8000638 <__aeabi_dmul>
 800da50:	e69f      	b.n	800d792 <__kernel_tan+0x52>
 800da52:	bf00      	nop
 800da54:	f3af 8000 	nop.w
 800da58:	54442d18 	.word	0x54442d18
 800da5c:	3fe921fb 	.word	0x3fe921fb
 800da60:	33145c07 	.word	0x33145c07
 800da64:	3c81a626 	.word	0x3c81a626
 800da68:	74bf7ad4 	.word	0x74bf7ad4
 800da6c:	3efb2a70 	.word	0x3efb2a70
 800da70:	32f0a7e9 	.word	0x32f0a7e9
 800da74:	3f12b80f 	.word	0x3f12b80f
 800da78:	1a8d1068 	.word	0x1a8d1068
 800da7c:	3f3026f7 	.word	0x3f3026f7
 800da80:	fee08315 	.word	0xfee08315
 800da84:	3f57dbc8 	.word	0x3f57dbc8
 800da88:	e96e8493 	.word	0xe96e8493
 800da8c:	3f8226e3 	.word	0x3f8226e3
 800da90:	1bb341fe 	.word	0x1bb341fe
 800da94:	3faba1ba 	.word	0x3faba1ba
 800da98:	db605373 	.word	0xdb605373
 800da9c:	bef375cb 	.word	0xbef375cb
 800daa0:	a03792a6 	.word	0xa03792a6
 800daa4:	3f147e88 	.word	0x3f147e88
 800daa8:	f2f26501 	.word	0xf2f26501
 800daac:	3f4344d8 	.word	0x3f4344d8
 800dab0:	c9560328 	.word	0xc9560328
 800dab4:	3f6d6d22 	.word	0x3f6d6d22
 800dab8:	8406d637 	.word	0x8406d637
 800dabc:	3f9664f4 	.word	0x3f9664f4
 800dac0:	1110fe7a 	.word	0x1110fe7a
 800dac4:	3fc11111 	.word	0x3fc11111
 800dac8:	55555563 	.word	0x55555563
 800dacc:	3fd55555 	.word	0x3fd55555
 800dad0:	3e2fffff 	.word	0x3e2fffff
 800dad4:	3ff00000 	.word	0x3ff00000
 800dad8:	bff00000 	.word	0xbff00000
 800dadc:	3fe59427 	.word	0x3fe59427
 800dae0:	2e01      	cmp	r6, #1
 800dae2:	d02f      	beq.n	800db44 <__kernel_tan+0x404>
 800dae4:	460f      	mov	r7, r1
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4689      	mov	r9, r1
 800daec:	2000      	movs	r0, #0
 800daee:	4917      	ldr	r1, [pc, #92]	; (800db4c <__kernel_tan+0x40c>)
 800daf0:	f7f2 fecc 	bl	800088c <__aeabi_ddiv>
 800daf4:	2600      	movs	r6, #0
 800daf6:	e9cd 0100 	strd	r0, r1, [sp]
 800dafa:	4652      	mov	r2, sl
 800dafc:	465b      	mov	r3, fp
 800dafe:	4630      	mov	r0, r6
 800db00:	4639      	mov	r1, r7
 800db02:	f7f2 fbe1 	bl	80002c8 <__aeabi_dsub>
 800db06:	e9dd 4500 	ldrd	r4, r5, [sp]
 800db0a:	4602      	mov	r2, r0
 800db0c:	460b      	mov	r3, r1
 800db0e:	ec51 0b18 	vmov	r0, r1, d8
 800db12:	f7f2 fbd9 	bl	80002c8 <__aeabi_dsub>
 800db16:	4632      	mov	r2, r6
 800db18:	462b      	mov	r3, r5
 800db1a:	f7f2 fd8d 	bl	8000638 <__aeabi_dmul>
 800db1e:	46b0      	mov	r8, r6
 800db20:	460f      	mov	r7, r1
 800db22:	4642      	mov	r2, r8
 800db24:	462b      	mov	r3, r5
 800db26:	4634      	mov	r4, r6
 800db28:	4649      	mov	r1, r9
 800db2a:	4606      	mov	r6, r0
 800db2c:	4640      	mov	r0, r8
 800db2e:	f7f2 fd83 	bl	8000638 <__aeabi_dmul>
 800db32:	4b07      	ldr	r3, [pc, #28]	; (800db50 <__kernel_tan+0x410>)
 800db34:	2200      	movs	r2, #0
 800db36:	f7f2 fbc9 	bl	80002cc <__adddf3>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4630      	mov	r0, r6
 800db40:	4639      	mov	r1, r7
 800db42:	e665      	b.n	800d810 <__kernel_tan+0xd0>
 800db44:	4682      	mov	sl, r0
 800db46:	468b      	mov	fp, r1
 800db48:	e625      	b.n	800d796 <__kernel_tan+0x56>
 800db4a:	bf00      	nop
 800db4c:	bff00000 	.word	0xbff00000
 800db50:	3ff00000 	.word	0x3ff00000
 800db54:	00000000 	.word	0x00000000

0800db58 <floor>:
 800db58:	ec51 0b10 	vmov	r0, r1, d0
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800db64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800db68:	2e13      	cmp	r6, #19
 800db6a:	ee10 5a10 	vmov	r5, s0
 800db6e:	ee10 8a10 	vmov	r8, s0
 800db72:	460c      	mov	r4, r1
 800db74:	dc32      	bgt.n	800dbdc <floor+0x84>
 800db76:	2e00      	cmp	r6, #0
 800db78:	da14      	bge.n	800dba4 <floor+0x4c>
 800db7a:	a333      	add	r3, pc, #204	; (adr r3, 800dc48 <floor+0xf0>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 fba4 	bl	80002cc <__adddf3>
 800db84:	2200      	movs	r2, #0
 800db86:	2300      	movs	r3, #0
 800db88:	f7f2 ffe6 	bl	8000b58 <__aeabi_dcmpgt>
 800db8c:	b138      	cbz	r0, 800db9e <floor+0x46>
 800db8e:	2c00      	cmp	r4, #0
 800db90:	da57      	bge.n	800dc42 <floor+0xea>
 800db92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800db96:	431d      	orrs	r5, r3
 800db98:	d001      	beq.n	800db9e <floor+0x46>
 800db9a:	4c2d      	ldr	r4, [pc, #180]	; (800dc50 <floor+0xf8>)
 800db9c:	2500      	movs	r5, #0
 800db9e:	4621      	mov	r1, r4
 800dba0:	4628      	mov	r0, r5
 800dba2:	e025      	b.n	800dbf0 <floor+0x98>
 800dba4:	4f2b      	ldr	r7, [pc, #172]	; (800dc54 <floor+0xfc>)
 800dba6:	4137      	asrs	r7, r6
 800dba8:	ea01 0307 	and.w	r3, r1, r7
 800dbac:	4303      	orrs	r3, r0
 800dbae:	d01f      	beq.n	800dbf0 <floor+0x98>
 800dbb0:	a325      	add	r3, pc, #148	; (adr r3, 800dc48 <floor+0xf0>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb89 	bl	80002cc <__adddf3>
 800dbba:	2200      	movs	r2, #0
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f7f2 ffcb 	bl	8000b58 <__aeabi_dcmpgt>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d0eb      	beq.n	800db9e <floor+0x46>
 800dbc6:	2c00      	cmp	r4, #0
 800dbc8:	bfbe      	ittt	lt
 800dbca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dbce:	fa43 f606 	asrlt.w	r6, r3, r6
 800dbd2:	19a4      	addlt	r4, r4, r6
 800dbd4:	ea24 0407 	bic.w	r4, r4, r7
 800dbd8:	2500      	movs	r5, #0
 800dbda:	e7e0      	b.n	800db9e <floor+0x46>
 800dbdc:	2e33      	cmp	r6, #51	; 0x33
 800dbde:	dd0b      	ble.n	800dbf8 <floor+0xa0>
 800dbe0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dbe4:	d104      	bne.n	800dbf0 <floor+0x98>
 800dbe6:	ee10 2a10 	vmov	r2, s0
 800dbea:	460b      	mov	r3, r1
 800dbec:	f7f2 fb6e 	bl	80002cc <__adddf3>
 800dbf0:	ec41 0b10 	vmov	d0, r0, r1
 800dbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800dc00:	fa23 f707 	lsr.w	r7, r3, r7
 800dc04:	4207      	tst	r7, r0
 800dc06:	d0f3      	beq.n	800dbf0 <floor+0x98>
 800dc08:	a30f      	add	r3, pc, #60	; (adr r3, 800dc48 <floor+0xf0>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	f7f2 fb5d 	bl	80002cc <__adddf3>
 800dc12:	2200      	movs	r2, #0
 800dc14:	2300      	movs	r3, #0
 800dc16:	f7f2 ff9f 	bl	8000b58 <__aeabi_dcmpgt>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d0bf      	beq.n	800db9e <floor+0x46>
 800dc1e:	2c00      	cmp	r4, #0
 800dc20:	da02      	bge.n	800dc28 <floor+0xd0>
 800dc22:	2e14      	cmp	r6, #20
 800dc24:	d103      	bne.n	800dc2e <floor+0xd6>
 800dc26:	3401      	adds	r4, #1
 800dc28:	ea25 0507 	bic.w	r5, r5, r7
 800dc2c:	e7b7      	b.n	800db9e <floor+0x46>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dc34:	fa03 f606 	lsl.w	r6, r3, r6
 800dc38:	4435      	add	r5, r6
 800dc3a:	4545      	cmp	r5, r8
 800dc3c:	bf38      	it	cc
 800dc3e:	18e4      	addcc	r4, r4, r3
 800dc40:	e7f2      	b.n	800dc28 <floor+0xd0>
 800dc42:	2500      	movs	r5, #0
 800dc44:	462c      	mov	r4, r5
 800dc46:	e7aa      	b.n	800db9e <floor+0x46>
 800dc48:	8800759c 	.word	0x8800759c
 800dc4c:	7e37e43c 	.word	0x7e37e43c
 800dc50:	bff00000 	.word	0xbff00000
 800dc54:	000fffff 	.word	0x000fffff

0800dc58 <scalbn>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	ec55 4b10 	vmov	r4, r5, d0
 800dc5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dc62:	4606      	mov	r6, r0
 800dc64:	462b      	mov	r3, r5
 800dc66:	b99a      	cbnz	r2, 800dc90 <scalbn+0x38>
 800dc68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc6c:	4323      	orrs	r3, r4
 800dc6e:	d036      	beq.n	800dcde <scalbn+0x86>
 800dc70:	4b39      	ldr	r3, [pc, #228]	; (800dd58 <scalbn+0x100>)
 800dc72:	4629      	mov	r1, r5
 800dc74:	ee10 0a10 	vmov	r0, s0
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f7f2 fcdd 	bl	8000638 <__aeabi_dmul>
 800dc7e:	4b37      	ldr	r3, [pc, #220]	; (800dd5c <scalbn+0x104>)
 800dc80:	429e      	cmp	r6, r3
 800dc82:	4604      	mov	r4, r0
 800dc84:	460d      	mov	r5, r1
 800dc86:	da10      	bge.n	800dcaa <scalbn+0x52>
 800dc88:	a32b      	add	r3, pc, #172	; (adr r3, 800dd38 <scalbn+0xe0>)
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	e03a      	b.n	800dd06 <scalbn+0xae>
 800dc90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dc94:	428a      	cmp	r2, r1
 800dc96:	d10c      	bne.n	800dcb2 <scalbn+0x5a>
 800dc98:	ee10 2a10 	vmov	r2, s0
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 fb14 	bl	80002cc <__adddf3>
 800dca4:	4604      	mov	r4, r0
 800dca6:	460d      	mov	r5, r1
 800dca8:	e019      	b.n	800dcde <scalbn+0x86>
 800dcaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dcae:	460b      	mov	r3, r1
 800dcb0:	3a36      	subs	r2, #54	; 0x36
 800dcb2:	4432      	add	r2, r6
 800dcb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dcb8:	428a      	cmp	r2, r1
 800dcba:	dd08      	ble.n	800dcce <scalbn+0x76>
 800dcbc:	2d00      	cmp	r5, #0
 800dcbe:	a120      	add	r1, pc, #128	; (adr r1, 800dd40 <scalbn+0xe8>)
 800dcc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc4:	da1c      	bge.n	800dd00 <scalbn+0xa8>
 800dcc6:	a120      	add	r1, pc, #128	; (adr r1, 800dd48 <scalbn+0xf0>)
 800dcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dccc:	e018      	b.n	800dd00 <scalbn+0xa8>
 800dcce:	2a00      	cmp	r2, #0
 800dcd0:	dd08      	ble.n	800dce4 <scalbn+0x8c>
 800dcd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dcde:	ec45 4b10 	vmov	d0, r4, r5
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dce8:	da19      	bge.n	800dd1e <scalbn+0xc6>
 800dcea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dcee:	429e      	cmp	r6, r3
 800dcf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dcf4:	dd0a      	ble.n	800dd0c <scalbn+0xb4>
 800dcf6:	a112      	add	r1, pc, #72	; (adr r1, 800dd40 <scalbn+0xe8>)
 800dcf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1e2      	bne.n	800dcc6 <scalbn+0x6e>
 800dd00:	a30f      	add	r3, pc, #60	; (adr r3, 800dd40 <scalbn+0xe8>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	f7f2 fc97 	bl	8000638 <__aeabi_dmul>
 800dd0a:	e7cb      	b.n	800dca4 <scalbn+0x4c>
 800dd0c:	a10a      	add	r1, pc, #40	; (adr r1, 800dd38 <scalbn+0xe0>)
 800dd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0b8      	beq.n	800dc88 <scalbn+0x30>
 800dd16:	a10e      	add	r1, pc, #56	; (adr r1, 800dd50 <scalbn+0xf8>)
 800dd18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd1c:	e7b4      	b.n	800dc88 <scalbn+0x30>
 800dd1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd22:	3236      	adds	r2, #54	; 0x36
 800dd24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <scalbn+0x108>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	e7e8      	b.n	800dd06 <scalbn+0xae>
 800dd34:	f3af 8000 	nop.w
 800dd38:	c2f8f359 	.word	0xc2f8f359
 800dd3c:	01a56e1f 	.word	0x01a56e1f
 800dd40:	8800759c 	.word	0x8800759c
 800dd44:	7e37e43c 	.word	0x7e37e43c
 800dd48:	8800759c 	.word	0x8800759c
 800dd4c:	fe37e43c 	.word	0xfe37e43c
 800dd50:	c2f8f359 	.word	0xc2f8f359
 800dd54:	81a56e1f 	.word	0x81a56e1f
 800dd58:	43500000 	.word	0x43500000
 800dd5c:	ffff3cb0 	.word	0xffff3cb0
 800dd60:	3c900000 	.word	0x3c900000

0800dd64 <_init>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	bf00      	nop
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr

0800dd70 <_fini>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	bf00      	nop
 800dd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd76:	bc08      	pop	{r3}
 800dd78:	469e      	mov	lr, r3
 800dd7a:	4770      	bx	lr
